<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>6 Topics Developers Should Prepare for Coding Interviews</title>
      <author>javinpaul</author>
      <pubDate>Mon, 12 Jul 2021 15:51:32 +0000</pubDate>
      <link>https://dev.to/javinpaul/6-topics-developers-should-prepare-for-coding-interviews-2fim</link>
      <guid>https://dev.to/javinpaul/6-topics-developers-should-prepare-for-coding-interviews-2fim</guid>
      <description>&lt;p&gt;image_credit - Educative.io&lt;br&gt;
&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is no doubt cracking the Coding interviews of top tech companies like Google, Microsoft, and Amazon is very hard, but you can still crack it by carefully planning and preparing the essential skills which matter most like &lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;Data structures and Algorithms&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/05/top-20-system-design-interview-questions-answers-programming.html"&gt;System Design&lt;/a&gt;,&lt;a href="https://javarevisited.blogspot.com/2018/06/top-5-java-multithreading-and-concurrency-courses-experienced-programmers.html"&gt;Multithreading and Concurrency&lt;/a&gt;,&lt;a href="https://javarevisited.blogspot.com/2018/05/top-5-sql-and-database-courses-to-learn-online.html"&gt;SQL and Database design&lt;/a&gt;, and of course, &lt;strong&gt;problem-solving skills&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Being an author of Java and a programming blog, I often receive queries about &lt;strong&gt;how to prepare for coding interviews?&lt;/strong&gt; &lt;em&gt;How to pass Google or Microsoft Software Developer interviews?&lt;/em&gt; Or how can I get a software development job on Amazon or Facebook?&lt;/p&gt;

&lt;p&gt;After answering many of my readers one by one on Facebook and LinkedIn, I thought to put together a list of &lt;em&gt;essential topics for coding interviews&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This list will give a good head-start for your preparation for any tech company interview like Google and Amazon. However, even if you are not targeting Google and just want a Software developer job, you can still prepare these topics.&lt;/p&gt;

&lt;p&gt;In fact, preparing for tech giants like Google, Amazon, Apple, and Facebook means you are miles ahead of other candidates, and you will most likely secure many job offers from smaller firms, startups, and investment banks.&lt;/p&gt;

&lt;p&gt;That's why I suggest aiming higher because even if you don't get what you want, you will still get job offers that are desirable by many programmers.&lt;/p&gt;

&lt;p&gt;Another critical thing to note is that different interviews need different skills. For example, when you go for a &lt;a href="https://javarevisited.blogspot.com/2020/04/top-10-courses-to-crack-java-programming-interviews.html"&gt;Java developer interview&lt;/a&gt;, you are bound to know Java. Similarly, for a Python developer interview, it's expected you to know Python and some popular Python frameworks like &lt;a href="https://javarevisited.blogspot.com/2019/04/top-5-python-web-development-frameworks.html"&gt;Django&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2020/01/top-5-courses-to-learn-flask-for-web-development-with-python.html"&gt;Flask&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a Web developer, HTML, CSS, and JavaScript are core skills, and you will be grilled on those, apart from modern web development frameworks like &lt;a href="https://javarevisited.blogspot.com/2018/06/5-best-courses-to-learn-angular.html"&gt;Angular&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-online-courses-to-learn-vue.js-best.html"&gt;Vue.js&lt;/a&gt;, with a bit of &lt;a href="https://medium.com/javarevisited/7-free-courses-to-learn-node-js-in-2020-2f1dd6722b49"&gt;node.js&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;I'll not touch, that topic but I'll share essential skills that are required to pass all of those interviews. They are also known as core programming skills, and it's expected from every Software developer to know that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-essential-topics-for-coding-and-programming-interviews"&gt;
  &lt;/a&gt;
  5 Essential Topics for Coding and Programming Interviews
&lt;/h2&gt;

&lt;p&gt;Anyway, without wasting any more of your time, here is my list of topics you can prepare to boost your chances on Google, Amazon, and Microsoft Programming Job Interviews.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-data-structure"&gt;
  &lt;/a&gt;
  1. Data Structure
&lt;/h3&gt;

&lt;p&gt;As a programmer, it's Ok if you cannot write web apps using &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-courses-to-learn-django-in-2020.html"&gt;Django&lt;/a&gt; or &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React,&lt;/a&gt; but it's Not Ok if you don't know how a hash table works and when to use a list over an array? And, &lt;strong&gt;what advantages B-Tree offers over an array?&lt;/strong&gt; Data Structure and Algorithms are the core of computer science and programming, and it's expected for every software developer to have a solid knowledge of fundamental data structure.&lt;/p&gt;

&lt;p&gt;It's imperative to have a good understanding of data structure for writing a robust, performant application that your users will appreciate. &lt;/p&gt;

&lt;p&gt;Imagine, if Facebook or Google taking 1 minute to log you in, you will never go there, forget how important they are. Performance is critical, and unless you understand how your program is working and how your data is stored, you will not go anywhere.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927"&gt;&lt;em&gt;technical interviews&lt;/em&gt;&lt;/a&gt;, you will be asked to optimize your solution for time and space. You can't do that unless you have a solid understanding of how your code works and how data is stored and accessed.&lt;/p&gt;

&lt;p&gt;This is probably the most important topic for coding interviews and you should prepare it well. At a bare minimum, you should know about the &lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html#axzz5dCg1cNYo"&gt;array&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2017/07/top-10-linked-list-coding-questions-and.html"&gt;linked list&lt;/a&gt;, &lt;a href="https://www.java67.com/2020/02/top-40-binary-tree-interview-questions.html"&gt;binary trees&lt;/a&gt;, binary search tree, self-balanced trees like AVL tree, hash table(or map or dictionaries as known in Java and Python) stack, queue, and graph.&lt;/p&gt;

&lt;p&gt;You should understand how to store and access elements from these data structures and the computing cost involved. You should also have a comparative analysis of when to use a particular data structure like for a faster search array, and the hash table is better. Still, for faster addition and deletion, a linked list will outperform an array.&lt;/p&gt;

&lt;p&gt;If you need a resource to get up to speed, I suggest you pick a data structure course where examples are shown in the language you are most comfortable with. For Java developers, I recommend&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;Data Structure and Algorithms: Deep Dive in Java&lt;/a&gt;, and for Python Programmers, I recommend Algorithms and Data Structure in Python course on Udemy. You can check out that course &lt;a href="https://medium.com/javarevisited/top-10-free-data-structure-and-algorithms-courses-for-beginners-best-of-lot-ad807cc55f7a"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRrK8AzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-DuGEAa13JmU/XnlpMlXqVlI/AAAAAAAAdfw/OcAHHxFcGII_LXwEdqosKekMBx5gAYQFACLcBGAsYHQ/w400-h283/balance%252Btree%252Bdata%252Bstructure.png" alt="5 Essential Topics for Coding Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-algorithms"&gt;
  &lt;/a&gt;
  2. Algorithms
&lt;/h3&gt;

&lt;p&gt;While it's important to know the essential data structure like an array, linked list, and trees, it's equally important to learn how to work with those data structures. If you don't know the difference between linear search and binary search algorithms, and what it means to run in O(log n) as opposed to O(n^2), you need to spend some time learning algorithms.&lt;/p&gt;

&lt;p&gt;This can often be the difference between a fine-tuned application and a slow, crappy process that hangs more than it works. At a bare minimum, you should know about sorting algorithms like &lt;a href="https://javarevisited.blogspot.com/2014/08/quicksort-sorting-algorithm-in-java-in-place-example.html"&gt;quicksort&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/03/mergesort-in-java-algorithm-example-and.html"&gt;mergesort&lt;/a&gt;, heapsort, etc. searching algorithms like binary search, and some graph algorithms like fastest route-finding algorithms, which are the base of many deliveries and taxi-hailing apps like Uber, Grab, and Ola.&lt;/p&gt;

&lt;p&gt;You should also understand how the library methods you are using for sorting an array work, which algorithm it uses internally, and when a different algorithm would do a better job.&lt;/p&gt;

&lt;p&gt;I strongly suggest you prepare for this topic in depth. If you need a resource, Thomas H. Cormen's "&lt;a href="http://www.amazon.com/dp/0072970545/?tag=javamysqlanta-20"&gt;Introduction to Algorithms,"&lt;/a&gt; is the most recommended resource, but it's not for the faint-hearted. For a less intimidating entry, I would recommend the &lt;a href="https://www.amazon.com/Grokking-Algorithms-illustrated-programmers-curious/dp/1617292230/?tag=javamysqlanta-20"&gt;Grokking Algorithms&lt;/a&gt; book by Aditya Bhargava and Algorithms course on Coursera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/grokking-algorithms-book-review-aa4459da93f5"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKq2f6jN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-fEUTaD_iF2s/XnloZVAGWRI/AAAAAAAAdfo/0ipeAFEos8Qprf_ebUGjYCbyg20Va70ZgCLcBGAsYHQ/w400-h275/Grokking%252BAlgorithms%252BBook%252BReview.png" alt="Data structure and algorithms for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-system-design"&gt;
  &lt;/a&gt;
  3. System Design
&lt;/h3&gt;

&lt;p&gt;This is another crucial topic you need to prepare well for your programming job interviews, especially at big tech companies like &lt;a href="https://medium.com/javarevisited/5-best-programming-languages-to-get-a-sofware-developer-job-in-google-3d8c83c444d6"&gt;Google&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2015/12/30-microsoft-interview-questions-for-software-development-engineers.html"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2016/01/top-20-amazon-and-google-programming-interview-questions.html"&gt;Amazon&lt;/a&gt;, and Facebook. You need to have some ideas about how to design your solution from architecture to coding.&lt;/p&gt;

&lt;p&gt;System design is actually very vast. At a high level, it covers things like software architecture, I mean the advantage between monolithic and microservice architecture and choosing between a &lt;a href="https://javarevisited.blogspot.com/2019/03/top-5-nosql-database-web-developers-should-learn.html#ixzz64aBvbXQ4"&gt;NoSQL&lt;/a&gt; and &lt;a href="https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61"&gt;SQL database&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It covers things like how we will design an application that can handle 10000 concurrent users? And includes things like scalability.&lt;/p&gt;

&lt;p&gt;At a low level, it covers Object-Oriented Programming and Design, which talk about designing your classes and their relationships, following good coding practices, and software design principles like SOLID.&lt;/p&gt;

&lt;p&gt;Because of this, many candidates struggle to answer system design questions, and if you want to succeed, you must put particular emphasis on this skill. If you need a resource, I recommend you to checking about the &lt;a href="https://www.educative.io/collection/5668639101419520/5649050225344512?affiliate_id=5073518643380224"&gt;Grokking System Design Interview&lt;/a&gt; course on Educative, which is prepared by people who served as hiring managers on those tech companies, and it also walks you through common system design interview questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5649050225344512?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHdlm6oF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-kjkuBo81alA/XnloK-9Z4dI/AAAAAAAAdfg/UMYVaPpsRIMmTeA_33OQuEr_D7C251N5gCLcBGAsYHQ/w400-h320/System%252Bdesign%252Binterview%252Bquestions%252Bbig.png" alt="Software design for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Object-Oriented design and analysis, I recommend the Head First Object-Oriented design book to learn fundamentals and &lt;strong&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5692201761767424?affiliate_id=5073518643380224"&gt;Grokking the Object-Oriented Interviews&lt;/a&gt;&lt;/strong&gt; course on Educative for some practice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-multithreading-and-concurrency"&gt;
  &lt;/a&gt;
  4. Multithreading and Concurrency
&lt;/h3&gt;

&lt;p&gt;Concurrency is one of the most desired skills by employers, and also one of the most advanced topics brought up in interviews. Because it shows your ability to design a program that efficiently uses resources but at the same time it's a very tricky topic to master and that's why interviewers love it. &lt;/p&gt;

&lt;p&gt;Concurrency can also be used to gauge your expertise and technical depth and is often uses as a key deciding factor in your overall hiring level.&lt;/p&gt;

&lt;p&gt;Whether you are just entering your career or are looking to switch jobs, it never hurts to dedicate some time to mastering concurrency. &lt;/p&gt;

&lt;p&gt;At a bare minimum, you should know about threads, processes, shared memory, monitors, locks, critical section, and deferred callbacks. Having a good knowledge of how to avoid race conditions and deadlock can be even better.&lt;/p&gt;

&lt;p&gt;Practicing classical concurrency interview questions like &lt;a href="https://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html"&gt;Producer-Consumer&lt;/a&gt;, Dining Philosopher, and others can also teach you a lot about concurrency and multithreading and give you the confidence to visualize how code and data work when multiple threads run in parallel.&lt;/p&gt;

&lt;p&gt;If you have an interviewing coming up, then I highly suggest you double down on concurrency. This is because I know it can be one of the most challenging topics brought up during most of the interviews, even for experienced developers. However, gaining a mastering concurrency will put you at a considerable advantage over other candidates.&lt;/p&gt;

&lt;p&gt;If you need resources, I strongly suggest you check out &lt;a href="https://www.educative.io/courses/java-multithreading-for-senior-engineering-interviews?affiliate_id=5073518643380224"&gt;Multithreading and Concurrency Interview Questions&lt;/a&gt; by C.H. Afzal on Educative. This course contains the most common concurrency interview questions solved in Python, Java, C#, and Ruby. Going through those questions will give you a good background on Concurrency and Multithreading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/java-multithreading-for-senior-engineering-interviews?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVqCbNIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-plCdIflEBXE/Xnln6-bmnEI/AAAAAAAAdfY/YEjBC7jCi8sd6Lb6FVIEfbGf_NyJ_fSZgCLcBGAsYHQ/w400-h275/Dining%252Bphilosopher%252Bproblem%252BConcurrency%252Band%252BParallel%252Bprogramming.png" alt="Concurrency for Coding Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-sql-and-database-design"&gt;
  &lt;/a&gt;
  5. SQL and Database Design
&lt;/h3&gt;

&lt;p&gt;As a software developer, working with a relational database is a critical skill that you'll need, and it will stick with you no matter where you are in your career. Every company from small to large uses a DBMS, so it's likely that you will come across different data models, type so databases (&lt;a href="https://medium.com/javarevisited/5-best-mongodb-courses-to-learn-nosql-for-beginners-in-2020-42df5af5496c"&gt;NoSQL&lt;/a&gt; and &lt;a href="https://www.java67.com/2018/02/5-free-database-and-sql-query-courses-programmers.html"&gt;SQL&lt;/a&gt;), and dependencies on various companies.&lt;/p&gt;

&lt;p&gt;Knowing how to structure your data within a DBMS is critical. Should you use an entity-relationship (ER), model? A hierarchical model? A three-schema architecture? &lt;/p&gt;

&lt;p&gt;The choices can be intimidating, but it's good to know about the different ways to structure your data as that when you switch database vendors like from Oracle to SQL Server or PostgreSQL, you can plugin with minimal hand-coding.&lt;/p&gt;

&lt;p&gt;As a programmer, you should also know about SQL, not just the syntax but also how the database actually runs your query and how joins are executed, how to index are used, and the difference between table scan, index scan, and index seek. These details are not just important from the coding interview perspective but also from day-to-day jobs.&lt;/p&gt;

&lt;p&gt;If you need resources, I suggest you go through with &lt;a href="https://www.educative.io/courses/database-design-fundamentals?affiliate_id=5073518643380224"&gt;&lt;strong&gt;Database Design Fundamentals for Software Engineers&lt;/strong&gt;&lt;/a&gt;, where you will learn about the different concepts and techniques you can use to structure your data and explore why you should use particular approaches for certain problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fsqldatabases%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9A0t43JE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-cGqkK0dY1ng/XnlnOXoo6FI/AAAAAAAAdfM/RBOvOMdpfYolZa_AQ_faZp0OOTTxB7QYgCLcBGAsYHQ/w400-h311/sql%252Bjoins%252Bguide%252Band%252Bsyntax.jpg" alt="SQL and Database for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will also be exposed to technique likes normalization, help to increase the efficiency o the database, and avoid duplication. I also suggest you go through an SQL-focused course like &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-sql-bootcamp%2F"&gt;The Complete SQL BootCamp&lt;/a&gt;&lt;/strong&gt; by Jose Portilla on Udemy as SQL queries are also an essential part of coding interviews along with database design. I also suggest Use The Index Luke book to better understand how SQL query works in general.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-aws-docker-and-kubernetes"&gt;
  &lt;/a&gt;
  6. AWS, Docker, and Kubernetes
&lt;/h3&gt;

&lt;p&gt;While these five are definitely must-have skills for coding interviews, employers are nowadays also looking for modern tech skills like AWS, Docker, and Kubernetes, which makes them important topics for technical interviews.&lt;/p&gt;

&lt;p&gt;Since cloud computing is the next big thing and this decade of software development will be cloud-native, it's better for a software developer to know about Cloud and modern deployment tools like &lt;strong&gt;&lt;a href="https://javarevisited.blogspot.com/2018/02/10-free-docker-container-courses-for-Java-Developers.html"&gt;Docker&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html"&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is also important if you want to stay ahead of the curve and give a reason to your employer to hire you than the next candidate in line. For AWS and Cloud, one more thing you can do is to get a certification, not that because you can't get a job without certification but to learn better and get recognition for your skill.&lt;/p&gt;

&lt;p&gt;For AWS, I suggest you at least have an &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html"&gt;&lt;strong&gt;AWS Cloud Practitioner certification&lt;/strong&gt;&lt;/a&gt; to showcase necessary cloud skills, and if you prefer Microsoft Azure, then Azure Fundamentals (&lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-az-900-microsoft-azure-fundamentals-certification-exam.html"&gt;AZ-900&lt;/a&gt;) is an excellent certification to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4d5n8cJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-AizMAMwEXbs/XnlpW-sSFtI/AAAAAAAAdf8/Em4EO2S1X7YkNzmFhOEyv4o0OwKoXv4KgCLcBGAsYHQ/w400-h233/4.%252BLearn%252BAmazon%252BWeb%252BServices%252B%252528AWS%252529%252BThe%252BComplete%252BIntroduction%252BUdemy%252Bcourse.gif" alt="tech skills for developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is a container, which allows you to run your application as a whole, along with all the dependencies. This makes both development and deployment easier, particularly for &lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-microservices-in-java-and-spring-framework-e9fed1ba804d"&gt;Microservices&lt;/a&gt;. Since the container makes cloud deployment more manageable, and they are also easier for the manager to scaling up and down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-courses-to-learn-kubernetes-for-devops-and-certification.html"&gt;Kubernetes&lt;/a&gt; is a container orchestration tool, which means it can use manager containers at scale. &lt;/p&gt;

&lt;p&gt;It's easy to deploy and manage a few boxes, but when you have to deploy 100s of container for your application for a promotion event like Amazon prime Sale and then need to take it down once traffic return to normalcy is not easy. Kubernetes can do that for you and provide automation and peace of mind.&lt;/p&gt;

&lt;p&gt;While both Docker and Kubernetes are not mandatory skills for a programmer but definitely essential from the Job perspective. I recommend every Software developer or aspiring programmer to learn Docker and Kubernetes, and if you need a resource, Stephen Grider's online course -** &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fdocker-and-kubernetes-the-complete-guide%2F"&gt;Docker and Kubernetes: The Complete Guide&lt;/a&gt;** on Udemy is a great starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpBb0kfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TsB64ri7usY/Xnlp9m2G9bI/AAAAAAAAdgQ/f_QFl2M5EgUkmn21zxLG8VwnQ7r-Z-trQCLcBGAsYHQ/w400-h247/Docker%252Band%252BKubernetes%252B2.png" alt="key skills for software developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the most &lt;strong&gt;important skills and topics you can prepare to crack the coding interview&lt;/strong&gt; of companies like Google, Microsoft, Apple, Facebook, and Amazon. Along with sills, I have also listed some of the best books and courses you can take to learn those skills and better prepared for your next coding interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Programming and Java Articles you May like&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/02/10-courses-to-prepare-for-programming-job-interviews.html#axzz5oeVu3CYQ"&gt;10 courses to crack Coding Interviews in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2019/05/10-great-resources-for-programming-job-interview-questions.html"&gt;10 Websites to Practice Coding Problems&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/06/10-books-to-prepare-technical-coding-job-interviews.html"&gt;10 Books to Prepare Technical Programming/Coding Job Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2015/09/top-10-algorithm-books-every-programmer-read-learn.html"&gt;10 Algorithm Books Every Programmer Should Read&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2016/05/5-free-data-structure-and-algorithm-books-in-java.html#axzz4uXETWjmV"&gt;Top 5 Data Structure and Algorithm Books for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.freecodecamp.org/these-are-the-best-free-courses-to-learn-data-structures-and-algorithms-in-depth-4d52f0d6b35a"&gt;My favorite free courses to learn Algorithms in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2019/02/top-10-free-algorithms-and-data.html"&gt;10 Free Data Structure Courses for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/top-10-free-courses-to-learn-aws-in-2020-529e"&gt;Top 10 Free Courses to learn AWS in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-maven-jenkins-and-docker-for-java-developers-51fa7a1e66f6"&gt;10 Free Courses to learn Docker for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/101-coding-problems-and-few-tips-to-crack-your-next-programming-interviews-402a"&gt;10 Tips and 101 Coding Problems to Crack Programming Interview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-system-design-courses-for-coding-interviews-949fd029ce65"&gt;10 Best System Design courses for Coding interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-system-design-courses-for-coding-interviews-949fd029ce65"&gt;6 Best Dynamic Programming Courses for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/06/data-structure-and-algorithm-interview-questions-programmers.html"&gt;100+ Data Structure and Coding Problems for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these *Coding interview skills and topics*useful, then please share them with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are aiming for FAANG (Facebook, Amazon, Apple, NetFlix, and Google) companies then I also suggest you join the &lt;strong&gt;&lt;a href="https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep?affcode=441520_zytgk2dn"&gt;Master the Coding Interview: Big Tech (FAANG) Interviews&lt;/a&gt;&lt;/strong&gt; course by Andrei Negaoie on ZTM Academy. FAANG interviews are toughest to crack and this course is a valuable resource to crack FAANG interviews.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>coding</category>
      <category>algorithms</category>
      <category>datastructure</category>
    </item>
    <item>
      <title>Make a Discord bot in just 30 lines of code. </title>
      <author>Shreyas Pahune</author>
      <pubDate>Mon, 12 Jul 2021 15:31:00 +0000</pubDate>
      <link>https://dev.to/basecampxd/make-a-discord-bot-in-just-30-lines-of-code-jbj</link>
      <guid>https://dev.to/basecampxd/make-a-discord-bot-in-just-30-lines-of-code-jbj</guid>
      <description>&lt;p&gt;Hey  everyone 👋🏻, today we are going to make a discord bot 🤖 which will send gifs according to the user &lt;strong&gt;in just 30 lines of code!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The way this bot will work is, if you write &lt;code&gt;.gif happy&lt;/code&gt; then the bot will send a random happy gif.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are we going to use to build this mini-project:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;NPM Packages:

&lt;ul&gt;
&lt;li&gt;Discord.js&lt;/li&gt;
&lt;li&gt;DOTENV&lt;/li&gt;
&lt;li&gt;node-fetch&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay so let's get started 🎉!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-"&gt;
  &lt;/a&gt;
  Steps :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We have to go to the &lt;a href="https://discord.com/developers/applications"&gt;discord developer portal&lt;/a&gt; and create a new application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9pYT03b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7zg9nzgm77funm73znr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9pYT03b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7zg9nzgm77funm73znr.png" alt="portal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then you have to create a new application ☝🏻. &lt;code&gt;(the blue button on top-right corner)&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Give a name to your application.&lt;/li&gt;
&lt;li&gt;Then on the left hand side, click on bot👇🏻 .&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWydSSKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erzhg0zi8ykpiewhbd5g.PNG" alt="second"&gt;&lt;/li&gt;
&lt;li&gt;After clicking on bot, now click on &lt;code&gt;Add Bot&lt;/code&gt; on the right hand side, and after this step you will have a screen like this 👇🏻.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1N4yaK4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1ryr6lckw6gvtg7kqny.PNG" alt="third"&gt;&lt;/li&gt;
&lt;li&gt;Now the Token is something which you have to keep a secret and not reveal anywhere or to anyone.&lt;/li&gt;
&lt;li&gt;If you reveal it by mistake, no worries just regenerate it, but make sure you don't or else someone can take over your bot.&lt;/li&gt;
&lt;li&gt;Now we have to decide what permissions does our bot need, and after deciding this, just head to OAuth2 section on the right hand side of your screen.&lt;/li&gt;
&lt;li&gt;You will have a screen when many check boxes, and you have to click on the checkbox which says &lt;code&gt;bot&lt;/code&gt; 👇🏻.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzJm8_D_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lijrp59d102ui3r06idc.PNG" alt="four"&gt;&lt;/li&gt;
&lt;li&gt;Then click on the permission you have to give to the bot.&lt;/li&gt;
&lt;li&gt;After that click on the link and copy it, after that paste it into a new tab and authorize it to add it to a new server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we just have to code it!&lt;/p&gt;

&lt;p&gt;Before explaining the code, let me explain you the folder structure 👇🏻. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lhde7OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82kix2zwih2msu2qp5w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Lhde7OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82kix2zwih2msu2qp5w.PNG" alt="folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is a folder called &lt;code&gt;src&lt;/code&gt; in which we have a main file called &lt;code&gt;bot.js&lt;/code&gt; in which we are going to code our bot.&lt;/li&gt;
&lt;li&gt;Okay so you can see that there are two files and a folder, named as &lt;code&gt;package-lock.json&lt;/code&gt;, &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; respectively, they are basically of node packages and their information.&lt;/li&gt;
&lt;li&gt;There is also a &lt;code&gt;.env&lt;/code&gt; file but we will discuss about it later in this blog.&lt;/li&gt;
&lt;li&gt;Okay so we have to use 3 packages to make a discord bot, they are as follows:

&lt;ol&gt;
&lt;li&gt;discord.js (&lt;code&gt;npm i discord.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;dotenv (&lt;code&gt;npm i dotenv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;node-fetch (&lt;code&gt;npm i node-fetch&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now using this image as my reference, I am going to explain the code.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z26av6Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t8atty7rujrytdy4wyv.png" alt="code"&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see ☝🏻, there are only 30 lines of code! How amazing it that?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your own discord bot 🤖 in just 30 lines of code!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay so the first and the third line of code are the import  statements which can also be written as :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import discord from 'discord.js;'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second line of code is basically us initializing the client/user, which in this case will be our bot and the users themselves .&lt;/p&gt;

&lt;p&gt;and the fourth line is importing the env package and configuring it, so basically &lt;code&gt;.env&lt;/code&gt; &lt;strong&gt;files stores all your secrets, like your discord bot's token or your API Key, these things will not be uploaded on GitHub using the git ignore file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay so in JavaScript there is this thing called &lt;code&gt;addEventListner&lt;/code&gt; which helps us to react to certain events, like if a user clicks on something or double-tap on something a particular function should run.&lt;/p&gt;

&lt;p&gt;In the same way here in discord.js &lt;code&gt;addEventListner&lt;/code&gt; is more or less replaced by &lt;code&gt;.on&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;All of the &lt;code&gt;.on&lt;/code&gt; functions are called in regards to the &lt;code&gt;client&lt;/code&gt; so we have to write &lt;code&gt;client.on('event', callBackFunction)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On line number 6 you can see that I have written a function which is &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zl4j19W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fi5gxnbad65u50jv6jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Zl4j19W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fi5gxnbad65u50jv6jw.png" alt="ready"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This basically means that, whenever the user is ready and logged in the console should log &lt;code&gt;&amp;lt;Name of the Bot&amp;gt; is up and ready!&lt;/code&gt; and name of the bot is fetched by this inbuilt property known as &lt;code&gt;.user.tag&lt;/code&gt; , which is to be called in regards to the &lt;code&gt;client&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Now we have to make our bot login to the server. And  for that we have another inbuilt method/function called &lt;code&gt;.login&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;So we can write : &lt;code&gt;client.login(process.env.TOKEN)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you might wonder what is this &lt;code&gt;process.env.TOKEN&lt;/code&gt;, this is the way we call variables from our &lt;code&gt;.env&lt;/code&gt; file.&lt;br&gt;
So let me show what is stored inside &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wRnL9jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o99m5yd2vqufzw18wcfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wRnL9jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o99m5yd2vqufzw18wcfq.png" alt="env"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here in this file, we have to put our bot token inside a pair of single or double quotes and our tenor API key (you can generate it from &lt;a href="https://tenor.com/developer/keyregistration"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For example if you want to call the &lt;code&gt;tenor api key&lt;/code&gt; inside your &lt;code&gt;bot.js&lt;/code&gt; file, you just have to write &lt;code&gt;process.env.TENOR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And you can make a &lt;code&gt;try-catch&lt;/code&gt; block around the &lt;code&gt;client.login()&lt;/code&gt; function, so if any error occurs, we can catch it and show it on the console. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4bRoMmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6623bj3fmz7ukbj1wxpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4bRoMmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6623bj3fmz7ukbj1wxpy.png" alt="try-catch"&gt;&lt;/a&gt;&lt;br&gt;
So as of now, we have our boiler plate code ready with us, which is 👇🏻: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHUP5mTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amssijt8pdyuvc2ttm3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHUP5mTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amssijt8pdyuvc2ttm3h.png" alt="boiler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's code the main functionality of the bot now.&lt;/p&gt;

&lt;p&gt;Now all the code discussed below will be in the reference to 👇🏻 this image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyFQKmmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vof6263rdads9k8nj6n4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyFQKmmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vof6263rdads9k8nj6n4.png" alt="main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's understand the above code step-by-step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating an add event listener to react when the user sends message:

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrKk8CPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frfzpeoygaulx3ewj3xt.png" alt="addEve"&gt;&lt;/li&gt;
&lt;li&gt;Here the parameter &lt;code&gt;msg&lt;/code&gt; will contain the message which user has sent. &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Let's add a prefix to our bot, so it will only react if we write &lt;code&gt;.gif&lt;/code&gt;.

&lt;ol&gt;
&lt;li&gt;Just to be a little safe, I am going to write the main functionality inside a &lt;code&gt;try-catch&lt;/code&gt; block.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2VH8n13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xybcvar7n5fyqxyl3ing.png" alt="try"&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;msg.content&lt;/code&gt; helps us to fetch the content inside the msg. In leman's term, it is like &lt;code&gt;.innerText&lt;/code&gt; in JavaScript. &lt;/li&gt;
&lt;li&gt;Here when the user will write &lt;code&gt;.gif&lt;/code&gt; the code inside the &lt;code&gt;if&lt;/code&gt; statement will be executed.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now let's get user's queries.

&lt;ol&gt;
&lt;li&gt;Now if a user writes &lt;code&gt;.gif batman&lt;/code&gt; then this will be considered as a string and a problem arises here, which is how do we separate the bot command and the user's query.&lt;/li&gt;
&lt;li&gt;We do that by an inbuilt function called &lt;code&gt;.split()&lt;/code&gt;, which will help us to separate the whole string into two different values stored in an array, for example: if I write &lt;code&gt;.gif batman&lt;/code&gt; then &lt;code&gt;.split()&lt;/code&gt;  will make an array :  &lt;code&gt;['.gif', 'batman']&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Let's see it's code.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWl6yqj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hgyddtr6tzi94rcecmy.png" alt="split"&gt;&lt;/li&gt;
&lt;li&gt;We are going to compare the &lt;code&gt;first index of query&lt;/code&gt; which will be &lt;code&gt;.gif&lt;/code&gt;  to the string .gif.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Let's discuss about the API and Fetching it.

&lt;ol&gt;
&lt;li&gt;I am using node-fetch to fetch the API.&lt;/li&gt;
&lt;li&gt;The base of the API is

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;https://g.tenor.com/v1/search?q=USERQUERY&amp;amp;key=API-KEY&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;And in order to take query from the user and give the key as your API Key we have to make this URL dynamic.&lt;/li&gt;
&lt;li&gt;We can do that by using template literals.

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;https://g.tenor.com/v1/search?q=${query[1]}&amp;amp;key=${process.env.TENOR}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And now the  code looks like this.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axHEXkqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl5eu92onady5c3o02my.png" alt="url"&gt;&lt;/li&gt;
&lt;li&gt;And the query has to be the second value (First Index) in the array.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Let's fetch the API now.

&lt;ol&gt;
&lt;li&gt;We just have to put &lt;code&gt;async&lt;/code&gt; in front of the callback function as you can see in the above image on line number 10.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt; will make your function, asynchronous and then we will use &lt;code&gt;await&lt;/code&gt; to wait for the response from the API.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4k1OljK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acmflsactcaxk46j97fb.png" alt="without"&gt;&lt;/li&gt;
&lt;li&gt;Now here we will have a problem, which is we will only receive one GIF every time.&lt;/li&gt;
&lt;li&gt;Now the API will return 20 GIFs and we have to pick a random one (on line 17).&lt;/li&gt;
&lt;li&gt;So to do this, we will make a random variable which will choose one GIF.&lt;/li&gt;
&lt;li&gt;Now the final code looks like 👇🏻
&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dv8PmckI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23aobyz6j106syjmja4i.png" alt="final"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Let's run this.

&lt;ol&gt;
&lt;li&gt;Just open the terminal, change the directory to the home directory and inside &lt;code&gt;src&lt;/code&gt; folder, then write  &lt;code&gt;node bot.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thank you for reading the whole blog 🎉!! If you liked it do share it with your developer friends and feel free to comment and give suggestions.&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>npm</category>
      <category>discord</category>
    </item>
    <item>
      <title>Creating custom form controls using ControlValueAccessor in Angular</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Mon, 12 Jul 2021 15:18:13 +0000</pubDate>
      <link>https://dev.to/angular/creating-custom-form-controls-using-controlvalueaccessor-in-angular-202</link>
      <guid>https://dev.to/angular/creating-custom-form-controls-using-controlvalueaccessor-in-angular-202</guid>
      <description>&lt;p&gt;How to create custom form controls in Angular using ControlValueAccessor? We can create custom form components and connect them to either template-driven forms or reactive forms.&lt;/p&gt;

&lt;p&gt;So when I say custom form controls, I am talking about those elements that are not your typical controls like input fields, radio buttons, or checkboxes. For example, a star rating component or a knob. These are not available out of the box.&lt;/p&gt;

&lt;p&gt;We can also make sections in a form as child components which can be then used as custom form controls. In this way, larger forms can be broken down into manageable pieces. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--446-AHLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elk5dy5s267aojs1xbmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--446-AHLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elk5dy5s267aojs1xbmr.png" alt="Custom Form Controls using ControlValueAccessor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all the default form controls like input field, radio button, checkbox, select dropdown, etc, custom control value accessors are already written and shipped with Angular. Eg:  &lt;a href="https://angular.io/api/forms/CheckboxControlValueAccessor"&gt;CheckboxControlValueAccessor&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We will be talking more about &lt;code&gt;ControlValueAccessor&lt;/code&gt; it and how to use it to create really cool form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-form-elements"&gt;
  &lt;/a&gt;
  Custom Form Elements
&lt;/h2&gt;

&lt;p&gt;When we hear the term form, we would be thinking of few input text fields and maybe some checkboxes and stuff. But when it comes to really complex forms where we have a lot of custom buttons, lists, and selections, the whole form will become very complex. And managing such a complex form would be a problem.&lt;/p&gt;

&lt;p&gt;When there are a lot of custom form elements or when the form starts to get big, it's probably a good idea to break it into smaller sections. Placing everything in a single template would make it really messy.&lt;/p&gt;

&lt;p&gt;We can break down the form into multiple components and then connect it with the main form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-form-control-in-angular"&gt;
  &lt;/a&gt;
  Custom form control in Angular
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://angular.io/api/forms/ControlValueAccessor"&gt;ControlValueAccessor&lt;/a&gt; is something that comes with Angular. It acts as a bridge between DOM elements and the angular Form API.&lt;/p&gt;

&lt;p&gt;So If you have a custom element that you would like to connect to your form, you have to make use of ControlValueAccessor to make the element compatible with Angular Forms API. Doing so will enable the element to be connected using &lt;code&gt;ngModel&lt;/code&gt; (Template Driven Forms) or &lt;code&gt;formControl&lt;/code&gt; (Reactive Forms).&lt;/p&gt;

&lt;p&gt;Let's take a look at how do we create a custom form control.&lt;/p&gt;

&lt;p&gt;When I started with Angular, I was not aware that something like this existed. I remember when I wrote child components for forms and used &lt;code&gt;@Input()&lt;/code&gt; and &lt;code&gt;@Output()&lt;/code&gt; to receive and send form values to the parent form component. I used to listen to the changes in the child component and then emit the values to the parent.&lt;/p&gt;

&lt;p&gt;In the parent, the values will be taken and used to patch the form. This was until I came across the magical ControlValueAccessor. No more inputs and outputs, everything just works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implement-the-controlvalueaccessor-interface"&gt;
  &lt;/a&gt;
  Implement the ControlValueAccessor interface.
&lt;/h3&gt;

&lt;p&gt;Step 1 is to implement the interface in the custom component. The interface would ask us to add few methods in our class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="nx"&gt;setDisabledState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)?:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us see what each of the methods is doing. Once we are clear on how things are, we can dive into the implementation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;writeValue()&lt;/code&gt; - this function is called by the Forms API to update the value of the element. When &lt;code&gt;ngModel&lt;/code&gt; or &lt;code&gt;formControl&lt;/code&gt; value changes, this function gets called and the latest value is passed in as the argument to the function. We can use the latest value and make changes in the component. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#writevalue"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;registerOnChange()&lt;/code&gt; - we get access to a function in the argument that can be saved to a local variable. Then this function can be called when there are any changes in the value of our custom form control. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#registerOnChange"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;registerOnTouched()&lt;/code&gt; - we get access to another function that can be used to update the state of the form to &lt;code&gt;touched&lt;/code&gt;. So when the user interacts with our custom form element, we can call the saved function to let Angular know that the element has been interacted with. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#registerOnTouched"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setDisabledState()&lt;/code&gt; - this function will be called by the forms API when the disabled state is changed. We can get the current state and update the state of the custom form control. (&lt;a href="https://angular.io/api/forms/ControlValueAccessor#setDisabledState"&gt;ref&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we implement these functions, the next step is to provide the &lt;code&gt;NG_VALUE_ACCESSOR&lt;/code&gt; token in the component's providers array like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;CustomFormControlComponent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-country-selector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- provided here&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomFormControlComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Here I created a provider constant and then passed it into the &lt;code&gt;providers&lt;/code&gt;. Also you can see the use of &lt;code&gt;forwardRef&lt;/code&gt; (&lt;a href="https://angular.io/api/core/forwardRef"&gt;ref&lt;/a&gt;) here. It is needed because we are referring to the &lt;code&gt;CountrySelectorComponent&lt;/code&gt; class which is not defined before its reference.&lt;/p&gt;

&lt;p&gt;So now that we know what each of these functions does, we can start implementing our custom form element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-form"&gt;
  &lt;/a&gt;
  Basic Form
&lt;/h2&gt;

&lt;p&gt;We are going to take a look at the base form that we are gonna work with. We just have some basic input fields and 2 custom form elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Adithya'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;github:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'https://github.com/AdiSreyaj'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;website:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'https://adi.so'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;server:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'IN'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;communications:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;label:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Marketing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;modes:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'SMS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;label:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Updates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;modes:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'SMS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;enabled:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we need the data to be. Here the &lt;code&gt;server&lt;/code&gt; and the &lt;code&gt;communications&lt;/code&gt; fields are going to be connected to a custom form control. We are using  &lt;a href="https://angular.io/guide/reactive-forms"&gt;Reactive Forms&lt;/a&gt;  in the example.&lt;/p&gt;

&lt;p&gt;Here is how our form will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;communications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[]]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;[formGroup]=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"github"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Github&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"github"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"github"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Website&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Region&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;app-country-selector&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/app-country-selector&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Communication&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;app-communication-preference&lt;/span&gt; &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"communications"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/app-communication-preference&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice in the above template we are directly using &lt;code&gt;formControlName&lt;/code&gt; on the &lt;code&gt;app-country-selector&lt;/code&gt; and &lt;code&gt;app-communication-preference&lt;/code&gt; components. This will be only possible if those components are implementing the &lt;code&gt;ControlValueAccessor&lt;/code&gt; interface. This is how you make a component behave like a form control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#country-selector-custom-form-control"&gt;
  &lt;/a&gt;
  Country Selector custom form control
&lt;/h2&gt;

&lt;p&gt;We are going to see how to implement a cool country selector component as a custom form control that can be directly connected to a form. In this example, I'll be using Reactive Forms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oOOYEc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8w2dp2s8369ogieq000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oOOYEc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8w2dp2s8369ogieq000.png" alt="Country Selector Custom Form Control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The component is pretty straightforward, we will give the user to select one country from a given list. The behavior is similar to a radio button. The only difference here is that we are using our own custom component to implement this design.&lt;/p&gt;

&lt;p&gt;As always, I start by creating a new module and component for our country selector form control.&lt;/p&gt;

&lt;p&gt;Here is how we implement the ControlValueAccessor for our country selector component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;CountrySelectorComponent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We provide it in the providers array inside the &lt;code&gt;@Component&lt;/code&gt; decorator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-country-selector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;div&amp;gt;
      &amp;lt;ng-container *ngFor="let country of countries"&amp;gt;
        &amp;lt;button [disabled]="disabled" (click)="selectCountry(country.code)"
             [class.selected]="!disabled &amp;amp;&amp;amp; selected === country.code"&amp;gt;
          &amp;lt;ng-container *ngIf="!disabled &amp;amp;&amp;amp; selected === country.code"&amp;gt;
            &amp;lt;!-- Checkmark Icon --&amp;gt;
          &amp;lt;/ng-container&amp;gt;
          &amp;lt;img [src]="...flag src" [alt]="country.name" /&amp;gt;
          &amp;lt;p&amp;gt;{{ country?.name }}&amp;lt;/p&amp;gt;
        &amp;lt;/button&amp;gt;
      &amp;lt;/ng-container&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;COUNTRY_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CountrySelectorComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;United States&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GB-ENG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;England&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Netherlands&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;selectCountry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- mark as touched&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- call function to let know of a change&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- save the function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- save the function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;setDisabledState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the user has given an initial value to &lt;code&gt;server&lt;/code&gt; in the form, we will get the initial value in the &lt;code&gt;writeValue()&lt;/code&gt; method. We get the value and assign it to our local variable &lt;code&gt;selected&lt;/code&gt; which manages the state.&lt;/p&gt;

&lt;p&gt;When the user clicks on a different country, we mark the field as &lt;code&gt;touched&lt;/code&gt; and then assign the value to the &lt;code&gt;selected&lt;/code&gt; variable. The main part is we also call the &lt;code&gt;onChanged&lt;/code&gt; method and pass the newly selected country code. This will set the new value as the form control's value.&lt;/p&gt;

&lt;p&gt;By using the argument from &lt;code&gt;setDisabledState()&lt;/code&gt; method we can implement the disabled state for our component. So If we trigger disable from the form using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing the above will trigger a call to &lt;code&gt;setDisabledState()&lt;/code&gt; method where the state &lt;code&gt;isDisabled&lt;/code&gt; is passed, which is then assigned to a local variable &lt;code&gt;disabled&lt;/code&gt;. Now we can use this local variable to add a class or disable the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setDisabledState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all! We have successfully created a custom form control. Check the GitHub repo for  &lt;a href="https://github.com/adisreyaj/ng-custom-form-elements/blob/main/src/app/components/country-selector/country-selector.component.ts"&gt;full code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-preferences-custom-form-control"&gt;
  &lt;/a&gt;
  Communication Preferences custom form control
&lt;/h2&gt;

&lt;p&gt;Now let's see how to implement the second custom form control in our form, which allows user to select their communication preferences.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NN0KzVzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4amylbv52xr6s1dtpdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NN0KzVzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4amylbv52xr6s1dtpdr.png" alt="Communication preference custom form control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is also a very simple component that has a bunch of checkboxes. We could have added this in the same parent component where the form is initialized. But by creating a separate component, we are making it more maintainable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COM_PREFERENCE_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;CommunicationPreferenceComponent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-communication-preference&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;ng-container *ngFor="let item of options; index as i"&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;p&amp;gt;{{ item?.label }}&amp;lt;/p&amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;ng-container *ngFor="let mode of item.modes; index as j"&amp;gt;
              &amp;lt;div&amp;gt;
                &amp;lt;input
                  type="checkbox"
                  [id]="item.label + mode.name"
                  [(ngModel)]="mode.enabled"
                  (ngModelChange)="handleChange(i, j, $event)" /&amp;gt;
                &amp;lt;label [for]="item.label + mode.name"&amp;gt;{{ mode.name }}&amp;lt;/label&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/ng-container&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/li&amp;gt;
      &amp;lt;/ng-container&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;COM_PREFERENCE_CONTROL_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CommunicationPreferenceComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CommunicationPreference&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;modeIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;modes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;modeIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTouched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again it's the same thing we are doing, we have an &lt;code&gt;options&lt;/code&gt; variable that manages the local state of the component. When there is any value-change triggered by the form, we get the new value in the &lt;code&gt;writeValue&lt;/code&gt; method, we update the local state with the changed value.&lt;br&gt;
When the user makes any change, we update the local state and call the &lt;code&gt;onChanged&lt;/code&gt; method and pass the updated state which updates the form as well.&lt;/p&gt;

&lt;p&gt;Find the  &lt;a href="https://github.com/adisreyaj/ng-custom-form-elements/blob/main/src/app/components/communication-preference/communication-preference.component.ts"&gt;complete code&lt;/a&gt;  for the component in the repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Angular makes it really easy to implement custom form control using &lt;code&gt;ControlValueAccessor&lt;/code&gt;. By implementing few methods, we can directly hook our component to a &lt;code&gt;Reactive&lt;/code&gt; or &lt;code&gt;Template Driven&lt;/code&gt; form with ease.&lt;/p&gt;

&lt;p&gt;We can write all sorts of crazy form elements and use them without writing logic to handle communication between parent and child. Let the forms API do the magic for us.&lt;/p&gt;

&lt;p&gt;We can also use this approach to break sections of the form into their own individual component. This way if the form is big/complex, we can break then down into smaller components that can be easily managed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-demo"&gt;
  &lt;/a&gt;
  Code and Demo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Github&lt;/strong&gt;: &lt;a href="https://github.com/adisreyaj/ng-custom-form-elements"&gt;https://github.com/adisreyaj/ng-custom-form-elements&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://ng-custom-form-elements.vercel.app/"&gt;https://ng-custom-form-elements.vercel.app/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ❤️&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>BUILD YOUR OWN: OS , AI, PROGRAMMING LANGUAGE, CRYPTO etc. : Awesome Tutorial List 😎</title>
      <author>manish srivastava</author>
      <pubDate>Mon, 12 Jul 2021 14:53:00 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/build-your-own-os-ai-programming-language-crypto-etc-tutorial-lists-195o</link>
      <guid>https://dev.to/manishfoodtechs/build-your-own-os-ai-programming-language-crypto-etc-tutorial-lists-195o</guid>
      <description>&lt;p&gt;BUILD YOUR OWN&lt;/p&gt;

&lt;p&gt;This is wonderful repo providing tutorials to build your own programs.&lt;br&gt;
Below list is comprehensive. &lt;/p&gt;

&lt;p&gt;Look at building your own augmented reality, crypto currency, operating system and Programming Language.&lt;/p&gt;

&lt;p&gt;-3D Renderer&lt;br&gt;
-Augmented Reality&lt;br&gt;
-BitTorrent Client&lt;br&gt;
-Block Chain / Cryptocurrency&lt;br&gt;
-Bot&lt;br&gt;
-Command-Line Tool&lt;br&gt;
-Database&lt;br&gt;
-Docker&lt;br&gt;
-Emulator / Virtual Machine&lt;br&gt;
-Front-end Framework / Library&lt;br&gt;
-Game&lt;br&gt;
-Git&lt;br&gt;
-Network Stack&lt;br&gt;
-Neural Network&lt;br&gt;
-Operating System&lt;br&gt;
-Physics Engine&lt;br&gt;
-Programming Language&lt;br&gt;
-Refer Engine&lt;br&gt;
-Search Engine&lt;br&gt;
-Shell&lt;br&gt;
-Template Engine&lt;br&gt;
-Text Editor&lt;br&gt;
-Visual Recognition System&lt;br&gt;
-Voxel Engine&lt;br&gt;
-Web Search Engine&lt;br&gt;
-Web Server&lt;br&gt;
-Uncategorized&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;https://github.com/danistefanovic/build-your-own-x&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shared with awesome people on WORLD AI GROUP &lt;a href="https://chat.whatsapp.com/Jz8B1Rfv7h4FbH3nORZKsT"&gt;https://chat.whatsapp.com/Jz8B1Rfv7h4FbH3nORZKsT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
      <category>docker</category>
      <category>beginners</category>
    </item>
    <item>
      <title>4 Key Observability Metrics for Distributed Applications</title>
      <author>Michael Bogan</author>
      <pubDate>Mon, 12 Jul 2021 14:39:34 +0000</pubDate>
      <link>https://dev.to/mbogan/4-key-observability-metrics-for-distributed-applications-4d27</link>
      <guid>https://dev.to/mbogan/4-key-observability-metrics-for-distributed-applications-4d27</guid>
      <description>&lt;p&gt;A common architectural design pattern these days is to break up an application monolith into smaller microservices. Each microservice is then responsible for a specific aspect or feature of your app. For example, one microservice might be responsible for serving external API requests, while another might handle data fetching for your frontend. &lt;/p&gt;

&lt;p&gt;Designing a robust and fail-safe infrastructure in this way can be challenging; monitoring the operations of all these microservices together can be even harder. It's best not to simply rely on your application logs for an understanding of your systems' successes and errors. Setting up proper monitoring will provide you with a more complete picture, but it can be difficult to know where to start. In this post, we'll cover service areas your metrics should focus on to ensure you're not missing key insights.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before-getting-started"&gt;
  &lt;/a&gt;
  Before Getting Started
&lt;/h1&gt;

&lt;p&gt;We're going to make a few assumptions about your app setup. Don't worry—you don't need to use any specific framework to start tracking metrics. However, it does help to have a general understanding of the components involved. In other words, how you set up your observability tooling matters less than what you track. &lt;/p&gt;

&lt;p&gt;Since a sufficiently large set of microservices requires some level of coordination, we're going to assume you are using&lt;a href="https://kubernetes.io/"&gt; Kubernetes&lt;/a&gt; for orchestration. We're also assuming you have a time series database like&lt;a href="https://prometheus.io/docs/introduction/overview/"&gt; Prometheus&lt;/a&gt; or&lt;a href="https://www.influxdata.com/"&gt; InfluxDB&lt;/a&gt; for storing your metrics data. You might also need an ingress controller, such as&lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt; the one Kong provides&lt;/a&gt; to control traffic flow, and a service mesh, such as&lt;a href="https://kuma.io/"&gt; Kuma&lt;/a&gt;, to better facilitate connections between services.&lt;/p&gt;

&lt;p&gt;Before implementing any monitoring, it's essential to know how your services actually interact with one another. Writing out a document that identifies which services and features depend on one another and how availability issues would impact them can help you strategize around setting baseline numbers for what constitutes an appropriate threshold. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-metrics"&gt;
  &lt;/a&gt;
  Types of Metrics
&lt;/h1&gt;

&lt;p&gt;You should be able to see data points from two perspectives: Impact Data and Causal Data. Impact Data represents information that identifies who is being impacted. For example, if there's a service interruption and responses slow down, Impact Data can help identify what percentage of your active users is affected. &lt;/p&gt;

&lt;p&gt;While Impact Data determines &lt;em&gt;who&lt;/em&gt; is being affected, Causal Data identifies &lt;em&gt;what&lt;/em&gt; is being affected and why. Kong Ingress, which can monitor network activity, can give us insight into Impact Data. Meanwhile, Kuma can collect and report Causal Data. &lt;/p&gt;

&lt;p&gt;Let's look at a few data sources and explore the differences between Impact Data and Causal Data that can be collected about them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#latency"&gt;
  &lt;/a&gt;
  Latency
&lt;/h2&gt;

&lt;p&gt;Latency is the amount of time it takes between a user performing an action and its final result. For example, if a user adds an item to their shopping cart, the latency would measure the time between the item addition and the moment the user sees a response that indicates its successful addition. If the service responsible for fulfilling this action degraded, the latency would increase, and without an immediate response, the user might wonder whether the site was working at all. &lt;/p&gt;

&lt;p&gt;To properly track latency in an Impact Data context, it's necessary to follow a single event throughout its entire lifetime. Sticking with our purchasing example, we might expect the full flow of an event to look like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The customer clicks the "Add to Cart" button&lt;/li&gt;
&lt;li&gt;The browser makes a server-side request, initiating the event&lt;/li&gt;
&lt;li&gt;The server accepts the request&lt;/li&gt;
&lt;li&gt;A database query ensures that the product is still in stock&lt;/li&gt;
&lt;li&gt;The database response is parsed, a response is sent to the user, and the event is complete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To successfully follow this sequence, you should standardize on a naming pattern that identifies both what is happening and when it's happening, such as &lt;code&gt;customer_purchase.initiate&lt;/code&gt;, &lt;code&gt;customer_purchase.queried&lt;/code&gt;, &lt;code&gt;customer_purchase.finalized&lt;/code&gt;, and so on. Depending on your programming language, you might be able to provide a function block or lambda to the metrics service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;statsd.timing('customer_purchase.initiate') do
  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By providing specific keywords, you ought to hone in on which segment of the event was slow in the event of a latency issue.&lt;/p&gt;

&lt;p&gt;Tracking latency in a Causal Data context requires you to track the speed of an event between services, not just the actions performed. In practice, this means timing service-to-service requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;statsd.histogram('customer_purchase.initiate') do
  statsd.histogram('customer_purchase.external_database_query') do
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This shouldn't be limited to capturing the overall endpoint request/response cycles. That sort of latency tracking is too broad and ought to be more granular. Suppose you have a microservice with an endpoint that makes internal database requests. In that case, you might want to time the moment the request was received, how long the query took, the moment the service responded with a request, and the moment when the originating client received that request. This way, you can pinpoint precisely how the services communicate with one another.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#traffic"&gt;
  &lt;/a&gt;
  Traffic
&lt;/h2&gt;

&lt;p&gt;You want your application to be useful and popular—but an influx of users can be too much of a good thing if you're not prepared! Changes in site traffic can be difficult to predict. You might be able to serve user load on a day-to-day basis, but events (both expected and unexpected) can have unanticipated consequences. Is your eCommerce site running a weekend promotion? Did your site go viral because of some unexpected praise? Traffic variances can also be affected by geolocation. Perhaps users in Japan are experiencing traffic load in a way that users in France are not. You might think that your systems are working as intended, but all it takes is a massive influx of users to test that belief. If an event takes 200ms to complete, but your system can only process one event at a time, it might not seem like there's a problem—until the event queue is suddenly clogged up with work.&lt;/p&gt;

&lt;p&gt;Similar to latency, it's useful to track the number of events being processed throughout the event's lifecycle to get a sense of any bottlenecks. For example, tracking the number of jobs in a queue, the number of HTTP requests completed per second, and the number of active users are good starting points for monitoring traffic.&lt;/p&gt;

&lt;p&gt;For Causal Data, monitoring traffic involves capturing how services transmit information to one another, similar to how we did it for latency. Your monitoring setup ought to track the number of requests to specific services, their response codes, their payload sizes, and so on—as much about the request and response cycle as necessary. When you need to investigate worsening performance, knowing which service is experiencing problems will help you track the possible source much sooner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-rates"&gt;
  &lt;/a&gt;
  Error Rates
&lt;/h2&gt;

&lt;p&gt;Tracking error rates is rather straightforward. Any 5xx (or even 4xx) issued as an HTTP response by your server should be tagged and counted. Even situations that you've accounted for, such as caught exceptions, should be monitored because they still represent a non-ideal state. These issues can act as warnings for deeper problems stemming from defensive coding that doesn't address actual problems. &lt;/p&gt;

&lt;p&gt;Kuma can capture the error codes and messages thrown by your service, but this represents only a portion of actionable data. For example, you can also capture the arguments which caused the error (in case a query was malformed), the database query issued (in case it timed out), the permissions of the acting user (in case they made an unauthorized attempt), and so on. In short, capturing the state of your service at the moment it produces an error can help you replicate the issue in your development and testing environments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#saturation"&gt;
  &lt;/a&gt;
  Saturation
&lt;/h2&gt;

&lt;p&gt;You should track the memory usage, CPU utilization, disk reads/writes, and available storage of each of your microservices. If your resource usage regularly spikes during certain hours or operations or increases at a steady rate, this suggests you’re overutilizing your server. While your server may be running as expected, once again, an influx of traffic or other unforeseen occurrences can quickly topple it over.&lt;/p&gt;

&lt;p&gt;Kong Ingress only monitors network activity, so it's not ideal for tracking saturation. However, there are&lt;a href="https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/"&gt; many tools available&lt;/a&gt; for tracking this with Kubernetes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementing-monitoring-and-observability"&gt;
  &lt;/a&gt;
  Implementing Monitoring and Observability
&lt;/h1&gt;

&lt;p&gt;Up to now, we've discussed the kinds of metrics that will be important to track in your cloud application. Next, let’s dive into some specific steps you can take to implement this monitoring and observability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-prometheus"&gt;
  &lt;/a&gt;
  Install Prometheus
&lt;/h2&gt;

&lt;p&gt;Prometheus is the go-to standard for monitoring, an open-source system that is easy to install and integrate with your Kubernetes setup. Installation is especially simple if you use &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we create a &lt;code&gt;monitoring&lt;/code&gt; namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl create namespace monitoring
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we use Helm to install Prometheus. We make sure to add the Prometheus charts to Helm as well::&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
$ helm repo add stable https://kubernetes-charts.storage.googleapis.com/
$ helm repo update
$ helm install -f https://bit.ly/2RgzDtg -n monitoring prometheus prometheus-community/prometheus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values file referenced at &lt;a href="https://bit.ly/2RgzDtg"&gt;https://bit.ly/2RgzDtg&lt;/a&gt; sets the data scrape interval for Prometheus to ten seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-prometheus-plugin-in-kong"&gt;
  &lt;/a&gt;
  Enable Prometheus Plugin in Kong
&lt;/h2&gt;

&lt;p&gt;Assuming you are using Kong Ingress Controller (KIC) for Kubernetes, your next step will be to create a custom resource—a &lt;code&gt;KongPlugin&lt;/code&gt; resource—which integrates into the KIC. Create a file called &lt;code&gt;prometheus-plugin.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: configuration.konghq.com/v1
kind: KongClusterPlugin
metadata:
  name: prometheus
  annotations:
    kubernetes.io/ingress.class: kong
  labels:
    global: "true"
plugin: prometheus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-grafana"&gt;
  &lt;/a&gt;
  Install Grafana
&lt;/h2&gt;

&lt;p&gt;Grafana is an observability platform that provides excellent dashboards for visualization of data scraped by Prometheus. We use Helm to install Grafana as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ helm install grafana stable/grafana -n monitoring --values http://bit.ly/2FuFVfV
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can view the bit.ly URL in the above command to see the specific configuration values for Grafana that we provide upon installation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-port-forwarding"&gt;
  &lt;/a&gt;
  Enable Port Forwarding
&lt;/h2&gt;

&lt;p&gt;Now that Prometheus and Grafana are up and running in our Kubernetes cluster, we'll need access to their dashboards. For this article, we'll set up basic port forwarding to expose those services. This is a simple—but not very secure—way to get access, but not advisable for production deployments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ POD_NAME=$(kubectl get pods --namespace monitoring -l "app=prometheus,component=server" -o jsonpath="{.items[0].metadata.name}")
kubectl --namespace monitoring  port-forward $POD_NAME 9090 &amp;amp;

$ POD_NAME=$(kubectl get pods --namespace monitoring -l "app.kubernetes.io/instance=grafana" -o jsonpath="{.items[0].metadata.name}")
kubectl --namespace monitoring port-forward $POD_NAME 3000 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above two commands expose the Prometheus server on port &lt;code&gt;9090&lt;/code&gt; and the Grafana dashboard on port &lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Those simple steps should be sufficient to set you off and running. With Kong Ingress Controller and its integrated Prometheus plugin, capturing metrics with Prometheus and visualizing them with Grafana are quick and simple to set up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Whenever you need to investigate worsening performance, your Impact Data metrics can help orient you on the magnitude of the problem: it should tell you how many people are affected. Likewise, your Causal Data identifies what isn't working and why. The former points you to the plume of smoke, and the latter takes you to the fire. &lt;/p&gt;

&lt;p&gt;In addition to all of the above, you should also consider the rate at which your metrics are changing. For example, say your traffic numbers are increasing. Observing how quickly those numbers are moving can help you determine when (or if) it'll become a problem. This is essential for managing upcoming work with regular deployments and changes to your services. It also establishes what an ideal performance metric should be.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sre.google/sre-book/monitoring-distributed-systems/"&gt;Google wrote an entire book on site reliability&lt;/a&gt;, which is a must-read for any developer. If you're already running Kong alongside your clusters, plugins&lt;a href="https://github.com/Kong/kong-plugin-prometheus"&gt; such as this one&lt;/a&gt; integrate directly with Prometheus, which means less configuration on your part to monitor and store metrics for your services.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>analytics</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Use Kool to run Multiple Docker Applications at the same time in your Local Development Environment</title>
      <author>Fabrício José Souza</author>
      <pubDate>Mon, 12 Jul 2021 14:30:29 +0000</pubDate>
      <link>https://dev.to/kooldev/use-kool-to-run-multiple-docker-applications-at-the-same-time-in-your-local-development-environment-5ec6</link>
      <guid>https://dev.to/kooldev/use-kool-to-run-multiple-docker-applications-at-the-same-time-in-your-local-development-environment-5ec6</guid>
      <description>&lt;p&gt;More and more, we find ourselves working with Docker containers in the context of microservice architectures comprising multiple, loosely-coupled applications and services, and/or projects made up of two or more distinct apps running side-by-side talking to each other via APIs. As developers who work on these types of projects know all too well, setting up your local development environment to run &lt;strong&gt;multiple&lt;/strong&gt; Docker applications &lt;strong&gt;at the same time&lt;/strong&gt; can be a real hassle. Developing each app &lt;strong&gt;on its own&lt;/strong&gt; is a breeze &lt;a href="https://blog.kool.dev/article/using-docker-for-local-development/"&gt;using Kool and Docker Compose&lt;/a&gt;. However, when you need to run multiple apps at the same time, configuring the routing and intercommunication between different containers can be challenging.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll show you how to set up your local environment to run more than one Docker application at the same time using Kool and a Caddy web server. No doubt, this is just one of several ways to solve for this use case, but we think it's an approach that works really well for most projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;Before you start, if you haven't done so already, you need to &lt;a href="https://kool.dev/docs/getting-started/installation"&gt;install Docker and &lt;strong&gt;Kool CLI&lt;/strong&gt;&lt;/a&gt;. It also wouldn't hurt to quickly get up-to-speed with the &lt;a href="https://kool.dev/docs/commands/kool"&gt;Kool CLI commands&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/kool-dev/kool"&gt;&lt;code&gt;kool&lt;/code&gt;&lt;/a&gt; is a CLI tool that makes local development with Docker super easy. Kool CLI will level up your development workflow, and help you and your team improve the way you develop and deploy cloud native applications. Make sure you're always using the latest version by running &lt;code&gt;kool self-update&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#it-always-starts-off-simple"&gt;
  &lt;/a&gt;
  It always starts off simple
&lt;/h2&gt;

&lt;p&gt;You have a single application with its Docker Compose environment. Let's call it &lt;strong&gt;App 1&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; ~/multiple-apps/app-1
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/app-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create the two files we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# App 1&lt;/span&gt;
&lt;span class="c1"&gt;# ~/multiple-apps/app-1/docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kooldev/php:8.0-nginx&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app/public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;# App 1
# ~/multiple-apps/app-1/index.php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Welcome to App 1!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these two files, you can now get &lt;strong&gt;App 1&lt;/strong&gt; up and running using &lt;code&gt;kool start&lt;/code&gt;, and check the status of its service container using &lt;code&gt;kool status&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool start
&lt;span class="go"&gt;Creating network "app-1_default" with the default driver
Creating app-1_app_1 ... done

&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool status
&lt;span class="go"&gt;+---------+---------+---------------------------------------------+---------------+
| SERVICE | RUNNING | PORTS                                       | STATE         |
+---------+---------+---------------------------------------------+---------------+
&lt;/span&gt;&lt;span class="gp"&gt;| app     | Running | 0.0.0.0:80-&amp;gt;&lt;/span&gt;80/tcp, :::80-&amp;gt;80/tcp, 9000/tcp | Up 4 seconds  |
&lt;span class="go"&gt;+---------+---------+---------------------------------------------+---------------+
[done] Fetching services status

&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;curl localhost
&lt;span class="go"&gt;Welcome to App 1!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Your &lt;code&gt;app&lt;/code&gt; service container is running, &lt;code&gt;kool status&lt;/code&gt; shows that port 80 is mapped from your host to the container, and &lt;code&gt;curl localhost&lt;/code&gt; successfully returns the output of &lt;strong&gt;App 1&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-then-it-starts-getting-tricky"&gt;
  &lt;/a&gt;
  But then it starts getting tricky
&lt;/h2&gt;

&lt;p&gt;As your project evolves over time, you need to add a second application called &lt;strong&gt;App 2&lt;/strong&gt;, which runs alongside &lt;strong&gt;App 1&lt;/strong&gt;. In other words, to work on the project, &lt;strong&gt;you need to run &lt;em&gt;both apps&lt;/em&gt; at the &lt;em&gt;same time&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's quickly set up &lt;strong&gt;App 2&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; ~/multiple-apps/app-2
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/app-2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, let's create the two files we need (inside the &lt;code&gt;app-2&lt;/code&gt; directory):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# App 2&lt;/span&gt;
&lt;span class="c1"&gt;# ~/multiple-apps/app-2/docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kooldev/php:8.0-nginx&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app/public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;# App 2
# ~/multiple-apps/app-2/index.php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Welcome to App 2!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, when you try to get &lt;strong&gt;App 2&lt;/strong&gt; up and running (using &lt;code&gt;kool start&lt;/code&gt;), you run into a problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool start
&lt;span class="go"&gt;Creating network "app-2_default" with the default driver
Creating app-2_app_1 ...
Creating app-2_app_1 ... error

ERROR: for app-2_app_1  Cannot start service app: driver failed programming external connectivity on endpoint app-2_app_1 (24719704f55491122a18f051d3f1e789b6afc3f34ccf7bfe3d7eac510117ef42):
  Bind for 0.0.0.0:80 failed: port is already allocated

ERROR: for app  Cannot start service app: driver failed programming external connectivity on endpoint app-2_app_1 (24719704f55491122a18f051d3f1e789b6afc3f34ccf7bfe3d7eac510117ef42):
  Bind for 0.0.0.0:80 failed: port is already allocated
ERROR: Encountered errors while bringing up the project.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As per the error message, you have a port conflict (&lt;code&gt;Bind for 0.0.0.0:80 failed: port is already allocated&lt;/code&gt;). &lt;strong&gt;You cannot have two different containers bound to the same port on your host&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before you continue, let's stop your &lt;strong&gt;App 2&lt;/strong&gt; and &lt;strong&gt;App 1&lt;/strong&gt; containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/app-2 &lt;span class="c"&gt;# you should already be here&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool stop
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/app-1
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#not-so-fast"&gt;
  &lt;/a&gt;
  Not so fast!
&lt;/h2&gt;

&lt;p&gt;To fix this error, your first impulse is probably to use different ports for each service. For example, you can run &lt;strong&gt;App 1&lt;/strong&gt; on &lt;code&gt;localhost:8081&lt;/code&gt; and &lt;strong&gt;App 2&lt;/strong&gt; on &lt;code&gt;localhost:8082&lt;/code&gt;. However, you'll quickly realize this solution isn't viable because it's not flexible enough, and doesn't provide intercommunication between applications over a shared Docker network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxy-to-the-rescue"&gt;
  &lt;/a&gt;
  Proxy to the rescue
&lt;/h2&gt;

&lt;p&gt;The proxy design pattern provides a much better solution for running multiple Docker applications at the same time in your local development environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-a-global-network-to-docker-compose"&gt;
  &lt;/a&gt;
  Add a global network to Docker Compose
&lt;/h3&gt;

&lt;p&gt;First, you need to improve the Docker Compose environments used by each of your apps. Using one of the many best practices built into the Docker configurations included with &lt;a href="https://kool.dev/docs/presets/introduction"&gt;&lt;strong&gt;Kool Presets&lt;/strong&gt;&lt;/a&gt;, let's create a &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#networks"&gt;shared network between Docker containers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By default, all containers in a &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file will share the same virtual network. This means two different applications will not have a channel of communication. For this reason, Kool Presets will usually have &lt;strong&gt;two networks&lt;/strong&gt; for each container: &lt;code&gt;kool_local&lt;/code&gt; and &lt;code&gt;kool_global&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kool_local&lt;/code&gt; is a local network that's only available to the group of containers from that &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file. It's the same as the default network (if we didn't specify the network ourselves).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kool_global&lt;/code&gt; is a global network created outside the scope of any particular &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file. It's available system-wide, and any containers running on the host can join it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create an external &lt;code&gt;kool_global&lt;/code&gt; network inside each Docker Compose environment, and add each app to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# App 1&lt;/span&gt;
&lt;span class="c1"&gt;# ~/multiple-apps/app-1/docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kooldev/php:8.0-nginx&lt;/span&gt;
    &lt;span class="na"&gt;expose&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app/public&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;kool_global&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;aliases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;app-1&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;kool_global&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# App 2&lt;/span&gt;
&lt;span class="c1"&gt;# ~/multiple-apps/app-2/docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kooldev/php:8.0-nginx&lt;/span&gt;
    &lt;span class="na"&gt;expose&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app/public&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;kool_global&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;aliases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;app-2&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;kool_global&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we replaced the &lt;code&gt;ports&lt;/code&gt; configuration with &lt;code&gt;expose&lt;/code&gt;. You don't want these &lt;code&gt;app&lt;/code&gt; containers bound to the host anymore, in order to avoid a conflict. Instead, you want to bind a single container to the host, which proxies each request internally over the &lt;code&gt;kool_global&lt;/code&gt; network to the correct service container using its network &lt;code&gt;alias&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#networks"&gt;&lt;code&gt;aliases&lt;/code&gt;&lt;/a&gt; key on the container network works like a &lt;strong&gt;domain name&lt;/strong&gt; that resolves to that container's address when used within the same network. This is a great way to normalize names for service containers that need to talk to each other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-the-proxy"&gt;
  &lt;/a&gt;
  Set up the proxy
&lt;/h3&gt;

&lt;p&gt;As mentioned earlier, we're going to use a &lt;a href="https://caddyserver.com/"&gt;Caddy web server&lt;/a&gt; as our reverse proxy. It's our first choice because it has a simple configuration interface and a rich feature set. &lt;a href="https://traefik.io/"&gt;Traefik&lt;/a&gt; or Nginx would work great too, so feel free to use what you like best when you implement this solution in a real project.&lt;/p&gt;

&lt;p&gt;Let's start by creating a &lt;a href="https://caddyserver.com/docs/caddyfile"&gt;&lt;code&gt;Caddyfile&lt;/code&gt;&lt;/a&gt; configuration file in a new &lt;code&gt;proxy&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/multiple-apps/proxy
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# ~/multiple-apps/proxy/Caddyfile
&lt;/span&gt;{
  &lt;span class="n"&gt;auto_https&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;
}

&lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;localhost&lt;/span&gt; {
  &lt;span class="n"&gt;reverse_proxy&lt;/span&gt; / &lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;app&lt;/span&gt;-&lt;span class="m"&gt;1&lt;/span&gt;
}

&lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;b&lt;/span&gt;.&lt;span class="n"&gt;localhost&lt;/span&gt; {
  &lt;span class="n"&gt;reverse_proxy&lt;/span&gt; / &lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;app&lt;/span&gt;-&lt;span class="m"&gt;2&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we use the &lt;code&gt;app-1&lt;/code&gt; and &lt;code&gt;app-2&lt;/code&gt; container network aliases to point to each destination, based on the incoming &lt;code&gt;Host&lt;/code&gt; request (&lt;code&gt;a.localhost&lt;/code&gt; vs. &lt;code&gt;b.localhost&lt;/code&gt;). You should also add these local domains to your &lt;code&gt;/etc/hosts&lt;/code&gt; file: &lt;code&gt;echo "127.0.0.1 a.localhost b.localhost" | sudo tee -a /etc/hosts&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default, Caddy tries to use &lt;code&gt;HTTPS&lt;/code&gt; for all hosts. For this tutorial, we're disabling it. We'll cover local TLS usage in a future article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let's create a new &lt;code&gt;docker-compose.yml&lt;/code&gt; for Caddy itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~/multiple-apps/proxy/docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;proxy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;caddy:2-alpine&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./Caddyfile:/etc/caddy/Caddyfile&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool_global&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;kool_global&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. You're done configuring your proxy.&lt;/p&gt;

&lt;p&gt;Now, all you need to do is spin up your &lt;strong&gt;App 1&lt;/strong&gt;, &lt;strong&gt;App 2&lt;/strong&gt; and &lt;strong&gt;Proxy&lt;/strong&gt; service containers (using &lt;code&gt;kool start&lt;/code&gt; of course), and verify it works by sending a couple of test requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Proxy
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/proxy &lt;span class="c"&gt;# you should already be here&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool start
&lt;span class="go"&gt;Creating proxy_proxy_1 ... done

&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;App 1
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/app-1
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool start
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;App 2
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/multiple-apps/app-2
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool start
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;curl &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Host: a.localhost"&lt;/span&gt; http://localhost
&lt;span class="go"&gt;Welcome to App 1!

&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;curl &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Host: b.localhost"&lt;/span&gt; http://localhost
&lt;span class="go"&gt;Welcome to App 2!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;W00t! You now have &lt;strong&gt;both apps up and running &lt;em&gt;at the same time&lt;/em&gt;&lt;/strong&gt;. You can access them using different host names, and they can also communicate with each other.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To clean up your local environment, you'll need to move into each directory (&lt;code&gt;app-1&lt;/code&gt;, &lt;code&gt;app-2&lt;/code&gt;, and &lt;code&gt;proxy&lt;/code&gt;) and run &lt;code&gt;kool stop&lt;/code&gt;, and then remove the directories you created: &lt;code&gt;rm -r ~/multiple-apps&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;Kool's core team is already working on a new set of commands to make the above steps seamless and transparent, so you don't have to worry about the details. We invite you to &lt;a href="https://github.com/kool-dev/kool/discussions/328"&gt;join the discussion and contribute&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like what we're doing, please show your support by &lt;a href="https://github.com/kool-dev/kool"&gt;&lt;strong&gt;starring us on GitHub&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#support-the-kool-open-source-project"&gt;
  &lt;/a&gt;
  Support the Kool open source project
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/kool-dev/kool"&gt;Kool&lt;/a&gt; is open source and totally free to use. If you're interested in learning more about the project, please check out &lt;a href="https://kool.dev/"&gt;&lt;strong&gt;kool.dev&lt;/strong&gt;&lt;/a&gt;. If you have questions, need support, or want to get involved, please &lt;a href="https://kool.dev/slack"&gt;join our Slack channel&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>webdev</category>
      <category>devops</category>
      <category>microservices</category>
    </item>
    <item>
      <title>How to Web API .Net Core Basics to Advanced Part 4 Service Layer</title>
      <author>Manik</author>
      <pubDate>Mon, 12 Jul 2021 14:29:12 +0000</pubDate>
      <link>https://dev.to/scorpio/how-to-web-api-net-core-basics-to-advanced-part-4-service-layer-31gk</link>
      <guid>https://dev.to/scorpio/how-to-web-api-net-core-basics-to-advanced-part-4-service-layer-31gk</guid>
      <description>&lt;p&gt;&lt;strong&gt;Service Layer&lt;/strong&gt;&lt;br&gt;
Welcome back! &lt;/p&gt;

&lt;p&gt;In &lt;a href="https://dev.to/scorpio/web-api-net-core-basics-to-advanced-part2-db-dco"&gt;How to Web API .Net Core Basics to Advanced Part 2 Data Access Layer&lt;/a&gt; article we talked about separation of concern and how to isolate our application in different layers based on their domain and we implimented Data Access Layer by using Repository pattern. In this article we are going to Impliment Business Layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNsFzxN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bden3ycqr271bwpvpq6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNsFzxN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bden3ycqr271bwpvpq6.jpg" alt="Asp.Net 5 Web API Service Layer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To impliment our Business/Service layer we will also make use of Dtos to pass data from our Entities/Models to our presentation layer (Controller) which further isolate our front end.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Question is what is a service layer? *&lt;/em&gt;&lt;br&gt;
Service layer is the middle layer between presentation layer and data layer (Repository). It abstracts business logic and data access.This provides easier management, better abstraction and scalability. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCNpbNku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74d7m7r0hajjug4j569j.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCNpbNku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74d7m7r0hajjug4j569j.JPG" alt="Asp.Net 5 Web API Service Layer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can start with creating five folders in our project, first one Service to keep our CompanyService.cs class file, at the same time let us create Contract folder inside Service folder to keep our interface class file ICompanyService.cs next, we can create a folder Dtos and create another folder called Company to keep our Company Dtos and the last folder ServiceResponder to keep our ServiceResponse.cs file which we will use to wrap our API response to provide a more meaningful response when a request is sent to our API. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let us start by creating our Dtos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CompanyDto.cs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class CompanyDto
    {

        public int Id { get; set; }
        public Guid GUID { get; set; }
        [Required]
        [RegularExpression(@"[a-zA-Z0-9._@+-]{2,150}",
              ErrorMessage = "The {0} must be 1 to 150 valid characters which are any digit, any letter and -._@+.")]
        [StringLength(150, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
        [Display(Name = "CompanyName")]
        public string CompanyName { get; set; }
        public DateTimeOffset CreatedDate { get; set; }
        public bool IsEnabled { get; set; }
        public bool IsDeleted { get; set; }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CreateCompanyDto.cs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class CreateCompanyDto
    {
        [Required(ErrorMessage = "Company name is required")]
        [MinLength(2, ErrorMessage = "Company Name can not be less than two characters")]
        [MaxLength(150, ErrorMessage = "Company Name to long")]
        public string CompanyName { get; set; }

    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;UpdateCompanyDto.cs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class UpdateCompanyDto
    {
        public Guid GUID { get; set; }
        [Required]
        public string CompanyName { get; set; }        
        public bool IsEnabled { get; set; }
        public bool IsDeleted { get; set; }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we are happy with our Dtos we can create our generic API response wrapper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class ServiceResponse&amp;lt;T&amp;gt;
     /// &amp;lt;summary&amp;gt;
    /// Generic wrapper for web api response.       
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name="T"&amp;gt;&amp;lt;/typeparam&amp;gt;
    public class ServiceResponse&amp;lt;T&amp;gt;
    {

        public T Data { get; set; }
        public bool Success { get; set; } = true;
        public string Message { get; set; } = null;
        public string Error { get; set; } = null;
        public List&amp;lt;string&amp;gt; ErrorMessages { get; set; } = null;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start writing code in our ICompanyService.cs and CompanyService.cs files.&lt;/p&gt;

&lt;p&gt;ICompanyService.cs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public interface ICompanyService
    {
        /// &amp;lt;summary&amp;gt;
        /// Return list of companies which are not marked as deleted.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;List Of CompanyDto&amp;lt;/returns&amp;gt;
        Task&amp;lt;ServiceResponse&amp;lt;List&amp;lt;Dtos.Company.CompanyDto&amp;gt;&amp;gt;&amp;gt; GetCompaniesAsync();
        /// &amp;lt;summary&amp;gt;
        /// Return company record.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="Id"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;CompanyDto&amp;lt;/returns&amp;gt;
        Task&amp;lt;ServiceResponse&amp;lt;Dtos.Company.CompanyDto&amp;gt;&amp;gt; GetByIdAsync(int Id);
        /// &amp;lt;summary&amp;gt;
        /// Return company record.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="guid"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;CompanyDto&amp;lt;/returns&amp;gt;
        Task&amp;lt;ServiceResponse&amp;lt;Dtos.Company.CompanyDto&amp;gt;&amp;gt; GetByGUIDAsync(Guid guid);
        /// &amp;lt;summary&amp;gt;
        /// Add new company record in db
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="createCompanyDto"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;CompanyDto&amp;lt;/returns&amp;gt;
        Task&amp;lt;ServiceResponse&amp;lt;Dtos.Company.CompanyDto&amp;gt;&amp;gt; AddCompanyAsync(Dtos.Company.CreateCompanyDto createCompanyDto);
        /// &amp;lt;summary&amp;gt;
        /// Update company record
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="updateCompanyDto"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;CompanyDto&amp;lt;/returns&amp;gt;
        Task&amp;lt;ServiceResponse&amp;lt;Dtos.Company.CompanyDto&amp;gt;&amp;gt; UpdateCompanyAsync(Dtos.Company.UpdateCompanyDto updateCompanyDto);
        /// &amp;lt;summary&amp;gt;
        /// Mark the company record as deleted
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="guid"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;bool&amp;lt;/returns&amp;gt;
        Task&amp;lt;ServiceResponse&amp;lt;string&amp;gt;&amp;gt; SoftDeleteCompanyAsync(Guid guid);

    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here our CompanyService.cs file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
public class CompanyService : ICompanyService
    {
        private readonly ICompanyRepository _compRepo;
        private readonly IMapper _mapper;

        public CompanyService(ICompanyRepository companyRepository, IMapper mapper)
        {
            this._compRepo = companyRepository;
            this._mapper = mapper;
        }
        public async Task&amp;lt;ServiceResponse&amp;lt;CompanyDto&amp;gt;&amp;gt; AddCompanyAsync(CreateCompanyDto createCompanyDto)
        {
            ServiceResponse&amp;lt;CompanyDto&amp;gt; _response = new();
            try
            {


                //Check If company exist
                if (await _compRepo.CompanyExistAsync(createCompanyDto.CompanyName))
                {
                    _response.Message = "Exist";
                    _response.Success = false;
                    _response.Data = null;
                    return _response;

                }

                Entities.Company _newCompany = new()
                {

                    CompanyName = createCompanyDto.CompanyName,
                    GUID = Guid.NewGuid(),
                    CreatedDate = DateTimeOffset.UtcNow,
                    IsEnabled = true,
                    IsDeleted = true
                };

                //Add new record
                if (!await _compRepo.CreateCompanyAsync(_newCompany))
                {
                    _response.Error = "RepoError";
                    _response.Success = false;
                    _response.Data = null;
                    return _response;
                }

                _response.Success = true;
                _response.Data = _mapper.Map&amp;lt;CompanyDto&amp;gt;(_newCompany);
                _response.Message = "Created";

            }
            catch (Exception ex)
            {
                _response.Success = false;
                _response.Data = null;
                _response.Message = "Error";
                _response.ErrorMessages = new List&amp;lt;string&amp;gt; { Convert.ToString(ex.Message) };

            }
            return _response;
        }

        public async Task&amp;lt;ServiceResponse&amp;lt;CompanyDto&amp;gt;&amp;gt; GetByGUIDAsync(Guid CompanyGUID)
        {
            ServiceResponse&amp;lt;CompanyDto&amp;gt; _response = new();

            try
            {

                var _Company = await _compRepo.GetCompanyByGUIDAsync(CompanyGUID);

                if (_Company == null)
                {
                    _response.Success = false;
                    _response.Message = "NotFound";
                    return _response;
                }

                var _CompanyDto = _mapper.Map&amp;lt;CompanyDto&amp;gt;(_Company);

                _response.Success = true;
                _response.Message = "ok";
                _response.Data = _CompanyDto;


            }
            catch (Exception ex)
            {
                _response.Success = false;
                _response.Data = null;
                _response.Message = "Error";
                _response.ErrorMessages = new List&amp;lt;string&amp;gt; { Convert.ToString(ex.Message) };
            }

            return _response;
        }

        public async Task&amp;lt;ServiceResponse&amp;lt;CompanyDto&amp;gt;&amp;gt; GetByIdAsync(int Id)
        {
            ServiceResponse&amp;lt;CompanyDto&amp;gt; _response = new();

            try
            {


                var _Company = await _compRepo.GetCompanyByIDAsync(Id);

                if (_Company == null)
                {

                    _response.Success = false;
                    _response.Message = "Not Found";
                    return _response;
                }

                var _CompanyDto = _mapper.Map&amp;lt;CompanyDto&amp;gt;(_Company);

                _response.Success = true;
                _response.Message = "ok";
                _response.Data = _CompanyDto;

            }
            catch (Exception ex)
            {
                _response.Success = false;
                _response.Data = null;
                _response.Message = "Error";
                _response.ErrorMessages = new List&amp;lt;string&amp;gt; { Convert.ToString(ex.Message) };
            }

            return _response;
        }

        public async Task&amp;lt;ServiceResponse&amp;lt;List&amp;lt;CompanyDto&amp;gt;&amp;gt;&amp;gt; GetCompaniesAsync()
        {
            ServiceResponse&amp;lt;List&amp;lt;CompanyDto&amp;gt;&amp;gt; _response = new();

            try
            {

                var CompaniesList = await _compRepo.GetCompaniesAsync();

                var CompanyListDto = new List&amp;lt;CompanyDto&amp;gt;();

                foreach (var item in CompaniesList)
                {
                    CompanyListDto.Add(_mapper.Map&amp;lt;CompanyDto&amp;gt;(item));
                }

                //OR 
                //CompanyListDto.AddRange(from item in CompaniesList select _mapper.Map&amp;lt;CompanyDto&amp;gt;(item));
                _response.Success = true;
                _response.Message = "ok";
                _response.Data = CompanyListDto;

            }
            catch (Exception ex)
            {
                _response.Success = false;
                _response.Data = null;
                _response.Message = "Error";
                _response.ErrorMessages = new List&amp;lt;string&amp;gt; { Convert.ToString(ex.Message) };
            }

            return _response;
        }

        public async Task&amp;lt;ServiceResponse&amp;lt;string&amp;gt;&amp;gt; SoftDeleteCompanyAsync(Guid CompanyGUID)
        {
            ServiceResponse&amp;lt;string&amp;gt; _response = new();

            try
            {
                //check if record exist
                var _existingCompany = await _compRepo.CompanyExistAsync(CompanyGUID);

                if (_existingCompany == false)
                {
                    _response.Success = false;
                    _response.Message = "NotFound";
                    _response.Data = null;
                    return _response;

                }

                if (!await _compRepo.SoftDeleteCompanyAsync(CompanyGUID))
                {
                    _response.Success = false;
                    _response.Message = "RepoError";
                    return _response;
                }



                _response.Success = true;
                _response.Message = "SoftDeleted";

            }
            catch (Exception ex)
            {

                _response.Success = false;
                _response.Data = null;
                _response.Message = "Error";
                _response.ErrorMessages = new List&amp;lt;string&amp;gt; { Convert.ToString(ex.Message) };
            }
            return _response;
        }

        public async Task&amp;lt;ServiceResponse&amp;lt;CompanyDto&amp;gt;&amp;gt; UpdateCompanyAsync(UpdateCompanyDto updateCompanyDto)
        {
            ServiceResponse&amp;lt;CompanyDto&amp;gt; _response = new();

            try
            {
                //check if record exist
                var _existingCompany = await _compRepo.GetCompanyByGUIDAsync(updateCompanyDto.GUID);

                if (_existingCompany == null)
                {
                    _response.Success = false;
                    _response.Message = "NotFound";
                    _response.Data = null;
                    return _response;

                }

                //Update
                _existingCompany.CompanyName = updateCompanyDto.CompanyName;
                _existingCompany.IsEnabled = updateCompanyDto.IsEnabled;
                _existingCompany.IsDeleted = updateCompanyDto.IsDeleted;

                if (!await _compRepo.UpdateCompanyAsync(_existingCompany))
                {
                    _response.Success = false;
                    _response.Message = "RepoError";
                    _response.Data = null;
                    return _response;
                }

                //Map updateCompanyDto To Company
                var _companyDto = _mapper.Map&amp;lt;CompanyDto&amp;gt;(_existingCompany);
                _response.Success = true;
                _response.Message = "Updated";
                _response.Data = _companyDto;

            }
            catch (Exception ex)
            {

                _response.Success = false;
                _response.Data = null;
                _response.Message = "Error";
                _response.ErrorMessages = new List&amp;lt;string&amp;gt; { Convert.ToString(ex.Message) };
            }
            return _response;
        }
    }


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well done! We managed to get our service layer up and running, time to move on and set up our presentation layer which is controllers. In the next article we are going to set up our first controller.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Part 5 Controllers/Get/Put/Post/Delete coming soon....&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/scorpio/how-to-web-api-net-core-basics-to-advanced-part3-data-access-layer-1k73"&gt;&amp;lt;&amp;lt;&amp;lt;Part 3 How to Web API Core set up Data Access Layer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/scorpio/web-api-net-core-basics-to-advanced-part2-db-dco"&gt;&amp;lt;&amp;lt;&amp;lt;Part 2 How to Web API Core set up Database Context&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/scorpio/how-to-web-api-net-core-basics-to-advanced-part1-486b"&gt;&amp;lt;&amp;lt;&amp;lt;Part 1 How to set up Web API core project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Mock-Factory-Pattern in Typescript</title>
      <author>David Losert</author>
      <pubDate>Mon, 12 Jul 2021 14:24:40 +0000</pubDate>
      <link>https://dev.to/davelosert/mock-factory-pattern-in-typescript-44l9</link>
      <guid>https://dev.to/davelosert/mock-factory-pattern-in-typescript-44l9</guid>
      <description>&lt;p&gt;If you are writing automated tests (and I sure hope you do), you most likely also create a lot of mock-data to feed into the functions under test. With this post I want to show you how to do this in a scalabe, reusable and focused way by using a mock-factory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-initial-simple-way"&gt;
  &lt;/a&gt;
  The initial simple way
&lt;/h2&gt;

&lt;p&gt;When starting a new project or test-suite, creating mock-data usually starts out very simple by using object literals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;markTodoAsDone sets done to true.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;unfinishedTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Write an awesome post about Testdata-Patterns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultingTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;markTodoAsDone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unfinishedTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deepStrictEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultingTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;However, as your project grows, your data usually grows as well. New properties and behaviours are added, and you will quickly realize that the method above does not scale well. Everytime a new property is introduced, you have to revisit every single test and adjust the testdata-object. Depending on the size of your project, that might be a dozen or even hundreds of required adjustments because of a single change.&lt;/p&gt;

&lt;p&gt;But the example above actually has another issue - can you spot it?&lt;/p&gt;

&lt;p&gt;Maybe it becomes clearer once we actually add some new properties:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;markTodoAsDone sets done to true.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;unfinishedTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Write an awesome post about Testdata-Patterns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-07-04&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David Losert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Writing Blogposts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;writing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultingTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;markTodoAsDone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unfinishedTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deepStrictEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultingTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Right, with pure object literals you actually have to specifiy all the properties of the object all the time - even if only one of those is relevant for the unit under test. That is a lot of distraction. Tests should be precise, focused and only contain the data and properties currently required.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#alternative-ways"&gt;
  &lt;/a&gt;
  Alternative ways
&lt;/h2&gt;

&lt;p&gt;So what is the alternative, you might ask? I have seen quite some, but they usually only address parts of the problem or introduce new ones:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Putting test-objects into their own files&lt;/strong&gt; This might remove the distraction - but it also removes the property the test is about. Also, it does not help you with the sclaing issue - on the contrary. Creating a file for every test or maybe different test scenarios, you now have to go into every file whenever something on the source type is changed. And it becomes quite a mess pretty fast.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Casting with TypeScript's &lt;code&gt;as&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unfinishedTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;While this most certainly works, it leaves a bit of a bad taste as it is actually cheating the type system, thus openning the door to nasty and hard to track bugs. If the function under test expects a &lt;code&gt;Todo&lt;/code&gt;, we should provide a full-fledged object and not just a partial one. Maybe the unit under test relies on a ceratin property not being undefined even though it's not really relevant for the test (thinking of a 'stub'). Plus you have to type &lt;code&gt;as Thing&lt;/code&gt; everywhere which again is quite a bit of a distraction in my eyes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spreading on a default object&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// In a separe file or on top of your test file...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Default Todo Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-07-04&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David Losert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Writing Blogposts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;writing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;markTodoAsDone sets done to true.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;unfinishedTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This heads into a better direction. The test remains focused on the relevant properties, yet our unit under test always gets a real &lt;code&gt;Todo&lt;/code&gt;-object as opposed to when casting. It also scales somewhat: changes to the type only have to be applied to the &lt;code&gt;defaultTodo&lt;/code&gt;-object. And we get another bonus: the &lt;code&gt;defaultTodo&lt;/code&gt; serves as a great documentation on how a real &lt;code&gt;Todo&lt;/code&gt;-object might look in production.&lt;/p&gt;

&lt;p&gt;There remains a tiny problem with this approach: Your tests are now tightly coupled to the &lt;code&gt;defaultTodo&lt;/code&gt;-object, which might again introduce problems with - you might have guessed it - scaling. And I wouldn't write this if I did not know of a slightly better approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#enter-the-stage-typescripts-raw-partial-endraw-and-a-factoryfunction"&gt;
  &lt;/a&gt;
  Enter the stage: Typescripts &lt;code&gt;Partial&lt;/code&gt; and a factory-function
&lt;/h2&gt;

&lt;p&gt;So the way I usually go is a combination of typescript's &lt;code&gt;Partial&lt;/code&gt; and a simple factory function. I'll show you the code before going into the details.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;createMockTodo.ts&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Default Todo Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-07-04&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David Losert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Writing Blogposts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;writing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createMockTodo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The usage of might look like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;todo.test.ts&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;markTodoAsDone sets done to true.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;unfinishedTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultingTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;markTodoAsDone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unfinishedTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deepStrictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultingTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So there is a few things happening here, let me walk you through the most important ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;defaultTodo&lt;/code&gt; is basically the same as in the section before: A fully defined object of the type to make it easy to always get all (required) properties from a single place. Additional advantage: It serves as documentation about the type.&lt;/li&gt;
&lt;li&gt;But rather than exporting this object directly, we use a factory function &lt;code&gt;createMockTodo&lt;/code&gt;. This gives us way more control over how the actual mock-object is constructed. You will see how this helps us further down.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Partial&amp;lt;T&amp;gt;&lt;/code&gt; is a TypeScript utility type that accepts another &lt;code&gt;Type&lt;/code&gt; or &lt;code&gt;Interface&lt;/code&gt; as generic argument (if you don't know about generics, I recommend you read the &lt;a href="https://www.typescriptlang.org/docs/handbook/2/generics.html"&gt;official docs&lt;/a&gt;). It then creates a new type by copying all properties of the given generic input type but with all properties set to optional.&lt;/p&gt;

&lt;p&gt;This lets us pass in a object with only the properties of our choosing (as we did with &lt;code&gt;done&lt;/code&gt; in the example) while at the same time keeping type-safety turned on. We can only pass things that actually exist in &lt;code&gt;Todo&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We use an empty object as deafult argument to &lt;code&gt;overwrites&lt;/code&gt; so that we can also call the factory-function without any parameters. This is especially useful if you just need some stubs in your test but don't care about the precise properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We then finally construct the test-object by merging together all properties of &lt;code&gt;defaultTodo&lt;/code&gt; with the &lt;code&gt;overwrite&lt;/code&gt; object using the spread-operators.&lt;/p&gt;

&lt;p&gt;Like this, all properties given to the function will overwrite the ones in &lt;code&gt;defaultTodo&lt;/code&gt; (as the name indicates) while leaving the other properties in place.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#advantages-of-this-pattern"&gt;
  &lt;/a&gt;
  Advantages of this pattern
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;It sclaes&lt;/strong&gt;: when adding new properties to the original type, you only have to adjust the default-Object in a single place&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It sclaes again&lt;/strong&gt;: If for any reason you need to construct the mock-data differently (e.g. because of deeply nested structures, see below), you are completely free to do so within the factory-function without having to change any callers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Type-safety&lt;/strong&gt; is on at all times. This prevents you from introdcuing nasty bugs as well as making refactorings easy, especially with IDEs that support things like renamings (Hit &lt;code&gt;F2&lt;/code&gt; in VSCode ;) ).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It's immutable&lt;/strong&gt;: As long as you don't have nested objects (see below on how to handle those), you are guaranteed to get a new copy for every test, preventing another sort of nasty bugs where tests might influence each other.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It's documentation&lt;/strong&gt;: Give the default-object meaningful values and you have a documentation on how it might look like in production.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It's reusable&lt;/strong&gt;: This pattern can be used in a lot of different scenarios - it is actually not even limited to data-objects as you might find out if you read on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#extending-the-pattern"&gt;
  &lt;/a&gt;
  Extending the pattern
&lt;/h2&gt;

&lt;p&gt;The pattern as shown is already useful in a lot of ways. But I promised you scaling, so let me show you how further extended it for more special use-cases.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#use-mockfactories-in-other-mockfactories"&gt;
  &lt;/a&gt;
  Use mock-factories in other mock-factories
&lt;/h3&gt;

&lt;p&gt;Lets say we introduce a &lt;code&gt;User&lt;/code&gt;-Type in our App that might look like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;User.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pronouns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We then create a mock-factory for it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;createMockUser.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;29f51e42-c6ca-4f17-ac93-7131eeb4cffc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Su&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pronouns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;they/them&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createMockUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we want to adjust our &lt;code&gt;Todo.assignee&lt;/code&gt;-Property to use this type rather than a string:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Todo.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will break all our tests at first, so we quickly adjust the default-object in the &lt;code&gt;Todo&lt;/code&gt;-Factory:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;createMockTodo.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMockUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./createMockUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Default Todo Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createMockUser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-07-04&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Writing Blogposts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;writing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createMockTodo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's it. Our tests should work again, given they did not involve or overwrite the user object. And if they did, we can now easily find them through our typechecks (or by following the failed tests for that matter).&lt;/p&gt;

&lt;p&gt;For example imagine we had a test like this before the change:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Todo.test.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;changes the assignee to the new given user.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David Losert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actualUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;assignTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rahim Vera&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deepStrictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actualUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rahim Vera&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we could write it like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;changes the assignee to the new given user.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createMockUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oldId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expectedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMockUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actualUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;assignTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expectedUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deepStrictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actualUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expectedUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We have to be careful though: Now that we use nested objects, we are actually able to mutate the values within the &lt;code&gt;defaultTodo&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFirstTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFirstTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// Logs 'Kim'&lt;/span&gt;

&lt;span class="nx"&gt;myFirstTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MutatedName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mySecondTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mySecondTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assignee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// Now Logs 'MutatedName'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is due to the fact that the spread-operator only does a shallow copy of an object, but passes deep nested objects by reference.&lt;/p&gt;

&lt;p&gt;This is not too bad if we are actually certain that we are using immutabilty throughout our app. But if not, there is the option of deep cloning.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#use-raw-clonedeep-endraw-"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;cloneDeep&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As there actually is no standard way of deep cloning an object in JavaScript / TypeScript, we'll either have to implement it ourselfs or use a library that does it for us. For the simplicity of this post, I will be using the &lt;code&gt;cloneDeep&lt;/code&gt;-function provided by &lt;a href="https://www.npmjs.com/package/lodash"&gt;lodash&lt;/a&gt;, since it is probably the most popular one.&lt;/p&gt;

&lt;p&gt;If we do not want the full lodash-library in our project, we can also do a standalone install of the &lt;code&gt;cloneDeep&lt;/code&gt; function and mark it as a dev-dependency (so long as we only use it in our tests):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; lodash.clonedeep @types/lodash.clonedeep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Please note that you will have to add &lt;code&gt;"esModuleInterop": true&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt;-section of your &lt;code&gt;tsconfig.json&lt;/code&gt; to be able use it.&lt;/p&gt;

&lt;p&gt;Now all that is left todo (pun intended) is to adjust the mock-factory accordingly:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;createMockTodo.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cloneDeep&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash.clonedeep&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createMockTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cloneDeep&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;overwrites&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's it. Now you have a truly immutable mock-factory. Note how we did not have to adjust any tests or other areas of the code to make this central change.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sum-up"&gt;
  &lt;/a&gt;
  Sum up
&lt;/h2&gt;

&lt;p&gt;As shown, the mock-factory-pattern is a big win in scalibility and focus for creating test-data while at the same time being pretty simple. The simplicity makes it reusable for almost every object, and I even use it sometimes to mock IO-Modules like HTTP-Services.&lt;/p&gt;

&lt;p&gt;Using the same pattern for all test-data makes writing tests more approchable, and it is especially helpful for newcomers to the project as they can see default implementations of all the relevant data and types.&lt;/p&gt;

&lt;p&gt;By having a mix of a default-object and a factory-function, it becomes super flexible while at the same time minimizing maintenance tasks and the need for more static mock code. To put this into perspective: I once was able to delete ten thousands of lines of code from a project simply by introducing this pattern.&lt;/p&gt;

&lt;p&gt;And there are still a lot of other ways to use and extend it, but I'll leave it up to you to find and use them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#link-to-working-example"&gt;
  &lt;/a&gt;
  Link to working example
&lt;/h2&gt;

&lt;p&gt;You can find a working example of the code in my Github repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/davelosert"&gt;
        davelosert
      &lt;/a&gt; / &lt;a href="https://github.com/davelosert/mock-factory-pattern"&gt;
        mock-factory-pattern
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This repository shows the mock-factory-pattern and accompanies my blog-post about it.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Mock-Factory-Pattern in TypeScript&lt;/h1&gt;
&lt;p&gt;This repository shows a mock-factory-pattern-example in typescript.&lt;/p&gt;
&lt;p&gt;The mock-factory-pattern uses a combination of TypeScript's &lt;code&gt;Partial&lt;/code&gt; together with a factory function to be able to create scalabe, reusable and focused test data:&lt;/p&gt;
&lt;div class="highlight highlight-source-ts position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;defaultObject&lt;/span&gt;: &lt;span class="pl-smi"&gt;ExampleType&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;key1&lt;/span&gt;: &lt;span class="pl-s"&gt;'value1'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;key2&lt;/span&gt;: &lt;span class="pl-s"&gt;'value2'&lt;/span&gt;
  &lt;span class="pl-c"&gt;// ...&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-en"&gt;createMockObject&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;overwrites&lt;/span&gt;: &lt;span class="pl-smi"&gt;Partial&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-smi"&gt;ExampleType&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  ...&lt;span class="pl-s1"&gt;defaultObject&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  ...&lt;span class="pl-s1"&gt;overwrites&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;export&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-s1"&gt;createMockObject&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can find two implementations of this pattern here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/davelosert/mock-factory-pattern/main/readme.md/./src/createMockUser.ts"&gt;src/createMockUser.ts&lt;/a&gt;: simple example&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/davelosert/mock-factory-pattern/main/readme.md/./src/createMockTodo.ts"&gt;src/createMockTodo.ts&lt;/a&gt;: example using &lt;code&gt;cloneDeep&lt;/code&gt; to ensure immutability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can read more about it in my &lt;a href="https://raw.githubusercontent.com/davelosert/mock-factory-pattern/main/readme.md/tbd."&gt;blog-post&lt;/a&gt; which this repository accompanies.&lt;/p&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;p&gt;To execute the tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone this repository and &lt;code&gt;cd&lt;/code&gt; into it on your terminal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/davelosert/mock-factory-pattern"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>typescript</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hitchhiker's Guide To Writing Your First Open-source software</title>
      <author>Saad Irfan</author>
      <pubDate>Mon, 12 Jul 2021 14:21:55 +0000</pubDate>
      <link>https://dev.to/msaaddev/hitchhiker-s-guide-to-writing-your-first-open-source-software-dh0</link>
      <guid>https://dev.to/msaaddev/hitchhiker-s-guide-to-writing-your-first-open-source-software-dh0</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is written just from my perspective to help out beginners. If you disagree from anything in this piece, I respect that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before you start reading this article, let me just stop you right there. Why!? You asked and I obliged. To congratulate you! Confused!? If you have decided to give this piece a go then at some part of your mind you want to take the first step towards open-source and I am really glad that I can contribute to it. 🥂&lt;/p&gt;

&lt;p&gt;Well today, I have something special for you. In the past, you might have used packages from one of the biggest open-source package repositories, i.e., npmjs. Today, I am going to teach you just how simple it is to write your own open-source node package and then publish it on npmjs. &lt;/p&gt;

&lt;p&gt;Let’s do it in steps to make things simpler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-step-1-setting-up-everything"&gt;
  &lt;/a&gt;
  🏗 STEP #1 – Setting Up Everything
&lt;/h2&gt;

&lt;p&gt;Every good open-source project contains some files that build confidence. For instance, having a code of conduct, contributing guidelines, and proper documentation goes a long way. Plus, don’t forget the license while we are talking about such files.&lt;/p&gt;

&lt;p&gt;Since I have some experience myself writing open-source automation tools and packages, I decided to save you some time and &lt;a href="https://github.com/msaaddev/create-foss-files"&gt;cooked&lt;/a&gt; up something that you could use to get started with everything using a single command. But before I tell you about that, let’s create a folder called &lt;code&gt;cross-path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cross-path&lt;/code&gt; is going to be an npm package that will convert darwin paths to win32 and win32 paths to darwin.&lt;/p&gt;

&lt;p&gt;Navigate inside this folder and type the following in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-foss-files &lt;span class="nt"&gt;--javascript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to go ahead and set up everything you need for an open-source project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDhy_vNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftczzlpa82aq4ufhllz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDhy_vNl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftczzlpa82aq4ufhllz2.png" alt="create-foss-files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just so you know, I have also written a piece about the &lt;a href="https://dev.to/msaaddev/files-every-open-source-project-must-have-2mmm"&gt;files you should have in an open-source project&lt;/a&gt; if you want to read it.&lt;/p&gt;

&lt;p&gt;Once you are done, open this folder in your VSCode or preferred code editor and write your contributing guidelines in the &lt;code&gt;contributing.md&lt;/code&gt; file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-writing-your-package-metadata"&gt;
  &lt;/a&gt;
  🎩 STEP #2 – Writing Your Package Metadata
&lt;/h2&gt;

&lt;p&gt;The files that have just been created would contain a &lt;code&gt;package.json&lt;/code&gt; file. Safe to say that this file contains all the metadata of your project. Open it.&lt;/p&gt;

&lt;p&gt;You will see many empty fields inside of it. Fill them one by one. Give your package a name, description, version, etc. Since I am writing a package to generate cross-platform paths, I am going to give it the name &lt;code&gt;cross-path&lt;/code&gt;, some description to explain the functionality of the package, and fill out other stuff as well.&lt;/p&gt;

&lt;p&gt;The file will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cross-paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Converts paths from darwin to win32 platform and vice versa"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/msaaddev/cross-paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Saad Irfan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"me@msaad.dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://twitter.com/msaaddev"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;./**/*.{js,json}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"cross paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"windows to unix paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"unix to windows path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"darwin to windows path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"windows to darwin path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"path converter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"convert paths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Saad Irfan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"msaaddev"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.3.2"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to give your package appropriate keywords related to the package you are building so people can find your package on npmjs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-coding"&gt;
  &lt;/a&gt;
  💻 STEP #3 – Coding
&lt;/h2&gt;

&lt;p&gt;The next step is to write the magic which some people also call code. Open the &lt;code&gt;index.js&lt;/code&gt; file for this. I am not going to waste your time with this part of the process since it varies from package to package.&lt;/p&gt;

&lt;p&gt;Although, I am still sharing the code of this &lt;code&gt;cross-path&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 *
 * Author: Saad Irfan
 * GitHub: msaaddev
 * Twitter: https://twitter.com/msaaddev
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logSymbols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log-symbols&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toUnix&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;upath&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 *
 *
 * @param {path} - darwin path
 * @returns {path} - win32 path
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darwinToWin32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;logSymbols&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Please provide a valid path`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodePath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;win32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/**
 *
 *
 * @param {path} - win32 path
 * @returns {path} - darwin path
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;win32ToDarwin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;logSymbols&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Please provide a valid path`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;toUnix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;darwinToWin32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;win32ToDarwin&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is one extremely important thing which I need to explain to you. You need to know what &lt;code&gt;module.exports&lt;/code&gt; does. &lt;/p&gt;

&lt;p&gt;‼️ &lt;code&gt;module.exports&lt;/code&gt; exports anything you set equal to it. You can export anything (variable, object, arrays, functions, classes) from a file through this and it will export it as a module. If you look at the code above, you will notice that I am exporting an object through &lt;code&gt;module.exports&lt;/code&gt;. The object contains two functions. So in turn, I am exporting two functions from this file via an object.&lt;/p&gt;

&lt;p&gt;Make sure the function/s that you want other people to use via your package must be put inside of this object. I recommend you read this &lt;a href="https://www.tutorialsteacher.com/nodejs/nodejs-module-exports"&gt;article&lt;/a&gt; to get a better understanding of &lt;code&gt;module.exports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;module.exports&lt;/code&gt; to modularize your code across multiple files. This will help the readability of your codebase. &lt;/p&gt;

&lt;p&gt;Every module that you export can be imported in another file using the &lt;code&gt;require&lt;/code&gt; keyword. ⚡️&lt;/p&gt;

&lt;p&gt;I don’t know if you have noticed but I am using three other packages in the code above. I am importing it into my &lt;code&gt;index.js&lt;/code&gt; file using the &lt;code&gt;require&lt;/code&gt; keyword. Just so you know, this is how someone is going to use your code in their project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-documentation"&gt;
  &lt;/a&gt;
  📖 STEP #4 – Documentation
&lt;/h2&gt;

&lt;p&gt;Once you are done coding your package, be sure to write a good documentation so people can actually use your package. The documentation plays a vital part in the success of any project.&lt;/p&gt;

&lt;p&gt;For this purpose, open &lt;code&gt;readme.md&lt;/code&gt; file and write things like features, installation guide, usage, any other information that you think is important, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-sign-up-and-login"&gt;
  &lt;/a&gt;
  🎯 STEP #5 – Sign Up And Login
&lt;/h2&gt;

&lt;p&gt;Before you can publish your package, you need to first sign up on &lt;a href="https://www.npmjs.com/"&gt;npmjs.com&lt;/a&gt;. So go ahead and do this. &lt;/p&gt;

&lt;p&gt;When you are done, open your terminal and type the following command there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will asked a bunch of questions like your username, email, password, etc. Answer them one by one. Now your computer terminal is connected with your npmjs account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-publishing"&gt;
  &lt;/a&gt;
  🚀 STEP #6 – Publishing
&lt;/h2&gt;

&lt;p&gt;The last thing you need now is to publish your package on npmjs. For this, all you need to do is open your project terminal, and type the following there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is going to go ahead and publish your project. And that’s all. You have successfully published your first open-source software on one of the biggest platforms out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-errors"&gt;
  &lt;/a&gt;
  ⚠️ Common Errors
&lt;/h2&gt;

&lt;p&gt;This post can’t be completed with me telling you some of the common errors that you might see while publishing your open-source package. &lt;/p&gt;

&lt;p&gt;Sometimes when you try to publish your package, you run into an error. It can be due to any of these two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A package with the same name already exists. In this case, either you need to change the name of your package or make a scoped package. Read more about scoped package &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/scope/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You have not updated the version number of your package before publishing it again. Everytime you have made a change and now you are publishing your package again, you would need to change its version. It is because you can not publish again on an existing version. I would suggest following &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know I have not talked about writing tests. It is because I have tried to make this piece as beginner oriented as possible. &lt;/p&gt;

&lt;p&gt;I think every developer is a magician who can produce magic via a few strokes of the keyboard (maybe not a few but you get the idea). I have also tried making a bit of a magic myself. One of them is the &lt;a href="https://github.com/msaaddev/new-tailwind-app"&gt;new-tailwind-app&lt;/a&gt; that can get you started with Tailwind integrated web app with a single command. You can see more of my projects &lt;a href="https://github.com/msaaddev?tab=repositories"&gt;here&lt;/a&gt;. Be sure to follow me while you are at it. 🙌🏻 &lt;/p&gt;

&lt;p&gt;Cheerios 🤞🏻&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>What's New in Codesphere Version 1.13.0</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 12 Jul 2021 14:16:14 +0000</pubDate>
      <link>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-13-0-1gaf</link>
      <guid>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-13-0-1gaf</guid>
      <description>&lt;p&gt;As we are sure that you saw, Github finally built the singularity! Jokes aside, we have exciting news.. we just released v1.13.0 as the latest version of Codesphere!&lt;/p&gt;

&lt;p&gt;The latest release includes new features to further improve your Codesphere experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Custom Plans&lt;/li&gt;
&lt;li&gt;Ability to give feedback via Fider​&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  Fixes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Improved the look and feel of our code search&lt;/li&gt;
&lt;li&gt;Navigate the terminal and file tree faster&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#custom-plan"&gt;
  &lt;/a&gt;
  Custom Plan
&lt;/h3&gt;

&lt;p&gt;You know what your apps need best, so Codesphere now allows you to pick the exact computing power for your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m-Ntc199--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jx4l6z8fu6yp7p72lqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-Ntc199--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jx4l6z8fu6yp7p72lqa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With custom plans, in addition to having our existing three tiers - Basic, Awake, and Boost, you can now select exactly how much storage, memory, and processing speed you want for your app, and only pay for what you really need&lt;/p&gt;

&lt;p&gt;And of course, in keeping with our mission of making scaling your app seamless, you can adjust these values at any point for when you experience sudden user growth.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#fider"&gt;
  &lt;/a&gt;
  Fider
&lt;/h3&gt;

&lt;p&gt;At Codesphere, our users are the center of our design process. That's why you can now suggest features for Codesphere on our Fider:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://feedback.codesphere.com/"&gt;https://feedback.codesphere.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, if someone has already voiced your concern or suggestion for improvement, you can upvote their comment.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#improved-code-search-and%C2%A0terminal"&gt;
  &lt;/a&gt;
  Improved Code Search and Terminal
&lt;/h3&gt;

&lt;p&gt;Last but not least, we've done a number of notable bug fixes and improvements. Most notably, we've improved the look and feel of code search.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5peuoAPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hr5nz73pl6lahso6ezl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5peuoAPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hr5nz73pl6lahso6ezl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, we've made our terminal and file tree work much faster. Our average IDE startup time is 70% faster, down to 17 seconds from a previous of 58 seconds. We'll be continuing to reduce these load times to make your Codesphere experience smoother.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h4&gt;

&lt;p&gt;Our team is working hard to make Codesphere easier and even more enjoyable to use. Stay tuned for future releases!&lt;/p&gt;

&lt;p&gt;As always, thanks for using &lt;a href="https://link.codesphere.com/BC"&gt;Codesphere&lt;/a&gt;.&lt;br&gt;
Happy coding!&lt;/p&gt;

</description>
      <category>changelog</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Methods</title>
      <author>Eduardo Julião</author>
      <pubDate>Mon, 12 Jul 2021 14:06:50 +0000</pubDate>
      <link>https://dev.to/eduardojuliao/methods-588f</link>
      <guid>https://dev.to/eduardojuliao/methods-588f</guid>
      <description>&lt;p&gt;As we write code to our software, it can get messy and complicated, to solve this issue, we break small parts of our software into &lt;code&gt;methods&lt;/code&gt;.&lt;br&gt;
A method is a block of instructions that are executed only when it's called, you can pass parameters to it and have it return a value.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-method"&gt;
  &lt;/a&gt;
  Creating a method
&lt;/h2&gt;

&lt;p&gt;A method has the follwing structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;paramenters&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;This an exmaple of a method that can be accessed by everyone, indicated by the &lt;code&gt;public&lt;/code&gt; access modifier.&lt;br&gt;
Does not have a return, indicate by the &lt;code&gt;void&lt;/code&gt; keyword.&lt;br&gt;
Has a name of &lt;code&gt;WriteToConsole&lt;/code&gt;.&lt;br&gt;
And recieves one parameter, indicated by &lt;code&gt;string message&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WriteToConsole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the method &lt;code&gt;Add&lt;/code&gt;, it recieves to paramenters &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt;, both of type &lt;code&gt;int&lt;/code&gt;, and returns the sum of both paramenters, indicated by the &lt;code&gt;return&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#breaking-down-these-examples"&gt;
  &lt;/a&gt;
  Breaking down these examples
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#access-modifier"&gt;
  &lt;/a&gt;
  Access Modifier
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Access Modifier&lt;/code&gt; defines how the code can access part of your code. They are used not only for methods, but for classes, properties, enums, etc.&lt;/p&gt;

&lt;p&gt;In C# there are four types of access modifiers:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Modifier&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;The code can only be accessed inside the same class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;The code can be accessed for everyone.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;internal&lt;/td&gt;
&lt;td&gt;The code can only be accessed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;The code can only be accessed inside the same class or classes that inherit from the declaring class.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can also combine them, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Accessed public inside the project&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// Accessed inly by classes that inherit an inside the same project&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#static-vs-instance"&gt;
  &lt;/a&gt;
  Static vs Instance
&lt;/h4&gt;

&lt;p&gt;A method that are not defined as static by the &lt;code&gt;static&lt;/code&gt; keyword, is always an instance method.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#instance"&gt;
  &lt;/a&gt;
  Instance
&lt;/h5&gt;

&lt;p&gt;To access an &lt;code&gt;Instance&lt;/code&gt; method, first, you need to instantiate an object and it works with the instance data.&lt;/p&gt;

&lt;p&gt;Let's use our calculator class as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Calculator&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to exemplify what instance data are, let's modify our calculator class, our new calculator class, will have the properties X and Y, and a parameterless method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Calculator&lt;/span&gt; &lt;span class="n"&gt;calc1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;calc1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;calc1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Calculator&lt;/span&gt; &lt;span class="n"&gt;calc2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;calc2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;calc2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints 15&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints 42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#static"&gt;
  &lt;/a&gt;
  Static
&lt;/h5&gt;

&lt;p&gt;A static method is a unique to the application, meaning that everyone will use the same copy of the method. These methods lives in the Type level instead of a Instance level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// calling a static method.&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An instance class can have multiple static/instance methods.&lt;br&gt;
A static class can only have static methods and members.&lt;br&gt;
A static method cannot be called from an instance of the object.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#return-types"&gt;
  &lt;/a&gt;
  Return Types
&lt;/h4&gt;

&lt;p&gt;A method can return a value to its caller, the type returned by the method are indicated before the method name, and they must have the &lt;code&gt;return&lt;/code&gt; keyword. &lt;code&gt;void&lt;/code&gt; methods does not return a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ExecuteAndDoesNotReturnAValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ExecuteAndReturnsAValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"This method has a return value"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#parameters-and-arguments"&gt;
  &lt;/a&gt;
  Parameters and Arguments
&lt;/h4&gt;

&lt;p&gt;Parameters are the options listed in the method signature. Arguments are the values passed to the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The method signatures has parameters&lt;/span&gt;
&lt;span class="c1"&gt;// In this case, two paramenters, x and y&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Calculator&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// When calling the method, we pass **arguments** to its **paramenters**&lt;/span&gt;
  &lt;span class="c1"&gt;// in this scenario, we are passing 5 to x and 6 to y&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#polymorphism"&gt;
  &lt;/a&gt;
  Polymorphism
&lt;/h3&gt;

&lt;p&gt;Polymorphism is when the same method has multiple functionalities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;/// returns the sum of a and b&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// returns the sum of a, b and c&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example the calculator class have two methods to add values, one that recieves 2 arguments, and another one that recieves 3 arguments.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Uptime Is For Amateurs w/ Brian Murphy</title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 12 Jul 2021 14:06:37 +0000</pubDate>
      <link>https://dev.to/linearb/uptime-is-for-amateurs-w-brian-murphy-ecn</link>
      <guid>https://dev.to/linearb/uptime-is-for-amateurs-w-brian-murphy-ecn</guid>
      <description>&lt;p&gt;You’ve probably heard of Site Reliability Engineering, but what does it really mean? Brian Murphy knows.&lt;/p&gt;

&lt;p&gt;As the SRE Manager at G-Research, Brian has spent his career building and managing successful SRE teams. He joins &lt;a href="https://devinterrupted.com/podcast/uptime-is-for-amateurs/"&gt;Dev Interrupted&lt;/a&gt; to explain how SRE teams operate, what success looks like, and why uptime isn’t the most important metric.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5uGLguKl81YnkfGskp73IM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What success looks like for SRE teams&lt;/li&gt;
&lt;li&gt;What kind of engineer is best for an SRE role&lt;/li&gt;
&lt;li&gt;The most important metrics for SRE teams&lt;/li&gt;
&lt;li&gt;How to get started with SRE at your company&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sitereliabilityengineering</category>
      <category>devops</category>
      <category>metrics</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
