<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Picture perfect image optimization for any web framework</title>
      <author>Ben Holmes</author>
      <pubDate>Wed, 05 May 2021 14:03:35 +0000</pubDate>
      <link>https://dev.to/bholmesdev/picture-perfect-image-optimization-for-any-web-framework-2o77</link>
      <guid>https://dev.to/bholmesdev/picture-perfect-image-optimization-for-any-web-framework-2o77</guid>
      <description>&lt;p&gt;üíÅ &lt;strong&gt;Intended audience:&lt;/strong&gt; &lt;em&gt;This is meant for developers building "template-driven"  static sites (11ty, Jekyll, Hugo, plain HTML) or "component-driven" web apps (NextJS, Gatsby, etc). If you're working with site builders like Wordpress or Shopify, this probably isn't the article for you!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you've been building websites for a while, "optimize your images" probably sounds like "eat your veggies." It's good for your website's health, it'll make your SEO big and strong... but that &lt;code&gt;.webp&lt;/code&gt; broccoli doesn't sound appetizing to me ü§¢&lt;/p&gt;

&lt;p&gt;What we need are some "easy wins." Some cheese to melt over that beautifully compressed brussel sprouts. So let's explore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ü•¶ (Briefly) Why you should care about those pesky 4K images&lt;/li&gt;
&lt;li&gt;üåÖ How the &lt;code&gt;picture&lt;/code&gt; element can change your optimization game&lt;/li&gt;
&lt;li&gt;üî® A helpful 11ty script you can add to your static site generator of choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Onwards!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-wrong-with-my-images-right-now"&gt;
  &lt;/a&gt;
  ü•¶ So what's wrong with my images right now?
&lt;/h2&gt;

&lt;p&gt;Before getting into the tips, let me remind you have just how badly images can hurt the performance of your website. Here's a lighthouse rating from one of my recent blog posts (images compressed with &lt;a href="https://tinyjpg.com/"&gt;tinyJPG&lt;/a&gt; mind you!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRn7Uyuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bholmes.dev/assets/blog/image-opt-bad-lighthouse-score.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRn7Uyuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bholmes.dev/assets/blog/image-opt-bad-lighthouse-score.png" alt="List of poor image loadtimes from Chromium Lighthouse performance report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yikes!&lt;/em&gt; 10 seconds to grab all those images? Chromium definitely does some throttling to test on "slower" internet connections, but it's clear those KB rating are quite high (especially for mobile users).&lt;/p&gt;

&lt;p&gt;This just to show that &lt;strong&gt;there's much more to image optimization than compression!&lt;/strong&gt; There's also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Serving the right format,&lt;/strong&gt; with JPGs preferrable and &lt;code&gt;.webp&lt;/code&gt; or &lt;code&gt;.avi&lt;/code&gt; &lt;em&gt;especially&lt;/em&gt; so&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Serving the right size,&lt;/strong&gt; ideally with &lt;em&gt;multiple copies&lt;/em&gt; of the same image at different widths and heights&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Loading at the right time,&lt;/strong&gt; reaching for "lazy" loading when we can&lt;/li&gt;
&lt;li&gt;Heck, even &lt;strong&gt;including &lt;code&gt;alt&lt;/code&gt; text&lt;/strong&gt; can affect your site from both accessibility and SEO standpoints! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I learned a bit about addressing those format and size problems using &lt;code&gt;picture&lt;/code&gt; elements, and my lighthouse definitely thanked me for it üòÑ&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uul7oXYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EyK4-JjWQAIWHWf.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKQCujW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1131721513026170883/kvrKqlHc_normal.png" alt="Ben Holmes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ben Holmes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/bholmesdev"&gt;@bholmesdev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Dang, at first my performance on &lt;a href="https://t.co/iTZUPe5aBp"&gt;bholmes.dev&lt;/a&gt; was getting destroyed by a *ton* of fat JPGs I never condensed down (especially on blog posts). Installed &lt;a href="https://twitter.com/eleven_ty"&gt;@eleven_ty&lt;/a&gt; 's image plugin, put in an hour of work... and just look at it ü§© 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:37 AM - 05 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1378869249930842116" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1378869249930842116" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1378869249930842116" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#fixing-format-size-problems-with-the-raw-picture-endraw-element"&gt;
  &lt;/a&gt;
  üåÖ Fixing format + size problems with the &lt;code&gt;picture&lt;/code&gt; element
&lt;/h2&gt;

&lt;p&gt;So how can we deliver different image files for the right people? Well, let's start with a humble image element like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/mega-chonker.jpg"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A perfectly sized cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Refer to &lt;a href="https://i.kym-cdn.com/photos/images/original/001/417/621/d9f.jpg"&gt;this handy chart&lt;/a&gt; for understanding "chonk" levels&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, say we've opened our image editor and saved a smaller version for mobile users sitting at, say, 600 pixels wide. You could probably set up some CSS to hot-swap your images depending on your screen width:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"desktop"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/chonker-1000w.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1000"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A perfectly sized cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mobile"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/chonker-600w.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A perfectly sized cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.desktop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;601px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.mobile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...But this isn't very scalable. What if we're, say, working in a markdown file where we can't append class names? Or we have different formats we want to switch between depending on browser support (JPEG vs WEBP for example)?&lt;/p&gt;

&lt;p&gt;This is where the &lt;code&gt;picture&lt;/code&gt; element comes in. Take this example here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- List out all the WEBP images + WEBP sizes we can choose from --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/assets/chonker-600w.webp 600w, /assets/chonker-1000w.webp 1000w"&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- In case a browser doesn't support WEBP, fall back to this set of JPG sources --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/jpeg"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/assets/chonker-600w.jpg 600w, /assets/chonker-1000w.jpg 1000w"&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- The actual, style-able img element that "receives" these sources --&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Also includes a default src in case no &amp;lt;source&amp;gt; can be applied --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/chonker-600.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A perfectly sized cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Some big takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can wrap our image tags in a &lt;code&gt;picture&lt;/code&gt; to unlock a "switch" case of sorts, with your browser picking the first &lt;code&gt;source&lt;/code&gt; element that it's able to render. But admittedly, &lt;em&gt;most&lt;/em&gt; modern browsers will reach for those shiny &lt;code&gt;.webp&lt;/code&gt; files listed under &lt;code&gt;type="image/webp"&lt;/code&gt; without needing the JPG fallbacks (&lt;a href="https://caniuse.com/?search=webp"&gt;current browser support here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Each source has a &lt;strong&gt;&lt;code&gt;srcset&lt;/code&gt; property&lt;/strong&gt;, which takes in a list of source URLs for a given image format. These sources are comma-separated, plus a pixel-value width using that &lt;code&gt;w&lt;/code&gt; on the end. The browser will then decide which source to use based on the &lt;code&gt;sizes&lt;/code&gt; property (more on that in the next section)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Picture elements are not images themselves!&lt;/strong&gt; This is an interesting gotcha when you start trying to style those images. So, you'll want to keep putting all your image-specific CSS (ex. &lt;code&gt;object-fit&lt;/code&gt;) on that &lt;code&gt;img&lt;/code&gt; element instead of the &lt;code&gt;picture&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-sizes-endraw-attribute"&gt;
  &lt;/a&gt;
  The &lt;code&gt;sizes&lt;/code&gt; attribute
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Sizes&lt;/code&gt; is an interesting beast. It &lt;em&gt;almost&lt;/em&gt; looks like CSS actually, with some small syntax differences.&lt;/p&gt;

&lt;p&gt;Remember those &lt;code&gt;mobile&lt;/code&gt; and &lt;code&gt;desktop&lt;/code&gt; helper classes from earlier? Well, &lt;code&gt;sizes&lt;/code&gt; let us do something rather similar. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uGiG2VWkeSs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaways from the video:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In general, the &lt;code&gt;sizes&lt;/code&gt; attribute is a way to tell the browser &lt;strong&gt;which image to use for a given screen size.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's say we have a banner image that takes up the full width of the screen for mobile users, but we have a table of contents that takes up half the width at &lt;code&gt;500px&lt;/code&gt; wide and above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pgi6oY_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bholmes.dev/assets/blog/image-sizes-table-of-contents-demo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pgi6oY_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bholmes.dev/assets/blog/image-sizes-table-of-contents-demo.png" alt="Table of contents taking up half the width of the screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Putting on our CSS hat, this means our image is &lt;code&gt;100vw&lt;/code&gt; (100% screen width) below &lt;code&gt;500px&lt;/code&gt;, and &lt;code&gt;50vw&lt;/code&gt; when we hit &lt;code&gt;@media (min-width: 500px)&lt;/code&gt;. This perfectly translates to &lt;code&gt;sizes&lt;/code&gt; üëâ &lt;code&gt;sizes="(min-width: 500px) 50vw, 100vw"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And in the context of a &lt;code&gt;picture&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!--stack up your media queries as sizes, delineated by commas ","--&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/img/6dfd7ac6-600.webp 600w, /img/6dfd7ac6-900.webp 900w..."&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 500px) 50vw, 100vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Blue and purple cluster of stars"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/img/6dfd7ac6-600.jpeg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a rule-of-thumb, you should probably use &lt;code&gt;100vw&lt;/code&gt; as a "base case" for smaller devices, and rack up media queries on top depending on how your layout changes. This does mean &lt;code&gt;sizes&lt;/code&gt; will be different depending on the &lt;em&gt;context&lt;/em&gt; your images are living in, so look out for that if you're using a component-based framework!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may be wondering why browsers can't do all this work for us. Well, this comes down to the unpredictable nature of "width" when you're throwing around CSS everywhere. If you're like me, you tend to use a lot of percentages like &lt;code&gt;width: 100%&lt;/code&gt; for image blocks, which may adjust depending on the container, padding, margins, etc that get applied. If the browser tried to decipher all this styling before loading an image, you'd be waiting a lot longer than you might want!&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#respecting-hd-displays"&gt;
  &lt;/a&gt;
  Respecting HD displays
&lt;/h3&gt;

&lt;p&gt;Note that our screen's pixel density can also affect which image gets picked from a given &lt;code&gt;srcset&lt;/code&gt;. For high-density mobile displays, it'll actually choose an image that's &lt;strong&gt;roughly double&lt;/strong&gt; the width you specify! Say we have a simple &lt;code&gt;picture&lt;/code&gt; declaration like this for instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/img/galaxy-600.webp 600w, /img/galaxy-1200.webp 1200w"&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're using &lt;code&gt;100vw&lt;/code&gt; here, so the browser should match the image source's width to the width of the display. Intuitively, we'd think that a &lt;code&gt;600px&lt;/code&gt; wide display would receive &lt;code&gt;/img/galaxy-600.webp&lt;/code&gt;... but for HD displays like Macbooks or modern smartphones, it'll actually reach for an image at 600 x 2 pixels wide (&lt;code&gt;/img/galaxy-1200.webp 1200w&lt;/code&gt; in this case). So when you're generating multiple image sizes, always reach for those higher values üí°&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-this-to-your-site-with-11ty-image"&gt;
  &lt;/a&gt;
  üî® Applying this to your site with 11ty image
&lt;/h2&gt;

&lt;p&gt;Alright, so we see how useful the &lt;code&gt;picture&lt;/code&gt; element can be... but it's only as powerful as the pictures we can supply to it. Do we really want to create all those beautifully resized, optimized, multi-format images &lt;em&gt;by hand?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luckily, there's a lot of tools to handle this process for us, and I'm going to hone in on the simplest I've found: &lt;a href="https://www.11ty.dev/docs/plugins/image/#output-directory"&gt;11ty's image plugin.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üö® Now before you start scrolling to the next section, &lt;strong&gt;no, you don't need to build your site with 11ty to use this.&lt;/strong&gt; Playing around with this tool, I realized it's perfect for generating optimized images on-the-fly for &lt;em&gt;any&lt;/em&gt; use case, no command line prowess required üî• &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-optimized-images"&gt;
  &lt;/a&gt;
  Generating optimized images
&lt;/h3&gt;

&lt;p&gt;Let's play along at home! Seriously, drop everything and go open your code editor üßë‚Äçüíª Then, make a fresh directory / folder and create a basic &lt;code&gt;package.json&lt;/code&gt;. We'll be installing the &lt;code&gt;@11ty/eleventy-img&lt;/code&gt; dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;woah-11ty-image-is-cool &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;woah-11ty-image-is-cool
npm init &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="c"&gt;# Make a package.json with defaults for everything&lt;/span&gt;
npm i @11ty/eleventy-img
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now make a random JavaScript file for us to play with (I'll call mine &lt;code&gt;image-generator.js&lt;/code&gt;). Inside, just paste the example code at the top of &lt;a href="https://www.11ty.dev/docs/plugins/image/#output-directory"&gt;11ty's documentation&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@11ty/eleventy-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://images.unsplash.com/photo-1608178398319-48f814d0750c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hm, this looks pretty straightforward. Let's run it from our terminal and see what happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node ./image-generator.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With any luck, you should see a couple new faces appear:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A &lt;code&gt;/img&lt;/code&gt; directory&lt;/strong&gt; with 2 images inside: 1 JPG picture of a galaxy that's 300 pixels wide, and a matching &lt;code&gt;webp&lt;/code&gt; image of the same size. Notice how this matches up with our &lt;code&gt;widths&lt;/code&gt; array from the code snippet üëÄ&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A &lt;code&gt;/cache&lt;/code&gt; directory&lt;/strong&gt; with some strings of characters. Think of this like a note-to-self for the plugin about the image we downloaded. It's expensive to download images off the internet, so to avoid loading it &lt;em&gt;every time we run the script,&lt;/em&gt; 11ty checks the cache to see if we've already loaded the image in the past üëç&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll also see a &lt;a href="https://www.11ty.dev/docs/plugins/image/#usage"&gt;blob of "stats"&lt;/a&gt; logged to your console. Most of these properties are self-explanatory, and some should look familiar from our &lt;code&gt;picture&lt;/code&gt; walkthrough earlier on (namely the &lt;code&gt;sourceType&lt;/code&gt; and &lt;code&gt;srcset&lt;/code&gt; attributes). We even get the output &lt;code&gt;size&lt;/code&gt; of the image in bytes, in case you want to inspect the differences between formats and sizes.&lt;/p&gt;

&lt;p&gt;But wait, there's more! Let's try experimenting with different widths and formats:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;formats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should get a plethora of resolutions inside that &lt;code&gt;img&lt;/code&gt; directory. As you can imagine, this is perfect for our picture element from earlier. You can whip up all the &lt;code&gt;source&lt;/code&gt;s and &lt;code&gt;size&lt;/code&gt; attributes by hand as a learning exercise...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automating-our-picture-elements"&gt;
  &lt;/a&gt;
  Automating our picture elements
&lt;/h3&gt;

&lt;p&gt;...Or let the plugin do this for us! Along with that handy array of &lt;code&gt;stats&lt;/code&gt;, 11ty image will splice everything into a valid &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element. All we need is a call to the &lt;code&gt;generateHTML&lt;/code&gt; helper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@11ty/eleventy-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://images.unsplash.com/photo-1608178398319-48f814d0750c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A blue and purple galaxy of stars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// alt text is required!&lt;/span&gt;
    &lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100vw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// remember our training with "sizes" from earlier...&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With any luck, we should see a beautiful &lt;code&gt;picture&lt;/code&gt; we can use anywhere on our site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/img/6dfd7ac6-300.webp 300w, /img/6dfd7ac6-1000.webp 1000w,
                  /img/6dfd7ac6-1400.webp 1400w"&lt;/span&gt;
          &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/jpeg"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/img/6dfd7ac6-300.jpeg 300w, /img/6dfd7ac6-1000.jpeg 1000w,
                  /img/6dfd7ac6-1400.jpeg 1400w"&lt;/span&gt;
          &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A blue and purple galaxy of stars"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/img/6dfd7ac6-300.jpeg"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1400"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1402"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h3&gt;

&lt;p&gt;This plugin has a whole host of extra options to explore too, like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/plugins/image/#caching-remote-images-locally-new-in-image-0.3.0"&gt;messing with cache options&lt;/a&gt; for faster build times&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/plugins/image/#synchronous-usage"&gt;generating image stats + picture elements synchronously&lt;/a&gt;, so you don't have wait for the images to &lt;em&gt;actually&lt;/em&gt; get generated&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/plugins/image/#advanced-control-of-sharp-image-processor"&gt;fine-tuning the Sharp image processor&lt;/a&gt; to tweak the output to your needs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-11ty-image-with-any-framework"&gt;
  &lt;/a&gt;
  üì£ Using 11ty image with any framework
&lt;/h2&gt;

&lt;p&gt;If all this &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; madness excites you, go throw this 11ty image plugin at your own &lt;code&gt;/assets&lt;/code&gt; directory! I wrote this handy little script to crawl all the images in a directory (&lt;a href="https://coderrocketfuel.com/article/recursively-list-all-the-files-in-a-directory-using-node-js"&gt;not recursively mind you&lt;/a&gt;) and spit out some optimized files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@11ty/eleventy-img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;readdir&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs/promises&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// node helper for reading folders&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// node helper for grabbing file names&lt;/span&gt;

&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// match this to your assets directory&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageDir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageDir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// edit to your heart's content&lt;/span&gt;
      &lt;span class="na"&gt;filenameFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// make the filename something we can recognize.&lt;/span&gt;
        &lt;span class="c1"&gt;// In this case, it's just:&lt;/span&gt;
        &lt;span class="c1"&gt;// [original file name] - [image width] . [file format]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// remove this if you don't want the logs&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you &lt;em&gt;happen&lt;/em&gt; to use 11ty on your personal site (or at least want to try), you can automate the &lt;code&gt;picture&lt;/code&gt; element insertion as well. &lt;a href="https://www.11ty.dev/docs/plugins/image/#use-this-in-your-templates"&gt;Their guide&lt;/a&gt; covers building your own "shortcode" function to insert the right &lt;code&gt;picture&lt;/code&gt; for every unoptimized image on your site.&lt;/p&gt;

&lt;p&gt;Even without this luxury though, this script is a great addition to any JS-based build step. Here's a basic &lt;code&gt;Image&lt;/code&gt; component I could slap into any React app based on that script above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// consider using TypeScript for checking all these props!&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;imageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
        &lt;span class="na"&gt;srcSet&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/img/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-600.webp 600w, /img/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-1000.webp 1000w, /img/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-1400.webp 1400w`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image/jpeg"&lt;/span&gt;
        &lt;span class="na"&gt;srcSet&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/img/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-600.jpeg 600w, /img/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-1000.jpeg 1000w, /img/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-1400.jpeg 1400w`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/img/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-600.jpeg`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;imageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming all my images get generated with this file naming convention (and I always have images at 600, 1000, and 1400 widths), this should pull all our optimized images no problem üëç&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's a brief rundown&lt;/strong&gt; on applying these learnings to &lt;code&gt;create-react-app&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RAzXB-qu22s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-try-it-yourself"&gt;
  &lt;/a&gt;
  Go try it yourself
&lt;/h3&gt;

&lt;p&gt;You can check out a running example of &lt;code&gt;create-react-app&lt;/code&gt; + 11ty image in &lt;a href="https://codesandbox.io/s/little-tree-dmr1w?file=/App.js"&gt;&lt;strong&gt;this CodeSandbox&lt;/strong&gt;&lt;/a&gt; ü™Ñ&lt;/p&gt;

&lt;p&gt;This version will listen for new images during development as well. Feel free to &lt;a href="https://github.com/Holben888/create-react-app-with-11ty-image"&gt;fork the source code&lt;/a&gt; to try in your own project (and find the edge cases I inevitably missed üòâ).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-options-for-next-nuxt-gatsby-and-more"&gt;
  &lt;/a&gt;
  Other options for Next, Nuxt, Gatsby and more
&lt;/h3&gt;

&lt;p&gt;As cool as 11ty image can be, I should definitely highlight some "native" options for popular meta-frameworks: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;For Next, &lt;a href="https://nextjs.org/docs/api-reference/next/image"&gt;their built-in Image component&lt;/a&gt; is perfect.&lt;/strong&gt; They'll also cover our sizes, formats, and image compression automatically, plus some neat props for eagerly loading images that are "above the fold" using &lt;code&gt;priority&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;For Nuxt, &lt;a href="https://image.nuxtjs.org/components/nuxt-img/"&gt;their &lt;code&gt;&amp;lt;nuxt-img&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;nuxt-picture&amp;gt;&lt;/code&gt; components&lt;/a&gt; should have you covered.&lt;/strong&gt; These offer most of the same benefits as our 11ty image plugin, letting you specify different formats, a &lt;code&gt;sizes&lt;/code&gt; attribute, and background image compression. Just be sure to use &lt;code&gt;nuxt-picture&lt;/code&gt; if you want to allow multiple image formats instead of just one!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;For Gatsby, &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-image"&gt;you've got the gold standard of image optimization&lt;/a&gt; üèÜ&lt;/strong&gt; Their image plugin was actually my main reason for using the framework a few years back, and it's only gotten better. The nicest feature (beyond matching everything we've talked about) is their loading animations for images. You can fade in over vector traces of an image, use a blur effect, and a lot more. The only downside is the hefty JS bundle it loads into the browser to pull this off, which I've &lt;a href="https://bholmes.dev/blog/before-building-your-next-static-site-with-react-consider-this/"&gt;given my opinions on over here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Beyond the framework, you can &lt;a href="https://davidwalsh.name/image-optimization-cloudinary"&gt;optimize remotely using something like Cloudinary&lt;/a&gt;.&lt;/strong&gt; This is a great option if you don't own the build process for your website, or don't want to store your images inside your code repository. For example, you can point all your Wordpress images to a cloudinary bucket and pull different image widths and formats for there. The only downside is the cost, since Cloudinary is doing all this image processing and storage for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learn-a-little-something"&gt;
  &lt;/a&gt;
  Learn a little something?
&lt;/h2&gt;

&lt;p&gt;Groovy. In case you missed it, I launched an &lt;a href="https://tinyletter.com/bholmesdev"&gt;my "web wizardry" newsletter&lt;/a&gt; to explore more knowledge nuggets like this!&lt;/p&gt;

&lt;p&gt;This thing tackles the &lt;a href="https://www.swyx.io/first-principles-approach/"&gt;"first principles"&lt;/a&gt; of web development. In other words, what are all the janky browser APIs, bent CSS rules, and semi-accessible HTML that make all our web projects tick? If you're looking to go &lt;em&gt;beyond the framework&lt;/em&gt;, this one's for you dear web sorcerer üîÆ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tinyletter.com/bholmesdev"&gt;Subscribe away right here&lt;/a&gt;. I promise to always teach and never spam ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>eleventy</category>
    </item>
    <item>
      <title>Awesome Button Hover Using CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Wed, 05 May 2021 13:25:48 +0000</pubDate>
      <link>https://dev.to/nikhil27b/awesome-button-hover-using-css-4dn7</link>
      <guid>https://dev.to/nikhil27b/awesome-button-hover-using-css-4dn7</guid>
      <description>&lt;p&gt;Today I created a Simple Button Hover Effect Like Accenture Using HTML &amp;amp; CSS. this hover effect is simple but it looks amazing when you hover on the button then box-shadow comes in the background also transform the button position. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/WNpeqmJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GPT-3 and CSS Frameworks</title>
      <author>Vladimir Carrer</author>
      <pubDate>Wed, 05 May 2021 13:17:54 +0000</pubDate>
      <link>https://dev.to/vladocar/gpt-3-and-css-frameworks-2fpm</link>
      <guid>https://dev.to/vladocar/gpt-3-and-css-frameworks-2fpm</guid>
      <description>&lt;p&gt;Recently I gained access to the OpenAI GPT-3 API. I tried different things like content creation, code translation and other experiments. One of the amazing things of GPT-3 is the capacity to learn from simple textual examples.&lt;/p&gt;

&lt;p&gt;Programming is one of the most complex and problem solving tasks. But I wasn‚Äôt interested in training GPT-3 to program. For me it was more interesting how GPT-3 can speed up some boring repetitive code creation.&lt;/p&gt;

&lt;p&gt;GPT-3 works great with well structured code that has clear naming logic. I tried to train it to generate layout HTML with clear class syntax. &lt;/p&gt;

&lt;p&gt;I used my Smart CSS Grid Framework because it has simple naming logic. CSS Classes are named from one to twelve because it is a 12 grid system. &lt;/p&gt;

&lt;p&gt;The logic is the total of each row should be always 12 or something like this 3 + 3 + 4 + 2 = 12&lt;/p&gt;

&lt;p&gt;The idea was, when I write something like this: &lt;/p&gt;

&lt;p&gt;3 | 3 | 6 &lt;/p&gt;

&lt;p&gt;To receive something like this:&lt;/p&gt;

&lt;p&gt;After a couple examples GPT-3 started to work almost perfectly even with more complex layouts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BTEqZMmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3a4on98gs3mj4hrxbju.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BTEqZMmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3a4on98gs3mj4hrxbju.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the text I used to train GPT-3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;text: 4 | 4 | 4
code: &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt;

text: 3 | 3 | 3 | 3
code: &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt;

text: 2 | 2 | 2 | 6
code: &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="six"&amp;gt; 

text: 3 | 2 | 4 | 3
code: &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt;

text: 3 | 2 | 4 | 3 | 4 | 8
code: &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="eight"&amp;gt; &amp;lt;/div&amp;gt;

text: 3 | 2 | 4 | 2 | 2 | 8
code: &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="eight"&amp;gt; &amp;lt;/div&amp;gt;

text: 3 | 2 | 9 | 
4 | 4 | 12 | 
5 | 2 | 4
code: &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="nine"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="twelve"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="five"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt;

text: 3 | 2 | 9 | 
4 | 4 | 11 | 
5 | 2 | 4
code: &amp;lt;div class="three"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="nine"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="eleven"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="five"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="two"&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class="four"&amp;gt; &amp;lt;/div&amp;gt;

text:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Important to keep the ‚Äútemperature‚Äù to 0, we don‚Äôt want GPT-3 to be creative. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5jA-gZIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8hnox1bdq7xfweoyr6f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jA-gZIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8hnox1bdq7xfweoyr6f.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a super simple example of how GPT-3 can be used to generate repetitive HTML code. Basically all CSS Frameworks follow certain rules that can be easily used for GPT-3 training.&lt;/p&gt;

</description>
      <category>gpt3</category>
      <category>css</category>
      <category>webdev</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Top 5 Python Frameworks for Game development</title>
      <author>Ashish Yadav</author>
      <pubDate>Wed, 05 May 2021 13:06:48 +0000</pubDate>
      <link>https://dev.to/expoashish/top-5-python-frameworks-for-game-development-44jk</link>
      <guid>https://dev.to/expoashish/top-5-python-frameworks-for-game-development-44jk</guid>
      <description>&lt;p&gt;Python language is one of the most popular programming language for game development because Python provides huge and useful libraries for game development. In this article, we have listed down the top 5 frameworks of Python used for game development one must know. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-such-a-amazing-blogs-heregt"&gt;
  &lt;/a&gt;
  &lt;a href="https://expoashish.blogspot.com/2021/05/top-5-python-frameworks-for-game.html"&gt;Read Such a Amazing Blogs here---&amp;gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-pygame"&gt;
  &lt;/a&gt;
  1. Pygame
&lt;/h2&gt;

&lt;p&gt;Pygame is an open-source Python library which is used to create video games. This library is a combination of C, Python and Native. Pygame was written by Pete Shinners to replace PySDL. Pygame adds functionality on top of the excellent SDL library. Pygame allows you to create fully featured games and multimedia programs in the Python language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pygame"&gt;
  &lt;/a&gt;
  Features of Pygame:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Multicore CPUs can be used easily.&lt;/li&gt;
&lt;li&gt;Uses optimised C and Assembly code for core functions.&lt;/li&gt;
&lt;li&gt;Simple and Portable.&lt;/li&gt;
&lt;li&gt;A small amount of code is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-pyglet"&gt;
  &lt;/a&gt;
  2. Pyglet
&lt;/h2&gt;

&lt;p&gt;pyglet is a cross-platform windowing and multimedia library for Python. Pyglet is one of the most powerful Python library that can be used for developing games. Pyglet supports windowing, user interface event handling, Joysticks, OpenGL graphics, loading images and videos, and playing sounds and music. pyglet works on Windows, OS X and Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pyglet"&gt;
  &lt;/a&gt;
  Features of Pyglet:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No external dependencies or installation requirements.&lt;/li&gt;
&lt;li&gt;pyglet is provided under the BSD open-source license.&lt;/li&gt;
&lt;li&gt;pyglet is written entirely in pure Python.&lt;/li&gt;
&lt;li&gt;Load images, sound, music and video in almost any format.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-panda3d"&gt;
  &lt;/a&gt;
  3. Panda3D
&lt;/h2&gt;

&lt;p&gt;Panda3D is a powerful 3D engine written in C++, with a complete set of Python bindings. Panda3D is a modern engine supporting advanced features such as shaders, stencil, and render-to-texture. Panda3D is free software that runs under Windows, Linux, or macOS. Game development with Panda3D usually consists of writing a Python or C++ program that controls the Panda3D library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-panda3d"&gt;
  &lt;/a&gt;
  Features of Panda3D:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Platform Portability.&lt;/li&gt;
&lt;li&gt;Flexible Asset Handling.&lt;/li&gt;
&lt;li&gt;Library Bindings.&lt;/li&gt;
&lt;li&gt;Extensibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-pykyra"&gt;
  &lt;/a&gt;
  4. PyKyra
&lt;/h2&gt;

&lt;p&gt;Pyglet library is a cross-platform windowing and multimedia library for creating games using Python. PyKyra is one of the fastest game development frameworks for Python that is based on both SDL and the Kyra engine. it also supports MPEG video, sound such as MP3, Ogg Vorbis, Wav, etc., direct images reading, and much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-pyopengl"&gt;
  &lt;/a&gt;
  Features of pyOpenGL:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Simple and Portable.&lt;/li&gt;
&lt;li&gt;It has no dependencies outside of the built-in Python modules.&lt;/li&gt;
&lt;li&gt;The framework supports top-down, side, and symmetric translation.&lt;/li&gt;
&lt;li&gt;It has a sophisticated toolchain, which includes a sprite editor and encoder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-ursina-engine"&gt;
  &lt;/a&gt;
  5. Ursina Engine
&lt;/h2&gt;

&lt;p&gt;Ursina makes it easier to develop games, visualizations and other kinds of software.The concise API combined with the power of the Python programming language, makes life easier for the developer so they can focus on what they are making.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-ursina-engine"&gt;
  &lt;/a&gt;
  Features of Ursina Engine:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reload code/textures/models while in-game.&lt;/li&gt;
&lt;li&gt;Automatic import of .psd and .blend files.&lt;/li&gt;
&lt;li&gt;Play in fullscreen while developing.&lt;/li&gt;
&lt;li&gt;Lots of included procedural 3D primitives.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#and-subscribe-to-our-youtube-channel-bestcodecreator"&gt;
  &lt;/a&gt;
  üé•üí°üî•AND Subscribe to Our YouTube Channel &lt;a href="https://www.youtube.com/bestcodecreator"&gt;bestcodecreator&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#and-support-our-blogging-site-myblogs"&gt;
  &lt;/a&gt;
  üé•üí°üî•AND Support Our Blogging site &lt;a href="https://expoashish.blogspot.com/2021/04/machine-learning-complete-roadmap.html"&gt;myblogs&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Thank you for reading this blog. I wish you the best in your journey in learning and mastering in Python Game Developmentüî•üî•.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Ilia Kiselevich, Founder &amp; CEO at SolveIt | Interview For TopDevelopers</title>
      <author>SolveIt</author>
      <pubDate>Wed, 05 May 2021 13:03:16 +0000</pubDate>
      <link>https://dev.to/solveit/ilia-kiselevich-founder-ceo-at-solveit-interview-for-topdevelopers-mm3</link>
      <guid>https://dev.to/solveit/ilia-kiselevich-founder-ceo-at-solveit-interview-for-topdevelopers-mm3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgAy4asq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2ckul6yw8imc7e6uibf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgAy4asq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2ckul6yw8imc7e6uibf.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#give-us-a-quick-overview-on-solveit-when-and-how-did-you-begin-this-journey-and-what-were-your-motives-to-be-successful-in-app-development"&gt;
  &lt;/a&gt;
  Give us a quick overview on SolveIt. When and how did you begin this journey and what were your motives to be successful in app development?
&lt;/h4&gt;

&lt;p&gt;Our journey started small in scale, I was a developer and already knew everything inside out. More projects came up, clients liked our approach to business and the quality of our services. I gathered a team of the most experienced developers and founded SolveIt. Initially, we were only doing mobile apps, now we have a team of 51 professionals and 18 services to effectively solve customer problems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-your-role-in-the-management-and-development-of-solveit"&gt;
  &lt;/a&gt;
  What is your role in the management and development of SolveIt?
&lt;/h4&gt;

&lt;p&gt;As a CEO and Founder at SolveIt, I am responsible for crucial decisions, long-term development strategies, and the company‚Äôs overall performance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tell-us-about-your-biggest-achievement-in-the-industry"&gt;
  &lt;/a&gt;
  Tell us about your biggest achievement in the industry
&lt;/h4&gt;

&lt;p&gt;I believe the biggest achievement for our company and for me personally is that along the way our clients stop being clients and become our friends, and that‚Äôs something you can‚Äôt put a price on. We still communicate with all of our clients and the retention rate is more than 85%. They don‚Äôt just come back for software development and support, but for product launch and promotion.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-schedule-the-development-phases-of-the-apps-to-promise-the-timeline-to-your-clients"&gt;
  &lt;/a&gt;
  How do you schedule the development phases of the apps to promise the timeline to your clients?
&lt;/h4&gt;

&lt;p&gt;If you look at a high-level project, we usually distinguish between stages: specification/design; development; testing and QA and launch. We actively use Agile and Scrum methodologies for projects. By dividing the project into small iterations (2-week sprints) we ensure a controlled project development process. We pride ourselves in knowing that our clients always know what the team is working on and when the next version of the application will be released. It ensures high customer involvement. With every milestone we report to the client, gain their valuable feedback, and act upon it before taking up the next task. Our focus on quality and a transparent iterative work model has built confidence in us as a strategic and long-term technology partner.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-help-your-clients-in-choosing-the-right-yet-profitable-platform-for-app-development"&gt;
  &lt;/a&gt;
  How do you help your clients in choosing the right yet profitable platform for app development?
&lt;/h4&gt;

&lt;p&gt;On each project, we try to fully understand the business processes, the specifics of the subject matter and plans for the project‚Äôs development. After that, we give recommendations to the client based on our experience and expertise about how to proceed with their launch.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#which-would-you-suggest-for-a-successful-and-profitable-business-progression-native-or-hybrid-apps-how-do-you-define-the-factors-that-influenced-you-to-make-this-choice"&gt;
  &lt;/a&gt;
  Which would you suggest for a successful and profitable business progression, Native or hybrid apps? How do you define the factors that influenced you to make this choice?
&lt;/h4&gt;

&lt;p&gt;Each of these approaches has its own pros and cons. Hybrid development works best for projects where it is important to be cost-effective and quickly implement new features. However, Hybrid development has a number of drawbacks, in particular, it is less supported and when new versions of Android and IOS are released, the application can be unstable. Native development, in turn, is much more stable, the application runs smoother and there are many more possibilities for making complex animations and UI elements. The disadvantages of native development can be attributed to the high price due to the fact that each platform needs to be developed separately, and in this regard, the speed and cost of introducing new functionality is higher.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-scheme-your-pricing-model-how-do-you-fix-your-budget"&gt;
  &lt;/a&gt;
  How do you scheme your pricing model? How do you fix your budget?
&lt;/h4&gt;

&lt;p&gt;We work on three different engagement models: Time&amp;amp;Material, which means that at the start of the project, we work on pre-estimation and carry out work in sprints with preliminary approval of the scope of work and tasks performed. Payment is made based on the hours worked in the reporting period (2‚Äì4 weeks). This model lets you maintain the flexibility of the project and its functionality. Each stage of planning the next sprint, its content, and user-stories will be approved by our customer. Then there‚Äôs the Fixed Price model. We estimate the project and its parts and fix the cost. Until the first stage is completed, the next stage does not start. Payment, timeframes, and the scope of work are fixed and are specified in the contract. A contract with a fixed price is most often used for small projects with strictly limited functionality, which will definitely not be changed or supplemented. Finally, we offer the ability to use us as an Offshore Development Centre or Offshore Dedicated Team if you will. This kind of operation is a perfect solution for businesses wishing to augment their software development productivity without bearing too much additional expenses such as hiring extra staff or investing in other resources.&lt;/p&gt;

&lt;p&gt;First, we conduct several interviews with the client and form a commercial proposal, where we show him all the options and our team offers the best way for the customer to develop and evaluate the project based on the requirements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-helpful-are-the-mobile-apps-developed-by-your-team-for-enhancing-your-clients-business"&gt;
  &lt;/a&gt;
  How helpful are the mobile apps developed by your team, for enhancing your clients‚Äô business?
&lt;/h4&gt;

&lt;p&gt;Each mobile application is unique and useful. We make the product as usable as possible through design, high-quality development and strict testing. Our products have 1M+ end-users worldwide and help clients increase profits and customer loyalty, and open additional paths of monetization for their business.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-according-to-you-are-the-best-practices-to-attain-client-satisfaction"&gt;
  &lt;/a&gt;
  What according to you are the best practices to attain client satisfaction?
&lt;/h4&gt;

&lt;p&gt;The best practices to attain client satisfaction are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsible work approach&lt;/li&gt;
&lt;li&gt;Transparent reports&lt;/li&gt;
&lt;li&gt;Support client‚Äôs product during and after development&lt;/li&gt;
&lt;li&gt;High quality for a good price&lt;/li&gt;
&lt;li&gt;Finding an individual approach to each client&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-update-your-business-system-to-be-in-pace-with-the-technological-advancements"&gt;
  &lt;/a&gt;
  How do you update your business system to be in pace with the technological advancements?
&lt;/h4&gt;

&lt;p&gt;I think IT companies have to keep up with technological progress. We actively work with existing customers and offer them the ability to implement innovative solutions, improving their products. We also develop new products, constantly monitoring for technological advancements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-your-thoughts-about-ar-vr-and-internet-of-things-iot"&gt;
  &lt;/a&gt;
  What are your thoughts about AR, VR and Internet of Things (IoT)?
&lt;/h4&gt;

&lt;p&gt;AR, VR, IoT are actively developing areas now and according to analytics and investments in this area still have huge potential for explosive growth. The current market has many industries that are yet to disintegrate into smaller sub-sectors. In the foreseeable future, these technologies will be in the home of every human being on the planet and become an integral part of our lives as the Internet has become nowadays. We as a company are staying on top of it and are developing these areas by introducing advanced developments, frameworks, libraries and methodologies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-you-think-will-be-the-future-of-mobile-technology"&gt;
  &lt;/a&gt;
  What do you think will be the future of Mobile technology?
&lt;/h4&gt;

&lt;p&gt;Every year Google and Apple present new versions of their operating systems which are closer and closer to the features provided by desktop platforms, and sometimes even superior. Qualcomm, Mediatek, Exynos (Samsung) continually update the line of processors constantly raising the bar of performance and energy efficiency, which together with the OS makes for a great user experience. More and more often I, as well as I think you, can see that phones handle a large part of our interactions with the Internet. In line with this vision, we as a company see a great demand from society to innovate and create products on mobile platforms and this demand will increase more and more as it becomes an integral part of our lives.&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://solveit.dev"&gt;https://solveit.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>interview</category>
      <category>ceo</category>
      <category>development</category>
      <category>developer</category>
    </item>
    <item>
      <title>Quickly explore your data with `uniq` and `tally`</title>
      <author>matt swanson</author>
      <pubDate>Wed, 05 May 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/quickly-explore-your-data-with-uniq-and-tally-4iaj</link>
      <guid>https://dev.to/swanson/quickly-explore-your-data-with-uniq-and-tally-4iaj</guid>
      <description>&lt;p&gt;A common question you may want to answer on user-input data is: what values have been entered and how many times is each one used?&lt;/p&gt;

&lt;p&gt;Maybe you have a list of dropdown options and you want to investigate removing a rare-used option.&lt;/p&gt;

&lt;p&gt;Ruby has two handy methods that I reach for often: &lt;code&gt;uniq&lt;/code&gt; and &lt;code&gt;tally&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;uniq&lt;/code&gt; method operates on an enumerable and compresses your data down to unique values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Outreach&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;uniq&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Confirmed w/o Outreach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Awaiting Outreach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Responded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"No Response Expected"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Follow-up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Awaiting Reply"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While most developers are familiar with &lt;code&gt;uniq&lt;/code&gt;, the &lt;code&gt;tally&lt;/code&gt; method is one of the best kept secrets in Ruby. The &lt;code&gt;tally&lt;/code&gt; method takes an enumerable of values and returns a hash where the keys are unique values and the values are the number of times the value appeared in the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Outreach&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:status&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;tally&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"Confirmed w/o Outreach"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;106&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Awaiting Outreach"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Responded"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"No Response Expected"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Follow-up"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;"Awaiting Reply"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two methods are great to have in your toolbox to quickly explore your data in a Rails console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Ruby API: &lt;a href="https://ruby-doc.org/core-3.0.0/Enumerable.html#method-i-uniq"&gt;Enumerable#uniq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ruby API: &lt;a href="https://ruby-doc.org/core-3.0.0/Enumerable.html#method-i-tally"&gt;Enumerable#tally&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>#30DaysofAppwrite : Your First Request</title>
      <author>Damodar Lohani</author>
      <pubDate>Wed, 05 May 2021 12:58:52 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-your-first-request-4oco</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-your-first-request-4oco</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focussed at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#your-first-request"&gt;
  &lt;/a&gt;
  Your First Request
&lt;/h1&gt;

&lt;p&gt;Over the last few days, we've covered Appwrite's admin console, microservices layout, and installation. It's finally time to start a new project! Today, we're going to discuss beginning both web and Flutter applications, so let us get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-platforms-to-project"&gt;
  &lt;/a&gt;
  Adding Platforms to Project
&lt;/h2&gt;

&lt;p&gt;Adding platforms to the project helps us validate requests that come from clients. We validate the origin of the request against the platforms added in the project in the console. Any origin not matching the available platforms will be rejected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-platform"&gt;
  &lt;/a&gt;
  Adding platform
&lt;/h2&gt;

&lt;p&gt;On the console home page below the Usage graph, you can find the list of platforms and the &lt;strong&gt;Add Platform&lt;/strong&gt; button. In order to add a new platform, you can simply tap the &lt;strong&gt;Add Platform&lt;/strong&gt; button and select one of the available options. As of writing this tutorial, &lt;code&gt;Web&lt;/code&gt; and &lt;code&gt;Flutter&lt;/code&gt; platforms are the available options ( with more coming soon! ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EVEg1_BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/un3hhnc9p5h7mgfs3nka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVEg1_BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/un3hhnc9p5h7mgfs3nka.png" alt="Add Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;

&lt;p&gt;To add a web platform, all you need is a &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;host&lt;/strong&gt;. &lt;strong&gt;Name&lt;/strong&gt; can be anything you want to name your platform and the &lt;strong&gt;Host&lt;/strong&gt; can be the domain under which your web project is running. For building and testing web projects locally, the host can be &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ePOvma-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8ncjkw8k46nrpr79vn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ePOvma-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8ncjkw8k46nrpr79vn3.png" alt="Add Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;

&lt;p&gt;When adding a Flutter Platform, you have two options: Android and iOS. You can add either Android or iOS or both based on what platforms you're building for. You will be able to add other platforms like desktop once they are available.&lt;br&gt;
Once you've selected Android or iOS, all you need is a &lt;strong&gt;name&lt;/strong&gt; and the &lt;strong&gt;application id&lt;/strong&gt;. &lt;strong&gt;Name&lt;/strong&gt; can be anything you want to name your platform and the &lt;strong&gt;Application Id&lt;/strong&gt; can be found in your project. For Android, it's found in your Flutter project's &lt;code&gt;android/app/build.gradle&lt;/code&gt; file. For iOS, it can be found by opening your iOS app in XCode. Usually, by default, if you have not changed, it will be the same for both Android and iOS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6bUYDCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s71q2x3nr3vqplhl66ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6bUYDCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s71q2x3nr3vqplhl66ph.png" alt="Add Platform"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For Flutter web, you add the platform as Web as described above.&lt;/p&gt;

&lt;p&gt;Well now you know what platforms are and how you can add them. Now you are ready to make valid requests to your Appwrite server and get back response. Let's look at how we can do that in both Web and Flutter projects.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-requests-to-appwrite-server"&gt;
  &lt;/a&gt;
  Making Requests to Appwrite Server
&lt;/h2&gt;

&lt;p&gt;Though we can make request to Appwrite server with direct REST API calls, using SDKs will make it a lot more structured and easier. So we will look into how we can make request to Appwrite server using Appwrite's official SDKs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;

&lt;p&gt;Appwrite's &lt;a href="https://github.com/appwrite/sdk-for-web"&gt;Web SDK&lt;/a&gt; is very simple to use. You can add it to your project  using a package manager like &lt;a href="https://npmjs.org"&gt;NPM&lt;/a&gt; or &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt;. The following command adds the Appwrite Web SDK to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can install directly from CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/appwrite@2.0.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you add the dependency, you can now use the Appwrite SDK on your project. In order to make the request, we first need to initialize the SDK with endpoint and project details as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;appwrite&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Set your endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;455x34dfkj&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Project UID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make a request using our SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Register User&lt;/span&gt;
&lt;span class="nx"&gt;appwrite&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;me@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jane Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information can be found on our &lt;a href="https://appwrite.io/docs/getting-started-for-web"&gt;Getting Started for Web&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;

&lt;p&gt;Appwrite's Flutter SDK is super easy to get started with. First you need to add the Appwrite's SDK as a dependency in your &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;appwrite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.5.0-dev.1&lt;/span&gt; &lt;span class="c1"&gt;#use the latest version available&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the dependency is added and &lt;code&gt;flutter pub get&lt;/code&gt; is run, you can import and use the Appwrite SDK in your project. Before making a request you must first initialize the SDK with the required endpoint and project ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://localhost/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5e8cf4f46b5e8'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSelfSigned&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Remove in production&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can make requests and handle responses easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Register User&lt;/span&gt;
&lt;span class="n"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;email:&lt;/span&gt; &lt;span class="s"&gt;'me@appwrite.io'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;password:&lt;/span&gt; &lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s"&gt;'My Name'&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information can be found on our &lt;a href="https://appwrite.io/docs/getting-started-for-flutter"&gt;Getting Started for Flutter&lt;/a&gt; guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns ü¶Ñ. Stay tuned for tomorrow's article! Until then üëã&lt;/p&gt;

</description>
      <category>30daysofappwrite</category>
      <category>javascript</category>
      <category>flutter</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Programming a Clock using Javascript</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 05 May 2021 12:55:52 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/programming-a-clock-using-javascript-2ngp</link>
      <guid>https://dev.to/hrishikesh1990/programming-a-clock-using-javascript-2ngp</guid>
      <description>&lt;p&gt;In this article, we look at how you can implement a real-time clock in javascript. We break down the javascript code used to build a clock so that you can reciprocate it with ease.&lt;/p&gt;

&lt;p&gt;However, in case you are a seasoned programmer and are here only for the code, you can dive straight into the solutions. In case you aren‚Äôt, I would recommend you follow along step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Overview of Javascript Clock&lt;/li&gt;
&lt;li&gt;12 Hours clock using Javascript&lt;/li&gt;
&lt;li&gt;24 Hour clock using Javascript&lt;/li&gt;
&lt;li&gt;Other Related Concepts&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-javascript-clock"&gt;
  &lt;/a&gt;
  Overview of Javascript Clock:
&lt;/h2&gt;

&lt;p&gt;Clocks are used in a larger variety of websites, however, they are of utmost use in websites where time plays a large factor, eg: Ticket booking websites. However, given javascript supports and lets us manipulate webpages in real-time, building clocks that show real-time data in javascript have become quite straightforward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In this article, we look closely at the javascript code behind a clock. We do not talk about CSS styling as there are plenty of blogs already available. We rather focus largely on the javascript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-hours-clock-using-javascript"&gt;
  &lt;/a&gt;
  12 Hours clock using Javascript
&lt;/h2&gt;

&lt;p&gt;As the name suggests, in this section we look at how to build a 12 hours clock in javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-clock-code-12-hours"&gt;
  &lt;/a&gt;
  Javascript Clock Code (12 hours):
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ancileric/embed/KKWPjoR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h3&gt;

&lt;p&gt;The code may seem intimidating at first, but it‚Äôs really quite straightforward once you break it down. &lt;/p&gt;

&lt;p&gt;We start the code by defining a function &lt;strong&gt;currentTime()&lt;/strong&gt;, Inside the function, we store the current time in a variable called &lt;strong&gt;date&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We do that by using the &lt;strong&gt;new Date()&lt;/strong&gt; object, this object returns the browser‚Äôs date along with the time zone. But remember the date object is static, we would have to keep updating it, we will get into the logic behind this later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var date = new Date(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is done, we extract the hours, minutes, and seconds from the variable (date) using the &lt;strong&gt;getHours()&lt;/strong&gt;, &lt;strong&gt;getMinutes()&lt;/strong&gt; and &lt;strong&gt;getSeconds()&lt;/strong&gt; methods. These methods return the respective values when a date is passed, these values are stored in variables. And lastly, we use a variable &lt;strong&gt;session&lt;/strong&gt; to store the AM or PM tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var hh = date.getHours();
var mm = date.getMinutes();
var ss = date.getSeconds();
var session = "AM";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Here &lt;strong&gt;date&lt;/strong&gt; in &lt;strong&gt;date.getHours()&lt;/strong&gt; etc is the variable we used to store the date earlier. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;date.getHours&lt;/strong&gt; method returns values from 0-23, and given we are programming a 12 hours clock we use the following if statement to set 0 as 12.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(hh == 0){
      hh = 12;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, we use this &lt;strong&gt;if&lt;/strong&gt; to subtract hours greater than 12 and to overwrite the value of session to ‚ÄúPM‚Äù.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(hh &amp;gt; 12){
    hh = hh - 12;
    session = "PM";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To understand the next bit of code, you need to be familiar with two concepts. Firstly the &lt;strong&gt;getHours()&lt;/strong&gt;, &lt;strong&gt;getMinutes()&lt;/strong&gt; and &lt;strong&gt;getSeconds()&lt;/strong&gt;  methods return value 0 to 23,  59, 59 respectively. The key point here is that single digit values are returned as # (eg: 7), however, in our clock, these values need to be displayed as ## (eg: 07). &lt;/p&gt;

&lt;p&gt;And to achieve this we use ternary operators. This operator returns a value if the condition is true and another value if it is false. I‚Äôve added the syntax below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(condition ? if true : if false);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this operator, we solve the above problem by adding a 0 before the digit that is less than 10.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hh = (hh &amp;lt; 10) ? "0" + hh : hh;
mm = (mm &amp;lt; 10) ? "0" + mm : mm;
ss = (ss &amp;lt; 10) ? "0" + ss : ss;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we create a variable time to store the time in the desired format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var time = hh + ":" + mm + ":" + ss + " " + session;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, to display the time on the webpage we use the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById("clock").innerText = time 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;strong&gt;document&lt;/strong&gt; represents the webpage, the &lt;strong&gt;.getElementbyId()&lt;/strong&gt; returns the element whose ID has been passed as the parameter in our case ‚Äú&lt;strong&gt;clock&lt;/strong&gt;‚Äù. And the &lt;strong&gt;innertext&lt;/strong&gt; property sets the context of the node to &lt;strong&gt;time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And lastly, the most important part, remember I mentioned that &lt;strong&gt;get date()&lt;/strong&gt; returns a static value, we use the &lt;strong&gt;setTimeout()&lt;/strong&gt; method to keep it updated. I‚Äôve added the syntax for it below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setTimeout(function, milliseconds, param1, param2, ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method calls or runs a function after a specified number of milliseconds. Note: 1000ms = 1 second. &lt;/p&gt;

&lt;p&gt;We use this method to update the code every second, to keep our clock running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var t = setTimeout(function(){ currentTime() }, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And all that‚Äôs left is to run the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;currentTime(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#24-hour-clock-code-amp-explanation"&gt;
  &lt;/a&gt;
  24 Hour clock - Code &amp;amp; Explanation
&lt;/h2&gt;

&lt;p&gt;The code for a 24-hour clock is quite similar to the previous code, we only have one major change. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ancileric/embed/PopYMPE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h3&gt;

&lt;p&gt;The only difference here is that we have removed the first if statement, which changed 0 to 12, and in the second if we have removed the condition to minus the hours by 12. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Boger - my new React project, an alternative to Omegle </title>
      <author>Sebastian Korotkiewicz</author>
      <pubDate>Wed, 05 May 2021 12:21:21 +0000</pubDate>
      <link>https://dev.to/skorotkiewicz/boger-my-new-react-project-an-alternative-to-omegle-1m91</link>
      <guid>https://dev.to/skorotkiewicz/boger-my-new-react-project-an-alternative-to-omegle-1m91</guid>
      <description>&lt;p&gt;Hello, dev comunity! :)&lt;br&gt;
Today I wanted to show my new project created in React, Redux and NodeJS, it's a quite unusual alternative to the popular Omegle.&lt;/p&gt;

&lt;p&gt;You can not only talk via text or video chat, but you can also randomize the topic of conversation by pressing the "Break the Ice" button or send each other photos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtMOd5mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlwwnyyfvsqzhvxvp3ei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtMOd5mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlwwnyyfvsqzhvxvp3ei.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The site always tries to choose first a random stranger who speaks the same language as you, you can change the language in the settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg4aoAJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm6vh1ew925ayt292ot5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg4aoAJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm6vh1ew925ayt292ot5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently I added also creation of Space rooms, where you can talk with chosen person after giving link, as well as creation of Space groups, where there can be many strangers in one group.&lt;/p&gt;

&lt;p&gt;In settings you can also change displaying messages style from text to bubbles or turn off automatic changing of smileys to Emoji :)&lt;/p&gt;

&lt;p&gt;Both photo and video chat are sent via WebRTC, which means that no server is affected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--64HLuYXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h7s8xrmklc462gya4wt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--64HLuYXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h7s8xrmklc462gya4wt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think about my little project? &lt;br&gt;
Any suggestions what I can change, add or improve?&lt;br&gt;
If you have found a bug, please report it to me here, or in the form on the site.&lt;/p&gt;

&lt;p&gt;My project can be found at: &lt;a href="https://boger.js.org/"&gt;boger.js.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If anyone wants to help translate the site, they can do so via Pull Request to GitHub:&lt;br&gt;
&lt;a href="https://github.com/skorotkiewicz/Boger-Translations"&gt;https://github.com/skorotkiewicz/Boger-Translations&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cypress Assertions</title>
      <author>Automation Bro</author>
      <pubDate>Wed, 05 May 2021 12:13:51 +0000</pubDate>
      <link>https://dev.to/automationbro/cypress-assertions-3iac</link>
      <guid>https://dev.to/automationbro/cypress-assertions-3iac</guid>
      <description>&lt;p&gt;In this tutorial, we will cover different types of Cypress Assertions such as the default, implicit and explicit assertions and talk about the difference between the should and the expect assertions.&lt;/p&gt;

&lt;p&gt;Cypress uses the Chai assertion library as well as the extensions of Sinon &amp;amp; jQuery to provide you with dozens of powerful assertions for free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-assertions"&gt;
  &lt;/a&gt;
  Default Assertions
&lt;/h3&gt;

&lt;p&gt;Cypress comes with many default assertions that can be used without having to explicitly define assertions, such as ‚Äì&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;cy.visit():&lt;/strong&gt; every-time you visit a page, Cypress expects the page to return with a 200 status code&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cy.get():&lt;/strong&gt; the get command expects the element to exist in the DOM first before trying to access it&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#implicit-assertions"&gt;
  &lt;/a&gt;
  Implicit Assertions
&lt;/h3&gt;

&lt;p&gt;The implicit assertions used the &lt;code&gt;should()&lt;/code&gt; or the &lt;code&gt;and()&lt;/code&gt; commands when making assertions. This is the preferable way of making assertions in Cypress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92qF1des--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpubgtovgebjau12s4lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92qF1des--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpubgtovgebjau12s4lm.png" alt="implicit1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even chain multiple assertions together ‚Äì&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0oeaqUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prx9fdg9170of87kf87q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0oeaqUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prx9fdg9170of87kf87q.png" alt="implicit2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#explicit-assertions"&gt;
  &lt;/a&gt;
  Explicit Assertions
&lt;/h3&gt;

&lt;p&gt;You should use Explicit assertions when you would like to make multiple assertions for the same subject or when you would like to manipulate your subject before making your assertion. For explicit assertions, you will use the &lt;code&gt;expect&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7tS2ygA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0li96lq70o3xxbmbuqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7tS2ygA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0li96lq70o3xxbmbuqc.png" alt="explicit"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-see-learn-more-about-cypress-assertions-"&gt;
  &lt;/a&gt;
  Check out the video below to see learn more about Cypress Assertions ‚Äì
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/naTXinVm58Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;üìß Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;/p&gt;

&lt;p&gt;üëç Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build your Responsive website without media query</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 05 May 2021 12:04:48 +0000</pubDate>
      <link>https://dev.to/afif/build-your-responsive-website-without-media-query-omj</link>
      <guid>https://dev.to/afif/build-your-responsive-website-without-media-query-omj</guid>
      <description>&lt;p&gt;We cannot talk about web development without talking about Reponsive Design. The latter is now a must and everyone will use Media Queries to build a responsive website.&lt;/p&gt;

&lt;p&gt;Since the introduction of media queries (before 2000), CSS has evolved and now (in 2021) there are a lot of tricks that can help you drastically reduce the usage of media queries and create an optimized code. I will even show you how to replace multiple media queries with only one CSS declaration. &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;strong&gt;PS:&lt;/strong&gt; you have to run all the examples outside DEV to better see the results since the embeded version is very small&lt;/sup&gt;&lt;/p&gt;




&lt;p&gt;I will start with the trivial examples that are widely used but still limited:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-flex-endraw-amp-raw-flexwrap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;flex&lt;/code&gt; &amp;amp; &lt;code&gt;flex-wrap&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/zYNggoq"&gt;https://codepen.io/t_afif/pen/zYNggoq&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex: 400px&lt;/code&gt; will set a base width equal to &lt;code&gt;400px&lt;/code&gt;. The items will then wrap if there isn't enough space for the &lt;code&gt;400px&lt;/code&gt;. They will grow to fill the empty spaces and will shrink if the container width is bigger than &lt;code&gt;400px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Easy to use, only 2 lines of code are required&lt;br&gt;
‚ùå We cannot control when the items will wrap&lt;br&gt;
‚ùå We cannot control the number of items per row&lt;br&gt;
‚ùå The items of the last row will have a different width&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#-raw-autofit-endraw-amp-raw-minmax-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;auto-fit&lt;/code&gt; &amp;amp; &lt;code&gt;minmax&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvgVVPN"&gt;https://codepen.io/t_afif/pen/wvgVVPN&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Similar to the previous example, the &lt;code&gt;repeat(auto-fit,minmax(400px,1fr))&lt;/code&gt; will define the base width and we will have a similar wrapping behavior.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Easy to use, only 1 line of code is required&lt;br&gt;
‚úîÔ∏è The items of the last row will keep the same width&lt;br&gt;
‚ùå We cannot control when the items will wrap&lt;br&gt;
‚ùå We cannot control the number of items per row&lt;br&gt;
‚ùå We don't have the shrink effect of the flexbox so we may face overflow&lt;/p&gt;



&lt;p&gt;We will try to optimize the above examples with some CSS tricks in order to overcome the drawbacks.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-number-of-items"&gt;
  &lt;/a&gt;
  Controling the number of items
&lt;/h3&gt;

&lt;p&gt;In our first example, let's change &lt;code&gt;flex: 400px&lt;/code&gt; to &lt;code&gt;flex: max(400px, 100%/3 - 20px)&lt;/code&gt;. Resize the screen and you will notice that each row will not have more than 3 items (even for a large screen width). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/abpeeeV"&gt;https://codepen.io/t_afif/pen/abpeeeV&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The logic is easy. When the screen width increase, &lt;code&gt;100%/3&lt;/code&gt; will be bigger than &lt;code&gt;400px&lt;/code&gt; so it's the max value that will get used. We cannot have more than 3 items per row if all them have a width equal to &lt;code&gt;100%/3&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-the-hell-is-the-raw-20px-endraw-"&gt;
  &lt;/a&gt;
  What the hell is the &lt;code&gt;20px&lt;/code&gt;??
&lt;/h4&gt;

&lt;p&gt;It's twice the gap we defined. For 3 items we will have 2 gaps so for N items we should use &lt;code&gt;max(400px, 100%/N - (N - 1)*gap)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We can still optimize the formula to remove the gap and use &lt;code&gt;max(400px, 100%/(N + 1) + 0.1%)&lt;/code&gt;. We tell the browser that each item will be equal to &lt;code&gt;100%/(N + 1)&lt;/code&gt; so &lt;code&gt;N + 1&lt;/code&gt; items per row but we add a tiny percentage (the &lt;code&gt;0.1%&lt;/code&gt;) thus one of the items will wrap and we end with only &lt;code&gt;N&lt;/code&gt; items per row! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvJwzbL"&gt;https://codepen.io/t_afif/pen/wvJwzbL&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Now we can control the maximum number of items per row.&lt;/p&gt;

&lt;p&gt;The same can also be applied to the CSS grid example as well: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/BaWBLge"&gt;https://codepen.io/t_afif/pen/BaWBLge&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I have added CSS variables to easily control the different values.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-shrink-effect"&gt;
  &lt;/a&gt;
  Controling the shrink effect
&lt;/h3&gt;

&lt;p&gt;Using CSS grid we may have overflow if the base width is bigger than the container width unlike with flexbox where we have the &lt;code&gt;flex-shrink&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To overcome this we change &lt;code&gt;max(400px, 100%/(N + 1) + 0.1%)&lt;/code&gt; to &lt;code&gt;clamp(100%/(N + 1) + 0.1%, 400px, 100%)&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a large screen width, the &lt;code&gt;100%/(N + 1) + 0.1%&lt;/code&gt; will be bigger than &lt;code&gt;400px&lt;/code&gt; and we will get our maximum number of items. &lt;/li&gt;
&lt;li&gt;For a small screen width, the &lt;code&gt;100%&lt;/code&gt; will be smaller than &lt;code&gt;400px&lt;/code&gt; and our items will not exceed the container width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/ZEezBGL"&gt;https://codepen.io/t_afif/pen/ZEezBGL&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;‚úîÔ∏è We have our shrink effect and no more overflow&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#controling-the-wrap"&gt;
  &lt;/a&gt;
  Controling the wrap
&lt;/h3&gt;

&lt;p&gt;In all the previous examples, we have no control over the wrap. We don't really know when it will happen. It depends on the base width, the gap, the container width, etc &lt;/p&gt;

&lt;p&gt;To control this we will change our base width (the &lt;code&gt;400px&lt;/code&gt;) with &lt;code&gt;(400px - 100vw)*1000&lt;/code&gt; to get the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(100%/(N + 1) + 0.1%, (400px - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks a bit strange but easy to understand. The &lt;code&gt;100vw&lt;/code&gt; is our screen width and logically this value will change on screen resize while the &lt;code&gt;400px&lt;/code&gt; will remain fixed. This will lead us to the following logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;screen width (100vw) &amp;gt; 400px&lt;/code&gt; the difference will be &lt;strong&gt;negative&lt;/strong&gt; so it will get clamped to the &lt;code&gt;100%/(N + 1) + 0.1%&lt;/code&gt; which is a positive value: We have N items per row&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;screen width (100vw) &amp;lt; 400px&lt;/code&gt; the difference will be &lt;strong&gt;positive&lt;/strong&gt;, we multiply with a big value (the &lt;code&gt;1000&lt;/code&gt;) so it will get clamped to the &lt;code&gt;100%&lt;/code&gt;: We have 1 item per row&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/BaWBQqK"&gt;https://codepen.io/t_afif/pen/BaWBQqK&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We did our first media query!&lt;/p&gt;

&lt;p&gt;We were able to move &lt;strong&gt;from N columns to 1 column&lt;/strong&gt; without using &lt;code&gt;@media&lt;/code&gt; and with only one CSS declaration. Our base width has become a breakpoint.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è We can control when the items will wrap&lt;br&gt;
‚úîÔ∏è We can control the number of items per row&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-about-moving-from-n-columns-to-m-columns"&gt;
  &lt;/a&gt;
  What about moving from N columns to M columns?
&lt;/h3&gt;

&lt;p&gt;We simply update our &lt;code&gt;clamp()&lt;/code&gt; function like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(100%/(N + 1) + 0.1%, (400px - 100vw)*1000, 100%/(M + 1) + 0.1%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think everyone got the trick now. When the screen width is bigger than &lt;code&gt;400px&lt;/code&gt; we fall into the first rule (N items per row). When the screen width is samller than &lt;code&gt;400px&lt;/code&gt; we fall into the second one (M items per row).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/ZEezBgo"&gt;https://codepen.io/t_afif/pen/ZEezBgo&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can easily control the number of items per row and we can decide when to change that number. All this using only one CSS declaration!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-about-moving-from-n-columns-to-m-columns-to-1-column-"&gt;
  &lt;/a&gt;
  What about moving from N columns to M columns to 1 column ?
&lt;/h3&gt;

&lt;p&gt;We can do this by nesting &lt;code&gt;clamp()&lt;/code&gt; functions like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(clamp(100%/(N + 1) + 0.1%, (W1 - 100vw)*1000,100%/(M + 1) + 0.1%), (W2 - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have two breakpoints so we will logically need two width (&lt;code&gt;W1&lt;/code&gt; and &lt;code&gt;W2&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;We can see our function like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clamp(clamp( .. ), (W2 - 100vw)*1000, 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When the screen width is smaller than &lt;code&gt;W2&lt;/code&gt; we fall into &lt;code&gt;100%&lt;/code&gt;: one item per row&lt;/li&gt;
&lt;li&gt;When the screen width is bigger than &lt;code&gt;W2&lt;/code&gt; we fall into the first &lt;code&gt;clamp()&lt;/code&gt;: We do the logic there

&lt;ul&gt;
&lt;li&gt;when the screen width is smaller than &lt;code&gt;W1&lt;/code&gt; we fall into &lt;code&gt;100%/(M + 1) + 0.1%)&lt;/code&gt;: M items per row&lt;/li&gt;
&lt;li&gt;when the screen width is bigger than &lt;code&gt;W1&lt;/code&gt; we fall into &lt;code&gt;100%/(N + 1) + 0.1%)&lt;/code&gt;: N items per row&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see this in play:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/xxqKgZe"&gt;https://codepen.io/t_afif/pen/xxqKgZe&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We did 2 media queries using only one CSS declaration! Not only this, but we can easily adjust that declaration using CSS variables which means that we can update the logic for different containers easily&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/mdWbRRE"&gt;https://codepen.io/t_afif/pen/mdWbRRE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How many media queries until now? well, I stopped the count ...&lt;/p&gt;

&lt;p&gt;You want more breakpoints? You simply nest another &lt;code&gt;clamp()&lt;/code&gt; function and you have&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-n-columns-to-m-columns-to-p-columns-to-1-column"&gt;
  &lt;/a&gt;
  From N columns to M columns to P columns to 1 column
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/bGqbgYY"&gt;https://codepen.io/t_afif/pen/bGqbgYY&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We have our responsive design without any single media queries&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Only one line of code&lt;br&gt;
‚úîÔ∏è Easy to update using CSS variables&lt;br&gt;
‚úîÔ∏è We can control the number of items per row&lt;br&gt;
‚úîÔ∏è We can control when the items will wrap&lt;br&gt;
‚úîÔ∏è We don't have overflow on small screens&lt;br&gt;
‚úîÔ∏è All the items have the same width&lt;br&gt;
‚úîÔ∏è Each container can have its own breakpoints&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#container-queries"&gt;
  &lt;/a&gt;
  Container Queries
&lt;/h3&gt;

&lt;p&gt;Everyone is excited to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries"&gt;this new feature&lt;/a&gt; that consider the width of element instead of the screen to create media queries but no need to wait for it. &lt;/p&gt;

&lt;p&gt;The trick I made already cover this feature. We simply change &lt;code&gt;100vw&lt;/code&gt; with &lt;code&gt;100%&lt;/code&gt; and all the logic we made previously will now consider the container width instead of the screen width.&lt;/p&gt;

&lt;p&gt;Resize the below containers and see the magic in play&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/gOmYmgz"&gt;https://codepen.io/t_afif/pen/gOmYmgz&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;I will end this post with a last trick that allow you to change the coloration of your items without using media queries as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;purple&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;green&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--w1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We consider 3 gradient layers plus a &lt;code&gt;background-color&lt;/code&gt;. The size of each gradient is defined using one of the breakpoints. If &lt;code&gt;calc()&lt;/code&gt; is negative then the gradient will not show. If &lt;code&gt;calc()&lt;/code&gt; is positive then the size will also be positive and thanks to the repeat feature, it will cover all the area.&lt;/p&gt;

&lt;p&gt;The order is very important. Below a table to better understand:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[0 W3[&lt;/th&gt;
&lt;th&gt;[W3 W2[&lt;/th&gt;
&lt;th&gt;[W2 W1[&lt;/th&gt;
&lt;th&gt;[W1 infinity[&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏èpurple&lt;/td&gt;
&lt;td&gt;‚ùåpurple&lt;/td&gt;
&lt;td&gt;‚ùåpurple&lt;/td&gt;
&lt;td&gt;‚ùåpurple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏èblue&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èblue&lt;/td&gt;
&lt;td&gt;‚ùåblue&lt;/td&gt;
&lt;td&gt;‚ùåblue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏ègreen&lt;/td&gt;
&lt;td&gt;‚úîÔ∏ègreen&lt;/td&gt;
&lt;td&gt;‚úîÔ∏ègreen&lt;/td&gt;
&lt;td&gt;‚ùågreen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;td&gt;‚úîÔ∏èred&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The red color is always shown and at each breakpoint one of the gradient is displayed covering the bottom layer.&lt;/p&gt;

&lt;p&gt;Here is a demo with all the features together. Run at full screen and resize:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/wvJwdRW"&gt;https://codepen.io/t_afif/pen/wvJwdRW&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To make the coloration work based on the container width, we update the code slightly and we use pseudo element that we position relatively to the container and we clip the overflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;: &lt;a href="https://codepen.io/t_afif/pen/zYZOwQJ"&gt;https://codepen.io/t_afif/pen/zYZOwQJ&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A related Stack Overflow question where I am using such trick: &lt;a href="https://stackoverflow.com/q/56669587/8620333"&gt;How to change the color of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; Element depending on its height or width?&lt;/a&gt;. I am also changing the text coloration and the borders based on the width or the height.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Now you have a good trick that allow you to control your responsive layout without using media queries and with only few lines of code. Of course, this is not a replacement to media queries. It's an optimization that can help you reduce the amount of code.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>UI Dev Newsletter #55</title>
      <author>Silvestar Bistroviƒá</author>
      <pubDate>Wed, 05 May 2021 11:23:29 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-55-7mb</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-55-7mb</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3tceHl0"&gt;The Humble img Element And Core Web Vitals&lt;/a&gt;&lt;br&gt;
Addy Osmani describes how images impact Core Web Vitals and how to improve them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3xHzdh9"&gt;Advanced Core Web Vitals: A Technical SEO Guide&lt;/a&gt;&lt;br&gt;
Jamie Indigo writes an in-depth guide on Core Web Vitals from SEO perspective.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3e8vGAp"&gt;CSS Flexbox Tutorial with Flexbox Properties Cheat Sheet&lt;/a&gt;&lt;br&gt;
Joy Shaheb explains how CSS Flexbox works and describes the CSS Flexbox basics for responsive sites. Cute animal graphics included.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3e9TyDM"&gt;Windows 10 grid hover effect using HTML, CSS, and vanilla JS&lt;/a&gt;&lt;br&gt;
Jash Gopani explains the process of recreating the Windows 10 grid hover effect with CSS and JS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3h0lWKJ"&gt;Identify and Extract Pseudo-Element Selectors from built-in HTML Elements using DevTools&lt;/a&gt;&lt;br&gt;
Bramus Van Damme shows how to use DevTools to dissect and peek inside HTML elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3uhdKcQ"&gt;How to disable scaling for stroke width&lt;/a&gt;&lt;br&gt;
Stefan Judis shows how to use a vector-effect attribute to control how transformations affect stroke width.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/333wG2y"&gt;Exploring color-contrast() for the First Time&lt;/a&gt;&lt;br&gt;
Chris Coyier shares impressions on a color-contrast() function and shares a video for easier understanding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3gQGZ29"&gt;165+ Developer Resources I Discovered in 2020-2021&lt;/a&gt;&lt;br&gt;
Gedalya Krycer shares a comprehensive, well-organized list of helpful web dev resources‚Äîfrom HTML, CSS, and JavaScript to WordPress, Git, and design.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/34155z3"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
