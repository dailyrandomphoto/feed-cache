<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Ways Software Developers Can Improve Their Writing Beyond Blogging</title>
      <author>Stephanie Morillo</author>
      <pubDate>Sun, 20 Dec 2020 13:18:38 +0000</pubDate>
      <link>https://dev.to/radiomorillo/5-ways-software-developers-can-improve-their-writing-beyond-blogging-11mf</link>
      <guid>https://dev.to/radiomorillo/5-ways-software-developers-can-improve-their-writing-beyond-blogging-11mf</guid>
      <description>&lt;p&gt;This time last year, &lt;a href="https://www.stephaniemorillo.co/product-page/the-developer-s-guide-to-content-creation"&gt;I placed a bet on the idea that software developers wanted to write more content and become better bloggers&lt;/a&gt;. This idea is not new, it's not novel: software developers have been blogging as long as blogging has been around and the field has benefitted from developers who have generously shared their knowledge in the form of articles and blog posts. In less than one year, over 1,200 developers have purchased my eBooks on content creation and have started their own blogs, newsletters, podcasts, and screencasts.&lt;/p&gt;

&lt;p&gt;But while I've had the opportunity to see developers pour their writing capabilities into blogs (and there are plenty of good reasons to blog), the same level of enthusiasm isn't there for another form of writing that is just as impactful: business writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-business-writing-and-why-is-it-important" class="anchor"&gt;
  &lt;/a&gt;
  What is business writing and why is it important?
&lt;/h2&gt;

&lt;p&gt;Business writing takes the form of emails, presentations, reports, and internal documentation, among other things. It includes everything from your team's quarterly OKR document to the technical spec you create for work items. This is the writing that keeps everyone in your workplace informed, trained, and it keeps things moving. Work gets done through business writing and business communications. &lt;/p&gt;

&lt;p&gt;Written and spoken communication, we know, is a crucial skill to cultivate. It will affect everything from the amount of influence you have, to how colleagues work and interact with you, to how you move up in an organization. But few of us are taught how to create great Wikis, excellent presentation decks, or craft thoughtful emails. We learn these skills by trial and error, if at all. If we're lucky, we may work for an employer that offers training on managing meetings effectively, writing professional emails, or putting together a slide deck. But in the absence of formal training, we have to find other ways to pick up these skills.&lt;/p&gt;

&lt;p&gt;With that in mind, here are five ways software developers can improve their writing beyond personal blogging as well as resources for each:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-contribute-to-your-teams-internal-documentation" class="anchor"&gt;
  &lt;/a&gt;
  1. Contribute to your team's internal documentation
&lt;/h2&gt;

&lt;p&gt;Internal documentation in all its forms — videos, process documentation, post-mortems, incident reports, etc. — is critical in engineering team operations. We create these assets for numerous reasons, including for tracking work, onboarding, and communicating process changes. Few people peruse internal docs for fun, but creating them and maintaining them increases knowledge transfer within teams (this is critical when hiring new employees or when people leave) and ensures consistency across teams. Docs are a scalable way of recording how, and why, your team does things and sharing that across an organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus points&lt;/strong&gt;: Make sure you socialize the existence of your docs to external and internal stakeholders. If someone has a commonly asked question that is answered in your docs, point them to the right document. Documentation is only useful if people know it exists and if they know what they can find there. Help people find the answer to their problems by pointing them in the right place. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.stephaniemorillo.co/post/the-what-why-and-how-of-internal-documentation"&gt;The Why, What, and How of Internal Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/blog/getting-started-with-an-incident-communications-plan/"&gt;Getting Started With an Incident Communications Plan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-get-paid-to-write-and-work-with-an-editor" class="anchor"&gt;
  &lt;/a&gt;
  2.  Get paid to write and work with an editor
&lt;/h2&gt;

&lt;p&gt;Plenty of tech companies have paid writer programs, where they accept externally contributed guides and tutorials and compensate the author for their work. Companies will typically pair a writer with an internal editor who will review the writer's work, provide feedback, and edit for grammar, syntax, and other style issues. Working with an editor is one of the best ways to improve your writing because you are getting detailed feedback. They are showing you what needs to be improved, how to improve it, and why. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/malgamves/CommunityWriterPrograms"&gt;Tech Community Writing Programs List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-improve-your-code-review-process" class="anchor"&gt;
  &lt;/a&gt;
  3. Improve your code review process
&lt;/h2&gt;

&lt;p&gt;Every team has its own norms and standards for how to conduct effective code reviews. But there are still ways to make your feedback clear, respectful, and easier to follow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angiejones.tech/ten-commandments-code-reviews/"&gt;The Ten Commandments of Navigating Code Reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/blog/how-to-conduct-effective-code-reviews/"&gt;How to Conduct Effective Code Reviews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-use-templates-for-writing-tech-specs-and-reports" class="anchor"&gt;
  &lt;/a&gt;
  4. Use templates for writing tech specs and reports
&lt;/h2&gt;

&lt;p&gt;As is the case with code reviews, many teams have templates for their tech specs. But if yours doesn't, worry not — there are templates out there that can be tailored to your team's use case. Templates promote consistency (you're using the same format and including the same kinds of information and detail every time) while saving you time from recalling what to include. When I was in grad school, I had to write lots of reports. I looked for templates online for writing good usability reports and I found a template on Usability.gov that was so useful, I even adjusted it for reports I created at work. Today I have templates for everything from tech specs to how I format meeting notes to emails.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.blog/2020/04/06/a-practical-guide-to-writing-technical-specs/"&gt;A Practical Guide to Writing Technical Specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.usability.gov/how-to-and-tools/resources/templates.html"&gt;Usability.gov Downloadable Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-prioritize-learning-how-to-write-better-emails-and-chat-messages" class="anchor"&gt;
  &lt;/a&gt;
  5. Prioritize learning how to write better emails and chat messages
&lt;/h2&gt;

&lt;p&gt;Many of us office workers went remote in 2020 due to COVID-19 and that meant more written messages. Email and chat are where a lot of interactions take place now and there are plenty of ways to get it wrong. In my 12-year career, I've never worked at a company that has given a "How to write good emails" class. I've learned it on my own. But if you want to be seen as effective at your job, reliable, trustworthy, and in general as a good colleague, make writing better emails a top priority moving forward. I recently released a 95-minute masterclass called "Writing Professional Emails" which shows you email features you must use, how to write emails in a variety of scenarios, and how to use email signatures, chat messages, and your work calendar to set boundaries. It's the email class you always wanted but haven't found – until now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.stephaniemorillo.co/product-page/writing-professional-email-class"&gt;Writing Professional Emails On-Demand Masterclass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, personal blogging is one way software developers can extend their knowledge to others and improve their writing skills, but it's not the only way. Developers should also improve their business writing skills to help them establish a culture of knowledge sharing within their organizations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.stephaniemorillo.co/post/5-ways-software-developers-can-improve-their-writing-beyond-blogging"&gt;&lt;em&gt;This post originally appeared on my blog.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm Stephanie, a Content Strategist and Technical PM.&lt;/em&gt; &lt;em&gt;Visit &lt;a href="//www.developersguidetocontent.com"&gt;developersguidetocontent.com&lt;/a&gt; to learn more about my work!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>writing</category>
      <category>programming</category>
    </item>
    <item>
      <title>React and its Lifecycle Methods Explained</title>
      <author>Gedalya Krycer</author>
      <pubDate>Sun, 20 Dec 2020 09:07:41 +0000</pubDate>
      <link>https://dev.to/gedalyakrycer/react-and-its-lifecycle-methods-explained-1589</link>
      <guid>https://dev.to/gedalyakrycer/react-and-its-lifecycle-methods-explained-1589</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h1&gt;

&lt;p&gt;I started to write this just about Lifecycle Methods but realized that an intro about React might be helpful. &lt;/p&gt;

&lt;p&gt;When I began learning React, I jumped into the syntax without fully understanding the methodologies behind them. So perhaps this will benefit someone else in the same boat. &lt;/p&gt;

&lt;p&gt;While this is by no means an all-inclusive or exhaustive introduction, below are some things I found helpful in understanding this powerful library and it's lifecycle methods.&lt;/p&gt;

&lt;p&gt;Of course, feel free to &lt;a href="#lifecycle"&gt;jump straight to the lifecycle&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So... what is React? &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#intro-to-react" class="anchor"&gt;
  &lt;/a&gt;
  Intro to React
&lt;/h2&gt;

&lt;p&gt;React, is an amazing front-end JS library that allows you to build super performant single-page applications, with tremendous efficiency. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-singlepage-application" class="anchor"&gt;
  &lt;/a&gt;
  What is a single-page application?
&lt;/h3&gt;

&lt;p&gt;These are web applications that only serve one HTML file. Even if the user can navigate to 5 different pages, filled with loads of content — only one HTML file is provided by the server. (React is not limited to this setup, but it is most known for it.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-is-that-possible" class="anchor"&gt;
  &lt;/a&gt;
  How is that possible?
&lt;/h3&gt;

&lt;p&gt;This is accomplished by updating the DOM (what you see in the browser) in a continuous and intelligent way, while leveraging JavaScript to write most of the site's code. 1 HTML file and a load of very thoughtful JavaScript makes the website...just...React. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Glad to be the first one to make that joke. 😜)&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ok-but-how-is-that-possible" class="anchor"&gt;
  &lt;/a&gt;
  Ok, but how is THAT possible?
&lt;/h3&gt;

&lt;p&gt;Among other things, React has a few very important tricks up its sleeve.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#jsx"&gt;JSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#components"&gt;Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#props"&gt;Props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vd"&gt;The Virtual DOM&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#jsx" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; JSX
&lt;/h4&gt;

&lt;p&gt;JSX is Javascript hybrid language that lets you write HTML, CSS, and JavaScript seamlessly on the same line, with only minor syntax changes. (🤯)  &lt;/p&gt;

&lt;p&gt;React then renders and compiles the JSX into standard HTML/CSS/JS for the browser to read. &lt;/p&gt;

&lt;p&gt;For me personally, JavaScript didn't really click until I started writing JSX and saw the structure and functionality come together...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paginationState&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Dev Work&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;More Dev Work&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"justify-content-around"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DevProjectCard&lt;/span&gt;
                &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#components" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Components
&lt;/h4&gt;

&lt;p&gt;Components are a way to break up JSX and pure JS (like API calls) into separate files. &lt;em&gt;&lt;a href="https://dev.to/hiowenluke/why-we-should-split-long-code-into-small-functions-or-files-5gjl"&gt;Modularization&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=VtF6aebWe58"&gt;Separation of Concerns&lt;/a&gt;&lt;/em&gt; are concepts that fit nicely here.&lt;/p&gt;

&lt;p&gt;While the concept of components is not unique to React, it is pretty synonymous with it. The idea is to have many small/lean component files, that each holds a little bit of feature-specific code. These are then combined together, creating more complex layouts. &lt;/p&gt;

&lt;p&gt;The benefit? Components can be reused in multiple places and their styles/functionality can travel with them. This can mean less coding and maintenance in the long run. &lt;/p&gt;

&lt;p&gt;In the example above, the &lt;code&gt;&amp;lt;DevProjectCard /&amp;gt;&lt;/code&gt; block of code was a component. It represents another file that holds code (JSX) on how the Dev Project Card should look and function. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#props" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Props
&lt;/h4&gt;

&lt;p&gt;Now that the application is divided up into bite-sized components, we need a way to pass information between them. This is where Props come in. &lt;/p&gt;

&lt;p&gt;Props take information from a parent component and pass it down to a child component. &lt;/p&gt;

&lt;p&gt;This means children components can focus on just providing structure for information but do not need to worry about &lt;strong&gt;what&lt;/strong&gt; the actual info is. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(It is important to note that props can only travel down. A child component can't pass information back up to its parent.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In our example, &lt;code&gt;&amp;lt;DevProjectCard /&amp;gt;&lt;/code&gt; provides a way for an image and title to look in some sort of UI card element. But we are using props &lt;code&gt;img={}&lt;/code&gt; and &lt;code&gt;title={}&lt;/code&gt; to pass down what the actual image and title should be. By not hardcoding the information into &lt;code&gt;&amp;lt;DevProjectCard /&amp;gt;&lt;/code&gt;, this component can be used in more places and ways.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DevProjectCard&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: The above example is using a &lt;code&gt;.map()&lt;/code&gt; array method to create multiple &lt;code&gt;&amp;lt;DevProjectCard /&amp;gt;&lt;/code&gt; components, each with unique images and titles. The &lt;code&gt;key={}&lt;/code&gt; is actually not a prop, but a method that is required on dynamically generated mapped lists in React.&lt;/em&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#state" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; State
&lt;/h4&gt;

&lt;p&gt;Another essential way to handle information and functionality in React is by using something called State.&lt;/p&gt;

&lt;p&gt;State lets you temporarily store unique information within a component. As soon as the page is refreshed, the state is removed. But until that point, it is a powerful way to quickly control functionality and content. &lt;/p&gt;

&lt;p&gt;For example, perhaps we have a button that loads more Dev Project Cards to the page. Using state, we can store a value of &lt;code&gt;true&lt;/code&gt; when that button is clicked. &lt;/p&gt;

&lt;p&gt;Then we can reference that state in an HTML headline to dynamically show different text if that state is true or false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paginationState&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Dev Work&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;More Dev Work&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#virtual-dom" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Virtual DOM
&lt;/h4&gt;

&lt;p&gt;The Virtual DOM is a copy of the real DOM the browser uses. This is where everything we have talked about so far comes together!&lt;/p&gt;

&lt;p&gt;The real DOM is pretty slow to update and when you change something in the layout, the whole page needs to re-paint. &lt;/p&gt;

&lt;p&gt;Instead, React uses this Virtual DOM to compare against the real DOM, seeing if any components have changed. It uses changes in states and props as signals that something is now different.&lt;/p&gt;

&lt;p&gt;If a state and/or prop has changed, React uses the Virtual DOM to only update the component(s) that were affected. This means the real DOM does not need to refresh the entire page if one or two things changed. Again 🤯!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-how-does-it-know-to-do-this" class="anchor"&gt;
  &lt;/a&gt;
  But how does it know to do this?
&lt;/h3&gt;

&lt;p&gt;Ok deep breath...So we write powerful JSX in well-organized components, that control their functionality with state and speak to other components with props — all of which is updated for the user via the Virtual DOM...whew. How does the Virtual DOM know when to check for changes in states and props???&lt;/p&gt;

&lt;p&gt;React checks for these changes at strategic points and these are called Lifecycle Methods. 🎉&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lifecycle-methods" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Lifecycle Methods
&lt;/h2&gt;

&lt;p&gt;Lifecycle methods are how React compares the current code against the virtual and real DOMs. It dictates what code should be assessed and at what point. &lt;/p&gt;

&lt;p&gt;Before going further it's important to note, that React originally started with using &lt;strong&gt;Class-based&lt;/strong&gt; components. These handle state and pass down props to &lt;strong&gt;Presentation&lt;/strong&gt; (or dumb) components that only display the content. Lifecycle Methods are specifically used in Class-based components.  &lt;/p&gt;

&lt;p&gt;With the release of &lt;code&gt;version 16.8&lt;/code&gt; React introduced a new toolset called &lt;strong&gt;Hooks&lt;/strong&gt;. Hooks allow you to turn presentational components into functional components that have all the power of their class-based counterparts, but with (usually) less code needed. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook replaces all lifecycle methods and I will cover it at the end as well. However, many applications still use class-based components, so it is important to understand their lifecycle methods. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-lifecycle-method-time" class="anchor"&gt;
  &lt;/a&gt;
  It is lifecycle method time!
&lt;/h3&gt;

&lt;p&gt;Below are the three I use the most, but there are more that are less commonly used. In the end, I will include a link to their documentation for further exploration. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#componentdidmount" class="anchor"&gt;
  &lt;/a&gt;
  componentDidMount()
&lt;/h4&gt;

&lt;p&gt;This will execute any code inside of it, directly after a component is mounted in the DOM. One of many use cases for this is making an API call for new data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.website/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#componentdidupdate" class="anchor"&gt;
  &lt;/a&gt;
  componentDidUpdate()
&lt;/h4&gt;

&lt;p&gt;This will execute code directly after a component has been updated through state or props. &lt;/p&gt;

&lt;p&gt;A common example is recalling an API that was set up in &lt;code&gt;componentDidMount()&lt;/code&gt; to see if there is new data. However, this can lead to infinite loops or at least unintentional network calls. &lt;/p&gt;

&lt;p&gt;To prevent this, &lt;code&gt;componentDidUpdate()&lt;/code&gt;provides the optional &lt;code&gt;prevState&lt;/code&gt; and &lt;code&gt;prevProps&lt;/code&gt; arguments to check if the last versions are different. If they are the same, the code won't be run again and nothing will be re-rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.website/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Often times the same code will be run in both methods. &lt;code&gt;componentDidMount()&lt;/code&gt; will set it up and &lt;code&gt;componentDidUpdate&lt;/code&gt; will check for changes. (This is something hooks streamlines.) Because of this, it can be helpful to place the duplicate code into a helper function and call it in both methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Funtion is called when component mounts&lt;/span&gt;
&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// React will call the function if there is a change&lt;/span&gt;
&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Helper Function&lt;/span&gt;
&lt;span class="nx"&gt;fetchUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.website/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#componentwillunmount" class="anchor"&gt;
  &lt;/a&gt;
  componentWillUnmount()
&lt;/h4&gt;

&lt;p&gt;This will call right before a component is unmounted and destroyed. &lt;/p&gt;

&lt;p&gt;It can be used to stop timers and canceling network requests that were first called in &lt;code&gt;componentDidMount()&lt;/code&gt;. This helps prevent memory leakage. &lt;/p&gt;

&lt;p&gt;You never call &lt;code&gt;this.setState()&lt;/code&gt; in this method, because that instance of the component will never be rendered again. This can throw off React from reading the state correctly. &lt;/p&gt;

&lt;p&gt;In the example below we telling Axios to eject some interceptors that were set up to handle global errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reqInterceptor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resInterceptor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#hooks-rip-lifecycle-methods" class="anchor"&gt;
  &lt;/a&gt;
  Hooks! (RIP Lifecycle Methods?)
&lt;/h3&gt;

&lt;p&gt;As mentioned, with the release of &lt;code&gt;version 16.8&lt;/code&gt; React introduced &lt;strong&gt;Hooks&lt;/strong&gt;. Class-based components were no longer needed to handle state and updating the Virtual DOM. A new age of coding in React was introduced with functional components and their "import-as-needed" hook counterparts. &lt;/p&gt;

&lt;p&gt;In one block of code, the &lt;code&gt;useEffect&lt;/code&gt; hook replaced the functionality of &lt;code&gt;componentWillMount()&lt;/code&gt;, &lt;code&gt;componentWillUpdate()&lt;/code&gt; and &lt;code&gt;componentWillUnmount()&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#useeffect" class="anchor"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h4&gt;

&lt;p&gt;In its simplest form, &lt;code&gt;useEffect&lt;/code&gt;takes in a call back function and runs on every render, mimicking the &lt;code&gt;componentDidMount()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; methods. &lt;/p&gt;

&lt;p&gt;Every time the &lt;code&gt;useEffect&lt;/code&gt; runs, it creates a new function behind the scenes, tying it to that particular render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This runs everytime the component renders.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; also takes an array as a second parameter. If left empty this will run its code one time when the component mounts.  (&lt;code&gt;componentDidMount()&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This runs when the component mounts.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The array can also hold one or more props and state values. React compares the last render to this value(s) and if they haven't changed, will skip the effect.  But if the value(s) have changed to what was last rendered, the effect will run again. (Just like &lt;code&gt;prevState&lt;/code&gt; and &lt;code&gt;prevProps&lt;/code&gt;.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// reruns when props updates &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The callback function can also return its own function. This is used to clean up any side effects previously run, to prevent memory leaks. Such as subscribing to a network request. (Just like &lt;code&gt;componentWillUnmount()&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reqInterceptor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; also lets you separate concerns, by having multiple &lt;code&gt;useEffect&lt;/code&gt; hooks on the same component. For example, one handles users being changed on props and the other handles animations being triggered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; 

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;triggerTitleAnimation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#you-did-it" class="anchor"&gt;
  &lt;/a&gt;
  You did it! 😄
&lt;/h2&gt;

&lt;p&gt;Nice job sticking through the end. Together we went through what makes React so performant. &lt;/p&gt;

&lt;p&gt;JSX combines HTML, CSS, and JavaScript to make writing code more seamless than ever. Components segment code into separate files and use props to speak to each other. State stores content and can be used to trigger functionality. Together Props and State are used to update the Virtual DOM, which creates a super-fast browsing experience. &lt;/p&gt;

&lt;p&gt;All of this is managed through Lifecycle methods and their modern hook counterpart, the &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;I hope this has helped clarify how some of React works and enables you to create something cool. Happy coding! 🤓&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/react-component.html"&gt;React Documentation on Lifecycle Methods&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;React Documentation on Hooks&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/react-the-complete-guide-incl-redux/"&gt;React The Complete Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>lifecycle</category>
    </item>
    <item>
      <title>Vanilla JavaScript time of day greeting</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 20 Dec 2020 04:06:28 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/vanilla-javascript-time-of-day-greeting-2j8d</link>
      <guid>https://dev.to/dailydevtips1/vanilla-javascript-time-of-day-greeting-2j8d</guid>
      <description>&lt;p&gt;In today's article, we will be looking at how to greet our users based on their timezone.&lt;/p&gt;

&lt;p&gt;We will check for three different times and greet accordingly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt; 12&lt;/code&gt;: Everything before 12 should say Good morning&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;12-18&lt;/code&gt;: Middle of the day should say Good afternoon&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt; 18&lt;/code&gt;: After 6 pm so say Good evening&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a cool rather small script that just makes that little bit of extra effort for the end-user.&lt;/p&gt;

&lt;p&gt;You can see the end result based on your time in this Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/zYKZwvG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-structure" class="anchor"&gt;
  &lt;/a&gt;
  HTML Structure
&lt;/h2&gt;

&lt;p&gt;Our &lt;code&gt;HTML&lt;/code&gt; for today couldn't be easier, we can leverage just one div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="greeting"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside this div, we will place whatever greeting is valid for that time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-our-page" class="anchor"&gt;
  &lt;/a&gt;
  Styling our page
&lt;/h2&gt;

&lt;p&gt;Let's also add some basic styling to our page, nothing crazy, just a quite big centered block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Helvetica Neue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffe6ab&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#06d6a0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The center method used is the &lt;a href="https://daily-dev-tips.com/posts/css-grid-most-easy-center-vertical-and-horizontal/"&gt;Grid absolute center&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vanilla-javascript-time-bases-greeting" class="anchor"&gt;
  &lt;/a&gt;
  Vanilla JavaScript time bases greeting
&lt;/h2&gt;

&lt;p&gt;On to the JavaScript part, for this, we need to first get the greeting div.&lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;documentGetElementById&lt;/code&gt; selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;greeting&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The next thing we need is the current hour for that user.&lt;br&gt;
We can access a new &lt;code&gt;Date&lt;/code&gt; object and use the &lt;code&gt;getHours&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;That will return something like &lt;code&gt;11&lt;/code&gt; when the time is &lt;code&gt;11:55&lt;/code&gt; that cool because that's how our greetings will work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will also need our three greeting types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Good morning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Good afternoon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Good evening&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The last part we need is a let to put the text in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;welcomeText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can check if our hour matches certain cases and return the correct line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;welcomeText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;welcomeTypes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;welcomeText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;welcomeTypes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;welcomeText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;welcomeTypes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If the hour is below 12 we return &lt;code&gt;welcomeType[0]&lt;/code&gt; which is Good morning.&lt;br&gt;
If it's below 18 we return Good afternoon and else we return Good evening.&lt;/p&gt;

&lt;p&gt;The final step is to put this welcomeText in our div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;welcomeText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That it! We now have a fully functional welcome greeting based on the user's time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>The Ultimate Beginner’s Guide to GraphQL: Part 2 – Organization, Parameters, more Queries, and Mutations</title>
      <author>The Javascript Ninja</author>
      <pubDate>Sun, 20 Dec 2020 01:49:03 +0000</pubDate>
      <link>https://dev.to/thejavascriptninja/the-ultimate-beginner-s-guide-to-graphql-part-2-organization-parameters-more-queries-and-mutations-42fi</link>
      <guid>https://dev.to/thejavascriptninja/the-ultimate-beginner-s-guide-to-graphql-part-2-organization-parameters-more-queries-and-mutations-42fi</guid>
      <description>&lt;p&gt;Hi everyone! Welcome back to part 2 of &lt;strong&gt;The Ultimate Beginner’s Guide to GraphQL&lt;/strong&gt; tutorial series. Before we start, if you haven’t seen &lt;a href="https://thejavascriptninja.com/the-ultimate-beginners-guide-to-graphql/"&gt;part 1&lt;/a&gt;, you might want to check it out &lt;a href="https://thejavascriptninja.com/the-ultimate-beginners-guide-to-graphql/"&gt;here&lt;/a&gt;. This tutorial will build off the concepts learned in &lt;a href="https://thejavascriptninja.com/the-ultimate-beginners-guide-to-graphql/"&gt;part 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all that said, I wanted to go more in-depth about something I only briefly mentioned in part 1: the GraphQL infrastructure. This is an important part of learning how GraphQL works, and what makes it so awesome.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-graphql-infrastructure" class="anchor"&gt;
  &lt;/a&gt;
  The GraphQL Infrastructure
&lt;/h1&gt;

&lt;p&gt;To get a better understanding of the advantages and disadvantages of GraphQL, I created this handy little infographic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDUaOj1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/gql-page-001-copy-scaled.jpg%3Fresize%3D768%252C1920%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDUaOj1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/gql-page-001-copy-scaled.jpg%3Fresize%3D768%252C1920%26ssl%3D1" alt="graphql_infographic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright! Hopefully that gives you a little insight into the inner workings of GraphQL, and helps you understand some of the operations at a deeper level.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#organizing-the-code" class="anchor"&gt;
  &lt;/a&gt;
  Organizing the Code
&lt;/h1&gt;

&lt;p&gt;Unfortunately, before we get to the fun stuff in this tutorial, we do have to work through the boring stuff. This means working on organizing our code.&lt;/p&gt;

&lt;p&gt;If you don’t remember, we used our standard server code and made some significant changes to the &lt;code&gt;index.js&lt;/code&gt; file in &lt;a href="https://thejavascriptninja.com/the-ultimate-beginners-guide-to-graphql/"&gt;part 1&lt;/a&gt; of the tutorial. I’d recommend reading that part first so you’ll be up-to-date on what we’re doing. After completing part 1, the code in our index.js file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const port = process.env.port || 3000;
const express = require('express');
const ejs = require('ejs');
const layouts = require('express-ejs-layouts');
const app = express();

app.set('view engine', 'ejs');
app.use(express.static('public'));
app.use(layouts);

const homeController = require('./controllers/homeController.js');
app.get('/', homeController.renderIndex);

const { gql } = require('apollo-server-express');
const schema = gql`
  type Query {
    getUsers: User
  }
  type User {
    id: Int!
    username: String!
    email: String!
    password: String!
  }
`;

let users = [
  {
    id:1,
    username:'The Javascript Ninja',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
  {
    id:2,
    username:'The Javascript Ninjas Best Friend',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
]

const resolvers = {
  Query: {
    getUsers: _ =&amp;gt; 'Hello World'
  }
}

const { ApolloServer } = require('apollo-server-express');
const serve = new ApolloServer({
  typeDefs: schema,
  resolvers: resolvers,
});
serve.applyMiddleware({ app });

const server = app.listen(port, () =&amp;gt; {
  console.log(`🚀 Server listening on port ${port}`);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For a full explanation, read &lt;a href="https://thejavascriptninja.com/the-ultimate-beginners-guide-to-graphql/"&gt;part 1&lt;/a&gt;. Otherwise, note that the code above will create a GraphQL server alongside our express server, and define a simple query to execute. Don’t leave yet – read on. We’ll be expanding this database model later in the tutorial.&lt;/p&gt;

&lt;p&gt;Since we’ll be greatly expanding the code in our &lt;code&gt;index.js&lt;/code&gt; file, it might do us some good to split it up between other files. This will reduce the amount of clutter in our main file, and keep our project file organized.&lt;/p&gt;

&lt;p&gt;To organize our code, we can move our &lt;code&gt;schema&lt;/code&gt; and &lt;code&gt;resolvers&lt;/code&gt; objects to separate files. This may seem a little overkill at first, but after we expand them, it will be totally necessary.&lt;/p&gt;

&lt;p&gt;To do this, first, create a &lt;code&gt;models&lt;/code&gt; folder at the root level of your project. We will still want everything in our project to correspond with &lt;a href="https://thejavascriptninja.com/what-is-the-mvc/"&gt;MVC formatting&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, in our new &lt;code&gt;models&lt;/code&gt; folder, we’ll create the files &lt;code&gt;schema.js&lt;/code&gt; and &lt;code&gt;resolvers.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, in &lt;code&gt;schema.js&lt;/code&gt;, cut and paste the &lt;code&gt;schema&lt;/code&gt; object from index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { gql } = require('apollo-server-express');
const schema = gql`
  type Query {
    getUsers: User
  }
  type User {
    id: Int!
    username: String!
    email: String!
    password: String!
  }
`;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, in &lt;code&gt;resolvers.js&lt;/code&gt;, cut and paste the &lt;code&gt;resolvers&lt;/code&gt; object and &lt;code&gt;users&lt;/code&gt; array from &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let users = [
  {
    id:1,
    username:'The Javascript Ninja',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
  {
    id:2,
    username:'The Javascript Ninjas Best Friend',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
];

const resolvers = {
  Query: {
    getUsers: _ =&amp;gt; users;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, modify &lt;code&gt;index.js&lt;/code&gt; so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const port = process.env.port || 3000;
const express = require('express');
const ejs = require('ejs');
const layouts = require('express-ejs-layouts');
const app = express();

app.set('view engine', 'ejs');
app.use(express.static('public'));
app.use(layouts);

const homeController = require('./controllers/homeController.js');
app.get('/', homeController.renderIndex);

const schema = require('./models/schema.js');
const resolvers = require('./models/resolvers.js');

const { ApolloServer } = require('apollo-server-express');
const serve = new ApolloServer({
  typeDefs: schema,
  resolvers: resolvers,
});
serve.applyMiddleware({ app });

const server = app.listen(port, () =&amp;gt; {
  console.log(`🚀 Server listening on port ${port}`);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Awesome! Now our code is all nice and organized. All that we’ve done above is just sort our &lt;code&gt;resolvers&lt;/code&gt; and &lt;code&gt;schema&lt;/code&gt; objects into modules so they don’t all clutter up the same file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-more-advanced-queries-with-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Writing More Advanced Queries With Parameters
&lt;/h1&gt;

&lt;p&gt;Alright, now it’s time to work on the meat of GraphQL: querying. Querying is arguably the biggest and most important part of GraphQL (partly because the QL stands for Query Language). But, with all that said, it’s time to focus on writing more advanced query functions. The queries we wrote in part 1 were great, but they couldn’t do much and left a lot to be desired.&lt;/p&gt;

&lt;p&gt;In a realistic situation, your GraphQL query is probably going to return a lot of data. There are multiple reasons why this could be bad:&lt;/p&gt;

&lt;p&gt;• It’s hard to comprehend&lt;br&gt;
• It will drastically slow down the site&lt;br&gt;
• It’s impossible to filter through or perform operations on&lt;/p&gt;

&lt;p&gt;As you can see, none of these options are good in the slightest. That’s why it’s important to write better queries by filtering through data to return only what we need, not the entire database. We can do this by adding query parameters.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-in-some-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Adding In Some Parameters
&lt;/h3&gt;

&lt;p&gt;To add some parameters to our query, navigate to your &lt;code&gt;schema.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then, let’s add some parameters to the &lt;code&gt;getUsers&lt;/code&gt; query in the &lt;code&gt;Query&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { gql } = require('apollo-server-express');
const schema = gql`
  type Query {
    getUsers(id:Int, username:String, email:String, password:String): User
  }
  type User {
    id: Int!
    username: String!
    email: String!
    password: String!
  }
`;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, we added all the arguments we wanted available to the &lt;code&gt;getUsers&lt;/code&gt; query. The reason I’ve added these arguments is so I’ll be able to filter through different users by these specific fields. There are no exclamation points after the object types in the parameters because I want all parameters to be optional.&lt;/p&gt;

&lt;p&gt;However, before we can successfully execute our query with these parameters, we need to make some edits to our resolvers.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;resolvers.js&lt;/code&gt;. Let’s update our &lt;code&gt;getUsers&lt;/code&gt; resolver. Right now, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let users = [
  {
    id:1,
    username:'The Javascript Ninja',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
  {
    id:2,
    username:'The Javascript Ninjas Best Friend',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
];

const resolvers = {
  Query: {
    getUsers: _ =&amp;gt; 'Hello World'
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pretty lame, huh? Right now, this lame resolver can only return our pre-set array of objects. And even at that, we can’t even filter the results in our query.&lt;/p&gt;

&lt;p&gt;Well, it’s time for things to change. Update &lt;code&gt;resolvers.js&lt;/code&gt; so it looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let users = [
  {
    id:1,
    username:'The Javascript Ninja',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
  {
    id:2,
    username:'The Javascript Ninjas Best Friend',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
];

const resolvers = {
  Query: {
    getUsers: (parent, args) =&amp;gt; {
      if (args.id) {
        return users.filter(user =&amp;gt; user.id === args.id);
      } else if (args.username) {
        return users.filter(user =&amp;gt; user.username === args.username);
      } else if (args.email) {
        return users.filter(user =&amp;gt; user.email === args.email);
      } else if (args.password) {
        return users.filter(user =&amp;gt; user.password === args.password);
      } else {
        return users;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Wow – Big improvement. However, there’s a lot going on; let me explain it for you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; First, the &lt;code&gt;getUsers&lt;/code&gt; method takes in two parameters: &lt;code&gt;parent&lt;/code&gt;, and &lt;code&gt;args&lt;/code&gt;. It is important that &lt;code&gt;args&lt;/code&gt; be the second parameter, otherwise you will get an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Second, we make a long &lt;code&gt;if&lt;/code&gt; statement. First, we check if the arguments &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, or &lt;code&gt;password&lt;/code&gt; were provided to filter through the data. If no parameters were provided, we return all the data in the users array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; If parameters were provided with the query, we filter through the data in the &lt;code&gt;users&lt;/code&gt; array with the &lt;code&gt;array.filter()&lt;/code&gt; method. Then, we return matching data – if there is any.&lt;/p&gt;

&lt;p&gt;Now, let’s test our new-and-improved query. Run your server and navigate to &lt;code&gt;localhost:3000/graphql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_YPd7yTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-16-at-8.43.32-PM.png%3Fresize%3D768%252C331%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_YPd7yTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-16-at-8.43.32-PM.png%3Fresize%3D768%252C331%26ssl%3D1" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, enter the following query into the box on the left:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query {
  getUsers(id:1) {
    id
    username
    email
    password
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This should retrieve all data for the user with an id equal to 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJsyK1rU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-16-at-8.48.17-PM.png%3Fresize%3D768%252C331%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJsyK1rU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-16-at-8.48.17-PM.png%3Fresize%3D768%252C331%26ssl%3D1" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#graphql-mutations" class="anchor"&gt;
  &lt;/a&gt;
  GraphQL Mutations
&lt;/h1&gt;

&lt;p&gt;The next big part of GraphQL is modifying data in the database. This includes adding and deleting users, in our scenario. Fortunately, GraphQL provides an easy way for us to do this: mutations.&lt;/p&gt;

&lt;p&gt;In a brief summary, mutations are just like GraphQL queries, except they modify data. In order to make a mutation, we can define a mutation type just like we did a &lt;code&gt;Query&lt;/code&gt; type in our schema.&lt;/p&gt;

&lt;p&gt;Modify your schema in &lt;code&gt;schema.js&lt;/code&gt; to look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { gql } = require('apollo-server-express');
const schema = gql`
  type Query {
    getUsers(id:Int, username:String, email:String, password:String): User
  }
  type Mutation {
    createUser(username:String, email:String, password:String): User
  }
  type User {
    id: Int!
    username: String!
    email: String!
    password: String!
  }
`;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, mutations don’t look very different from queries. Of course, you can always get more advanced; these mutations are on a very basic level.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Mutation&lt;/code&gt; type above, we define a &lt;code&gt;createUser&lt;/code&gt; mutation. This mutation takes in 3 parameters: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt;. The reason we’re not going to provide the &lt;code&gt;id&lt;/code&gt; property is because we want the &lt;code&gt;id&lt;/code&gt; to be defined by the computer, whether randomly or in order, not manually.&lt;/p&gt;

&lt;p&gt;In order to put our mutation into effect, we’ll need to make some edits to our resolvers. Look at the new resolvers below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let users = [
  {
    id:1,
    username:'The Javascript Ninja',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
  {
    id:2,
    username:'The Javascript Ninjas Best Friend',
    email:'contact@thejavascriptninja.com',
    password:'its-a-secret'
  },
];
const resolvers = {
  Query: {
    getUsers: (parent, args) =&amp;gt; {
      if (args.id) {
        return users.filter(user =&amp;gt; user.id === args.id);
      } else if (args.username) {
        return users.filter(user =&amp;gt; user.username === args.username);
      } else if (args.email) {
        return users.filter(user =&amp;gt; user.email === args.email);
      } else if (args.password) {
        return users.filter(user =&amp;gt; user.password === args.password);
      } else {
        return users;
      }
    }
  },
  Mutation: {
    createUser: (parent, args) =&amp;gt; {
      let newUser = {
        id: users.length + 1,
        username: args.username,
        email: args.email,
        password: args.password
      };
      users.push(newUser);
      return newUser;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, in our resolver, we have a new property after the &lt;code&gt;Query&lt;/code&gt; property! This is the &lt;code&gt;Mutation&lt;/code&gt; property. In the &lt;code&gt;Mutation&lt;/code&gt; property, we have the &lt;code&gt;createUser&lt;/code&gt; method. This is so far our first mutation. In the &lt;code&gt;createUser&lt;/code&gt; method we do 3 things:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create a &lt;code&gt;newUser&lt;/code&gt; object. In this object, we set the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt; of our new user.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add the &lt;code&gt;newUser&lt;/code&gt; object to the database. In reality, we would add the &lt;code&gt;newUser&lt;/code&gt; to the database. However, since we’re just using a dummy database model, we just use &lt;code&gt;array.push()&lt;/code&gt; to add the &lt;code&gt;newUser&lt;/code&gt; to our &lt;code&gt;users&lt;/code&gt; array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return the &lt;code&gt;newUser&lt;/code&gt;. This is pretty straightforward. We just return the &lt;code&gt;newUser&lt;/code&gt; object as a result of the mutation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#running-our-first-mutation" class="anchor"&gt;
  &lt;/a&gt;
  Running our First Mutation
&lt;/h1&gt;

&lt;p&gt;Now that we’ve got our mutation all done, it’s time to run. (Yes, that rhymes 😀). In order to run our mutation, start your server and navigate to &lt;code&gt;localhost:3000/graphql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJq_mb9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-8.25.47-PM-2.png%3Fresize%3D768%252C329%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJq_mb9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-8.25.47-PM-2.png%3Fresize%3D768%252C329%26ssl%3D1" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make sure everything is working right, let’s first run our query. Enter this query into the box on the left:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query {
  getUsers {
    id
    username
    email
    password
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should see the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-5ubY36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-8.58.43-PM.png%3Fresize%3D768%252C330%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-5ubY36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-8.58.43-PM.png%3Fresize%3D768%252C330%26ssl%3D1" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we’ve ensured everything works and we aren’t getting any errors, it’s time to test our mutation. Let’s enter the mutation we wrote earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation myMutation {
  createUser(username:"Subscriber to TJN", email:"contact@thejavascriptninja.com", password:"secret") {
    id
    username
    email
    password
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, we call &lt;code&gt;createUser&lt;/code&gt;, and give it the specified params. It should return the following result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    "createUser": {
      "id": 3,
      "username": "Subscriber to TJN",
      "email": "contact@thejavascriptninja.com",
      "password": "secret"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eY7lsar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-9.09.14-PM.png%3Fresize%3D768%252C330%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eY7lsar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-9.09.14-PM.png%3Fresize%3D768%252C330%26ssl%3D1" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, if we run our query again, we can see our mutation has taken effect.&lt;/p&gt;

&lt;p&gt;Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query {
  getUsers {
    id
    username
    email
    password
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    "getUsers": [
      {
        "id": 1,
        "username": "The Javascript Ninja",
        "email": "contact@thejavascriptninja.com",
        "password": "its-a-secret"
      },
      {
        "id": 2,
        "username": "The Javascript Ninjas Best Friend",
        "email": "contact@thejavascriptninja.com",
        "password": "its-a-secret"
      },
      {
        "id": 3,
        "username": "Subscriber to TJN",
        "email": "contact@thejavascriptninja.com",
        "password": "secret"
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2K7Zc4YH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-9.11.41-PM.png%3Fresize%3D768%252C328%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2K7Zc4YH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/thejavascriptninja.com/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-9.11.41-PM.png%3Fresize%3D768%252C328%26ssl%3D1" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hooray! Our mutation worked!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-conclude" class="anchor"&gt;
  &lt;/a&gt;
  To Conclude…
&lt;/h1&gt;

&lt;p&gt;A’ight folks!&lt;/p&gt;

&lt;p&gt;Today we’ve talked about organizing our code, writing more advanced queries (using parameters and variables), and GraphQL mutations.&lt;/p&gt;

&lt;p&gt;Pretty awesome stuff.&lt;/p&gt;

&lt;p&gt;I am going to end the tutorial here so it doesn’t get too long, but make sure to &lt;a href="//thejavascriptninja.com"&gt;subscribe&lt;/a&gt; so you don’t miss out on any great content!&lt;/p&gt;

&lt;p&gt;Stay tuned and talk soon!&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>node</category>
      <category>javascript</category>
      <category>database</category>
    </item>
    <item>
      <title>Setting up a Serverless Project with Webpack, Babel, and Knex</title>
      <author>James Ingold</author>
      <pubDate>Sun, 20 Dec 2020 01:45:55 +0000</pubDate>
      <link>https://dev.to/jamesingold/setting-up-a-serverless-project-with-webpack-babel-and-knex-346b</link>
      <guid>https://dev.to/jamesingold/setting-up-a-serverless-project-with-webpack-babel-and-knex-346b</guid>
      <description>&lt;p&gt;Using Webpack with the Serverless Framework is handy if you want to use the latest Javascript features along with Babel. It also helps to optimize the packaging of functions so we can make sure we're only shipping code that is lean and mean. However, adding the delightful query builder Knex to the mix can cause some issues that I spent a good amount of time on. Hopefully this article will help anyone dealing with similar issues save some time.&lt;/p&gt;

&lt;p&gt;In this article we'll go through setting up a Serverless project with Webpack, Babel, and Knex along with Prettier and Eslint. We'll focus on specific issues with Knex in this scenario and how to solve them. If you want a TLDR; here's the final output, a &lt;a href="https://github.com/james-ingold/serverless-webpack-babel-knex-starter"&gt;Serverless starter template&lt;/a&gt; with Webpack, Babel, and Knex ready to go.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#project-setup" class="anchor"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h4&gt;

&lt;p&gt;Install serverless globally&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install serverless -g
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we'll set up a new Serverless project using a default aws-nodejs template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;serverless create --template aws-nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will create a bare handler.js and a serverless yaml file to get us started.&lt;/p&gt;

&lt;p&gt;Next add a package.json file to manage our dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#add-dev-dependencies-and-webpack" class="anchor"&gt;
  &lt;/a&gt;
  Add Dev Dependencies and Webpack:
&lt;/h4&gt;

&lt;p&gt;We're going to add Babel to get access to the latest Javascript features and then we'll add Webpack to transform our Javascript code in a way that the Serverless platforms (AWS) can handle. We'll also add Serverless-Offline which emulates AWS and AWS Gateway, allowing us to run our functions locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @babel/core @babel/preset-env webpack serverless-webpack serverless-offline babel-loader dotenv
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#adding-source-map-support" class="anchor"&gt;
  &lt;/a&gt;
  Adding Source Map Support
&lt;/h4&gt;

&lt;p&gt;It's always nice to get stack traces, let's set up source map support.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;source-map-support &lt;span class="nt"&gt;--save&lt;/span&gt; npm &lt;span class="nb"&gt;install
&lt;/span&gt;babel-plugin-source-map-support &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The source-map-support module provides source map support for stack traces in node via the &lt;a href="https://www.npmjs.com/package/source-map-support"&gt;V8 stack trace API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Babel-plugin-source-map-support prepends this statement to each file, giving us stack traces with the source-map-support package:&lt;br&gt;&lt;br&gt;
&lt;code&gt;import 'source-map-support/register';&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-babel" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Babel
&lt;/h4&gt;

&lt;p&gt;Create a .babelrc file in the root of the project to handle our Babel configuration:&lt;/p&gt;

&lt;p&gt;.babelrc&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"source-map-support"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"targets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#adding-knex" class="anchor"&gt;
  &lt;/a&gt;
  Adding Knex
&lt;/h4&gt;

&lt;p&gt;Next, we'll add Knex and MySQL as the driver of choice for this purpose:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save mysql2 knex
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#setting-up-knex" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Knex
&lt;/h4&gt;

&lt;p&gt;Create a knexfile.js in the project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mysql2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_PW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_DB&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// migrations: {&lt;/span&gt;
    &lt;span class="c1"&gt;// directory: './database/migrations',&lt;/span&gt;
    &lt;span class="c1"&gt;// },&lt;/span&gt;
    &lt;span class="c1"&gt;// seeds: { directory: './database/seeds' }&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;staging&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mysql2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_PW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_DB&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mysql2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_PW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_DB&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Create a folder called queries in your project root, this will be where the data retrieval functions will go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir queries
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add a knex file:&lt;br&gt;
knex.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;knex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;knex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;knexfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../knexfile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;knexfile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;knex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;configOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example query file - games.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;knex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./knex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;knex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matches&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#setting-up-webpack" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Webpack
&lt;/h4&gt;

&lt;p&gt;In the root of the project create a webpack.config.js file and configure Webpack to use Babel to bundle up our Serverless functions.&lt;br&gt;
We'll also exclude node development dependencies using the node externals package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install webpack-node-externals --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;webpack.config.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slsw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serverless-webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodeExternals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-node-externals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slsw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;devtool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source-map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Since 'aws-sdk' is not compatible with webpack,&lt;/span&gt;
  &lt;span class="c1"&gt;// we exclude all node dependencies&lt;/span&gt;
  &lt;span class="na"&gt;externalsPresets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;externals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nodeExternals&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slsw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLocal&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;optimization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Turn off size warnings for entry points&lt;/span&gt;
    &lt;span class="na"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// Run babel on all .js files - skip those in node_modules&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#setting-up-serverless" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Serverless
&lt;/h4&gt;

&lt;p&gt;Add our plugins to the serverless.yaml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- serverless-webpack
- serverless-offline
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add serverless-webpack configuration to serverless.yaml&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;webpack&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;webpackConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./webpack.config.js&lt;/span&gt;
    &lt;span class="na"&gt;includeModules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# enable auto-packing of external modules&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We'll add an http endpoint to the default hello handler, so that we can test our api endpoint out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get&lt;/span&gt;
    &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Full Serverless.yaml&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;serverless-webpack-babel-knex-starter&lt;/span&gt;
&lt;span class="na"&gt;frameworkVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2"&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
&lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs12.x&lt;/span&gt;
&lt;span class="na"&gt;apiGateway&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;shouldStartNameWithService&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;serverless-webpack&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;serverless-offline&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;handler.hello&lt;/span&gt;
      &lt;span class="s"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get&lt;/span&gt;
          &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;webpack&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;webpackConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./webpack.config.js&lt;/span&gt;
  &lt;span class="na"&gt;includeModules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# enable auto-packing of external modules&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#running-and-knex-issues" class="anchor"&gt;
  &lt;/a&gt;
  Running and Knex Issues
&lt;/h4&gt;

&lt;p&gt;Let's test it out!&lt;br&gt;
Add a start npm script to package.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless offline start --stage dev --noAuth"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Call our API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="nt"&gt;--request&lt;/span&gt; GET &lt;span class="s1"&gt;'http://localhost:3000/dev/hello'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#knex-runtime-issues" class="anchor"&gt;
  &lt;/a&gt;
  Knex Runtime Issues:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ./knexfile.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It doesn't like that we're using module.exports in our knexfile, one potential solution would be to use es6 default export syntax&lt;br&gt;
export default {}&lt;/p&gt;

&lt;p&gt;This ended up causing more problems then it solved dealing with the internal knex library which doesn't play well with ES modules.&lt;/p&gt;

&lt;p&gt;The solution I went for is to use a Babel plugin to transform ESM to CommonJS Modules which is the standard for Node modules. Client-side JavaScript that runs in the browser use another standard, called ES Modules or ESM.&lt;br&gt;
In CommonJS, we export with module.exports and import with require statements. Since we're using Babel we can use import/export and our code will be transformed into CommonJS modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @babel/plugin-transform-modules-commonjs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add to our plugins section in .babelrc&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"source-map-support"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@babel/plugin-transform-modules-commonjs"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"targets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using CommonJS should be enough to get you going but you might run into the next issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can't resolve runtime dependencies
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Module not found: Error: Can't resolve 'oracledb'
Module not found: Error: Can't resolve 'pg-native'
Module not found: Error: Can't resolve 'pg-query-stream'
Module not found: Error: Can't resolve 'sqlite3'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you receive module not found errors for packages that you are not using, then we can fix this by ignoring those drivers/packages.&lt;br&gt;
There are different ways this can be approached with Webpack and with Serverless but the solution that I landed on was to use the NormalModuleReplacementPlugin which is bundled with Webpack. This plugin allows you to replace resources that match a regular expression with another resource. We'll add the noop2 package to replace the drivers we're not using with a "no operation module".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev noop2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NormalModuleReplacementPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="c1"&gt;// Ignore knex runtime drivers that we don't use&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NormalModuleReplacementPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sr"&gt;/mssql&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;|oracle&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;db&lt;/span&gt;&lt;span class="se"&gt;)?&lt;/span&gt;&lt;span class="sr"&gt;|sqlite3|pg-&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;native|query&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noop2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#adding-eslint-and-prettier" class="anchor"&gt;
  &lt;/a&gt;
  Adding Eslint and Prettier
&lt;/h4&gt;

&lt;p&gt;To finish this starter template, we'll add some niceness to the project with eslint and prettier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @babel/eslint-parser eslint eslint-config-prettier eslint-plugin-lodash eslint-plugin-prettier prettier
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;prettierrc.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;.eslintrc.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prettier&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/eslint-parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;parserOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ecmaFeatures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;experimentalObjectRestSpread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plugin:prettier/recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plugin:lodash/recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prettier/prettier&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#starter-project" class="anchor"&gt;
  &lt;/a&gt;
  Starter Project
&lt;/h4&gt;

&lt;p&gt;Now we have a nice starter project to get us off the ground with Serverless, Webpack, Babel, and Knex.&lt;/p&gt;

&lt;p&gt;To grab all this goodness or if you have improvements, check out the &lt;a href="https://github.com/james-ingold/serverless-webpack-babel-knex-starter"&gt;Github&lt;br&gt;
repository&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>webpack</category>
      <category>babel</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating a File Sharing and Conversion Web App with Azure Functions</title>
      <author>Emily Chen</author>
      <pubDate>Sun, 20 Dec 2020 01:44:38 +0000</pubDate>
      <link>https://dev.to/bitproject/creating-a-file-sharing-and-conversion-web-app-with-azure-functions-7fm</link>
      <guid>https://dev.to/bitproject/creating-a-file-sharing-and-conversion-web-app-with-azure-functions-7fm</guid>
      <description>&lt;p&gt;If you or someone you know participated in this year's AP Collegeboard Exams, you probably recognize the stress of submitting handwritten work within a small time constraint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7TKRwpns23QMNNiE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7TKRwpns23QMNNiE/giphy.gif" alt="https://media.giphy.com/media/3o7TKRwpns23QMNNiE/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bunnimage&lt;/strong&gt; aims to help alleviate that stress for students and others working at home. It takes an image as an input on an upload page and converts it into a PDF that is available at a download page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Overview&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DnLyTVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99191176-01198180-2739-11eb-9889-872822df6bd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DnLyTVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99191176-01198180-2739-11eb-9889-872822df6bd8.png" alt="https://user-images.githubusercontent.com/69332964/99191176-01198180-2739-11eb-9889-872822df6bd8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial, we'll be walking through:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating the "Upload" page and an HTTP Trigger Function that will upload the user's image to a storage container.&lt;/li&gt;
&lt;li&gt;Setting up an Event Grid Subscription and a Function that converts the image into a PDF and stores it again.

&lt;ul&gt;
&lt;li&gt;This is where the API will live!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating the "Download" page and an HTTP Trigger Function that retrieves the correct PDF.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optional&lt;/strong&gt; For those who are interested, we can add another Function to delete the files and keep our containers squeaky clean.

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Note&lt;/strong&gt;: The diagram above excludes the optional deletion feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find a sample of the final product at &lt;a href="https://github.com/emsesc/bunnimage"&gt;my Github repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#before-we-start" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Before we start:&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you have an &lt;strong&gt;&lt;a href="https://azure.microsoft.com/en-us/free/"&gt;Azure Subscription&lt;/a&gt;&lt;/strong&gt; so we can utilize the amazing features of Microsoft Azure Functions (It's free!) 🤩&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Register&lt;/strong&gt; for an account on &lt;strong&gt;&lt;a href="https://www.online-convert.com/register"&gt;Online Convert&lt;/a&gt;&lt;/strong&gt; (with the free version), as we will be using this API convert our images&lt;/li&gt;
&lt;li&gt;If you want to host your website somewhere, check out &lt;a href="https://repl.it/languages/html"&gt;Repl.it&lt;/a&gt;, or you can just have your project run &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;locally&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-upload-the-image" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Upload the image ⬆️
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-function-app" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating a Function App&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We're going to have a lot of triggers in this project, so let's get started by &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function"&gt;creating a Function App&lt;/a&gt;! Follow those steps to create the Function App, and then create the first HTTP trigger (this will upload our image).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: it will be helpful if you keep track of these strings for reference later in the project: Storage account name (found in "Hosting"), Function app name, Resource Group&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we start coding the trigger, though, we need to install some &lt;code&gt;npm&lt;/code&gt; packages/libraries.&lt;/p&gt;

&lt;p&gt;Click on the "Console" tab in the left panel under "Development Tools".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1-EZ3Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189070-59e31d00-272d-11eb-80a4-17444e5fac65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1-EZ3Qo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189070-59e31d00-272d-11eb-80a4-17444e5fac65.png" alt="https://user-images.githubusercontent.com/69332964/99189070-59e31d00-272d-11eb-80a4-17444e5fac65.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the console (shown on the right panel), type in the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/parse-multipart"&gt;&lt;code&gt;npm install parse-multipart&lt;/code&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/node-fetch"&gt;&lt;code&gt;npm install node-fetch&lt;/code&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/@azure/storage-blob"&gt;&lt;code&gt;npm install @azure/storage-blob&lt;/code&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: The Azure Storage Blob client library is going to be a key piece of the project. After all, it's about blobs!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-your-storage-account" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setting up your storage account&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is the storage account you created when creating the Function App. If you don't know what it is, search "Storage Containers" in the query box in Azure portal.&lt;/p&gt;

&lt;p&gt;We're going to need to create 2 containers: "images" and "pdfs." Think of these as folders in the account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aYXHr0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161767-75194280-26c3-11eb-8ad1-c19d63d37bbb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aYXHr0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161767-75194280-26c3-11eb-8ad1-c19d63d37bbb.png" alt="https://user-images.githubusercontent.com/69332964/99161767-75194280-26c3-11eb-8ad1-c19d63d37bbb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4TPRe0wB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161780-8cf0c680-26c3-11eb-9bfc-78dc3262b038.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4TPRe0wB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161780-8cf0c680-26c3-11eb-9bfc-78dc3262b038.png" alt="https://user-images.githubusercontent.com/69332964/99161780-8cf0c680-26c3-11eb-9bfc-78dc3262b038.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to upgrade your storage account because Event Grid Subscriptions will only work with a v2 version. Follow this &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-upgrade?tabs=azure-portal"&gt;tutorial&lt;/a&gt; to upgrade it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#writing-our-first-azure-function-to-upload-an-image" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Writing our &lt;em&gt;First&lt;/em&gt; Azure Function to Upload an Image&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;⬇ &lt;strong&gt;Some housekeeping...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the function to work, we have to initialize the packages/libraries we installed in the beginning of part 1.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take note of the &lt;code&gt;process.env&lt;/code&gt; value being assigned to &lt;code&gt;connectionstring&lt;/code&gt; in the code below (&lt;em&gt;Line 3&lt;/em&gt;). Use this &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-how-to-use-azure-function-app-settings"&gt;tutorial&lt;/a&gt; to add in your own secret strings from your storage container.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The storage container is the one you created when you started your Function App. Navigate to it and find your secret strings here:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNKeUa-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161798-ba3d7480-26c3-11eb-8e55-eac4bd4cb174.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNKeUa-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161798-ba3d7480-26c3-11eb-8e55-eac4bd4cb174.png" alt="https://user-images.githubusercontent.com/69332964/99161798-ba3d7480-26c3-11eb-8e55-eac4bd4cb174.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-Q06_2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161822-ec4ed680-26c3-11eb-8977-f12beb496c24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-Q06_2D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99161822-ec4ed680-26c3-11eb-8977-f12beb496c24.png" alt="https://user-images.githubusercontent.com/69332964/99161822-ec4ed680-26c3-11eb-8977-f12beb496c24.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep these safe, and use the connection string in the corresponding variable in the code.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note: You'll need to store other strings in environment variables later on in the tutorial&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start just by initializing a few variables we'll need.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;⬇ &lt;strong&gt;The main block of code&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notice that we are able to name the file with the user's username in line 10 by receiving it from the header.

&lt;ul&gt;
&lt;li&gt;Later on in the JS, we will send the username in the header of the request.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;parse-multipart&lt;/code&gt; library is being used in lines 4-11 to parse the image from the POST request we will later make with the frontend; refer to the documentation linked above.&lt;/li&gt;
&lt;li&gt;Some if-else logic is used from lines 13-22 to determine the file extension.&lt;/li&gt;
&lt;li&gt;We then call the &lt;code&gt;uploadBlob()&lt;/code&gt; function in line 24.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;⬇ &lt;strong&gt;Uploading the image blob to the "images" container&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notice the &lt;code&gt;uploadBlob()&lt;/code&gt; function! This is what uploads the parsed image to the specified "images" blob container.

&lt;ul&gt;
&lt;li&gt;Here's a &lt;a href="https://youtu.be/Qt_VXM_fml4"&gt;YouTube Video to help explain&lt;/a&gt; the handy dandy library&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;




&lt;h3&gt;
  &lt;a href="#frontend-the-upload-webpage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Frontend: The "upload" webpage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Next, I created a static HTML page that will accept the image from the user and send to the Azure Function we just coded using Javascript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I removed unnecessary sections of my code because I wanted to make the webpage ✨&lt;em&gt;fancy&lt;/em&gt;✨, but you can see the whole thing &lt;a href="https://github.com/emsesc/bunnimage/blob/main/upload.html"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;Above we have:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input box for the username (simple but &lt;em&gt;insecure&lt;/em&gt; auth system)&lt;/li&gt;
&lt;li&gt;Button to submit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, a static HTML webpage can't make a request to the Azure Function itself, which is where we're going to cook up some JS. 😯&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-javascript-for-interacting-with-the-azure-function" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Frontend: Javascript for interacting with the Azure Function&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This block of Javascript updates the preview thumbnail while getting the picture, gets the username, and sends them both over to the function we just coded.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;loadFile()&lt;/code&gt; is called when the file input changes to display the thumbnail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Got picture!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Get image from output &lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;// load inputted image into the image src and display&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Then, &lt;code&gt;handle()&lt;/code&gt; is called when the file is submitted to POST the image and username. The image is sent in the body, and username is sent as a header. &lt;em&gt;Lines 15-30&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Be sure to change the function url on Line 19 to the one of your upload image Function!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpwBSWSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99188529-73369a00-272a-11eb-93df-04fdce5381df.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpwBSWSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99188529-73369a00-272a-11eb-93df-04fdce5381df.png" alt="https://user-images.githubusercontent.com/69332964/99188529-73369a00-272a-11eb-93df-04fdce5381df.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-your-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Deploy your code&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Try doing it locally with the &lt;strong&gt;live server extension&lt;/strong&gt; for VS Code&lt;/li&gt;
&lt;li&gt;Try &lt;a href="https://azure.microsoft.com/en-us/services/app-service/web/"&gt;Azure Web Apps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;I personally used &lt;a href="https://repl.it/languages/html"&gt;repl.it&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#update-cors-settings" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Update CORS Settings&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a crucial step!! 😱 If you don't change your CORS (Cross-origin resource sharing) settings, the POST request won't work. This tells the Function App what domains can access our Azure Function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: Change it to a wildcard operator (&lt;code&gt;*&lt;/code&gt;), which allows &lt;em&gt;all&lt;/em&gt; origin domains to make requests&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Be sure to remove any other existing inputs before attempting to save with wildcard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--As7Uwysj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99188905-6f0b7c00-272c-11eb-8142-f91882227c78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--As7Uwysj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99188905-6f0b7c00-272c-11eb-8142-f91882227c78.png" alt="https://user-images.githubusercontent.com/69332964/99188905-6f0b7c00-272c-11eb-8142-f91882227c78.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change it to the domain you are using to host your code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#home-stretch" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Home stretch! 🏃🏻‍♀️&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;It's finally time to test our first step that our app will make!&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to your HTML page and submit an image&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbSAK3H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189240-3cfb1980-272e-11eb-8896-e959f37480b3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbSAK3H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189240-3cfb1980-272e-11eb-8896-e959f37480b3.png" alt="https://user-images.githubusercontent.com/69332964/99189240-3cfb1980-272e-11eb-8896-e959f37480b3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---71Ifwzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189255-53a17080-272e-11eb-9cab-a73faf504b3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---71Ifwzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189255-53a17080-272e-11eb-9cab-a73faf504b3f.png" alt="https://user-images.githubusercontent.com/69332964/99189255-53a17080-272e-11eb-9cab-a73faf504b3f.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to the "images" storage container and check to see if your image is there!&lt;br&gt;
&lt;em&gt;Error? Check the log in your Function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4s_K7hgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189316-9c592980-272e-11eb-9870-dbc1f9352599.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4s_K7hgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189316-9c592980-272e-11eb-9870-dbc1f9352599.png" alt="https://user-images.githubusercontent.com/69332964/99189316-9c592980-272e-11eb-9870-dbc1f9352599.png"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#step-2-convert-the-image" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Convert The Image 🔄
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#create-another-azure-function" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create another Azure Function&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Yep... We need yet &lt;em&gt;another&lt;/em&gt; Azure Function. (What can I say? They're pretty helpful.) This one will trigger when &lt;strong&gt;the image blob is stored&lt;/strong&gt;, then convert it into a PDF, and store it in the "pdfs" container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/QBGYWFjnggIZ8fMjdt/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QBGYWFjnggIZ8fMjdt/giphy.gif" alt="https://media.giphy.com/media/QBGYWFjnggIZ8fMjdt/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this time, it will be an &lt;strong&gt;Event Grid Trigger&lt;/strong&gt;, so make sure you select the right one!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mHS4LQuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99191739-a4b86100-273c-11eb-8015-9988540fc67c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mHS4LQuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99191739-a4b86100-273c-11eb-8015-9988540fc67c.png" alt="https://user-images.githubusercontent.com/69332964/99191739-a4b86100-273c-11eb-8015-9988540fc67c.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What's the difference?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event Grid Triggers trigger based on an Event Grid Subscription, which we will create later in this step.
Our trigger will fire when a blob is stored in the "images" container&lt;/li&gt;
&lt;li&gt;HTTP Triggers fire when a GET or POST request is made to the endpoint (function URL)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;strong&gt;Commercial Break&lt;/strong&gt; 📺&lt;/p&gt;

&lt;p&gt;Let's recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step 1 ✅:&lt;/strong&gt; We created the "Upload" page and an HTTP Trigger Function that uploaded the user's image to a storage container.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step 2:&lt;/strong&gt; We will create an &lt;strong&gt;Event Grid&lt;/strong&gt; function that converts the image into a PDF by calling the &lt;em&gt;Online Convert API&lt;/em&gt; and will upload the PDF to blob storage.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;⚠😵&lt;strong&gt;WARNING&lt;/strong&gt;😵⚠ Lots of code ahead, but it's all good! I split it into sections.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First off, the &lt;em&gt;Online-Convert&lt;/em&gt; API!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We're going to need to get another secret key, except this time from the API. Here's &lt;a href="https://apiv2.online-convert.com/docs/getting_started/api_key.html"&gt;how to get that&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Once again, save it in your environment variables so it's accessible.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Note&lt;/strong&gt;: This API does have restrictions on the amount of conversions during 24 hours, so just be aware that you may get an error after reaching the limit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⬇ This &lt;code&gt;convertImage()&lt;/code&gt; function does exactly what it's called: convert the image by calling the Online-Convert API. Here's some &lt;a href="https://apiv2.online-convert.com/docs/input_types/cloud/azure_blob_storage.html"&gt;documentation&lt;/a&gt; around how to use the API with Azure Blob Storage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convertImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blobName&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;convertAPI_KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accountKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accountKey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uriBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;https://api2.online-convert.com/jobs&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// env variables (similar to .gitignore/.env file) to not expose personal info&lt;/span&gt;
    &lt;span class="c1"&gt;// check out documentation &lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;conversion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;target&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pdf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cloud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;azure&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parameters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blobName&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;credentials&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accountname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bunnimagestorage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accountkey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accountKey&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// making the post request&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uriBase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// we want to send the image&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-oc-api-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-cache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// receive the response&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;⬇To &lt;a href="https://apiv2.online-convert.com/docs/getting_started/job_polling.html"&gt;check the status of the conversion&lt;/a&gt; and determine whether we can store the PDF to blob storage yet, let's use this &lt;code&gt;checkStatus()&lt;/code&gt; function that makes a request to the same &lt;code&gt;https://api2.online-convert.com/jobs&lt;/code&gt; endpoint, except with a GET request instead of POST.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jobId&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;convertAPI_KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uriBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;https://api2.online-convert.com/jobs&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// env variables to keep your info private!&lt;/span&gt;

    &lt;span class="c1"&gt;// making the post request&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uriBase&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;jobId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*The await expression causes async function execution to pause until a Promise is settled 
        (that is, fulfilled or rejected), and to resume execution of the async function after fulfillment. 
        When resumed, the value of the await expression is that of the fulfilled Promise*/&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-oc-api-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// receive the response&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Then we can use the same &lt;code&gt;uploadBlob()&lt;/code&gt; function from before to upload our object!&lt;/p&gt;

&lt;p&gt;After this we get to the main section of our code.&lt;/p&gt;

&lt;p&gt;⬇It gets the blobName, calls the functions, and downloads the PDF to be stored.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;blobName&lt;/code&gt; is retrieved from the &lt;code&gt;EventGrid&lt;/code&gt; subscription subject* in lines 10-11&lt;/li&gt;
&lt;li&gt;Because the API does not convert the image immediately, we need a while loop to repeatedly check for the status of the conversion in lines 21-36&lt;/li&gt;
&lt;li&gt;The last portion is used to &lt;a href="https://apiv2.online-convert.com/docs/getting_started/job_downloading.html"&gt;download the converted PDF&lt;/a&gt; by sending a GET request to the URI from the completed file conversion response. &lt;em&gt;Lines 43-47&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;What's a subject? This part of the Event response contains information about what specific file caused the Azure Function to fire. For example: &lt;code&gt;/blobServices/default/containers/test-container/blobs/new-file.txt&lt;/code&gt; where the file is &lt;code&gt;new-file.txt&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;Now that the long block of code is done with, let's take a look at some responses you should expect from the API.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gist.github.com/emsesc/01e30ba32a6fd84572e35f26fe8479c4"&gt;This is&lt;/a&gt; what you would get if the file is still converting 🤔&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gist.github.com/emsesc/6018bafcf24f02a58a8f7f14d52ffbb8"&gt;Here's&lt;/a&gt; what you would get when the conversion is complete! (yay) 🥳&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In particular, there are 3 important pieces of the output we should examine:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;update.status.code&lt;/code&gt;: This tells us whether its done processing or not&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;update.output[0].uri&lt;/code&gt;: This gives us the URL where we can download the PDF (used in the last GET request)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;result.id&lt;/code&gt;: Gives the ID of the file conversion "job" so we can continually check for its status&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we can test our code, we need one last step: the trigger!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-event-subscription" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating an Event Subscription&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When the image blob is stored in the "images" container, we want the conversion from jpg/jpeg/png to pdf to begin &lt;em&gt;immediately&lt;/em&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just like how "subscribing" to a YouTube channel gives you notifications, we're going to subscribe to our own Blob Storage and trigger the Azure Function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: You'll want to keep the names for your storage account and resource group handy.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Search "Event Grid Subscriptions" in the search bar&lt;/li&gt;
&lt;li&gt;Click "+ Event Subscription" in the top left&lt;/li&gt;
&lt;li&gt;Fill in the form to create the Event Subscription:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRz99h_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99469463-c10cf700-2910-11eb-929e-e7feff85f203.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRz99h_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99469463-c10cf700-2910-11eb-929e-e7feff85f203.png" alt="https://user-images.githubusercontent.com/69332964/99469463-c10cf700-2910-11eb-929e-e7feff85f203.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If it asks you for a name, feel free to put anything you want - I named it "fileUploaded"&lt;/li&gt;
&lt;li&gt;Under Topic Types, select "Storage Accounts"&lt;/li&gt;
&lt;li&gt;The "Resource Group" is the Resource Group that holds your storage account&lt;/li&gt;
&lt;li&gt;The "Resource" is your storage account name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If your storage account doesn't appear, you forgot to follow the "upgrade to v2 storage" step&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk9h8yRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99469567-05989280-2911-11eb-9cf2-827a604f638e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk9h8yRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99469567-05989280-2911-11eb-9cf2-827a604f638e.png" alt="https://user-images.githubusercontent.com/69332964/99469567-05989280-2911-11eb-9cf2-827a604f638e.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Under Event Types: filter to &lt;strong&gt;Blob Created&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lh5ajUWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189740-aed46280-2730-11eb-8ff0-c8a7ba19aadc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lh5ajUWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189740-aed46280-2730-11eb-8ff0-c8a7ba19aadc.png" alt="https://user-images.githubusercontent.com/69332964/99189740-aed46280-2730-11eb-8ff0-c8a7ba19aadc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The "Endpoint Type" is "Azure Function"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpJ1LKiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189763-d0354e80-2730-11eb-91e4-5b17fc5e63bd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpJ1LKiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189763-d0354e80-2730-11eb-91e4-5b17fc5e63bd.png" alt="https://user-images.githubusercontent.com/69332964/99189763-d0354e80-2730-11eb-91e4-5b17fc5e63bd.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The "Function" is the function we want triggered when an image is uploaded, so the &lt;code&gt;convertImage&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Tweaking some settings...&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the "Filters" tab and "Enable Subject Filtering"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZzk7ylQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189929-bd6f4980-2731-11eb-9b01-b0cef972b96a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZzk7ylQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99189929-bd6f4980-2731-11eb-9b01-b0cef972b96a.png" alt="https://user-images.githubusercontent.com/69332964/99189929-bd6f4980-2731-11eb-9b01-b0cef972b96a.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the "Subject Begins With" to &lt;code&gt;/blobServices/default/containers/images/blobs/&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This way, the subscription will &lt;strong&gt;not&lt;/strong&gt; trigger when a PDF is stored in the "pdfs" container. It will &lt;strong&gt;only&lt;/strong&gt; trigger when something is stored in "images."&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Congratulations! You have now subscribed to the "blob created" event in your "images" container that triggers the convert image function!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#upload-a-converted-pdf-to-the-pdfs-container" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Upload a converted PDF to the "pdfs" container!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now that we've connected our Functions and frontend together with an Event Grid Subscription, try submitting another image to check if it successfully uploads as a PDF into the "pdfs" container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you used my code and have the same context.log()s, you should get something like this when the PDF uploads:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w05JGmbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99191696-50ad7c80-273c-11eb-947e-5e9a9962ddb0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w05JGmbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99191696-50ad7c80-273c-11eb-947e-5e9a9962ddb0.png" alt="https://user-images.githubusercontent.com/69332964/99191696-50ad7c80-273c-11eb-947e-5e9a9962ddb0.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-3-downloading-the-pdf-on-the-html-page-%E2%AC%87" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Downloading the PDF on the HTML page ⬇
&lt;/h2&gt;

&lt;p&gt;Now that we have a PDF stored in the "pdfs" container, how will we get the PDF back to the user? &lt;strong&gt;You got it right, yet &lt;em&gt;another&lt;/em&gt; Azure Function&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Create another HTTP Trigger - this one will return the PDF download URL to the frontend when triggered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/MYx9qA5yTknqgb4abz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/MYx9qA5yTknqgb4abz/giphy.gif" alt="https://media.giphy.com/media/MYx9qA5yTknqgb4abz/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Commercial Break&lt;/strong&gt; 📺&lt;/p&gt;

&lt;p&gt;Let's recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step 1 ✅:&lt;/strong&gt; We created the "Upload" page and an HTTP Trigger Function that uploaded the user's image to a storage container.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step 2 ✅:&lt;/strong&gt; We will create an &lt;strong&gt;Event Grid&lt;/strong&gt; function that converts the image into a PDF by calling the &lt;em&gt;Online Convert API&lt;/em&gt; and will upload the PDF to blob storage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step 3:&lt;/strong&gt; We will create a HTTP Trigger function that returns the PDF to the user when triggered by the "Download" page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step 4:&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;Optional&lt;/em&gt;&lt;/strong&gt; If you choose, create another HTTP Trigger function and modify other code to delete the image and PDF blobs from storage containers once they are unneeded.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#azure-functions-check-if-the-pdf-is-ready-to-be-served" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Azure Functions: Check if the PDF is ready to be served 🍝&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;⬇First, it receives the username to get the correct PDF from the header of the request, which is made by the webpage. You will see this request later on in the JS of this step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputBlob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript HTTP trigger function processed a request.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;https://bunnimagestorage.blob.core.windows.net/pdfs/&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.pdf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;⬇Then, using the personalized URL, it performs a GET request to check if the PDF has been stored in the "pdfs" container.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The specified blob does not exist.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Does not exist: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Does exist: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;⬇The function then returns the URL for downloading the PDF and whether or not the PDF is ready for download to the webpage.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;downloadUri&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// receive the response&lt;/span&gt;

    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#frontend-creating-the-download-html-page" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Frontend: Creating the Download HTML page&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Once again, the "fancy" stuff is omitted.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;p&gt;⬆&lt;strong&gt;Like we created the "upload" page in Step 1, we now need a "download" page for users to receive the PDF.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This piece of code creates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An input for the username &lt;em&gt;Line 6&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;One button for refreshing to check if the PDF is ready &lt;em&gt;Line 8&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;One button for downloading the file &lt;em&gt;Line 9&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frontend-downloading-the-pdf-on-the-webpage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Frontend: Downloading the PDF on the Webpage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Time to get bombarded with some &lt;em&gt;lovely&lt;/em&gt; JS!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1&lt;/strong&gt; ⬇:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the HTML on lines 2-4 to display the current status (whether it's looking for the PDF, whether it's ready for download, etc.)&lt;/li&gt;
&lt;li&gt;Make a request on lines 9-16 to the HTTP Trigger Function we just coded, sending the username inputted on the HTML page along with it&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;Part 2&lt;/strong&gt; ⬇:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we're going to find the link to download the PDF with &lt;code&gt;data.downloadUri&lt;/code&gt; on &lt;em&gt;line 1&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Change buttons from "Refresh" to "Download" when PDF is ready for download

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this?&lt;/strong&gt; Remove the "Refresh" button &lt;em&gt;Lines 10-11&lt;/em&gt; and make "Download" visible &lt;em&gt;Line 9&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;onclick&lt;/code&gt; attribute of the "Download" button to call the &lt;code&gt;getPdf()&lt;/code&gt; function with the unique username + link for download. &lt;em&gt;Line 8&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;getPdf()&lt;/code&gt; function allows for immediate download with &lt;code&gt;window.open(link)&lt;/code&gt; &lt;em&gt;Lines 16-19&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#amazing-youre-done" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Amazing! You're done!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here's the finished product in which I download the cute bunny shopping picture I uploaded earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOgVNO-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99192741-95d4ad00-2742-11eb-8b77-f0c9e6d159d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOgVNO-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99192741-95d4ad00-2742-11eb-8b77-f0c9e6d159d7.png" alt="https://user-images.githubusercontent.com/69332964/99192741-95d4ad00-2742-11eb-8b77-f0c9e6d159d7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kham9ajP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99192756-b00e8b00-2742-11eb-9fea-dc64a9083c63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kham9ajP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99192756-b00e8b00-2742-11eb-9fea-dc64a9083c63.png" alt="https://user-images.githubusercontent.com/69332964/99192756-b00e8b00-2742-11eb-9fea-dc64a9083c63.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3wHZRoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99192766-bbfa4d00-2742-11eb-8371-630af1b21778.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3wHZRoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69332964/99192766-bbfa4d00-2742-11eb-8371-630af1b21778.png" alt="https://user-images.githubusercontent.com/69332964/99192766-bbfa4d00-2742-11eb-8371-630af1b21778.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! I hope this knowledge of Azure Functions helps you create even more fun apps!&lt;/p&gt;

&lt;p&gt;If you're interested in augmenting this app, try using your new knowledge of Blob Storage, HTTP Triggers, the Node SDK (@azure/storage-blob), and some &lt;a href="https://stackoverflow.com/questions/60716837/how-to-delete-a-blob-from-azure-blob-v12-sdk-for-node-js"&gt;Stack Overflow&lt;/a&gt; to assist you to add a feature to delete the image and PDF blobs.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>node</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Maven Complete Tutorial for Beginners</title>
      <author>Sai Upadhyayula</author>
      <pubDate>Sat, 19 Dec 2020 21:58:11 +0000</pubDate>
      <link>https://dev.to/saiupadhyayula/maven-complete-tutorial-for-beginners-1jek</link>
      <guid>https://dev.to/saiupadhyayula/maven-complete-tutorial-for-beginners-1jek</guid>
      <description>&lt;p&gt;&lt;strong&gt;This post was originally published in &lt;a href="https://programmingtechie.com/"&gt;programmingtechie.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a Java Developer, your day to day activities while working on Java Projects includes writing code, compiling code, testing, packaging code in the form of an artifact like JAR, WAR or EAR and then deploying this artifact to an Application Server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Maven&lt;/strong&gt; automates all the tasks which are mentioned above by minimizing the manual overhead.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will understand &lt;strong&gt;What is Apache Maven?&lt;/strong&gt; and will cover all the concepts required for you to start using Maven in your Java Projects&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-apache-maven-" class="anchor"&gt;
  &lt;/a&gt;
  What is Apache Maven ?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Apache Maven&lt;/strong&gt; is a Project Management Tool used to manage projects which are developed using JVM languages like Java, Scala, Groovy etc.&lt;/p&gt;

&lt;p&gt;The major tasks of a Project Management Tool include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building the Source Code&lt;/li&gt;
&lt;li&gt;Testing Source Code&lt;/li&gt;
&lt;li&gt;Packaging the Source Code into an Artifact (ZIP, JAR, WAR or EAR)&lt;/li&gt;
&lt;li&gt;Handles Versioning and Releases of the Artifacts&lt;/li&gt;
&lt;li&gt;Generating JavaDocs from the Source Code&lt;/li&gt;
&lt;li&gt;Managing Project Dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maven is also called as a &lt;strong&gt;Build Tool&lt;/strong&gt; or a &lt;strong&gt;Dependency Management Tool&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-maven" class="anchor"&gt;
  &lt;/a&gt;
  Installing Maven
&lt;/h1&gt;

&lt;p&gt;You can download Maven from the website &lt;a href="https://maven.apache.org/download.cgi?Preferred=ftp://ftp.osuosl.org/pub/apache/"&gt;here&lt;/a&gt;. At the time of writing this tutorial, the latest version of Maven is 3.6.3.&lt;/p&gt;

&lt;p&gt;Under the Files section, you can download Maven by clicking on the link which looks something like &lt;a href="https://mirrors.supportex.net/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip"&gt;apache-maven-3.6.3-bin.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have downloaded and unzipped the folder, make sure to add the M2_HOME environment variable and to set the value of this variable to location of the unzipped folder.&lt;/p&gt;

&lt;p&gt;After that make sure to set another environment variable called M2 which contains the value M2_HOME/bin&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3MnaeKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven_Env_Variables.png%3Fw%3D626%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3MnaeKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven_Env_Variables.png%3Fw%3D626%26ssl%3D1" alt="M2 Environment Variable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, make sure to update the Path variable also with the M2 environment variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gu6yxwMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven_Env_Variable_Path.png%3Fw%3D527%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gu6yxwMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven_Env_Variable_Path.png%3Fw%3D527%26ssl%3D1" alt="M2 Environment Variable inside Path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you completed the above steps, open a new terminal window and type &lt;code&gt;mvn –version&lt;/code&gt; and you should see the output like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBvII8K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Version-Check.png%3Fw%3D1245%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBvII8K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Version-Check.png%3Fw%3D1245%26ssl%3D1" alt="Maven Version Check"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configure-maven-installation-in-ide" class="anchor"&gt;
  &lt;/a&gt;
  Configure Maven Installation in IDE
&lt;/h1&gt;

&lt;p&gt;The next step is to configure the maven installation inside your favorite IDE, in this tutorial we are going to use IntelliJ IDEA as the primary IDE.&lt;/p&gt;

&lt;p&gt;You can download the community edition of this IDE &lt;a href="https://www.jetbrains.com/idea/download/#section=windows"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have installed the IDE, on the Welcome Window click on the &lt;strong&gt;Configure&lt;/strong&gt; button and select Settings and inside the Settings Window search for Maven and under the &lt;strong&gt;Maven home directory&lt;/strong&gt; choose the Maven directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzFecvMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/configure-maven-1.png%3Fw%3D802%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzFecvMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/configure-maven-1.png%3Fw%3D802%26ssl%3D1" alt="IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMHzNfvv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/configure-maven-2.png%3Fw%3D982%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMHzNfvv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/configure-maven-2.png%3Fw%3D982%26ssl%3D1" alt="Configure Maven"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Apply&lt;/strong&gt; and then &lt;strong&gt;OK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You configured Maven successfully in your IDE. Now it’s time to create our first Maven Project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-your-first-maven-project" class="anchor"&gt;
  &lt;/a&gt;
  Create your First Maven Project
&lt;/h1&gt;

&lt;p&gt;In IntelliJ, click on &lt;strong&gt;New Project&lt;/strong&gt; and in the window, select &lt;strong&gt;Maven&lt;/strong&gt; to the left side and click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then enter your project name and if you expand the section &lt;strong&gt;Artifact Coordinates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will see the fields &lt;strong&gt;GroupId&lt;/strong&gt;, &lt;strong&gt;ArtifactId&lt;/strong&gt; and &lt;strong&gt;Version&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A GroupId is like a identifier for your project which usually follows the Java Package naming convention, so in our example IntelliJ has by default added the value org.example but you can add any value you like.&lt;/li&gt;
&lt;li&gt;An ArtifactId is the name of the project you are creating&lt;/li&gt;
&lt;li&gt;A Version is a unique number which identifies the version of our project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22mWGgs8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/New-Project.png%3Fw%3D1204%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22mWGgs8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/New-Project.png%3Fw%3D1204%26ssl%3D1" alt="Artifact Coordinates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click on &lt;strong&gt;Finish&lt;/strong&gt;, IntelliJ should open the project and the folder structure of the project will look something like the picture you see below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KEjjp-WI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Project-Structure.png%3Fw%3D922%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KEjjp-WI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Project-Structure.png%3Fw%3D922%26ssl%3D1" alt="Maven Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#exploring-maven-folder-structure" class="anchor"&gt;
  &lt;/a&gt;
  Exploring Maven Folder Structure
&lt;/h1&gt;

&lt;p&gt;Let’s have a look at the Folder Structure of the Maven Project we just created.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;src&lt;/strong&gt; folder is the root for our application source code and tests. Then we have the following subfolders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The folder &lt;strong&gt;src/main/java&lt;/strong&gt; contains the java source code, all the production code for our application resides here&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;src/main/resources&lt;/strong&gt; we will store all the files we are going to use in our project (example: Property Files, any files where we need to read in our application like XML, CSV etc.). If you are developing a web-application we will usually place all the static resources inside this folder.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;src/test/java&lt;/strong&gt; folder we will store all the test classes in our project.&lt;/li&gt;
&lt;li&gt;There is another folder called &lt;strong&gt;target&lt;/strong&gt; (currently not visible), which stores the compiled java class files. We will discuss about this in the coming sections&lt;/li&gt;
&lt;li&gt;And lastly, we have the &lt;strong&gt;pom.xml&lt;/strong&gt; file which contains the metadata of the project dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#maven-core-concepts" class="anchor"&gt;
  &lt;/a&gt;
  Maven Core Concepts
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#project-object-model" class="anchor"&gt;
  &lt;/a&gt;
  Project Object Model
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Project Object Model&lt;/strong&gt; File(also called as &lt;strong&gt;pom.xml&lt;/strong&gt;) contains the meta-data of the project and is also responsible to manage dependencies and to configure plugins which helps us in automating many repetitive tasks.&lt;/p&gt;

&lt;p&gt;Here is how a basic &lt;strong&gt;pom.xml&lt;/strong&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;  
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;project&lt;/strong&gt; is the top level tag of our &lt;strong&gt;pom.xml&lt;/strong&gt; file, which encapsulates all the information related to our Maven Project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;modelVersion&lt;/strong&gt; represents what version of POM you are using. The modelVersion for Maven 3 is always 4.0. This will never change unless you are using another major version of Maven.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now as we know what is a POM file, let’s have a look at different type’s of POM files. We have basically 3 types of POM files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple POM file&lt;/li&gt;
&lt;li&gt;Super POM file&lt;/li&gt;
&lt;li&gt;Effective POM file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#simple-pom-file" class="anchor"&gt;
  &lt;/a&gt;
  Simple POM File
&lt;/h3&gt;

&lt;p&gt;This is the same file(&lt;strong&gt;pom.xml&lt;/strong&gt;) which was generated in the previous section. It only contains information which is relevant to our current project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#super-pom-file" class="anchor"&gt;
  &lt;/a&gt;
  Super POM File
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;Super POM File&lt;/strong&gt; is a parent for all the &lt;strong&gt;Simple POM files&lt;/strong&gt;, it contains a set of default configuration which is shared by all the &lt;strong&gt;Simple POM&lt;/strong&gt; files.&lt;/p&gt;

&lt;p&gt;You can find the &lt;strong&gt;Super POM&lt;/strong&gt; file inside the Maven installation directory under the path &lt;strong&gt;M2_HOME/lib&lt;/strong&gt; and inside the JAR file &lt;strong&gt;maven-model-builder-XXX.jar&lt;/strong&gt; where XXX represents the version of the maven version you are using.&lt;/p&gt;

&lt;p&gt;We can find it under the package name &lt;strong&gt;org.apache.maven.model&lt;/strong&gt; under the file name &lt;strong&gt;pom-4.0.0.xml&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CAUTION&lt;/strong&gt;: You should never try to edit the Super POM as it contains sensible defaults from Maven.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#effective-pom-file" class="anchor"&gt;
  &lt;/a&gt;
  Effective POM File
&lt;/h3&gt;

&lt;p&gt;An &lt;strong&gt;Effective POM File&lt;/strong&gt; is nothing but a combination of &lt;strong&gt;Simple POM&lt;/strong&gt; and &lt;strong&gt;Super POM&lt;/strong&gt; File’s.&lt;/p&gt;

&lt;p&gt;It’s just a way of checking all the information of the pom.xml files in one place.&lt;/p&gt;

&lt;p&gt;We will have a look at how this will be helpful in the upcoming sections.&lt;/p&gt;

&lt;p&gt;You can have a look at the &lt;strong&gt;Effective POM&lt;/strong&gt; of our &lt;strong&gt;pom.xml&lt;/strong&gt; file by typing the following command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mvn help:effective-pom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In IntelliJ, you can simply right click on the &lt;strong&gt;pom.xml&lt;/strong&gt; file, select &lt;strong&gt;Maven&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Show Effective POM&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;If you are working on any non-trivial Java Project chances are that you are using many third party JAR files in your project to develop the application. These JAR files can be anything like a Framework or a Library. Examples include &lt;strong&gt;Junit&lt;/strong&gt;, &lt;strong&gt;Spring Framework&lt;/strong&gt;, &lt;strong&gt;Selenium&lt;/strong&gt; etc.&lt;/p&gt;

&lt;p&gt;These external libraries are called as &lt;strong&gt;dependencies&lt;/strong&gt;. Maven provides an excellent way to specify and manage dependencies in our &lt;strong&gt;pom.xml&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Without using Maven, you have to manually download the required JAR files from internet and add them one-by-one to the classpath of our project.&lt;/p&gt;

&lt;p&gt;Maven provides a &lt;strong&gt;dependencies&lt;/strong&gt; section inside the pom.xml where you can specify the information of the JAR you require in your project (&lt;strong&gt;groupId&lt;/strong&gt;, &lt;strong&gt;artifactId&lt;/strong&gt; and &lt;strong&gt;version&lt;/strong&gt;). Once you have specified the required libraries, maven will automatically download these dependencies into our project and adds them to the classpath of our project.&lt;/p&gt;

&lt;p&gt;Inside the &lt;strong&gt;dependencies&lt;/strong&gt; section you can define each individual dependency like below inside the &lt;strong&gt;pom.xml&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have defined &lt;strong&gt;Junit5&lt;/strong&gt; as a &lt;strong&gt;dependency&lt;/strong&gt; in our &lt;strong&gt;pom.xml&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Notice that I have mentioned the tags &lt;strong&gt;groupId&lt;/strong&gt;, &lt;strong&gt;artifactId&lt;/strong&gt; and &lt;strong&gt;version&lt;/strong&gt; to uniquely identify a dependency and by providing these values, Maven can automatically download these dependencies to our project.&lt;/p&gt;

&lt;p&gt;In IntelliJ, make sure to click on the Refresh button under the Maven Tab in the right side, to force IntelliJ to initiate the download of the dependencies. Check the below image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6qaDJuG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Dependencies-1.png%3Fresize%3D1536%252C725%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6qaDJuG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Dependencies-1.png%3Fresize%3D1536%252C725%26ssl%3D1" alt="Intellij Maven Dependencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this way, you can provide all the dependencies needed in your project inside the pom.xml and Maven will automatically download them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transitive-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Transitive Dependencies
&lt;/h3&gt;

&lt;p&gt;In the above example, you can observe that the &lt;strong&gt;junit-jupiter-engine&lt;/strong&gt; indeed depends on other JAR files like &lt;strong&gt;apiguardian-api&lt;/strong&gt;, &lt;strong&gt;junit-platform-engine&lt;/strong&gt; and &lt;strong&gt;junit-jupiter-api&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These JAR files are called &lt;strong&gt;Transitive Dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5sQZUAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Mavne-Dependencies-1.png%3Fw%3D1229%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5sQZUAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Mavne-Dependencies-1.png%3Fw%3D1229%26ssl%3D1" alt="Maven Transitive Dependencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#excluding-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Excluding Dependencies
&lt;/h3&gt;

&lt;p&gt;There are some instances where we will have some conflicts between the project dependencies and the transitive dependencies, at that time we can manually exclude the transitive dependency we don’t need.&lt;/p&gt;

&lt;p&gt;For example, if you are developing your application using Spring Boot, there is a dependency called &lt;strong&gt;spring-boot-starter-test&lt;/strong&gt; which will provide all the dependencies needed to test the Spring Boot applications.&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;spring-boot-starter-test&lt;/strong&gt; dependency contains &lt;strong&gt;Junit 4&lt;/strong&gt; as the transitive dependency, as we are already using &lt;strong&gt;Junit 5&lt;/strong&gt; we can exclude the transitive dependency like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.6.RELEASE&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The newer Spring Boot versions comes with JUnit 5 dependency, I purposely used the old version &lt;strong&gt;2.1.6.RELEASE&lt;/strong&gt; as an example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#snapshot-and-release-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  SNAPSHOT and RELEASE dependencies
&lt;/h3&gt;

&lt;p&gt;A dependency can be categorized into two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SNAPSHOT&lt;/li&gt;
&lt;li&gt;RELEASE
A Snapshot Dependency resembles that the project version is under development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are working on a Java project in a team, chances are that you are following some kind of iterative process where you go through the phases of development and then release the software at the end of the phase.&lt;/p&gt;

&lt;p&gt;When the project is under development we generally use the &lt;strong&gt;SNAPSHOT&lt;/strong&gt; dependencies, which looks something like &lt;strong&gt;1.0-SNAPSHOT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the software is ready for release, we generally create a RELEASE version which looks like &lt;strong&gt;1.0.RELEASE&lt;/strong&gt; (ex: &lt;strong&gt;Spring Boot Starter Test dependency&lt;/strong&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.6.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;exclusions&amp;gt;
        &amp;lt;exclusion&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;/exclusion&amp;gt;
    &amp;lt;/exclusions&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dependency-scopes" class="anchor"&gt;
  &lt;/a&gt;
  Dependency Scopes
&lt;/h3&gt;

&lt;p&gt;Each Maven Dependency can be categorized 6 different scopes.&lt;/p&gt;

&lt;p&gt;Here are the list of scopes available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;compile&lt;/strong&gt;: This is the default scope if none is specified. Compile time dependencies are available in classpath of the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;provided&lt;/strong&gt;: Similar to &lt;strong&gt;compile&lt;/strong&gt; scope, but indicates that the JDK or the underlying container will provide the dependency at run-time. The dependency will be available at compile time, but not packaged into the artifact.
An example of the usage is the &lt;strong&gt;javax.servlet-api&lt;/strong&gt; dependency&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;runtime&lt;/strong&gt;: The dependencies defined with this scope will be only available at runtime but not at compile time.
An example of the usage:
Imagine if you are using MySQL Driver inside your project, you can add the dependency with scope as runtime, to ensure that the JDBC API abstraction is used instead of MySQL Driver API during implementation.
If the source code includes any classes which is part of the MySQL JDBC API, then the code wont compile as the dependency is unavailable at compile time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;test&lt;/strong&gt;: Dependencies are only available at the time of running the tests, typical examples include Junit and TestNG&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;system&lt;/strong&gt;: It’s similar to the provided scope, but only difference is we need to explicitly mention where can the dependency be found in the system, using the &lt;strong&gt;systemPath&lt;/strong&gt; tag:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;systemPath&amp;gt;${basedir}/lib/some-dependency.jar&amp;lt;/systemPath&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repositories" class="anchor"&gt;
  &lt;/a&gt;
  Repositories
&lt;/h2&gt;

&lt;p&gt;In the previous section, we saw how Maven manages and automatically downloads the dependencies.&lt;/p&gt;

&lt;p&gt;These dependencies, are stored inside a special directory called &lt;strong&gt;Repository&lt;/strong&gt;. There are basically 2 kinds of repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Local Repository&lt;/strong&gt;
A Local Repository is a directory on the machine where the Maven is running.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default location for the Local Repository is /.m2&lt;/p&gt;

&lt;p&gt;In Windows, it looks like:&lt;br&gt;
&lt;strong&gt;C:\Users&amp;lt;user-name&amp;gt;.m2\repository&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Remote Repository&lt;/strong&gt;
A Remote Repository is a web-site where we can download Maven Dependencies. This can be a repository provided by Maven (repo.maven.org) or a custom repository setup inside an organization using software like &lt;a href="https://jfrog.com/artifactory/"&gt;Artifactory&lt;/a&gt; or &lt;a href="https://www.sonatype.com/nexus/repository-pro"&gt;Nexus&lt;/a&gt;.
Now that we saw different types of repositories, let’s see how Maven Resolves the dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s see how Maven Resolves the dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41qRWRi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Repositories.png%3Fw%3D631%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41qRWRi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Repositories.png%3Fw%3D631%26ssl%3D1" alt="Maven Dependency Resolution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you define a dependency defined inside the &lt;strong&gt;pom.xml&lt;/strong&gt; file, Maven first checks whether the dependency is already present in the &lt;strong&gt;Local Repository&lt;/strong&gt; or not.&lt;/li&gt;
&lt;li&gt;If it is not, then it tries to connect to the &lt;strong&gt;Remote Repository&lt;/strong&gt;, (Ex: &lt;strong&gt;&lt;a href="https://repo.maven.org"&gt;https://repo.maven.org&lt;/a&gt;&lt;/strong&gt;) and tries to download the dependencies, and store them inside the &lt;strong&gt;Local Repository&lt;/strong&gt;.
We can define the &lt;strong&gt;Remote Repository&lt;/strong&gt; in our pom.xml like below:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;repositories&amp;gt;
  &amp;lt;repository&amp;gt;
    &amp;lt;id&amp;gt;my-internal-site&amp;lt;/id&amp;gt;
    &amp;lt;url&amp;gt;http://myserver/repo&amp;lt;/url&amp;gt;
  &amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#snapshot-and-release-version-handling" class="anchor"&gt;
  &lt;/a&gt;
  Snapshot and Release Version Handling
&lt;/h3&gt;

&lt;p&gt;In the previous section, we learned that Maven first checks the &lt;strong&gt;Local Repository&lt;/strong&gt; before downloading a dependency from &lt;strong&gt;Remote Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When dealing with &lt;strong&gt;SNAPSHOT&lt;/strong&gt; dependencies Maven &lt;strong&gt;periodically&lt;/strong&gt; downloads the dependency from &lt;strong&gt;Remote Repository&lt;/strong&gt; even though the dependency exists in &lt;strong&gt;Local Repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is because &lt;strong&gt;SNAPSHOT&lt;/strong&gt; dependencies are under heavy development, and are subjected to change frequently.&lt;/p&gt;

&lt;p&gt;You can change this behavior by adding a &lt;strong&gt;&lt;/strong&gt; section inside the &lt;strong&gt;repositories&lt;/strong&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;repositories&amp;gt;
  &amp;lt;repository&amp;gt;
    &amp;lt;id&amp;gt;my-internal-site&amp;lt;/id&amp;gt;
    &amp;lt;url&amp;gt;http://myserver/repo&amp;lt;/url&amp;gt;
    &amp;lt;snapshots&amp;gt;
        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;updatePolicy&amp;gt;XXX&amp;lt;/updatePolicy&amp;gt;
    &amp;lt;/snapshots&amp;gt;
  &amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The value XXX inside the &lt;strong&gt;updatePolicy&lt;/strong&gt; can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;always&lt;/strong&gt;: Maven always checks for a latest version&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;daily&lt;/strong&gt;: This is the default value, as the name suggests it downloads the version once every day on the first run.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;interval:XXX&lt;/strong&gt;: Checks every XXX minutes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;never&lt;/strong&gt;: Never checks for the updates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;RELEASE&lt;/strong&gt; versions on the other hand are more stable, and follow the usual dependency resolution.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#maven-build-lifecycle" class="anchor"&gt;
  &lt;/a&gt;
  Maven Build Lifecycle
&lt;/h1&gt;

&lt;p&gt;Till now we learned about the Core Concepts of Maven, now it’s time to dive deep and understand how Maven builds our Java Project.&lt;/p&gt;

&lt;p&gt;Maven follows a &lt;strong&gt;Build Lifecycle&lt;/strong&gt; to well… build our project. &lt;/p&gt;

&lt;p&gt;This Lifecycle is divided into 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default&lt;/li&gt;
&lt;li&gt;clean&lt;/li&gt;
&lt;li&gt;site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each Lifecycle is independent of each other and they can be executed together.&lt;/p&gt;

&lt;p&gt;The default life cycle is divided into different phases like below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;validate&lt;/strong&gt; – verifies whether the pom.xml file is valid or not&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compile&lt;/strong&gt; – compiles the source code inside the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;test&lt;/strong&gt; – runs unit-tests inside the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;package&lt;/strong&gt; – packages the source code into an artifact (ZIP, JAR, WAR or EAR)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;integration-test&lt;/strong&gt;– executes tests marked as Integration Tests&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;verify&lt;/strong&gt; – checks whether the created package is valid or not.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;install&lt;/strong&gt; – installs the created package into our Local Repository&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;deploy&lt;/strong&gt; – deploys the created package to the Remote Repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;clean&lt;/strong&gt; lifecycle is mainly responsible to clean the .class and meta-data generated by the above build phases.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;site&lt;/strong&gt; lifecycle phase is responsible to generate Java Documentation.&lt;/p&gt;

&lt;p&gt;All 3 lifecycles also contains some additional phases, which I am not going to cover in this tutorial, if you are interested you can refer to the &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#lifecycle-reference"&gt;Maven Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#plugins-and-goals" class="anchor"&gt;
  &lt;/a&gt;
  Plugins and Goals
&lt;/h1&gt;

&lt;p&gt;To be able to execute these Lifecycle Phases, Maven provides us with &lt;strong&gt;Plugins&lt;/strong&gt; to perform each task.&lt;/p&gt;

&lt;p&gt;Each plugin is associated with a particular &lt;strong&gt;Goal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s have a look at different Plugins and the associated Goals:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maven-compile-plugin" class="anchor"&gt;
  &lt;/a&gt;
  Maven Compile Plugin
&lt;/h2&gt;

&lt;p&gt;The Maven Compile Plugin is responsible to compile our Java files into the .class files. It’s equivalent of running &lt;strong&gt;javac &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This plugin enables the &lt;strong&gt;compile&lt;/strong&gt; phase of the default lifecycle.&lt;/p&gt;

&lt;p&gt;You can add this plugin to your project by adding the below section to your &lt;strong&gt;pom.xml&lt;/strong&gt; file under the &lt;strong&gt;dependencies&lt;/strong&gt; &lt;br&gt;
section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At the time of writing this tutorial, &lt;strong&gt;Maven Compiler Plugin&lt;/strong&gt; is at version &lt;strong&gt;3.8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After adding the plugin to the project, you can activate the &lt;strong&gt;compile&lt;/strong&gt; phase, by typing the below command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn compiler:compile
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-cli) @ maven-project ---
[INFO] Nothing to compile - all classes are up to date
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.729 s
[INFO] Finished at: 2020-12-04T20:16:23+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above command the &lt;strong&gt;compiler&lt;/strong&gt; is the name of the plugin and &lt;strong&gt;compile&lt;/strong&gt; is the goal which triggers the lifecycle phase – compile&lt;/p&gt;

&lt;p&gt;You can already see the message – &lt;strong&gt;“Nothing to compile – all classes are up to date”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As there are no Java Files in our project, there is nothing to compile, so let’s create a simple &lt;strong&gt;HelloWorld.java&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you try to compile again, you can see the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn compiler:compile
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-cli) @ maven-project ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\target\classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.123 s
[INFO] Finished at: 2020-12-04T20:14:55+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can see the generated class files under the target folder which resides just under the project root folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9KEPpMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Target-Folder.png%3Fw%3D464%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9KEPpMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Target-Folder.png%3Fw%3D464%26ssl%3D1" alt="Maven Compile Folder Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have some Test files, those are also compiled using the &lt;strong&gt;Compiler Plugin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To demonstrate that let’s create the below Test class under the src/test/java folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class HelloWorldTest {
    public static void main(String[] args) {
        HelloWorld helloWorld = new HelloWorld();
        System.out.println(helloWorld.say("Hi"));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here is how you can compile the test classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn compiler:testCompile
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-cli) @ maven-project ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\target\test-classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.319 s
[INFO] Finished at: 2020-12-04T20:23:59+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see that a change has been detected by the &lt;strong&gt;Maven Compiler Plugin&lt;/strong&gt; and it has compiled our Test classes to the &lt;strong&gt;target/test-classes&lt;/strong&gt; folder&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOOB9hi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Target-Folder-with-Test-Classes.png%3Fw%3D454%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOOB9hi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Target-Folder-with-Test-Classes.png%3Fw%3D454%26ssl%3D1" alt="Maven Test Compile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we are using IntelliJ, we can also use it to run the compilation, by clicking on the &lt;strong&gt;compile&lt;/strong&gt; button under the &lt;strong&gt;LifeCycle&lt;/strong&gt; dropdown as you see in the below image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGqcvrEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Intellij-Compile-Plugin.png%3Fw%3D616%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGqcvrEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Intellij-Compile-Plugin.png%3Fw%3D616%26ssl%3D1" alt="Maven Intellij Lifecycle phases"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you run the &lt;strong&gt;compile&lt;/strong&gt; option you may see the below error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[INFO] Compiling 1 source file to F:\maven-project\target\classes
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] Source option 6 is no longer supported. Use 7 or later.
[ERROR] Target option 6 is no longer supported. Use 7 or later.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is because, by default the &lt;strong&gt;Source&lt;/strong&gt; and &lt;strong&gt;Target&lt;/strong&gt; Compiler Version is set to 1.5 in IntelliJ Configuration. You can add the below &lt;strong&gt;configuration&lt;/strong&gt; to the compiler plugin to override this settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;source&amp;gt;15&amp;lt;/source&amp;gt;
                &amp;lt;target&amp;gt;15&amp;lt;/target&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can pass many customized option to the Maven Compiler Plugin based on your needs, you can find the examples of the configuration in the &lt;a href="https://maven.apache.org/plugins/maven-compiler-plugin/index.html"&gt;Apache Maven Compiler Plugin&lt;/a&gt; website&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maven-surefire-plugin" class="anchor"&gt;
  &lt;/a&gt;
  Maven Surefire Plugin
&lt;/h2&gt;

&lt;p&gt;Using &lt;strong&gt;Surefire Plugin&lt;/strong&gt;, we can run the tests inside our project by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn test
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maven-project ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ maven-project ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maven-project ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory F:\maven-project\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ maven-project ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maven-project ---
[INFO]
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running HelloWorldTest
Hi
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 s - in HelloWorldTest
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  4.797 s
[INFO] Finished at: 2020-12-04T20:54:49+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that the HelloWorldTest.java file was executed successfully, and the you can also see how many Tests are executed successfully.&lt;/p&gt;

&lt;p&gt;The Surefire Plugin generates Text and XML reports under the &lt;strong&gt;target/surefire-reports&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3BW_avT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-SureFire-Reports.png%3Fw%3D830%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3BW_avT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-SureFire-Reports.png%3Fw%3D830%26ssl%3D1" alt="Maven Tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar to &lt;strong&gt;Compiler Plugin&lt;/strong&gt;, you can also configure Surefire Plugin based on your needs.&lt;/p&gt;

&lt;p&gt;Surefire Plugin by default includes all tests, if you have a bunch of tests, you can manually exclude some tests to be executed using below configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.22.2&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;excludes&amp;gt;HelloWorldTest.java&amp;lt;/excludes&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And if you run the &lt;strong&gt;mvn test&lt;/strong&gt; command now, you can see that no tests are executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn test
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maven-project ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ maven-project ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maven-project ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory F:\maven-project\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ maven-project ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maven-project ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.043 s
[INFO] Finished at: 2020-12-04T21:00:09+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#maven-install-plugin" class="anchor"&gt;
  &lt;/a&gt;
  Maven Install Plugin
&lt;/h2&gt;

&lt;p&gt;This is used to package our source code into an artifact of our choice like a JAR and install it to our &lt;strong&gt;Local Repository&lt;/strong&gt; which is &lt;strong&gt;/.m2/repository&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;You can configure Maven Install Plugin by adding the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-install-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.5.2&amp;lt;/version&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can run the &lt;strong&gt;install&lt;/strong&gt; phase of the lifecycle by typing the below command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn install
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maven-project ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ maven-project ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ maven-project ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory F:\maven-project\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ maven-project ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ maven-project ---
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ maven-project ---
[INFO] Building jar: F:\maven-project\target\maven-project-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ maven-project ---
[INFO] Installing F:\maven-project\target\maven-project-1.0-SNAPSHOT.jar to C:\Users\sai\.m2\repository\org\example\maven-project\1.0-SNAPSHOT\maven-project-1.0-SNAPSHOT.jar
[INFO] Installing F:\maven-project\pom.xml to C:\Users\sai\.m2\repository\org\example\maven-project\1.0-SNAPSHOT\maven-project-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.236 s
[INFO] Finished at: 2020-12-04T21:10:49+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By checking the above output, you can see that the install phase includes also the previous phases in the lifecycle, so as part of this phase maven:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;validates our pom.xml (&lt;strong&gt;validate&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;compiles our source code (&lt;strong&gt;compile&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;executes our tests (&lt;strong&gt;test&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;packages our source code into JAR (&lt;strong&gt;package&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;installs the JAR into our local repository (&lt;strong&gt;install&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the JAR file in the below screenshot under the &lt;strong&gt;target&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFfeMcck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Intellij-Install-Plugin.png%3Fw%3D759%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFfeMcck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Intellij-Install-Plugin.png%3Fw%3D759%26ssl%3D1" alt="Maven Install Folder Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maven-deploy-plugin" class="anchor"&gt;
  &lt;/a&gt;
  Maven Deploy Plugin
&lt;/h2&gt;

&lt;p&gt;The Maven Deploy Plugin will deploy the artifact into a remote repository. The deploy goal of the plugin is associated with the &lt;strong&gt;deploy&lt;/strong&gt; phase of the build lifecycle.&lt;/p&gt;

&lt;p&gt;The plugin can be configured like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
   &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;maven-deploy-plugin&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;2.8.2&amp;lt;/version&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Before running the &lt;strong&gt;deploy&lt;/strong&gt; phase of the lifecycle, we have to make sure that the remote repository details are configured inside our project.&lt;/p&gt;

&lt;p&gt;We can configure this details inside the &lt;strong&gt;distributionManagement&lt;/strong&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;distributionManagement&amp;gt;
    &amp;lt;repository&amp;gt;
        &amp;lt;id&amp;gt;test-distribution&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;distro name&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;http://distrourl.com&amp;lt;/url&amp;gt;
    &amp;lt;/repository&amp;gt;
&amp;lt;/distributionManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To be able to connect to the remote repository, maven needs access to the credentials, which can be configured inside a special file called as &lt;strong&gt;settings.xml&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;This file is usually configured inside the &lt;strong&gt;/.m2/&lt;/strong&gt; folder, which looks like something below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd"&amp;gt;
    &amp;lt;servers&amp;gt;
        &amp;lt;server&amp;gt;
            &amp;lt;id&amp;gt;test-distribution&amp;lt;/id&amp;gt;
            &amp;lt;username&amp;gt;my_username&amp;lt;/username&amp;gt;
            &amp;lt;password&amp;gt;my_password&amp;lt;/password&amp;gt;
        &amp;lt;/server&amp;gt;
    &amp;lt;/servers&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Maven also provides us a way to encrypt the credentials inside the &lt;strong&gt;settings.xml&lt;/strong&gt; file, you can read about this here&lt;/p&gt;

&lt;p&gt;You can run the &lt;strong&gt;deploy&lt;/strong&gt; goal using the following command:&lt;br&gt;
&lt;code&gt;$ mvn deploy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you run this command, you will notice that it will run all the lifecycle phases up until deploy.&lt;/p&gt;

&lt;p&gt;Although if you run this command in the example project, it will fail because the Remote Repository Details are invalid.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#maven-clean-plugin" class="anchor"&gt;
  &lt;/a&gt;
  Maven Clean Plugin
&lt;/h2&gt;

&lt;p&gt;Another important plugin in Maven is the &lt;strong&gt;Maven Clean Plugin&lt;/strong&gt;, you saw that when running the above lifecycle phases, the generated files are stored under a folder called &lt;strong&gt;target&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Usually when building our source code we need to start of as a clean slate so that there are no inconsistencies in the generated class files or JAR.&lt;/p&gt;

&lt;p&gt;For this reason we have the &lt;strong&gt;clean&lt;/strong&gt; phase where we will delete all the contents inside the &lt;strong&gt;target&lt;/strong&gt; folder. You can execute this phase by typing the below commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn clean
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maven-project ---
[INFO] Deleting F:\maven-project\target
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.204 s
[INFO] Finished at: 2020-12-04T21:19:12+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that the target folder under our project is deleted successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-maven-plugins" class="anchor"&gt;
  &lt;/a&gt;
  Other Maven Plugins
&lt;/h2&gt;

&lt;p&gt;There are many other plugins in Maven world, to execute other phases in the Maven Build Lifecycle, you can check them out &lt;a href="https://maven.apache.org/plugins/index.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#maven-multi-module-projects" class="anchor"&gt;
  &lt;/a&gt;
  Maven Multi Module Projects
&lt;/h1&gt;

&lt;p&gt;Till now we saw the Core Concepts of Maven, now it’s time to dive deep into some advanced concepts.&lt;/p&gt;

&lt;p&gt;In the real world where we are building some non-trivial projects, the source code is going to be modularized (hopefully) and is divided into different sub projects.&lt;/p&gt;

&lt;p&gt;To manage this effectively, Maven provides us Multi Module Projects where you can have nest different projects inside each other. We are basically creating a parent-child relationship between different Maven projects.&lt;/p&gt;

&lt;p&gt;Basically, we have a &lt;strong&gt;Parent Project&lt;/strong&gt; (Parent POM) which contains different &lt;strong&gt;sub-projects&lt;/strong&gt; (&lt;strong&gt;sub-modules&lt;/strong&gt;), each of which is again a normal Maven Project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVGiR-lV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Multi-Module-Project.png%3Fw%3D506%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVGiR-lV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Multi-Module-Project.png%3Fw%3D506%26ssl%3D1" alt="Multi Module Project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Parent POM&lt;/strong&gt; usually encapsulates other child’s and that’s why its packaged as a &lt;strong&gt;POM&lt;/strong&gt; instead of usual packaing format’s like &lt;strong&gt;JAR&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you recall the section &lt;strong&gt;Project Object Model&lt;/strong&gt; , we discussed about &lt;strong&gt;Super POM&lt;/strong&gt; which is basically a kind of &lt;strong&gt;Parent POM&lt;/strong&gt; which encapsulates default settings configured by Maven for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-multi-module-project-using-intellij" class="anchor"&gt;
  &lt;/a&gt;
  Creating Multi Module Project using IntelliJ
&lt;/h2&gt;

&lt;p&gt;We will see how to generate Multi Module Projects using our IntelliJ IDE.&lt;/p&gt;

&lt;p&gt;To create the project, first right click on the project root folder and select &lt;strong&gt;New&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Module&lt;/strong&gt; and click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9mtGR0Z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Child-Project-1.png%3Fw%3D1061%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mtGR0Z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Child-Project-1.png%3Fw%3D1061%26ssl%3D1" alt="Maven Module Coordinates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give a name to the child project and click on &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhsLwXck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Multi-Module-Project-Structure.png%3Fw%3D730%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhsLwXck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Multi-Module-Project-Structure.png%3Fw%3D730%26ssl%3D1" alt="Maven Module Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the new project structure in the above picture after we created the &lt;strong&gt;child project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now if you open the &lt;strong&gt;pom.xml&lt;/strong&gt; under the root folder, you can observe the following tags which are added by creating the maven module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;modules&amp;gt;
        &amp;lt;module&amp;gt;child-project-1&amp;lt;/module&amp;gt;
    &amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can create multiple projects in the same way and you can see all the modules will be listed one-by-one under the &lt;strong&gt;modules&lt;/strong&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;modules&amp;gt;
        &amp;lt;module&amp;gt;child-project-1&amp;lt;/module&amp;gt;
        &amp;lt;module&amp;gt;child-project-2&amp;lt;/module&amp;gt;
        &amp;lt;module&amp;gt;child-project-3&amp;lt;/module&amp;gt;
    &amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As we create these 3 modules, having the &lt;strong&gt;src&lt;/strong&gt; folder under the root project folder doesn’t make much sense, so let’s copy and paste this folder onto other child-projects, so that we have some code configured inside these modules.&lt;/p&gt;

&lt;p&gt;This is how our project structure now looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sv5PtmRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Multi-Module-Project-Structure-with-Code.png%3Fw%3D944%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sv5PtmRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/programmingtechie.com/wp-content/uploads/2020/12/Maven-Multi-Module-Project-Structure-with-Code.png%3Fw%3D944%26ssl%3D1" alt="Maven Multi Module Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you check the &lt;strong&gt;pom.xml&lt;/strong&gt; of &lt;strong&gt;child-project-1&lt;/strong&gt;,&lt;strong&gt;child-project-2&lt;/strong&gt; and &lt;strong&gt;child-project-3&lt;/strong&gt;. You can see that the root project is configured as a parent project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;parent&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;artifactId&amp;gt;child-project-1&amp;lt;/artifactId&amp;gt;


&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you can build all the projects at once by running the &lt;strong&gt;mvn install&lt;/strong&gt; under the Parent Project, and Maven scans through all the POMS and builds all of them one-by-one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn install
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO]
[INFO] maven-project                                                      [pom]
[INFO] child-project-1                                                    [jar]
[INFO] child-project-2                                                    [jar]
[INFO] child-project-3                                                    [jar]
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT                                [1/4]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ maven-project ---
[INFO] Installing F:\maven-project\pom.xml to C:\Users\subra\.m2\repository\org\example\maven-project\1.0-SNAPSHOT\maven-project-1.0-SNAPSHOT.pom
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-1 &amp;gt;---------------------
[INFO] Building child-project-1 1.0-SNAPSHOT                              [2/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ child-project-1 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ child-project-1 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-1\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ child-project-1 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory F:\maven-project\child-project-1\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ child-project-1 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-1\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ child-project-1 ---
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ child-project-1 ---
[INFO] Building jar: F:\maven-project\child-project-1\target\child-project-1-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ child-project-1 ---
[INFO] Installing F:\maven-project\child-project-1\target\child-project-1-1.0-SNAPSHOT.jar to C:\Users\subra\.m2\repository\org\example\child-project-1\1.0-SNAPSHOT\child-project-1-1.0-SNAPSHOT.jar
[INFO] Installing F:\maven-project\child-project-1\pom.xml to C:\Users\subra\.m2\repository\org\example\child-project-1\1.0-SNAPSHOT\child-project-1-1.0-SNAPSHOT.pom
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-2 &amp;gt;---------------------
[INFO] Building child-project-2 1.0-SNAPSHOT                              [3/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ child-project-2 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ child-project-2 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-2\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ child-project-2 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory F:\maven-project\child-project-2\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ child-project-2 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-2\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ child-project-2 ---
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ child-project-2 ---
[INFO] Building jar: F:\maven-project\child-project-2\target\child-project-2-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ child-project-2 ---
[INFO] Installing F:\maven-project\child-project-2\target\child-project-2-1.0-SNAPSHOT.jar to C:\Users\subra\.m2\repository\org\example\child-project-2\1.0-SNAPSHOT\child-project-2-1.0-SNAPSHOT.jar
[INFO] Installing F:\maven-project\child-project-2\pom.xml to C:\Users\subra\.m2\repository\org\example\child-project-2\1.0-SNAPSHOT\child-project-2-1.0-SNAPSHOT.pom
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-3 &amp;gt;---------------------
[INFO] Building child-project-3 1.0-SNAPSHOT                              [4/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ child-project-3 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ child-project-3 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-3\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ child-project-3 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory F:\maven-project\child-project-3\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ child-project-3 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-3\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ child-project-3 ---
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ child-project-3 ---
[INFO] Building jar: F:\maven-project\child-project-3\target\child-project-3-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ child-project-3 ---
[INFO] Installing F:\maven-project\child-project-3\target\child-project-3-1.0-SNAPSHOT.jar to C:\Users\subra\.m2\repository\org\example\child-project-3\1.0-SNAPSHOT\child-project-3-1.0-SNAPSHOT.jar
[INFO] Installing F:\maven-project\child-project-3\pom.xml to C:\Users\subra\.m2\repository\org\example\child-project-3\1.0-SNAPSHOT\child-project-3-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for maven-project 1.0-SNAPSHOT:
[INFO]
[INFO] maven-project ...................................... SUCCESS [  0.252 s]
[INFO] child-project-1 .................................... SUCCESS [  1.534 s]
[INFO] child-project-2 .................................... SUCCESS [  0.430 s]
[INFO] child-project-3 .................................... SUCCESS [  0.351 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.699 s
[INFO] Finished at: 2020-12-04T21:58:10+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that Maven built all the projects and provided us a nice report of the &lt;strong&gt;Build Status&lt;/strong&gt; of each project.&lt;/p&gt;

&lt;p&gt;Maven uses something called as a &lt;strong&gt;Reactor&lt;/strong&gt; which is responsible to scan the whole project and identify the parent and child maven projects. If there are any dependencies, then Reactor makes sure to execute the projects in the required order.&lt;/p&gt;

&lt;p&gt;For example, if &lt;strong&gt;child-project-2&lt;/strong&gt; is dependent on &lt;strong&gt;child-project-3&lt;/strong&gt; , then Maven Reactor makes sure to first build &lt;strong&gt;child-project-3&lt;/strong&gt; and then &lt;strong&gt;child-project-2&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-dependencies-inside-maven-multi-module-project" class="anchor"&gt;
  &lt;/a&gt;
  Managing Dependencies inside Maven Multi Module Project
&lt;/h2&gt;

&lt;p&gt;When you are working with Multiple Maven Modules, you may be working with different dependencies in different modules, and chances are that you may be using similar dependencies in multiple modules.&lt;/p&gt;

&lt;p&gt;Maven provides us a way to effectively manage the dependencies in your project by allowing us to define the dependencies in centralized location (&lt;strong&gt;parent project&lt;/strong&gt;) and use those dependencies across the different child projects.&lt;/p&gt;

&lt;p&gt;This minimizes the dependency version mismatch across multiple projects, as we have a single place we can manage all the dependencies and its versions.&lt;/p&gt;

&lt;p&gt;Let’s see how to do that in our example project.&lt;/p&gt;

&lt;p&gt;I am going to move all the dependencies which are defined inside the parent project into the &lt;strong&gt;dependencyManagement&lt;/strong&gt; section, like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;modules&amp;gt;
        &amp;lt;module&amp;gt;child-project-1&amp;lt;/module&amp;gt;
        &amp;lt;module&amp;gt;child-project-2&amp;lt;/module&amp;gt;
        &amp;lt;module&amp;gt;child-project-3&amp;lt;/module&amp;gt;
    &amp;lt;/modules&amp;gt;

    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.1.6.RELEASE&amp;lt;/version&amp;gt;
                &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                &amp;lt;exclusions&amp;gt;
                    &amp;lt;exclusion&amp;gt;
                        &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
                        &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
                    &amp;lt;/exclusion&amp;gt;
                &amp;lt;/exclusions&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;11&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;11&amp;lt;/target&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.22.2&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;excludes&amp;gt;HelloWorldTest.java&amp;lt;/excludes&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-install-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.5.2&amp;lt;/version&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The change in the pom.xml is minor, we just moved the dependencies under the &lt;strong&gt;dependencyManagement&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;Now if you analyze the dependencies under the &lt;strong&gt;child-project-1&lt;/strong&gt; you can see that it’s empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mvn dependency:tree
[INFO] Scanning for projects...
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-1 &amp;gt;---------------------
[INFO] Building child-project-1 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ child-project-1 ---
[INFO] org.example:child-project-1:jar:1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.871 s
[INFO] Finished at: 2020-12-05T20:23:59+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is because we moved all the dependencies inside the Parent POM into &lt;strong&gt;dependencyManagement&lt;/strong&gt; section, now to access any dependencies the &lt;strong&gt;Child Projects&lt;/strong&gt; should define them manually inside their &lt;strong&gt;pom.xml&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this way, the child projects can have only the dependencies they need inside the &lt;strong&gt;pom.xml&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s go ahead and add the &lt;strong&gt;junit-jupiter&lt;/strong&gt; dependencies inside the &lt;strong&gt;child-project-1&lt;/strong&gt; and see what happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;parent&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;artifactId&amp;gt;child-project-1&amp;lt;/artifactId&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn dependency:tree
[INFO] Scanning for projects...
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-1 &amp;gt;---------------------
[INFO] Building child-project-1 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ child-project-1 ---
[INFO] org.example:child-project-1:jar:1.0-SNAPSHOT
[INFO] \- org.junit.jupiter:junit-jupiter-engine:jar:5.5.2:compile
[INFO]    +- org.apiguardian:apiguardian-api:jar:1.1.0:compile
[INFO]    +- org.junit.platform:junit-platform-engine:jar:1.5.2:compile
[INFO]    |  +- org.opentest4j:opentest4j:jar:1.2.0:compile
[INFO]    |  \- org.junit.platform:junit-platform-commons:jar:1.5.2:compile
[INFO]    \- org.junit.jupiter:junit-jupiter-api:jar:5.5.2:compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.930 s
[INFO] Finished at: 2020-12-05T20:27:26+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can now see that the &lt;strong&gt;junit-jupiter&lt;/strong&gt; dependency is available inside the &lt;strong&gt;child-project-1&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-plugins-inside-maven-multi-module-project" class="anchor"&gt;
  &lt;/a&gt;
  Managing Plugins inside Maven Multi Module Project
&lt;/h2&gt;

&lt;p&gt;We can also manage Plugins inside our Maven Multi Module project, similar to the dependencies.&lt;/p&gt;

&lt;p&gt;To Manage Plugins, we have the &lt;strong&gt;pluginManagement&lt;/strong&gt; section inside the &lt;strong&gt;pom.xml&lt;/strong&gt; and each child project can chose the plugin it needs.&lt;/p&gt;

&lt;p&gt;This is how our parent &lt;strong&gt;pom.xml&lt;/strong&gt; looks like after introducing the &lt;strong&gt;pluginManagement&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-project&amp;lt;/artifactId&amp;gt;
    &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;modules&amp;gt;
        &amp;lt;module&amp;gt;child-project-1&amp;lt;/module&amp;gt;
        &amp;lt;module&amp;gt;child-project-2&amp;lt;/module&amp;gt;
        &amp;lt;module&amp;gt;child-project-3&amp;lt;/module&amp;gt;
    &amp;lt;/modules&amp;gt;

    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt;
            &amp;lt;/dependency&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.1.6.RELEASE&amp;lt;/version&amp;gt;
                &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                &amp;lt;exclusions&amp;gt;
                    &amp;lt;exclusion&amp;gt;
                        &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
                        &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
                    &amp;lt;/exclusion&amp;gt;
                &amp;lt;/exclusions&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;pluginManagement&amp;gt;
            &amp;lt;plugins&amp;gt;
                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
                    &amp;lt;configuration&amp;gt;
                        &amp;lt;source&amp;gt;11&amp;lt;/source&amp;gt;
                        &amp;lt;target&amp;gt;11&amp;lt;/target&amp;gt;
                    &amp;lt;/configuration&amp;gt;
                &amp;lt;/plugin&amp;gt;
                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;2.22.2&amp;lt;/version&amp;gt;
                    &amp;lt;configuration&amp;gt;
                        &amp;lt;excludes&amp;gt;HelloWorldTest.java&amp;lt;/excludes&amp;gt;
                    &amp;lt;/configuration&amp;gt;
                &amp;lt;/plugin&amp;gt;
                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;maven-install-plugin&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;2.5.2&amp;lt;/version&amp;gt;
                &amp;lt;/plugin&amp;gt;
            &amp;lt;/plugins&amp;gt;
        &amp;lt;/pluginManagement&amp;gt;
    &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#using-profiles" class="anchor"&gt;
  &lt;/a&gt;
  Using Profiles
&lt;/h1&gt;

&lt;p&gt;Profiles can be used in Maven to created customized build configurations. This means customizing the behavior of our builds based on specific conditions.&lt;/p&gt;

&lt;p&gt;For example: Sometimes we need to test whether the source code packaging is working correctly or not, in that case we can skip the test execution by activating the &lt;strong&gt;skip.tests&lt;/strong&gt; property like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;profile&amp;gt;
    &amp;lt;id&amp;gt;skip-tests&amp;lt;/id&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;maven.test.skip&amp;gt;true&amp;lt;/maven.test.skip&amp;gt;
    &amp;lt;/properties&amp;gt;
&amp;lt;/profile&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can try to run the build by specifying which profile to activate using the &lt;strong&gt;-P&lt;/strong&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mvn -Pskip-tests clean install
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO]
[INFO] maven-project                                                      [pom]
[INFO] child-project-1                                                    [jar]
[INFO] child-project-2                                                    [jar]
[INFO] child-project-3                                                    [jar]
[INFO]
[INFO] ---------------------&amp;lt; org.example:maven-project &amp;gt;----------------------
[INFO] Building maven-project 1.0-SNAPSHOT                                [1/4]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ maven-project ---
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ maven-project ---
[INFO] Installing F:\maven-project\pom.xml to C:\Users\subra\.m2\repository\org\example\maven-project\1.0-SNAPSHOT\maven-project-1.0-SNAPSHOT.pom
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-1 &amp;gt;---------------------
[INFO] Building child-project-1 1.0-SNAPSHOT                              [2/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ child-project-1 ---
[INFO] Deleting F:\maven-project\child-project-1\target
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ child-project-1 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ child-project-1 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-1\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ child-project-1 ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ child-project-1 ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ child-project-1 ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ child-project-1 ---
[INFO] Building jar: F:\maven-project\child-project-1\target\child-project-1-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ child-project-1 ---
[INFO] Installing F:\maven-project\child-project-1\target\child-project-1-1.0-SNAPSHOT.jar to C:\Users\subra\.m2\repository\org\example\child-project-1\1.0-SNAPSHOT\child-project-1-1.0-SNAPSHOT.jar
[INFO] Installing F:\maven-project\child-project-1\pom.xml to C:\Users\subra\.m2\repository\org\example\child-project-1\1.0-SNAPSHOT\child-project-1-1.0-SNAPSHOT.pom
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-2 &amp;gt;---------------------
[INFO] Building child-project-2 1.0-SNAPSHOT                              [3/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ child-project-2 ---
[INFO] Deleting F:\maven-project\child-project-2\target
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ child-project-2 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ child-project-2 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-2\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ child-project-2 ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ child-project-2 ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ child-project-2 ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ child-project-2 ---
[INFO] Building jar: F:\maven-project\child-project-2\target\child-project-2-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ child-project-2 ---
[INFO] Installing F:\maven-project\child-project-2\target\child-project-2-1.0-SNAPSHOT.jar to C:\Users\subra\.m2\repository\org\example\child-project-2\1.0-SNAPSHOT\child-project-2-1.0-SNAPSHOT.jar
[INFO] Installing F:\maven-project\child-project-2\pom.xml to C:\Users\subra\.m2\repository\org\example\child-project-2\1.0-SNAPSHOT\child-project-2-1.0-SNAPSHOT.pom
[INFO]
[INFO] --------------------&amp;lt; org.example:child-project-3 &amp;gt;---------------------
[INFO] Building child-project-3 1.0-SNAPSHOT                              [4/4]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ child-project-3 ---
[INFO] Deleting F:\maven-project\child-project-3\target
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ child-project-3 ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ child-project-3 ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to F:\maven-project\child-project-3\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ child-project-3 ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ child-project-3 ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ child-project-3 ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ child-project-3 ---
[INFO] Building jar: F:\maven-project\child-project-3\target\child-project-3-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ child-project-3 ---
[INFO] Installing F:\maven-project\child-project-3\target\child-project-3-1.0-SNAPSHOT.jar to C:\Users\subra\.m2\repository\org\example\child-project-3\1.0-SNAPSHOT\child-project-3-1.0-SNAPSHOT.jar
[INFO] Installing F:\maven-project\child-project-3\pom.xml to C:\Users\subra\.m2\repository\org\example\child-project-3\1.0-SNAPSHOT\child-project-3-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for maven-project 1.0-SNAPSHOT:
[INFO]
[INFO] maven-project ...................................... SUCCESS [  0.327 s]
[INFO] child-project-1 .................................... SUCCESS [  1.208 s]
[INFO] child-project-2 .................................... SUCCESS [  0.205 s]
[INFO] child-project-3 .................................... SUCCESS [  0.167 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.055 s
[INFO] Finished at: 2020-12-05T23:00:13+01:00
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you observe the logs carefully, you can see that the test-execution is skipped:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ child-project-3 ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ child-project-3 ---
[INFO] Building jar: F:\maven-project\child-project-3\target\child-project-3-1.0-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is just a simple usage of the profiles, you can configure multiple profiles in our project to customize the build behavior.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;So we came to the end of this tutorial, I hope this tutorial improved your understanding of Maven.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-like-this-article-please-make-sure-to-share-it-with-your-friends-and-colleagues-who-wants-to-learn-about-apache-maven-you-can-follow-me-through-my-blog-youtube-channel-and-twitter" class="anchor"&gt;
  &lt;/a&gt;
  If you like this article please make sure to share it with your friends and colleagues who wants to learn about Apache Maven. You can follow me through my &lt;a href="https://https://programmingtechie.com/"&gt;blog&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCD20RZV_WHQImisCW2QZwDw"&gt;Youtube Channel&lt;/a&gt; and &lt;a href="https://twitter.com/sai90_u"&gt;Twitter&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>java</category>
      <category>maven</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>25 Career Options if you don't like Coding</title>
      <author>Seema Saharan</author>
      <pubDate>Sat, 19 Dec 2020 21:13:35 +0000</pubDate>
      <link>https://dev.to/seema1711/25-career-options-if-you-don-t-like-coding-2ag4</link>
      <guid>https://dev.to/seema1711/25-career-options-if-you-don-t-like-coding-2ag4</guid>
      <description>&lt;p&gt;This is the world of technology, and almost everyone wants a bright career in tech, but what if you are not from a tech background, and you will be confused, and think that all the work in tech requires &lt;strong&gt;Coding&lt;/strong&gt;, but what if I tell you there are a lot of others fields to explore in tech that doesn't involve coding.&lt;br&gt;
Let me just start by sharing it all, and I will explain a little bit about each field, and if you find any of them interesting just start exploring all the resources on Google, and learn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-business-analyst" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Business Analyst&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGOHPVCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/37vu82bnmhasnne42ecl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGOHPVCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/37vu82bnmhasnne42ecl.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to Wikipedia, &lt;strong&gt;&lt;em&gt;A business analyst (BA) is a person who analyzes an organization or business domain (real or hypothetical) and documents its business, processes, or systems, assessing the business model or its integration with technology.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can get detailed information &lt;a href="https://www.guru99.com/introduction-business-analysis.html"&gt;here&lt;/a&gt;, like-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Different Business Analyst Role&lt;/li&gt;
&lt;li&gt;Skills of a Good Business Analyst&lt;/li&gt;
&lt;li&gt;Certifications&lt;/li&gt;
&lt;li&gt;Jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-operations-manager" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Operations Manager&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ij4cr3jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g6azumo8l1s4eisry4j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ij4cr3jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g6azumo8l1s4eisry4j6.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An operations manager is a key part of a management team and oversees high-level HR duties, such as attracting talent and setting training standards and hiring procedures. They also analyze and improve organizational processes, and work to improve quality, productivity, and efficiency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strong communication skills.&lt;/li&gt;
&lt;li&gt;Good motivational skills.&lt;/li&gt;
&lt;li&gt;Strong negotiation skills.&lt;/li&gt;
&lt;li&gt;Exceptional organizational skills.&lt;/li&gt;
&lt;li&gt;Awareness of internal and external customer needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-technical-recruiter-requires-technical-background" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Technical Recruiter&lt;/strong&gt; (requires technical background)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UlO_ZW4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jnasuum3y31fhbenir3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UlO_ZW4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jnasuum3y31fhbenir3h.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Technical Recruiter is responsible for all aspects of the sourcing and hiring of IT professionals to fill technical positions. A Technical Recruiter will work to identify and fill job openings, interview candidates, and keep records of applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technical knowledge to be able to talk to job prospects and understand qualifications.&lt;/li&gt;
&lt;li&gt;Strong social aptitude and ability to build relationships.&lt;/li&gt;
&lt;li&gt;Excellent interpersonal communication skills&lt;/li&gt;
&lt;li&gt;Negotiation skills &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-product-manager" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Product Manager&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjVo9ssm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ay03km4lg6ux4tvibhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjVo9ssm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9ay03km4lg6ux4tvibhj.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to Wikipedia, &lt;strong&gt;a product manager is a professional role that is responsible for the development of products for an organization, known as the practice of product management.&lt;/strong&gt; Product managers own the business strategy behind a product (both physical and digital products), specify its functional requirements, and generally manage the launch of features. They coordinate work done by many other functions (like software engineers, data scientists, and product designers) and are ultimately responsible for the business success of the product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Experience with Web site development&lt;/li&gt;
&lt;li&gt;Ability to operate in a high-energy, high-intensity, and rapidly evolving environment&lt;/li&gt;
&lt;li&gt;Project/change management experience implementing new ways of working&lt;/li&gt;
&lt;li&gt;Excellent communication and stakeholder engagement skills&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-project-manager" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Project Manager&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Mr0aQNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w28wrhjsoj1busxqdnib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Mr0aQNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w28wrhjsoj1busxqdnib.png" alt="5"&gt;&lt;/a&gt;&lt;br&gt;
A Project Manager is responsible for planning, overseeing, and leading projects from ideation through to completion. This is a senior role at an organization and requires interaction with a range of internal and external stakeholders, most often managing several moving project parts simultaneously. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Engineering&lt;/li&gt;
&lt;li&gt;IT or Computer Science&lt;/li&gt;
&lt;li&gt;Business or Business Administration&lt;/li&gt;
&lt;li&gt;Management&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-technical-writer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Technical Writer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ra6ndNRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3r5u14kx6q3yvw0xddky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ra6ndNRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3r5u14kx6q3yvw0xddky.png" alt="6"&gt;&lt;/a&gt;&lt;br&gt;
A technical writer is a professional information communicator whose task is to transfer information (knowledge) between two or more parties, through any medium that best facilitates the transfer and comprehension of the information. Technical writers research and create information through a variety of delivery media (electronic, printed, audio-visual, and even touch), such as online help, manuals, white papers, design specifications, project plans, and software test plans. With the rise of e-learning, technical writers are increasingly becoming involved with creating online training material. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technical communications&lt;/li&gt;
&lt;li&gt;Writing&lt;/li&gt;
&lt;li&gt;Ability to study and understand complex products or software&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-seosem-specialist" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. SEO/SEM Specialist&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_Dajrpx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u04fxz557rx6jhubo6lk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_Dajrpx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u04fxz557rx6jhubo6lk.png" alt="7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search Engine Marketing Specialists (SEO/SEM) are responsible for planning, implementing, and managing a company’s overall SEO strategy. They usually cover a wide variety of duties such as web marketing, web analytics, content strategy planning, link building, and keyword strategy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proven success in SEO&lt;/li&gt;
&lt;li&gt;Experience in web analytics, marketing, and business development&lt;/li&gt;
&lt;li&gt;Experience with A/B testing and other testing metrics&lt;/li&gt;
&lt;li&gt;Knowledge of HTML, CSS, JavaScript&lt;/li&gt;
&lt;li&gt;Ability to analyze data and provide evidence-based recommendations&lt;/li&gt;
&lt;li&gt;Sense of ownership and pride in your performance and its impact on the company’s success&lt;/li&gt;
&lt;li&gt;Critical thinker and problem-solving skills&lt;/li&gt;
&lt;li&gt;Team player&lt;/li&gt;
&lt;li&gt;Good time-management skills&lt;/li&gt;
&lt;li&gt;Great interpersonal and communication skills&lt;/li&gt;
&lt;li&gt;Degree in relevant quantitative fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-software-quality-tester" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Software Quality Tester&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eplVvC_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iqn4768zdw4msc6x15gi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eplVvC_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iqn4768zdw4msc6x15gi.png" alt="8"&gt;&lt;/a&gt;&lt;br&gt;
Software Testing is a process of verifying a computer system/program to decide whether it meets the specified requirements and produces the desired results. As a result, you identify bugs in software products/projects. &lt;/p&gt;

&lt;p&gt;Click &lt;a href="https://www.guru99.com/software-testing-career-complete-guide.html"&gt;here&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-data-analyst" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Data Analyst&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6mNBkHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ebl286xamzp0v9qt20dv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6mNBkHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ebl286xamzp0v9qt20dv.png" alt="9"&gt;&lt;/a&gt;&lt;br&gt;
A data analyst is someone who scrutinizes information using data analysis tools. The meaningful results they pull from the raw data help their employers or clients make important decisions by identifying various facts and trends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to work with stakeholders to assess potential risks&lt;/li&gt;
&lt;li&gt;Work experience as a data analyst or in a related field.&lt;/li&gt;
&lt;li&gt;Ability to analyze existing tools and databases and provide software solution recommendations&lt;/li&gt;
&lt;li&gt;Demonstrated experience in handling large data sets and relational databases&lt;/li&gt;
&lt;li&gt;High-level written and verbal communication skills. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-tech-support-specialist" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. Tech Support Specialist&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--081ckTqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/47pkcnqmuzsqzo4syujt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--081ckTqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/47pkcnqmuzsqzo4syujt.png" alt="10"&gt;&lt;/a&gt;&lt;br&gt;
The role of a Technical Support Specialist within an organization is to provide assistance and maintenance to all computer systems and hardware. Their work may include installing, configuring, and updating hardware and software, as well as fixing any issue related to the equipment that may come up on a daily basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extensive familiarity with Windows operating systems&lt;/li&gt;
&lt;li&gt;Minimum 1-year experience in information technology or technical support&lt;/li&gt;
&lt;li&gt;Working knowledge of security software options and functionality preferred&lt;/li&gt;
&lt;li&gt;CompTIA A+ certification a plus &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#11-system-administrator" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. System Administrator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHRBkZQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atn8mfkd9s8nyn9cbqk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHRBkZQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atn8mfkd9s8nyn9cbqk6.png" alt="11"&gt;&lt;/a&gt;&lt;br&gt;
According to Wikipedia, a system administrator, or sysadmin, is a person who is responsible for the upkeep, configuration, and reliable operation of computer systems; especially multi-user computers, such as servers. The system administrator seeks to ensure that the uptime, performance, resources, and security of the computers they manage meet the needs of the users, without exceeding a set budget when doing so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proven experience as a System Administrator, Network Administrator, or similar role&lt;/li&gt;
&lt;li&gt;Experience with databases, networks (LAN, WAN), and patch management&lt;/li&gt;
&lt;li&gt;Knowledge of system security (e.g. intrusion detection systems) and data backup/recovery&lt;/li&gt;
&lt;li&gt;Familiarity with various operating systems and platforms &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#12-user-experienceux-design" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;12. User Experience(UX) Design&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAQysY_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eej0h32lk1zadchofwes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAQysY_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eej0h32lk1zadchofwes.png" alt="12"&gt;&lt;/a&gt;&lt;br&gt;
User experience design is a concept that has many dimensions, and it includes a bunch of different disciplines — such as interaction design, information architecture, visual design, usability, and human-computer interaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proven experience as a UX Designer, UI Designer, or similar role&lt;/li&gt;
&lt;li&gt;Strong portfolio of design projects&lt;/li&gt;
&lt;li&gt;Background in project management and research&lt;/li&gt;
&lt;li&gt;Familiarity with interaction design and information architecture&lt;/li&gt;
&lt;li&gt;Excellent communication skills&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#13-user-interfaceui-designer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;13. User Interface(UI) Designer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf5svl1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q35f3we8z6o2tqph1uwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf5svl1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q35f3we8z6o2tqph1uwz.png" alt="13"&gt;&lt;/a&gt;&lt;br&gt;
UI designers are responsible for designing how a user interacts with a computer, in fact, they’re obsessed with human-computer interaction! Whether it’s a dashboard computer in a car, a mobile app, a video game, a website, or a virtual reality interface, UI designers are the ones that make these interactions possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge of wireframe tools (e.g. Wireframe.cc and InVision)&lt;/li&gt;
&lt;li&gt;Portfolio of design projects&lt;/li&gt;
&lt;li&gt;Up-to-date knowledge of design software like Adobe Illustrator and Photoshop&lt;/li&gt;
&lt;li&gt;Team spirit; strong communication skills to collaborate with various stakeholders &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#14-information-architect" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;14. Information Architect&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unvWpWDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ehkxouigattqc6308ltq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unvWpWDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ehkxouigattqc6308ltq.png" alt="14"&gt;&lt;/a&gt;&lt;br&gt;
According to Wikipedia, &lt;strong&gt;Information architecture (IA) is the structural design of shared information environments; the art and science of organizing and labeling websites, intranets, online communities and software to support usability and findability; and an emerging community of practice focused on bringing principles of design, architecture and information science to the digital landscape.[1] Typically, it involves a model or concept of information that is used and applied to activities that require explicit details of complex information systems. These activities include library systems and database development.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-Facing Communication.&lt;/li&gt;
&lt;li&gt;Understanding of User-Centered Design.&lt;/li&gt;
&lt;li&gt;Concept Testing.&lt;/li&gt;
&lt;li&gt;Critical Thinking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#15-mobile-designer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;15.  Mobile Designer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVa7ARxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cohsehr6alarxu862yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVa7ARxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cohsehr6alarxu862yk.png" alt="15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile designers can go by many names, including app designers, iOS designers, Android designers, and more. They usually work closely with user experience (UX) designers and user interface (UI) designers to apply their designs to mobile interfaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mobile User Interface Design. Probably the most important aspect of mobile app development is building a high-quality user interface (UI).&lt;/li&gt;
&lt;li&gt;Cross-Platform App Development. &lt;/li&gt;
&lt;li&gt;Backend Computing. &lt;/li&gt;
&lt;li&gt;Modern Language Programming Skills. &lt;/li&gt;
&lt;li&gt;Business Capability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#16-marketing-automation-manager" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;16. Marketing Automation Manager&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkNF3VDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eghb1wlegl2ma3u14mqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkNF3VDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eghb1wlegl2ma3u14mqw.png" alt="16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Creative Group Salary Guide defines the marketing automation manager as an individual who “administers marketing campaigns; tests and analyzes workflow, lead generation, lead nurturing and lead scoring; and identifies tactics for improvement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At least 3 to 5 years of marketing experience. &lt;/li&gt;
&lt;li&gt;Strategic thinker and hands-on executor. &lt;/li&gt;
&lt;li&gt;Solid writing skills and experience creating marketing content. &lt;/li&gt;
&lt;li&gt;Experience managing campaign execution across multiple channels.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#17-software-sales-representative" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;17. Software Sales Representative&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6Jx1iFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uoqnhh6qkk4kp72v6aw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6Jx1iFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uoqnhh6qkk4kp72v6aw5.png" alt="17"&gt;&lt;/a&gt;&lt;br&gt;
Responsible for the merchandising, distribution, and selling of computers, software, and peripherals.&lt;/p&gt;

&lt;p&gt;Read the full information &lt;a href="https://www.americasjobexchange.com/software-sales-representative-job-description"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-digital-marketing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;18. Digital Marketing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hewW36Hl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rqzrv3x89ip3hrnco6f5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hewW36Hl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rqzrv3x89ip3hrnco6f5.png" alt="18"&gt;&lt;/a&gt;&lt;br&gt;
Digital marketing is any form of marketing products or services that involves electronic devices. That's the reason it has been around for decades (because electronics have) and why it doesn't necessarily have anything to do with content marketing, Google ads, social media, or retargeting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to analyze data and draw insights. The growth of digital marketing has created endless amounts of data. &lt;/li&gt;
&lt;li&gt;Organization and project management skills. &lt;/li&gt;
&lt;li&gt;Knowledge and appreciation of automation. &lt;/li&gt;
&lt;li&gt;Voice search SEO. &lt;/li&gt;
&lt;li&gt;UX skills and an understanding of the customer experience. &lt;/li&gt;
&lt;li&gt;Advanced social media knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#19-computer-networking" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;19. Computer Networking&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwbQsLag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/49iwjhqwtucyld1rgf5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwbQsLag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/49iwjhqwtucyld1rgf5k.png" alt="19"&gt;&lt;/a&gt;&lt;br&gt;
This is where you can find many profiles in this &lt;a href="https://www.geeksforgeeks.org/do-you-want-to-make-career-in-networking/"&gt;category&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-software-testing-some-aspect-require-coding-skills" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;20. Software Testing&lt;/strong&gt; (some aspect require coding skills)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ejbB92zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fp9f2k6842jyqz0w9aay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejbB92zn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fp9f2k6842jyqz0w9aay.png" alt="20"&gt;&lt;/a&gt;&lt;br&gt;
Software Testing is a method to check whether the actual software product matches expected requirements and to ensure that the software product is Defect free. It involves the execution of software/system components using manual or automated tools to evaluate one or more properties of interest. The purpose of software testing is to identify errors, gaps, or missing requirements in contrast to actual requirements.&lt;br&gt;
&lt;a href="https://www.guru99.com/software-testing-introduction-importance.html"&gt;Know more &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills Required&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/17-skills-of-highly-effective-software-testers"&gt;https://dzone.com/articles/17-skills-of-highly-effective-software-testers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus" class="anchor"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Customer Relationship Management (CRM) / Salesforce&lt;/li&gt;
&lt;li&gt;Graphic Designer&lt;/li&gt;
&lt;li&gt;Business Intelligence&lt;/li&gt;
&lt;li&gt;Business Development Executive&lt;/li&gt;
&lt;li&gt;Cybersecurity (certain areas/domains require coding skills)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have just listed all the fields, but that's not gonna help you. &lt;br&gt;
Find your interest in the field, google about that particular field, learn, and improve yourself.&lt;br&gt;
Good Luck!&lt;/p&gt;

&lt;p&gt;Please Drop a ❤, if you enjoyed this.&lt;/p&gt;

&lt;p&gt;You can connect with me on:&lt;br&gt;
🎥&lt;a href="https://youtube.com/BashWoman"&gt;YouTube&lt;/a&gt;&lt;br&gt;
⚒&lt;a href="https://linkedin.com/in/seemasaharan"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🧵&lt;a href="https://twitter.com/SeemaSaharan5"&gt;Twitter&lt;/a&gt;&lt;br&gt;
✍&lt;a href="https://bashwoman.hashnode.dev"&gt;Hashnode&lt;/a&gt;&lt;br&gt;
📷&lt;a href="https://instagram.com/bashwoman"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>testing</category>
      <category>design</category>
    </item>
    <item>
      <title>Programming is Ruining My Life - What I'm Doing About It</title>
      <author>Miles Watson</author>
      <pubDate>Sat, 19 Dec 2020 21:06:47 +0000</pubDate>
      <link>https://dev.to/mileswatson/programming-is-ruining-my-life-what-i-m-doing-about-it-5b7c</link>
      <guid>https://dev.to/mileswatson/programming-is-ruining-my-life-what-i-m-doing-about-it-5b7c</guid>
      <description>&lt;p&gt;Okay, the title might have been a slight exaggeration - programming has played a very beneficial role in both my academic and professional development. I have noticed recently, however, that programming has caused a significant decrease to my quality of life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-situation" class="anchor"&gt;
  &lt;/a&gt;
  My Situation
&lt;/h2&gt;

&lt;p&gt;Hi! My name's Miles, and I'm a teenager living in the UK. I've been programming in one way or another for over five years, but have recently been stepping up my workload (mostly due to my &lt;a href="https://github.com/mileswatson/hosta/"&gt;school computer science project&lt;/a&gt;, among other things). A typical school day over the past month has looked like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wake up, breakfast&lt;/li&gt;
&lt;li&gt;school (5 hours of lessons, most of lunch break programming)&lt;/li&gt;
&lt;li&gt;homework / Advent Of Code until dinner&lt;/li&gt;
&lt;li&gt;project work after dinner until bed
The weekends are fairly similar, except with more homework / programming in the place of lessons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This schedule has been fairly consistent for a few months now, and I wanted to share some of the issues I've had (as well as some of the methods I'm using to cope).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues" class="anchor"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#eyesight" class="anchor"&gt;
  &lt;/a&gt;
  Eyesight
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lothd0QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1456081101716-74e616ab23d8%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1355%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lothd0QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1456081101716-74e616ab23d8%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1355%26q%3D80" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the past year or so, I have seen a noticeable decrease in my ability to discern details at distances further than a few metres. The impacts were most felt when I started school after lockdown, and had to move closer to the front of the classroom in order to make out questions.&lt;/p&gt;

&lt;p&gt;I believe that this was caused long periods working at a computer, rather than simply due to genetics - mostly due to the fact that my eyesight felt quite a bit worse after my more "productive" days.&lt;/p&gt;

&lt;p&gt;In addition to having developed short-sightedness, I have recently experienced some of the joys of eye strain. The discomfort persisted for a couple days, forcing me to take a break from computer work. It was after this particular event that I realised that something had to change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#posture-and-back-discomfort" class="anchor"&gt;
  &lt;/a&gt;
  Posture and Back Discomfort
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38pmn5bZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1462145523241-05dd5bae9ada%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1331%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38pmn5bZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1462145523241-05dd5bae9ada%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1331%26q%3D80" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sitting at a computer has caused a slight discomfort in my lower back and rounded shoulders. Although minor, I assume this discomfort will only become worse as I age.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lethargy" class="anchor"&gt;
  &lt;/a&gt;
  Lethargy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHLQ4ybV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1448454050639-2f8d4bf26975%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1267%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHLQ4ybV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1448454050639-2f8d4bf26975%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1267%26q%3D80" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one's quite simple - do you lack energy, or feel tired/weak/fatigued after small amounts of exercise? Being sedentary for long periods of time is not healthy, and can lead to both mental and physical illness. I personally noticed myself getting out of breath after flights of stairs, and feeling unfit caused a drop in my self-confidence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#burnout-and-irritability" class="anchor"&gt;
  &lt;/a&gt;
  Burnout and Irritability
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kq_CVO4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1561053338-af94db55eb9b%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1356%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kq_CVO4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1561053338-af94db55eb9b%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1356%26q%3D80" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a long day of problem solving, I noticed that I felt both mentally and physically exhausted. This exhaustion destroyed my motivation for other hobbies, and made me more irritable (and therefore unsociable). Instead of spending my time reading, playing games, or talking with friends, I instead tried to numb my stress by endlessly scrolling through Reddit and other social media platforms until I fell asleep.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tilting" class="anchor"&gt;
  &lt;/a&gt;
  Tilting
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQ6pHj-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/9o9dh1JRGThC1qxGTJ/giphy.gif%3Fcid%3Decf05e4750l4dt5rphfuo6111ph2gr8ttfkppt59dilqcjqw%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQ6pHj-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/9o9dh1JRGThC1qxGTJ/giphy.gif%3Fcid%3Decf05e4750l4dt5rphfuo6111ph2gr8ttfkppt59dilqcjqw%26rid%3Dgiphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.urbandictionary.com/define.php?term=Tilting"&gt;Urban Dictionary&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Although mostly used to describe a feeling in videogames, I find that the experience translates well to problem solving. Getting frustrated at a bug leads my mental clarity to decrease, causing a feedback loop that ends in me spending hours on a problem (often until late at night, causing irregular sleep patterns).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-doing-about-it" class="anchor"&gt;
  &lt;/a&gt;
  What I'm Doing About It
&lt;/h2&gt;

&lt;p&gt;Here are some methods that I have found particularly helpful for dealing with and preventing the issues I've talked about:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#202020-rule" class="anchor"&gt;
  &lt;/a&gt;
  20-20-20 Rule
&lt;/h3&gt;

&lt;p&gt;I've recently started using the &lt;a href="https://www.healthline.com/health/eye-health/20-20-20-rule"&gt;20-20-20 rule&lt;/a&gt;. The rule says that, for every 20 minutes of computer work, you should focus on something 20 feet away for 20 seconds. I've found this to give good (albeit temporary) relief, although I usually do it for longer than 20 seconds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regular-breaks" class="anchor"&gt;
  &lt;/a&gt;
  Regular Breaks
&lt;/h3&gt;

&lt;p&gt;Taking short breaks every hour or so has been very beneficial. During these breaks, I make an effort to move as much as possible - either a short walk outside, a few press-ups/pull-ups, or even just walking around the house.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#posture-exercises" class="anchor"&gt;
  &lt;/a&gt;
  Posture Exercises
&lt;/h3&gt;

&lt;p&gt;I've been doing daily posture exercises to help fix my posture. So far, I've made noticeable progress.&lt;/p&gt;

&lt;p&gt;Here are some good resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=SYr6lbx68n8"&gt;Jeremy Ethier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.healthline.com/health/rounded-shoulders-exercises"&gt;Healthline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wikihow.com/Fix-Rounded-Shoulders"&gt;WikiHow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#gym-routine" class="anchor"&gt;
  &lt;/a&gt;
  Gym Routine
&lt;/h3&gt;

&lt;p&gt;You've probably heard this one a lot. There's a reason - it really works. Getting regular exercise at the gym (three days a week) has made me both fitter and happier&lt;sup&gt;&lt;sup&gt;;)&lt;/sup&gt;&lt;/sup&gt;. It has the combined effect of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving overall health&lt;/li&gt;
&lt;li&gt;Providing a way to relax&lt;/li&gt;
&lt;li&gt;Clearing my head&lt;/li&gt;
&lt;li&gt;Increasing my self confidence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Important note: There is a tendency among gym-goers to focus on "push" actions. These can create a natural tension in the chest, leading to the shoulders being drawn in. Make sure to perform the posture exercises mentioned above, and balance your workout with exercises that target the back - think "pull" actions (deadlifts are also good for general posture, but can be dangerous if performed with bad technique).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-how-to-give-up" class="anchor"&gt;
  &lt;/a&gt;
  Learning How to "Give Up"
&lt;/h3&gt;

&lt;p&gt;Being able to recognise when I am "tilting", and having the self control to force myself to put a problem to the side has been very beneficial. I've found that clearing my head before trying again produces better results with less total time spent when compared to stubbornly grinding away at it.&lt;/p&gt;

&lt;p&gt;This is probably the thing which I've found the hardest to do on this list - I have (like many other programmers) a natural tendency to obsess over problems until they are solved. Realising that putting a problem on hold is NOT admitting defeat was a major milestone in getting more consistent sleep and maintaining a better work/life balance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-kittens" class="anchor"&gt;
  &lt;/a&gt;
  Getting Kittens
&lt;/h3&gt;

&lt;p&gt;I don't think this one needs much explanation :) Pets can be a great way to destress - just make sure they don't interrupt your Zoom calls (grrr).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As a developer, maintaining your physical and mental health is crucial to staying both productive and happy. Take frequent breaks, regularly exercise, and ensure that you are eating/drinking/sleeping well - your mind will thank you.&lt;/p&gt;

&lt;p&gt;Have you been having any issues with burnout, work-life balance, or physical health? How have you been coping? Let me know in the comments below!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnote" class="anchor"&gt;
  &lt;/a&gt;
  Footnote
&lt;/h4&gt;

&lt;p&gt;If you enjoyed reading this, then consider dropping a like or following me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/mileswatson"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/@mileswatson"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/miles__watson"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mileswatson"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm just starting out, so the support is greatly appreciated!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer - I'm a (mostly) self-taught programmer, and I use my blog to share things that I've learnt on my journey to becoming a better developer. Because of this, I apologise in advance for any inaccuracies I might have made - criticism and corrections are welcome!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>mentalhealth</category>
      <category>productivity</category>
      <category>community</category>
    </item>
    <item>
      <title>How to Think of Personal Project Ideas </title>
      <author>Brenda Michelle</author>
      <pubDate>Sat, 19 Dec 2020 20:58:25 +0000</pubDate>
      <link>https://dev.to/brendamichellle/how-to-think-of-personal-project-ideas-k91</link>
      <guid>https://dev.to/brendamichellle/how-to-think-of-personal-project-ideas-k91</guid>
      <description>&lt;p&gt;&lt;em&gt;#SelfTaughtSaturdays&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.brendamichellle.com/how-to-think-of-personal-project-ideas"&gt;Post on my Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a self-learner, it is important to create a structured curriculum that you follow in order to be able to make progress. Working on personal projects is something that you should incorporate into your study plan. &lt;/p&gt;

&lt;p&gt;Depending on whether you are following a course that runs over a few weeks or a quick Youtube tutorial you should always put what you learn into practice. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-what-should-you-build" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;But what should you build?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;At the beginning of your journey do not get stuck on trying to think of a unique project idea that will make you rich overnight. Instead, try to focus on short and sweet projects that allow you to practice certain concepts as you learn them. &lt;/p&gt;

&lt;p&gt;As you progress and learn more you will be able to create more detailed projects that you will be proud of and will help you land your first job. &lt;/p&gt;

&lt;p&gt;In this post, I will share with you some tips and tricks for thinking of and finding personal project ideas. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-problems" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Personal Problems&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Think of personal problems that you or someone in your life has and how you can fix that by coding. It can be automating a task with python or creating a website for a small business owner. There are endless possibilities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-favorite-apps-and-websites" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Your Favorite Apps and Websites&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Look at your favorite apps and websites and analyze them. What do you like and what don’t you like? What would you change, or what are they missing? Maybe you can create your own around that concept. No app or website is perfect for every person so you are sure to find something to tweak. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dribbblecom" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Dribbble.com&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Check out dribbble and just scroll through all the amazing designs. If you do decide to just recreate one of the designs make sure to credit the artist. You can also just use the platform as a source of inspiration and go from there. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pinterest" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pinterest&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Many people overlook Pinterest but it is full of amazing content. Sometimes I spend hours scrolling and saving designs, art, and much more that inspires my project ideas. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fellow-devs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Fellow Devs&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Keep up with other devs and follow what they are working on it might spark something. There are also times when others might ask for help in their personal projects, which is also a great opportunity. If you do get a job in tech there is a high probability that you will be working with a team at some point. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Open Source&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you are all out of ideas, which I hope is not the case. There is always open source. There are a lot of great posts on how to get started with open source. A quick Google search will show you some great info. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ultimate-takeaway" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Ultimate Takeaway!&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Exercise your brain and become an idea machine. Try to write out between 5 – 10 ideas everyday. They do not have to be unique or out of this world or even tech related. Some examples of ideas I try to think of everyday are: &lt;/p&gt;

&lt;p&gt;1.Blog post ideas &lt;br&gt;
   2.Website Ideas &lt;br&gt;
   3.App ideas&lt;br&gt;
   4.Personal Goals &lt;br&gt;
   5.Life goals &lt;br&gt;
   6.Career Goals &lt;br&gt;
   7.Personal development ideas &lt;br&gt;
   8.Social media post ideas&lt;/p&gt;

&lt;p&gt;The more you think and take time to do it intentionally the better you will get at it. It takes time so do not beat yourself up if some days you can only get 2 or 3 ideas down. &lt;/p&gt;




&lt;p&gt;I hope this was helpful let me know how you think of ideas and if you follow a specific process. &lt;/p&gt;

&lt;p&gt;If you have any questions or simply want to chat &lt;a href="https://www.instagram.com/brendamichellle/"&gt;lets connect&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;Photo by Kelly Sikkema on Unsplash&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>help</category>
      <category>productivity</category>
    </item>
    <item>
      <title>JavaScript Guide </title>
      <author>Lasha Kakabadze</author>
      <pubDate>Sat, 19 Dec 2020 17:20:52 +0000</pubDate>
      <link>https://dev.to/adrinlol/javascript-guide-2coa</link>
      <guid>https://dev.to/adrinlol/javascript-guide-2coa</guid>
      <description>&lt;p&gt;In this article I'm going to go over my most recent project - JavaScript Guide. The intention of this guide is to help beginner developers ace advance their Frontend knowledge and ace their interview questions.&lt;/p&gt;

&lt;p&gt;From basic to advanced: test how well you know JavaScript, refresh your knowledge a bit, or prepare for your coding interview! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hS8kltc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/48876996/102694409-4d754700-423a-11eb-9615-af0f6e70d450.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hS8kltc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/48876996/102694409-4d754700-423a-11eb-9615-af0f6e70d450.gif" alt="ezgif com-gif-maker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;Link to the repo 👇&lt;br&gt;
&lt;a href="https://github.com/Adrinlol/javascript-guide"&gt;https://github.com/Adrinlol/javascript-guide&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;p&gt;This projects covers all the important concepts of JavaScript along with several examples.&lt;/p&gt;

&lt;p&gt;Some key topics included in this tutorial are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Constants"&gt;Constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Scope"&gt;Scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Objects"&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Arrays"&gt;Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Comparison"&gt;Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adrinlol.github.io/javascript-guide/#Closure"&gt;Closure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

Note: This is just a part 1/n of this project, I'll be updating it regularly to include as many concepts as I can. 



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pair programming – a start guide for newbies</title>
      <author>Mateusz Sowa</author>
      <pubDate>Sat, 19 Dec 2020 16:40:17 +0000</pubDate>
      <link>https://dev.to/mateuszjansowa/pair-programming-a-start-guide-for-newbies-4k7c</link>
      <guid>https://dev.to/mateuszjansowa/pair-programming-a-start-guide-for-newbies-4k7c</guid>
      <description>&lt;p&gt;      Anna is an ex-physiotherapist. Matt is a former airline pilot. You may think they are part of distinct worlds and are used to communicate in a different way. It is reasonable to assume their first pair programming may be at least peculiar. &lt;/p&gt;

&lt;p&gt;      These two guys met at the JavaScript mentorship program and decided to join forces. They dove deep into pair programming rules, completed an HTML Canvas Project, and summarized their effort. Now they also want to share their experience with you! &lt;/p&gt;

&lt;p&gt;      After reading this article you will have a wider view of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;choosing &lt;strong&gt;the right project&lt;/strong&gt; for your first pair programming experience,&lt;/li&gt;
&lt;li&gt;planning your work &lt;strong&gt;step-by-step&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;setting up &lt;strong&gt;realistic goals&lt;/strong&gt; of the project, &lt;/li&gt;
&lt;li&gt;setting &lt;strong&gt;mandatory rules&lt;/strong&gt; of your coding sessions,&lt;/li&gt;
&lt;li&gt;pros and cons of coding &lt;strong&gt;together&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-project" class="anchor"&gt;
  &lt;/a&gt;
  Choosing the right project!
&lt;/h2&gt;

&lt;p&gt;      For your first pair programming project, it is reasonable to choose something straightforward or at least non-time-consuming. We suggest you choose from one of the &lt;a href="https://javascript30.com/"&gt;Wes Bos JavaScript 30 Projects&lt;/a&gt;. These are tiny but still engaging mini-apps written only with Vanilla JavaScript (ES6+), some HTML, and CSS. We decided to code Project #8 - Fun with HTML Canvas.&lt;/p&gt;

&lt;p&gt;     We didn't know a thing about the canvas element. Although we considered it to be a good idea to start from scratch, give us a week to get familiar with Canvas, and start from a &lt;strong&gt;similar level&lt;/strong&gt; when it comes to programming. We finally picked the project and it was a good time for…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-the-cooperation" class="anchor"&gt;
  &lt;/a&gt;
  Planning the cooperation
&lt;/h2&gt;

&lt;p&gt;      It was very seductive just to call each other and start typing the first lines of code. However, we took a different approach. We decided to set up an &lt;strong&gt;organizational meeting&lt;/strong&gt;. It was crucial and we appreciated it in the following phases of our pair programming journey.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-golden-rules-of-pair-programming" class="anchor"&gt;
  &lt;/a&gt;
  The golden rules of pair programming
&lt;/h4&gt;

&lt;p&gt;      We made use of the &lt;a href="https://gist.github.com/jordanpoulton/607a8854673d9f22c696"&gt;mandatory pair programming rules&lt;/a&gt; presented by Jourdan Poulton on Github. Simply speaking, the couple divides their task according to two roles: Driver and Navigator. &lt;br&gt;
As the name suggests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  the Driver is responsible for a keyboard,&lt;/li&gt;
&lt;li&gt;  the Navigator manages the code to be written.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most appealing rules are listed below. Our cooperation would be impossible without them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Driver&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  the only person responsible for typing,&lt;/li&gt;
&lt;li&gt;  writes the code according to Navigator's directions,&lt;/li&gt;
&lt;li&gt;  asks questions anytime the directions are unclear,&lt;/li&gt;
&lt;li&gt;  offers an alternative solution when there is a disagreement,&lt;/li&gt;
&lt;li&gt;  trusts the Navigator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Navigator&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  clearly communicates the code to be written,&lt;/li&gt;
&lt;li&gt;  checks for syntax errors and typos so the Driver doesn't have to bother,&lt;/li&gt;
&lt;li&gt;  keeps track of console and browser output,&lt;/li&gt;
&lt;li&gt;  makes sure that the Driver sticks to the small task,&lt;/li&gt;
&lt;li&gt;  plans and notes down high-level tasks or issues that shall be solved later,&lt;/li&gt;
&lt;li&gt;  waits until the Driver finishes the task to bring up design or refactoring ideas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Both&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  communicate and are not quiet,&lt;/li&gt;
&lt;li&gt;  know when to give up, ask for advice, or just swap roles,&lt;/li&gt;
&lt;li&gt;  intervene when their partner is quiet,&lt;/li&gt;
&lt;li&gt;  respect the break time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#settling-the-app-functionalities-and-the-file-structure" class="anchor"&gt;
  &lt;/a&gt;
  Settling the app functionalities and the file structure
&lt;/h4&gt;

&lt;p&gt;      We also took our time to discuss the core functionalities of our app. Our heads were full of crazy project implementations but, as it was our first pair programming project, we stuck to &lt;strong&gt;“the simpler, the better”&lt;/strong&gt; principle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun fact: it took us more than 2.5 hours to complete a 20-minutes long coding task.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After that, we arranged a simple file structure.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creating-a-mind-map" class="anchor"&gt;
  &lt;/a&gt;
  Creating a mind map
&lt;/h4&gt;

&lt;p&gt;      We made a &lt;strong&gt;mind map&lt;/strong&gt; using  &lt;a href="http://mindmeister.com"&gt;MindMeister mapping software&lt;/a&gt;. There we placed the core structures and functionalities established at our meeting. The map turned up to be very helpful for us. The Navigator did some quick peeks to orientate in which phase we were during project development and what should be done next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tCDpYLOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Mprmsk8/Mind-map.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCDpYLOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Mprmsk8/Mind-map.png" alt="Mind map"&gt;&lt;/a&gt;&lt;/p&gt;
Mind map created using MindMeister. See it in better resolution: i.ibb.co/Mprmsk8/Mind-map.png



&lt;p&gt;      We noted down all our arrangements in &lt;strong&gt;Google Docs&lt;/strong&gt;, so we had access to them from any device at any time.&lt;br&gt;
       We were all set up. Finally, it was a proper time to get our hands dirty!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pair-programming-sessions" class="anchor"&gt;
  &lt;/a&gt;
  Pair programming sessions
&lt;/h2&gt;

&lt;p&gt;      We split the programming into two one-hour sessions with the help of &lt;a href="https://pomodoro-tracker.com/"&gt;Pomodoro-tracker&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  we coded for 25 minutes,&lt;/li&gt;
&lt;li&gt;  took a 5-minutes break,&lt;/li&gt;
&lt;li&gt;  swapped roles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;      By the first two &lt;strong&gt;25-minutes intervals&lt;/strong&gt; we have coded the basic structure and features of the app and encountered the first bugs we had to deal with in the next step.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By the way: you can have a glimpse at what we've done by looking at the &lt;a href="https://github.com/mateuszjansowa/FunWithCanvas-PairProgramming"&gt;project's GitHub repo&lt;/a&gt;&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;      We spent the last two sessions fixing bugs. We have to confess that between the sessions each of us had a quick peek at the original Wes Bos project to understand the source of our bugs.&lt;br&gt;
      Coding time was over, we were past four 25-minutes Pomodoro intervals but still there was space to improve our Canvas Project. We couldn’t resist spending an extra 30 minutes adjusting the functionalities and patching what we've coded together.&lt;br&gt;
      Done! Now it’s time for summing up how we felt about pair programming.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#its-like-a-real-rally-only-without-a-car" class="anchor"&gt;
  &lt;/a&gt;
  It’s like a real rally – only without a car
&lt;/h2&gt;

&lt;p&gt;      Anna’s impression of being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  a navigator – as I like to plan and solve problems my way the role of navigator suits me better. It’s nice to feel the flow… until the first bug occurs. Then the fun is over and you start to feel the burden of power – the increasing pressure to find the way out!&lt;/li&gt;
&lt;li&gt;  a driver – this role is a kind of break from strenuous work but on the other hand, listening to the navigator still requires 100% of my attention. What I find difficult is keeping up with the thought process of the navigator and writing the code at the same time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;      Matt’s impression of being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  a navigator – more energy-consuming than being a driver. This role requires thinking in a wide perspective. You should predict next steps, potential bugs and pitfalls. I appreciated the Driver’s attention and suggestions when I was stuck with a line of code.&lt;/li&gt;
&lt;li&gt;  a driver – as I am a man of action, the role of the driver suits me fine. I found myself focused while completing the strict Navigator’s instructions. It is appealing to me to stick to one task at a time and not to think in a big picture way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#we-are-the-champions-anyway" class="anchor"&gt;
  &lt;/a&gt;
  “We are the champions” anyway
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  We respected the rule saying the navigator has priority over the driver to plan the code. When we wanted to break in we asked the navigator: “May I suggest something?”.&lt;/li&gt;
&lt;li&gt;  There was no virtual wrestling over “possessing the keyboard” – the navigator didn’t touch the code without the driver’s permission. Anyway, this situation occurred mainly during debugging.&lt;/li&gt;
&lt;li&gt;  We were completely focused on the task. It resulted in greater efficiency and faster problem-solving.&lt;/li&gt;
&lt;li&gt;  We really did learn from each other.&lt;/li&gt;
&lt;li&gt;  We were disciplined and stuck to the rules of pair programming most of the time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#lets-sum-it-up" class="anchor"&gt;
  &lt;/a&gt;
  Let’s sum it up!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Why does pair programming pay off?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; No doubt it’s very beneficial, especially for a junior dev. Working in a pair is a great opportunity to see other’s workflow and to learn new coding techniques.&lt;/li&gt;
&lt;li&gt;  Pair programming is often a part of the recruitment process in many companies. A cooperation as ours makes you ready for this long-awaited interview day.&lt;/li&gt;
&lt;li&gt;  You train communication skills – how to listen carefully, talk clearly, and not interrupt each other.&lt;/li&gt;
&lt;li&gt;  Two heads are better than one – you hear it every time while the topic of pair programming comes up. Why? Because it’s absolutely true. There is no better way to quickly track a bug or stop it from even turning up than an extra pair of eyes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s challenging!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Keeping one’s mouth shut is not easy. Asides like “What a nice keyboard shortcut, I didn’t know it!” or “Yesterday I had the same problem” are distracting and don’t contribute to work progress.&lt;/li&gt;
&lt;li&gt;  Sticking to the time restrictions. After the second session we were not able to resist the temptation to refactor our code.&lt;/li&gt;
&lt;li&gt;  Pair programming is as beneficial as exhausting. Mental fatigue is a price to pay for high productivity. Thus it would be better not to plan any important or demanding tasks for the same day as pair programming. You may not be able to stay focused or be creative.&lt;/li&gt;
&lt;li&gt;  It takes two to tango. Working in a pair requires effort and involvement from both sides – in terms of planning as well as programming. Better find a nice fellow then! ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What would we change in the future?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Next time we practice pair programming, we will pick up a technology we are familiar with. We believe it will let us plan the project more freely and independently, coming up with solutions on our own.&lt;/li&gt;
&lt;li&gt;  We would give &lt;a href="https://quokkajs.com"&gt;Quokka&lt;/a&gt; a chance. The workflow slows down whenever it comes to debugging. No need to &lt;code&gt;console.log&lt;/code&gt; would be time-saving.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1R7vBrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fn3t2i4kq56vzgcbjnsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1R7vBrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fn3t2i4kq56vzgcbjnsp.png" alt="Pair programming quick start"&gt;&lt;/a&gt;&lt;/p&gt;
 Pair programming quick start



&lt;p&gt;&lt;em&gt;Thanks for reading this article! We encourage you to comment and share your opinion on pair programming!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article was pair-written by:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__543402"&gt;
  
    .ltag__user__id__543402 .follow-action-button {
      background-color: #0074f0 !important;
      color: #ffffff !important;
      border-color: #0074f0 !important;
    }
  
    &lt;a href="/annabuller" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgYLXWS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zTZnDM7R--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/543402/a2be8b6d-784d-4ef9-a341-6c63b8ed0e65.png" alt="annabuller image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/annabuller"&gt;AnnaBuller&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/annabuller"&gt;I am a junior frontend developer and ex-physio. My mission is to refine communication in IT world.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__user ltag__user__id__497133"&gt;
  
    .ltag__user__id__497133 .follow-action-button {
      background-color: #0074f0 !important;
      color: #ffffff !important;
      border-color: #0074f0 !important;
    }
  
    &lt;a href="/mateuszjansowa" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cN4RLBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MbHE_unK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497133/830bbbda-2ce7-490a-a8e0-c23c4d392ce3.jpeg" alt="mateuszjansowa image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/mateuszjansowa"&gt;Mateusz Sowa&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/mateuszjansowa"&gt;Junior Front End Developer, Aviation and Cosmonautics MEng. 
In love with JavaScript, React and flying.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>pairprogramming</category>
      <category>development</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
