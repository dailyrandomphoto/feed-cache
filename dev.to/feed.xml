<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why Headless BI is a perfect fit for DataOps teams</title>
      <author>Tom</author>
      <pubDate>Sun, 20 Jun 2021 22:04:37 +0000</pubDate>
      <link>https://dev.to/kratom/why-headless-bi-is-a-perfect-fit-for-dataops-teams-4eob</link>
      <guid>https://dev.to/kratom/why-headless-bi-is-a-perfect-fit-for-dataops-teams-4eob</guid>
      <description>&lt;p&gt;The headless BI is not a buzzword - same as headless CMS concept, the headless BI is about decoupling the analytical logic from the presentation and self-service layer. The design of headless BI is a robust system based on open and declarative APIs allowing combining the data services to a custom stack. &lt;/p&gt;

&lt;p&gt;The data managed by DataOps teams are often consumed as analytics insights, dashboards, or machine learning models. We  believe that exposing a SQL database and let your consumers analyze the data in the visualization tools of their choice is a way to hell.&lt;/p&gt;

&lt;p&gt;Read this article that explains why headless BI is the perfect fit for DataOps teams: &lt;a href="https://medium.com/gooddata-developers/dataops-headless-bi-the-perfect-fit-2654a923ac01"&gt;https://medium.com/gooddata-developers/dataops-headless-bi-the-perfect-fit-2654a923ac01&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can get started right now by downloading the community edition directly from the dockerhub: &lt;a href="https://hub.docker.com/r/gooddata/gooddata-cn-ce"&gt;https://hub.docker.com/r/gooddata/gooddata-cn-ce&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>datascience</category>
    </item>
    <item>
      <title>Platform for startups to hire developers</title>
      <author>Syed Faraaz Ahmad</author>
      <pubDate>Sun, 20 Jun 2021 20:47:31 +0000</pubDate>
      <link>https://dev.to/faraazahmad/platform-for-startups-to-hire-developers-4e41</link>
      <guid>https://dev.to/faraazahmad/platform-for-startups-to-hire-developers-4e41</guid>
      <description>&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myeWr5OU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83hcd3ke67gubm759iaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myeWr5OU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83hcd3ke67gubm759iaj.png" alt="App screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've been working on a platform for startups to hire developers, I've done some research on this topic and I see some gaping holes in the system that I can fix. &lt;/p&gt;

&lt;p&gt;I'd love it if you checked out my early access page: &lt;a href="https://myth-warp-1624188088.versoly.page/"&gt;https://myth-warp-1624188088.versoly.page/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PS: If you've ever hired any developer, I'd like to know if/why you would or would not spend money for this service.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>hiring</category>
      <category>startup</category>
    </item>
    <item>
      <title>Bubble sort algorithm</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 20 Jun 2021 20:19:38 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/bubble-sort-algorithm-516f</link>
      <guid>https://dev.to/ayabouchiha/bubble-sort-algorithm-516f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-bubble-sort-algorithm"&gt;
  &lt;/a&gt;
  Definition of bubble sort algorithm
&lt;/h2&gt;

&lt;p&gt;Bubble Sort is a type of sorting algorithms that works by  comparing each pair of adjacent items and swapping them if they are in the wrong order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RgcV04rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4546jasj1x6rphrpvm7p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RgcV04rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4546jasj1x6rphrpvm7p.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-and-time-complexity-of-bubble-sort"&gt;
  &lt;/a&gt;
  Space and Time complexity of bubble sort
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time complexity&lt;/th&gt;
&lt;th&gt;Space complexity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;О(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#bubble-sort-implementation-using-python"&gt;
  &lt;/a&gt;
  Bubble sort implementation using python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [name] =&amp;gt; Bubble Sort 
        [type] =&amp;gt; Sorting algorithms
        [space complexity] =&amp;gt; O(1)
        [time complexity]  =&amp;gt; O(n^2)
        @params (
            [items] =&amp;gt; list
        )
        @return =&amp;gt; sorted list
    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;isSorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# if the number is greater than the adjacent element
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# swap 
&lt;/span&gt;                &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;isSorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="c1"&gt;# if the list is sorted
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isSorted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-program-for-bubble-sort/"&gt;https://www.geeksforgeeks.org/python-program-for-bubble-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.techopedia.com/definition/3757/bubble-sort"&gt;https://www.techopedia.com/definition/3757/bubble-sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/bubble-sort/"&gt;https://www.geeksforgeeks.org/bubble-sort/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Popular GitHub repositories Every Developer Should Follow</title>
      <author>Ritesh Kumar</author>
      <pubDate>Sun, 20 Jun 2021 20:07:21 +0000</pubDate>
      <link>https://dev.to/wordssaysalot/popular-github-repositories-every-developer-should-follow-5fcb</link>
      <guid>https://dev.to/wordssaysalot/popular-github-repositories-every-developer-should-follow-5fcb</guid>
      <description>&lt;p&gt;GitHub is not just a version control service; it is a terrific content resource for all-things-development From free e-books and tutorials, to interview preparation material and ‘awesome’ listicles, GitHub is the go-to learning hub for Developers.&lt;br&gt;
If you are one of the developers who visit GitHub quite often then greetings we have something for you, a collection of GitHub repositories that you should mark star in your favorite repository list &lt;br&gt;
but it depends again on things that you want to learn or want to explore.&lt;/p&gt;

&lt;p&gt;I've compiled a list of the most valuable repositories, I'm willing to bet you haven't come across most of them!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#1-awesome"&gt;
  &lt;/a&gt;
  1.  Awesome
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 164k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Awesome is, without a doubt, the most popular repo that curates all topics from software development to hardware to business. It has more than 123,000 stars on Github at this moment, and one could spend days (nights) browsing it. It is my one-stop shop if I want to learn something new.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sindresorhus"&gt;
        sindresorhus
      &lt;/a&gt; / &lt;a href="https://github.com/sindresorhus/awesome"&gt;
        awesome
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      😎 Awesome lists about all kinds of interesting topics
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h2&gt;
  &lt;a href="#2-free-programming-books"&gt;
  &lt;/a&gt;
  2. Free Programming Books
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 194k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Despite the fact that the repository's name is Free Programming Books, it offers much more. It includes sections for free online classes, interactive programming materials, problem sets and competitive programming, podcasts, and programming playgrounds, and is available in a variety of languages.&lt;/p&gt;

&lt;p&gt;However, the vast majority of them are programming books. And that is an amazing collection.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/EbookFoundation"&gt;
        EbookFoundation
      &lt;/a&gt; / &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;
        free-programming-books
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📚 Freely available programming books
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#3-build-your-own-x"&gt;
  &lt;/a&gt;
  3. Build Your Own X
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 110k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This incredible repository is basically a collection of lessons on how to create your own technology. There are examples of how to create a command-line tool, an operating system, a search engine, a 3D renderer, and a plethora of other things.&lt;/p&gt;

&lt;p&gt;Have you ever considered developing your own Cryptocurrency, Database, Bots, programming language? Then this is the right repository for you.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/danistefanovic"&gt;
        danistefanovic
      &lt;/a&gt; / &lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;
        build-your-own-x
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🤓 Build your own (insert technology here)
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h2&gt;
  &lt;a href="#3-awesome-interview-questions"&gt;
  &lt;/a&gt;
  3. Awesome interview questions
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 41k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A curated awesome list of lists of interview questions, With over 40k stars, this repository contains a huge volume of interview questions in almost every programming language and framework you can think of.&lt;/p&gt;

&lt;p&gt;Very useful if you're preparing for an interview!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DopplerHQ"&gt;
        DopplerHQ
      &lt;/a&gt; / &lt;a href="https://github.com/DopplerHQ/awesome-interview-questions"&gt;
        awesome-interview-questions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      :octocat: A curated awesome list of lists of interview questions. Feel free to contribute! 🎓 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#4-javascript-algorithms"&gt;
  &lt;/a&gt;
  4. Javascript algorithms
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 111k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repository contains JavaScript-based examples of many popular algorithms and data structures.&lt;/p&gt;

&lt;p&gt;Each algorithm and data structure has its separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trekhleb"&gt;
        trekhleb
      &lt;/a&gt; / &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;
        javascript-algorithms
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#5-public-apis"&gt;
  &lt;/a&gt;
  5. Public Apis
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 132k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are a developer, then definitely you will have to deal with APIs for your application. This repository makes the developer tasks easier by presenting a list of frequently updated collections of public APIs. These APIs are free and separated into different categories to explore them easily. &lt;/p&gt;

&lt;p&gt;This list contains a wide range of APIs. There are APIs that provide funny memes and images of cats.&lt;br&gt;
However, there are some that are more helpful, such as the Gmail API or the Google Analytics API. Star mark this repository and get the benefit of it while building your application.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/public-apis"&gt;
        public-apis
      &lt;/a&gt; / &lt;a href="https://github.com/public-apis/public-apis"&gt;
        public-apis
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collective list of free APIs
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h2&gt;
  &lt;a href="#6-the-art-of-command-line"&gt;
  &lt;/a&gt;
  6. The art of command line
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;*GitHub stars: 92k+ *&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The command line is usually overlooked by developers, yet this could help you increase your productivity and flexibility as an engineer. This repository contains useful notes and tips on using the command line when working on Linux, Windows, or macOS.&lt;/p&gt;

&lt;p&gt;This repository also contains tips and hacks to save time while using the command line and is useful to both inexperienced and experienced users&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jlevy"&gt;
        jlevy
      &lt;/a&gt; / &lt;a href="https://github.com/jlevy/the-art-of-command-line"&gt;
        the-art-of-command-line
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Master the command line, in one page
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#7-project-based-learning"&gt;
  &lt;/a&gt;
  7. Project Based Learning
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars:  51k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A list of programming tutorials in which learners build an application from scratch. These tutorials are divided into different primary programming languages. Some have intermixed technologies and languages. &lt;br&gt;
This repository is for you if you believe in the notion of "Learning by Doing."&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuvtran"&gt;
        tuvtran
      &lt;/a&gt; / &lt;a href="https://github.com/tuvtran/project-based-learning"&gt;
        project-based-learning
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Curated list of project-based tutorials
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#8-beautiful-docs"&gt;
  &lt;/a&gt;
  8. Beautiful Docs
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 6.4k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is a well-known fact that Documentation is an important asset to any software project. Writing self-documented code is one thing, but presenting it in a meaningful way is another. The author has collected those online resources that are ‘beautiful’ in terms of structure, design, usability, styling, diagrams, etc — so anyone that looks for inspiration on how to design their own documentation will find it resourceful.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/PharkMillups"&gt;
        PharkMillups
      &lt;/a&gt; / &lt;a href="https://github.com/PharkMillups/beautiful-docs"&gt;
        beautiful-docs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Pointers to useful, well-written, and otherwise beautiful documentation.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#9-developer-roadmap"&gt;
  &lt;/a&gt;
  9. Developer roadmap
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 163k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A very good developer roadmap guide was created by &lt;a href="https://github.com/kamranahmedse"&gt;Kamran Ahmed&lt;/a&gt;. A lot of students and newbies in programming get confused about what technology they should learn and what path they should follow step by step to become a developer. He has prepared a complete chart including the technology in each category of development(frontend, backend, DevOps..) that will give you a clear understanding of what you should learn next. Bookmark this repository if you like the way he guided you to become a developer.&lt;br&gt;
The repo gets updated every year to reflect changes in the ecosystem.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kamranahmedse"&gt;
        kamranahmedse
      &lt;/a&gt; / &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;
        developer-roadmap
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Roadmap to becoming a web developer in 2021
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h2&gt;
  &lt;a href="#10-30-seconds-of-code"&gt;
  &lt;/a&gt;
  10. 30 seconds of code
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;GitHub stars: 77k+&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repository contains short JavaScript code snippets for all your development needs.&lt;br&gt;
30 seconds of code provides free high-quality learning resources for web developers of all skill levels in the form of snippet collections in various programming languages since its inception in 2017. Today, 30 seconds of code consists of a large community of contributors and a handful of dedicated maintainers working towards creating the best short-form learning resources for software developers. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/30-seconds"&gt;
        30-seconds
      &lt;/a&gt; / &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;
        30-seconds-of-code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Short JavaScript code snippets for all your development needs
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h4&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus:
&lt;/h4&gt;
&lt;h2&gt;
  &lt;a href="#design-resources-for-developers"&gt;
  &lt;/a&gt;
  Design Resources for Developers
&lt;/h2&gt;

&lt;p&gt;This repository has a curated list of design and UI resources, including stock images, web templates, CSS frameworks, UI libraries, tools, and more, all of which are accessible for use in your projects and apps for free. &lt;br&gt;
Everything you'll need to get started with your Front-end development.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bradtraversy"&gt;
        bradtraversy
      &lt;/a&gt; / &lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;
        design-resources-for-developers
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h2&gt;
  &lt;a href="#awesome-repositories"&gt;
  &lt;/a&gt;
  Awesome repositories
&lt;/h2&gt;

&lt;p&gt;All of GitHub's great repositories are collected in Awesome repositories. It contains a number of helpful repositories that might aid you in future development projects or help you acquire a new skill.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/wordssaysalot"&gt;
        wordssaysalot
      &lt;/a&gt; / &lt;a href="https://github.com/wordssaysalot/awesome-repositories"&gt;
        awesome-repositories
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Useful GitHub Repos That Every Developer Should Follow
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I hope you find these resources valuable. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading-and-happy-developing"&gt;
  &lt;/a&gt;
  Thanks for reading! and happy Developing!
&lt;/h4&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>A Successful IOC Pattern with Functions in TypeScript</title>
      <author>Rasmus Schultz</author>
      <pubDate>Sun, 20 Jun 2021 19:12:41 +0000</pubDate>
      <link>https://dev.to/mindplay/a-successful-ioc-pattern-with-functions-in-typescript-2nac</link>
      <guid>https://dev.to/mindplay/a-successful-ioc-pattern-with-functions-in-typescript-2nac</guid>
      <description>&lt;p&gt;Over the past few months, I've been working on a TypeScript project, where I decided to challenge myself to use Functions only. This week, I refactored the codebase to use &lt;a href="https://en.wikipedia.org/wiki/Inversion_of_control"&gt;IOC&lt;/a&gt; everywhere, and it feels like I &lt;em&gt;leveled up&lt;/em&gt;. 😄&lt;/p&gt;

&lt;p&gt;There's been a lot of articles these past couple of years about "functional programming" in JavaScript, and for some reason these are mostly concerned with immutability, sets, map/reduce, and so on. I come from a background of mostly OOP, where the answer to IOC is largely just "use constructors and interfaces", so this hasn't been really helpful.&lt;/p&gt;

&lt;p&gt;What was missing for me, was a functional perspective on IOC and dependency injection.&lt;/p&gt;

&lt;p&gt;In this article, I will try to illustrate the problems and solutions with a &lt;em&gt;silly&lt;/em&gt; example for illustration purposes: for some reason, your boss wants the browser to display a personalized welcome message using an old-fashioned alert. Yikes. Well, whatever you say, boss, but I &lt;em&gt;expect&lt;/em&gt; this requirement will change in the future.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;To make the most of this article, you should know some basic TypeScript, and you should be familiar with the terms "inversion of control" or "dependency injection" - at least in the sense of using constructors and interfaces.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While&lt;/em&gt; &lt;code&gt;DEV&lt;/code&gt; &lt;em&gt;thinks this is "an 8 minute read", I recommend you open the &lt;a href="https://www.typescriptlang.org/play"&gt;Playground&lt;/a&gt; and spend 20-30 minutes getting a feel for this.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, let's say you come up with function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I am already doing dependency injection. Rather than reaching out for the &lt;code&gt;window&lt;/code&gt; global, this function asks for an instance of &lt;code&gt;Window&lt;/code&gt;, which makes it easy to unit-test this function on a mock &lt;code&gt;Window&lt;/code&gt; instance. So far so good.&lt;/p&gt;

&lt;p&gt;💭 &lt;em&gt;So we're done, right?&lt;/em&gt; 😁&lt;/p&gt;

&lt;p&gt;Not quite.&lt;/p&gt;

&lt;p&gt;Pretty soon, you will introduce functions that depend on &lt;code&gt;showMessage&lt;/code&gt; - and, in order for another function to call &lt;code&gt;showMessage&lt;/code&gt;, the other function needs to supply the &lt;code&gt;window&lt;/code&gt; parameter - which means the dependency on &lt;code&gt;Windows&lt;/code&gt; &lt;em&gt;spreads&lt;/em&gt; to other functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait, now &lt;code&gt;showWelcomeMessage&lt;/code&gt; internally depends on &lt;code&gt;showMessage&lt;/code&gt; - we really should use dependency injection for that too, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💭 &lt;em&gt;This looks wrong.&lt;/em&gt; 🤨&lt;/p&gt;

&lt;p&gt;&lt;code&gt;showWelcomeMessage&lt;/code&gt; had to depend on &lt;code&gt;Window&lt;/code&gt;, only so it could pass it along to &lt;code&gt;showMessage&lt;/code&gt; - but it doesn't actually &lt;em&gt;do&lt;/em&gt; anything with the &lt;code&gt;Window&lt;/code&gt; object itself.&lt;/p&gt;

&lt;p&gt;And while &lt;code&gt;showMessage&lt;/code&gt; happens to use &lt;code&gt;Window&lt;/code&gt; today, we might change that in the future, when someone realizes what a sad idea it was to use that alert. Maybe we decide to have it display a toast message on the page instead, and so the dependency changes from &lt;code&gt;Window&lt;/code&gt; to &lt;code&gt;Document&lt;/code&gt;. That's a breaking change. Now we have to run around and refactor everything that calls &lt;code&gt;showMessage&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Calling any function gets increasingly cumbersome - anytime any of the dependencies of any function changes, we have to manually correct the calls and introduce more dependencies everywhere. We're in &lt;em&gt;dependency hell&lt;/em&gt;, and by now we're wasting most of our time refactoring.&lt;/p&gt;

&lt;p&gt;💭 &lt;em&gt;There has to be a better way.&lt;/em&gt; 🤔&lt;/p&gt;

&lt;p&gt;My first realization was, why should someone who wants to call &lt;code&gt;showMessage&lt;/code&gt; need to know anything about it's internal dependencies? What I really want, is a function that is &lt;em&gt;internally bound&lt;/em&gt; to an instance of &lt;code&gt;Window&lt;/code&gt;, so that the caller doesn't need to know or care.&lt;/p&gt;

&lt;p&gt;That means we need a &lt;em&gt;factory&lt;/em&gt;-function for the &lt;em&gt;actual&lt;/em&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll need to extract the inner function-type - the one that has the &lt;code&gt;message&lt;/code&gt; argument only, so that other units can depend on that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Note the user of &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype"&gt;&lt;code&gt;ReturnType&lt;/code&gt;&lt;/a&gt; here - you could have manually typed out the function signature of the inner function, but this helps avoid the duplication and the extra refactoring chore going forward.)&lt;/p&gt;

&lt;p&gt;With that in place, our &lt;code&gt;showWelcomeMessage&lt;/code&gt; no longer needs to care that &lt;code&gt;showMessage&lt;/code&gt; internally uses &lt;code&gt;window&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also makes &lt;code&gt;showWelcomeMessage&lt;/code&gt; easier to test, since now we don't need to mock &lt;code&gt;window&lt;/code&gt; anymore - we can mock &lt;code&gt;showMessage&lt;/code&gt; instead and test that it's being called. The code and the tests will now refactor much better, as they have fewer reasons to change.&lt;/p&gt;

&lt;p&gt;💭 &lt;em&gt;So we're done, right?&lt;/em&gt; 😅&lt;/p&gt;

&lt;p&gt;Yeah, but No.&lt;/p&gt;

&lt;p&gt;Consider now what happens to the next function up the call hierarchy. Let's say we have a &lt;code&gt;login&lt;/code&gt; function, and showing the welcome message happens to be part of what it does - and we apply dependency injection here, too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This problem doesn't go away by just fixing it at one level - we need to apply the same pattern we applied to &lt;code&gt;showMessage&lt;/code&gt;, wrapping it in a &lt;code&gt;createShowMessage&lt;/code&gt; factory-function. And what happens when something else needs to call &lt;code&gt;login&lt;/code&gt;? Same thing again.&lt;/p&gt;

&lt;p&gt;In fact, as you may have realized by now, we might as well apply this pattern consistently, as a convention, to every function we write.&lt;/p&gt;

&lt;p&gt;💭 &lt;em&gt;Really? To every function?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, really - and bear with me, because it doesn't &lt;em&gt;look&lt;/em&gt; pretty:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does what we wanted though. We can do all of our dependency injection from the top down now - we can now bootstrap everything from a single function in our entry-point script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;login&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// usage:&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rasmus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that, in this example, &lt;code&gt;bootstrap&lt;/code&gt; returns only &lt;code&gt;login&lt;/code&gt; - if you have multiple entry-points, you can return more functions.&lt;/p&gt;

&lt;p&gt;Now, as helpful as this pattern was, this approach to bootstrapping does not really scale well. There are two problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We're creating everything up front. In this simple example, we do need every component - but applications with multiple entry-points might only need some of the components, some of the time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code is very sensitive to reordering: you have to carefully arrange your factory-function calls, so that the previous function can be passed to the next. It requires a lot of thinking about dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can solve both of these problems by &lt;em&gt;deferring&lt;/em&gt; the creation of dependencies until they're required - that is, by making the calls to the factory-functions from within &lt;em&gt;another&lt;/em&gt; function. Let's call this a &lt;em&gt;getter&lt;/em&gt;-function.&lt;/p&gt;

&lt;p&gt;Now, since these getter-functions could potentially be called more than once (although, in this simple example, they're not) we want them to return the &lt;em&gt;same&lt;/em&gt; dependency every time - rather than generating new ones.&lt;/p&gt;

&lt;p&gt;We can solve this by adding a tiny helper-function &lt;code&gt;once&lt;/code&gt; to construct these wrapper-functions and &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;memoize&lt;/a&gt; the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// first call&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's refactor again: we'll wrap all of our initializations in closures and apply &lt;code&gt;once&lt;/code&gt; to them - and our &lt;code&gt;bootstrap&lt;/code&gt; function will now return the &lt;code&gt;getLogin&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;(Note that the &lt;code&gt;once&lt;/code&gt; function would generate &lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern"&gt;singletons&lt;/a&gt;, if you were to call it from the global scope - but since we're calling it from the &lt;code&gt;bootstrap&lt;/code&gt; function scope, new instances of all dependencies will be generated for every call to &lt;code&gt;bootstrap&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;The new bootstrap-function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getShowWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getShowMessage&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getShowMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getLogin&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// usage:&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLogin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rasmus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've purposely mixed-up the order of these getter-functions, to illustrate the fact that the order no longer matters: we're now free to arrange and group these lines in any order that makes sense - and we're also no longer creating anything before one of the getter-functions is actually called, which removes any concerns about potential future performance problems.&lt;/p&gt;

&lt;p&gt;💭 &lt;em&gt;So we're...?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, done! 🏆✨&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnote-when-not-to-apply-this-pattern"&gt;
  &lt;/a&gt;
  Footnote: When &lt;em&gt;not&lt;/em&gt; to apply this pattern
&lt;/h4&gt;

&lt;p&gt;You don't need to apply this pattern to every function. Some functions don't have dependencies, or maybe they depend only on standard JavaScript environment functions.&lt;/p&gt;

&lt;p&gt;For example, there's no benefit to injecting the &lt;code&gt;Math.max&lt;/code&gt; function, since that's a &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure function&lt;/a&gt; with no side-effects. Whereas, on the other hand, there's a clear benefit to injecting &lt;code&gt;Math.random&lt;/code&gt;, since a mock can return values that aren't actually random - making it possible to write predictable tests for your function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-mutable-state"&gt;
  &lt;/a&gt;
  Bonus: Mutable State
&lt;/h3&gt;

&lt;p&gt;I made one more little discovery this week that I'd like to share.&lt;/p&gt;

&lt;p&gt;I think we've all been &lt;em&gt;here&lt;/em&gt; one time or another?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;loggedInUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's dangerously easy and natural to do this in JavaScript. 💣&lt;/p&gt;

&lt;p&gt;But even if you put this inside a module, this is &lt;em&gt;global state&lt;/em&gt; - and it makes things difficult to test, since &lt;code&gt;setLoggedInUser&lt;/code&gt; leaves behind in-memory state that persists between tests. (And you could write more code to clear out this state between tests, but, ugh.)&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; have mutable state, we need to model that mutable &lt;code&gt;loggedInUser&lt;/code&gt; state as a dependency, and then apply the create-function pattern described above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LoginState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSetLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggedInUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGetLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I could have abbreviated this more, but I actually like seeing the word &lt;code&gt;state&lt;/code&gt; here, clarifying the fact that a shared state is being either read or written.&lt;/p&gt;

&lt;p&gt;It might be tempting to just take the previous version of this code, wrap it all in a single create-function, and return both of the functions, bound to the same &lt;code&gt;state&lt;/code&gt; - but I wouldn't recommend that, because you could end up with &lt;em&gt;many&lt;/em&gt; functions that depend on this state, and you don't want to be forced to declare them &lt;em&gt;all&lt;/em&gt; in the same create-function. (Also, if you have to write a function that depends on &lt;em&gt;several&lt;/em&gt; different state objects, that approach does not work.)&lt;/p&gt;

&lt;p&gt;One more piece of advice: don't just create one big state object for all of your mutable state - this will muddy your dependencies, as functions will appear to depend on "the entire application state", even when those functions only actually depend on one property. (If you have multiple properties in the same state object, the &lt;a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)"&gt;cohesion&lt;/a&gt; should be high - ideally 100%, meaning every function depends on &lt;em&gt;all&lt;/em&gt; of the properties of that object.)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setLoggedInUser&lt;/code&gt; function &lt;em&gt;does&lt;/em&gt; have a &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side-effect&lt;/a&gt;, but now the effect is on state that you instantiate and control - making it easy to inject a new state for every test.&lt;/p&gt;

&lt;p&gt;I'm not a functional programming Guru &lt;em&gt;yet&lt;/em&gt;, and maybe there is more to learn here, but it's definitely a step up from global state. 🙂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I feel like I've finally found a JS/TS code-style that really scales - both in terms of complexity and performance.&lt;/p&gt;

&lt;p&gt;Applying this to my codebase has been an absolute breeze. I'm spending considerably less time juggling dependencies or refactoring things. Unit-testing is never a problem anymore.&lt;/p&gt;

&lt;p&gt;For years, I've heard proponents of functional programming talk about the benefits - but the articles are mostly about arrays and immutability, which is great, and I've heard all the other great arguments. But it didn't really help me &lt;em&gt;write software&lt;/em&gt;, and the outcome of prior attempts too often was either unmanageable or untestable. (But usually both.)&lt;/p&gt;

&lt;p&gt;Unlocking this feels like the "next level" for me, and I really hope this puts somebody else on the path to more productive and scalable codebases with TypeScript or JavaScript.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Have fun! 😀✌&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>ioc</category>
      <category>functional</category>
    </item>
    <item>
      <title>Wordpress - Move cron jobs to CLI</title>
      <author>Paweł Płotka</author>
      <pubDate>Sun, 20 Jun 2021 19:04:22 +0000</pubDate>
      <link>https://dev.to/plotek/wordpress-move-cron-jobs-to-cli-kgg</link>
      <guid>https://dev.to/plotek/wordpress-move-cron-jobs-to-cli-kgg</guid>
      <description>&lt;p&gt;Some time ago we started to observe performance issues in our company’s site built with WordPress. One of the issues we have observed was calling crons in random user requests. It is realized by calling URL &lt;code&gt;https://yourdomain.com/wp-cron.php&lt;/code&gt;. Although in this file WordPress calls PHP method &lt;code&gt;fastcgi_finish_request&lt;/code&gt;, which sends a response to the user as soon as possible, the cost of calling sub-requests during the main request is worth acknowledging and improving. There are other drawbacks of this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calling crons in request context means that it is limited, e.g. by php-fpm setting. We often have limited resources (such as memory or time limit) for HTTP requests. &lt;/li&gt;
&lt;li&gt;What’s worse, calling cron as http request utilizes resource (e.g. php-fpm pools that might be necessary to handle our traffic). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the Internet, there are a lot of tips on how to disable making subrequest to call crons and move them to CLI. But there is one problem. A lot of these tips suggest calling these scheduled tasks using &lt;code&gt;crontab&lt;/code&gt; by calling curl (or other http callings). This addressed first problem and makes user request free of sub-requests, but does not resolve two abovementioned problems. It is surprising because WordPress comes with &lt;code&gt;wp cron&lt;/code&gt; command, which supports running scheduled tasks in CLI without making HTTP calls. &lt;/p&gt;

&lt;p&gt;In order to do this, you have to add one line to your crontab:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*/5 * * * * wp cron event run --due-now --path=path_to_your_wp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we call the scheduled task every 5 minutes. WordPress is responsible for choosing a concrete task to run and runs it. &lt;/p&gt;

&lt;p&gt;Of course, you also have to disable calling sub-request to &lt;code&gt;/wp-cron.php&lt;/code&gt; file. In order to do that, add the following to your wp-config.php file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'DISABLE_WP_CRON'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my opinion, you should also deny access to &lt;code&gt;wp-cron.php&lt;/code&gt; file (because some bots might DDoS our site requesting this endpoint). I suggest making it on the application server level. For example, if you use Nginx,  add the following to your host configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;location = /wp/wp-cron.php { deny all; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>wordpress</category>
      <category>devops</category>
    </item>
    <item>
      <title>The Key Element to Responsive Websites</title>
      <author>mayankav</author>
      <pubDate>Sun, 20 Jun 2021 18:56:37 +0000</pubDate>
      <link>https://dev.to/mayankav/the-key-element-to-responsive-websites-31e5</link>
      <guid>https://dev.to/mayankav/the-key-element-to-responsive-websites-31e5</guid>
      <description>&lt;p&gt;What is the first thing you think of when someone says responsive websites? What comes rushing to your mind when you think of the most important piece of code related to responsive websites? CSS? relative units (%)? Media queries? Well, we won't talk about that here. This post aims to pin point the most essential stuff without which none of your responsive techniques would ever work the way you expect them to. We are talking about the  html tag. Well, but you know meta tags have got nothing to do with what's being rendered, right? They just carry information regarding the page content. They do not even appear on the page themselves. How do they matter when it comes to making our web page responsive? &lt;/p&gt;

&lt;p&gt;There's a special meta tag called the meta viewport, which actually has a lot to do with how well your page adapts to the screen it is rendered on. Lets dig deep.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Meta Viewport Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=80, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look at the code snippet that shows a meta tag enclosed within the Head section. The name attribute says viewport. That should be enough to indicate that this tag is supposed to add some kind of information related to the viewport - the space on the screen on which your web page is being rendered. Lets not confuse the viewport width with screen width. They may be the same when the rendering device is a mobile phone (we shall talk about this later in the same post) but on desktops and PCs, you can play with the size of your browser. &lt;b&gt;&lt;u&gt;Check out the following piece of code.&lt;/u&gt;&lt;/b&gt; Paste it in your browser console and resize your window to see how the viewport width changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we hopefully understand the difference between the physical screen width and the viewport width, let me break it to you that mobile phones generally (if not all of them) do not map the viewport to the exact dimensions of the screen (width). You can check out some real examples &lt;a href="https://experienceleague.adobe.com/docs/target/using/experiences/vec/mobile-viewports.html?lang=en"&gt;here&lt;/a&gt;. So for example if a mobile phone's screen is say 320px wide, it may consider a virtual viewport that is 800px, 900px wide or whatever and then minimize (zoom out) the rendered output to fit the screen size. Why would they do so you ask? This comes from back in time when responsive websites were not that common maybe. Even today not all websites are made mobile friendly (which indeed isn't what we want to do). If the mobile browser vendors mapped the viewport width of the browser to the screen width, the elements in the real website (big images/big buttons etc..) would break when rendered on such a small viewport. So they render it on a bigger viewport and then scale down the result to show it to you on a smaller screen. You can then zoom in on the part you want. You want an example? Checkout &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; but do it on your desktop and then resize your window to make sure you do not go to m.youtube.com which is another version meant specifically for mobile phones. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrhT5jMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkusib41gn67ubya7q04.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrhT5jMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkusib41gn67ubya7q04.PNG" alt="YouTube Desktop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;YouTube Desktop (not optimized for mobile experience)&lt;/h6&gt;&lt;/center&gt;




&lt;p&gt;This however, is not an ideal experience for websites which are made mobile friendly. Can you guess what sort of issues can this virtual viewport cause? You guessed it, didn't you? The media queries will start breaking. If you put in place a media query that should fire at 320px, it simply won't get triggered because factually the screen width is 900px which was just zoomed out to show it to you on a 320px wide mobile screen. What do such mobile browser vendors do for developers like us who write media queries to make our websites look good on all screen sizes? Well, they gave us this meta viewport tag which we can now use on our web page and tell the browser, to set the virtual viewport's width in accordance with our needs. So now when you say&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;html &amp;lt;meta name="viewport" content="width=device-width" /&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
, the mobile browser knows that you want to render your page with a virtual viewport that is as wide as the device's screen. Of course, you can set this "width" value to random pixels but that does not bring us joy. You can see the examples on &lt;a href="https://www.w3schools.com/css/css_rwd_viewport.asp"&gt;w3school&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, if you use boilerplate builder tools like create-react-app, vue create etc.. you may or may not have bothered to go through the index.html file completely. If you do a cross check, you shall definitely find the meta viewport tag included in the head section. Get rid of it for a while and see how your web app behaves on different screen sizes. Hopefully now, everyone can relate to the virtual viewport of mobile browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DLLs44W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yt9nm69wxjgapeth08u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DLLs44W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yt9nm69wxjgapeth08u.jpg" alt="Virtual Viewports"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;Learn more about Virtual Viewports &lt;a href="https://developers.google.com/web/updates/2015/01/What-the-Viewport"&gt;here&lt;/a&gt;
&lt;/h6&gt;&lt;/center&gt;




&lt;h2&gt;Originally posted here -&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/key-to-responsive-websites"&gt;https://mayankav.webflow.io/blog/key-to-responsive-websites&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>12 CSS Best Practices by Twitter</title>
      <author>Pritam Patil</author>
      <pubDate>Sun, 20 Jun 2021 18:31:15 +0000</pubDate>
      <link>https://dev.to/pritampatil/12-css-best-practices-by-twitter-2fap</link>
      <guid>https://dev.to/pritampatil/12-css-best-practices-by-twitter-2fap</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When grouping selectors, keep individual selectors to a single line.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RJ65SQwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piv7i8jtumkte1g2vd8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RJ65SQwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piv7i8jtumkte1g2vd8u.png" alt="single-line-selectors"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't prefix property values with a leading zero. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--krzTBI1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ggwfe767m7wd6c02ofc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--krzTBI1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ggwfe767m7wd6c02ofc.png" alt="leading-zero-prefix"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lowercase all hex values and use shorthand hex values whenever possible. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pT7esLGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jorymrfsvjcqmpm16nos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pT7esLGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jorymrfsvjcqmpm16nos.png" alt="shorthand-hex"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid specifying units for zero values. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhIIf1hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phuajjsobkh8rrpadtaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhIIf1hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phuajjsobkh8rrpadtaq.png" alt="no-units-zero"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Related property declarations should be grouped together following the order: &lt;em&gt;position, box-model, typography, visual. misc.&lt;/em&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EacfECL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipk1j98v0mk6hrxpe612.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EacfECL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipk1j98v0mk6hrxpe612.png" alt="declaration-order"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't use &lt;code&gt;!important&lt;/code&gt; - It is a last resort generally and  only use when you need to override something and there is no other way. Instead increase the specificity of the selector.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7gv1pYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21iomsoth86mwr866l6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7gv1pYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21iomsoth86mwr866l6c.png" alt="no-imp-use-specificity"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a rule set includes only one declaration, consider removing line breaks for readability and faster editing. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jcnVyKMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbfmpvw5gdtrwvurd67c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jcnVyKMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbfmpvw5gdtrwvurd67c.png" alt="single-declare-no-line-break"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limit shorthand declaration usage to instances where you must explicitly set all available values.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHk2JmhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eei8z39zpzqa1julsgzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHk2JmhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eei8z39zpzqa1julsgzo.png" alt="shorthand-declare-limit"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure your code is descriptive, well commented and approachable by others. Great code comments convey context and/or purpose.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RYOBN8kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98c5rl5f1pfz115pjws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYOBN8kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98c5rl5f1pfz115pjws.png" alt="good-comments"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class names:&lt;br&gt;
a. Keep them lowercase and use dashes to separate words&lt;br&gt;
b. Avoid excessive shorthand notation. (&lt;code&gt;.btn&lt;/code&gt; is fine, &lt;code&gt;.s&lt;/code&gt; is not)&lt;br&gt;
c. Use meaningful names: use structural or purposeful names over presentation.&lt;br&gt;
d. Prefix classes based on the closest parent or base class. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9i9a7wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwokogvsf132dyemn5tk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9i9a7wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwokogvsf132dyemn5tk.png" alt="classname-rules"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Selectors:&lt;br&gt;
a. Use classes over generic element tag for optimum rendering performance.&lt;br&gt;
b. Avoid using several attribute selectors (e.g. &lt;code&gt;[class^="..."]&lt;/code&gt;) on commonly occurring components. &lt;em&gt;Browser performance is known to be impacted by these&lt;/em&gt;.&lt;br&gt;
c. Keep selectors short and strive to limit the number of elements in each selector to three names over presentational.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diOc4NS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehrdcd5drxhy73ftnvbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diOc4NS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehrdcd5drxhy73ftnvbj.png" alt="selector-rules"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Place media queries as close to their relevant rule sets whenever possible.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5h1vNYNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiia6o6vrdfsdo5gl4t6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5h1vNYNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiia6o6vrdfsdo5gl4t6.png" alt="media-query-rule"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/TheDoucheP"&gt;twitter&lt;/a&gt; or &lt;a href="https://github.com/pritam-patil"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Authentication with Laravel Sanctum</title>
      <author>Brad Goldsmith</author>
      <pubDate>Sun, 20 Jun 2021 18:11:18 +0000</pubDate>
      <link>https://dev.to/bradisrad83/authentication-with-laravel-sanctum-169c</link>
      <guid>https://dev.to/bradisrad83/authentication-with-laravel-sanctum-169c</guid>
      <description>&lt;p&gt;This entire week at work was spent messing around with Nativescript, specifically the Vue flavor with typescript, ionic, and react native thrown in there.  It was rather frustrating even just getting the different environments getting up and running locally.  I've always known that it takes a special kind of person to be a mobile engineer and this week proved it to me.  And then forget all these "dual" languages if you're a true native engineer then I just have to say you're a better person than me.   So we as a company have decided with our current staff and the fact that we want a very simple app to interact with our API, Nativescript-vue hits all of the marks for us.  &lt;/p&gt;

&lt;p&gt;I'll definitely be going a lot further in detail about this project and we'll have a week by week recap of me trying to build this app.  But this week was a lot of roadblocks but one thing that is a constant is no matter what language we use we are going to need it to interact with our API and we need some way of authentication in place.  Why Sanctum?  Well for our needs it seems passport would be a bit overkill and yes we could've done JWT / Firebase authentication, or you can build a custom auth setup in house.  All are valid options but we decided on the small foot print of Sanctum.  If you've ever installed Passport it's super similar and you shouldn't have any issues.  For anyone who's never done auth this post is for you.  There are a few steps that the docs forget to mention but if you've set something up before you'll remember real quick when a few errors present themselves.  &lt;/p&gt;

&lt;p&gt;And on to the &lt;a href="https://laravel.com/docs/8.x/sanctum"&gt;Sanctum&lt;/a&gt; docs.  Follow the install steps with a simple &lt;code&gt;composer require laravel/sanctum&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"&lt;/code&gt; to publish the config files and last but not least: &lt;code&gt;php artisan migrate&lt;/code&gt; and migrate the new Sanctum tables.  Generally speaking you'll be using the trait on the &lt;code&gt;User&lt;/code&gt; model and bring in the namespace &lt;code&gt;use Laravel\Sanctum\HasApiTokens;&lt;/code&gt; and make sure to add the Trait &lt;code&gt;use HasApiTokens&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;So we are pretty much set up and now just have to create a route / controller, and to do a few more little nicks and nacks to get everything up and running properly.  So in the &lt;code&gt;web.php&lt;/code&gt; file (yours might be different just depends on how you have your routing set up.  I decided to use the route &lt;code&gt;/tokens/create&lt;/code&gt; and I point it to a newly created &lt;code&gt;AuthController@login&lt;/code&gt;.  I debated on what to call the function in the newly created controller (I didn't use the cli just created the file and copied / pasted one of my other controller and fixed namespaces.  Call the route / function whatever you want it really is up to you.  Leave a funny easter egg?  Go for it , I know I could 100% cause of the small size of the team but I chose the traditional route lol. If you try to hit this route now you'll get a 419 (page expired route), but why?  Well since it's in the web file all web middleware is present and what's not present in postman / a browser right now is: CSRF token.  So we need to open up &lt;code&gt;VerifyCsrfToken.php&lt;/code&gt; and add our recently created route, in my case &lt;code&gt;/tokens/create&lt;/code&gt; in except array so that CSRF token is not checked for.   &lt;/p&gt;

&lt;p&gt;So in my login function I need to check an email / password against DB values.  If they are indeed correct I return a token, if not return them to HELL!!!!!!!!!  No but for real.  Normally on a web app it would redirect to login but this is all for a mobile application and I'm not 100% sure of the flow for that scenario.  I'll cross that bridge in the next couple of weeks and you can bet there will be talk about it all here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function login(Request $request)
    {
        $user = User::where('email', $request-&amp;gt;email)-&amp;gt;first();

        if (! $user || ! Hash::check($request-&amp;gt;password, $user-&amp;gt;password)) {
            throw ValidationException::withMessages([
                'email' =&amp;gt; ['The provided credentials are incorrect.'],
            ]);
        }

        return $user-&amp;gt;createToken($request-&amp;gt;device_name)-&amp;gt;plainTextToken;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this is the route I went, you can use &lt;code&gt;Auth::attempt&lt;/code&gt; which takes in an email/password and returns a boolean this is just the particular way that I went.  So first off the email passed in is not in our DB it throws and exception and returns an error message.  Same if the passed in password and the stored password (using the Hash facade, cause remember we can't just check them regularly) for the now user (by the passed in email) do not match.  So if all is good we return the token.  Now eventually I'm gonna make this all into a nice API resource but for now we are just making sure that the basics are installed.     So hit the route in POSTMAN with an email / password that you know works and you should get something like this in return: &lt;code&gt;5|eOMh3OFK4u21rx6Ggqj4QXCzSQnwvO0lpB47baK1&lt;/code&gt; and if the creds don't match you get our home page returned.  Again I need to customize all of this but for now I want to make sure with proper creds we get a token then hit a route with that token and make sure it's good.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::middleware('auth:api')-&amp;gt;get('/user', function (Request $request) {
    return $request-&amp;gt;user();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This a great way to test the token and it's the first route in my &lt;code&gt;api.php&lt;/code&gt; file and again this may be different depending on how your routes are setup.  So now we have one more thing to take care of and it's to set the API driver to 'sanctum' and this can be found in the &lt;code&gt;auth.php&lt;/code&gt; config file.  Then generally we'd set the provider to &lt;code&gt;users&lt;/code&gt; since that is where I added the trait &lt;code&gt;HasApiTokens&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Last things last I add my newly created token in the Auth Headers as a Bearer Token in postman and use the route to check if my token is valid.  &lt;code&gt;/api/user&lt;/code&gt; and if the token is valid it should return the user whom the token was created for.  If the token is invalid then you'll get the login page returned.  Again I need to figure out the flow of things but I can verify that in fact my new authentication system is in fact working.  One thing to make sure is anytime you make a change to a config file you'll need to run &lt;code&gt;php artisan config:cache&lt;/code&gt; or &lt;code&gt;php artisan config:clear&lt;/code&gt; so those new config values are cached.  So that's really it for this week and again if you've every set up passport or any other type of JWT authentication system for laravel this was probably one of the worst things you've read in who knows how long, so for that I apologize, but I warned you at first and now that apology has been revoked.  Till next week...&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>sanctum</category>
      <category>authentication</category>
      <category>tokens</category>
    </item>
    <item>
      <title>Top 5 Best Python GUI Libraries</title>
      <author>Pritesh Bhoi</author>
      <pubDate>Sun, 20 Jun 2021 18:08:46 +0000</pubDate>
      <link>https://dev.to/priteshbhoi/top-5-best-python-gui-libraries-5h5h</link>
      <guid>https://dev.to/priteshbhoi/top-5-best-python-gui-libraries-5h5h</guid>
      <description>&lt;p&gt;In this article, we will go through the top 5 Python GUI libraries that you can use in your projects. Keep reading to find out about them.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-is-a-gui"&gt;
  &lt;/a&gt;
  What is a GUI?
&lt;/h1&gt;

&lt;p&gt;A GUI or a graphical user interface is an interactive environment to take responses from users on various situations such as forms, documents, tests, etc. It provides the user with a good interactive screen than a traditional Command Line Interface (CLI).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-pyqt5"&gt;
  &lt;/a&gt;
  1. PyQT5
&lt;/h2&gt;

&lt;p&gt;PyQT5 is a graphical user interface (GUI) framework for Python. It is very popular among developers and the GUI can be created by coding or a QT designer. A QT Development framework is a visual framework that allows drag and drop of widgets to build user interfaces&lt;/p&gt;

&lt;p&gt;For the installation of PyQT5 , you can use the following command :&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install pyqt5&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-python-tkinter"&gt;
  &lt;/a&gt;
  2. Python Tkinter
&lt;/h2&gt;

&lt;p&gt;Another GUI framework is called Tkinter. Tkinter is one of the most popular Python GUI libraries for developing desktop applications. It’s a combination of the TK and python standard GUI framework.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-pyside-2"&gt;
  &lt;/a&gt;
  3. PySide 2
&lt;/h2&gt;

&lt;p&gt;The third Python GUI libraries that we are going to talk about is PySide2 or you can call it QT for python. Qt for Python offers the official Python bindings for Qt (PySide2), enabling the use of its APIs in Python applications, and a binding generator tool (Shiboken2) which can be used to expose C++ projects into Python.&lt;/p&gt;

&lt;p&gt;So now let me show you the installation process and also an example. So for the installation, you can just simply use:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install PySide2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-kivy"&gt;
  &lt;/a&gt;
  4. Kivy
&lt;/h2&gt;

&lt;p&gt;Another GUI framework that we are going to talk about is called Kivy. Kivy is an Open source Python library for the rapid development of applications that make use of innovative user interfaces, such as multi-touch apps.&lt;/p&gt;

&lt;p&gt;Coming to the installation of Kivy, you need to install the dependency “glew”. You can use the pip command as below:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install docutils pygments pypiwin32 kivy.deps.sdl2 kivy.deps.glew&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Enter this command and hit enter, it will be installed. After that you need to type this command to install Kivy:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install Kivy&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-wxpython"&gt;
  &lt;/a&gt;
  5. wxPython
&lt;/h2&gt;

&lt;p&gt;So the last GUI framework that we are going to talk about is wxPython. wxPython is a cross-platform GUI toolkit for the Python programming language.&lt;/p&gt;

&lt;p&gt;Now I’m going to show you the installation process and create a simple example. So for the installation just type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install wxPython&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;So now we have seen 5 Python GUI libraries and in my opinion, PySide2 and pyQt5 are the more powerful GUI frameworks. But they do come with a commercial license and that explains why they’re feature-rich. Tkinter, Kivy, and wxPython are the free GUI libraries for Python.&lt;/p&gt;

&lt;p&gt;What’s your favorite GUI library in Python?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-gigs-"&gt;
  &lt;/a&gt;
  My Gigs -
&lt;/h1&gt;

&lt;p&gt;1 ) &lt;a href="https://www.fiverr.com/share/4Xo9q1"&gt;https://www.fiverr.com/share/4Xo9q1&lt;/a&gt;&lt;br&gt;
2 ) &lt;a href="https://www.fiverr.com/share/ZRl3vk"&gt;https://www.fiverr.com/share/ZRl3vk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Melhores Plataformas de Lo-Fi: No Trabalho ou Estudo e sua importância durante a Pandemia</title>
      <author>Paulo Freitas </author>
      <pubDate>Sun, 20 Jun 2021 18:03:52 +0000</pubDate>
      <link>https://dev.to/paulofreitas_py/melhores-plataformas-de-lo-fi-no-trabalho-ou-estudo-e-sua-importancia-durante-a-pandemia-4d48</link>
      <guid>https://dev.to/paulofreitas_py/melhores-plataformas-de-lo-fi-no-trabalho-ou-estudo-e-sua-importancia-durante-a-pandemia-4d48</guid>
      <description>&lt;p&gt;Deste a pandemia me tornei um viciado em Lo-fi e dessa forma queria compartilhar alguns pontos sobre esse novo conceito musical.&lt;/p&gt;

&lt;p&gt;Primeiro ponto: O que é música lo-fi? O termo vem do inglês low fidelity, ou seja, baixa fidelidade. Ou seja, a música lo-fi tem essa característica da leveza e da simplicidade, e por ser, em grande parte, livre de vocais, tem sido muito buscada para auxiliar a manter o foco em casa, durante o trabalho em home-office, ou mesmo para relaxar enquanto se lê um livro ou espera o sono chegar. E apesar do estilo lo-fi hip hop estar super em alta, ele não tem a agressividade, a percussividade intensa e os subgraves do hip hop tradicional, mantendo o ritmo mais lento com os chamados "beats de lo-fi". Aliás, o lo-fi hip hop, quando não tem absolutamente nenhuma parte cantada, é o que deixa o estilo ainda mais suave e relaxante. Muitas vezes, encontramos samples de monólogos ou diálogos extraídos filmes, animes ou noticiários no meio da música.&lt;br&gt;
Segundo ponto: Qual a relação entre a música lo-fi com a pandemia e a quarentena? Temos percebido um aumento considerável de assinantes, promoções e criações de novas playlists nos serviços de streaming apresentando músicas com batidas suaves, melodias viajantes, muitas vezes livres de letras, completamente instrumentais e, no caso do hip hop, repletas de componentes eletrônicos e até rimas que remetem ao rap, em vários idiomas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-lofi-%C3%A9-onipresente"&gt;
  &lt;/a&gt;
  O lo-fi é onipresente
&lt;/h1&gt;

&lt;p&gt;Os grandes canais de lo-fi hip hop já marcam presença em várias plataformas online, mas é no YouTube que a coisa se concentra. Por lá, você encontra não só os canais oficiais dos principais nomes da "cena" lo-fi atual, como também dá de cara com rádios, playlists, novos artistas e lives de conteúdo para relaxar enquanto trabalha ou procura aliviar sua tensão no meio da pandemia.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lofi-brazuca"&gt;
  &lt;/a&gt;
  Lo-fi brazuca
&lt;/h1&gt;

&lt;p&gt;Não é só lá fora que a música lo-fi está bombando. No Brasil, os gêneros lo-fi hip hop ou apenas a música lo-fi também estão em alta: de janeiro para cá, percebemos um incremento considerável no volume de buscas pelos termos "lofi" e "lo fi", em um período que coincide com a pandemia do novo coronavírus, e mais: com a epidemia da COVID-19 no Brasil, já que os volumes de buscas de março e abril aumentaram em até três vezes nesse intervalo. Será que as pessoas estão buscando se concentrar mais no home office? Ou será que preferem ouvir o novo estilo simplesmente porque estão passando muito mais tempo em casa?&lt;/p&gt;

&lt;p&gt;Links:&lt;br&gt;
&lt;a href="https://ffm.to/lofisleep?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Bloom Sleep Rain&lt;/a&gt;&lt;br&gt;
&lt;a href="https://open.themusicport.com/url/kx0kd7?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Forest&lt;/a&gt;&lt;br&gt;
&lt;a href="https://open.spotify.com/playlist/66YQDZDPxIAotL6fOID7BJ?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Hip Hop&lt;/a&gt;&lt;br&gt;
&lt;a href="http://smarturl.it/pokechill?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Poké &amp;amp; Chill&lt;/a&gt;&lt;br&gt;
&lt;a href="https://chillhop.com/spotify_playlists/?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;ChillHop Radio&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fanlink.to/lofigirl-music?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Girl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extra:&lt;br&gt;
&lt;a href="https://youtu.be/rA56B4JyTgI"&gt;chill beats to quarantine to Will Smith&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZhstyJSNKME"&gt;lofi hip hop - brazil songs playlist&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/EtrL_x8sceY"&gt;Mix LoFi Hip Hop Brasil para estudar, trabalhar ou dormir ~ Vol. 1&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/fo5Jp9Hekg8"&gt;Lo Fi Brazil Songs Playlist&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#post-orignal"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.instagram.com/p/COigLTlshVt/"&gt;Post Orignal&lt;/a&gt;
&lt;/h3&gt;

</description>
    </item>
    <item>
      <title>Create professional portfolio website with Nextjs and ChakraUI</title>
      <author>Muhammad  Ahmad</author>
      <pubDate>Sun, 20 Jun 2021 18:00:11 +0000</pubDate>
      <link>https://dev.to/m_ahmad/create-professional-portfolio-website-with-nextjs-and-chakraui-4lkn</link>
      <guid>https://dev.to/m_ahmad/create-professional-portfolio-website-with-nextjs-and-chakraui-4lkn</guid>
      <description>&lt;p&gt;Currently, I'm learning Nextjs and Typescript. And for learning perspective I decided to rebuilt my portfolio website with Nextjs. And I really loved it. It was so easy to recreate my portfolio website with Nextjs. &lt;br&gt;
So far I'm using some of Nextjs features.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built with
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;React Framework - &lt;a href="https://nextjs.org/"&gt;Nextjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;UI components - &lt;a href="https://chakra-ui.com"&gt;Chakra UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Icons - &lt;a href="https://react-icons.github.io/react-icons/"&gt;react icons&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo Link:&lt;/strong&gt; &lt;a href="https://my-portfolio-ma-ahmad.vercel.app"&gt;NextPortfolio&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub Repo:&lt;/strong&gt; &lt;a href="https://github.com/MA-Ahmad/myPortfolio"&gt;Repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#skills"&gt;
  &lt;/a&gt;
  Skills
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pJP6Emi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy9nhrh697g1czkbfy1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pJP6Emi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy9nhrh697g1czkbfy1z.png" alt="screen1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#open-source-projects"&gt;
  &lt;/a&gt;
  Open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9WnZQVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r98v94u1cidrf1ycq33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9WnZQVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r98v94u1cidrf1ycq33.png" alt="screen2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4HjCFh51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel2ey7j60u5q7psjxmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HjCFh51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel2ey7j60u5q7psjxmj.png" alt="screen3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#developer-story"&gt;
  &lt;/a&gt;
  Developer story
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DG48pyhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6srfuga2owd9xk32cu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DG48pyhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6srfuga2owd9xk32cu1.png" alt="screen4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: I have already created this website with reactjs and chakraUI.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/m_ahmad" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrvEKvHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iCCO7GRa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370400/bda2fd3e-cb65-4abb-81e6-1f50edf567dd.png" alt="m_ahmad image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/m_ahmad/portfolio-website-template-built-with-react-and-chakraui-15ok" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Built Portfolio website with React and ChakraUi&lt;/h2&gt;
      &lt;h3&gt;Muhammad  Ahmad ・ Apr 3 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
