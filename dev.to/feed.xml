<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Making a footer stick to the bottom with CSS</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 26 Dec 2020 05:55:28 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/making-a-footer-stick-to-the-bottom-with-css-212g</link>
      <guid>https://dev.to/dailydevtips1/making-a-footer-stick-to-the-bottom-with-css-212g</guid>
      <description>&lt;p&gt;Ever wanted to have a footer that's stuck to the bottom, but will push down if the content is bigger?&lt;/p&gt;

&lt;p&gt;To demonstrate I've created this image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T68p3eHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608562932355/j_e64Jhh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T68p3eHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608562932355/j_e64Jhh8.png" alt="CSS Sticky footer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What this illustrates is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;left: Green box is the viewport, yellow is the content which is very small, and the pink footer is stuck to the bottom&lt;/li&gt;
&lt;li&gt;right: Content is larger than the viewport so it pushed the footer down as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this specific problem, there are quite a few solutions, which all have their pros and cons.&lt;/p&gt;

&lt;p&gt;I'll just be demonstrating two of them since I think they are the most mainstream ones.&lt;/p&gt;

&lt;p&gt;Those will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#heading-css-flexbox-sticky-footer"&gt;CSS flexbox sticky footer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#heading-css-grid-sticky-footer"&gt;CSS grid sticky footer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#css-flexbox-sticky-footer" class="anchor"&gt;
  &lt;/a&gt;
  CSS flexbox sticky footer
&lt;/h2&gt;

&lt;p&gt;With flex, we can easily achieve this sticky footer effect by expanding our content section.&lt;/p&gt;

&lt;p&gt;What this means is that we set our body to be a flex element, and the content part will have the &lt;code&gt;flex: 1 0 auto&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;This value forces the content to expand as the biggest element, so if we have a small content area it will auto expand to fill the space.&lt;/p&gt;

&lt;p&gt;The HTML structure we will be using for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Content goes here
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  I'm a sticky footer
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's first add a flex property to our body:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This tells our body to become a flex element, which flexes elements vertically.&lt;br&gt;
Then we make the minimum height based on the viewport.&lt;/p&gt;

&lt;p&gt;Then all we have to do is add the following property to our content div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That line will force the content block to space out between the content and the footer.&lt;/p&gt;

&lt;p&gt;You can see this method in action on the following Codepen.&lt;br&gt;
You can use the button to toggle between no text and a lot of text.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/gOwxzjO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-grid-sticky-footer" class="anchor"&gt;
  &lt;/a&gt;
  CSS grid sticky footer
&lt;/h2&gt;

&lt;p&gt;Now for the grid is a very similar setup, we can actually use the same &lt;code&gt;HTML&lt;/code&gt; for this method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Content goes here
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  I'm a sticky footer
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now for our body we can use the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will tell our body to behave like a grid and have 2-row setups where the first one will use &lt;code&gt;1fr&lt;/code&gt; which means 1 fraction unit.&lt;/p&gt;

&lt;p&gt;It comes down to the content expanding whatever it needs or can fill, and the footer being auto, which means it will take how the size of the copy in the footer.&lt;/p&gt;

&lt;p&gt;Then we don't even need any styling for our content div.&lt;/p&gt;

&lt;p&gt;This result in the following:&lt;/p&gt;

&lt;p&gt;Again you can click the button to toggle the copy.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/yLaojmp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>How to schedule and manage tasks using crontab</title>
      <author>Javed Shaikh</author>
      <pubDate>Sat, 26 Dec 2020 03:19:32 +0000</pubDate>
      <link>https://dev.to/shaikh/how-to-schedule-and-manage-tasks-using-crontab-20dj</link>
      <guid>https://dev.to/shaikh/how-to-schedule-and-manage-tasks-using-crontab-20dj</guid>
      <description>&lt;p&gt;Before going into details about crontab, lets suppose you are running an online store and you want to send an email about latest deals on every Friday at 9AM MST. So how you can achieve this. Of course you can write your own job scheduler of n number of lines of codes if you have that much of time or you can simply use crontab available in all Unix and Linux operating system to schedule a task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-crontab" class="anchor"&gt;
  &lt;/a&gt;
  What is Crontab
&lt;/h3&gt;

&lt;p&gt;Crontab is short form of cron table. The cron is a utility available on all Linux and Unix operating system that runs a task or process at a given date and time. So  crontab is actually a table that contains script or commands along with date and time to be run at.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-view-the-crontab-or-cron-table" class="anchor"&gt;
  &lt;/a&gt;
  How to view the crontab or cron table
&lt;/h3&gt;

&lt;p&gt;On Ubuntu you can use crontab -l to view the current table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;crontab &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;span class="c"&gt;# Edit this file to introduce tasks to be run by cron.&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# Each task to run has to be defined through a single line&lt;/span&gt;
&lt;span class="c"&gt;# indicating with different fields when the task will be run&lt;/span&gt;
&lt;span class="c"&gt;# and what command to run for the task&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# To define the time you can provide concrete values for&lt;/span&gt;
&lt;span class="c"&gt;# minute (m), hour (h), day of month (dom), month (mon),&lt;/span&gt;
&lt;span class="c"&gt;# and day of week (dow) or use '*' in these fields (for 'any').&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# Notice that tasks will be started based on the cron's system&lt;/span&gt;
&lt;span class="c"&gt;# daemon's notion of time and timezones.&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# Output of the crontab jobs (including errors) is sent through&lt;/span&gt;
&lt;span class="c"&gt;# email to the user the crontab file belongs to (unless redirected).&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# For example, you can run a backup of all your user accounts&lt;/span&gt;
&lt;span class="c"&gt;# at 5 a.m every week with:&lt;/span&gt;
&lt;span class="c"&gt;# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# For more information see the manual pages of crontab(5) and cron(8)&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# m h  dom mon dow   command&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Use crontab -e to edit and manage cron table&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-set-date-and-time-of-job-run" class="anchor"&gt;
  &lt;/a&gt;
  How to set date and time of job run
&lt;/h3&gt;

&lt;p&gt;Below is the format of crontab that is supported by all Linux systems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# * * * * * command to be executed&lt;/span&gt;
&lt;span class="c"&gt;# | | | | |&lt;/span&gt;
&lt;span class="c"&gt;# | | | | |&lt;/span&gt;
&lt;span class="c"&gt;# | | | | |&lt;/span&gt;
&lt;span class="c"&gt;# | | | | |_______________Day of the week (0 - 6)(Sunday to Saturday)&lt;/span&gt;
&lt;span class="c"&gt;# | | | |_______________Month (1 - 12)&lt;/span&gt;
&lt;span class="c"&gt;# | | |_______________Day of the Month(1 - 31)&lt;/span&gt;
&lt;span class="c"&gt;# | |_______________Hour(0 - 23)&lt;/span&gt;
&lt;span class="c"&gt;# |_______________Minute(0 - 59)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets get into some examples for better understanding&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; Lets get into the first example we discussed at the beginning i.e.&lt;br&gt;
Run a job to send an email to all subscriber at 9AM every Friday&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;0  9  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  5  /usr/bin/python3 sendEmail.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; In below example, we are running a job every 15 minutes( Note / operator)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;*&lt;/span&gt;/15  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  doSomething.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; Here we are running a job every 1st and 5th hour ( Note the comma)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;*&lt;/span&gt;  1,5  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  doSomething.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;  Below job runs on 1st January every year at 7AM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;0  7  &lt;span class="k"&gt;*&lt;/span&gt;  1  &lt;span class="k"&gt;*&lt;/span&gt;  happyNewYear.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-if-you-want-to-run-a-job-at-random-minutes-every-hour" class="anchor"&gt;
  &lt;/a&gt;
  What if you want to run a job at random minutes every hour
&lt;/h3&gt;

&lt;p&gt;As of now we have seen how crontab can be used to schedule a job at a specific date and time. But what if we want to run a job at a random time or say random minute every hour. Well we can achieve this as well by writing a &lt;strong&gt;sleep&lt;/strong&gt; command as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;0  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;m&lt;span class="p"&gt;;&lt;/span&gt;sh test.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets understand what we did above. As per crontab rules above command set will be run at every hour. At the start of every hour, the cron will encounter the two commands and the first command is to sleep for random minutes. So this cron will delay for this random minutes and then it will execute the second command which is our job once it wakes up from sleep 😃&lt;/p&gt;

&lt;p&gt;If you want to do some more stuff than just sleep, we can write a shell script for the same instead of sleep.&lt;/p&gt;

&lt;p&gt;As shown below you can run a python script from shell script after delaying n no of minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crontab:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;0  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  &lt;span class="k"&gt;*&lt;/span&gt;  sh test.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;test.sh&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/sh&lt;/span&gt;
&lt;span class="c"&gt;#test.sh&lt;/span&gt;

&lt;span class="nv"&gt;TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;RANDOM%60&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TIME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;m"&lt;/span&gt;
&lt;span class="c"&gt;#Do some stuff&lt;/span&gt;
&lt;span class="c"&gt;#Do some more stuff&lt;/span&gt;
/usr/bin/python3 /mybots/newsbot.py
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So basically you are running a python code from a shell script once after delaying RANDOM minutes and after doing some more code stuffs:)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Cronjob is a very helpful utility table that is being used to schedule a task. Rules are very simple and easy to remember. You just have to follow the correct format to run a task or script. Hope this help you schedule your script/jobs :). &lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>python</category>
      <category>linux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is JSON? And why do you need it?</title>
      <author>Rizwan Hasan</author>
      <pubDate>Fri, 25 Dec 2020 20:57:34 +0000</pubDate>
      <link>https://dev.to/techlearners/what-is-json-and-why-do-you-need-it-21nd</link>
      <guid>https://dev.to/techlearners/what-is-json-and-why-do-you-need-it-21nd</guid>
      <description>&lt;p&gt;Before going on to the topic &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt;, I would like to discuss a simple example because it will be a lot easier to explain &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; after the example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRJOcrzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7niixed6bqqc1a7a5pns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRJOcrzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7niixed6bqqc1a7a5pns.png" alt="Thumbnail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose we are developing desktop software or a web application. So, for the desktop software we need to save the changes of settings that users have made so that when he/she opens the software again at another time, he/she doesn’t need to change the settings again as he/she changed it earlier. Also, it’s a very annoying thing for a user to config the same changes at every start. Now, what about web applications? Web apps have one or more databases to store changes. Let’s think about a drawback here. Web apps need to store many temporary configuration or data to serve the user with a good experience for that session. And it’s an obvious thing that, developers can’t let an app to make the database busy for some temporary session data. Now, the question comes about how we store these changes or temporary data on storage? Confused? Again thinking about using &lt;a href="https://en.wikipedia.org/wiki/Database"&gt;databases&lt;/a&gt; like &lt;a href="https://en.wikipedia.org/wiki/Oracle_Database"&gt;Oracle&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/MariaDB"&gt;Mariadb&lt;/a&gt;? Of course, we can do that but it’s not an efficient solution here. Ok, Keep down your thinking a bit and I’m keeping all the hard things aside, just store the data as a &lt;a href="https://en.wikipedia.org/wiki/Text_file"&gt;Text&lt;/a&gt; file. Wow, our storing problem is solved. But a new problem is knocking at the door, how to retrieve the data and get the same &lt;a href="https://en.wikipedia.org/wiki/Data_structure"&gt;data structures&lt;/a&gt; in the same manner that we had applied in the application? On a simple text file, there are lackings of data formation for the &lt;a href="https://en.wikipedia.org/wiki/Data_structure"&gt;data structures&lt;/a&gt; that we use in any program. Here comes the life-saving concept of data serialization, also we are very close to jumping on &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is Data Serialization?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data Serialization is the process of converting structured data to a format that allows sharing or storage of the data in a form that allows recovery of its original structure when needed. The reason for serializing data is finding some sort of universal format that can be easily shared across different applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-json" class="anchor"&gt;
  &lt;/a&gt;
  What is JSON?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; is a data interchanging format that uses human-readable text to transmit data objects consisting of data structure and it’s the most widespread format for data serialization. Simply &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; is text, written with JavaScript object notation. &lt;strong&gt;“JavaScript Object Notation”&lt;/strong&gt; is the full form of &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt;. Many developers don’t like &lt;a href="https://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt; because of their perspectives. But don’t worry, it’s alright if your knowledge is empty about &lt;a href="https://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lMCSdhKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pwcvsq0ui9w5zzfvz6dc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMCSdhKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pwcvsq0ui9w5zzfvz6dc.png" alt="JSON Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-json" class="anchor"&gt;
  &lt;/a&gt;
  Why JSON?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; is mainly intended for data interchanging among the applications. Parsing data from one application to another through &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; is so much easy because of its &lt;a href="https://en.wikipedia.org/wiki/Language-independent_specification"&gt;language-independent&lt;/a&gt; data format. Almost every programming language has JSON support through official and 3rd party. Now, referencing my example, &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; can be used as a configuration or temporary data storing file also for any application. There is an important fact that &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; lacks &lt;a href="https://en.wikipedia.org/wiki/Abstract_data_type"&gt;Abstract Data Type&lt;/a&gt; (ADT) feature because of its data serialization format which breaks the opacity of &lt;a href="https://en.wikipedia.org/wiki/Abstract_data_type"&gt;ADT&lt;/a&gt; by potentially exposing private implementation details.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;A very popular database named “MongoDB” uses JSON-like documents with the schema.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#basics-of-json" class="anchor"&gt;
  &lt;/a&gt;
  Basics of JSON
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; uses “.json” for filename extension. You can write JSON file using normal text editors like &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Windows"&gt;Windows&lt;/a&gt;’s built-in Notepad. &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; supports String, Number, Object (JSON object)/Hashmap, Array/List, Boolean and N*ull* data types.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Let’s see some examples&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#string" class="anchor"&gt;
  &lt;/a&gt;
  String
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Rizwan Hasan"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#number" class="anchor"&gt;
  &lt;/a&gt;
  Number
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JSON names require double quotes ("").&lt;/li&gt;
&lt;li&gt;JSON uses a colon (“:”) for separating names and values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#objects-hashmap" class="anchor"&gt;
  &lt;/a&gt;
  Objects / Hashmap
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"student"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Rizwan Hasan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Male"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Here key “student” has an object value and that object has some names.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSON uses curly braces (“{}”) for object separation and commas (“,”) for names separation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#array-list" class="anchor"&gt;
  &lt;/a&gt;
  Array / List
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"students"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Rizwan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Sakib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"Natsu"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Here key “student” have an array value and that array has some name element.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;JSON uses square brackets (“[]”) for array declaring and commas (“,”) for element separation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#boolean" class="anchor"&gt;
  &lt;/a&gt;
  Boolean
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"answer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#null" class="anchor"&gt;
  &lt;/a&gt;
  Null
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"nickname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#data-types-in-nested-manner" class="anchor"&gt;
  &lt;/a&gt;
  Data types in Nested manner
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"students"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Rizwan Hasan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"department"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"CSE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Male"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"paid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cgpa"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.13&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Faria Hasan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"department"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"BBA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Female"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"paid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cgpa"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.56&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h3&gt;

&lt;p&gt;Here we are storing some student's information. First, there is an object which’s key is named “students” and the value is an array blocked with square brackets. In the array, there is two student’s information. Every element of the array is also an object and they contain some information name, age, department, sex, paid, and GPA. Name, department, and sex are strings. Id, age, and, GPA is numbers. Lastly paid is boolean.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So far I discussed JSON but still, there are a lot of things to know about like how to use it with different programming languages and how to do data interchanging between two or more languages. Here I only focused on giving the basics because after this pretty basic you are ready to go with JSON more advanced and also with the upgraded version of JSON called &lt;a href="https://en.wikipedia.org/wiki/YAML"&gt;YAML&lt;/a&gt;. To learn more about JSON, I suggest this free online tutorial from Tutorialspoint &lt;a href="https://www.tutorialspoint.com/json/index.htm"&gt;here&lt;/a&gt;. In the future, I will try to cover how to use JSON with popular programming languages like Python, Java, Kotlin, and C++.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Share your opinion in the discussion section below and of course the questions if any.&lt;/em&gt; Don't forget to follow us.&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;&lt;em&gt;AND SUBSCRIBING to our YouTube&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://www.youtube.com/c/TechLearnersInc"&gt;&lt;strong&gt;TechLearnersInc&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&lt;em&gt;and Telegram&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://t.me/TechLearners"&gt;&lt;strong&gt;t.me/TechLearners&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&lt;em&gt;will be amazing.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a Native Java Application for ARM64 with Quarkus</title>
      <author>Dr. Daniel Thommes</author>
      <pubDate>Fri, 25 Dec 2020 20:48:20 +0000</pubDate>
      <link>https://dev.to/dthommes/building-a-native-java-application-for-arm64-with-quarkus-2n9m</link>
      <guid>https://dev.to/dthommes/building-a-native-java-application-for-arm64-with-quarkus-2n9m</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.graalvm.org/reference-manual/native-image/"&gt;Graal native image compiler&lt;/a&gt; is a great tool to significantly reduce the start time and memory consumption of Java applications by compiling them into native executables. However, compilation with this tool is sometimes hard to realize and can cause a lot of effort to get right.&lt;/p&gt;

&lt;p&gt;With Red Hat's &lt;a href="https://quarkus.io/"&gt;Quarkus framework&lt;/a&gt;, many of the problems with native-image can be eliminated. The Quarkus team provides numerous out-of-the box solutions for the sometimes hard-to-configure native build process. With Quarkus, implementing fast Java apps can be achieved with manageable effort.&lt;/p&gt;

&lt;p&gt;By using Graal native image and Quarkus, Java applications become an interesting option for embedded use cases where fast start times and low memory consumption are key. Many embedded systems run on ARM hardware as it is more energy efficient than x86 hardware. With Java applications natively build for ARM hardware, a new dimension of code-reuse becomes possible. Java code can be shared between all kinds of platforms and architectures, meeting performance requirements of embedded systems, desktop computers and cloud environments in one go.&lt;/p&gt;

&lt;p&gt;This article is about natively building Quarkus-based Java applications for ARM hardware and testing the result as part of a container-based development workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The first thing that comes into mind when targeting ARM is &lt;strong&gt;cross-compilation&lt;/strong&gt;. When you are used to working with C++ compilers, you probably know, that most of them support compilation for target architectures that differ from the build machine. This would be great for Java apps as well. However, Graal native image does currently not support cross-compilation, which is a problem when you are working on an x86 machine.&lt;/p&gt;

&lt;p&gt;So, if you want to build a native executable for ARM, you must run the ARM version of the Graal native image compiler. To be precise: You must run the &lt;strong&gt;aarch64&lt;/strong&gt; version of native-image on an aarch64 Linux operating system.&lt;/p&gt;

&lt;p&gt;There are two options, how you can achieve this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build on real ARM hardware running an aarch64 version of Linux.&lt;/li&gt;
&lt;li&gt;Build in a virtual ARM environment based on QUEMU executing an aarch64 version of Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's look into both options and their pros and cons:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-on-arm-hardware" class="anchor"&gt;
  &lt;/a&gt;
  Building on ARM Hardware
&lt;/h2&gt;

&lt;p&gt;The first option is to get some &lt;strong&gt;powerful ARM based computer&lt;/strong&gt; that is able to run the resource-intensive native-image compile process. If you plan to build your apps in minutes and not in hours, you might look for something more powerful than a Raspberry PI. If you still want to stick with your Pi, &lt;a href="https://github.com/oracle/graal/issues/3043"&gt;consider some additional configuration&lt;/a&gt;. We have good experience with &lt;a href="https://developer.nvidia.com/buy-jetson"&gt;NVIDIA's Jetson boards&lt;/a&gt; for building our apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-image-for-building-quarkus" class="anchor"&gt;
  &lt;/a&gt;
  Docker Image for Building Quarkus
&lt;/h3&gt;

&lt;p&gt;Quarkus allows you to build your application with a Docker image containing the native-image executable. The Quarkus team provides some pre-configured images, that are used internally by Maven or Gradle to build the Linux x86_64 image of you application. To allow building with docker, you must &lt;a href="https://quarkus.io/guides/container-image#docker"&gt;configure your Quarkus project to use the extension &lt;strong&gt;container-image-docker&lt;/strong&gt;&lt;/a&gt;. If you are building with Gradle, this simply means, that you add the following dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'io.quarkus:quarkus-container-image-docker'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, the problem is, that the &lt;a href="https://quay.io/repository/quarkus/ubi-quarkus-native-image"&gt;Quarkus build image&lt;/a&gt; is only available for x86. As a result, you cannot use it to build your app on ARM hardware. What you need, is an image that behaves like the Quarkus build image and is available for Linux aarch64.&lt;/p&gt;

&lt;p&gt;But, that's why we are here. Good news: Oracle provides an image for our desired architecture. The &lt;a href="https://hub.docker.com/r/oracle/graalvm-ce"&gt;oracle/graalvm-ce&lt;/a&gt; image is a multi-architecture image that has an aarch64 variant. So, let's build our Quarkus build image based on the one from the Graal team. This can be done by creating a Dockerfile  with the following content:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile.build.aarch64&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; oracle/graalvm-ce:20.2.0-java11 AS build&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;gu &lt;span class="nb"&gt;install &lt;/span&gt;native-image
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /project&lt;/span&gt;
&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; ["/project"]&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["native-image"] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please note, that the &lt;code&gt;project&lt;/code&gt; volume is used by the Quarkus builder to mount you app's sources into the image. The &lt;code&gt;ENTRYPOINT&lt;/code&gt; is necessary, because Quarkus expects the image to execute the native-image tool when being run.&lt;/p&gt;

&lt;p&gt;To use this image in your build process on an ARM machine, you have to build it there. It's obvious, that you should have docker installed for this purpose. Then, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-f&lt;/span&gt; Dockerfile.build.aarch64 &lt;span class="nt"&gt;-t&lt;/span&gt; nevernull/quarkus-build-aarch64 &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will create the image with the name &lt;strong&gt;nevernull/quarkus-build-aarch64&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, use this image when building Quarkus. Quarkus kindly provides a property for this: With &lt;a href="https://quarkus.io/guides/building-native-image#quarkus-native-pkg-native-config_quarkus.native.builder-image"&gt;&lt;strong&gt;quarkus.native.builder-image&lt;/strong&gt;&lt;/a&gt;, you can provide the name of the image, when building. If you are using Gradle, you call it with the other properties for enabling native container-based build as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./gradlew build &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-Dquarkus&lt;/span&gt;.package.type&lt;span class="o"&gt;=&lt;/span&gt;native &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-Dquarkus&lt;/span&gt;.native.container-build&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-Dquarkus&lt;/span&gt;.native.builder-image&lt;span class="o"&gt;=&lt;/span&gt;nevernull/quarkus-build-aarch64:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When you execute this, you may go and get a coffee. On success, your ARM-ready native executable will be located in the build folder as &lt;code&gt;*-runner&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;Compiling a simple Quarkus-based microservice application with several REST endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.nvidia.com/embedded/jetson-tx2"&gt;NVIDIA Jetson Tx2&lt;/a&gt;: &lt;strong&gt;9 min 30 s&lt;/strong&gt; ☕️ 😏&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-on-x86-with-qemu-arm-emulation" class="anchor"&gt;
  &lt;/a&gt;
  Building on x86 with QEMU ARM emulation
&lt;/h2&gt;

&lt;p&gt;With the above approach, you need ARM hardware to build your app. But what, if you don't have ARM hardware available? You might be able to simulate an ARM environment. For this, you can use the &lt;a href="https://www.qemu.org/"&gt;QEMU&lt;/a&gt; virtualization technology and Docker, as &lt;a href="https://www.docker.com/blog/multi-arch-images/"&gt;it has QEMU support built-in&lt;/a&gt;. Let's go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-aarch64-image-for-building" class="anchor"&gt;
  &lt;/a&gt;
  Create an AARCH64 image for building
&lt;/h3&gt;

&lt;p&gt;If you are running Docker Desktop, all you need to do is start an image that has an aarch64 architecture. QEMU will automatically step in and simulate an ARM environment. So, we can simply use the aarch64 version of our build image above (oracle/graalvm-ce) and run the native-image compiler with it, right?&lt;/p&gt;

&lt;p&gt;The problem is, that you need to tell Docker to explicitly pick up an aarch64 image. Some images have the architecture in their names (pointing to a single definition), but many images are multi-architecture images. This also applies to Oracle's Graal CE image. In this case, Docker will select the image with the same architecture as your build machine. So how do you force Docker to select an aarch64 image?&lt;/p&gt;

&lt;p&gt;Currently, the most simple approach is to point to a concrete image by its &lt;strong&gt;hash value&lt;/strong&gt;. At the time of writing, the hash value of the aarch64 variant of the &lt;a href="https://hub.docker.com/r/oracle/graalvm-ce"&gt;Graal CE 20.2 image&lt;/a&gt; is &lt;code&gt;494222b828e6096bd00b16b9626b54665546fc5b60a8080c99be8d29af829638&lt;/code&gt;, which can be found on its docker hub webpage. Pointing to this version is done by appending the hash value to the image reference in the Dockerfile as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; oracle/graalvm-ce:20.2.0-java11@sha256:494222b828e6096bd00b16b9626b54665546fc5b60a8080c99be8d29af829638 AS build&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;gu &lt;span class="nb"&gt;install &lt;/span&gt;native-image
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /project&lt;/span&gt;
&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; ["/project"]&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["native-image"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-the-aarch64-image-for-building-on-x86" class="anchor"&gt;
  &lt;/a&gt;
  Use the aarch64 image for building on x86
&lt;/h2&gt;

&lt;p&gt;Now, you can build this image on your x86 machine and use it for compiling with Quarkus/native-image. First, build the image with Docker in the same way as before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-f&lt;/span&gt; Dockerfile.build.aarch64 &lt;span class="nt"&gt;-t&lt;/span&gt; nevernull/quarkus-build-aarch64 &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then compile your java app with this image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./gradlew build &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-Dquarkus&lt;/span&gt;.package.type&lt;span class="o"&gt;=&lt;/span&gt;native &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-Dquarkus&lt;/span&gt;.native.container-build&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-Dquarkus&lt;/span&gt;.native.builder-image&lt;span class="o"&gt;=&lt;/span&gt;nevernull/quarkus-build-aarch64:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, go and get a coffee or two... or three.....&lt;/p&gt;

&lt;p&gt;There is a problem: The ARM emulation by QEMU is significantly slower than the bare-metal performance on ARM hardware. While the build process will actually run through, it might not finish on the same day. Let's see:&lt;/p&gt;

&lt;p&gt;Compiling a simple Quarkus-based microservice application with several REST endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://everymac.com/systems/apple/imac/specs/imac-core-i5-3.4-21-inch-aluminum-retina-4k-mid-2017-specs.html"&gt;iMac18,2, Intel Core i5 3,4 GHz, 8GB RAM&lt;/a&gt; - Docker 2.5.0 &amp;amp; QEMU: wait for it....
&lt;strong&gt;4 h 22 min&lt;/strong&gt; 🥱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is about &lt;strong&gt;28 times slower&lt;/strong&gt; than compiling on the Jetson board. And yes, we configured Docker to have access to all 4 cores and all 8GB of RAM &lt;a href="https://docs.docker.com/docker-for-mac/#resources"&gt;as described in the manual&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Résumé&lt;/strong&gt;: Please don't try this at all. Get ARM hardware for building Java apps for aarch64! Maybe take a second look at the &lt;a href="https://developer.nvidia.com/buy-jetson"&gt;NVIDIA's Jetson boards&lt;/a&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-docker-image-for-execution-on-aarch64" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Docker image for execution on AARCH64
&lt;/h2&gt;

&lt;p&gt;Okay, now it's not a great idea to build the native executable with QEMU based ARM simulation. But it might be useful to put the resulting aarch64 executable into a corresponding container for local integration tests. With this approach it is possible to run the &lt;a href="https://quarkus.io/guides/getting-started-testing"&gt;Quarkus-based unit tests&lt;/a&gt; against the executable. We remember: natively compiled Java apps start amazingly fast. Is this true in an QEMU environment as well?&lt;/p&gt;

&lt;p&gt;So, let's imagine a remote build machine or CI pipeline has build the native executable for aarch64 for us. We fetch it and want to put it into a container for integration tests. Again, we are running on an x86 machine. Therefore, we need to force Docker to use an aarch64 version of an image.&lt;/p&gt;

&lt;p&gt;The Quarkus team recommends using the &lt;a href="https://catalog.redhat.com/software/containers/ubi8/ubi-minimal/5c359a62bed8bd75a2c3fba8"&gt;Red Hat Universal Base Image (ubi8/ubi-minimal)&lt;/a&gt; for executing native Java apps. That's great, as it is really small. However, how can we convince Docker to use the aarch64 version of this multi-architecture image on an x86 machine? It's currently not possible to find the hash value of the image on the corresponding webpage. But this hash value exists. And here is how to find it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/docker-for-mac/#command-line"&gt;Enable experimental docker cli features.&lt;/a&gt; Then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker manifest inspect registry.access.redhat.com/ubi8/ubi-minimal
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This outputs the following information about the different components of the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"schemaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"mediaType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/vnd.docker.distribution.manifest.list.v2+json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"manifests"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"mediaType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/vnd.docker.distribution.manifest.v2+json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"size"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;737&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"digest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sha256:5f931273a2b9250318a45914228c25e8e3ea0feec846edd67c92f03af1596a8a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"platform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"architecture"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"amd64"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"os"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"linux"&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"mediaType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/vnd.docker.distribution.manifest.v2+json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"size"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;737&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"digest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sha256:c6592eb9cdd7ea7fa43beddf507ca2a8c2127f13ef66d49baea2fd28e37f62ba"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"platform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"architecture"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arm64"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"os"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"linux"&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"mediaType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/vnd.docker.distribution.manifest.v2+json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"size"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;737&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"digest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sha256:d32fa019f53a718e47714b50d91a19431e40de0174c0d522e5bf703da4235608"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"platform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"architecture"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ppc64le"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"os"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"linux"&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"mediaType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/vnd.docker.distribution.manifest.v2+json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"size"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;737&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"digest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sha256:c16e3df0de887329613549ca94934353bc3d2212bb8e51eb7c0af94805d410ea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"platform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"architecture"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"s390x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"os"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"linux"&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Do you see the SHA hash of the arm64 variant? As described above, you can add it to the ID of the referenced image in your Dockerfile. Here is the default Quarkus Dockerfile in the aarch64 version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; registry.access.redhat.com/ubi8/ubi-minimal@sha256:c6592eb9cdd7ea7fa43beddf507ca2a8c2127f13ef66d49baea2fd28e37f62ba&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /work/&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; build/*-runner /work/application&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;775 /work
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["./application", "-Dquarkus.http.host=0.0.0.0"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When you build this image, make sure, the &lt;strong&gt;aarch64&lt;/strong&gt; variant of the executable (*runner) is located in the &lt;strong&gt;build&lt;/strong&gt; folder. Alternatively, you can work with a different folder (e.g. an architecture-specific sub-folder).&lt;/p&gt;

&lt;p&gt;When you build and run this image, Docker will again simulate an ARM environment. Is it feasible to test with it?&lt;/p&gt;

&lt;p&gt;Starting a natively compiled Quarkus-based microservice application with several REST endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.nvidia.com/embedded/jetson-tx2"&gt;NVIDIA Jetson Tx2&lt;/a&gt; - bare metal: 
&lt;strong&gt;34 ms&lt;/strong&gt; 🚀&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://everymac.com/systems/apple/imac/specs/imac-core-i5-3.4-21-inch-aluminum-retina-4k-mid-2017-specs.html"&gt;iMac18,2, Intel Core i5 3,4 GHz, 8GB RAM&lt;/a&gt; - Docker 2.5.0 &amp;amp; QEMU: 
&lt;strong&gt;900 ms&lt;/strong&gt; 🖖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although the app starts about 27 times slower in the simulation environment, it is so extraordinary fast, that the simulation does not matter. As a result, running integration tests with the setup is feasible, as long as there is no heavy computation involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The Quarkus framework and tools and the Graal native-image technology are great for building fast Java apps for ARM hardware. Fast startup times and low memory consumption make this combination a goto solution for embedded environments.&lt;/li&gt;
&lt;li&gt;To get a productive workflow with these technologies, it is necessary to build on real ARM hardware.&lt;/li&gt;
&lt;li&gt;The QEMU simulation environment on x86 introduces a performance penalty. Execution times grow by more than factor 25, which makes this approach unusable for Graal native-image compilation.&lt;/li&gt;
&lt;li&gt;Running integration tests of native aarch64 executables with QEMU is feasible. If no heavy computations are involved, the resulting apps start and execute fast enough for testing and development purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author" class="anchor"&gt;
  &lt;/a&gt;
  About the Author
&lt;/h2&gt;

&lt;p&gt;Dr. Daniel Thommes is CEO of the NeverNull GmbH. He is expert for AOT-compiled high-performance Java applications. The NeverNull GmbH provides expert knowledge for software projects, architecture and design.&lt;/p&gt;

</description>
      <category>java</category>
      <category>quarkus</category>
      <category>graalvm</category>
      <category>performance</category>
    </item>
    <item>
      <title>Building a basic tarot card app using Python</title>
      <author>Diana Chin</author>
      <pubDate>Fri, 25 Dec 2020 20:15:10 +0000</pubDate>
      <link>https://dev.to/redlotusdesignz/building-a-basic-tarot-card-app-using-python-5ej9</link>
      <guid>https://dev.to/redlotusdesignz/building-a-basic-tarot-card-app-using-python-5ej9</guid>
      <description>&lt;p&gt;Hello, friends! As part of  &lt;a href="https://townhall.hashnode.com/hashnode-christmas-hackathon"&gt;Hashnode's Christmas Hackathon&lt;/a&gt;, I decided to create a basic tarot card app using Python. &lt;/p&gt;

&lt;p&gt;For those who don't know, I was a former professional tarot reader many years ago. I've always enjoyed using tarot cards for my personal and career development. I also use them when I need storytelling ideas for my webcomics and visual novel games.&lt;/p&gt;

&lt;p&gt;When I'm traveling, I rely on my tarot card apps on my phone instead of bringing my physical deck with me. So, I wanted to try and create a basic form of the tarot card app, which pulls three random cards to represent the past, present, and future. The problem that I'm trying to solve? Having a no-frills option to provide instant fortune-reading results on what the past, present, and future will look like for a general reading setting.&lt;/p&gt;

&lt;p&gt;This Python app utilizes the &lt;code&gt;random&lt;/code&gt; library, along with a large list that I manually added all 78 individual cards. I also included a fun  &lt;a href="https://ascii.co.uk/art/crystalball"&gt;crystal ball ASCII art&lt;/a&gt;  in a separate file. It's a beginner-friendly project that offers room for improvement. &lt;/p&gt;

&lt;p&gt;You can see this in action below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AROmaDd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608925211661/OcjxXcmUO.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AROmaDd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608925211661/OcjxXcmUO.gif" alt="tarotcard_python.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running this the second time and you'll get different results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzFlkExP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608926287975/wS_WYIbSs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzFlkExP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608926287975/wS_WYIbSs.gif" alt="tarotcard_python-2.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, if the querent doesn't want a reading, it simply prints out the following message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vtc13SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608926190823/kw8uzRhY9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vtc13SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608926190823/kw8uzRhY9.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-could-be-improved" class="anchor"&gt;
  &lt;/a&gt;
  What could be improved?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The ability to add descriptions for each of the cards. Might need to utilize dictionaries for the next iteration of the tarot card app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensuring that the choices are not duplicated. While it's running functionally as expected, there's a slim chance that either one or all three cards may have the same card. Imagine having all three cards to read Death all at once! I don't think that wouldn't make the querent happy...😅&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The ability to shuffle and draw multiple card options. While the three-card layout is a popular choice, I believe there's room to add a feature on adding multiple cards pulls for the querent. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-for-today" class="anchor"&gt;
  &lt;/a&gt;
  That's all for today!
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you happen to like this article, let me know in the comments section below! You can also follow me on  &lt;a href="http://twitter.com/redlotusdesignz"&gt;Twitter&lt;/a&gt;  for more coding and art adventures. Wishing everyone Merry Christmas and a Happy New Year!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>PWA Metadata in manifest.json</title>
      <author>pssingh21</author>
      <pubDate>Fri, 25 Dec 2020 19:30:25 +0000</pubDate>
      <link>https://dev.to/pssingh21/pwa-metadata-in-manifest-json-3j2m</link>
      <guid>https://dev.to/pssingh21/pwa-metadata-in-manifest-json-3j2m</guid>
      <description>&lt;p&gt;Every PWA should have a manifest file, a JSON file specifying metadata of the app. Manifest.json is required to add PWA to the homescreen. It defines how the app should look like and configures the app's behavior on launch.&lt;/p&gt;

&lt;p&gt;You can find the &lt;code&gt;manifest.json&lt;/code&gt; file in &lt;code&gt;public/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;It should be linked in &lt;code&gt;public/index.html&lt;/code&gt; by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="manifest" href="%PUBLIC_URL%/manifest.json" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#details-on-manifestjson-config" class="anchor"&gt;
  &lt;/a&gt;
  Details on manifest.json config
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#shortname" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;short_name&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Name of your app on home screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;name&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Name of app used on prompt while installing. If not present, short_name will be used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#icons" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;icons&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;It is an array of image objects that is displayed in the home screen. Each of the object in the array must have properties &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;sizes&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;. You may need to add additional property &lt;code&gt;"purpose": "any maskable"&lt;/code&gt; for android devices. For Chrome, you need to provide icons of size 192x192 and 512x512 for auto scaling of icons. They are provided by default while creating PWA with create-react-app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starturl" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;start_url&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;The home URL of page, so that it does not start from the page the user used to add the app to home screen. By default, it is set to &lt;code&gt;.&lt;/code&gt;(home directory). You may modify it according to your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#display" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;display&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;It customizes the browser view for your app. It can take the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;fullscreen&lt;/em&gt;: Open the app in full screen. Browser UI such as address bar and navigation are hidden. Android status bar is also hidden. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;standalone&lt;/em&gt;: The app runs in its own window, separate from the browser. Browser UI elements like address bar and navigation are hidden. Android status bar is not hidden. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;minimal-ui&lt;/em&gt;: It is similar to the standalone mode, but minimal set of UI elements for controlling navigation are displayed. However, the UI elements may differ from browser to browser. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;browser&lt;/em&gt;: Standard browser behavior. All browser UI are displayed. However, "Add to Home screen" is not displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#themecolor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;theme_color&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Sets the color of browser toolbar. It also displays this color in browser tabs while tab switching.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backgroundcolor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;background_color&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Color to be displayed in splash screen when the app is first launched. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;scope&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Defines the scope of PWA. If the user navigates out of scope, the page will be served as a normal site. The start_url should be inside of scope. If the user clicks on a link outside of the scope, it will be rendered in the PWA. To open a outside link on a browser window, add &lt;code&gt;target="_blank"&lt;/code&gt; to the anchor tag. &lt;br&gt;
If the scope is a relative path, the base location will be where the manifest file is located.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#testing-manifestjson" class="anchor"&gt;
  &lt;/a&gt;
  Testing manifest.json
&lt;/h1&gt;

&lt;p&gt;To test if your manifest.json is setup correctly, use the Chrome dev tools. In application section, navigate to Manifest subsection. &lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Awesome VS Code dev containers</title>
      <author>stereobooster</author>
      <pubDate>Fri, 25 Dec 2020 19:05:38 +0000</pubDate>
      <link>https://dev.to/stereobooster/awesome-vs-code-dev-containers-2384</link>
      <guid>https://dev.to/stereobooster/awesome-vs-code-dev-containers-2384</guid>
      <description>&lt;p&gt;Let’s imagine you want to play with a new language or technology. To do this you need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Some tutorial or exercise or &lt;a href="https://www.codewars.com/"&gt;katas&lt;/a&gt;/&lt;a href="http://www.rubykoans.com/"&gt;koans&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Development environment… and it is not that simple&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt; : possible candidates for exercise are: &lt;a href="https://github.com/kanaka/mal"&gt;MAL&lt;/a&gt;, &lt;a href="http://todomvc.com/"&gt;todomvc&lt;/a&gt;, &lt;a href="https://hnpwa.com/"&gt;hnpwa&lt;/a&gt;, &lt;a href="https://github.com/gothinkster/realworld"&gt;realworld&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-environment" class="anchor"&gt;
  &lt;/a&gt;
  Development environment
&lt;/h2&gt;

&lt;p&gt;When I want to play - I want to jump directly to coding. I don’t want to figure out what is &lt;a href="https://dev.to/stereobooster/what-do-you-use-for-python-development-4706"&gt;the state of the art for tooling&lt;/a&gt;. I don’t want to spend hours installing tools and configuring IDE. I don’t want to break any existing dev environments or remember which things to uninstall after the experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;Visual Studio Code Remote Containers&lt;/a&gt; is a solution to the problem if you already use VS Code and Docker. It takes no time to spin up a new development environment with preconfigured tooling. This is what I call “&lt;a href="https://stereobooster.com/posts/truly-integrated-development-environment/"&gt;Truly Integrated Development Environment&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;I’ve been working with it for a couple of weeks and so far the experience was delightful. So I decided to collect recipes for dev containers for my future experiments: &lt;strong&gt;&lt;a href="https://github.com/stereobooster/awesome-vscode-dev-containers"&gt;Awesome VS Code Containers&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps" class="anchor"&gt;
  &lt;/a&gt;
  PS
&lt;/h2&gt;

&lt;p&gt;I already &lt;a href="https://github.com/stereobooster/pony-lisp"&gt;tried out Pony&lt;/a&gt;. Next, I want to play with Crystal, Unison, Racket, and Haskell. &lt;strong&gt;With what technology or language do you want to experiment?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>discuss</category>
      <category>productivity</category>
      <category>docker</category>
    </item>
    <item>
      <title>Microblog: using closures to create JavaScript factories</title>
      <author>Shailesh Vasandani</author>
      <pubDate>Fri, 25 Dec 2020 18:49:03 +0000</pubDate>
      <link>https://dev.to/svasandani/microblog-using-closures-to-create-javascript-factories-13pm</link>
      <guid>https://dev.to/svasandani/microblog-using-closures-to-create-javascript-factories-13pm</guid>
      <description>&lt;p&gt;Hi everyone! In today's &lt;a href="https://shaile.sh/blog/?filter=microblog"&gt;Microblog&lt;/a&gt; post, we'll be looking at JavaScript closures and how you can use them to make factories.&lt;/p&gt;

&lt;p&gt;First, though — why learn about this technique? Well, even though many people dive straight into frameworks like React and Angular, it's always good to understand the fundamental vanilla JavaScript underlying those frameworks. As a result, you'll be able to do more both with and without the frameworks supporting you. Now, onto closures:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-closures" class="anchor"&gt;
  &lt;/a&gt;
  What are closures?
&lt;/h4&gt;

&lt;p&gt;Good question. At their core, closures are simply an enclosed scope inside a function. They allow an inner function to access the variables in an outer function. A super simple example would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      const addTo = (numberOne) =&amp;gt; {
        return (numberTwo) =&amp;gt; {
          return numberOne + numberTwo;
        }
      }

      const addToFive = addTo(5);
      const addToTen = addTo(10);

      addtoFive(3); // =&amp;gt; 8
      addToTen(3); // =&amp;gt; 13
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the &lt;code&gt;addTo&lt;/code&gt; function is called with a parameter, it returns another function that has access to the &lt;code&gt;numberOne&lt;/code&gt; variable; this returned function is the &lt;strong&gt;closure&lt;/strong&gt;. Both &lt;code&gt;addToFive&lt;/code&gt; and &lt;code&gt;addToTen&lt;/code&gt; each have their own unique scope, where the variable &lt;code&gt;numberOne&lt;/code&gt; equals 5 and 10 respectively. As a result, when calling those functions with 3 as a parameter, they give the expected results of 8 and 13. Now, onto factories:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-factories" class="anchor"&gt;
  &lt;/a&gt;
  What are factories?
&lt;/h4&gt;

&lt;p&gt;Factories are generally used in testing to create objects without creating the full object declaration inline. A simple example might look this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      /* User {
        {string} firstName
        {string} lastName
        {number} age
      }
      const createUser = (userObj) =&amp;gt; {
        // create mock user
        let user = {
          firstName: "John",
          lastName: "Doe",
          age: 21
        };

        Object.keys(user).forEach((userKey) =&amp;gt; {

        });

        return user;
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows us to scope our testing to be more relevant to the tests we perform.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      // WITHOUT FACTORY
      const returnsFalseForMinors = () =&amp;gt; {
        // irrelevant data in test
        let user = { firstName: "John", lastName: "Doe", age: 17 });

        console.assert(functionToTest(user), false);
      }

      // WITH FACTORY
      const returnsFalseForMinors = () =&amp;gt; {
        let user = createUser({ age: 17 });

        console.assert(functionToTest(user), false);
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#factories-and-closures-together" class="anchor"&gt;
  &lt;/a&gt;
  Factories and closures, together?
&lt;/h4&gt;

&lt;p&gt;When we use factories together with closures, we're able to dynamically generate useful functions that don't have to take too many parameters. Here's an example from the codebase for my &lt;a href="https://shaile.sh/photography/"&gt;photography page&lt;/a&gt;, where I needed to add and remove different classes for large amounts of objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      // closure and factories, working together
      const removeAndAdd = (remove, add) =&amp;gt; {
        return (el) =&amp;gt; { 
          el.classList.remove(remove);
          el.classList.add(add);
        }
      }

      // methods generated by the factory for use later
      const leftToCenter = removeAndAdd("left", "center");
      const centerToRight = removeAndAdd("center", "right");
      const rightToCenter = removeAndAdd("right", "center");
      const centerToLeft = removeAndAdd("center", "left");

      // ...

      const movePrev = () =&amp;gt; {
        if (currentIndex &amp;lt;= 0) return;
        else {
          centerToRight(images[currentIndex]);
          leftToCenter(images[--currentIndex]); // decrement inline
          labelText.innerHTML = (currentIndex + 1) + "/" + numImages;
          labelTitle.innerHTML = altText[currentIndex];
        }
      }

      const moveNext = () =&amp;gt; {
        if (currentIndex + 1 &amp;gt;= numImages) return;
        else {
          centerToLeft(images[currentIndex]);
          rightToCenter(images[++currentIndex]); // increment inline
          labelText.innerHTML = (currentIndex + 1) + "/" + numImages;
          labelTitle.innerHTML = altText[currentIndex];
        }
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, by using a closure as a function factory, I was able to avoid repeating calls to each element's &lt;code&gt;classList&lt;/code&gt;, making my code more readable and semantic in the process.&lt;/p&gt;

&lt;p&gt;I hope this short post gives you an idea of the power of closures in JavaScript, and I'm hoping to make a longer post further down the line detailing the most powerful ways these can be used. Make sure to follow me to be notified when that post drops.&lt;/p&gt;

&lt;p&gt;If you found this post useful, please consider &lt;a href="https://shaile.sh/coffee"&gt;buying me a coffee&lt;/a&gt;. Until next time!&lt;/p&gt;

</description>
      <category>microblog</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Freeze and Seal Objects in JavaScript</title>
      <author>Adnan Ahmed</author>
      <pubDate>Fri, 25 Dec 2020 18:44:46 +0000</pubDate>
      <link>https://dev.to/idnan/freeze-and-seal-objects-in-javascript-d7b</link>
      <guid>https://dev.to/idnan/freeze-and-seal-objects-in-javascript-d7b</guid>
      <description>&lt;p&gt;Variables we declare in javascript with the help of &lt;code&gt;const&lt;/code&gt;, are not purely constant. Let's say that if we have a variable called config with a bunch of properties and if we print it to the console you will see it has a name and a database object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-account&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;r@@t&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// {"name":"module-account","database":{"host":"127.0.0.1","port":"2020","username":"admin","password":"r@@t"}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if we update the value of let's say &lt;code&gt;name&lt;/code&gt; to be &lt;code&gt;xyz&lt;/code&gt;, you will see you can do that. Although it's a constant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xyz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// xyz &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To prevent this javascript comes with a bunch of methods, such as &lt;code&gt;Object.freeze&lt;/code&gt;, &lt;code&gt;Object.seal&lt;/code&gt; and &lt;code&gt;Object.preventExtensions&lt;/code&gt;. Which we can use to make them immutable. Let's look at the examples to understand how they work and how we can use them in our codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectfreeze" class="anchor"&gt;
  &lt;/a&gt;
  Object.freeze
&lt;/h2&gt;

&lt;p&gt;If we freeze an object, let's say &lt;code&gt;Object.freeze(config)&lt;/code&gt; and print the &lt;code&gt;name&lt;/code&gt; you will see that we are still able to read the value from the config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// xyz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if we try to update any of the existing values, let's say &lt;code&gt;config.name&lt;/code&gt; is &lt;code&gt;abc&lt;/code&gt;, we will get the error that we cannot assign the value to a read-only property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// error &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly, if we try to delete a property, let's say delete &lt;code&gt;config.name&lt;/code&gt;, we will not be able to do that, and also if we try to add a new property, let's say &lt;code&gt;config.timeout&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;, we will still get the error because the object is not extensible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The only thing we can do is reading the properties from the existing object. One important thing to remember about the freeze is that it works only at the top level. So now, in this case, we have a database object, which is nested inside the config object.&lt;/p&gt;

&lt;p&gt;If we try to update the value for, let's say &lt;code&gt;config.database.host&lt;/code&gt; is &lt;code&gt;10.10.10.20&lt;/code&gt; and if we print the config, you will see that the database host has been updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10.10.10.20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 10.10.10.20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we want the object to be fully frozen, with all the objects inside, we have to recursively freeze all the objects. So in this case now if we want the database to be frozen also, we will have to do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now we'll get the error while updating the &lt;code&gt;host&lt;/code&gt; that the database host cannot be updated because &lt;code&gt;config.database&lt;/code&gt; is frozen&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10.10.10.20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objectseal" class="anchor"&gt;
  &lt;/a&gt;
  Object.seal
&lt;/h2&gt;

&lt;p&gt;Next, we have &lt;code&gt;Object.seal&lt;/code&gt; which is similar to &lt;code&gt;Object.freeze&lt;/code&gt; in a way that you cannot add or remove properties from an object but you can update the values of the existing properties. Let's say that we seal our config object so &lt;code&gt;Object.seal(config)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And now, if we do &lt;code&gt;config.name&lt;/code&gt; to be &lt;code&gt;XYZ&lt;/code&gt;, you will see that the &lt;code&gt;name&lt;/code&gt; has been updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XYZ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if we try to delete the property from the config object. Let's say delete &lt;code&gt;config.database&lt;/code&gt;, we will not be able to do that because, with seal, you cannot delete the properties from the object. And also, if we try to add a new property, let's say &lt;code&gt;config.timeout&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt; we will get the error, that you cannot add a new property to the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And similar to &lt;code&gt;object.freeze&lt;/code&gt;, &lt;code&gt;object.seal&lt;/code&gt; also works on the top-level only. So, the seal will not be applied to the database object here and if we try to delete a property from the database object, let's say delete &lt;code&gt;config.database.host&lt;/code&gt;, we will see that the database host has been deleted from here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, if we want to prevent this also, we will have to seal the nested objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now we will get the error that we cannot delete a property from a sealed object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectpreventextensions" class="anchor"&gt;
  &lt;/a&gt;
  Object.preventExtensions
&lt;/h2&gt;

&lt;p&gt;The last one we have is the &lt;code&gt;Object.preventExtensions&lt;/code&gt;, which allows us to update the values and delete the properties from an existing object but it does not allow us to add new properties to the object.&lt;/p&gt;

&lt;p&gt;So now, if we call &lt;code&gt;Object.preventExtensions&lt;/code&gt; on our &lt;code&gt;config&lt;/code&gt; object, and try to update the value for one of the properties, let's say &lt;code&gt;name&lt;/code&gt;, you will see that the name has been updated, and also if we try to delete one of the properties, let's say delete &lt;code&gt;config.database&lt;/code&gt;, we can also delete the properties but if we try to extend our object or let's say add new properties, for example, &lt;code&gt;config.timeout&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt; we can't do that because our object is not extensible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XYZ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// success&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// success&lt;/span&gt;

&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One more thing to know about the &lt;code&gt;preventExtensions&lt;/code&gt; is that if you delete a property from an object, you cannot add the same property back again and the reason for that is because adding a new property is considered extension. So if I do &lt;code&gt;config.database&lt;/code&gt; again with something, it will give me the error that you cannot add a new property to the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10.20.20.10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;        &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similar to &lt;code&gt;freeze&lt;/code&gt; and &lt;code&gt;seal&lt;/code&gt;, &lt;code&gt;preventExtensions&lt;/code&gt; also applies only to the top-level properties.&lt;/p&gt;

&lt;p&gt;There are three more methods that can be used to check if the objects are &lt;code&gt;frozen&lt;/code&gt;, &lt;code&gt;sealed&lt;/code&gt;, or &lt;code&gt;extensible&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helper-methods" class="anchor"&gt;
  &lt;/a&gt;
  Helper Methods
&lt;/h2&gt;

&lt;p&gt;So &lt;code&gt;Object.freeze&lt;/code&gt; is to freeze the objects and &lt;code&gt;Object.isFrozen&lt;/code&gt; can be used to check if the object is frozen or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFrozen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;        &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFrozen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;        &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Object.seal&lt;/code&gt; is to seal and &lt;code&gt;Object.isSealed&lt;/code&gt; is to check if the object is sealed or not. And for the &lt;code&gt;Object.preventExtensions&lt;/code&gt;, we have &lt;code&gt;Object.isExtensible&lt;/code&gt; which can be used to check if the new properties can be added to the object or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can conclude this topic using a CRUD table.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;CREATE&lt;/th&gt;
&lt;th&gt;READ&lt;/th&gt;
&lt;th&gt;UPDATE&lt;/th&gt;
&lt;th&gt;DELETE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Object.freeze&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Object.seal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Object.preventExtensions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;And that wraps it up for this article. Feel free to leave your feedback or questions in the comments section.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How can playing chess ♞  evolve your coding skills? 💥🐱‍💻</title>
      <author>Harsh Gaur</author>
      <pubDate>Fri, 25 Dec 2020 17:00:59 +0000</pubDate>
      <link>https://dev.to/iharshgaur/how-can-playing-chess-can-evolve-your-coding-skills-3310</link>
      <guid>https://dev.to/iharshgaur/how-can-playing-chess-can-evolve-your-coding-skills-3310</guid>
      <description>&lt;p&gt;I have always been a big fan of chess. Since I was 10, I am enjoying playing it more than anything else. Well, I am not a great player (not even close, lol) but I enjoy the way that the game of chess helps me build mind maps and reasoning skills. Recently, I have been playing it a lot and I have realized that it has the capability to improve one's problem-solving skills.&lt;/p&gt;

&lt;p&gt;Here are the five changes that I have developed in me because of chess.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#attention-to-details" class="anchor"&gt;
  &lt;/a&gt;
  Attention to details! 👀
&lt;/h1&gt;

&lt;p&gt;Chess is all about attention. How attentive you are will impact the result of the game. As a coder, I have always faced problems in finding bugs or even logical errors in a code but recently I have found that due to chess, my attention span on things has improved drastically. I now scan things rather than just skimming through them which has proven to be a really good skill for me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#approaching-the-problem-in-an-optimized-way" class="anchor"&gt;
  &lt;/a&gt;
  Approaching the problem in an optimized way 🚴‍♂️
&lt;/h1&gt;

&lt;p&gt;Earlier, I had a careless attitude towards the problems that I was supposed to solve in my coding assignments. I used to just solve a problem somehow and never bat an eye about finding other/optimal ways of solving it, but now I really dig deep into them and try my best to find the optimized answer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#innovative-and-spontaneous-thinking" class="anchor"&gt;
  &lt;/a&gt;
  Innovative and spontaneous thinking 🤔
&lt;/h1&gt;

&lt;p&gt;I know whatever I am saying till now might come up as bragging to some people ( lol, I am just sharing my thoughts) but my main motive is to tell everyone how chess can improve you. Adding more colors to that, chess can really help you in becoming an innovative and spontaneous thinker. Once you’ll get into the game you would have to find innovative techniques (called traps in chess) and then later on as the time decreases you would have to be spontaneous and confidant with your moves. These crucial skills can also be applied to real-world problems.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#never-underestimate-others" class="anchor"&gt;
  &lt;/a&gt;
  Never underestimate others 🤼
&lt;/h1&gt;

&lt;p&gt;Whenever you meet an opponent, never ever judge him/her/them. Underestimating someone not only losses your focus but also kills the hunger inside you to win. Learning from everyone however could help you a lot. To sum it up, sometimes it is the people no one imagines anything of who do the things that no one can imagine.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-is-not-the-end-until-it-is-the-end" class="anchor"&gt;
  &lt;/a&gt;
  It is not the end until it is the end 💪
&lt;/h1&gt;

&lt;p&gt;I have also learned that one should never give up, be it in life, a game, or anything else. It is very important to fight till the end. You have to give your 100% till the last millisecond. There were instances where I played higher-rated players than me and won. Initially, you will fail, you will lose but soon the things will change. Even a chess grandmaster can blunder once in a blue moon. You just have to wait for your turn and give your best until the game lasts. The same thing goes for life and almost anything else.&lt;/p&gt;

&lt;p&gt;I hope you liked reading my thoughts and I wish to hear out your suggestions.&lt;/p&gt;

</description>
      <category>career</category>
      <category>computerscience</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>🍦 Vanilla JS Starry Night</title>
      <author>Yossi Abramov</author>
      <pubDate>Fri, 25 Dec 2020 16:44:03 +0000</pubDate>
      <link>https://dev.to/yossiabramov/vanilla-js-starry-night-4e7k</link>
      <guid>https://dev.to/yossiabramov/vanilla-js-starry-night-4e7k</guid>
      <description>&lt;p&gt;In this post I would like to share with you a Vanilla JS demo of twinkling stars on a smooth black canvas. Basically, this kind of challenge involves dealing with random parameters like a star’s width, height, coordinates and twinkling duration. I think it is probably better to start with the relevant portion of the CSS for this small demo and work our way to the JS part. &lt;/p&gt;

&lt;p&gt;Here are some links for this demo:&lt;/p&gt;

&lt;p&gt;👉 GitHub repo:  &lt;a href="https://github.com/yossi-abramov/starry-night"&gt;https://github.com/yossi-abramov/starry-night&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 GitHub page:  &lt;a href="https://yossi-abramov.github.io/starry-night"&gt;https://yossi-abramov.github.io/starry-night/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.star&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--twinkle-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--twinkle-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--star-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--star-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--star-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;twinkle&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--twinkle-duration&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--twinkle-delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;twinkle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0.5px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I’ve created a  &lt;code&gt;.star&lt;/code&gt;  class for my stars and initialised CSS variables in it. By scoping these variables to the  &lt;code&gt;.star&lt;/code&gt;  class we can make these variables behave like “arguments”. That means we can set a value to our scoped CSS property on a given star element (Just think of all the cool things you can build with CSS variables!). Next, I’ve set a  &lt;code&gt;keyframe&lt;/code&gt;  animation for the “twinkling” effect. As you can see, both  &lt;code&gt;animation-duration&lt;/code&gt;  and  &lt;code&gt;animation-delay&lt;/code&gt;  have a CSS variable assigned to them. As for the twinkle  &lt;code&gt;keyframe&lt;/code&gt;, it’s pretty straight forward: alternate infinitely between a scale of 1 and 1.5 of the star’s size and add a  &lt;code&gt;box-shadow&lt;/code&gt;  for a soft glow effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js" class="anchor"&gt;
  &lt;/a&gt;
  JS
&lt;/h3&gt;

&lt;p&gt;Now, let’s go over the JS portion of the code. As mentioned above, we need to deal with some random “star” properties. For that reason the first thing we need is a function that will generate a random number between a  &lt;code&gt;min&lt;/code&gt;  and a  &lt;code&gt;max&lt;/code&gt;. For that purpose, we can use the mighty JS Math Object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After setting up our  &lt;code&gt;genRandomNumber&lt;/code&gt;  function we can move on to defining the boundaries of our microcosmos/canvas/night sky. Remember, we need to spread our stars randomly across a space. So first we need to select our parent and give our stars coordinates relative to the selected parent. In this case, I’ve selected the  &lt;code&gt;body&lt;/code&gt;  element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, all we need to do is create an element, append a  &lt;code&gt;.star&lt;/code&gt;  class to it and pass the required random CSS properties that we defined in our CSS. After our star element is created, we will simply append it to the parent element -  &lt;code&gt;body&lt;/code&gt;  in this case. We will need to repeat this process  &lt;code&gt;x&lt;/code&gt;  amount of times – so a simple  &lt;code&gt;for&lt;/code&gt;  loop will do!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Star coordinates&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--star-size&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--twinkle-duration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--twinkle-delay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's refactor this code a bit, here is another suggestion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Night Sky element&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Generate a random number between min and max values&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Generate a star &amp;lt;div&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genStar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Gen star coordinates relative to $el size&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--star-size&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--twinkle-duration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--twinkle-delay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genRandomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genStar&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;✍ For more posts:&lt;br&gt;
&lt;a href="https://yossiabramov.com/"&gt;https://yossiabramov.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Website To Host Your Website For Free</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Fri, 25 Dec 2020 16:23:57 +0000</pubDate>
      <link>https://dev.to/surajsrv11/5-website-to-host-your-website-for-free-2p55</link>
      <guid>https://dev.to/surajsrv11/5-website-to-host-your-website-for-free-2p55</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ielGav6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3ae1xqej9fn79dr2lxj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ielGav6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3ae1xqej9fn79dr2lxj.gif" alt="Hosting Website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We write tons of code to make an awesome, effective, and useful website. Initially, we can see that website on localhost but to make it public we need domain and hosting. Domain purchasing and hosting websites cost a lot of money. For test purposes, we can use free domains and sub-domains to host the website. Today we are going to list 5 website where you can host your website for free of cost.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-pages" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can host your webpage online using GitHub. You need to create a repository for your website and put all the source code in it. You can find deploying and hosting in the setting section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwY1vCnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9izcmkbgxqr6ia96ksdh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwY1vCnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9izcmkbgxqr6ia96ksdh.jpeg" alt="GitHub Pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PROS

&lt;ul&gt;
&lt;li&gt;Free&lt;/li&gt;
&lt;li&gt;Right on GitHub&lt;/li&gt;
&lt;li&gt;Set up Instantly&lt;/li&gt;
&lt;li&gt;Easy to learn&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CONS

&lt;ul&gt;
&lt;li&gt;Less Control over Domain&lt;/li&gt;
&lt;li&gt;Bad Cache&lt;/li&gt;
&lt;li&gt;Bad SSL Support&lt;/li&gt;
&lt;li&gt;Bad Cookies system&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-web-services" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://aws.amazon.com/websites/"&gt;Amazon Web Services&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Amazon Web Services is an integrated provider of cloud-based computing solutions. One of the Services they provide is Web Site Hosting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MAo11gj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jm51dqfi743ry8u4vrg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MAo11gj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jm51dqfi743ry8u4vrg.jpg" alt="Amazon Web Services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PROS

&lt;ul&gt;
&lt;li&gt;Easy to use for beginners&lt;/li&gt;
&lt;li&gt;Free tier for 1 year&lt;/li&gt;
&lt;li&gt;New Innovation and Technology&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CONS

&lt;ul&gt;
&lt;li&gt;Sometime maze for beginners as they provide a lot of services&lt;/li&gt;
&lt;li&gt;The pricing can get high&lt;/li&gt;
&lt;li&gt;Sometimes downtime happens&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wix" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.wix.com/"&gt;Wix&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Wiz is mostly for people who don't want to code or don't know about coding a website. They have a number of templates and they use your choice to personalized the website according to your requirement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1qxPTxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5qrewyltlbmrszaoe8fa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1qxPTxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5qrewyltlbmrszaoe8fa.png" alt="Wix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PROS

&lt;ul&gt;
&lt;li&gt;Good Site Speed&lt;/li&gt;
&lt;li&gt;Massive Template Collection&lt;/li&gt;
&lt;li&gt;Drag and Drop Interface&lt;/li&gt;
&lt;li&gt;Market Your Site Easily&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CONS

&lt;ul&gt;
&lt;li&gt;Free Plan Forces Wix Branding&lt;/li&gt;
&lt;li&gt;Tracking and Analytic require a paid plan&lt;/li&gt;
&lt;li&gt;Premium Plans are for Single Site&lt;/li&gt;
&lt;li&gt;Sub-domain is not that great&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#netlify" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Netlify lets you create a website using the repository on the git platform. You just need to pick the repository and run the deploy command. After completion of deployment, your site will be live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CNnp1SL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yxz2098obo8aluuz87zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CNnp1SL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yxz2098obo8aluuz87zx.png" alt="Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PROS

&lt;ul&gt;
&lt;li&gt;Fastest Static Hosting and Continuous Deployment&lt;/li&gt;
&lt;li&gt;Easy to Deploy&lt;/li&gt;
&lt;li&gt;Free SSL Support&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;CONS&lt;/p&gt;

&lt;p&gt;There are very fewer cons but some can be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Confusing UI&lt;/li&gt;
&lt;li&gt;Pricing Structure&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weebly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.weebly.com/"&gt;Weebly&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Weebly is the same as Wix, you do not need to write code. It is a clean and cut site builder. Great for e-commerce and personal website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gRZfqN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x2pth0muzmke8ci6jw39.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gRZfqN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x2pth0muzmke8ci6jw39.jpg" alt="Weebly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PROS

&lt;ul&gt;
&lt;li&gt;Solid Site Speed&lt;/li&gt;
&lt;li&gt;High Design Flexibility with Themes&lt;/li&gt;
&lt;li&gt;Editor is Simple and Easy to Use&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CONS

&lt;ul&gt;
&lt;li&gt;Freeloader Stuck on the Weebly domain&lt;/li&gt;
&lt;li&gt;Limited Blogging Tool&lt;/li&gt;
&lt;li&gt;Pay for more Help&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#last-note" class="anchor"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;Thank you for reading the blog post and I hope you like it. If you know more website you can add in the discussion list.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
