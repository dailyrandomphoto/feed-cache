<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Placements &amp; Interviews 😲 [resources &amp; tips]</title>
      <author>Devang Agarwal</author>
      <pubDate>Tue, 20 Jul 2021 04:28:34 +0000</pubDate>
      <link>https://dev.to/devangagarwal7/placements-interviews-resources-tips-4abd</link>
      <guid>https://dev.to/devangagarwal7/placements-interviews-resources-tips-4abd</guid>
      <description>&lt;p&gt;Hello guys! &lt;strong&gt;This is my first blog ever&lt;/strong&gt;. And it is be going to about interview preparation as this is the most [probably only] talked topic among undergrads right now. So please have a look and do comment your suggestions.&lt;/p&gt;

&lt;p&gt;Coming to the main part, myself being an undergrad, I have looked and studied all over the internet about dos and don'ts for the upcoming season. With all the knowledge I have gained I will briefly list out main points and provide you guys with some good resources to go deeper if you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7R-3aal4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnwrbjq5eeuk8u8yvqf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7R-3aal4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnwrbjq5eeuk8u8yvqf6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dos-and-donts-"&gt;
  &lt;/a&gt;
  Dos and don'ts -
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#first-of-all-get-yourself-to-interview-round"&gt;
  &lt;/a&gt;
  First of all get yourself to interview round
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Make one good &lt;strong&gt;resume&lt;/strong&gt; [CVs not necessary for undergrads] and tailor it according to the job/position you are applying for. Remember tailoring is important.&lt;/li&gt;
&lt;li&gt;Resume must have contact details, brief summary, most recent education, project, skills, work experience[if] contained in a &lt;strong&gt;single page&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://techinterviewhandbook.org/resume"&gt;What to include and what not to in resume&lt;/a&gt;&lt;br&gt;
&lt;a href="https://novoresume.com/"&gt;Free resume builder&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#forduring-interview-round"&gt;
  &lt;/a&gt;
  For/during interview round
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Thoroughly go through the job requirements, expectations, skillset, company background - this will help in tailoring your answers during the interview.&lt;/li&gt;
&lt;li&gt;Prepare basics specific to the job and have a good understanding of the skills you mentioned in your resume.&lt;/li&gt;
&lt;li&gt;Get an idea of the selection procedure of the company you have applied to.&lt;/li&gt;
&lt;li&gt;Prepare answers to common questions beforehand.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Most imp&lt;/strong&gt; - Be confident and honest during the interview!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://techinterviewhandbook.org/interview-formats"&gt;Interview formats and details&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.grammarly.com/blog/common-interview-questions/"&gt;Common Interview questions&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#post-interview"&gt;
  &lt;/a&gt;
  Post interview
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Do not think about if your interview was bad or good or how you will stand with others, let this headache be on the interviewer's side.&lt;/li&gt;
&lt;li&gt;Do check your mails regularly.&lt;/li&gt;
&lt;li&gt;If selected, say yes to the offer only after understanding compensation breakdown. If not, then do a brief introspection upon the domain you can improve.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More Resources - &lt;br&gt;
&lt;a href="https://www.30dayscoding.com/"&gt;30 days of coding (best and compact)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://leverageedu.com/blog/how-to-prepare-for-placements/"&gt;How to prepare for placemnets&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.interviewbit.com/coding-interview-questions/"&gt;DSA Questions (coding interview)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the important stuff is simplified. Readers, please share your views and resources in the comments to help peers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/devangagarwal7/"&gt;My linkedin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/dmachine7"&gt;My Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Peace ✌&lt;/p&gt;

</description>
      <category>placement</category>
      <category>interview</category>
      <category>resources</category>
      <category>preparation</category>
    </item>
    <item>
      <title>What is React Native and Why you should use it ?</title>
      <author>Suhail Kakar</author>
      <pubDate>Tue, 20 Jul 2021 04:07:00 +0000</pubDate>
      <link>https://dev.to/suhailkakar/what-is-react-native-and-why-you-should-use-it-4f2o</link>
      <guid>https://dev.to/suhailkakar/what-is-react-native-and-why-you-should-use-it-4f2o</guid>
      <description>&lt;p&gt;According to Statista, React Native is the most popular technologies for cross-platform software development of mobile applications for two years in a row.&lt;/p&gt;

&lt;p&gt;Releasing an app on both App Store and Google Play is every business’s desire. But the trick is, before shipping a mobile app to the market, you have to choose a technology stack. Is it going to be React Native, Flutter or some other technologies ?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react-native-and-why-you-should-use-it-"&gt;
  &lt;/a&gt;
  What is React Native and Why you should use it ?
&lt;/h3&gt;

&lt;p&gt;React Native is a popular open-source library that runs on JavaScript.It is written with the combination of XML -Esque markup and JavaScript which is also known as JSX. React Native primarily focuses on the native rendering of applications that is majorly compatible with Android and iOS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros-of-react-native"&gt;
  &lt;/a&gt;
  Pros of React Native
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Large developer community&lt;/li&gt;
&lt;li&gt;Simplified UI&lt;/li&gt;
&lt;li&gt;Fast Applications&lt;/li&gt;
&lt;li&gt;Native rendering&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Hot-reloading&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#popular-apps-made-using-react-native"&gt;
  &lt;/a&gt;
  Popular apps made using React Native
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;SoundCloud&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Flipkart&lt;/li&gt;
&lt;li&gt;Tesla&lt;/li&gt;
&lt;li&gt;Skype&lt;/li&gt;
&lt;li&gt;Wix&lt;/li&gt;
&lt;li&gt;Pinterest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJcYNqRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y3yze7akk4z9v4y9iq6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJcYNqRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y3yze7akk4z9v4y9iq6.gif" alt="Great Right ?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now, did you get the answer to your queries related to React Native App Development? Hope you have got a crystal-clear picture to what React Native is all about and why you should go for it for creating your mobile apps.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>flutter</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 18, Dictionaries in Python</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 20 Jul 2021 03:56:33 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-18-dictionaries-in-python-30af</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-18-dictionaries-in-python-30af</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-today-we-will-cover-dictionaries"&gt;
  &lt;/a&gt;
  Welcome all🤟 Today we will cover dictionaries! 
&lt;/h2&gt;




&lt;p&gt;Dictionary is simply a collection of unordered key value pairs&lt;br&gt;
Or sometimes referred as a 'hash table' of key value pairs. Dictionary holds key:value pair. this means that every value in an dictionary is mapped with some other value. Values in a dictionary can be of any datatype. Dictionaries cannot have two items with the same key for obvious reasons.&lt;br&gt;
example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AatmajProfileDictionary={"name":"Aatmaj","Hobby":"teaching","Commits":700}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a quick difference between lists, tuples and dictionaries.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLiIk7GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l74vjn5pxz9vixtdxynm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLiIk7GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l74vjn5pxz9vixtdxynm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#list
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#tuple
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="c1"&gt;#dictionary
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hash-table"&gt;
  &lt;/a&gt;
  Hash table
&lt;/h3&gt;

&lt;p&gt;A Hash table is a data structure. A hash table is a data structure that implements an associative array abstract data type that can map keys to values. A hash table uses a hash function to compute an index also called as the hash code, into a array of buckets or slots, from which the desired value can be found.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sample-program"&gt;
  &lt;/a&gt;
  Sample program-
&lt;/h2&gt;

&lt;p&gt;Here is a sample program just to get you started with dictionaries. It is quite easy to understand and commented whenever necessary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s"&gt;"Brand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Dell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2430&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s"&gt;"Year"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"2020"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#prints the value of the dictionary
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Brand'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Model'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2430&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'2020'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;2430&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;2430&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Year"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt; &lt;span class="c1"&gt;#Changing the value of the dictionary
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Brand'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Model'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2430&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;2430&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Brand'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Lenovo"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Year"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popitem&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;#popitem returns the last value entered
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Lenovo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Brand'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#Corresponds to each key
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Brand&lt;/span&gt;
&lt;span class="n"&gt;Year&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;#refers to the value
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Dell&lt;/span&gt;
&lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Dell&lt;/span&gt;
&lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#Cleares the dictionary (not delete)
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Price"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;#trying to remove element which is not present
&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Price'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#multidimensional-dictionaries"&gt;
  &lt;/a&gt;
  Multidimensional dictionaries
&lt;/h3&gt;

&lt;p&gt;Same story needs no explanation!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"LAPTOP"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s"&gt;"Brand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Dell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2430&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Year"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"2020"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"DESKTOP"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s"&gt;"Brand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"Lenovo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8877&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Warranty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"TABLET"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s"&gt;"Brand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"Apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"3000$"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"TABLET"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"LAPTOP"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#Note the syntax
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'TABLET': {'price': '3000$', 'Brand': 'Apple'}, 'LAPTOP': {'Model': 2430, 'Brand': 'Dell', 'Year': '2020'}, 'DESKTOP': {'Model': 8877, 'Brand': 'Lenovo', 'Warranty': 2}}
{'price': '3000$', 'Brand': 'Apple'}
2430
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exercise-&lt;br&gt;
1) Make a dictionary which contains  a list and a tuple. Then append the tuple in the list in the dictionary.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Dynamic generation of dictionaries&lt;/strong&gt;- Write a program to take names of five students and their corresponding marks, put them in an dictionary.&lt;br&gt;
output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter student name peter
Please enter marks 13
Please enter student name john
Please enter marks 32
Please enter student name pappu
Please enter marks 5
Please enter student name bob
Please enter marks 7
Please enter student name mina
Please enter marks 32
{'peter': 13, 'john': 32, 'pappu': 5, 'mina': 32, 'bob': 7}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answers will  be found &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Day%2018"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So friends that's all for this part. 😊For any suggestions please ping me🤠.&lt;br&gt;
Here is my Gmail- &lt;a href="mailto:aatmaj.mhatre@gmail.com"&gt;aatmaj.mhatre@gmail.com&lt;/a&gt; 🤟&lt;br&gt;
Don't forget to follow me on GitHub for updates on the course.😊&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>tutorial</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Big O Notation</title>
      <author>Ankush Dogra</author>
      <pubDate>Tue, 20 Jul 2021 03:13:20 +0000</pubDate>
      <link>https://dev.to/ankushdogradev/big-o-notation-3kf4</link>
      <guid>https://dev.to/ankushdogradev/big-o-notation-3kf4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-big-o-notation"&gt;
  &lt;/a&gt;
  What is Big O notation?
&lt;/h1&gt;

&lt;p&gt;Big O Notation is a way to measure an algorithm’s efficiency. It measures the time it takes to run your function as the input grows. Or in other words, how well does the function scale.&lt;/p&gt;

&lt;p&gt;For example, you have 10 numbers (2, 36, 5, 7, 3, 9, 0, 1, 10, 4)  and you want to sort these number in sequence. How will you decide which algorithm to use? What if there are 1000 numbers, then what will you do?, Big O is used to measure and find the best possible solution for these type of problems.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#following-are-the-common-big-o-complexities"&gt;
  &lt;/a&gt;
  Following are the common Big O complexities
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zGmK0R-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufik39hf2ztkhu18mjnh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGmK0R-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufik39hf2ztkhu18mjnh.png" alt="BigO Cheat sheet"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;source: &lt;a href="https://www.bigocheatsheet.com/"&gt;https://www.bigocheatsheet.com/&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; 

&lt;h2&gt;
  &lt;a href="#olog-n"&gt;
  &lt;/a&gt;
  O(log n)
&lt;/h2&gt;

&lt;p&gt;Before understanding what O(log n) is lets understand what log or logarithms are. &lt;br&gt;
A logarithm is the power to which a number must be raised in order to get some other number. In computer science by default base of log is 2.&lt;br&gt;
For example lets take a number 8. The base 2 logarithm of 8 is 3, because 2 raised to the power of 3 is 8:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNQkoJ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr8zkmav584i164kqgre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNQkoJ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr8zkmav584i164kqgre.png" alt="log 8 =&amp;gt; 2^3 = 8"&gt;&lt;/a&gt;&lt;br&gt;
In short what we ask is &lt;strong&gt;how many 2s need to be multiplied together to get a number&lt;/strong&gt;.&lt;br&gt;
Coming back to O(log n), it basically means, &lt;strong&gt;time goes up linearly while the n goes up exponentially&lt;/strong&gt;. So, if it takes 1 second to compute 10 elements, it will take 2 seconds to compute 20 elements, 3 seconds to compute 40 elements, and so on. An example of an O(log n) algorithm would be a binary search algorithm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function binarySearch(arr, val) {
  let upper = 0;
  let lower = arr.length - 1;

  while (upper &amp;lt;= lower) {
    let middle = Math.floor((upper + lower) / 2);

    if (arr[middle] === val) {
      // found the val
      return middle;
    } else if (arr[middle] &amp;lt; val) {
      // continue searching to the right
      upper = middle + 1;
    } else {
      // search searching to the left
      lower = middle - 1;
    }
  }
  // val wasn't found
  return -1;
}

//   Array should be sorted for binary search
let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#o1"&gt;
  &lt;/a&gt;
  O(1)
&lt;/h2&gt;

&lt;p&gt;No matter how many items there are, whether one ore one million, the amount of time to complete will remain same. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const fishes = ["nemo", "marlin", "bruce", "crush", "dory"];

 function firstFishInLine(arr) {
   console.log(arr[0]); 
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter how big the array is, we will always be grabbing first item in the array (We are only doing one thing).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on"&gt;
  &lt;/a&gt;
  O(n)
&lt;/h2&gt;

&lt;p&gt;In O(n) all the loops are an example of linear growth because there is one-to-one relationship between the data size and time to completion. So an array with 100 times more items will take exactly 100 times longer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fish = ["nemo", "marlin", "bruce", "crush", "dory"];

 function findingDorry(arr) {
   for (let i = 0; i &amp;lt;= arr.length; i++) {
     if (arr[i] === "dory") {
       console.log("🎉 Dory Found");
     }
   }
 }
 findingDorry(fish);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More the fishes more time it will take because, It will check each element in an array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-log-n"&gt;
  &lt;/a&gt;
  O(n log n)
&lt;/h2&gt;

&lt;p&gt;O(n log n) implies that &lt;strong&gt;log n&lt;/strong&gt; operations will occur &lt;strong&gt;n&lt;/strong&gt; times. For example, searching for the element in &lt;strong&gt;sorted list of length n is O(log n)&lt;/strong&gt;. Searching for the element in &lt;strong&gt;n different sorted lists, each of length n is O(n log ).&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nLogn(n) {
  let y = n;
  while (n &amp;gt; 1) {
    n = Math.floor(n / 2);           // O(log n)
    for (let i = 1; i &amp;lt;= y; i++) {   // O(n)
      console.log(i);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#on2"&gt;
  &lt;/a&gt;
  O(n^2)
&lt;/h2&gt;

&lt;p&gt;O(n^2) is extremely inefficient. It can also be written as O(n^x). Where &lt;strong&gt;x&lt;/strong&gt; is number of nested loops. Putting a loop inside a loop is great way of turning an array of 1000 items into  million (1000 X 1000) operation search that'll freeze your browser. Any form of nested loop is an example of O(n^x). following is the example of O(n^2):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fishes = ["nemo", "marlin", "bruce", "crush", "dory"];

function fishPairs(arr) {
  for (let i = 0; i &amp;lt; arr.length; i++) {
    for (let j = 0; j &amp;lt; arr.length; j++) {
      console.log(arr[i], arr[j]);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Difference between &lt;strong&gt;O(n^2)&lt;/strong&gt; and &lt;strong&gt;O(2n)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We Add (+) for steps in order (i.e.: n+n)&lt;/li&gt;
&lt;li&gt;And Multiply (*) for nested steps (i.e.: n*n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#o2n"&gt;
  &lt;/a&gt;
  O(2^n)
&lt;/h2&gt;

&lt;p&gt;O(2^n) denotes an algorithm whose growth doubles, with each addition to the input data set. &lt;br&gt;
The growth curve of an O(2^n) function is exponential - starting off very shallow, then rising meteorically. A great example of O(2^n) will be Fibonacci series:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function fibonacci(num) {
   if (num &amp;lt;= 1) {
     return num;
   }
   return fibonacci(num - 2) + fibonacci(num - 1);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#on"&gt;
  &lt;/a&gt;
  O(n!)
&lt;/h2&gt;

&lt;p&gt;O(n!) is one of the worst possibilities. To illustrate how fast factorial solutions will blow up in size, a standard deck of cards has 52 cards, with 52! possible orderings of cards after shuffling. This number is larger than the number of atoms on Earth.&lt;br&gt;
One classic example is the &lt;a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem"&gt;traveling salesman&lt;/a&gt; problem through brute-force search.&lt;br&gt;
If there are N cities, the brute force method will try each and every permutation of these N cities to find which one is cheapest. Now the number of permutations with N cities is N! making it's complexity factorial (O(N!)).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For simplicity in our examples we have taken only one type of array or input that's why it is &lt;strong&gt;n*n = n^2&lt;/strong&gt; or &lt;strong&gt;n+n =2n&lt;/strong&gt; but different inputs should have different variables.(example, a*b or a+b)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#how-to-calculate-big-o"&gt;
  &lt;/a&gt;
  How to calculate Big O?
&lt;/h1&gt;

&lt;p&gt;You can calculate Big O by following these 5 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Break your algorithm/function into individual operations.&lt;/li&gt;
&lt;li&gt;Calculate the Big O of each operation.&lt;/li&gt;
&lt;li&gt;Add up the Big O of each operation together.&lt;/li&gt;
&lt;li&gt;Remove the constants.&lt;/li&gt;
&lt;li&gt;Certain terms dominate others. &lt;strong&gt;O(1) &amp;lt; O(log n) &amp;lt; O(n) &amp;lt; O(n log n) &amp;lt; O(n^2) &amp;lt; O(2^n) &amp;lt; O(n!)&lt;/strong&gt;. i.e. ignore lower order terms.
Find the highest order term — this will be what we consider the Big O of our algorithm/function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's try to calculate Big O of following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function foo(arr) {  
    let a = 30; // O(1) - only running once
    a = 1 + 3;  // O(1)

    for (let i = 0; i &amp;lt; arr.length; i++) { // O(n) - because it will run n:times
      someAnotherFunction(); // O(n) - Here we are calling some function. It will be called every time the loop is run. 
      let bool = true; // O(n) - again because inside for loop
      a++; // O(n)
    }
    return a; // O(1)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, Big O will be: &lt;/p&gt;

&lt;p&gt;1 + 1 + n + n + n + n + 1 = 3 + 4n =&amp;gt; O(3+4n)&lt;/p&gt;

&lt;p&gt;but lets try to simplify it more, look at the '5th' rule above. &lt;strong&gt;Certain terms dominate others,&lt;/strong&gt; (O(1) is less significant then O(n)).&lt;br&gt;
So, we will drop count &lt;strong&gt;3&lt;/strong&gt; &amp;amp; now it will be &lt;strong&gt;O(4n)&lt;/strong&gt;. &lt;br&gt;
In rule '4th' we have defined that we should remove constants, so are final answer will be : &lt;strong&gt;O(n)&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Hide an element without changing the layout</title>
      <author>Takuya Kikuchi</author>
      <pubDate>Tue, 20 Jul 2021 02:43:12 +0000</pubDate>
      <link>https://dev.to/takuyakikuchi/hide-an-element-without-changing-the-layout-k3m</link>
      <guid>https://dev.to/takuyakikuchi/hide-an-element-without-changing-the-layout-k3m</guid>
      <description>&lt;p&gt;&lt;code&gt;visibility: hidden&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/visibility"&gt;visibility - CSS: Cascading Style Sheets | MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The visibility CSS property shows or hides an element without changing the layout of a document.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Git quick tips #2: Working with many branches</title>
      <author>Michael Kohl</author>
      <pubDate>Tue, 20 Jul 2021 02:04:47 +0000</pubDate>
      <link>https://dev.to/citizen428/git-tips-for-working-with-many-branches-p5m</link>
      <guid>https://dev.to/citizen428/git-tips-for-working-with-many-branches-p5m</guid>
      <description>&lt;p&gt;I somehow often end up working on a few branches in parallel and some things make my life easier:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git switch -&lt;/code&gt;: Like the &lt;code&gt;cd&lt;/code&gt; command &lt;code&gt;git switch&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; take a &lt;code&gt;-&lt;/code&gt; argument which takes you back to the previously checked out branch.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git branch
&lt;span class="k"&gt;*&lt;/span&gt; citizen428/long-branch-name
&lt;span class="nv"&gt;$ &lt;/span&gt;git switch main
Switched to branch &lt;span class="s1"&gt;'main'&lt;/span&gt;
Your branch is up to &lt;span class="nb"&gt;date &lt;/span&gt;with &lt;span class="s1"&gt;'origin/main'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git switch -
Switched to branch &lt;span class="s1"&gt;'citizen428/long-branch-name'&lt;/span&gt;
Your branch is up to &lt;span class="nb"&gt;date &lt;/span&gt;with &lt;span class="s1"&gt;'origin/citizen428/long-branch-name'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;I actually have &lt;code&gt;checkout&lt;/code&gt; aliased to &lt;code&gt;co&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt; to &lt;code&gt;sw&lt;/code&gt; (as well as &lt;code&gt;git&lt;/code&gt; itself&lt;code&gt;to&lt;/code&gt;g`) but I didn't want to confuse readers with those.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git show branch:file_name&lt;/code&gt;: Especially during profile work I often have several branches that modify the same files. A quick way to see a file from another branch without having to check it out is &lt;code&gt;git show&lt;/code&gt;, e.g. &lt;code&gt;git show main:app/models/user.rb&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git-rerere&lt;/code&gt;: Short for "&lt;strong&gt;re&lt;/strong&gt;use &lt;strong&gt;re&lt;/strong&gt;corded &lt;strong&gt;re&lt;/strong&gt;solution". Particularly useful for long-running branches (which ideally we shouldn't have but ideals don't tend to survive contact with reality). The process is automatic and doesn't generally require manual intervention, just make sure it's enabled in your git configuration, e.g. &lt;code&gt;git config --global rerere.enabled true&lt;/code&gt;. The git docs have &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Rerere"&gt;a very nice explanation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git stash branch&lt;/code&gt;: I sometimes start working in the wrong checkout and a quick and easy way to correct this is the following:&lt;/p&gt;

&lt;pre&gt;
$ git stash # stash current changes
$ git stash branch  
&lt;/pre&gt;

&lt;p&gt;This will directly create a new branch from the stash instead of having to first create it and then using &lt;code&gt;git stash pop&lt;/code&gt;. Keep in mind that the currently active branch will be used as the base, so unless you're already on &lt;code&gt;main&lt;/code&gt; you may want to check that out first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git autocorrect&lt;/code&gt;: Not directly related to branch management but it can be useful for the commands I use rarely and have not aliased. You can configure it like this &lt;code&gt;git config --global help.autocorrect 10&lt;/code&gt;, where the integer is a value in 10th of a second, so the above will wait for 1 second before running the autocorrected command:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--etudbTCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/0wl4uemhjre5puq5xih6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--etudbTCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/0wl4uemhjre5puq5xih6.png" alt="autocorrect in action"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>git</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Fault tolerance on the web</title>
      <author>Jordan Brennan</author>
      <pubDate>Tue, 20 Jul 2021 01:19:10 +0000</pubDate>
      <link>https://dev.to/jfbrennan/fault-tolerance-on-the-web-3lb0</link>
      <guid>https://dev.to/jfbrennan/fault-tolerance-on-the-web-3lb0</guid>
      <description>&lt;p&gt;Months ago I wrote &lt;a href="https://dev.to/jfbrennan/the-reasons-i-don-t-use-typescript-2fhb"&gt;The reasons I don't use Typescript&lt;/a&gt; and one reason more than others struck a nerve with some readers. I said developers "can embrace the fault-tolerant nature of the web and wisely use JavaScript's strict type enforcement when actually necessary."&lt;/p&gt;

&lt;p&gt;Many readers drove by, rolled down their window, and yelled, "Fault tolerance sucks!" and then sped off when asked why. Others denied that JavaScript even has strict typing abilities and accused me of "spreading misinformation". &lt;/p&gt;

&lt;p&gt;So, I'm writing this to explain my reason in more detail and to document the very long and very useful list of tools already in JavaScript that not only help you verify types, but help you further harden your code at runtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-fault-tolerance-good"&gt;
  &lt;/a&gt;
  Is fault tolerance good?
&lt;/h2&gt;

&lt;p&gt;(I wanted to share a link to an old blog post on Los Techies - I think - written by Addy Osmani - I think - that introduced me to this topic, but I can't find it. If you know it, please share!)&lt;/p&gt;

&lt;p&gt;A system is said to be fault-tolerant if when a component of the system fails the system continues to function.&lt;/p&gt;

&lt;p&gt;This is what it looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nunK_9kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ytpbkuus7f3pxwwysc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nunK_9kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ytpbkuus7f3pxwwysc.png" alt="Airplane engine failure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how the plane is still up in the air. This is a good thing.&lt;/p&gt;

&lt;p&gt;This is what fault-tolerance does not look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UE0P04gp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1kqqm7mlbthev3j8bpr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UE0P04gp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1kqqm7mlbthev3j8bpr.png" alt="Windows 10 BSOD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An issue inside a component inside a program inside an operating system caused the whole operating system to just give up. If that wasn't a bad enough design, the system then forces you to sit and wait while it rubs it in your face - there’s still 75% more failure to go! &lt;/p&gt;

&lt;p&gt;In the spirit of that &lt;a href="https://www.wussu.com/humour/gm.htm"&gt;old GM vs. Microsoft joke&lt;/a&gt;, what if cars were built this way? Your car would suddenly shut down because one of its four tires didn't have the exact tire pressure dictated by the manufacturer's specifications? This would be a terrible driving experience and kind of dangerous.&lt;/p&gt;

&lt;p&gt;So yes, fault tolerance in systems is good!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-fault-tolerant-web"&gt;
  &lt;/a&gt;
  A fault tolerant web
&lt;/h2&gt;

&lt;p&gt;Thankfully, early engineers designed web platform technologies - HTML, CSS, JavaScript - and the browsers that implement them to be more airplane and car and less Windows.&lt;/p&gt;

&lt;p&gt;For example, what will happen when this document is loaded by your browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, world!
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will display "Hello, world!" despite the missing closing tag.&lt;/p&gt;

&lt;p&gt;What about this document?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome to this example&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That works too. In fact, it's an example &lt;a href="https://html.spec.whatwg.org/multipage/syntax.html#optional-tags"&gt;straight from the optional tags spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What about this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&amp;lt;asdfghjkl&amp;gt;&lt;/span&gt;Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does this mean we should omit tags or not bother closing tags or write nonsense? Of course not, but it would be a real shame if the user was left staring at a blank page because the browser crashed on a missing or unknown tag.&lt;/p&gt;

&lt;p&gt;The web platform has been designed to be fault-tolerant. It values producing &lt;em&gt;something&lt;/em&gt; for the user over requiring everything at all times to be absolutely perfectly correct in order to function. Kind of like how an airplane is designed to resist gravity as much as possible, even in unexpected circumstances.&lt;/p&gt;

&lt;p&gt;Here's another example with CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code is modern and technically perfect, but older browsers won't know what &lt;code&gt;grid&lt;/code&gt; is and yet they will dutifully carry on with their CSS calculations and paint content as best they can without giving up and crashing. Even this won't crash a browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;banana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, the point is not that the web platform tolerates sloppiness, but rather should something imperfect or unsupported slip through your quality controls, it won't completely ruin your users' experience.&lt;/p&gt;

&lt;p&gt;When we create our systems - our apps - we choose to embrace or reject the nature of the web by &lt;em&gt;conscientiously&lt;/em&gt; allowing a little wiggle room or by attempting a level of rigidity that might shatter in the face of something unknown.&lt;/p&gt;

&lt;p&gt;There's a sweet spot between careless and "can't accept JavaScript, must use TypeScript."&lt;/p&gt;

&lt;p&gt;JavaScript allows things to happen that some languages would not allow, which seems to rub a lot of TypeScript fans the wrong way. I believe they are used to working with languages and in environments that are more predictable and controllable, like a having a highly-programmed autonomous car confined to known roads. Web apps, on the other hand, have a human driver who's late for work trying to take the fastest route. Web apps simply demand a more tolerant runtime.&lt;/p&gt;

&lt;p&gt;When it is time to build in some rigidity - even absolute correctness - there are many tools available natively just waiting for you to use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leverage-javascripts-tools-when-necessary"&gt;
  &lt;/a&gt;
  Leverage JavaScript's tools when necessary
&lt;/h2&gt;

&lt;p&gt;JavaScript includes lots of features and tools that increase the strictness and ensure correctness of your code, including type checking. &lt;/p&gt;

&lt;p&gt;Here they all are (I think I got them all), each with a link to MDN and a brief explanation for their use case:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-checking"&gt;
  &lt;/a&gt;
  Type checking
&lt;/h3&gt;

&lt;p&gt;These are useful for enforcing the type of an object or comparing the types of objects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"&gt;&lt;strong&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The typeof operator returns a string indicating the type of the unevaluated operand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's not perfect, but it enables type checking for &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;bigint&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;symbol&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"&gt;&lt;strong&gt;&lt;code&gt;Object.prototype.toString.call(obj)&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every object has a &lt;code&gt;toString()&lt;/code&gt; method...&lt;code&gt;toString()&lt;/code&gt; returns "[object &lt;em&gt;type&lt;/em&gt;]", where &lt;em&gt;&lt;code&gt;type&lt;/code&gt;&lt;/em&gt; is the object type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This method can check object types like &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;RegEx&lt;/code&gt;, and more. This is best wrapped up in a little &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#real-world_usage"&gt;helper function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof"&gt;&lt;strong&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;instanceof&lt;/code&gt; operator tests to see if the &lt;code&gt;prototype&lt;/code&gt; property of a constructor appears anywhere in the prototype chain of an object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There's also a more verbose, but self-explanatory way of checking: &lt;code&gt;Object.getPrototypeOf(obj) === MyClass.prototype&lt;/code&gt;. Arrays have a gotcha, see next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"&gt;&lt;strong&gt;&lt;code&gt;Array.isArray()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Array.isArray()&lt;/code&gt; method determines whether the passed value is an &lt;code&gt;Array&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;a href="http://web.mit.edu/jwalden/www/isArray.html"&gt;edge cases&lt;/a&gt; that make using this method safer than &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;strong&gt;&lt;code&gt;Number.isInteger()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Number.isInteger()&lt;/code&gt; method determines whether the passed value is an integer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#using_isinteger"&gt;edge cases&lt;/a&gt; to be aware of as well as &lt;code&gt;Number.isSafeInteger()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;strong&gt;&lt;code&gt;Number.isFinite()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;strong&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;strong&gt;&lt;code&gt;===&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The strict equality operator checks whether its two operands are equal...[it] always considers operands of different types to be different.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Skips the type coercion for a more accurate comparison. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object-integrity"&gt;
  &lt;/a&gt;
  Object integrity
&lt;/h3&gt;

&lt;p&gt;These are useful for ensuring that what you are accessing is what you expect it to be.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"&gt;&lt;strong&gt;&lt;code&gt;const&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The value of a constant can't be changed through reassignment, and it can't be redeclared.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Variables declared with &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; can potentially be reassigned a value your code can't handle, so using &lt;code&gt;const&lt;/code&gt; helps protect against this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"&gt;&lt;strong&gt;&lt;code&gt;?.&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The optional chaining operator permits reading the value of a property located deep within a chain of connected objects without having to expressly validate that each reference in the chain is valid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Optional chaining in my opinion is the greatest addition to JavaScript since ServiceWorker. It's our most powerful tool to fight &lt;code&gt;Uncaught TypeError: Cannot read property&lt;/code&gt;, which has  been identified by Rollbar as the number one production JavaScript error &lt;a href="https://rollbar.com/blog/blog/top-10-javascript-errors-from-1000-projects-and-how-to-avoid-them"&gt;see Top 10 JavaScript Errors From 1,000 Projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Data shapes in web apps can be unpredictable due to the fact that most data originates somewhere outside the app (e.g. your own services, 3rd-party services, hosted files and objects, and more). Even well-defined custom types can fail to account for all of an object properties, so TypeScript or no TypeScript, you should use this on data your code didn't originate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"&gt;&lt;strong&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;hasOwnProperty()&lt;/code&gt; method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you need to verify that a property exists directly on an object, use this. Use &lt;code&gt;in&lt;/code&gt; only when you know that checking the object &lt;em&gt;and&lt;/em&gt; its prototype chain is acceptable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;&lt;strong&gt;&lt;code&gt;??&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment"&gt;&lt;strong&gt;&lt;code&gt;??=&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The nullish coalescing operator is a logical operator that returns its right-hand side operand when its left-hand side operand is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, and otherwise returns its left-hand side operand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is needed when you can't allow the normal falsey rules because a valid value might be rejected, i.e. when you do need to accept &lt;code&gt;0&lt;/code&gt; (zero), &lt;code&gt;''&lt;/code&gt; (empty string), or &lt;code&gt;false&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;Pair it with assignment to ensure nullish values are replaced with something valid, e.g. &lt;code&gt;foo ??= something&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"&gt;&lt;strong&gt;&lt;code&gt;Object.is()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Object.is()&lt;/code&gt; method determines whether two values are the same value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Its rules for equality are slightly different than &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal"&gt;&lt;strong&gt;&lt;code&gt;Object.seal()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Object.seal()&lt;/code&gt; method seals an object, preventing new properties from being added to it...Values of present properties can still be changed as long as they are writable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is like &lt;code&gt;const&lt;/code&gt; on steroids. The shape of the object cannot change - you can't add or remove properties - but you can edit their values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"&gt;&lt;strong&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Object.freeze()&lt;/code&gt; method freezes an object. A frozen object can no longer be changed [in any way].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like &lt;code&gt;seal()&lt;/code&gt;, but you can't even edit existing properties. Frozen means nothing about &lt;em&gt;that&lt;/em&gt; object can be changed, but one thing to remember is an object's "values that are objects can still be modified, unless they are also frozen."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fault-tolerance-is-still-not-enough"&gt;
  &lt;/a&gt;
  Fault tolerance is still not enough
&lt;/h2&gt;

&lt;p&gt;Whether you're writing TypeScript or not, those 15 tools should be used often, but in the end it still won't be enough. After types have been checked and objects prove they have the properties we expect them to have, there's still a void in this problem space. That void is validation. No, not input validation for security purposes - you do that server-side - but rather an extension of the validation we're already doing, i.e. ensuring what we have been given meets our requirements &lt;em&gt;before&lt;/em&gt; operating on it.&lt;/p&gt;

&lt;p&gt;I suggest you read Adam's &lt;a href="https://dev.to/bytebodger/tossing-typescript-1md3"&gt;Tossing TypeScript&lt;/a&gt; for a detailed explanation on this and then try his &lt;a href="https://github.com/bytebodger/allow"&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt; lib.&lt;/p&gt;

&lt;p&gt;Are these validations &lt;em&gt;always&lt;/em&gt; needed? No. There are advantages to JavaScript's forgiving nature and allowing for it with &lt;strong&gt;eyes wide open&lt;/strong&gt; can result in more simple and resilient code that might just save your users from an unnecessary bug. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Part-2: 5 HTML Tags That Almost Nobody Knows</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 20 Jul 2021 00:55:01 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8</link>
      <guid>https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8</guid>
      <description>&lt;p&gt;Hello, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;, today, I'm going to discuss another 5 HTML tags that you're almost don't know.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1:  5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltdfngt"&gt;
  &lt;/a&gt;
  &amp;lt;dfn&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;dfn&amp;gt;&lt;/strong&gt;: used to specify a term that is going to be defined, most browsers display this element with an italic font style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dfn&amp;gt;&lt;/span&gt;Mathematics&lt;span class="nt"&gt;&amp;lt;/dfn&amp;gt;&lt;/span&gt;
    is the science of structure, order, and relation that has evolved from
    counting, measuring, and describing the shapes of objects
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-KjsABn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c75qff0qlq99i3yrsjug.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-KjsABn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c75qff0qlq99i3yrsjug.PNG" alt="HTML tags Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltkbdgt"&gt;
  &lt;/a&gt;
  &amp;lt;kbd&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;kbd&amp;gt;&lt;/strong&gt;: used to define keyboard input, it is displayed with a &lt;em&gt;monospace&lt;/em&gt; font&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;How to rename a file ?&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Select the file with a left click and then press &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;F2&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; on your
    keyboard.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIsqWoF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btlgtnz122whodg3hx22.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIsqWoF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btlgtnz122whodg3hx22.PNG" alt="HTML tags Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltsampgt"&gt;
  &lt;/a&gt;
  &amp;lt;samp&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;samp&amp;gt;&lt;/strong&gt;: is used to define sample output from a computer program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;samp&amp;gt;&lt;/span&gt;File not found.&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;Press &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;F1&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; to continue&lt;span class="nt"&gt;&amp;lt;/samp&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vP63nFSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wyjkswwnjxhg9hj38o7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vP63nFSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wyjkswwnjxhg9hj38o7.PNG" alt="HTML tags Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltmetergt"&gt;
  &lt;/a&gt;
  &amp;lt;meter&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;meter&amp;gt;&lt;/strong&gt;: represents either a scalar value within a known range or a fractional value.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter"&gt;more details&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"skills"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meter&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2 out of 10&lt;span class="nt"&gt;&amp;lt;/meter&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y5WrZUJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nebw45oj9nkcpx57ju8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5WrZUJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nebw45oj9nkcpx57ju8.PNG" alt="HTML tags Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltdlgt-ltdtgt-amp-ltddgt"&gt;
  &lt;/a&gt;
  &amp;lt;dl&amp;gt;, &amp;lt;dt&amp;gt; &amp;amp; &amp;lt;dd&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;dl&amp;gt;&lt;/strong&gt; : is used wiht &lt;strong&gt;&amp;lt;dt&amp;gt;&lt;/strong&gt; and &lt;strong&gt;&amp;lt;dd&amp;gt;&lt;/strong&gt; to define a description list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;dt&amp;gt;&lt;/strong&gt;  defines a term in a description list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;dd&amp;gt;&lt;/strong&gt;  describes a term in a description list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;dfn&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;for specifing a term&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;kbd&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;defining a keyboard input&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;samp&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt; for defining sample output from a computer program&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;meter&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;for representing either a scalar value within a known range or a fractional value.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;dl&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;for defining a description list&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kxeqS3W3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec8y0q8c1o0palw7b3qr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxeqS3W3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec8y0q8c1o0palw7b3qr.PNG" alt="HTML tags Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;dfn&amp;gt;&lt;/strong&gt; : for specifing a term.&lt;br&gt;
&lt;strong&gt;&amp;lt;kbd&amp;gt;&lt;/strong&gt; : for defining a keyboard input.&lt;br&gt;
&lt;strong&gt;&amp;lt;samp&amp;gt;&lt;/strong&gt; : for defining sample output from a computer program.&lt;br&gt;
&lt;strong&gt;&amp;lt;meter&amp;gt;&lt;/strong&gt; : or representing either a scalar value within a known range or a fractional value.&lt;br&gt;
&lt;strong&gt;&amp;lt;dl&amp;gt;&lt;/strong&gt; : for defining a description list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/"&gt;www.w3schools.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/"&gt;www.developer.mozilla.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have an amazing day!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CI/CD Explained in 6 minutes</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 19 Jul 2021 23:22:08 +0000</pubDate>
      <link>https://dev.to/n3wt0n/ci-cd-explained-in-6-minutes-6ah</link>
      <guid>https://dev.to/n3wt0n/ci-cd-explained-in-6-minutes-6ah</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is CI/CD&lt;/strong&gt;? What are the concepts behind Continuous Integration, Continuous Deployment, and Continuous Delivery?&lt;/p&gt;

&lt;p&gt;These are the question &lt;strong&gt;we are going to answer Today&lt;/strong&gt;! I'm going to explain the &lt;strong&gt;CI/CD core concepts&lt;/strong&gt;, so you'll understand what Continuous Integration and Continuous Deployment are, in just &lt;strong&gt;6 minutes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is an introduction to CI/CD that will give you a clear idea of what they are.&lt;/p&gt;

&lt;p&gt;I will also cover how the teams do CI CD in GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;Here you have &lt;strong&gt;the video with the whole explanation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy the watch :)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OSzrpgogQOM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/OSzrpgogQOM"&gt;Link to the video: https://youtu.be/OSzrpgogQOM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OSzrpgogQOM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cicd</category>
      <category>build</category>
      <category>deploy</category>
    </item>
    <item>
      <title>Tips to organize well your Css</title>
      <author>Paschal Maximillian</author>
      <pubDate>Mon, 19 Jul 2021 23:01:00 +0000</pubDate>
      <link>https://dev.to/pascal488/tips-to-organize-well-your-css-32d6</link>
      <guid>https://dev.to/pascal488/tips-to-organize-well-your-css-32d6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-organize-your-css"&gt;
  &lt;/a&gt;
  HOW TO ORGANIZE YOUR CSS
&lt;/h2&gt;

&lt;p&gt;Organizing your Cascading Style Sheet(s) it is a pretty cool way to start developing on writing clean code if you are  beginner and if you are pro means you must deal with huge of Css file then it’s important to organize well your Css  to reduce errors and to make  code human readable.&lt;/p&gt;

&lt;p&gt;WHY!  ORGANIZING WELL YOUR CSS&lt;br&gt;
To increase your productivity&lt;br&gt;
Make easier to maintain when it comes in solving some errors&lt;br&gt;
To produce clean code.&lt;/p&gt;

&lt;p&gt;Some steps to ensure that your css is well organized&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use external CSS.&lt;br&gt;
This is the most helpful way to to organize your css rather than use internal css or inline css so use external way to organize your css&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define variables.&lt;br&gt;
Custom properties (sometimes referred to as CSS variables or cascading variables) are entities defined by CSS authors that contain specific values to be reused throughout a document. Complex websites have very large amounts of CSS, often with a lot of repeated values.Declare a variable in global zone,global variables are generic variables that will be used to keep the consistency between all our &lt;br&gt;
Components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Comment your css.&lt;br&gt;
Adding comments to your CSS will help any future developer work with your CSS file, but will also help you when you come back to the project after a break.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prefer to use class instead of id’s&lt;br&gt;
When your are creating a selector that can be reusable most of times it is better to use a class selector and in styling it is highly recommended to use class.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanks-if-you-reach-out-to-the-end"&gt;
  &lt;/a&gt;
  Thanks if you reach out to the end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;It is my first post please&lt;/em&gt;&lt;br&gt;
&lt;em&gt;show love&lt;/em&gt;&lt;br&gt;
follow me in IG &lt;a href="https://www.instagram.com/paschal_maximillian/"&gt;@paschal_maxillian&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>7 consejos para ganar $100,000 USD desde casa |  El número 6 es el más difícil de todos</title>
      <author>Luis Mejia</author>
      <pubDate>Mon, 19 Jul 2021 22:33:44 +0000</pubDate>
      <link>https://dev.to/luismejiadev/7-consejos-para-ganar-100-000-usd-desde-casa-el-numero-6-es-el-mas-dificil-de-todos-hge</link>
      <guid>https://dev.to/luismejiadev/7-consejos-para-ganar-100-000-usd-desde-casa-el-numero-6-es-el-mas-dificil-de-todos-hge</guid>
      <description>&lt;p&gt;&lt;strong&gt;Este contenido también está disponible en &lt;a href="https://www.youtube.com/watch?v=ugh8-H3JnqQ"&gt;youtube&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Durante la universidad, los profesores me decían que los programadores de Estados Unidos ganaban más de $100mil dólares al año. &lt;/p&gt;

&lt;p&gt;Al estar en un país en desarrollo (#Nicaragua), esa cantidad me parecía inalcanzable, y pensaba: "que bien por ellos, pero esas cantidades solo se ganan viviendo allá". No podía estar más equivocado.&lt;/p&gt;

&lt;p&gt;Gracias al trabajo remoto, ahora podemos generar ingresos de 6 cifras desde la comodidad de nuestra casa.&lt;/p&gt;

&lt;p&gt;Ya sé lo que están pensando, necesitas ser un genio para llegar a ganar esas cantidades. Lo sé porque yo también pensaba lo mismo. Pero por acá una noticia impactante:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NO NECESITAS SER UN GENIO&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Estoy seguro que estos 7 consejos les serán de utilidad:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-mejorar-nuestro-ingl%C3%A9s"&gt;
  &lt;/a&gt;
  1. Mejorar nuestro Inglés
&lt;/h2&gt;

&lt;p&gt;Si queremos ingresos de 6 cifras debemos apuntar a empresas medianas y grandes, y el principal idioma que utilizan es el Inglés.&lt;/p&gt;

&lt;p&gt;Pero, ¿qué tan bueno debe ser el inglés?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I4Bfk81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5hifdwq41gbfr235tsh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I4Bfk81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5hifdwq41gbfr235tsh.jpg" alt="Niveles-MCER-scaled"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;En la escala europea con niveles de A1 a C2, si tenemos un nivel de &lt;a href="https://academiaeuropea.com/blog/que-nivel-de-idioma-tienes-segun-el-mcer/"&gt;B2&lt;/a&gt;, ya estamos más que preparados para trabajar con empresas internacionales de forma remota.&lt;/p&gt;

&lt;p&gt;No se trata de tener un certificado que lo demuestre, lo más importante es que podamos comunicarnos sin esfuerzo con nativos del idioma, que ellos nos entiendan y nosotros entendamos.&lt;/p&gt;

&lt;p&gt;Si ya tienes un nivel medio, pero no sientes que avanzas, te recomiendo tomar clases con tutores particulares, donde me te enfoques en fortalecer áreas específicas, por ejemplo, discusiones técnicas en videollamada.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-profundizar-nuestras-habilidades-t%C3%A9cnicas-y-mejores-pr%C3%A1cticas"&gt;
  &lt;/a&gt;
  2. Profundizar nuestras habilidades técnicas y mejores prácticas
&lt;/h2&gt;

&lt;p&gt;Lo primero es elegir un par de tecnologías para especializarte. De preferencia, debes analizar cuales de éstas tienen mayor demanda en el mercado y también las que tienen los ingresos más altos.&lt;/p&gt;

&lt;p&gt;Después, mi consejo es partir de lo general a lo específico. Iniciar con un Web Framework, construir un sitio web, e ir profundizando en cómo funcionan, cuáles son las mejores prácticas de dicha tecnología, estudiar reglas de estilo, pruebas unitarias, metaprogramming, etc.&lt;/p&gt;

&lt;p&gt;También debes hacer lo mismo para el gestor de base de datos. En mi caso, postgres; aprender cómo analizar las consultas SQL para mejorar el desempeño, cómo usar indices parciales, common table expressions, vistas materializadas, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-mejorar-nuestras-habilidades-blandas-y-aprender-a-negociar"&gt;
  &lt;/a&gt;
  3. Mejorar nuestras habilidades blandas y aprender a Negociar
&lt;/h2&gt;

&lt;p&gt;Comunicación efectiva, habilidades de negociación, habilidad de liderazgo, storytelling, trabajo en equipo, definición de requerimientos, etc.&lt;/p&gt;

&lt;p&gt;Existen un sin número de habilidades a mejorar, por lo que les recomiendo buscar mucho contenido en linea para este punto.&lt;/p&gt;

&lt;p&gt;Una de las principales habilidades blandas si queremos alcanzar los ingresos de 6 cifras, es la &lt;strong&gt;negociación&lt;/strong&gt;. Debemos aprender a negociar y no aceptar únicamente lo que las empresas nos ofrecen. &lt;/p&gt;

&lt;p&gt;Es necesario investigar los salarios promedios que pagan las empresas y ajustar nuestras expectativas de ingresos por encima de la media.&lt;/p&gt;

&lt;p&gt;Al igual que con toda negociación, entre mejor preparados estemos, mejor nos irá.&lt;/p&gt;

&lt;p&gt;Les recomiendo estos recursos GRATIS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Únanse a nuestra comunidad #SixFigureMentorship en Discord, ahi tenemos el &lt;strong&gt;#salary-negotiation&lt;/strong&gt; channel, donde compartimos consejos, dudas, etc.  &lt;a href="https://discord.com/invite/ReYAw4NfF9"&gt;https://discord.com/invite/ReYAw4NfF9&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sigan el canal de Ramit Sethi ,  tiene muy buenos consejos sobre negociación de salario como &lt;a href="https://www.youtube.com/watch?v=9qrZgunXt5g"&gt;https://www.youtube.com/watch?v=9qrZgunXt5g&lt;/a&gt; y &lt;a href="https://www.youtube.com/watch?v=5yhLUQM6lZM"&gt;https://www.youtube.com/watch?v=5yhLUQM6lZM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Algunos libros que recomiendo son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3tMszCN"&gt;Soft Skills: The Software Developer's Life Manual&lt;/a&gt; de John Sonmez&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3bmPI8A"&gt;Clean Coder, The: A Code of Conduct for Professional Programmers&lt;/a&gt; de Robert C. Martin&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3uJ9hjf"&gt;The Pragmatic Programmer, From Journeyman To Master&lt;/a&gt; de Andrew Hunt, David Thomas - Addison Wesley&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/33ASrHr"&gt;Never Split the Difference: Negotiating As If Your Life Depended On It&lt;/a&gt; de Chris Voss&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3hm6mcv"&gt;Scrum: The Art of Doing Twice the Work in Half the Time
&lt;/a&gt; de Jeff Sutherland&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-mejorar-nuestra-presencia-en-linea"&gt;
  &lt;/a&gt;
  4. Mejorar nuestra presencia en linea
&lt;/h2&gt;

&lt;p&gt;Para este punto, pueden usar de checklist los consejos de mi &lt;a href="https://dev.to/luismejiadev/consejos-para-tu-cv-github-y-linkedin-3kka"&gt;publicación anterior&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-trabajar-en-proyectos-remotos-grandes"&gt;
  &lt;/a&gt;
  5. Trabajar en proyectos remotos grandes
&lt;/h2&gt;

&lt;p&gt;El tamaño Sí importa. Si queremos trabajar para empresas medianas y grandes, son importantes nuestros conocimientos y experiencias en plataformas e infraestructura escalables.&lt;/p&gt;

&lt;p&gt;Si tienes la oportunidad de elegir entre proyectos pequeños y proyectos grandes, los proyectos grandes tendrán más peso en tu experiencia si trabajas directamente con ellos.&lt;/p&gt;

&lt;p&gt;Al momento de la entrevista de trabajo, es importante resaltar números como porcentajes y cantidades, para que nuestros posibles clientes puedan darse una idea del tamaño de los sistemas en los que has trabajado. Por ejemplo: cantidad de servidores, de registros en base de datos, de usuarios, de transacciones diarias. Si son aplicaciones moviles, cantidad de usuarios, cantidad de descargas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-superar-nuestros-miedos-paralizantes"&gt;
  &lt;/a&gt;
  6. Superar nuestros miedos paralizantes
&lt;/h2&gt;

&lt;p&gt;Mi mayor consejo, pero también el más difícil, es superar el miedo paralizante que no nos deja postularnos a los trabajos desafiantes.&lt;/p&gt;

&lt;p&gt;A varias personas nos enseñan de pequeños que está mal cometer errores, que no debemos fallar o equivocarnos. De adultos eso nos provoca una parálisis por miedo a fallar. Pero el mayor fracaso es no intenarlo del todo.&lt;/p&gt;

&lt;p&gt;Te recomiendo que, aunque tengas miedo, te acostumbres a fracasar como parte de tu proceso de éxito.&lt;/p&gt;

&lt;p&gt;Una buena forma de reducir el miedo, es gestionando los riesgos que percibimos. Por ejemplo, para reducir el miedo financiero de trabajar remoto (que no te paguen, que te despidan), se pueden mantener dos o más fuentes de ingresos hasta sentirse suficientemente seguro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-movimiento-y-mejora-continua"&gt;
  &lt;/a&gt;
  7. Movimiento y Mejora continua
&lt;/h2&gt;

&lt;p&gt;"No tengas miedo de renunciar a lo bueno para ir por lo grandioso"&lt;/p&gt;

&lt;p&gt;Debemos siempre estar en un proceso de mejora continua, para seguir aumentando nuestras habilidades, pero no basta con mejorar nosotros.&lt;/p&gt;

&lt;p&gt;¿Qué pasa si la empresa actual no puede permitirse aumentar nuestro ingreso?&lt;/p&gt;

&lt;p&gt;En esos casos, será necesario cambiar de empresa.Cambiar de trabajo nos ayuda a crecer nuestros ingresos, contactos, experiencias, conocimientos, etc.&lt;/p&gt;

&lt;p&gt;Yo siempre he estado a favor de cambiar de trabajo después de &lt;strong&gt;X&lt;/strong&gt; cantidad de tiempo. Cuánto tiempo esperar ya es decisión propia y no está escrita en piedra, depende de cada situación.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gracias"&gt;
  &lt;/a&gt;
  Gracias
&lt;/h1&gt;

&lt;p&gt;Antes de finalizar, te invito a unirte a nuestro server de &lt;br&gt;
&lt;a href="https://discord.com/invite/ReYAw4NfF9"&gt;discord&lt;/a&gt; de la comunidad #SixFigureMentorship, una comunidad enfocada en aumentar nuestros ingresos hasta conseguir $100mil dólares anuales o más, trabajando de forma remota.&lt;/p&gt;

&lt;p&gt;Gracias por llegar hasta acá, no olvides compartir si te ha gustado el contenido y seguirme en &lt;a href="https://twitter.com/luismejiadev/"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>remote</category>
      <category>sixfigurementorship</category>
    </item>
    <item>
      <title>Next.js with Web3Modal Example</title>
      <author>Hunter Chang</author>
      <pubDate>Mon, 19 Jul 2021 22:19:58 +0000</pubDate>
      <link>https://dev.to/changoman/next-js-with-web3modal-example-mo1</link>
      <guid>https://dev.to/changoman/next-js-with-web3modal-example-mo1</guid>
      <description>&lt;p&gt;Hey everyone! I recently built an example website using Next.js and &lt;a href="https://github.com/Web3Modal/web3modal"&gt;Web3Modal&lt;/a&gt;. For those of you who don't know, Web3Modal is a simple way to connect your website to a Web3 / Ethereum wallet.&lt;/p&gt;

&lt;p&gt;This is essential when building a decentralized application (dApp) because you need a wallet to interact with the Ethereum application.&lt;/p&gt;

&lt;p&gt;Here is the example site: &lt;a href="http://web3modal-example.vercel.app"&gt;http://web3modal-example.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code: &lt;a href="https://github.com/ChangoMan/web3modal-example"&gt;https://github.com/ChangoMan/web3modal-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order for the Web3Modal to work in your browser, you'll need the &lt;a href="https://metamask.io/"&gt;MetaMask&lt;/a&gt; Chrome extension, or a &lt;a href="https://registry.walletconnect.org/wallets"&gt;WalletConnect&lt;/a&gt; compatible wallet.&lt;/p&gt;

&lt;p&gt;I was going to create a full blog post explaining how everything worked, but wasn't sure if anyone would be interested.&lt;/p&gt;

&lt;p&gt;If you would like a more in depth explanation of the source code, let me know in the comments down below! Thanks for looking!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>ethereum</category>
      <category>web3</category>
      <category>dapps</category>
    </item>
  </channel>
</rss>
