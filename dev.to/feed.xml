<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Push Code to GitHub in 2 easy steps, without using CLI!!?</title>
      <author>Nomadev💻🔱</author>
      <pubDate>Fri, 19 Nov 2021 12:06:14 +0000</pubDate>
      <link>https://dev.to/thenomadevel/how-to-push-code-to-github-in-2-easy-steps-without-using-cli-1jpp</link>
      <guid>https://dev.to/thenomadevel/how-to-push-code-to-github-in-2-easy-steps-without-using-cli-1jpp</guid>
      <description>&lt;p&gt;Hello, everyone  &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev&lt;/a&gt;  here, back with another blog on tech. As a developer, you have used version control, Undoubted every successful software project requires a version control system to facilitate the operation of various modules and versions by other teams. While thinking about version control the first thing that pops in my mind is the command-line interface, where we have access to source control features powered by git and GitHub.&lt;/p&gt;

&lt;p&gt;Surely it is a good practice to use the command line, but sometimes it's not that handy to rewrite the same lines if you are having multiple minor changes in quick succession.&lt;/p&gt;

&lt;p&gt;In this blog, you will learn &lt;strong&gt;how to push the code from Visual Studio Code to GitHub.&lt;/strong&gt; Before we get started, let us have a brief about Git &amp;amp; GitHub &lt;/p&gt;

&lt;p&gt;&lt;a href="https://git-scm.com/"&gt;&lt;strong&gt;Git -&lt;/strong&gt;&lt;/a&gt;   In simple words, Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Git is a distributed version control system, which means that the entire code base and history is available on every developer’s computer, which allows for easy branching and merging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/"&gt;&lt;strong&gt;GitHub -&lt;/strong&gt;&lt;/a&gt;  It is a web-based version-control and collaboration platform for software developers. GitHub facilitates social coding by providing a web interface to the Git code repository and management tools for collaboration. &lt;/p&gt;

&lt;p&gt;I think that was enough description of Git and GitHub, so without wasting much time, we will proceed to our 2 easy steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RLj0WKq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636527668307/gz_iGt6da.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RLj0WKq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636527668307/gz_iGt6da.gif" alt="start.gif" width="400" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#0-prerequisites"&gt;
  &lt;/a&gt;
  0. Prerequisites
&lt;/h2&gt;

&lt;p&gt;You must have Git, Vs Code installed in your system &amp;amp; must have a GitHub account . Open your project's folder into VS Code and authenticate VS Code to use GitHub.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ctrl + K + O&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-publish-to-github"&gt;
  &lt;/a&gt;
  1. Publish to GitHub
&lt;/h2&gt;

&lt;p&gt;Publishing code to GitHub means creating a repository there, with the desired name and visibility type. &lt;br&gt;
Click the Source Control icon on the left (Ctrl + Shift + G) and press &lt;strong&gt;Publish to GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j60rWV_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637320838135/6xKaYksPx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j60rWV_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637320838135/6xKaYksPx.png" alt="publish.PNG" width="260" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-select-repositorys-name-and-visibility"&gt;
  &lt;/a&gt;
  2. Select Repository's Name and Visibility
&lt;/h2&gt;

&lt;p&gt;After you click Publish to GitHub, you will see the option on VS Code to Name the repo and to select its visibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IxJHXuLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637321085409/LY2aZYye8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IxJHXuLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637321085409/LY2aZYye8.png" alt="select name and visib.PNG" width="264" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, you will find an option to select the files you would like to push,  select them and press OK.&lt;/p&gt;

&lt;p&gt;Tada, This was it, &lt;strong&gt;wasn't it so simple??&lt;/strong&gt;&lt;br&gt;
You have pushed your code to GitHub, within &lt;strong&gt;2 easy steps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----PQkCl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637321381358/R_J3D7NwN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----PQkCl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637321381358/R_J3D7NwN.png" alt="fc.PNG" width="478" height="86"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HK7OnAzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637321405057/wtV-zJA-L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HK7OnAzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637321405057/wtV-zJA-L.png" alt="successfull.png" width="462" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have published your repository to GitHub, you can do whatever you can do with the CLI (i.e commit, push, pull, etc) from the Source Control Section (Ctrl + Shift + G), by just having single clicks instead of writing long commands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j120z-gJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637322105790/suT0wqqF0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j120z-gJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637322105790/suT0wqqF0.png" alt="git.png" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this was it, If you liked this blog make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; where I post daily threads on Programming, Open Source, and on Getting better remote job opportunities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ds3CGr4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535713041/l_l_GhFZU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ds3CGr4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535713041/l_l_GhFZU.gif" alt="twitter.gif" width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-a-few"&gt;
  &lt;/a&gt;
  Here are a few
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1448187696367636483"&gt;Top 10 Websites where you can master programming for Free&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thenomadevel/status/1460938027920887808"&gt;TOP 5 GitHub Repo to Master Javascript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1451082698500362244"&gt;The Best VS Code Extensions to Supercharge Your Git&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thenomadevel/status/1450355811268448261"&gt;Top 5 Sites To Find Remote Developer Jobs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1449253111235629057"&gt;MOST USED GIT COMMANDS YOU MUST LEARN &lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to like, comment, and follow so that you don't miss the amazing content. And let me know int the comments what you like, doing it with CLI or this one ?? &lt;br&gt;
Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UpsRUSQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535784823/qFdQIg54G.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UpsRUSQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535784823/qFdQIg54G.gif" alt="follow.gif" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kotlin 1.6.0 is released / GitHub addresses the recent security issues related to the npm registry</title>
      <author>Developer Nation</author>
      <pubDate>Fri, 19 Nov 2021 12:04:42 +0000</pubDate>
      <link>https://dev.to/developernation/kotlin-160-is-released-github-addresses-the-recent-security-issues-related-to-the-npm-registry-4n5h</link>
      <guid>https://dev.to/developernation/kotlin-160-is-released-github-addresses-the-recent-security-issues-related-to-the-npm-registry-4n5h</guid>
      <description>&lt;p&gt;Here are the latest articles and news from last week's &lt;a href="https://content.developereconomics.com/developer-nation-newsletter-signup-form"&gt;biweekly newsletter&lt;/a&gt;. Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-resources-amp-articles"&gt;
  &lt;/a&gt;
  Dev Resources &amp;amp; Articles
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://swiftrocks.com/how-to-solve-any-ios-crash-ever"&gt;How to solve any iOS crash ever.&lt;/a&gt; Ever had a crash in which you had absolutely no idea what was going on, and no amount of testing allowed you to reproduce the issue? If so, read this! [SWIFTROCKS]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.nielsmouthaan.nl/aso-tips-and-tricks-to-increase-your-apps-ranking"&gt;ASO tips &amp;amp; tricks to increase your app's ranking.&lt;/a&gt; Niels Mouthaan shows how you can increase downloads and make more money with your apps by optimizing their discoverability on the App Store. [NIELSMOUTHAAN]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://proandroiddev.com/stretching-the-ux-of-android-apps-for-foldable-phones-d51957463f87"&gt;Stretching the UX of Android apps for foldable phones.&lt;/a&gt; To make apps foldable-aware, Google has provided some tools with Android Jetpack within a new WindowManager API that enables apps to benefit from screen size change. [PROANDROIDDEV]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/j471n/10-css-resources-that-you-should-bookmark-46l6"&gt;10 CSS Resources that you should bookmark.&lt;/a&gt; Some awesome resources that can improve your productivity. [DEVTO]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/17-killer-websites-for-web-developers-13e1e30345b8"&gt;17 killer websites for web developers.&lt;/a&gt; Keeping websites handy can be the ultimate productivity hack, Here are some of the best websites Harsh Makadia uses to make his life easier. [JAVASCRIPT.PLAINENGLISH]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/routing-in-next-js-beginner-guide/"&gt;A beginner’s guide to routing in Next.JS, with examples.&lt;/a&gt; Kingsley Ubah shares how to set up a Next.js project and how the system of file routing in Next.js works. [SITEPOINT]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/the-right-way-to-use-favicons"&gt;The right way to use favicons.&lt;/a&gt; Alexey Shepelev gives a run-down on how to work with favicons. [DZONE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/whats-new-in-xamarin-and-visual-studio-2022/"&gt;What’s new in Xamarin and Visual Studio 2022.&lt;/a&gt; David Ortinau shares a round-up of the latest Xamarin releases, revisits the Xamarin support policy, and looks ahead at the road to .NET 6 and .NET MAUI coming in the second quarter of 2022. [DEVBLOGS.MICROSOFT]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.developernation.net/blog/size-of-programming-language-communities-in-q3-2021"&gt;Size of Programming Language Communities in Q3 2021.&lt;/a&gt; Programming languages are a beloved subject of debate and one of the first topics we cover in our reports. Check out who reigns at the top. [DEVELOPERNATION]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.danlew.net/2021/11/01/how-trello-android-converted-from-gson-to-moshi/"&gt;How Trello Android converted from Gson to Moshi.&lt;/a&gt;Trello Android recently converted from using Gson to Moshi for handling JSON. It was a bit tricky so Dan Lew wanted to document the process. [DANLEW]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.crio.do/blog/remote-internships/"&gt;5 ways to crack remote internships in 2021.&lt;/a&gt; Although you may not find companies posting about remote internship roles, you can land an opportunity by putting yourself out there, in the market. [CRIO]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dzone.com/articles/software-engineering-is-a-losers-game"&gt;Software engineering is a loser’s game.&lt;/a&gt; Software engineering is a loser’s game. So let’s learn to play the game and stop losing to ourselves. [DZONE]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hanselman.com/blog/dotnetconf-2021-net-everywhere-windows-linux-and-beyond"&gt;DotNetConf 2021 - .NET everywhere - Windows, Linux, and beyond.&lt;/a&gt; .NET 6 is released and it's a LTS release which means it'll be fully and actively supported for the next 3 years. [HANSELMAN]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.eweek.com/database/role-of-data-governance-in-effective-data-management/"&gt;The role of data governance in effective data management.&lt;/a&gt; Four industry experts discuss the growing challenges in data governance, and highlight the issues that need to be resolved for better data management. [EWEEK]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.thatjeffsmith.com/archive/2021/10/rest-apis-for-oracle-database-postman-vs-insomnia/"&gt;REST APIs for Oracle Database.&lt;/a&gt; Postman vs Insomnia. [THATJEFFSMITH]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://splimter.medium.com/microservices-using-nestjs-4ea5f1580d32"&gt;Microservices using NestJS.&lt;/a&gt; Soheyb Merah shares their guide. [SPLIMTER.MEDIUM]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://apiacademy.co/2021/08/sre-vs-devops-for-apis/"&gt;SRE vs DevOps for APIs.&lt;/a&gt; Adam DuVander discusses the benefits of each and how companies use them to strengthen their API products. [APIACADEMY]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#industry-news"&gt;
  &lt;/a&gt;
  Industry News
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://thehackernews.com/2021/11/google-warns-of-new-android-0-day.html"&gt;Google warns of new Android 0-day vulnerability under active targeted attacks.&lt;/a&gt; Google has rolled out its monthly security patches for Android with fixes for 39 flaws, including a zero-day vulnerability that it said is being actively exploited in the wild in limited, targeted attacks. [THEHACKERNEWS]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://swift.org/blog/swift-docc/"&gt;Swift-DocC is now open source.&lt;/a&gt; This is a new documentation compiler for Swift frameworks and packages. [SWIFT]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.techrepublic.com/article/qualcomm-and-lenovo-launch-new-augmented-reality-partnership-to-expand-developer-ecosystem/"&gt;Qualcomm and Lenovo launch new augmented reality partnership to expand developer ecosystem.&lt;/a&gt; The new product combines the Snapdragon Spaces XR Developer platform and the ThinkReality A3 smart glasses. [TECHREPUBLIC]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.jetbrains.com/kotlin/2021/11/kotlin-1-6-0-is-released/"&gt;Kotlin 1.6.0 is released.&lt;/a&gt; Kotlin 1.6.0 is now officially released with Stable exhaustive whens, Kover, and a new memory manager for Kotlin/Native. Other language and standard library features released in 1.5.30 became Stable as well. [JETBRAINS]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.blog/2021-11-15-githubs-commitment-to-npm-ecosystem-security/#security-issues-related-to-the-npm-registry"&gt;GitHub addresses the recent security issues related to the npm registry.&lt;/a&gt; GitHub’s discuss their commitment to npm ecosystem security. [BLEEPINGCOMPUTER]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uk.pcmag.com/security/136927/att-reveals-malware-targeting-millions-of-routers-iot-devices"&gt;AT&amp;amp;T reveals malware targeting millions of routers, IoT devices.&lt;/a&gt; The company's Alien Labs threat intelligence unit dubbed the malware BotenaGo because it's written in Go, which Google designed specifically with networking in mind. It's also capable of creating botnets that function across a variety of device types. [PCMAG]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.thurrott.com/windows/windows-11/259208/windows-11-to-block-windows-11-browser-workarounds"&gt;Microsoft to block Windows 11 browser workarounds.&lt;/a&gt; “Something changed between Windows 11 builds 22483 and 22494 (both Windows Insider Preview builds),” EdgeDeflector creator Daniel Aleksandersen writes in a new blog entry. “The build changelog … omitted the headline news: you can no longer bypass Microsoft Edge using apps like EdgeDeflector.” [THURROTT]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-hits"&gt;
  &lt;/a&gt;
  Quick Hits
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.blog/2021-11-15-highlights-from-git-2-34/"&gt;Git 2.34 is here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/blog/release/v17.1.0/"&gt;Node v17.1.0 available.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cockroachlabs.com/blog/cockroachdb-21-2-release/"&gt;CockroachDB 21.2 is released.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-9/"&gt;Announcing .NET MAUI Preview 9.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ruby-lang.org/en/news/2021/11/09/ruby-3-1-0-preview1-released/"&gt;Ruby 3.1.0 preview 1 released.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://parceljs.org/blog/v2/"&gt;Parcel v2.0.0 stable is now available.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://crystal-lang.org/2021/10/14/1.2.0-released.html"&gt;Crystal 1.2.0 is released.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.jetbrains.com/phpstorm/2021/10/phpstorm-2021-2-3-is-released/"&gt;PhpStorm 2021.2.3 is released.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devnews</category>
      <category>webdev</category>
      <category>backend</category>
      <category>mobiledev</category>
    </item>
    <item>
      <title>How to use Search Contexts on Sourcegraph</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Fri, 19 Nov 2021 12:02:50 +0000</pubDate>
      <link>https://dev.to/sourcegraph/how-to-use-search-contexts-on-sourcegraph-138n</link>
      <guid>https://dev.to/sourcegraph/how-to-use-search-contexts-on-sourcegraph-138n</guid>
      <description>&lt;p&gt;Sourcegraph prides itself in the ability to search millions of open source and private repositories. &lt;/p&gt;

&lt;p&gt;Many features enrich the developer's experience of using Sourcegraph code search. One of such features is &lt;strong&gt;Search Contexts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, you'll learn how to use search contexts on &lt;a href="https://sourcegraph.com"&gt;Sourcegraph Cloud&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-search-contexts"&gt;
  &lt;/a&gt;
  What are Search Contexts?
&lt;/h2&gt;

&lt;p&gt;Search contexts are a set of repositories at specific revisions that search queries on Sourcegraph will target. In other words, search contexts enable you to narrow, group and search only the code repositories you care about. &lt;/p&gt;

&lt;p&gt;By default, Sourcegraph uses a global search context (namely, &lt;code&gt;context:global&lt;/code&gt;) for all search queries, when no search context is specified by the actor (me, you, or a programmable robot) performing the search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases-for-search-contexts"&gt;
  &lt;/a&gt;
  Use cases for Search Contexts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#first"&gt;
  &lt;/a&gt;
  &lt;em&gt;First&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In a day, I search many repositories for code. I have identified about 15 code repos that often come up repeatedly and return the desired search results. I want to group them so that my search query targets only this sets of repos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#second"&gt;
  &lt;/a&gt;
  &lt;em&gt;Second&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sequel to the first case, Sourcegraph allows me to search code repo branches. Instead of specifying the branch names in my query every time, I want to group specific branches of certain repos once to focus more on what I need to find than the semantics of finding it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#third"&gt;
  &lt;/a&gt;
  &lt;em&gt;Third&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;My company has hundreds of repos, thousands of developers and several teams. Sourcegraph allows us to search all of these repos. However, we'd also like each team to be able to search only the code repos they actively manage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-search-contexts"&gt;
  &lt;/a&gt;
  How to use Search Contexts
&lt;/h2&gt;

&lt;p&gt;The first step is to go to &lt;a href="https://sourcegraph.com"&gt;sourcegraph.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You’ll see a &lt;strong&gt;context:global&lt;/strong&gt; selector at the left side of the search textbox. &lt;/p&gt;

&lt;p&gt;Every open-source repository that is added to &lt;a href="https://sourcegraph.com"&gt;Sourcegraph Cloud&lt;/a&gt; is automatically assigned to the global search context.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--REUqO_yX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zybq8h07ny2fjsicpuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--REUqO_yX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zybq8h07ny2fjsicpuj.png" alt="Global context" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can explore other available public search contexts by clicking the search contexts selector. A dropdown menu should appear as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYoZEvSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9r5c2yb0d9grwnaumav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYoZEvSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9r5c2yb0d9grwnaumav.png" alt="Dropdown of other contexts" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yaaaay!! More public search contexts. Here we have: &lt;a href="https://sourcegraph.com/contexts/chakraui"&gt;chakraui&lt;/a&gt;, &lt;a href="https://sourcegraph.com/contexts/cncf"&gt;cncf&lt;/a&gt;, &lt;a href="https://sourcegraph.com/contexts/kubernetes"&gt;kubernetes&lt;/a&gt;, &lt;a href="https://sourcegraph.com/contexts/o3de"&gt;o3de&lt;/a&gt;, &lt;a href="https://sourcegraph.com/contexts/stackstorm"&gt;stackstorm&lt;/a&gt;, &lt;a href="https://sourcegraph.com/contexts/stanford"&gt;stanford&lt;/a&gt;, and &lt;a href="https://sourcegraph.com/contexts/temporalio"&gt;temporalio&lt;/a&gt; search contexts that anyone can use to explore public code.&lt;/p&gt;

&lt;p&gt;Given a scenario where you want to search for code within the Kubernetes community, you can select the &lt;strong&gt;kubernetes&lt;/strong&gt; search context and input your query syntax in the search textbox like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NESqxqhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilj7biikt1klj43rqofu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NESqxqhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilj7biikt1klj43rqofu.png" alt="Public search contexts" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It only searches for code within the &lt;strong&gt;Kubernetes&lt;/strong&gt; search context. One major benefit of search contexts is the swift response time you get while searching for anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Recommendation:&lt;/strong&gt; Explore the Stanford search context. A treasure of open source code from Stanford students, academics and professors!&lt;/p&gt;

&lt;p&gt;You’re probably wondering how to create your search context. So let’s get into it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By the way, if you have added repositories to &lt;a href="https://sourcegraph.com"&gt;Sourcegraph Cloud&lt;/a&gt;, you already have a search context in this format: &lt;strong&gt;context:@username&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-search-contexts"&gt;
  &lt;/a&gt;
  How to create Search Contexts
&lt;/h2&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;Sign up for a free account on &lt;a href="https://sourcegraph.com/sign-up"&gt;Sourcegraph.com&lt;/a&gt;. You can’t create a search context without an account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Go to &lt;em&gt;Code Search&lt;/em&gt; in the top left navigation bar. On Hover, you’ll see a dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0xfYSWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36vptwehge9jkbkrgr49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0xfYSWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36vptwehge9jkbkrgr49.png" alt="Search Context drop down" width="880" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;em&gt;Contexts&lt;/em&gt; menu item. It'll direct you to a page that shows all your existing search contexts (if you have others apart from the global search context).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnrIYXs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n3plwxy4ef7w4jtb7lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnrIYXs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n3plwxy4ef7w4jtb7lw.png" alt="All search contexts" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the image above, you can see that I already have a &lt;strong&gt;context:&lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;
&lt;/strong&gt; search context because I added some private repositories to Sourcegraph a few months ago.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;Click on the &lt;em&gt;Create search context&lt;/em&gt; button by the right hand side.&lt;br&gt;
It will direct you to &lt;a href="https://sourcegraph.com/contexts/new"&gt;https://sourcegraph.com/contexts/new&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4R9WTcBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oipbdue52pum25dh64j9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4R9WTcBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oipbdue52pum25dh64j9.png" alt="Create new search context" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;description&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Choose the &lt;strong&gt;visibility&lt;/strong&gt; of the context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9Xvj1DM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64o7x5t2frrbgghnue87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9Xvj1DM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64o7x5t2frrbgghnue87.png" alt="Context visibility" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, add the repositories you want to be part of this context in the format above.&lt;/p&gt;

&lt;p&gt;An example is this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhsxKzks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flklkrbkoj1wh4lugutr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhsxKzks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flklkrbkoj1wh4lugutr.png" alt="Add repository to the context" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remove the “https://” when adding the repository URL. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test the configuration&lt;/li&gt;
&lt;li&gt;Go ahead and create the search context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will see your recently created search context. Mine is below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3uO6Nku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsly935o1pryw2pcly7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3uO6Nku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsly935o1pryw2pcly7s.png" alt="Eden life backend context" width="880" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AfuiFSsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51un79afcpyndft1kma7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AfuiFSsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51un79afcpyndft1kma7.png" alt="All contexts" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can explore only the code you care about in this newly minted search context like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6slh1EMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agbznm50vsx5ijo8sd3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6slh1EMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agbznm50vsx5ijo8sd3k.png" alt="Explore new search context" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Don’t forget to press the context selector to switch to the global search context if you need to explore all the public code on Sourcegraph.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As developers, our knowledge of refactoring code and identifying patterns come in handy in automating repeatable processes. Leverage your search context knowledge in taking your code search prowess to the next level and create as many contexts as possible to match your use case. If you are part of a team, invite them to enjoy the benefits of code search.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sourcegraph.com"&gt;Sourcegraph.com&lt;/a&gt; is not the only option to add, explore private code and use search contexts. Sourcegraph can be installed in different ways to set up a deployment for your private code. &lt;/p&gt;

&lt;p&gt;You can run &lt;a href="https://docs.sourcegraph.com/admin/install#self-hosted"&gt;Sourcegraph locally&lt;/a&gt; or opt-in for us to set up a &lt;a href="https://docs.sourcegraph.com/admin/install/managed"&gt;managed Sourcegraph instance&lt;/a&gt; for your team. You'll be able to use a self-hosted Sourcegraph instance for free (up to 10-users).&lt;/p&gt;




&lt;p&gt;Have suggestions or questions? Leave a comment, or join our &lt;a href="https://about.sourcegraph.com/community/?utm_medium=social&amp;amp;utm_source=devto&amp;amp;utm_campaign=slacklaunch"&gt;Community Slack Space&lt;/a&gt; where our team will be happy to answer any questions you may have about Sourcegraph.&lt;/p&gt;

</description>
      <category>codesearch</category>
      <category>sourcegraph</category>
      <category>search</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AutoTable: Your Butler-Like Sharding Configuration Tool</title>
      <author>Luomei Veronica Xu</author>
      <pubDate>Fri, 19 Nov 2021 11:56:22 +0000</pubDate>
      <link>https://dev.to/veronicaxu/autotable-your-butler-like-sharding-configuration-tool-2pla</link>
      <guid>https://dev.to/veronicaxu/autotable-your-butler-like-sharding-configuration-tool-2pla</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Sharding&lt;/code&gt; is the core feature of Apache ShardingSphere. We guess, your old sharding workflow (without data migration) probably looks like the one below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcznNWWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inradbbaw0zjkfd0t0x4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcznNWWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inradbbaw0zjkfd0t0x4.png" alt="Sharding Workflow" width="880" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In such workflow, you have to clearly know your sharding strategies, and the actual table names and their datasources. Then, you base your sharding rules on such information.&lt;/p&gt;

&lt;p&gt;One of the table distribution results may be 8 sharding databases each containing 4 tables.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wvzqzv9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygnkzv6en4ajz252pwbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wvzqzv9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygnkzv6en4ajz252pwbx.png" alt="8 Databases x 4 Tables Distribution" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;Only when you are 100% sure about the table distribution you can code the correct actualDataNodes rules. Otherwise, you may write the wrong one. The correct sharding rule in this case looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tables:
t_order:
actualDataNodes: ds_${0..7}.t_order_${0..3}
databaseStrategy:
standard:
shardingColumn: order_id
shardingAlgorithmName: database_inline
tableStrategy:
standard:
shardingColumn: order_id
shardingAlgorithmName: table_inline
shardingAlgorithms:
database_inline:
type: INLINE
props:
algorithm-expression: ds_${order_id % 8}
table_inline:
type: INLINE
props:
algorithm-expression: t_order_${order_id % 4}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ShardingSphere actually has very user-friendly configuration rules. However, users may still have difficulties, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Failure to understand sharding strategies or rules;*&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inconsistency between sharding rules and actual table distribution;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wrong configuration expressions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;We always pay attention to user issues. For example, we have noticed one of our users found the following issue:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZV6V9_d6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeh4s8u0tjqw2d9a1ulf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZV6V9_d6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeh4s8u0tjqw2d9a1ulf.png" alt="Image description" width="880" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-need-autotable"&gt;
  &lt;/a&gt;
  Why You Need AutoTable？
&lt;/h2&gt;

&lt;p&gt;Apache ShardingSphere Version 5.0.0 launched &lt;code&gt;AutoTable&lt;/code&gt;, a new method that makes sharding configuration easier for you.&lt;/p&gt;

&lt;p&gt;Literally, &lt;code&gt;AutoTable&lt;/code&gt; means automated table sharding. When you use &lt;code&gt;AutoTable&lt;/code&gt;, you only need to specify the sharding count and the datasource. Thanks to AutoTable, you no longer need to worry about actual table distribution.The correct configuration format is shown as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;autoTables:
t_order:
# Specify your datasources
actualDataSources: ds_${0..7}
shardingStrategy:
standard:
shardingColumn: order_id
shardingAlgorithmName: mod
shardingAlgorithms:
mod:
type: MOD
props:
# Specify your sharding-count
sharding-count: 32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Due to AutoTable configuration, ShardingSphere is able to recognize that the logic table &lt;code&gt;t_order&lt;/code&gt; has 8 datasources and needs 32 sharding tables, and then it automatically calculates the distribution result: 8 sharding databases* 4 sharding tables. The result is exactly the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autotable-amp-distsql"&gt;
  &lt;/a&gt;
  AutoTable &amp;amp; DistSQL
&lt;/h2&gt;

&lt;p&gt;Now, you know more about &lt;code&gt;AutoTable&lt;/code&gt;. However, when you combine AutoTable with DistSQL, the results are even more impressive as it can greatly simplify sharding configuration for you. Unlike the old method, the DistSQL configuration rule works immediately so you no longer need to restart it anymore. Besides, one rule change will never have impact on others.&lt;/p&gt;

&lt;p&gt;DistSQL supports three expressions used to manage sharding table rules: create, alter and drop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create a sharding table rule
CREATE SHARDING TABLE RULE t_order (
RESOURCES(resource_0,resource_1),
SHARDING_COLUMN=order_id,TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=4))
);
# Ater a sharding table rule
ALTER SHARDING TABLE RULE t_order (
RESOURCES(resource_0,resource_1),
SHARDING_COLUMN=order_id,TYPE(NAME=hash_mod,PROPERTIES("sharding-count"=10))
);
# Drop a sharding table rule
DROP SHARDING TABLE RULE t_order;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Rule alteration may have impact on old data. In order to fix the problem, we provide ShardingSphere Scaling that allows you to migrate data and makes it more convenient for you to manage distributed data. We are happy to share more about ShardingSphere Scaling in the near future.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Can I use AutoTable in ShardingSphere-JDBC?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, you can.&lt;/p&gt;

&lt;p&gt;Both ShardingSphere-JDBC and ShardingSphere-Proxy support AutoTable. What’s more, you can also use DistSQL in Proxy for dynamic configuration in order to meet your various access demands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which Sharding Algorithms Does AutoTable Support?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AutoTable supports all automatic sharding algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MOD：Modulo Sharding Algorithm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HASH_MOD ：Hash Modulo Sharding Algorithm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VOLUME_RANGE：Volume Based Range Sharding Algorithm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BOUNDARY_RANGE：Boundary Based Range Sharding Algorithm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AUTO_INTERVAL : Auto Interval Sharding Algorithm&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information, please read the Apache ShardingSphere document &lt;em&gt;“Automatic Sharding Algorithm”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In addition to using build-in algorithms, you can also develop SPI extension to customize your own sharding algorithm when necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I Have Already Used YAML. Can I Use AutoTable Now?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We don’t recommend you to do that.&lt;/p&gt;

&lt;p&gt;If you’re sure that such switch can make the table distribution result conform to your expectation, you may have a try. Otherwise, please don’t do that.&lt;/p&gt;

&lt;p&gt;However, if you want to create a new table, you are welcome to use AutoTable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What‘s the Best Scenario for AutoTable?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AutoTable aims to be your butler for sharding configuration. All you need to do is to tell it how many shards you need, and then it saves you the trouble of remembering the actual table location and table count.&lt;/p&gt;

&lt;p&gt;To use AutoTable, you better configure rules first and then use &lt;code&gt;CREATE TABLE&lt;/code&gt; to create tables. Old habits die hard but please change your old habit: create tables first and then configure rules. Now ShardingSphere is more like an access point of your distributed database, instead of middleware.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Datasource Names Are Non-Contiguous or I Have Too Many Datasource Names. Can I Use AutoTable?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, you can. When you specify your datasources, their names are not required to be continuous. To solve the problem, you can use enumeration-expression and inline-expression at the same time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE SHARDING TABLE RULE t_order (
RESOURCES('resource_${0..9}',resource_12,resource_15,"resource_$-&amp;gt;{17..19}"),
...
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Can I use AutoTable and the Old Method Together?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, you can.&lt;/p&gt;

&lt;p&gt;For more information, please read: &lt;a href=""&gt;https://github.com/apache/shardingsphere/blob/master/shardingsphere-jdbc/shardingsphere-jdbc-core/src/test/resources/config/config-sharding.yaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also welcome other community members to help us find more issues, to improve the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shardingsphere-community"&gt;
  &lt;/a&gt;
  ShardingSphere Community:
&lt;/h2&gt;

&lt;p&gt;ShardingSphere Github: &lt;a href=""&gt;https://github.com/apache/shardingsphere&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ShardingSphere Twitter: &lt;a href=""&gt;https://twitter.com/ShardingSphere&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ShardingSphere Slack Channel: &lt;a href=""&gt;apacheshardingsphere.slack.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contributor Guide：&lt;a href=""&gt;https://shardingsphere.apache.org/community/en/contribute/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  Author
&lt;/h2&gt;

&lt;p&gt;Longtao Jiang&lt;/p&gt;

&lt;p&gt;SphereEx Middleware Development Engineer &amp;amp; Apache ShardingSphere Contributor.&lt;/p&gt;

</description>
      <category>sharding</category>
      <category>shardingsphere</category>
      <category>java</category>
      <category>dbms</category>
    </item>
    <item>
      <title>How Maps solve the limitations of Objects in JavaScript</title>
      <author>Jay Cruz</author>
      <pubDate>Fri, 19 Nov 2021 11:51:22 +0000</pubDate>
      <link>https://dev.to/coderjay06/how-maps-solve-the-limitations-of-objects-in-javascript-38np</link>
      <guid>https://dev.to/coderjay06/how-maps-solve-the-limitations-of-objects-in-javascript-38np</guid>
      <description>&lt;h6&gt;
  &lt;a href="#an-overview-of-maps-in-javascript-and-how-they-can-make-up-for-limitations-that-come-with-using-objects"&gt;
  &lt;/a&gt;
  An overview of Maps in JavaScript and how they can make up for limitations that come with using objects.
&lt;/h6&gt;

&lt;p&gt;In JavaScript, objects are one of the most commonly used data structures. They provide you with a way to organize and store data as key/value pairs. While this is the case they also come with some limitations that are worth pointing out. In this article, we’ll be going over what those limitations are and show how using the Map object vs regular objects can be more effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-map-object"&gt;
  &lt;/a&gt;
  What is the Map object?
&lt;/h2&gt;

&lt;p&gt;The Map object was first introduced with the ES6 version of JavaScript. Like regular objects, they can contain key, value pairs and allow you to add, retrieve, remove, and check for those keys and values.&lt;/p&gt;

&lt;p&gt;To create a new instance of the Map object we can do so as the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several built-in properties and methods that come with an instance of the Map object. These include but are not limited to some of the more common ones such as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.set()&lt;/code&gt; - Adds key, value pairs with the first argument being the key and second being the value &lt;code&gt;.set(key, value)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.get()&lt;/code&gt; - Retrieves a value linked to a key by passing in the specified key as the only argument &lt;code&gt;.get(key)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.delete()&lt;/code&gt; - Removes a key, value pair identified by the passed-in key name &lt;code&gt;.delete(key)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.has()&lt;/code&gt; - Checks whether or not a key, value pair exists and returns a boolean value. Takes in the key as the only argument &lt;code&gt;.has(key)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.size&lt;/code&gt; - Returns an integer representing the number of key/value pairs contained within the Map object&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;For more about the Map object’s built-in properties and methods check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#constructor"&gt;link&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-map-to-avoid-limitations-of-using-objects"&gt;
  &lt;/a&gt;
  Using Map to avoid limitations of using objects
&lt;/h2&gt;

&lt;p&gt;To show how using the Map object can solve for limitations that arise when using objects let’s go over what these limitations are and how we can avoid them using maps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objects-are-not-guaranteed-to-be-ordered"&gt;
  &lt;/a&gt;
  Objects are not guaranteed to be ordered
&lt;/h3&gt;

&lt;p&gt;Although this has changed since JavaScript has updated to ES6 the ordering for the key/value pairs of a regular object can still be unreliable.&lt;/p&gt;

&lt;p&gt;Take the following object we declared for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we log &lt;code&gt;obj&lt;/code&gt; to the console it displays a different ordering from what we originally declared it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we try declaring the same key/value pairs with a map,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we instead get the original order in which they were declared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Greet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#no-method-to-quickly-determine-the-length-or-size-of-an-object"&gt;
  &lt;/a&gt;
  No method to quickly determine the length or size of an object
&lt;/h3&gt;

&lt;p&gt;With an object, we determine the size manually by iterating over the object using a for loop and a counter or using the &lt;code&gt;Object.entries()&lt;/code&gt; method along with &lt;code&gt;.length&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we need to find out the number of key/value pairs in a Map object we can use the &lt;code&gt;.size&lt;/code&gt; property to easily get it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#map-object-is-naturally-iterable-object-is-not"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Map object is naturally iterable, Object is not&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To iterate over objects we usually use a for..in loop to manually get each key and value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// obj = {1: 'one', 2: 'two', 3: 'three'}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="c1"&gt;// 1: one&lt;/span&gt;
    &lt;span class="c1"&gt;// 2: two&lt;/span&gt;
    &lt;span class="c1"&gt;// 3: three&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note however that &lt;code&gt;Object.keys()&lt;/code&gt; and &lt;code&gt;Object.values()&lt;/code&gt; or &lt;code&gt;Object.entries()&lt;/code&gt; can also be used to make an object iterable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="c1"&gt;// 1: one&lt;/span&gt;
    &lt;span class="c1"&gt;// 2: two&lt;/span&gt;
    &lt;span class="c1"&gt;// 3: three&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A map object can be easily and directly iterated over with methods like &lt;code&gt;.forEach()&lt;/code&gt; to access each value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// map = {1 =&amp;gt; 'one', 2 =&amp;gt; 'two', 3 =&amp;gt; 'three'}&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// one&lt;/span&gt;
&lt;span class="c1"&gt;// two&lt;/span&gt;
&lt;span class="c1"&gt;// three&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#key-types-of-objects-can-be-only-string-or-symbol"&gt;
  &lt;/a&gt;
  Key types of objects can be only string or symbol
&lt;/h3&gt;

&lt;p&gt;When declaring Javascript objects, the only types we can use as the key is a string or a symbol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// automatically converts array key to a symbol: {key:'value'}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// throws an error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While keys for a regular JavaScript object can only be either a string or a symbol the same does not go for Map objects. For the Map object, its keys can be of any type including functions, objects, and arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// {Array(1) =&amp;gt; 'value', ƒ =&amp;gt; 'value', {…} =&amp;gt; 'b'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In Javascript, Maps are very useful data structures. They provide more flexibility than regular objects do, for example, Maps give us the ability to use any data type as a key while also maintaining the original ordering they’re declared with.&lt;/p&gt;

&lt;p&gt;Next time you’re reaching for that plain ol’ JavaScript object to store some sort of complex data, consider using a map. Depending on the use case it may just serve you better!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps"&gt;Map&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps"&gt;Objects vs Maps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>15 In-Demand Cybersecurity Courses</title>
      <author>Aniket mishra</author>
      <pubDate>Fri, 19 Nov 2021 11:44:27 +0000</pubDate>
      <link>https://dev.to/aniketmishra/15-in-demand-cybersecurity-courses-389c</link>
      <guid>https://dev.to/aniketmishra/15-in-demand-cybersecurity-courses-389c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#subscribe-my-channel"&gt;
  &lt;/a&gt;
  Subscribe My channel
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/PN5tdWupD3I"&gt;YouTube&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;1-Practical Cyber Threat Intelligence&lt;/p&gt;

&lt;p&gt;2-Fundamental of Networking Concepts, Protocols, and Security&lt;/p&gt;

&lt;p&gt;3-Applied Python for Professionals&lt;/p&gt;

&lt;p&gt;4-Beginners Guide to NMAP and Zenmap&lt;/p&gt;

&lt;p&gt;5-Securing Your Network from Attacks&lt;/p&gt;

&lt;p&gt;6-Windows Penetration Testing Essentials&lt;/p&gt;

&lt;p&gt;7-OSINT - Open-source Intelligence&lt;/p&gt;

&lt;p&gt;8-Session Hijacking and Prevention Techniques&lt;/p&gt;

&lt;p&gt;9-Shell Scripting with Bash&lt;/p&gt;

&lt;p&gt;10-Reverse Engineering Part – 1&lt;/p&gt;

&lt;p&gt;11-Reverse Engineering Part – 2&lt;/p&gt;

&lt;p&gt;12-Build Microservices with Spring Cloud and Spring Boot&lt;/p&gt;

&lt;p&gt;13-5G Security Deconstructed&lt;/p&gt;

&lt;p&gt;14-Exploitation with Kali&lt;/p&gt;

&lt;p&gt;15-OSINT Level 2&lt;/p&gt;

&lt;p&gt;16-OWASP Top 10 Security Fundamentals (LIMITED-TIME BONUS)&lt;/p&gt;

&lt;p&gt;17-Mastering Database Reconnaissance and Exploitation (LIMITED-TIME BONUS)&lt;/p&gt;

&lt;p&gt;18-How to succeed in a Data Protection Officer Role (LIMITED-TIME BONUS)&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>python</category>
      <category>networking</category>
      <category>codered</category>
    </item>
    <item>
      <title>What’s new in Angular, React Router, Cypress and Other News - Frontend News #22</title>
      <author>KaCeRun</author>
      <pubDate>Fri, 19 Nov 2021 11:34:16 +0000</pubDate>
      <link>https://dev.to/lumiuz/whats-new-in-angular-react-router-cypress-and-other-news-frontend-news-22-3em</link>
      <guid>https://dev.to/lumiuz/whats-new-in-angular-react-router-cypress-and-other-news-frontend-news-22-3em</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/w-nOya59Zho"&gt;
&lt;/iframe&gt;
&lt;br&gt;
What happened in the world of frontend in the last weeks? Watch the newest episode to be up to date! 👇&lt;/p&gt;

&lt;p&gt;What’s in Frontend News #22?&lt;br&gt;
🟣 New Github CEO&lt;br&gt;
🟣 Creator of Svelte join Vercel&lt;br&gt;
🟣 Identify NPM libraries&lt;br&gt;
🟣 Update to AirBnb style guide&lt;br&gt;
🟣 Cypress 9.0.0 release&lt;br&gt;
🟣 Deno 1.16 release&lt;br&gt;
🟣 React Router v6&lt;br&gt;
🟣 Angular v13 is on!&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Simple Web Components</title>
      <author>Joe Boris</author>
      <pubDate>Fri, 19 Nov 2021 11:30:35 +0000</pubDate>
      <link>https://dev.to/jdboris/simple-web-components-2c1</link>
      <guid>https://dev.to/jdboris/simple-web-components-2c1</guid>
      <description>&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web Components API&lt;/a&gt; in JavaScript is great, but it's relatively new and kinda hard to learn. It's also struggling to gain traction in the industry still (at the time of writing), making it a little risky to invest in. In the meantime, there are simple patterns you can follow to make components in vanilla JavaScript without it.&lt;/p&gt;

&lt;p&gt;First, let's establish a more declarative way to create a DOM node. You can use a library like jQuery, or define a function to do it yourself. In this article let's use our own function called &lt;code&gt;$&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return a DOM element created from parsing the HTML string&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Copy the properties to the element&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make a little component. Let's say we want a generic CRUD form component...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;newCrudForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;disabledInRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;label&amp;gt;Text: &amp;lt;/label&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;input type="text" &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;disabledInRead&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; /&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// NOTE: Using this method syntax will bind 'this' to the textbox&lt;/span&gt;
        &lt;span class="nx"&gt;oninput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;button&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Save&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/button&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: For simplicity, I didn't implement two-way binding, but it can be added to &lt;code&gt;$&lt;/code&gt; easily&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCrudForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;newCrudForm&lt;/code&gt; returns a form element with its own "state". Its state consists of the &lt;code&gt;data&lt;/code&gt; object and the &lt;code&gt;mode&lt;/code&gt; string. The &lt;code&gt;data&lt;/code&gt; state is bound to the textbox. To change the &lt;code&gt;mode&lt;/code&gt; state &lt;em&gt;and react to the change&lt;/em&gt;, we just need to re-render and pass in a new value. That's what button does.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: "state" is just the info associated with a component&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully you'll find this easier to learn than the Web Components API like I did. Thoughts? Questions? Criticism? Leave a comment below 👇&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why we migrated to TypeScript after all</title>
      <author>Sebastian Rindom</author>
      <pubDate>Fri, 19 Nov 2021 11:13:25 +0000</pubDate>
      <link>https://dev.to/medusajs/why-we-migrated-to-typescript-after-all-3efa</link>
      <guid>https://dev.to/medusajs/why-we-migrated-to-typescript-after-all-3efa</guid>
      <description>&lt;p&gt;Over the past two weeks, we have been working hard on migrating parts of &lt;a href="https://medusa-commerce.com"&gt;Medusa&lt;/a&gt;'s codebase to TypeScript. We are doing this for a couple of reasons all of which have to do with improving the developer experience. Now that we are slowly merging the first parts of this migration we would love to share some insights into why we didn't just go with TypeScript in the first place and why we have decided that the time was right now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-bit-of-background"&gt;
  &lt;/a&gt;
  A bit of background
&lt;/h3&gt;

&lt;p&gt;Before working full-time on Medusa we did agency work for a handful of different e-commerce clients; one of them wanted to migrate away from their solution back then and when we couldn't find a new suitable platform for them we agreed to build a custom solution from scratch. We didn't intend for this to be anything other than a solution that would optimize and automate all the workflows for the client so we went straight into development mode. As the project grew and our client grew, new requirements emerged and we had to go back to the drawing board. This was the first time that we had to weigh our options in the context of the project being maintainable and easy to use in the long term. We evaluated approaches based on a couple of insights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Growing businesses change (a lot)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;When you are on a growth path you can get by with basic tools in the beginning, but when processes get more complex you will typically need to adapt the tools in your stack. We wanted to build our architecture to accommodate this insight; making it easy to compose your e-commerce stack with the best-in-breed tools. &lt;em&gt;Note&lt;/em&gt;&lt;em&gt;:&lt;/em&gt;* best-in-breed for a small 2 person team is not the same as best-in-breed for a 25 person team, so your stack has to be dynamic.*&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Growing businesses need control&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;If you are growing rapidly you need to be in control of what happens when; you can't make a feature request and then sit around for 2 years waiting for it to be made available. You must be able to get the process moving straight away.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Customer Experience is king&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;If you are trying to stand out in the crowd of standardized websites you need to have a razor-sharp focus on the customer experience. Customers should feel that they are entering into an on-brand universe when visiting an e-commerce site and to do so you may have to change up the standard browsing, purchasing, and checkout process to truly accommodate the product or brand.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developers are the key to making all of the above succeed&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Developers get a bad rap for being expensive, slow, and complicated to work with and this makes sense to a certain extent; however, there is an incredible amount of projects - Medusa being one of them - being built that focus on making developers more efficient, making the requirements for developer capabilities lower and ultimately making it easier for merchants to start leveraging headless technologies earlier than they otherwise would have. As the ecosystem of great developer tools grow it will become increasingly appealing to new merchants to make the switch as early as possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above requirements were foundational for some of the high-level decisions we took in the early days:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We created a simple and modular architecture that gives you all the basics out of the box and provides the interfaces necessary to easily integrate with other tools to give you the optimal stack.&lt;/li&gt;
&lt;li&gt;We open-sourced everything to give users and merchants full control of what gets built&lt;/li&gt;
&lt;li&gt;We provide a great APIs and tooling to create custom e-commerce experiences that move the needle&lt;/li&gt;
&lt;li&gt;We think carefully about how to design things in the most developer-friendly way and &lt;strong&gt;choose tools in our stack that developers like&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-we-didnt-go-with-typescript-in-the-first-place"&gt;
  &lt;/a&gt;
  Why we didn't go with TypeScript in the first place
&lt;/h3&gt;

&lt;p&gt;You may be thinking now: okay but why on earth didn't you start with TypeScript if you wanted to use tools that developers like. The truth is that when we started developing we were optimizing for speed; with limited TypeScript experience back then we felt that there would potentially be many unknown issues to overcome if we had decided to go down that route. Furthermore, TypeScript was not as widely established as it is today and it would have been really sad if we had chosen a language that would wane in popularity after a couple of years &lt;a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS"&gt;(&lt;strong&gt;cough&lt;/strong&gt; CoffeeScript and friends)&lt;/a&gt;. That isn't to say that we didn't like TypeScript, on the contrary, we have always thought TypeScript was incredibly powerful, however, &lt;a href="https://en.wikipedia.org/wiki/Lindy_effect"&gt;by Lindy&lt;/a&gt;, we decided that it was worth waiting a bit.&lt;/p&gt;

&lt;p&gt;Not going with TypeScript in the first place allowed us to do other amazing things like creating an incredibly powerful core architecture and a handful of great plugins that provided integrations for systems like &lt;a href="https://github.com/medusajs/medusa/tree/master/packages"&gt;Stripe, Segment, Sendgrid, and others&lt;/a&gt;. We were able to do this at an incredible pace and iterate quickly, changing APIs on a day to day basis (one of the privileges of the early days with few customers) without too many complications which eventually got us to this point in time, where we have figured out the ins-and-outs of how data should be flowing and where we have a good understanding of the &lt;strong&gt;types and interfaces&lt;/strong&gt; needed for modularity and composability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-the-time-right-now"&gt;
  &lt;/a&gt;
  Why is the time right now
&lt;/h3&gt;

&lt;p&gt;When you are the lone developer and user of a project you know the APIs intimately because you have written them. Sometimes your memory might be a bit unclear, but generally, it is not a distractor for your workflow, so you don't think that much about IntelliSense not kicking in. That changes a lot, however, when you start working on things that are not your creation and not only from the user perspective also from the contributor perspective. Say you are working on code that calls some function that someone else from your team wrote. While you might have been in talks with your teammate about how the APIs are meant to work and what kind of dataflows should be going on, you might not know the exact implementation details, and that is when it starts being super useful to have all of your tooling in place. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sAvwtDe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdmlk2mv1895ibx8cq5e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAvwtDe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdmlk2mv1895ibx8cq5e.gif" alt="Medusa TypeScript IntelliSense" width="600" height="320"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We are so happy to see the community around Medusa growing and we are therefore very much aware that we need to improve all the tools in the ecosystem as much as possible to allow for the best developer experience. Furthermore, we feel confident that TypeScript will be around for a long time, and for this reason, now is the time! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-we-are-going-about-it"&gt;
  &lt;/a&gt;
  How we are going about it
&lt;/h3&gt;

&lt;p&gt;Migrating our entire codebase will take some time so we are starting with the parts that make the most sense and moving along. We are already using TypeORM for the data layer so all of our database entities are typed. We have gone ahead and added TypeScript to all of the core API's controllers typing all payloads and responses. This adds the amazing benefit of being able to share the type definitions between the core project and our JS client essentially ensuring that when you are making calls through our client library &lt;strong&gt;you are seeing the exact class properties that are being used to validate the request payload&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What's next&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We are going to add TypeScript throughout the core package as we go along and our goal is to migrate all of our code eventually. If you are interested in helping out or want to try Medusa go check out our &lt;a href="https://github.com/medusajs/medusa"&gt;GitHub repo&lt;/a&gt; and &lt;a href="https://discord.gg/xpCwq3Kfn8"&gt;join our Discord&lt;/a&gt; where you can get direct access to the engineering team!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What to do if you're a bottleneck</title>
      <author>Evgenii Ponomarev</author>
      <pubDate>Fri, 19 Nov 2021 11:12:58 +0000</pubDate>
      <link>https://dev.to/_elergy_/what-to-do-if-youre-a-bottleneck-52n2</link>
      <guid>https://dev.to/_elergy_/what-to-do-if-youre-a-bottleneck-52n2</guid>
      <description>&lt;p&gt;Jackson is a go-to person when it comes to MongoDB.&lt;/p&gt;

&lt;p&gt;You have a problem — you go to Jackson. He’s an expert. Of course, you can go to anyone else – it’s a free world. You can go to Molly if you want. But you know what Molly would recommend, don’t you? She’ll tell you to ask Jackson, that overworked guy with a giant todo list.&lt;/p&gt;

&lt;p&gt;Let’s talk about what to do if you ended up being a Jackson and need a way out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-kind-of-a-bottleneck-are-you"&gt;
  &lt;/a&gt;
  What kind of a bottleneck are you?
&lt;/h2&gt;

&lt;p&gt;There are two different kinds of overworked Jacksons: knowledge bottlenecks and expertise bottlenecks.&lt;/p&gt;

&lt;p&gt;Knowledge bottlenecks are the ones who answer questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Who owns Payment API?&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Which database has client emails?&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;When is our next release?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're one of those, write documentation. Sorry for such trivial advice, but boring problems need boring solutions.&lt;/p&gt;

&lt;p&gt;It's worth writing docs even if people don't read them. Sounds stupid, but it will serve as your second brain from where you can quickly copy answers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watch out for an urge to share your screen and demonstrate something. It's always better to record a video (or a gif) and share it instead – this way, you will be able to reuse it later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That was all about knowledge bottlenecks.&lt;/p&gt;

&lt;p&gt;Expertise bottlenecks are trickier. They don't just answer questions — they solve problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;This program crashes for Netherlands users.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;My DB query is slow.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our photo gallery page leaks memory.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This situation is much more complicated because you need more experts to share the load. But unfortunately, there are no books or tutorials you could give to somebody and turn them into an expert – they need to build the expertise themselves. And it takes time.&lt;/p&gt;

&lt;p&gt;But how to accelerate the process?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limited-opportunities"&gt;
  &lt;/a&gt;
  Limited opportunities
&lt;/h2&gt;

&lt;p&gt;If someone wants to learn how to play the guitar, they need to practice playing the guitar. Likewise, if one wants to learn how to fix memory leaks, they need to fix memory leaks.&lt;/p&gt;

&lt;p&gt;The tricky part is there are much more opportunities to play the guitar than memory leaks to fix. They don't happen every day.&lt;/p&gt;

&lt;p&gt;Zoom out now and look where you ended up: people call you whenever a challenging problem arises because nobody else has a similar experience. And nobody else has a similar experience because you solve all the challenging problems. A chicken and egg situation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#growing-new-experts"&gt;
  &lt;/a&gt;
  Growing new experts
&lt;/h2&gt;

&lt;p&gt;The naive advice would be to stop doing what you're doing so that others can practice and build necessary expertise in time. But, unfortunately, it's overly utopian – a few companies have the luxury of accumulating unsolved problems while their best specialist sits idle and waits for new experts to emerge.&lt;/p&gt;

&lt;p&gt;But I'm not saying it's impossible – there is a way to grow new experts without slowing down the process. Here it is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick &lt;strong&gt;one&lt;/strong&gt; successor to mentor. &lt;em&gt;Learning opportunities are scarce resource, so resist the temptation to pick more than one.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Redirect all requests to this person.
&lt;em&gt;Need help? Ping Nelson, he knows this stuff.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Be available for this person.
&lt;em&gt;Answer all their questions as soon as possible, pair program or pair debug when necessary.&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eh36jyUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eh36jyUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/overview.png" alt="What to do if you're a bottleneck" width="711" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The company will not slow down in critical situations – if the time is tight, the mentoree can ask you for help.&lt;/li&gt;
&lt;li&gt;You can tune your involvement depending on the circumstances to manage risks and guide the learning.&lt;/li&gt;
&lt;li&gt;This person starts earning credibility from day one, solving real problems with your invisible help.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the beginning, be prepared to play broken telephone answering proxied questions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fVIW2xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fVIW2xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image.png" alt="What to do if you're a bottleneck" width="761" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may look like a waste of time, but it's far from it. Yes, the future expert acts as a proxy, but they learn about the domain. Even if it's a proxy, it's a caching proxy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7I4t55r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7I4t55r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image-1.png" alt="What to do if you're a bottleneck" width="764" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As their experience grows, they will start asking more complex questions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CcKGs8QE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CcKGs8QE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image-2.png" alt="What to do if you're a bottleneck" width="764" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the point where you can return to your expert's duties, which you now can split with another person:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZfq2tc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZfq2tc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://evgenii.info/content/images/2021/11/image-3.png" alt="What to do if you're a bottleneck" width="671" height="462"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is a cross-post from &lt;a href="https://www.getrevue.co/profile/elergy"&gt;Resilient Systems&lt;/a&gt; – a newsletter about strategic software engineering.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>leadership</category>
      <category>teamwork</category>
    </item>
    <item>
      <title>Using getStaticProps and getStaticPaths for static site generation (ssg) in nextjs</title>
      <author>Bishal Neupane</author>
      <pubDate>Fri, 19 Nov 2021 11:03:13 +0000</pubDate>
      <link>https://dev.to/bishaln/using-getstaticprops-and-getstaticpaths-for-static-site-generation-ssg-in-nextjs-3d4a</link>
      <guid>https://dev.to/bishaln/using-getstaticprops-and-getstaticpaths-for-static-site-generation-ssg-in-nextjs-3d4a</guid>
      <description>&lt;p&gt;This is the sixth blog post on the series of blog post I am posting about strapi,nextjs, and tailwind. We are recreating my portfolio/blogpost page that along the way we'll learn the fundamentals of strapi,nextjs, and tailwind. You can check it out at &lt;a href="https://myportfolioandblog.vercel.app/"&gt;myportfolio&lt;/a&gt; If you know the basics of javascript and react then you should be good to follow this blog post and coming blog post on the series. I hope you'll get something out of this series.&lt;/p&gt;

&lt;p&gt;If you've not gone through the previous blog posts then make sure to check them out&lt;/p&gt;

&lt;p&gt;In this blog post, we're going to build two pages in our blog/portfolio site &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Playlists - This will show all the playlists along with recent three blogs&lt;/li&gt;
&lt;li&gt;Playlist  - This will show all the posts on a particular playlist. We'll use dynamic SSG for this page&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#playlists-page"&gt;
  &lt;/a&gt;
  Playlists page
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5KO5A_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n15mjk6r4s9fdpmybs4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5KO5A_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n15mjk6r4s9fdpmybs4g.png" alt="" width="880" height="430"&gt;&lt;/a&gt;&lt;br&gt;
So let's first build the playlists page for that let's write the query which will fetch the required data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { gql } from 'graphql-request';

export const playlistsQuery = gql`
  query Playlists {
    playlists {
      title
      description
      id
      slug
      posts(sort: "updated_at:desc", limit: 3) {
        updated_at
        title
        slug
        description
        topics
      }
    }
  }
`;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a file playlists.tsx inside the pages and add the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { request } from 'graphql-request';
import { useRouter } from 'next/dist/client/router';
import React from 'react';
import Link from 'next/link';

import { BlogCard } from '../components/BlogCard';
import { PlaylistsQuery } from '../gql/graphql';
import { playlistsQuery } from '../queries/playlists';

export const getStaticProps = async () =&amp;gt; {
  const data: PlaylistsQuery = await request(
    'http://localhost:1337/graphql',
    playlistsQuery
  );

  return { props: data };
};

function playlists({ playlists }: PlaylistsQuery) {
  return (
    &amp;lt;div className='p-2 container sm:mx-auto'&amp;gt;
      &amp;lt;GobackButton /&amp;gt;
      &amp;lt;main&amp;gt;
        &amp;lt;div className='space-y-2'&amp;gt;
          &amp;lt;h1 className='text-4xl'&amp;gt;Welcome to Blog playlist&amp;lt;/h1&amp;gt;
          &amp;lt;h4 className='text-md text-gray-500'&amp;gt;
            A playlist is series of blogpost where I write about particular tool
            or subject
          &amp;lt;/h4&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div className='my-10'&amp;gt;
          {playlists?.map((playlist) =&amp;gt; (
            &amp;lt;div className='my-10' key={playlist?.id}&amp;gt;
              &amp;lt;Link href={`/playlist/${playlist?.slug}`} passHref&amp;gt;
                &amp;lt;h3 className='hover:underline cursor-pointer text-3xl capitalize'&amp;gt;
                  {playlist?.title}
                &amp;lt;/h3&amp;gt;
              &amp;lt;/Link&amp;gt;
              &amp;lt;div className='md:grid md:grid-cols-2 md:gap-3 xl:grid-cols-3'&amp;gt;
                {playlist?.posts?.map((post) =&amp;gt; (
                  &amp;lt;div key={post?.slug} className='my-2 mx-2 h-full'&amp;gt;
                    &amp;lt;BlogCard
                      slug={post?.slug!}
                      title={post?.title!}
                      description={post?.description!}
                      topics={post?.topics!}
                      updated_at={post?.updated_at!}
                    /&amp;gt;
                  &amp;lt;/div&amp;gt;
                ))}
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export const GobackButton = () =&amp;gt; {
  const router = useRouter();
  return (
    &amp;lt;button
      onClick={() =&amp;gt; router.back()}
      className='text-green-500 hover:bg-gray-200 rounded-md p-2'
    &amp;gt;
      &amp;amp;larr; go back
    &amp;lt;/button&amp;gt;
  );
};

export default playlists;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#playlist-page"&gt;
  &lt;/a&gt;
  Playlist page
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWxaxQhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45wxgu2uxbs9vgufm016.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWxaxQhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45wxgu2uxbs9vgufm016.png" alt="Image description" width="880" height="428"&gt;&lt;/a&gt;&lt;br&gt;
We'll require two different queries first one to just get the slugs for different playlist page and the second one for the actual data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { gql } from 'graphql-request';

export const playlistPathsQuery = gql`
  query PlaylistPaths {
    playlists {
      slug
    }
  }
`;

export const playlistQuery = gql`
  query Playlist($slug: String!) {
    playlists(where: { slug: $slug }) {
      title
      description
      slug
      posts(sort: "updated_at:desc") {
        id
        updated_at
        title
        slug
        description
        topics
      }
    }
  }
`;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll use the first query to dynamically build the pages and the second one for the actual data that we need&lt;br&gt;
So go ahead and create a folder inside the pages directory and name it playlist and inside the folder create [slug].tsx file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//[slug].tsx file

import request from 'graphql-request';
import { GetStaticProps } from 'next';
import { BlogCard } from '../../components/BlogCard';

import {
  PlaylistPathsQuery,
  PlaylistQuery,
  PlaylistsQuery,
} from '../../gql/graphql';
import { playlistPathsQuery, playlistQuery } from '../../queries/playlist';
import { GobackButton } from '../playlists';

export async function getStaticPaths() {
  const paths: PlaylistPathsQuery = await request(
    'http://localhost:1337/graphql',
    playlistPathsQuery
  );
  const pathFormat: any = [];
  paths.playlists?.forEach((path) =&amp;gt;
    pathFormat.push({ params: { slug: path?.slug } })
  );
  return {
    paths: pathFormat,
    fallback: false,
  };
}

export const getStaticProps: GetStaticProps = async (context) =&amp;gt; {
  const posts: PlaylistQuery = await request(
    'http://localhost:1337/graphql',
    playlistQuery,
    {
      slug: context?.params?.slug,
    }
  );
  return {
    props: posts,
  };
};

function Playlist({ playlists }: PlaylistsQuery) {
  console.log(playlists);
  const playlist = playlists![0];
  return (
    &amp;lt;div className='p-2'&amp;gt;
      &amp;lt;GobackButton /&amp;gt;
      &amp;lt;div className='space-y-2'&amp;gt;
        &amp;lt;h1 className='text-4xl capitalize'&amp;gt;{playlist?.title}&amp;lt;/h1&amp;gt;
        &amp;lt;h3 className='text-gray-500'&amp;gt;{playlist?.description}&amp;lt;/h3&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div className='space-y-2 md:grid md:grid-cols-2 md:gap-4 md:items-center xl:grid-cols-3'&amp;gt;
        {playlist?.posts?.map((post) =&amp;gt; (
          &amp;lt;BlogCard
            key={post?.slug!}
            title={post?.title!}
            description={post?.description!}
            updated_at={post?.updated_at!}
            topics={post?.topics!}
            slug={post?.slug!}
          /&amp;gt;
        ))}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default Playlist;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;And that is it about Using getStaticProps and getStaticPaths for static site generation (SSG) in nextjs. In another blog post, we'll create the actual blog page. If you have any problem with this code and then let me know in the discussion.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Can DevSecOps Tools Open Security Testing To Everyone?</title>
      <author>Gary Robinson</author>
      <pubDate>Fri, 19 Nov 2021 11:00:37 +0000</pubDate>
      <link>https://dev.to/uleska/can-devsecops-tools-open-security-testing-to-everyone-2j6f</link>
      <guid>https://dev.to/uleska/can-devsecops-tools-open-security-testing-to-everyone-2j6f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-experiment-javascript-source-code-security-testing-tools"&gt;
  &lt;/a&gt;
  THE EXPERIMENT: JAVASCRIPT SOURCE CODE SECURITY TESTING TOOLS
&lt;/h1&gt;

&lt;p&gt;To begin our experiment, we chose 1,000 Javascript projects on GitHub that were recently updated and had between 50 and 200 stars in rating. Next, we went to UpWork.com and paid non-professionals £5/hour to use the &lt;a href="https://www.uleska.com/"&gt;Uleska Platform&lt;/a&gt; to automatically run three Javascript source code security testing tools. We consolidated the results generated by the platform to the project teams and made sure they didn’t have security or programming skills.&lt;/p&gt;

&lt;p&gt;We didn’t set up any of our cyber value-at-risk enumerations, as they would apply to how an open-source library is used within the end-user application (i.e. types of data processed, quantity of data, environment etc.).&lt;/p&gt;

&lt;p&gt;We also made the decision not to triage the results, as the &lt;a href="https://www.uleska.com/"&gt;Uleska Platform&lt;/a&gt; has functionality to automatically remove false positives and duplicates, a feature heavily used by our customers.&lt;/p&gt;

&lt;p&gt;Since this experiment was for open source projects, instead of enterprise software teams, we wanted to see how difficult (or easy) reports containing a mix of real and false-positive issues were for open source teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devsecops-tools-outcomes"&gt;
  &lt;/a&gt;
  DEVSECOPS TOOLS OUTCOMES
&lt;/h2&gt;

&lt;p&gt;The experiment was a great success, providing a variety of valuable insights, including some improvements we can make to our DevSecOps orchestration usage. Some of our main learnings were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;With simple instructions, non-skilled people were able to onboard hundreds of projects. They were also able to run a number of security tools easily, mainly due to the abstraction the Uleska Platform provided. Instead of starting command lines or setting up profiles, this was done easily by the click of a button. Plus, the onboarding/execution only took a few days.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As operations run so frequently, we discovered ways to speed up our own UI/UX and our API and make it even simpler, aiming for 2-3 clicks to set up a project/application test. The feedback we received from the group showed the team using the &lt;a href="https://www.uleska.com/"&gt;Uleska Platform&lt;/a&gt; UI to kick off the testing instead of any triggers from GitHub or DevOps tools or continuous integration. However, the effect would be the same.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There were over 35,000 issues registered by the tooling, some of which were false positives, with others acknowledged by the project teams as issues to be fixed. Around 10% of the projects tested didn’t return any issues at all. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the next stage of this experiment, we will look to automatically remove the false positives. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devsecops-challenges-with-this-experiment"&gt;
  &lt;/a&gt;
  DEVSECOPS CHALLENGES WITH THIS EXPERIMENT
&lt;/h2&gt;

&lt;p&gt;During this experiment, we ran into some logistical challenges. Firstly, we created new GitHub accounts to find/extract the GitHub URL for the project to pass that into the &lt;a href="https://www.uleska.com/"&gt;Uleska Platform&lt;/a&gt; so the codeline can be tested. &lt;/p&gt;

&lt;p&gt;These new GitHub accounts were also used to update the projects with the report of security issues. This meant these GitHub accounts were now creating GitHub projects or code which were later flagged by GitHub. This meant they were no longer able to submit issue reports to projects. For this reason, we stopped short of the full 1,000 projects, ending at around the 730 project mark.&lt;/p&gt;

&lt;p&gt;We also had a few projects react negatively to being passed security reports out of the blue. Sometimes this was because the false positives weren't removed, other times our reports were perceived as spam. Now we understand where we need to improve, in our next iteration of this experiment, we’re looking to remove the likely false positives using the &lt;a href="https://www.uleska.com/"&gt;Uleska technology&lt;/a&gt; and look forward to helping more open source projects stay secure.&lt;/p&gt;

&lt;p&gt;To discover more about the challenges of automating DevSecOps and Uleska can help overcome them, check out our playbook.&lt;/p&gt;

&lt;p&gt;HERE: &amp;gt;&amp;gt; &lt;a href="https://www.uleska.com/download-our-guide-on-overcoming-devsecops-automation-challenges"&gt;https://www.uleska.com/download-our-guide-on-overcoming-devsecops-automation-challenges&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discover-how-to-overcome-the-challenges-of-devsecops"&gt;
  &lt;/a&gt;
  DISCOVER HOW TO OVERCOME THE CHALLENGES OF DEVSECOPS
&lt;/h2&gt;

&lt;p&gt;The problem with &lt;a href="https://www.uleska.com/blog/challenge-7-mapping-security-to-how-development-works"&gt;DevSecOps is incorporating many layers of security tasks into the fast-paced software development cycle&lt;/a&gt;. Thankfully, there are a variety of things you can do to overcome the challenges faced. In our playbook, we cover the top 10 challenges of automating DevSecOps, while also delivering actionable advice on how to overcome them.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>security</category>
    </item>
  </channel>
</rss>
