<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Get started with Python type hints</title>
      <author>Otmane Riad</author>
      <pubDate>Wed, 25 Aug 2021 19:18:14 +0000</pubDate>
      <link>https://dev.to/nexteventideas/get-started-with-python-type-hints-b2o</link>
      <guid>https://dev.to/nexteventideas/get-started-with-python-type-hints-b2o</guid>
      <description>&lt;p&gt;Python is best thought of as a “dynamic, but strongly typed” language. Types aren’t associated with the names for things, but with the things themselves.&lt;/p&gt;

&lt;p&gt;This makes Python flexible and convenient for developers, because you don’t have to rigorously define and track variable types if you’re just throwing together a quick-and-dirty script. But for bigger projects, especially libraries used by third parties, it helps to know which object types are associated with which variables.&lt;/p&gt;

&lt;p&gt;For some time now, Python has had the ability to “annotate” names with type information, in one form or another. With Python 3.5, type hints officially became part of the language (PEP 484). Using a linter or code-checking tool, developers can check the consistency of variables and their types across a code base, and perform static analyses of code that would previously have been difficult or impossible. All this is done ahead of time, before the code runs.&lt;/p&gt;

&lt;p&gt;In this article we’ll explore some basic examples of Python type hinting. But first we’ll clear up a common misunderstanding about what it is and isn’t used for.&lt;/p&gt;

&lt;p&gt;Read More: &lt;a href="https://hitechnoloy.ca/get-started-with-python-type-hints/"&gt;https://hitechnoloy.ca/get-started-with-python-type-hints/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codereview</category>
    </item>
    <item>
      <title>How we organize our software development process</title>
      <author>Mage</author>
      <pubDate>Wed, 25 Aug 2021 19:05:58 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-we-organize-our-software-development-process-1lb8</link>
      <guid>https://dev.to/mage_ai/how-we-organize-our-software-development-process-1lb8</guid>
      <description>&lt;p&gt;&lt;b&gt;TLDR&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;
&lt;ul&gt;

&lt;li&gt;We used Scrum at our previous startup and at Airbnb, with a few tweaks.&lt;/li&gt;


&lt;li&gt;We currently use a hybrid of Scrum and Kanban at Mage (AI application development tool), with a few tweaks.&lt;/li&gt;


&lt;li&gt;Craft your process to maximize your team’s autonomy, collaboration, and adaptability; thus, increasing your team’s effectiveness.&lt;/li&gt;








&lt;p&gt;&lt;b&gt;What is it?&lt;/b&gt;&lt;br&gt;
According to Wikipedia, “a software development process is the process of dividing software development work into distinct phases to improve design, product management, and project management”.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Why should anyone care?&lt;/b&gt;&lt;br&gt;
A good process helps your team be more effective in delivering value to customers by empowering your team to be autonomous (make decisions on their own), collaborative (sum is greater than the parts), and adaptive (ship relevant products that customers need).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Our process in the past&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMo4wEhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aae9l1fijipppnaz0zjd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMo4wEhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aae9l1fijipppnaz0zjd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Courtesy of Airbnb&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At OnMyBlock (our previous startup) and at Airbnb, we used Scrum (with a few tweaks) as our software development process.&lt;/p&gt;

&lt;p&gt;Every 2 weeks, our team would get together to review all the work that was done in the previous sprint (a time-boxed window usually 2–4 weeks long) and then plan for the upcoming sprint. This meeting is typically called sprint review and sprint planning.&lt;/p&gt;

&lt;p&gt;Here is how we conducted the sprint review and planning:&lt;/p&gt;


&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Before the meeting, the scrum master (a single person responsible for project managing the stories during a sprint) would ping everyone to make sure they updated all their stories (aka tasks) in our project management software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the start of the meeting, each person goes around and shares what they shipped, what work they couldn’t finish, and explain why they couldn’t accomplish the unfinished work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, the scrum master leads the team in discussion on which upcoming epics (aka features) are most urgent and important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everyone independently plans what they will deliver by the end of the next sprint, choosing from a list of prioritized epics. Each person is allotted a fixed number of story points. If you are allotted 13 story points (we used Fibonacci numbers to scale our story points), you can only commit to stories that have a total sum of 13 story points. Story points are values assigned to a story (aka tasks) that attempt to provide a sense of how difficult it will be to accomplish that story.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After everyone is done planning, each person goes around and shares what they are committing to delivering in the upcoming sprint.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AOnraYEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d44x0fzgtyjvxxlh35pu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AOnraYEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d44x0fzgtyjvxxlh35pu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Sprint schedule&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are usually “stand-ups” in Scrum, which are short daily meetings for the team to update each other. Our team felt daily stand-ups were too frequent and unproductive so we cut it down to 3 per week except we have 2 per week on the weeks where we have sprint review and planning. Our stand-ups follow the typical agenda where each person goes around and shares what they did yesterday, what they are working on today, and if they have any blockers to their current story (aka task).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pros of how we did Scrum&lt;/b&gt;&lt;br&gt;
Engineers had more ownership of the features they were responsible for and this resulted in better performance reviews because we were assessed on which projects we led and delivered end-to-end.&lt;/p&gt;

&lt;p&gt;There was clear accountability because if someone commits to work that they didn’t finish, they would be responsible for explaining why they couldn’t finish it by the deadline.&lt;/p&gt;

&lt;p&gt;Less knowledge was required to accomplish tasks because an engineer can fill up their sprint with tasks that were related to their area of expertise; such as backend, frontend, data, ML, different services, specific languages, etc.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Cons of how we did Scrum&lt;/b&gt;&lt;br&gt;
Estimating the difficulty of stories was rarely accurate, which led to frequent over estimating and underestimating of the work.&lt;/p&gt;

&lt;p&gt;When we pre-assign ourselves stories, we typically chose stories that belonged to an epic we were responsible for. Many of us ended up working in silos, which decreased collaboration during the implementation phase of projects (we had a lot of collaboration during the design phase).&lt;/p&gt;

&lt;p&gt;Entire features shipped slower because the concentration of effort was spread out across multiple epics at once.&lt;/p&gt;

&lt;p&gt;It was difficult for our team to quickly adapt and change course mid sprint since we planned 2 weeks in advance.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The process today&lt;/b&gt;&lt;br&gt;
At our current company, Mage (AI application development tool), we use a hybrid of Scrum and Kanban with a few tweaks. The tool we use to manage this is called Airtable.&lt;/p&gt;

&lt;p&gt;Once a week, we hold a meeting called “Mage Force” where we review all the features we shipped last week and then prioritize the features we need to deliver in the upcoming release. Before we start the meeting, we hold a trust activity where the goal is to build trust amongst ourselves and to build each other up (one of our core virtues of “give people power-ups”). In contrast to having a 2 week sprint, we have 1 week release cycles where we ship as much product as possible that our customers need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XlxOy-CT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qteyutddq754qjzev85u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlxOy-CT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qteyutddq754qjzev85u.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Magic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is how we plan our release cycle:&lt;/p&gt;

&lt;p&gt;We make sure that every epic (aka features) are attributed to a key result or a specific customer use case. That way, we are making sure to deliver as much value to our customers as possible.&lt;/p&gt;

&lt;p&gt;Each epic is given a deadline ship date that corresponds to when a customer will use it.&lt;/p&gt;

&lt;p&gt;Each epic is broken down into stories (aka tasks), which can be worked on in parallel&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vwod1kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4yhizl40wnkjps01zd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vwod1kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4yhizl40wnkjps01zd3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;A story&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The order in which stories are worked on is based on the related epic’s deadline and whether or not there are downstream dependent stories&lt;/p&gt;

&lt;p&gt;A story in the same epic with a lower priority means it depends on another story within the same epic to be completed first&lt;/p&gt;

&lt;p&gt;Each person who creates a story during planning will fill in as much detail in the notes to give any future engineer context on why the story exists, the requirements of the story, and any additional knowledge that will be helpful in completing the story.&lt;/p&gt;

&lt;p&gt;When we decide which epic must be shipped for the next release, we change all the stories for that epic to “Not started”; which will then make it appear on our Kanban board.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5IXlYJHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9xndhxoicqv3xh011ej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IXlYJHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9xndhxoicqv3xh011ej.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Kanban board&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Stories are not pre-assigned. When someone has no stories “In progress”, they will take the highest priority story that has “Not started”, move it to “In progress”, and assign it to themselves.&lt;/p&gt;

&lt;p&gt;Each story moves through the following stages on the Kanban board: Not started, In progress, Review (e.g. review pull request), QA (merged into master and need to manually test on staging), Complete (new change is on production).&lt;/p&gt;

&lt;p&gt;Once a story is finished, the DRI (directly responsible individual) moves it to “Review”, creates a pull request on GitHub, and associates it to the story for someone else to review.&lt;/p&gt;

&lt;p&gt;Once the code is reviewed, approved, and merged into the master branch, the DRI moves the story to “QA” where they must now manually test their changes on the staging environment.&lt;/p&gt;

&lt;p&gt;After the new changes are verified on staging, the DRI deploys the code to production and moves the story to “Complete”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hyPIYui2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zakfi90hu5bptnvnjbjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hyPIYui2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zakfi90hu5bptnvnjbjq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Hybrid schedule&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have stand-ups (daily meetings in Scrum) 4 times a week, skipping the day we have “Mage Force”. Our stand-up meetings are called “Mission Briefings”. Each person goes around and shares what they learned yesterday and what their plan of attack is for crushing their story today. With this format, we maximize learnings (one of our core virtues of “always be leveling up”) instead of simply reporting tasks (which can be done by looking at the Kanban board).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pros of our hybrid approach&lt;/b&gt;&lt;br&gt;
There is a lot more collaboration at the implementation phase because people are able to work on the same epic together at the same time.&lt;/p&gt;

&lt;p&gt;Working closer together is more fun and exciting, leading to higher team morale and solidarity.&lt;/p&gt;

&lt;p&gt;We ship new features on a daily basis, helping us make customers happier and win more new business.&lt;/p&gt;

&lt;p&gt;Everyone works across multiple codebases and is responsible for many areas of the product. This increases the speed in which we ship new features because everyone is capable of working across the entire tech stack, unblocking themselves if needed.&lt;/p&gt;

&lt;p&gt;We are able to adapt rapidly and change our focus as customer needs change or more urgent features arise unexpectedly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Cons of our hybrid approach&lt;/b&gt;&lt;br&gt;
Because stories are not pre-assigned, individuals on the team are required to understand multiple code bases and technologies in order to effectively complete stories.&lt;/p&gt;

&lt;p&gt;There is less accountability at the individual level because each person is not committing to being responsible for delivering a set of stories. Instead, the entire team is committing to the work. If something doesn’t get done, who is responsible? We have yet to solve for this.&lt;/p&gt;

&lt;p&gt;Since everyone on the team works together to ship as much customer value as fast as possible, there can be a lack of “ownership” of projects. At Airbnb, engineers were awarded for having ownership of projects and therefore ownership of projects was desired by individuals. The system in place rewarded that desire and behavior.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBqCgUql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em1ym6vjmammf3bt3gah.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBqCgUql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em1ym6vjmammf3bt3gah.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Teamwork makes the dream work&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Structure your software development process to maximize your team’s autonomy (make decisions on their own), collaboration (sum is greater than the parts), and adaptability (ship relevant products that customers need).&lt;/p&gt;

&lt;p&gt;A hybrid of Scrum and Kanban, with a few tweaks, works great for Mage at this stage because we are prioritizing speed and focus through deeper collaboration.&lt;/p&gt;

&lt;p&gt;As we grow and evolve our process, we need to keep in mind how we deal with individual “ownership” of projects and the increasing need for specialization.&lt;/p&gt;

</description>
      <category>engineering</category>
      <category>productdevelopment</category>
      <category>development</category>
      <category>startup</category>
    </item>
    <item>
      <title>Landing-Page Became A Project Of It's Own!</title>
      <author>Ayan S</author>
      <pubDate>Wed, 25 Aug 2021 18:34:44 +0000</pubDate>
      <link>https://dev.to/madebyayan/my-landing-page-turned-into-a-project-of-it-s-own-what-do-you-think-5763</link>
      <guid>https://dev.to/madebyayan/my-landing-page-turned-into-a-project-of-it-s-own-what-do-you-think-5763</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;Having built the initial version of my productivity tool, Slate, I started working on it's landing page.&lt;/p&gt;

&lt;p&gt;At first it was going to be a generic landing page like I've used on my previous product, but then I decided to play around a little and experiment with how I can make it stand out and give it a distinct feel that is more memorable.&lt;/p&gt;

&lt;p&gt;Turns out, if you experiment too much on designing the landing pages then they turn into a whole separate project of their own!&lt;/p&gt;

&lt;p&gt;So finally, after working on designing it for over a couple of weeks, I just launched the new landing page which you can check out here: &lt;a href="https://slate.madebyayan.com"&gt;slate.madebyayan.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's built using ThreeJS for for the 3D aspects while the other things are layered on top and below of the 3D canvas using HTML and CSS to provide a fluid design.&lt;/p&gt;

&lt;p&gt;Would love to know what you think of this new and distinctive look and how you feel it compares with the design of my previous landing pages.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>javascript</category>
      <category>threejs</category>
    </item>
    <item>
      <title>Interactive CLI prompts in Go</title>
      <author>Petr Razumov</author>
      <pubDate>Wed, 25 Aug 2021 18:24:42 +0000</pubDate>
      <link>https://dev.to/tidalmigrations/interactive-cli-prompts-in-go-3bj9</link>
      <guid>https://dev.to/tidalmigrations/interactive-cli-prompts-in-go-3bj9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tidal-migrations-cli-applications"&gt;
  &lt;/a&gt;
  Tidal Migrations 💓 CLI applications
&lt;/h2&gt;

&lt;p&gt;Do you like CLI applications? We love them! At Tidal Migrations we use full-featured GUI IDEs and editors like VS Code and Emacs but also &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; running in our terminals. Every day we use &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and lots of other CLI tools and apps for work and fun. Also, we like to develop &lt;a href="https://get.tidal.sh/"&gt;CLI apps&lt;/a&gt; and with this post, we're going to show you how to implement different interactive prompts for your CLI apps written in Go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passing-data-to-cli-apps"&gt;
  &lt;/a&gt;
  Passing data to CLI apps
&lt;/h2&gt;

&lt;p&gt;Oftentimes CLI applications don't just work by themselves, but some process or operation is required on the information or data.&lt;/p&gt;

&lt;p&gt;There are different ways to pass data to command line applications. Using flags, environment variables, file names as CLI arguments or reading from standard input is quite common and is pretty easy to implement using just the &lt;a href="https://pkg.go.dev/std"&gt;standard Go library&lt;/a&gt;. Using interactive prompts can &lt;em&gt;spice up&lt;/em&gt; your CLI application and improve the overall UX.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-text-input-prompt"&gt;
  &lt;/a&gt;
  How to implement text input prompt
&lt;/h2&gt;

&lt;p&gt;The basic text input prompt is easy to implement. Just read from standard input until the &lt;a href="https://en.wikipedia.org/wiki/Newline"&gt;new line character&lt;/a&gt; (&lt;code&gt;\n&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"bufio"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// StringPrompt asks for a string value using the label&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;StringPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bufio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;StringPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is your name?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, %s!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-implement-password-input-prompt"&gt;
  &lt;/a&gt;
  How to implement password input prompt
&lt;/h2&gt;

&lt;p&gt;Password prompts are similar to text input prompts, except the user's typed input should be hidden:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"syscall"&lt;/span&gt;

    &lt;span class="s"&gt;"golang.org/x/term"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// PasswordPrompt asks for a string value using the label.&lt;/span&gt;
&lt;span class="c"&gt;// The entered value will not be displayed on the screen&lt;/span&gt;
&lt;span class="c"&gt;// while typing.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;PasswordPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;PasswordPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is your password?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oh, I see! Your password is %q&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-implement-yesno-prompt"&gt;
  &lt;/a&gt;
  How to implement Yes/No prompt
&lt;/h2&gt;

&lt;p&gt;For Yes/No prompts we're going to create an infinite loop to keep asking until the user answers yes or no:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"bufio"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// YesNoPrompt asks yes/no questions using the label.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;YesNoPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Y/n"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"y/N"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bufio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%s (%s) "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"no"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;YesNoPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dev.to is awesome!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Agree!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Huh?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-implement-interactive-checkboxes"&gt;
  &lt;/a&gt;
  How to implement interactive checkboxes
&lt;/h2&gt;

&lt;p&gt;To create an interactive multi-select prompt we're going to use an awesome &lt;a href="https://github.com/AlecAivazis/survey"&gt;&lt;code&gt;survey&lt;/code&gt;&lt;/a&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/AlecAivazis/survey/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Checkboxes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;survey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultiSelect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;survey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AskOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Checkboxes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"Which are your favourite programming languages?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Java"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"C++"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"C#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Visual Basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"JavaScript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"PHP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Assembly Language"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"SQL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Groovy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Classic Visual Basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Fortran"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Ruby"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Swift"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"MATLAB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Prolog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Perl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oh, I see! You like"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#caveats-and-workarounds"&gt;
  &lt;/a&gt;
  Caveats and workarounds
&lt;/h2&gt;

&lt;p&gt;If you pipe some input data to your interactive CLI app, the prompts will read that data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Petr"&lt;/span&gt; | go run main.go
&lt;span class="go"&gt;What is your name? Hello, Petr!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Sometimes such behavior is acceptable, but sometimes not. To check if the terminal is interactive let's use &lt;a href="https://pkg.go.dev/golang.org/x/term#IsTerminal"&gt;&lt;code&gt;term.IsTerminal&lt;/code&gt;&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"syscall"&lt;/span&gt;

    &lt;span class="s"&gt;"golang.org/x/term"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsTerminal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminal is interactive! You're good to use prompts!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminal is not interactive! Consider using flags or environment variables!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt; | go run main.go
&lt;span class="go"&gt;Terminal is not interactive! Consider using flags or environment variables!

&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;go run main.go
&lt;span class="go"&gt;Terminal is interactive! You're good to use prompts!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h2&gt;

&lt;p&gt;As you can see, it's pretty easy to implement basic interactive prompts, but for complex ones it's better to use some Go packages from the community:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AlecAivazis"&gt;
        AlecAivazis
      &lt;/a&gt; / &lt;a href="https://github.com/AlecAivazis/survey"&gt;
        survey
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A golang library for building interactive and accessible prompts with full support for windows and posix terminals.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Survey&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/AlecAivazis/survey" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eb6d98e0784128b77cbe56b5541f1f332bba00d886d4840d5992ead181d3708d/68747470733a2f2f7472617669732d63692e6f72672f416c6563416976617a69732f7375727665792e7376673f6272616e63683d66656174757265253246707265747479" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://pkg.go.dev/github.com/AlecAivazis/survey/v2" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/934f1b06800f63c17406b9a1e490b563402a3ebee33d9586ad188275db5610fc/687474703a2f2f696d672e736869656c64732e696f2f62616467652f676f646f632d7265666572656e63652d3532373242342e737667" alt="GoDoc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A library for building interactive and accessible prompts on terminals supporting ANSI escape sequences.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fd7c6e39ecf076e5da86a26ecfaa92d4e2ec3b56effe53bb804ed5cd7bb5f895/68747470733a2f2f7468756d62732e6766796361742e636f6d2f56696c6c61696e6f757347726163696f75734b6f75707265792d73697a655f726573747269637465642e676966"&gt;&lt;img width="550" src="https://camo.githubusercontent.com/fd7c6e39ecf076e5da86a26ecfaa92d4e2ec3b56effe53bb804ed5cd7bb5f895/68747470733a2f2f7468756d62732e6766796361742e636f6d2f56696c6c61696e6f757347726163696f75734b6f75707265792d73697a655f726573747269637465642e676966"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-go position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;package&lt;/span&gt; main
&lt;span class="pl-k"&gt;import&lt;/span&gt; (
    &lt;span class="pl-s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="pl-s"&gt;"github.com/AlecAivazis/survey/v2"&lt;/span&gt;
)

&lt;span class="pl-c"&gt;// the questions to ask&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;qs&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; []&lt;span class="pl-c1"&gt;*&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Question&lt;/span&gt;{
    {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;:     &lt;span class="pl-s"&gt;"name"&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Prompt&lt;/span&gt;:   &lt;span class="pl-c1"&gt;&amp;amp;&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Input&lt;/span&gt;{&lt;span class="pl-c1"&gt;Message&lt;/span&gt;: &lt;span class="pl-s"&gt;"What is your name?"&lt;/span&gt;},
        &lt;span class="pl-c1"&gt;Validate&lt;/span&gt;: &lt;span class="pl-s1"&gt;survey&lt;/span&gt;.&lt;span class="pl-c1"&gt;Required&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Transform&lt;/span&gt;: &lt;span class="pl-s1"&gt;survey&lt;/span&gt;.&lt;span class="pl-c1"&gt;Title&lt;/span&gt;,
    },
    {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;: &lt;span class="pl-s"&gt;"color"&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Prompt&lt;/span&gt;: &lt;span class="pl-c1"&gt;&amp;amp;&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Select&lt;/span&gt;{
            &lt;span class="pl-c1"&gt;Message&lt;/span&gt;: &lt;span class="pl-s"&gt;"Choose a color:"&lt;/span&gt;,
            &lt;span class="pl-c1"&gt;Options&lt;/span&gt;: []&lt;span class="pl-smi"&gt;string&lt;/span&gt;{&lt;span class="pl-s"&gt;"red"&lt;/span&gt;, &lt;span class="pl-s"&gt;"blue"&lt;/span&gt;, &lt;span class="pl-s"&gt;"green"&lt;/span&gt;},
            &lt;span class="pl-c1"&gt;Default&lt;/span&gt;: &lt;span class="pl-s"&gt;"red"&lt;/span&gt;,
        },
    },
    {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;: &lt;span class="pl-s"&gt;"age"&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Prompt&lt;/span&gt;:   &lt;span class="pl-c1"&gt;&amp;amp;&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Input&lt;/span&gt;{&lt;span class="pl-c1"&gt;Message&lt;/span&gt;: &lt;span class="pl-s"&gt;"How old are you?"&lt;/span&gt;},
    },
}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;// the answers will be written to this struct&lt;/span&gt;
    &lt;span class="pl-s1"&gt;answers&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-k"&gt;struct&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;          &lt;span class="pl-smi"&gt;string&lt;/span&gt;                  &lt;span class="pl-c"&gt;// survey will match the question and field names&lt;/span&gt;
        &lt;span class="pl-c1"&gt;FavoriteColor&lt;/span&gt; &lt;span class="pl-smi"&gt;string&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/AlecAivazis/survey"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Songmu"&gt;
        Songmu
      &lt;/a&gt; / &lt;a href="https://github.com/Songmu/prompter"&gt;
        prompter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      golang utility for easy prompting
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
prompter&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Songmu/prompter/actions?workflow=test"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0JRD3l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Songmu/prompter/workflows/test/badge.svg%3Fbranch%3Dmain" alt="Test Status"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/Songmu/prompter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5214fc5bfc5656e9ec52f9882a89daea96ea2e7defd94fb377bdd7e0b82a91fc/68747470733a2f2f636f6465636f762e696f2f67682f536f6e676d752f70726f6d707465722f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Songmu/prompter/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/bdb5463fb1a2526f1d2a9067443266c4420c86d22c70c48961bbe5513b9d49b2/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265" alt="MIT License"&gt;&lt;/a&gt;
&lt;a href="http://pkg.go.dev/github.com/Songmu/prompter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/133af499a6fcf88dec48a37bd3a36df66cabf87063cf12780b4933efb01d7318/68747470733a2f2f706b672e676f2e6465762f62616467652f6769746875622e636f6d2f536f6e676d752f70726f6d70746572" alt="GoDev"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;utility for easy prompting in Golang&lt;/p&gt;
&lt;h2&gt;
Synopsis&lt;/h2&gt;
&lt;div class="highlight highlight-source-go position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;twitterID&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;Prompt&lt;/span&gt;(&lt;span class="pl-s"&gt;"Enter your twitter ID"&lt;/span&gt;, &lt;span class="pl-s"&gt;""&lt;/span&gt;)
&lt;span class="pl-s1"&gt;lang&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;Choose&lt;/span&gt;(&lt;span class="pl-s"&gt;"Which language do you like the most?"&lt;/span&gt;, []&lt;span class="pl-smi"&gt;string&lt;/span&gt;{&lt;span class="pl-s"&gt;"Perl"&lt;/span&gt;, &lt;span class="pl-s"&gt;"Golang"&lt;/span&gt;, &lt;span class="pl-s"&gt;"Scala"&lt;/span&gt;, &lt;span class="pl-s"&gt;"Ruby"&lt;/span&gt;}, &lt;span class="pl-s"&gt;"Perl"&lt;/span&gt;)
&lt;span class="pl-s1"&gt;passwd&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;Password&lt;/span&gt;(&lt;span class="pl-s"&gt;"Enter your password"&lt;/span&gt;)
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;likeSushi&lt;/span&gt; &lt;span class="pl-smi"&gt;bool&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;YN&lt;/span&gt;(&lt;span class="pl-s"&gt;"Do you like sushi?"&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;likeBeer&lt;/span&gt; &lt;span class="pl-smi"&gt;bool&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;YesNo&lt;/span&gt;(&lt;span class="pl-s"&gt;"Do you like beer?"&lt;/span&gt;, &lt;span class="pl-c1"&gt;false&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Care non-interactive (not a tty) environment
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Default&lt;/code&gt; is used and the process is not blocked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No howeyc/gopass (which uses cgo) dependency
&lt;ul&gt;
&lt;li&gt;cross build friendly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customizable prompt setting by using &lt;code&gt;&amp;amp;prompter.Prompter{}&lt;/code&gt; directly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Songmu/prompter/blob/main/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Songmu"&gt;Songmu&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Songmu/prompter"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/manifoldco"&gt;
        manifoldco
      &lt;/a&gt; / &lt;a href="https://github.com/manifoldco/promptui"&gt;
        promptui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Interactive prompt for command-line applications
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
promptui&lt;/h1&gt;
&lt;p&gt;Interactive prompt for command-line applications.&lt;/p&gt;
&lt;p&gt;We built Promptui because we wanted to make it easy and fun to explore cloud
services with &lt;a href="https://github.com/manifoldco/manifold-cli"&gt;manifold cli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/manifoldco/promptui./CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; |
&lt;a href="https://github.com/manifoldco/promptui./.github/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/manifoldco/promptui/releases"&gt;&lt;img src="https://camo.githubusercontent.com/f88e2e116592ef0d56d059dda9d5d3804f41991e5bdd5b6ad2bede16158f28cc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f6d616e69666f6c64636f2f70726f6d707475692e7376673f6c6162656c3d6c6174657374" alt="GitHub release"&gt;&lt;/a&gt;
&lt;a href="https://godoc.org/github.com/manifoldco/promptui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e10a4fe371e6faf506d055891ac0d18d6cfa14f54d27737c4fcfdee550fd81e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f676f646f632d7265666572656e63652d626c75652e737667" alt="GoDoc"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/manifoldco/promptui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b6c9b32cb7f62950a8c4d962c761c5eee83394a7a597705f0b694664b6da39f/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d616e69666f6c64636f2f70726f6d707475692f6d61737465722e737667" alt="Travis"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/github.com/manifoldco/promptui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/87ba6eb23483b5af40a4531e7d2aa6811fbf8471fb74c9c7d84731d424025c3c/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6d616e69666f6c64636f2f70726f6d70747569" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://github.com/manifoldco/promptui./LICENSE.md"&gt;&lt;img src="https://camo.githubusercontent.com/44c92aa855b3a4b0b5c6f84818afb96ab66b53a102115f5167a396a3f0ff8f3a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4253442d626c75652e737667" alt="License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cb2f8d2976387f7eb629a7c561181d1870b39991f80c913cf15e37d2cb7c6a06/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f78554e6461304e67623571736f674c7342692f67697068792e676966"&gt;&lt;img src="https://camo.githubusercontent.com/cb2f8d2976387f7eb629a7c561181d1870b39991f80c913cf15e37d2cb7c6a06/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f78554e6461304e67623571736f674c7342692f67697068792e676966" alt="promptui"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Promptui is a library providing a simple interface to create command-line
prompts for go. It can be easily integrated into
&lt;a href="https://github.com/spf13/cobra"&gt;spf13/cobra&lt;/a&gt;
&lt;a href="https://github.com/urfave/cli"&gt;urfave/cli&lt;/a&gt; or any cli go application.&lt;/p&gt;
&lt;p&gt;Promptui has two main input modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Prompt&lt;/code&gt; provides a single line for user input. Prompt supports
optional live validation, confirmation and masking the input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Select&lt;/code&gt; provides a list of options to choose from. Select supports
pagination, search, detailed view and custom templates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full list of options check &lt;a href="https://godoc.org/github.com/manifoldco/promptui" rel="nofollow"&gt;GoDoc&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Basic Usage&lt;/h2&gt;
&lt;h3&gt;
Prompt&lt;/h3&gt;
&lt;div class="highlight highlight-source-go position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;package&lt;/span&gt; main
&lt;span class="pl-k"&gt;import&lt;/span&gt; (
    &lt;span class="pl-s"&gt;"errors"&lt;/span&gt;
    &lt;span class="pl-s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="pl-s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="pl-s"&gt;"github.com/manifoldco/promptui"&lt;/span&gt;
)

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;() {
    &lt;span class="pl-s1"&gt;validate&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt;(&lt;span class="pl-s1"&gt;input&lt;/span&gt; &lt;span class="pl-smi"&gt;string&lt;/span&gt;) &lt;span class="pl-smi"&gt;error&lt;/span&gt; {
        &lt;span class="pl-s1"&gt;_&lt;/span&gt;, &lt;span class="pl-s1"&gt;err&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;strconv&lt;/span&gt;.&lt;span class="pl-en"&gt;ParseFloat&lt;/span&gt;(&lt;span class="pl-s1"&gt;input&lt;/span&gt;, &lt;span class="pl-c1"&gt;64&lt;/span&gt;)
        &lt;span class="pl-k"&gt;if&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/manifoldco/promptui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it! We hope you liked it! Code examples are available on &lt;a href="https://github.com/tidalmigrations/interactive-cli-prompts"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're interested in CLI applications development in Go and we — &lt;a href="https://tidalmigrations.com/"&gt;Tidal Migrations&lt;/a&gt; — are hiring! Please check our &lt;a href="https://tidalmigrations.com/careers/"&gt;Careers&lt;/a&gt; page!&lt;/p&gt;

&lt;p&gt;Long live the command line!&lt;/p&gt;

</description>
      <category>go</category>
      <category>cli</category>
    </item>
    <item>
      <title>Let me introduce you to Inertia.js, something you didn't know you were missing</title>
      <author>Kars van Iersel</author>
      <pubDate>Wed, 25 Aug 2021 18:24:39 +0000</pubDate>
      <link>https://dev.to/karsvaniersel/let-me-introduce-you-to-inertia-js-something-you-didn-t-know-you-were-missing-3d1</link>
      <guid>https://dev.to/karsvaniersel/let-me-introduce-you-to-inertia-js-something-you-didn-t-know-you-were-missing-3d1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Roughly a year ago I had to make a very large scale application and I couldn't decide on a backend framework. However, I knew I wanted to use Vue.js as my front-end. So I began my long quest the ideal framework for my backend. I had doubts between Node.js and Laravel, and I couldn't really decide. I had almost no experience with Node.js or Laravel. The only back-end language I had experience with was vanilla PHP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter Inertia.js&lt;/strong&gt;, all of the sudden I found  &lt;a href="https://inertiajs.com/"&gt;Inertia.js&lt;/a&gt; . A Laraval package created by  &lt;a href="https://twitter.com/reinink"&gt;Jonathan Reinink&lt;/a&gt;. Inertia.js allowed me to develop my large scale app using Vue and Laravel in one codebase. Which I really liked cause I hated to idea of having two GitHub repositories, one for the front-end and one for the back-end.&lt;/p&gt;

&lt;p&gt;Now, remember I had almost no experience with Laravel and now I also had to learn Inertia.js on top of it in order to develop my entire application. And trust me, the deadline was though. But boy oh boy Inertia.js was such a pleasure to develop with. Learning Laravel was a breeze, applying Inertia.js was a breeze and I finished the project much faster than I initially anticipated. &lt;/p&gt;

&lt;p&gt;For your understanding the project had some of the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reservation system for clients&lt;/li&gt;
&lt;li&gt;Admin system to handle reservations (create, cancel, refund etc)&lt;/li&gt;
&lt;li&gt;Payment processing&lt;/li&gt;
&lt;li&gt;Date scheduling&lt;/li&gt;
&lt;li&gt;Different type of products&lt;/li&gt;
&lt;li&gt;Upselling items&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh and the site is getting used by over a 1000 people &lt;strong&gt;per day&lt;/strong&gt;. So I had to create a solid app that wouldn't crash and burn.&lt;/p&gt;

&lt;p&gt;My experience with Inertia.js, Laravel and Vue.js was such a delight that I wanted to share this with you. Cause I feel like Inertia.js is not getting the attention it deserves. I honestly believe that a front-end developer, who needs basic CRUD back-end functionality, can develop some incredibly SaaS applications using this tech stack. And if you are more experienced with Laravel you can really make anything you can think of with the power of Vue combined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-inertiajs"&gt;
  &lt;/a&gt;
  What is Inertia.js?
&lt;/h2&gt;

&lt;p&gt;Inertia.js is a package built for Laravel allowing people to develop single-page applications without building an API, using either Vue.js, React or Svelte for their front-end. According to their website Inertia.js is the new approach to building classic server-driven web apps, they call it the modern monolith.&lt;/p&gt;

&lt;p&gt;So Inertia allows you to create client-side rendered apps, using React, Vue or Svelte by leveraging existing server-side frameworks. In my case Laravel, it can also work with Rails.&lt;/p&gt;

&lt;p&gt;Inertia doesn't use client-side routing and it also doesn't require an API to be developed. You only need to develop the controllers and page views like you would normally do with Laravel. &lt;/p&gt;

&lt;p&gt;So this means you can just write Laravel code and render on the client without having to output everything with an API and inherit everything in your SPA. Inertia streamlines this process by delivering straight from server-side to client-side. Saving &lt;strong&gt;a lot&lt;/strong&gt; of time&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-a-framework"&gt;
  &lt;/a&gt;
  Not a framework
&lt;/h3&gt;

&lt;p&gt;It is important to note that Inertia itself is not &lt;em&gt;another&lt;/em&gt; framework. It doesn't replace your existing server-side or client-side frameworks. It is designed to work with both. It is like the middleman connecting the two together. &lt;/p&gt;

&lt;p&gt;They currently work with the following front-end frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Svelte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with the following back-end frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Rails&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-use-inertiajs"&gt;
  &lt;/a&gt;
  Should you use Inertia.js?
&lt;/h2&gt;

&lt;p&gt;Inertia is designed for developers and larger development teams who usually build server-side applications using Laravel or Rails. So developers who are used to creating controllers, that get data from a database using ORM and render views. &lt;/p&gt;

&lt;p&gt;Typically with Laravel you would use blade templates to render your server-side rendered vies. But this becomes a bit harder if you want to swap it out with a JavaScript based SPA framework, such as Vue or React. Normally you would just start by creating an API and combining the two using said API.&lt;/p&gt;

&lt;p&gt;This means creating either a GraphQL or REST API. Creating Auth functionality for that API. Client-side state management. Having your code split up in two repositories (one for front-end and one for back-end). This means you now also need two hosting packages to host each platform on. &lt;/p&gt;

&lt;p&gt;You can already clearly see how much more work is involved the moment you want to use a modern client-side framework. Inertia removes all this extra hassle and complexity.&lt;/p&gt;

&lt;p&gt;Inertia works almost the same as you normally render your views, getting data from the database and rendering it in your view. Inertia brilliantly makes the pages render in JavaScript components instead. This means you have the full power of your Vue or React front-end code while delivering everything from the server without having to build an entire API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-started-using-inertiajs"&gt;
  &lt;/a&gt;
  Why I started using Inertia.js
&lt;/h3&gt;

&lt;p&gt;The main reason why I started using Inertia was because I hated the idea of having my code split up in two repositories. Also I &lt;strong&gt;really&lt;/strong&gt; wanted to work with Vue.js for my front-end. &lt;/p&gt;

&lt;p&gt;I didn't have the time to develop my own API and then handle all the logic on both sides. I wanted one project that did all the work for me. I didn't want to have to handle authorization with Vue.js cause I find it very annoying and a time waster to set up. I mean, handeling authorization using Laravel (PHP) is so much easier. I don't want to reinvent the wheel by using Vue. I want to write code and deliver my project quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-inertiajs-works"&gt;
  &lt;/a&gt;
  How Inertia.js works
&lt;/h2&gt;

&lt;p&gt;Inertia allows you to build apps just you would regularly do with a server-side framework. It uses the framework's existing routing, controllers middleware, authentication and more functionalities.&lt;/p&gt;

&lt;p&gt;The only thing that Inertia adds, or changes rather, is your view layer, the way you render your front-end. Instead of using your regular server-side rendering, such a blade template, the views are passed to JavaScript components. This means you can keep writing your server-side code, like Laravel, like you regularly would, in combination with state of art front-end frameworks, such as React and Vue.&lt;/p&gt;

&lt;p&gt;If you are interested in the more technical background as in how this actually works, you can read that in the  &lt;a href="https://inertiajs.com/how-it-works"&gt;Inertia documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-experience-with-using-inertiajs"&gt;
  &lt;/a&gt;
  My experience with using Inertia.js
&lt;/h2&gt;

&lt;p&gt;Coming from a more front-end heavy background I was bit overwhelmed with using Laravel and to create my SaaS application. However since I was able to use Inertia, I was able to apply all the knowledge I had from Vue. This meant I only had to learn some Laravel specific items. Everything front-end related was nothing new. &lt;/p&gt;

&lt;p&gt;If I had to this with Blade templating it would've been a nightmare for me! And I wouldn't be able to have finished my project on time and with great success.&lt;/p&gt;

&lt;p&gt;So far I've been using Inertia for all my projects. It really made me switch my tech stack towards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Inertia&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh btw before I forgot to mention, if you are afraid that Inertia won't work with Vue 2 or Vue 3. Don't worry, it works with both. Actually it doesn't matter what version you use cause Inertia doesn't affect Vue all that much. It just passes the data in a really clever way.&lt;/p&gt;

&lt;p&gt;And for the past 6 months using this tech stack I have been literally amazed with the amount of code I can produce, and the quality of it. Honestly, having an idea for something and being able to turn it into an MVP within weeks (often just a good weekend), is a lot of fun!&lt;/p&gt;

&lt;p&gt;Another great thing is that Inertia recently launched their SSR feature (server-side rendering) for their Github sponsors. Which takes this entire tech stack to the next level . Because the biggest problem with SPA's is that they don't rank well in Google due their JavaScript heavy nature. But now with Inertia you are also able to server-side render all of your pages, and rank better in Google. Of course there might be causes where you don't actually want SSR. For me it brings a lot of new interesting things to the table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are working with Laravel already it highly recommend you checking out Inertia. Actually I recommend everybody trying out Inertia. It really combines the best of both worlds. One of the best back-end frameworks there is combined with the most popular front-end frameworks out there.&lt;/p&gt;

&lt;p&gt;The learning curve is not that high, just a building a basic CRUD application with Laravel + Vue can probably be achieved within 1 day if you are a bit familiar with how MVP frameworks work. &lt;/p&gt;

&lt;p&gt;Take it from me, I barely touched Laravel and never heard of Inertia before and I was able to build a very large and complex application in a matter of weeks. &lt;/p&gt;

&lt;p&gt;If you have questions feel free to reach out to me! I'm happy to help. On that note, there is also an  &lt;a href="https://discord.com/invite/inertiajs"&gt;Inertia discord server&lt;/a&gt; . They are pretty active and so far I've had plenty of help over there. So thanks for anybody who's in that channel!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#noteworthy-links"&gt;
  &lt;/a&gt;
  Noteworthy links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://inertiajs.com/"&gt;Inertia website&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://laravel.com/"&gt;Laravel website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laracasts.com/series/laravel-8-from-scratch/episodes/1"&gt;Laracasts: Laravel 8 from scratch course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>vue</category>
      <category>laravel</category>
      <category>programming</category>
    </item>
    <item>
      <title>things to regret about node js today</title>
      <author>vishwasnarayanre</author>
      <pubDate>Wed, 25 Aug 2021 18:23:14 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/things-to-regret-about-node-js-2ech</link>
      <guid>https://dev.to/vishwasnarayan5/things-to-regret-about-node-js-2ech</guid>
      <description>&lt;p&gt;You have only started using Node agin in the past 6 months, because when RAYAN DAHL created Node, your goal was mainly to program event-driven HTTP servers, and Go is a better language for building faster servers. &lt;/p&gt;

&lt;p&gt;But he thinks JavaScript is good. Dynamic languages ​​may not be suitable for building servers that you want to control everything, but they are the right tool for prototyping, such as scientific computing. JavaScript is the best dynamic language. &lt;/p&gt;

&lt;p&gt;Your Node problem is almost related to the way you manage user code. Mainly because it focuses on event I/O, the module system is essentially an afterthought.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#failed-to-fulfill-the-promise"&gt;
  &lt;/a&gt;
  failed to fulfill the promise
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is possible that the unified use of promises in Node will speed up the delivery of standardization and async/await. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The node program can access all system calls, such as writing to disk and accessing the network. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#build-system"&gt;
  &lt;/a&gt;
  Build System
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are writing a module link to a C library, you will use GYP to compile the C library and link it to Node. &lt;/li&gt;
&lt;li&gt;Chrome used to use GYB, but now Node is the only GYP user. &lt;/li&gt;
&lt;li&gt;Funky interface, which is a Python adaptation of JSON. The node has several unnecessary complex wrappers. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Includes &lt;code&gt;NPM&lt;/code&gt; in Node, making NPM a standard for Node distribution. Centralized repository (privately controlled) of 
modules. &lt;/li&gt;
&lt;li&gt;require ("sommodule") is not specific: package.json, local node_modules folder, NPM database. &lt;/li&gt;
&lt;li&gt;promotes the concept of "module" to an unnecessary abstraction of file directories. It does not exist on the network. &lt;/li&gt;
&lt;li&gt;includes unnecessary information such as licenses, repositories. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nodemodules"&gt;
  &lt;/a&gt;
  node_modules
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The analysis algorithm for module is extremely complicated. &lt;/li&gt;
&lt;li&gt;Vendoredbydefault is kind, but $NODE_PATH will work. &lt;/li&gt;
&lt;li&gt;There is a deviation from the browser. &lt;/li&gt;
&lt;li&gt;does not need to be extended. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#is-unnecessarily-unclear"&gt;
  &lt;/a&gt;
  is unnecessarily unclear.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;is not the way browsers work. &lt;/li&gt;
&lt;li&gt;The module loader must guess. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It unnecessarily complicates the module loading system. &lt;/li&gt;
&lt;li&gt;is especially unnecessary after package.json which needs to be supported. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#deno"&gt;
  &lt;/a&gt;
  Deno
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#httpsgithubcomrydeno"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ry/deno"&gt;https://github.com/ry/deno&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;By default, the script should run without write access to the network or file system. &lt;/li&gt;
&lt;li&gt;Users can choose to access via the following signs: 

&lt;ul&gt;
&lt;li&gt;allownet &lt;/li&gt;
&lt;li&gt;allowwrite &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;It is not allowed to bind any native functions to V8. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-typescript-compiler-is-built-into-the-executable-file"&gt;
  &lt;/a&gt;
  The TypeScript compiler is built into the executable file.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript is beautiful. &lt;/li&gt;
&lt;li&gt;finally delivered a practical and optional type language. &lt;/li&gt;
&lt;li&gt;enables code to grow seamlessly from fast hackers to large, well-structured machines. &lt;/li&gt;
&lt;li&gt;Normal JS should work too.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-simplified-module-system-does-not-support-node-modules"&gt;
  &lt;/a&gt;
  The simplified module system does not support node modules.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The import is just a relative or absolute URL. &lt;/li&gt;
&lt;li&gt;The import must provide an extension. &lt;/li&gt;
&lt;li&gt;remote URLs are fetched and cached indefinitely on the first load. &lt;/li&gt;
&lt;li&gt;can be sold by specifying a non-default cache directory. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Only submit an executable file with the fewest links. &lt;/li&gt;
&lt;li&gt;Start the runtime by compiling the node module with parcel into a package. &lt;/li&gt;
&lt;li&gt;Always died immediately because of a promise that was not fulfilled. &lt;/li&gt;
&lt;li&gt;supports top-level wait. &lt;/li&gt;
&lt;li&gt;browser compatible (&lt;code&gt;window&lt;/code&gt; is not &lt;code&gt;global&lt;/code&gt;) 
#node #deno #javascript&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>LRU cache Illustrated - For the visual learner</title>
      <author>kapeel kokane</author>
      <pubDate>Wed, 25 Aug 2021 18:22:41 +0000</pubDate>
      <link>https://dev.to/comscience/lru-cache-illustrated-for-the-visual-learner-242c</link>
      <guid>https://dev.to/comscience/lru-cache-illustrated-for-the-visual-learner-242c</guid>
      <description>&lt;p&gt;Hey There 👋🏾&lt;/p&gt;

&lt;p&gt;Today's topic of discussion is the &lt;strong&gt;LRU cache&lt;/strong&gt;. A few days back, I created a twitter thread giving an introduction about the same. Here's the thread if you want to take a look. 👇🏾&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C8GZi0LP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8hjSYCVcAQMHr5.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel 💙 Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel 💙 Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Day 39 of &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt;&lt;br&gt;&lt;br&gt;In today's 🧵, we look into the basics about LRU (Least Recently Used) cache&lt;br&gt;&lt;br&gt;made with &lt;a href="https://twitter.com/Vjeux"&gt;@Vjeux&lt;/a&gt;'s  &lt;a href="https://twitter.com/excalidraw"&gt;@excalidraw&lt;/a&gt; &lt;br&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:44 PM - 11 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425498488649879559" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425498488649879559" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425498488649879559" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;💁🏻‍♂️ In today's post, we will be digging in a little deeper and also look at how one can implement an LRU cache in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-cache-anything"&gt;
  &lt;/a&gt;
  Why cache anything? 🤔
&lt;/h2&gt;

&lt;p&gt;The first question that we will tackle is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;why do we need to cache anything in the first place?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, the way software gets used by consumers follows a specific pattern. Somewhat similar to the &lt;a href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;80-20 rule&lt;/a&gt;. It basically means that the data that gets queried once, is more likely to get queried on the same device again.&lt;/p&gt;

&lt;p&gt;And that even makes sense. Whenever I open twitter, as I'm definitely sure that my user information needs to be fetched every time, it's &lt;em&gt;an efficient choice&lt;/em&gt; to cache that information on my browser so that the next time it is required, there is a &lt;strong&gt;faster&lt;/strong&gt; way to fetch it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-not-cache-everything"&gt;
  &lt;/a&gt;
  Why not cache everything? 🤨
&lt;/h2&gt;

&lt;p&gt;The next logical question would then be&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If caching is actually that good and solves all our problems, why don't we cache everything?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, there is the issue of &lt;strong&gt;space constraint&lt;/strong&gt;. In the previous example, if the browser starts caching all the user's info that I visit, sooner or later, the browser is going to &lt;em&gt;run out of memory&lt;/em&gt;. And hence, there needs to be a conscious thought about what to cache and for how long.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache-replacement"&gt;
  &lt;/a&gt;
  Cache replacement!
&lt;/h2&gt;

&lt;p&gt;With that in mind, we now need to think about a scenario&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What if the cache is at full capacity right now and we need to add another element to it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is where the &lt;strong&gt;LRU&lt;/strong&gt; part comes into the picture. Which expands to &lt;strong&gt;Least recently used&lt;/strong&gt;. The logic being that something which was used(stored/accessed) a long long time back, would most probably not be used again. There are other strategies of cache eviction (deletion) apart from the LRU one. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;First in first out:&lt;/strong&gt;
The one that was added first, gets deleted first, irrespective of when it got accessed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Last in first out:&lt;/strong&gt;
The one that was added last, gets deleted first, irrespective of when it got accessed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Least frequently used:&lt;/strong&gt;
The one that was accessed the fewest number of times, gets deleted first.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Random replacement:&lt;/strong&gt;
Any one of the cache items is randomly chosen and deleted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are several other strategies in addition to these. Also, there is no one-size-fits-all strategy and each of these mentioned above are suited for different use cases. But in today's article, we will be looking specifically into the LRU cache.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lru-illustrated"&gt;
  &lt;/a&gt;
  LRU illustrated
&lt;/h2&gt;

&lt;p&gt;Let us assume that we have an LRU cache that can only hold &lt;strong&gt;3 user details&lt;/strong&gt; at a time and visualise how that would look like. using the &lt;code&gt;put()&lt;/code&gt; method to add user to the cache and the &lt;code&gt;get()&lt;/code&gt; method to fetch the user info from the cache. Before adding anything, this is what the cache looks like:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HFsQwaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1cpxdan30ucggqnjf7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HFsQwaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1cpxdan30ucggqnjf7e.png" alt="empty cache"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add the 3 users. Using string value for example, can be assumed to be an object with different key/value data about the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amy's details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bob's details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clint's details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cache is now at full capacity and looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnzOKODN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gaxslzkoyy8mlyvocuuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnzOKODN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gaxslzkoyy8mlyvocuuw.png" alt="cache after 3 puts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, If we want to add a fourth user: dylan to the cache, one of the previous users needs to be deleted. And that would be amy according to the &lt;strong&gt;least recently used&lt;/strong&gt; principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dylan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dylan's details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFF8NiC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5qp6dmoadywg3ybln2e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFF8NiC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5qp6dmoadywg3ybln2e.png" alt="dylan added to cache"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, let's say if before adding dylan to the cache, if we had accessed amy's user object, it would &lt;strong&gt;NOT&lt;/strong&gt; be the least recently used item in the cache and due to that, bob would have got chucked out instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dylan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dylan's details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UomseRl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgpdk177uqx7k0vf7mu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UomseRl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgpdk177uqx7k0vf7mu8.png" alt="dylan added after amy accessed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that provides you the gist of how this is working. Let's dive into the code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h2&gt;

&lt;p&gt;We will code this up as a JavaScript class with the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; methods in it. &lt;/p&gt;

&lt;p&gt;Here's what the class looks like with it's constructor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LRUCache&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the &lt;code&gt;get()&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line just checks whether the item is present in the cache and returns a -1 in case it is not. &lt;/p&gt;

&lt;p&gt;But do you notice the part wherein the object &lt;strong&gt;is present&lt;/strong&gt;? &lt;/p&gt;

&lt;p&gt;We access the value, delete it from the cache and then add it again before returning its value. Well that is a trick which you'll soon understand.&lt;/p&gt;

&lt;p&gt;Let's look at the &lt;code&gt;put()&lt;/code&gt; method before that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first part here, if the cache already has the key that we are trying to add, we delete it first and then add it again. This is confusing too, right?&lt;/p&gt;

&lt;p&gt;The next part will make it clear. &lt;/p&gt;

&lt;p&gt;Notice what we are doing in case the cache has exceeded capacity? we are doing &lt;code&gt;this.cache.keys().next().value&lt;/code&gt;. Well, this is a special trick using which we are fetching the value that was written &lt;strong&gt;first&lt;/strong&gt; out of all the values written to the Map. &lt;/p&gt;

&lt;p&gt;You see, in the &lt;code&gt;get()&lt;/code&gt; method, we deleted the key and set it again so that it ends up being the &lt;strong&gt;most recently added value&lt;/strong&gt; and does not show up when we fetch &lt;code&gt;this.cache.keys().next().value&lt;/code&gt; value as it got recently accessed.&lt;/p&gt;

&lt;p&gt;The deletion and adding inside the &lt;code&gt;put()&lt;/code&gt; function is serving a similar function. Basically, we are refreshing that particular value in the cache!&lt;/p&gt;

&lt;p&gt;And that's the magic. And we have this fully functional cache written in JavaScript which we can play around with!&lt;/p&gt;

&lt;p&gt;Hope you liked that. &lt;br&gt;
Cheers! 🙌🏾&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I Bet You Don't Keep A Developer Journal: 3 Reasons You Should</title>
      <author>Simon Barker</author>
      <pubDate>Wed, 25 Aug 2021 18:18:14 +0000</pubDate>
      <link>https://dev.to/allthecode/i-bet-you-don-t-keep-a-developer-journal-3-reasons-you-should-4kn3</link>
      <guid>https://dev.to/allthecode/i-bet-you-don-t-keep-a-developer-journal-3-reasons-you-should-4kn3</guid>
      <description>&lt;p&gt;"Do you know how to get rid of this weird primodials issue?" I was asked across the office once.&lt;/p&gt;

&lt;p&gt;Something about it sounded familiar so I did a quick search through my work journal and sure enough unearthed a note from 3 months earlier where I had seen this issue myself and jotted down the solution.&lt;/p&gt;

&lt;p&gt;"You're running the wrong node version for that application" I confidently reply.&lt;/p&gt;

&lt;p&gt;I looked like a super hero for remembering, when in fact all I did was look back through my external store of knowledge where I jot things down every day and regurgitate it. It helped in this case that the issue had a cool name in it (which is why I use this as my main example) but if it was something I had come across in my career, pretty much any relevant search term would work.&lt;/p&gt;

&lt;p&gt;The value in keeping a work journal is huge, here's why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-not-for-you-to-read"&gt;
  &lt;/a&gt;
  It's not for you to read
&lt;/h2&gt;

&lt;p&gt;It's tempting to think that a journal is for you to go back and read. In reality it's not, it's a searchable store of knowledge where one of the pieces of information is the date it happened on. Don't worry about making it interesting to read or feel like a story, it's a series of notes, events, error messages and solutions from your day that could be useful in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-a-database"&gt;
  &lt;/a&gt;
  It's a database
&lt;/h2&gt;

&lt;p&gt;It's really a database, a loosely structured, highly searchable database that enables the value of your developer experience to compound over time. The more you put into it the more valuable it becomes because of how bad our memories are. Each nugget of information makes connections to other morsels of information highlighting links you may have missed. Searching for &lt;code&gt;.htaccess&lt;/code&gt; in my database brings up rewrite rules for old projects, reminds me of old projects I had forgotten about and highlights bits of tangential information that can unearth memories, like the terror of ftp'ing on to a live server and hot fixing a PHP bug without a &lt;code&gt;git commit&lt;/code&gt; or line of yaml insight, good times!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-gives-you-confidence"&gt;
  &lt;/a&gt;
  It gives you confidence
&lt;/h2&gt;

&lt;p&gt;We often forget how far we have come, we focus on our current point in space and time, rather than the line and trajectory we are on. Having a store of knowledge, no matter how disorganised and seemingly disparate, lets us see how far we have come, how many problems we have solved and struggles we have overcome.&lt;/p&gt;

&lt;p&gt;As digital creators much of our work is invisible 🙁 &lt;/p&gt;

&lt;p&gt;When my wife sees a car from particularly high end sports car company drive past she is reminded of the work she put into that car's development, when my friend drives over certain bridges he can see the physical manifestation of his work. &lt;/p&gt;

&lt;p&gt;I on the other hand don't see the database migrations or api rewrite that took months of my time at my first job. I can, however look at my journal and see the things I learned, techniques I mastered and best practices I applied during that work because I noted it all down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anything-will-do"&gt;
  &lt;/a&gt;
  Anything will do
&lt;/h2&gt;

&lt;p&gt;Don't sweat the tool you use, text files work if you have a good way to search them. &lt;a href="http://notion.so"&gt;Notion&lt;/a&gt; is my favourite app of choice at the moment. &lt;a href="http://evernote.com"&gt;Evernote&lt;/a&gt; was all the rage for a few years there and no &lt;a href="http://obsidian.md"&gt;Obsidian&lt;/a&gt; is the new kind in town. So long as it's quick to jot something down, has good search and doesn't get in your way then it's good enough to get going with!&lt;/p&gt;

&lt;p&gt;So, go forth and journal!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>✨ How to Immutably remove property from JavaScript Object</title>
      <author>Ahmed Murtaza</author>
      <pubDate>Wed, 25 Aug 2021 17:48:40 +0000</pubDate>
      <link>https://dev.to/ahmedgmurtaza/immutably-remove-property-from-javascript-object-3kb7</link>
      <guid>https://dev.to/ahmedgmurtaza/immutably-remove-property-from-javascript-object-3kb7</guid>
      <description>&lt;p&gt;Say we want to create a copy of an existing object, reusing most of the properties while dropping few. In order to remove unwanted properties, there are two basic patterns we usually follow.  &lt;/p&gt;

&lt;p&gt;Let say we have the following object to work with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Let obj = {
    Name:'Ahmed Murtaza',
    Email:'ahmed_murtaza@xyz.com',
    twitter:'ahmedgmurtaza',
    fb:'ahmedgmurtaza'
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#old-school-way"&gt;
  &lt;/a&gt;
  Old school way
&lt;/h2&gt;

&lt;p&gt;First approach is to use &lt;code&gt;delete&lt;/code&gt; operator, for that we first duplicate the original object and then explicitly delete the unwanted property out of it, here the unwanted property is &lt;code&gt;twitter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Let obj2 = Object.assign({}, obj);
delete obj2.twitter;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-object-destructuring-rest-operator"&gt;
  &lt;/a&gt;
  🌟 Using Object destructuring + rest operator:
&lt;/h2&gt;

&lt;p&gt;using this pattern, we isolate the removing property using destructuring format and name the rest of the properties as new object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let obj2 = { twitter, ...obj2 } = obj;
console.log(obj2); // obj2 does not carries twitter property
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the above approach, we can immutably remove any property out of the object or can pick the one we need while ignoring the rest of the properties.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>angular</category>
    </item>
    <item>
      <title>Desktop Environment in Linux!</title>
      <author>Suchitra</author>
      <pubDate>Wed, 25 Aug 2021 17:05:27 +0000</pubDate>
      <link>https://dev.to/suchitra_13/desktop-environment-in-linux-1oof</link>
      <guid>https://dev.to/suchitra_13/desktop-environment-in-linux-1oof</guid>
      <description>&lt;p&gt;&lt;strong&gt;Do you want to use Linux but find difficulty with commands?&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/dJYoOVAWf2QkU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dJYoOVAWf2QkU/giphy.gif" alt="Sad"&gt;&lt;/a&gt;&lt;br&gt;
So, you came in the right place... In this article, I am going to explain about &lt;strong&gt;How can you use Linux in easy way without using any single command!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, I will suggest you that it would be great if you go through below 👇 article 1st before starting this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/suchitra_13" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAnECmiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Jy171Kny--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449284/f0604fb9-cd95-44a4-a188-efbf11544905.png" alt="suchitra_13"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/suchitra_13/what-is-linux-3jnc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is Linux?&lt;/h2&gt;
      &lt;h3&gt;Suchitra ・ Apr 10 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Now, you got to know about Linux and its features as well, also you may or may not be heard about that… Linux is a CLI based, normal user can't use Linux based operating system right!. And If you want to use Linux then you should have good grasp on commands and programming languages.&lt;br&gt;
But don't worry, still you can use Linux!&lt;/p&gt;

&lt;p&gt;The solution of your Problem is Desktop Environment.&lt;br&gt;
But here the question arises is ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-desktop-environment-"&gt;
  &lt;/a&gt;
  What is a Desktop Environment ?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif" alt="Let's discuss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A desktop environment is the bundle of components that provide you common graphical user interface (GUI) elements such as icons, toolbars, wallpapers, and desktop widgets. Thanks to the desktop environment, you can use Linux graphically using your mouse and keyboard like you do in other operating systems like Windows and macOS.&lt;br&gt;
Without a desktop environment, your Linux system will just have a terminal like utility, and you’ll have to interact it using commands only.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#some-example-of-desktop-environment-in-linux"&gt;
  &lt;/a&gt;
  Some example of Desktop Environment in Linux:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnome.org/"&gt;GNOME&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0BLclvGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldkga9kagzrslopksara.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0BLclvGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldkga9kagzrslopksara.jpg" alt="Gnome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.xfce.org/"&gt;Xfce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpkivZZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lifewire.com/thmb/j9x5SP0fQt0gUYxx3SOD9Gjjxgk%3D/1600x900/filters:fill%28auto%2C1%29/xfce2-5806ec9f3df78cbc28aa61d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpkivZZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lifewire.com/thmb/j9x5SP0fQt0gUYxx3SOD9Gjjxgk%3D/1600x900/filters:fill%28auto%2C1%29/xfce2-5806ec9f3df78cbc28aa61d0.png" alt="Xfce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kde.org/"&gt;KDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jc0AUtTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/1g6gr47ibj051.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jc0AUtTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/1g6gr47ibj051.png" alt="KDE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.lxde.org/"&gt;LXDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJgfhlgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.technewsworld.com/images/article_images/74574_990x557.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJgfhlgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.technewsworld.com/images/article_images/74574_990x557.jpg" alt="lxde"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ubuntubudgie.org/"&gt;Budgie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iAr2Y2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thelinuxuser.com/wp-content/uploads/2019/12/Featured-Image.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iAr2Y2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thelinuxuser.com/wp-content/uploads/2019/12/Featured-Image.jpg" alt="Budgie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading❤️
&lt;/h2&gt;

&lt;p&gt;If you have any query or suggestions, let me know via commenting!😊&lt;/p&gt;

</description>
      <category>linux</category>
      <category>todayisearched</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My FrontEnd Interview Experience At Razorpay</title>
      <author>Anurag Hazra</author>
      <pubDate>Wed, 25 Aug 2021 16:53:29 +0000</pubDate>
      <link>https://dev.to/anuraghazra/my-frontend-interview-experience-at-razorpay-29bo</link>
      <guid>https://dev.to/anuraghazra/my-frontend-interview-experience-at-razorpay-29bo</guid>
      <description>&lt;p&gt;Hey Folks! I hope you are doing great.&lt;/p&gt;

&lt;p&gt;As you know from the &lt;a href="https://twitter.com/anuraghazru/status/1427296905566900227"&gt;announcements&lt;/a&gt; that I've recently joined &lt;a href="https://razorpay.com"&gt;Razorpay&lt;/a&gt; as a FrontEnd Engineer.&lt;/p&gt;

&lt;p&gt;So this is a writeup about my interview experience at razorpay and how I&lt;br&gt;
cleared the interview and got the offer!&lt;/p&gt;

&lt;p&gt;After over 1k LinkedIn likes &amp;amp; 600 twitter hearts, and 50+ DMs about&lt;br&gt;
"what is the interview process at razorpay?" I'm finally writing this.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClfAhxgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E871MlFVUBotoyl.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab7tb9le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1334937284076924929/KtVMaBJ3_normal.jpg" alt="Anurag Hazra ⚛ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Anurag Hazra ⚛
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @anuraghazru
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Got 35+ DMs with the same question.... It seems I really need to blog about my interview experience at &lt;a href="https://twitter.com/Razorpay"&gt;@Razorpay&lt;/a&gt; 😂 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:14 PM - 16 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1427348086188232739" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1427348086188232739" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1427348086188232739" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Let's get started. First thing first I've got a lot of questions in one week and the most frequent one is:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-get-this-opportunity"&gt;
  &lt;/a&gt;
  "How did you get this opportunity?"
&lt;/h2&gt;

&lt;p&gt;Simple one liner answer to this question would be &lt;br&gt;
&lt;em&gt;"I built my personal brand, showcased my skills publicly and connected with friends in the community who work at razorpay"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My story of getting the opportunity is bit interesting, so there was a &lt;a href="https://twitter.com/RazorpayEngg/status/1413159886972538881"&gt;twitter post&lt;/a&gt; from the Razorpay engineering handle and I posted a &lt;a href="https://twitter.com/anuraghazru/status/1413166291821600770"&gt;meme as a reply&lt;/a&gt; to that post,&lt;br&gt;&lt;br&gt;
Then &lt;a href="https://dev.to_kamlesh_"&gt;Kamlesh&lt;/a&gt; DM'd asking if I was ready to explore the opportunity, even though that tweet was totally a joke from my side and I had no plans to join razorpay atm 😂, I still took the opportunity and moved forward with the interviews. &lt;em&gt;(And boi I'm glad I did)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/anuraghazru/status/1413166291821600770"&gt;https://twitter.com/anuraghazru/status/1413166291821600770&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ex0bSfaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so8snxxp829fbimb5fcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ex0bSfaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so8snxxp829fbimb5fcn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there goes my sweet 🥰 twitter friends creating "HIRE ANURAG CAMPAIGNS".&lt;br&gt;&lt;br&gt;
Thank you &lt;a href="https://twitter.com/siddharthkp"&gt;Sid&lt;/a&gt;, &lt;a href="https://twitter.com/VishwaMehta30"&gt;Vish&lt;/a&gt;, &lt;a href="https://twitter.com/saurabhcodes"&gt;Saurabh&lt;/a&gt; it was very wholesome :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVR3jHpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m0014zo9hs6z46rx416.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVR3jHpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m0014zo9hs6z46rx416.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now the interesting story out of the way, let's talk about the interview experience. &lt;br&gt;
So there was a lot of queries about the interview process at razorpay from folks.&lt;/p&gt;

&lt;p&gt;So the first thing which I really liked about the interview process is that you will immediately be given a "Interview Preparation Guide - FE Engineer" document which will have everything you need to know about the whole process, &lt;br&gt;
I cannot say enough how useful that document was.&lt;/p&gt;

&lt;p&gt;It had information about the Razorpay's Philosophy, the interview rounds and what to expect from the each round and evaluation criteria for each round, also few handy interview tips.&lt;/p&gt;

&lt;p&gt;First I had a catch-up call with Kamlesh it wasn't part of the interview but just to give me a general idea of what I'm going into we decided to have a call and Kamlesh discussed with me about the structure and the business model and what they are doing at Razorpay, It was a great insight and after that I decided to move forward with the real interviews.&lt;/p&gt;

&lt;p&gt;First I got a call from the recruiter about the schedule and you will get daily reminders before each interview from the recruiter.&lt;br&gt;
And after clearing every round you will get call from the recruiter for the next one. &lt;/p&gt;

&lt;p&gt;He scheduled the first interview.&lt;/p&gt;

&lt;p&gt;Let's start with the rounds then. In total there was 4 interview rounds:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Round 1 (1 Hour) Technical Deep Dive&lt;/li&gt;
&lt;li&gt;Round 2 (1.5 Hour) Coding Round&lt;/li&gt;
&lt;li&gt;Round 3 (1 Hour) Web Fundamentals&lt;/li&gt;
&lt;li&gt;Round 4 (1 Hour) Hiring Manager Round&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#round-1-1-hour-technical-deep-dive"&gt;
  &lt;/a&gt;
  Round 1 (1 Hour) Technical Deep Dive
&lt;/h2&gt;

&lt;p&gt;This round heavily focuses on discussions about your own projects (any project) and your work experience.&lt;/p&gt;

&lt;p&gt;I was asked about my work experience at timelessco and what projects I worked on, we talked a lot about the design system &amp;amp; component library I was building at timeless.&lt;/p&gt;

&lt;p&gt;It was like a discussion about the project on how it works, what challenges I faced building it, what things I liked about the projects.&lt;/p&gt;

&lt;p&gt;We also talked about my open source projects, we talked about github-readme-stats and BugVilla.&lt;/p&gt;

&lt;p&gt;Interviwer asked me &lt;strong&gt;"What are the challenges you faced building BugVilla"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I answered, and discussed about how I had to &lt;a href="https://github.com/anuraghazra/BugVilla/pull/3/commits/2b878a35601f2c94993efcf28a9a614e5b389310"&gt;rewrite the whole redux state&lt;/a&gt; management code to add optimistic updates and to fix the laggy behaviour because of wrongly structured state of the application.&lt;/p&gt;

&lt;p&gt;it was a pretty chilling experience and discussion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Study your past projects to get a refresher on your memory before going into this round&lt;/li&gt;
&lt;li&gt;Brag a lot about your projects&lt;/li&gt;
&lt;li&gt;Don't hesitate to say you wrote a bad piece of code&lt;/li&gt;
&lt;li&gt;Justify your answers/approach to solving the problem clearly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#round-2-15-hour-coding-round"&gt;
  &lt;/a&gt;
  Round 2 (1.5 Hour) Coding Round
&lt;/h2&gt;

&lt;p&gt;This round is a typical coding round it will be on codesandbox.io and you can choose any framework/language to solve the given problem.&lt;/p&gt;

&lt;p&gt;Unlike other companies where you will be given to revert a binary tree, at razorpay you will only get real-world problems to solve. Which is :chefkiss:&lt;/p&gt;

&lt;p&gt;For me this round was more like "pair-programming" than "coding-test",&lt;br&gt;&lt;br&gt;
Interviewer will not just sit around watch you type code, interviewer will also give you hints, tips and discuss the problem with you.&lt;/p&gt;

&lt;p&gt;My question statement was a medium difficulty task, it was carefully created to test your understanding of basic to advanced concepts in FrontEnd development. &lt;/p&gt;

&lt;p&gt;Although it was pretty straightforward (spoiler, but I messed it up) I started explaining what I will do and took some time to plan my approach.&lt;/p&gt;

&lt;p&gt;After that I started implementing one of the core part of the logic where I kinda mess things up, I decided to go with a typical old school approach to the problem but not to mention It did not worked very well, it was kinda broken and I could not deliver the whole thing, but I wasn't too afraid or nervous because it was a fun learning experience for me.&lt;/p&gt;

&lt;p&gt;After finishing the half-baked demo my interviewer asked &lt;strong&gt;"Anurag, how else can you solve this problem?"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just after hearing that question my mind blowed and I got the idea which I totally missed.&lt;/p&gt;

&lt;p&gt;I proposed my solution but since we did not had time I could not implement it.&lt;/p&gt;

&lt;p&gt;Now you might say &lt;em&gt;"Woooww Anurag you totally messed this up!"&lt;/em&gt;&lt;br&gt;&lt;br&gt;
Yes I did, but the cool thing about this interview is that they aren't looking for solid solutions from you, they just want to test out your thought process and approach to solving the problem by thinking it in logical way.&lt;/p&gt;

&lt;p&gt;Even though I could not deliver the solution I was able to come up with the solution and approached the problem in a logical manner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Think out loud, convey all your thought process to the interviewer so that   they know you are solving it in a logical way.&lt;/li&gt;
&lt;li&gt;Ask questions about the problem statement.&lt;/li&gt;
&lt;li&gt;Plan before you write the code, don't jump into it directly.&lt;/li&gt;
&lt;li&gt;If you are stuck discuss with the interviewer about the problem and explain it   to him.&lt;/li&gt;
&lt;li&gt;If you could not deliver the solution at least think of few different approaches to the problem and propose that to interviewer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#round-3-1-hour-web-fundamentals"&gt;
  &lt;/a&gt;
  Round 3 (1 Hour) Web Fundamentals
&lt;/h2&gt;

&lt;p&gt;This is also a discussion based round where you will be asked various open-ended questions like "How to build X feature", "How X works in Y"&lt;/p&gt;

&lt;p&gt;I just loved this session!! It was like two engineers discussing on how something works. You won't believe how much I learned from this one interview, it was very insightful and learned a lot.&lt;/p&gt;

&lt;p&gt;I got asked about 4 or 5 questions all of which were interconnected to one another.&lt;/p&gt;

&lt;p&gt;First question was pretty straight forward and I had experience with it so I explained it pretty well.&lt;/p&gt;

&lt;p&gt;Then the second question was bit more tricky, there was a few more interconnected questions about web fundamentals and how the web works.&lt;/p&gt;

&lt;p&gt;It was a such a information packed session that I felt knowledgeable after leaving that interview session. 🤯&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Just discuss your thoughts clearly.&lt;/li&gt;
&lt;li&gt;You are also the interviewer, so ask questions.&lt;/li&gt;
&lt;li&gt;Focus and study fundamentals of how web works.&lt;/li&gt;
&lt;li&gt;break down problems into smaller chunks and explain them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#round-4-1-hour-hiring-manager-round"&gt;
  &lt;/a&gt;
  Round 4 (1 Hour) Hiring Manager Round
&lt;/h2&gt;

&lt;p&gt;This round was also a discussion based one, but it was more like a culture fitment round, there was lots of small questions about my own work experience in my previous firm, the teams, how we worked and my day to day work at timeless.&lt;/p&gt;

&lt;p&gt;This round mostly focuses on my:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to resolve conflicts in the team&lt;/li&gt;
&lt;li&gt;Decision making ability&lt;/li&gt;
&lt;li&gt;Which time management method I like most (I like macro management)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were specific questions like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"If a team member proposed a solution which you don't agree with (vice versa) in that case what will you do"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were also behavioural questions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"What motivates you most and what is the one feature which you built you are not proud of?"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interviewer will also explain to you about how the work happens and various things about razorpay. &lt;br&gt;
This is the best chance to clear up any org specific questions if you have.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Be honest and be "you" because you have to work with a team seamlessly in day-to-day life.&lt;/li&gt;
&lt;li&gt;Be rational about your thought process and answer the questions correctly.&lt;/li&gt;
&lt;li&gt;if you don't have the experience to answer the question, just say "I don't have the experience but If i was in that situation I will do...this that and that..".&lt;/li&gt;
&lt;li&gt;Ask lot of questions.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;And that's it folks! Thanks for reading all the way through.&lt;/p&gt;

&lt;p&gt;My interview experience at razorpay was super smooth and I felt like I could give another 5 rounds without any issue. It was relaxing and a fun learning experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h3&gt;

&lt;p&gt;You will not be the only person learning from the interview, It is a both side interview.&lt;/p&gt;

&lt;p&gt;If interviewer asks you 10 questions, you should also ask 10 questions. Do &lt;a href="https://github.com/viraptor/reverse-interview/"&gt;reverse interview&lt;/a&gt;!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask questions.&lt;/li&gt;
&lt;li&gt;Think out loud.&lt;/li&gt;
&lt;li&gt;Plan your approach.&lt;/li&gt;
&lt;li&gt;Make sure you have projects to showcase and brag about.&lt;/li&gt;
&lt;li&gt;Don't be nervous, take the interviews as a fun learning experience :).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this writeup will help you pass your next interview at Razorpay (hope to see you soon in the team)&lt;/p&gt;

&lt;p&gt;I would like to thank you the wonderful onboarding and interview team at razorpay and especially Kamlesh, he guided me through the whole process and even gave me personal guidance on career.  &lt;/p&gt;

&lt;p&gt;Finally also like to thank you timeless.co for being so nice and respecting my decision.&lt;/p&gt;

&lt;p&gt;Thanks! Bye!&lt;/p&gt;

</description>
      <category>interview</category>
      <category>job</category>
      <category>career</category>
    </item>
    <item>
      <title>Top 3 best Laravel CRM Packages</title>
      <author>sanjanasingh</author>
      <pubDate>Wed, 25 Aug 2021 16:38:53 +0000</pubDate>
      <link>https://dev.to/sanjanasingh202/top-3-best-laravel-crm-packages-3e13</link>
      <guid>https://dev.to/sanjanasingh202/top-3-best-laravel-crm-packages-3e13</guid>
      <description>&lt;p&gt;There are many CRM platforms available in the market.&lt;a href="https://daybydaycrm.com/"&gt;DayBydayCRM&lt;/a&gt;, &lt;a href="https://laraadmin.com/"&gt;LaraAdmin&lt;/a&gt;, &lt;a href="https://krayincrm.com/"&gt;Krayin&lt;/a&gt; are Top 3 Laravel open source CRM packages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laravel&lt;/strong&gt; is the most popular PHP framework nowadays due to its simplicity, clearity and flexibility that make projects more secure and scalable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#daybydaycrm"&gt;
  &lt;/a&gt;
  DayByDayCRM:-
&lt;/h2&gt;

&lt;p&gt;DayByDay CRM is an open source CRM system written in PHP Laravel.&lt;br&gt;
The platform allows you to easily &lt;strong&gt;create projects&lt;/strong&gt; and assign them to clients and users.&lt;/p&gt;

&lt;p&gt;DayByDayCRM github Repository:&lt;a href="https://github.com/Bottelet/DaybydayCRM"&gt;https://github.com/Bottelet/DaybydayCRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWSbDv1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://daybydaycrm.com/clients_overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWSbDv1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://daybydaycrm.com/clients_overview.png" alt="DayByDayCRM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The platform provides Lead Control features so that you and your team will not forget to follow up with the clients and DayByDay CRM collects all the important notes from previous meetings and details about the clients.&lt;/p&gt;

&lt;p&gt;It offers many other features like &lt;strong&gt;task control&lt;/strong&gt;, &lt;strong&gt;user access&lt;/strong&gt;, managing contracts and documents and many more.&lt;/p&gt;

&lt;p&gt;DayByDay CRM Live Demo:-&lt;a href="https://demo.daybydaycrm.com/login"&gt;https://demo.daybydaycrm.com/login&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laraadmin"&gt;
  &lt;/a&gt;
  LaraAdmin
&lt;/h2&gt;

&lt;p&gt;LaraAdmin is a Open source CRM for easily starting Admin applications with features available like Advanced CRUD Generation, Schema Manager and Workflows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GmBIaimc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://laraadmin.com/img/laraadmin/laraadmin-row-view.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmBIaimc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://laraadmin.com/img/laraadmin/laraadmin-row-view.jpg" alt="LaraAdmin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LaraAdmin Github Repository:&lt;a href="https://github.com/dwijitsolutions/laraadmin-crm"&gt;https://github.com/dwijitsolutions/laraadmin-crm&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#krayin"&gt;
  &lt;/a&gt;
  Krayin:-
&lt;/h2&gt;

&lt;p&gt;Laravel CRM helps to manage your business more effectively. Krayin CRM is powerful software that connects all the data from sales leads and customers all in one place.&lt;/p&gt;

&lt;p&gt;Krayin Github Repository:-  &lt;a href="https://github.com/krayin/laravel-crm"&gt;https://github.com/krayin/laravel-crm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It offers functionality like &lt;a href="https://krayincrm.com/how-to-create-leads-in-krayin-crm/"&gt;Lead Management&lt;/a&gt;, &lt;strong&gt;Activities Management&lt;/strong&gt;, &lt;strong&gt;ACL system&lt;/strong&gt; and Contact Management, Custom Fields and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTSrFPW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://krayincrm.com/wp-content/themes/krayincrm/images/webp/krayin-lead.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTSrFPW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://krayincrm.com/wp-content/themes/krayincrm/images/webp/krayin-lead.webp" alt="Krayin CRM Software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Krayin is very flexible and easy to use even for non-tech savvies and as It is open source project customization can be done very easily even at the core level too.&lt;/p&gt;

&lt;p&gt;Krayin Live Demo:- &lt;a href="https://demo.krayincrm.com/admin/login"&gt;https://demo.krayincrm.com/admin/login&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KrayinCRM offers Kanban view displays so that leads can be organized based on their stages to give an idea of their progress and how much revenue is expected to be generated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let us know your thought on the above CRM system in comments below&lt;/em&gt;&lt;/p&gt;

</description>
      <category>laravelcrm</category>
      <category>opensourcecrm</category>
      <category>crm</category>
    </item>
  </channel>
</rss>
