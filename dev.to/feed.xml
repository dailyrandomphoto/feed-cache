<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Python used for? (All applications today)

</title>
      <author>ltcbuzy</author>
      <pubDate>Tue, 28 Dec 2021 01:21:13 +0000</pubDate>
      <link>https://dev.to/ltcbuzy/what-is-python-used-for-all-applications-today-hd2</link>
      <guid>https://dev.to/ltcbuzy/what-is-python-used-for-all-applications-today-hd2</guid>
      <description>&lt;p&gt;What else do Google, YouTube, Instagram, Reddit and Spotify have in common besides being some of the world's most popular software services? True: they all use Python.&lt;/p&gt;

&lt;p&gt;Python is everywhere. You can not even imagine how wide it is. Most importantly, Python is easy to learn, easy to read and easy to write. It also has a high development speed without compromising reliability or scalability.&lt;/p&gt;

&lt;p&gt;Thanks to the high demand for Python, it is well supported and very popular.&lt;/p&gt;

&lt;p&gt;But what exactly is Python used for? Which technology or business does Python benefit the most from? If you want to get into any of the following areas, consider whether or not you want to choose Python to develop your technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-for-web-development"&gt;
  &lt;/a&gt;
  Python for web development
&lt;/h2&gt;

&lt;p&gt;In the current market there may be a business without a website. In addition, this trend is looking for more and more impressive web applications, which include the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perfect mobile and desktop versions&lt;/strong&gt;&lt;br&gt;
Asymmetric layout&lt;br&gt;
Progressive web applications&lt;br&gt;
Integrated animations&lt;br&gt;
ML chatbots&lt;br&gt;
Today, more than ever, it's important to choose the right tools when building (or possibly rebuilding) your website or web application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-python-for-web-development"&gt;
  &lt;/a&gt;
  Benefits of Using Python for Web Development
&lt;/h2&gt;

&lt;p&gt;There are many benefits to Python that will help you get great results in web development fast:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Python has a large collection of pre-built libraries for almost anything . For example, libraries for scientific computing, image processing, data processing, machine learning, deep learning, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2- Python code takes less time to write due to its simple and clear syntax. Because of this, the code written in Python can build prototypes very well and quickly.&lt;/p&gt;

&lt;p&gt;3- Python accelerates ROI of commercial projects. The reason for this is similar to the previous point: you can write and send your code faster. This is especially important for startups.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Python has a built-in framework for unit testing. This helps you send bug-free code. In addition to the standard features of Python, one of its most important strengths in web development is the variety of web frameworks offered.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With a wide selection of well-supported frameworks, you can find the right starting point for any project. Python provides you with the tools to do the job with confidence:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-and-outofthebox-implementation-solutions"&gt;
  &lt;/a&gt;
  Quick and out-of-the-box implementation solutions
&lt;/h2&gt;

&lt;p&gt;Solutions that require the cooperation of many specialized micro services&lt;br&gt;
A program whose performance is very important&lt;br&gt;
Top Python Web Frameworks&lt;br&gt;
Django: Python's most extensive web framework - at least until recently. The Django trademark is complete because it aims to provide all the tools needed to build a web application in a single package. This is a good option if your program is relatively standard, as it allows you to search through the basics and find an efficient solution faster.&lt;/p&gt;

&lt;p&gt;Flask: Compared to Django, Flask focuses much more on minor services, which may be the reason for its new No. 1 popularity based on JetBrains. Unlike Django, which is all in one package, Flask works more like glue, allowing you to blend libraries together. Flick throws itself well into a repetitive approach to adding new features and services "once in a while."&lt;/p&gt;

&lt;p&gt;Bottle: Bottle is another framework that prefers to ignore the fact that it overshadows the user with anything else it may need. This framework is lightweight and has no external dependencies other than the standard Python library (stdlib). Great for prototyping, as a learning tool, or for building and running simple personal web applications.&lt;/p&gt;

&lt;p&gt;Pyramid: Pyramid perfection comes from the legacy of two previous frameworks: Pylons and repoze.bfg.Now, which are now integrated into Pyramid. Pylons was one of Python's top frameworks. The most important advantage of Pyramid over Django is that it is very easy to customize, while Django is more "thoughtful". This makes Pyramid a great choice for non-standard projects that can be more complex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-for-internet-of-things-iot"&gt;
  &lt;/a&gt;
  Python for Internet of Things (IoT)
&lt;/h2&gt;

&lt;p&gt;Depending on your point of view, the Internet of Things can be understood differently. Because of this explanation, suppose we are talking about physical objects in an embedded system that the system connects to the Internet.&lt;/p&gt;

&lt;p&gt;These "objects" now have their own IP address and can communicate with other "objects" remotely or locally using the network. The IoT is often involved in projects involving wireless sensor networks, data analysis, cyber physical systems, big data, and machine learning. In addition, IoT projects often involve real-time analysis and processes.&lt;/p&gt;

&lt;p&gt;Ideally, your programming language for an IoT project should already be a powerful choice for the above areas, yet light and scalable. Python meets these criteria very well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-python-for-iot"&gt;
  &lt;/a&gt;
  Advantages of using Python for IoT
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The popularity of Python is a significant asset. The language is supported by a large and useful community, which has led to the creation of a large collection of pre-written libraries and easier implementation and deployment of work solutions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2- Python is portable, expandable and embedded. This makes Python independent of the system and allows it to support many of the computers on the market, regardless of architecture or operating system.&lt;/p&gt;

&lt;p&gt;Python is great for managing and organizing complex data. This is especially useful for IoT systems, which are particularly heavy data.&lt;/p&gt;

&lt;p&gt;4- Learning Python is easy without forcing you to get acquainted with many formatting standards and options. The most immediate result of this is faster results.&lt;/p&gt;

&lt;p&gt;5- Python code is compact and easy to read thanks to its clean syntax. This is useful on small devices with limited memory and computing power. In addition, syntax is partly responsible for Python's growing popularity, and is further strengthening its community.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python's close connection to scientific computing has paved the way for the development of IoT. If a social scientist or biologist wants to create a program for his or her smart device in the lab, they will be happy to use their favorite language. In most cases, this language will be Python, because this technology has become scientific computing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python is the language of choice for the Raspberry Pi. This is important because the Raspberry Pi is one of the most popular microcontrollers on the market.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python provides tools that simplify the IoT development process, such as webrepl. This option allows you to use your browser to execute Python code for IoT. In addition, the mqtt messaging protocol allows you to update your code or configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because Python is an interpretive language, you can easily test your solution without compiling code or flashing the device. Using a C program, you have to compile the code on your PC, then upload it to your "object". Python allows you to enter directly into the interpreter about your "object", and this experiment makes different solutions easier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS provides the Python SDK for AWS IoT. Think of it as a cherry on top of a delicious cake right now.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-tools-are-available-for-python-in-the-iot"&gt;
  &lt;/a&gt;
  What tools are available for Python in the IoT?
&lt;/h2&gt;

&lt;p&gt;Raspberry Pi&lt;/p&gt;

&lt;p&gt;C: \ Users \ Mr \ Desktop \ aaaa.jpg&lt;br&gt;
Have you ever seen an interesting IoT project on the web? If so, you've probably seen the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;Raspberry Pi:&lt;/p&gt;

&lt;p&gt;It is small (85 mm 56 mm for Raspberry Pi 3).&lt;br&gt;
Consumes very little energy.&lt;br&gt;
Equipped with USB ports, HDMI port, Ethernet port and Micro SD support.&lt;br&gt;
Most importantly, the software has Linux on board, which means it also uses Python, making Raspberry Pi encryption easy and portable. The Raspberry Pi is a super-versatile device that you can use to build anything: media center, operating system gaming device, time-lapse camera, robot controller, FM radio station, web server, system Security with motion capture, Twitter robot, small desktop computer. It is also one of the most popular tools for teaching programming.&lt;/p&gt;

&lt;p&gt;The Raspberry Pi is an incredibly versatile device that you can use to make anything:&lt;/p&gt;

&lt;p&gt;Media Center,&lt;br&gt;
Gaming machine integration with the operating system,&lt;br&gt;
Camera over time,&lt;br&gt;
Controller robot&lt;br&gt;
FM radio station,&lt;br&gt;
Web server,&lt;br&gt;
Security system with motion capture,&lt;br&gt;
Twitter robot,&lt;br&gt;
Small desktop computer.&lt;br&gt;
It is also one of the most popular tools for teaching programming.&lt;/p&gt;

&lt;p&gt;MicroPython&lt;/p&gt;

&lt;p&gt;C: \ Users \ Mr \ Desktop \ micropython.png__730x250_q85_crop_subsampling-2_upscale.png&lt;br&gt;
When it comes to Python solutions for the IoT, it is no smaller than the MicroPython: a small microcontroller to run Python on a screen that is only a few square inches in size.&lt;/p&gt;

&lt;p&gt;This set includes a bundle, so if you are just starting IoT with Python, you no longer need to look for more.&lt;/p&gt;

&lt;p&gt;One of the most attractive features of MicroPython is WebREPL (Read-Evaluation-Print Loop), which is similar to the command line and is accessible through a web page. Using WebREPL, you can run Python code on an IoT device using a simple terminal in your browser without the need for a serial connection.&lt;/p&gt;

&lt;p&gt;To sweeten this deal, you do not need to connect the board to WiFi, because it can create your own network.&lt;/p&gt;

&lt;p&gt;Zerynth&lt;/p&gt;

&lt;p&gt;C: \ Users \ Mr \ Desktop \ zerynth.png__730x250_q85_crop_subsampling-2_upscale.png&lt;/p&gt;

&lt;p&gt;Zerynth is hailed as an "IoT and Industry 4.0 intermediary".&lt;/p&gt;

&lt;p&gt;It provides developers with a complete ecosystem of tools including IDE, development tools, real-time RTOS, device manager, and mobile-friendly application for monitoring and controlling Zerynth-enabled devices.&lt;/p&gt;

&lt;p&gt;Zerynth accelerates IoT development by allowing you to write articles in Python or a combination of C and Python.&lt;/p&gt;

&lt;p&gt;You can use Zerynth to program the most popular 32-bit microcontrollers, connect them to the Cloud infrastructure, and run your devices with the latest firmware versions of Over-the-Air. It is also fully compact and requires only 60-80 KB of flash and 5-5 KB of RAM.&lt;/p&gt;

&lt;p&gt;Home Assistant&lt;/p&gt;

&lt;p&gt;C: \ Users \ Mr \ Desktop \ home_assistant.png__730x250_q85_crop_subsampling-2_upscale.png&lt;/p&gt;

&lt;p&gt;Home Assistant is an open source Python project for smart home automation. You can install it on your PC or Raspberry Pi.&lt;/p&gt;

&lt;p&gt;Home Assistant works automatically; For example, it can control the lights in your home and measure the temperature of each room.&lt;/p&gt;

&lt;p&gt;In addition, Home Assistant is compatible with a variety of drivers and sensors.&lt;/p&gt;

&lt;p&gt;Python for machine learning (ML)&lt;br&gt;
Machine learning is the newest field in the world of software development. Due to its seemingly limitless possibilities, it is regularly and correctly increasing in popularity. The idea that computers can actively learn instead of working according to written rules is very exciting. This offers a completely new approach to problem solving.&lt;/p&gt;

&lt;p&gt;Python is at the forefront of machine learning. Numerous studies have clearly welcomed Python as the most popular language for machine learning and data science. But why is that? What is the secret of Python?&lt;/p&gt;

&lt;p&gt;Advantages of using Python for ML&lt;br&gt;
There are several reasons why Python is the best way to learn a car:&lt;/p&gt;

&lt;p&gt;Python syntax is efficient and accurate;&lt;br&gt;
Python has a low entry point.&lt;br&gt;
Python integrates well with other programming languages.&lt;br&gt;
But here's another argument for Python, which is more about machine learning than anything else: Extensive open source library support.&lt;/p&gt;

&lt;p&gt;Top Python Libraries for Machine Learning&lt;br&gt;
Python is especially famous for its many libraries, especially for data science. This is the main reason Python is considered as a machine learning solution. Here are some of the most popular Python libraries for machine learning.&lt;/p&gt;

&lt;p&gt;scikit-learn&lt;/p&gt;

&lt;p&gt;C: \ Users \ Mr \ Desktop \ scikit-learn.png__730x250_q85_crop_subsampling-2_upscale.png&lt;/p&gt;

&lt;p&gt;Scikit-Learn is the best known Python library used for machine learning. scikit-Learn is built using SciPy and NumPy and is designed to interact with them. Open source, accessible to all and reusable in a number of areas.&lt;/p&gt;

&lt;p&gt;This library has a variety of algorithms: classification, regression, clustering, dimensionality reduction, model selection, and preprocessing. These algorithms include: support vector machines (SVM), random forests, gradient boosting, K-means and DBSCAN.&lt;/p&gt;

&lt;p&gt;scikit-Learn provides options, the data mining and data analysis tools provided are simple and efficient.&lt;/p&gt;

&lt;p&gt;TensorFlow&lt;/p&gt;

&lt;p&gt;TensorFlow was originally developed by Google engineers and researchers to meet their needs for a system that can detect and train neural networks to find relationships and patterns. This process is designed in the same way that humans reason and learn.&lt;/p&gt;

&lt;p&gt;The flexible, high-performance architecture of the open source library makes numerical computing easy across multiple operating systems, from desktops to server clusters to mobile devices.&lt;/p&gt;

&lt;p&gt;TensorFlow is used by companies like Uber, Dropbox, eBay, Snapchat or Coca Cola.&lt;/p&gt;

&lt;p&gt;nilearn&lt;/p&gt;

&lt;p&gt;C: \ Users \ Mr \ Desktop \ nilearn.png__730x250_q85_crop_subsampling-2_upscale.png&lt;/p&gt;

&lt;p&gt;Nilearn is a high-level Python library for easy and fast statistical learning of neural imaging data. This library learns from scikit-learn due to its advanced machine learning techniques, such as pattern recognition or multivariate statistics. Its applications include prediction modeling and connection analysis.&lt;/p&gt;

&lt;p&gt;The engineering of domain-specific features has the highest nilearn value for machine learning professionals. This means shaping neural imaging data into a matrix of features suitable for statistical learning or other methods.&lt;/p&gt;

&lt;p&gt;mlpy&lt;/p&gt;

&lt;p&gt;C: \ Users \ Mr \ Desktop \ mlpy.png__730x250_q85_crop_subsampling-2_upscale.png&lt;/p&gt;

&lt;p&gt;Mlpy is a high-performance Python library for predictive modeling built on top of SciPy, NumPy, and GNU Scientific Libraries. It is multimedia and open source. mlpy offers a wide range of pioneering approaches to provide solutions to supervised and unsupervised problems.&lt;/p&gt;

&lt;p&gt;Finding a reasonable compromise between efficiency, modularity, reproducibility, maintainability and usability is the main goal of mlpy.&lt;/p&gt;

&lt;p&gt;Python for supervised learning&lt;br&gt;
Supervised machine learning is one of the applications of artificial intelligence. In supervised learning, an algorithm learns from a tagged data set whose output is already known. The two main methods in this group are classification and regression.&lt;/p&gt;

&lt;p&gt;Classification is used to classify data into arbitrary and discrete classes and to predict discrete values, which can help assess validity or aid in medical diagnosis.&lt;/p&gt;

&lt;p&gt;Regression is used in matters involving continuous numbers, including demand and financial forecasting, as well as property price estimation. The predicted result here is a numerical value estimate.&lt;/p&gt;

&lt;p&gt;Classification and regression problems thanks to a large number of Python libraries, including:&lt;/p&gt;

&lt;p&gt;scikit-Learn (backup vector machines, linear and quadratic discriminant analysis, nearest neighbor algorithms, simple Bayesian classifier, decision tree, ensemble methods, etc.);&lt;br&gt;
TensorFlow;&lt;br&gt;
Keras;&lt;br&gt;
PyTorch;&lt;br&gt;
Caffe2 (deep learning);&lt;br&gt;
XGBoost;&lt;br&gt;
CatBoost;&lt;br&gt;
LightGBM (tilt booster).&lt;br&gt;
Python for reinforcement learning&lt;br&gt;
In machine learning without supervision, this algorithm relies on its ability to solve problems after accessing unlabeled datasets without training instructions and known results.&lt;/p&gt;

&lt;p&gt;Clustering and matrix factorization are two common methods of machine learning. Both methods are often used in customer and referrer classification systems, based on the similarity between object properties, both methods are used to group elements.&lt;/p&gt;

&lt;p&gt;Some of the most popular libraries used in clustering and recommendation system engines are:&lt;/p&gt;

&lt;p&gt;Surprise (Neighbor-centric methods, SVD, PMF, SVD ++, NMF)&lt;br&gt;
LightFM (Description of Combined Hidden Representation with Matrix Factoring)&lt;br&gt;
Spotlight (uses PyTorch to build suggested models)&lt;br&gt;
Python for reinforcement learning&lt;br&gt;
Reinforcement learning algorithms learn to modify their behavior to make the right decisions after receiving feedback. They have been tested in self-paced solutions, including video games and traffic light control systems.&lt;/p&gt;

&lt;p&gt;Problems with reinforcement learning are often specific and finding solutions to them can be quite challenging. These Python libraries can help you:&lt;/p&gt;

&lt;p&gt;Keras-RL (Deep Boost Learning for Cross)&lt;br&gt;
TensorForce (TensorFlow Library for Applied Reinforcement Learning)&lt;br&gt;
(Coach (NAF, DQN, DFP and &lt;a href="https://visual-effects-29030.netlify.app/"&gt;netlify&lt;/a&gt;others)&lt;br&gt;
Python for Fintech&lt;br&gt;
While Python may not be a new technology, its growing popularity among hedge funds and the investment banking industry is a recent development. But the fact that Python is the fastest language in finance should come as no surprise.&lt;/p&gt;

&lt;p&gt;If your company wants to enter the world of fintech, you need a programming language that has high performance, easy scalability and maturity. The technical stack you choose must also have ready-made solutions and many libraries to get back to it. This allows Python and fintech to have a good relationship.&lt;/p&gt;

&lt;p&gt;Advantages of using Python for fintech&lt;br&gt;
Hedge Funds and the investment banking industry have long decided that Python is an ideal choice for fintech because it meets many of their very specific needs:&lt;/p&gt;

&lt;p&gt;Creating risk management and trading platforms;&lt;br&gt;
Solve the rate problem a bit;&lt;br&gt;
Adjust information, adaptation and data analysis using the abundance of Python libraries.&lt;br&gt;
Why choose Python for your fintech software product?&lt;br&gt;
Fintech belongs to Python for a variety of reasons:&lt;/p&gt;

&lt;p&gt;Clean syntax: Python code is very easy to understand because it looks like real English. This allows developers to learn it quickly and master it in a short amount of time.&lt;br&gt;
Fast for the market: Python is a dynamic language and progresses faster than static languages ​​like Java. When writing in Python, you need less code, which in turn allows for faster deployment.&lt;br&gt;
Useful Libraries: Python serves a wide range of purposes with a wide range of libraries. Many of these are great for fintech and finance.&lt;br&gt;
Do you need an algorithmic trading library? Try pyalgotrade. A library for scientific and technical calculations? There is SciPy. What about the little economy? Check quantecon.py. Any questions you have are answered in Python.&lt;/p&gt;

&lt;p&gt;The last word&lt;br&gt;
Python programs are numerous and have many benefits. Great for many other things like web development, IoT, machine learning, startups and fintech. We have discussed in detail why Python is suitable for all of these purposes. However, a quick recap says:&lt;/p&gt;

&lt;p&gt;Due to its readability and ease of use, Python allows you to optimize your development resources by writing faster code.&lt;br&gt;
Python has a clear and simple syntax that allows you to easily browse your code.&lt;br&gt;
Python gives you ready-made and tested frameworks and libraries instead of building everything you need from scratch;&lt;br&gt;
Python offers extensive support for a variety of tutorials and guides as well as a strong and thriving community of enthusiasts.&lt;br&gt;
Python is used by tech giants like Google, YouTube or Reddit, so if they trusted Python, there's no reason why you shouldn't trust it.&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Live Virtual Career Prep Events to Help You Get Your First Dev Job</title>
      <author>Lane Wagner</author>
      <pubDate>Tue, 28 Dec 2021 01:13:55 +0000</pubDate>
      <link>https://dev.to/wagslane/live-virtual-career-prep-events-to-help-you-get-your-first-dev-job-2gji</link>
      <guid>https://dev.to/wagslane/live-virtual-career-prep-events-to-help-you-get-your-first-dev-job-2gji</guid>
      <description>&lt;p&gt;Over on the Qvault community Discord server we're starting a new initiative; we're doing &lt;em&gt;free live events&lt;/em&gt; focused on getting you your first dev job!&lt;/p&gt;

&lt;p&gt;For background, I've been running &lt;a href="https://qvault.io"&gt;Qvault.io&lt;/a&gt; for over a year now, and while people are loving the courses, we've started offering more personalized help surrounding "first job" challenges, and our attendees are loving it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#im-hosting-these-free-educational-events-on-a-weekly-basis-now-and-id-love-to-see-you-at-them"&gt;
  &lt;/a&gt;
  I'm hosting these free educational events on a weekly basis now, and I'd love to see you at them!
&lt;/h2&gt;

&lt;p&gt;Tomorrow (Dec 28th), we'll be talking about how to write cleaner code through variable naming techniques. We've already done two resume workshops where you bring your resume and I help you improve it. I plan to do more events of both kinds in the coming weeks.&lt;/p&gt;

&lt;p&gt;Anyhow, like I mentioned, these events are totally free, so take advantage of this resource!&lt;/p&gt;

&lt;p&gt;A bit about me - I'm the head of engineering at a Bay Area startup, and have a passion for helping new devs find their first opportunities!&lt;/p&gt;

&lt;p&gt;Link to the event: &lt;a href="https://discord.gg/bkxvQ4Ct?event=923213296948113409"&gt;https://discord.gg/bkxvQ4Ct?event=923213296948113409&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>android</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 5 Python Modules for Game development 2022</title>
      <author>Ashish Yadav</author>
      <pubDate>Tue, 28 Dec 2021 00:50:38 +0000</pubDate>
      <link>https://dev.to/expoashish/top-5-python-modules-for-game-development-2022-3351</link>
      <guid>https://dev.to/expoashish/top-5-python-modules-for-game-development-2022-3351</guid>
      <description>&lt;p&gt;In this blog we are going to see top 5 Python modules for game development in 2022. If you want to develop game using python then you can try these modules. If you like my post then follow me. Lets Start:-👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-python-frameworks-for-game.html"&gt;Top 5 Python Modules for Game development 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-free-blogging-sites-in-2022.html"&gt;Best Websites for Blogging&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/speed-up-your-laravel-website-super-fast.html"&gt;Speed Up Your Laravel website Super Fast&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-python-frameworks-for-game.html"&gt;Top 5 Python Frameworks for Game development 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/what-is-pykyra-in-python-programming.html"&gt;What is Pykyra in Python Programming?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>gamedev</category>
      <category>programming</category>
    </item>
    <item>
      <title>My thoughts on learning Web in 2021</title>
      <author>Aibol Kussain</author>
      <pubDate>Mon, 27 Dec 2021 23:04:24 +0000</pubDate>
      <link>https://dev.to/aibolik/my-thoughts-on-learning-web-in-2021-4260</link>
      <guid>https://dev.to/aibolik/my-thoughts-on-learning-web-in-2021-4260</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Note: this post is originally written in &lt;a href="https://aibolik.github.io/blog/my-thoughts-on-learning-web-in-2021"&gt;my personal blog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello, people! You probably already saw or read one of those articles like “Web developer roadmap in 2021”, “How to become a web developer”, etc. So, I also wanted to share my perspective on this topic that might be useful to some people who are at the start of their exciting journey or open some discussion with others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8e8ShWOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2ANfqoLP-mVAHW6QBIBHp7BQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8e8ShWOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2ANfqoLP-mVAHW6QBIBHp7BQ.jpeg" alt="" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Learning Web in 2021 is not a straight line (Photo by Mark König on Unsplash)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;I want to start with the most basic and the important, as well as, sometimes, overlooked part of the Web — HTML. Why overlooked? Thanks to some great JavaScript frameworks, like React, web developers frequently deal with “components” rather than HTML elements. However, it is important to understand &lt;strong&gt;semantic HTML&lt;/strong&gt; and &lt;strong&gt;accessibility&lt;/strong&gt; and many more topics. I have to admit that I kickstarted my Web Developer work with React and had to catch up with many important concepts of Web later on. Let’s go over some main of the topics here(in my opinion).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#semantic-html-and-accessibility"&gt;
  &lt;/a&gt;
  Semantic HTML and Accessibility
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://web.dev/accessible/"&gt;simple idea&lt;/a&gt; is to build a site that works for all of your users. By saying “all of your users” I mean: people with disabilities, people with different internet bandwidth, color blindness issues, device issues, or someone who just doesn’t want to(or can’t) use a mouse/keyboard. Some pretty obvious things to start with are using semantic HTML elements, such as button, input, select, nav, and more. In addition to them, you should be familiar with aria-* and role attributes, which can add additional context for users with screen readers. And even before starting the development, you can talk with your designer to use contrasting colors and also introduce dark/alternative color schema, if it is worth it. (it is a bit outside of the HTML topic, but still worth mentioning).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When I was around 10, my mouse was broken on Pentium II Windows 98 PC. Guess what I had to use to be able to navigate through my computer?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#know-your-head-tags"&gt;
  &lt;/a&gt;
  Know your “head” tags
&lt;/h4&gt;

&lt;p&gt;As the subtitle suggests, you should be familiar with what you put on your head tag. This and using the right semantic HTML elements can also affect the SEO of your website. Some meta tags can provide additional information about your website(like title, description, data for a Twitter card) and some tags can optimize your website. With the link tag, you can hint your browser to do some work before accessing some resources(prefetch, preconnect). Take some time to get familiar with them and feel free to take these low-hanging fruits for your website optimization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#know-how-your-elements-look-and-interact"&gt;
  &lt;/a&gt;
  Know how your elements look and interact
&lt;/h4&gt;

&lt;p&gt;Other than knowing your “head” tags you should be quite familiar with your main “body” tags. Especially, what do they imply and how they interact. For example, consider these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the default styling of elements(margins on paragraph, font size, and margins on h1-h6 tags, styling of anchors)&lt;/li&gt;
&lt;li&gt;interactive elements(those are accessible with TAB, like an anchor, button, etc.) and how to make one yourself&lt;/li&gt;
&lt;li&gt;other accessibility features, like outlined button&lt;/li&gt;
&lt;li&gt;transition when clicking on the anchor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are kinda basic, but you might also want to familiarize yourself with more HTML5 elements, and maybe some new elements like dialog those let you create modals out of the box.&lt;/p&gt;

&lt;p&gt;I believe there are many topics that I left not mentioning here about HTML, but I wouldn’t be able to put everything in this article. So, if I missed something important, please feel free to leave a comment or mention it tagging me on Twitter(&lt;a href="https://twitter.com/aibolik_"&gt;@aibolik_&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;When it comes to CSS, today, we already have different tools to pre- and post-process our “style code” to make our lives easier. But the essential knowledge of CSS remains the key. These are the basic concepts related to laying out elements and styling of them: box-model, positioning, responsive styles, different laying out strategies(flex, grid), transform and transition of properties, and more. But if we go a bit further, it is worth exploring these topics too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#logical-properties"&gt;
  &lt;/a&gt;
  Logical properties
&lt;/h4&gt;

&lt;p&gt;These might not be relevant to the project you are working on, but if your website supports multiple locales, which include right-to-left and/or vertical top-down layouts, you should be familiar with these properties. Shortly, these properties &lt;a href="https://web.dev/logical-property-shorthands/"&gt;adapt to the layout&lt;/a&gt; of the page. You don’t explicitly set right/left/top/bottom spacing, you set start/end spacing and the browser will take care of setting the exact side for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Alternatively, if you are working on an open-source (popular) components library, chances are that your design would also be used in websites, where they need &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/direction"&gt;“rtl”&lt;/a&gt; support.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#css-variables"&gt;
  &lt;/a&gt;
  CSS variables
&lt;/h4&gt;

&lt;p&gt;When I first heard about CSS variables, the support for them was not good. However, these days all modern browsers support this feature. At first, some might think it is similar to variables in other CSS post-processors(like LESS or SASS), however, they possess more power than you thought. You can easily rewrite them for some selector, media query, or even with JavaScript(because they are still CSS properties). They are quite useful when building (several) &lt;a href="https://web.dev/building-a-color-scheme/"&gt;color schemas&lt;/a&gt;. But they are also useful for many different things, I saw people using them in very creative ways. It is worth checking out its capabilities.&lt;/p&gt;

&lt;p&gt;Again here, CSS is another big topic in the Web world. There are also topics like typography and fonts, selector naming conventions, many different CSS frameworks, CSS-in-JS, and more. I can not cover all of them in this article, but case by case, some might be more relevant than others, and for some topics, it is enough to just have a basic understanding of the principles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;Yet another big topic and I believe the one that is more over-hyped than the other 2 pillars of the Web(thanks again to JS frameworks). Since it is a full-blown programming language it is essential to understand how it works. In addition to how JavaScript works, for Web Developer, it is essential to understand how it works in a browser context. Some points to mention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;interaction with DOM API&lt;/li&gt;
&lt;li&gt;event handling&lt;/li&gt;
&lt;li&gt;browser APIs(history, fetch, IntersectionObserver, storage APIs, and more)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascript.info/"&gt;and many many more topics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if popular JavaScript frameworks give a real boost in Web Development, the core JavaScript knowledge is still very important. Even if you start very well with some JavaScript framework, at some point you might end up not understanding how some things function. I was in that shoe, and when I was interviewed for one project where essential JavaScript knowledge was important, I failed that interview. Immediately after that interview, I decided to level up my core JavaScript knowledge and discovered the &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;“You don’t know JS”&lt;/a&gt; book series. It was a really good time investment and I highly recommend it for people who feel they have gaps in their JavaScript knowledge.&lt;/p&gt;

&lt;p&gt;This is a small portion of my thoughts regarding the Web topic. I hope to share more of my thoughts and learnings, so if you liked the content, feel free to &lt;a href="https://twitter.com/intent/follow?screen_name=aibolik_"&gt;follow me on Twitter&lt;/a&gt;, where I will share everything I write.&lt;/p&gt;

&lt;p&gt;Stay tuned and thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>web</category>
      <category>roadmaps</category>
      <category>learningwebdevelopment</category>
    </item>
    <item>
      <title>Caching with Nginx</title>
      <author>Christian Seki</author>
      <pubDate>Mon, 27 Dec 2021 22:42:15 +0000</pubDate>
      <link>https://dev.to/chseki/caching-with-nginx-2ob2</link>
      <guid>https://dev.to/chseki/caching-with-nginx-2ob2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#cache-is-your-friend-smile"&gt;
  &lt;/a&gt;
  Cache is your friend 😄
&lt;/h2&gt;

&lt;p&gt;A lot of performance issues can be improved using cache, there is a lot of tools out here but for this brief tutorial I'll choose the well-known Nginx.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-computer"&gt;
  &lt;/a&gt;
  Setup 💻
&lt;/h2&gt;

&lt;p&gt;You can clone the branch &lt;code&gt;nginx-cache&lt;/code&gt; or follow this tutorial (I'll only cover the nginx stuff)&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamseki"&gt;
        iamseki
      &lt;/a&gt; / &lt;a href="https://github.com/iamseki/dev-to"&gt;
        dev-to
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Implementations of dev.to blog posts
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#app"&gt;
  &lt;/a&gt;
  App
&lt;/h3&gt;

&lt;p&gt;I'll use an app from &lt;a href="https://dev.to/chseki/load-test-with-javascript-1f64"&gt;previous post&lt;/a&gt; of mine, which calculates the nth fibonacci result given a number. The app it self is very simple and you can see it very small piece of code from the (repository)[&lt;a href="https://github.com/iamseki/dev-to"&gt;https://github.com/iamseki/dev-to&lt;/a&gt;] that I mentioned before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  Nginx
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx/nginx.conf&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="n"&gt;/tmp/nginx/cache&lt;/span&gt; &lt;span class="s"&gt;levels=1:2&lt;/span&gt; &lt;span class="s"&gt;keys_zone=fibo_cache:10m&lt;/span&gt; &lt;span class="s"&gt;inactive=60m&lt;/span&gt; &lt;span class="s"&gt;use_temp_path=off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/fibonacci&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_cache&lt;/span&gt; &lt;span class="s"&gt;fibo_cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_cache_use_stale&lt;/span&gt; &lt;span class="s"&gt;error&lt;/span&gt; &lt;span class="s"&gt;timeout&lt;/span&gt; &lt;span class="s"&gt;http_500&lt;/span&gt; &lt;span class="s"&gt;http_502&lt;/span&gt; &lt;span class="s"&gt;http_503&lt;/span&gt; &lt;span class="s"&gt;http_504&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;X-Proxy-Cache&lt;/span&gt; &lt;span class="nv"&gt;$upstream_cache_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://api:8080/fibonacci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/hc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://api:8080/hc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx/dockerfile&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; nginx.conf /etc/nginx/nginx.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercompose"&gt;
  &lt;/a&gt;
  Docker-compose
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3000:3000"&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./cache:/tmp/nginx/cache"&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;nginx"&lt;/span&gt;
  &lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;api&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;8080:8080"&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;api"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#proving-cache-is-our-friend"&gt;
  &lt;/a&gt;
  Proving cache is our friend
&lt;/h3&gt;

&lt;p&gt;Using &lt;a href="https://k6.io/docs/"&gt;k6&lt;/a&gt; we can simulate a bunch of requests that go through Nginx and others that don't, comparing them. &lt;br&gt;
The test will reach 100 requests in the first 30 seconds(&lt;a href="https://k6.io/docs/using-k6/options/#stages"&gt;about stages in k6&lt;/a&gt;) that will randomly retrieve the nth sequence with 7 digits between (9999991 ~ 9999999) to force the usage of API resources and Nginx caching.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;k6-test.js&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SLEEP_DURATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;30s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;30s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;http_req_duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p(99)&amp;lt;100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 99% request must complete below 100ms&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NGINX_LOCAL_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_LOCAL_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8080&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;__ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NGINX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;NGINX_LOCAL_URL&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;API_LOCAL_URL&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/fibonacci/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;randomInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999991&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9999999&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SLEEP_DURATION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-clipboard"&gt;
  &lt;/a&gt;
  Running 📋
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testing with requests passing through Nginx: &lt;code&gt;k6 run k6-test.js -e API_URL='NGINX'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Testing requesting directly the API: &lt;code&gt;k6 run k6-test.js&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What if API were down ? Try it out, &lt;code&gt;docker stop api&lt;/code&gt; and run the tests above again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nginx will be able to answer some requests (maybe all, due to our scenario), cool right?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-memo"&gt;
  &lt;/a&gt;
  Conclusion 📝
&lt;/h2&gt;

&lt;p&gt;Results from Nginx:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqfrKU9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dji50vn9l6rsn6b80s3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqfrKU9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dji50vn9l6rsn6b80s3b.png" alt="Test Result - Nginx" width="880" height="22"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Results from API:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--528SaeMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q2n2ljpoow8zlwtd059.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--528SaeMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q2n2ljpoow8zlwtd059.png" alt="Test Result - API" width="880" height="21"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see, caching improves considerably the response time. Sometimes the back-end will be able to handle requests even if the API is down, when I test this feature for the first time I thought it was amazing!&lt;/p&gt;

&lt;p&gt;This is a simple example but I hope that could be helpful for people who's thinking to cache some API routes.I know this is not applicable to every scenario, but maybe can open a world of possibilities to solve performance issues without change the API it self.&lt;/p&gt;

</description>
      <category>nginx</category>
      <category>devops</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Must-Have Python Cheat Sheets</title>
      <author>images.cv</author>
      <pubDate>Mon, 27 Dec 2021 22:11:22 +0000</pubDate>
      <link>https://dev.to/imagescv/must-have-python-cheat-sheets-16an</link>
      <guid>https://dev.to/imagescv/must-have-python-cheat-sheets-16an</guid>
      <description>&lt;p&gt;Python is a programming language that has become popular in recent years. With the help of some great tools, you can do anything from data manipulation to web development faster and easier than ever before! One of these handy tools is cheat sheets. A cheat sheet gives you quick references for doing things like string manipulations or regular expressions. Check out this blog post for ten must-have Python cheat sheets to get you started with the language!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-ten-musthave-python-cheat-sheets-to-get-you-started-with-the-language"&gt;
  &lt;/a&gt;
  Here are ten must-have Python cheat sheets to get you started with the language!
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://www.dataquest.io/wp-content/uploads/2019/03/python-regular-expressions-cheat-sheet.pdf"&gt;Python Regular Expressions Cheat Sheet&lt;/a&gt;&lt;br&gt;
This cheat sheet is a great resource for anyone who needs to do string manipulations or regular expressions in Python. It includes all of the most common regex operations.&lt;/p&gt;




&lt;p&gt;&lt;a href="http://www.utc.fr/~jlaforet/Suppl/python-cheatsheets.pdf"&gt;Python for Data Science Cheat Sheet&lt;/a&gt;&lt;br&gt;
This cheat sheet is perfect for data scientists who are new to Python. It includes examples of using NumPy, Pandas, Matplotlib, and Seaborn.&lt;/p&gt;




&lt;p&gt;&lt;a href="http://www.asheesh.org/pub/pycon-2010/scraping-cheat-sheet.pdf"&gt;Python for Web Scraping Cheat Sheet&lt;/a&gt;&lt;br&gt;
This cheat sheet is a great starting point for anyone who needs to scrape websites using Python. It includes a variety of tips for scraping web pages, parsing data, and using Selenium.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://edu.anarcho-copy.org/Programming%20Languages/Python/Python%20CheatSheet/beginners_python_cheat_sheet_pcc_django.pdf"&gt;Python Django Cheat Sheet&lt;/a&gt;&lt;br&gt;
This cheat sheet is perfect for anyone who wants to learn Django, a web development framework written in Python. It includes basic syntax, templates, and common tasks.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://s3.us-east-2.amazonaws.com/prettyprinted/flask_cheatsheet.pdf"&gt;Python Flask Cheat Sheet&lt;/a&gt;&lt;br&gt;
This cheat sheet is perfect for anyone who wants to learn more about the Python web framework, Flask. It includes basic syntax, templates, and tips for common tasks.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://assets.datacamp.com/blog_assets/Numpy_Python_Cheat_Sheet.pdf"&gt;Python NumPy Cheat Sheet&lt;/a&gt;&lt;br&gt;
This cheat sheet is perfect for anyone who wants to learn more about the Python library, NumPy. It includes basic syntax and common operations for working with vectors or matrices.&lt;/p&gt;




&lt;p&gt;&lt;a href="http://datacamp-community-prod.s3.amazonaws.com/e1a8f39d-71ad-4d13-9a6b-618fe1b8c9e9"&gt;Python Matplotlib Cheat Sheet&lt;/a&gt;&lt;br&gt;
This cheat sheet is perfect for anyone who wants to learn more about the Python data visualization library, Matplotlib. It includes examples of creating graphs and plots.&lt;/p&gt;




&lt;p&gt;&lt;a href="http://datacamp-community-prod.s3.amazonaws.com/72e88aa1-b4f2-4658-9d86-15becf8263df"&gt;Python importing data cheat sheet&lt;/a&gt;&lt;br&gt;
How to import data in python including text files, databases, file systems, and more&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.edureka.co/blog/wp-content/uploads/2018/10/Jupyter_Notebook_CheatSheet_Edureka.pdf"&gt;Jupiter notebook cheat sheet&lt;/a&gt;&lt;br&gt;
How to save and load a notebook, using notebook with different programming language, widgets and more&lt;/p&gt;




&lt;p&gt;&lt;a href="https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Keras_Cheat_Sheet_Python.pdf"&gt;Keras cheat sheet&lt;/a&gt;&lt;br&gt;
Keras is an API designed for human beings, not machines. Keras follows best practices for reducing cognitive load: it offers consistent &amp;amp; simple APIs, it minimizes the number of user actions required for common use cases, and it provides clear &amp;amp; actionable error messages. It also has extensive documentation and developer guides.&lt;/p&gt;




&lt;p&gt;We hope you’ve found the Python cheat sheets useful. If there are any that we missed, please let us know! You can also visit our blog for more valuable information on programming languages and free resources to help you learn them.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>World Creator 2 - Building the World Map.</title>
      <author>matjs</author>
      <pubDate>Mon, 27 Dec 2021 21:59:48 +0000</pubDate>
      <link>https://dev.to/matjs/world-creator-2-building-the-world-map-2b</link>
      <guid>https://dev.to/matjs/world-creator-2-building-the-world-map-2b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;How is a world created? (Worldbuilding)&lt;/p&gt;

&lt;p&gt;In Worldbuilding there is two methods of creation, the first is called "top-down", where you create the world's cultures, its inhabitants, civilizations and then the geographic features, it's the option that i will try to avoid, since i want to create the world historically, so from year 0 to year i-dont-know. The other method is the first but inverted, so it's called "bottom-up", where you create the geographic features, such as continents, tectonic plates, biomes and then the cultures, civilizations and more. I will try to use the "bottom-up" method, it's just what i want. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-so-where-to-start"&gt;
  &lt;/a&gt;
  Ok, so where to start?
&lt;/h2&gt;

&lt;p&gt;I want to create a world organically, so as i'm going to use the "bottom-up" method, i will create the world terrain first and then adapt the cultures on it. So, this is the thing: i will start by creating the world terrain.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#part-1-the-terrain-generation-process"&gt;
  &lt;/a&gt;
  PART 1 - The Terrain Generation Process
&lt;/h1&gt;

&lt;p&gt;So, i've read about map generaton, a lot, and there's a very famous process called Voronoi, which uses a polygonal map structure to draw solid terrain and water, it's extremelly cool and looks good. I'll mess with that process and maybe improve that to something more polished. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1veW9qg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3blacm1cnfognhtudx0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1veW9qg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3blacm1cnfognhtudx0w.png" alt="World procedurally generated" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
This is how i want it to look like.&lt;/p&gt;

&lt;p&gt;Oh and i didn't said, but i will not code Voronoi by myself, it's a huge waste of time since there's libraries that does that and this is not a university research.&lt;br&gt;
So this is going to be a kind of side-project, a map generator for the biggest project, a fantasy world generator. Looks good for me.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#generating-the-map"&gt;
  &lt;/a&gt;
  Generating the map
&lt;/h2&gt;

&lt;p&gt;So, we did started the project, that's good. Ok, how is the map going to be generated? For instance, we are just starting to think about that, but the beginning of this adventure starts at seeds. Yes, seeds, remember Minecraft? It has seeds too, and it generates the maps.&lt;/p&gt;

&lt;p&gt;This is our code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JITTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;JITTER&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                     &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;JITTER&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is it doing?&lt;/p&gt;

&lt;p&gt;Basically, it's generating grids at the canvas and then we add &lt;strong&gt;jitter&lt;/strong&gt;, because we cannot use the same points for the Voronoi process, this is where jitter enters, it breaks the regular grid lines.&lt;br&gt;
Yeah, cool, but it doesn't really shows anything. So let's draw it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hsl(0, 50%, 50%)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! We have points at where the map is going to be drawn, it's where our Voronoi will be drawn too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQzEz7XJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2xjjv7tz6z41zlv8076.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQzEz7XJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2xjjv7tz6z41zlv8076.png" alt="Voronoi points" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-the-voronoi-really-comes-up"&gt;
  &lt;/a&gt;
  Where the Voronoi really comes up
&lt;/h3&gt;

&lt;p&gt;Now we are getting closer to the exciting part of this code! We have just generated some functional randomly disposed points where we are going to deploy our Voronoi elements. How we do this?&lt;/p&gt;

&lt;p&gt;First of all we are going to run the Delaunay triangulation algorithm, which will create the Voronoi cells for us (the spaces between the lines, where our points will be at the center)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Delaunator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, we did the triangulation, now we need to calculate the centimeters of the triangles, we will use something called "centroids" which are part of the Voronoi process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculateCentroids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numTriangles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;centroids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numTriangles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sumOfX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sumOfY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
            &lt;span class="nx"&gt;sumOfX&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;sumOfY&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;centroids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sumOfX&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sumOfY&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;centroids&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we store the information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;numRegions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;numTriangles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;numEdges&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;centers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;calculateCentroids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we draw the Voronoi cells:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;triangleOfEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nextHalfedge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawCellBoundaries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;centers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numEdges&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.02&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numEdges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;centers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangleOfEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;centers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangleOfEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;])];&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHJqaS5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdarq1onvww2d07r2hns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHJqaS5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdarq1onvww2d07r2hns.png" alt="Voronoi points with cells" width="880" height="441"&gt;&lt;/a&gt;&lt;br&gt;
Exciting! Looks like a Voronoi-based draw for me.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#island-shape"&gt;
  &lt;/a&gt;
  Island shape
&lt;/h2&gt;

&lt;p&gt;Until now we've created the algorithm for the points, that generates our cells, now we are going to put it in action, that means we are going to draw the terrain. Yeah!&lt;/p&gt;

&lt;p&gt;If we want it to look like an island, we need to create a height map, so we aren't going to see any floating random terrain at the ocean. Here it goes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WAVELENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;assignElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimplexNoise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numRegions&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numRegions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;ny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// start with noise:&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noise2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nx&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;WAVELENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ny&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;WAVELENGTH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// modify noise to make islands:&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ny&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// should be 0-1&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;assignElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the regions, we have it at the application's memory, now we need to draw it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;edgesAroundPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;incoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outgoing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextHalfedge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;incoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halfedges&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;outgoing&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incoming&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;incoming&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawCellColors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;colorFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// of region ids&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numEdges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;centers&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numEdges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;triangles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nextHalfedge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;edgesAroundPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delaunay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;centers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;triangleOfEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;drawCellColors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;diagram-cell-elevations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hsl(240, 30%, 50%)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hsl(90, 20%, 50%)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have the islands!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dOfC_Xil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vts92lkg8wf7vf62dwsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOfC_Xil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vts92lkg8wf7vf62dwsp.png" alt="Islands!" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#biomes"&gt;
  &lt;/a&gt;
  Biomes
&lt;/h2&gt;

&lt;p&gt;Every respectfull world has diversified biomes, that's what we need.&lt;/p&gt;

&lt;p&gt;For that, we need to generate a second noise map, so we can see where the biomes are on our hemispheres.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;assignMoisture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimplexNoise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numRegions&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;moisture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numRegions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;ny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;GRIDSIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;moisture&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noise2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nx&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;WAVELENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ny&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;WAVELENGTH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;moisture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moisture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;assignMoisture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we just put some colors on it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;biomeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moisture&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// tweaks&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;210&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;185&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;139&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`rgb(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;drawCellColors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;diagram-cell-biomes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;biomeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhWDaNTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlup6edbfba69ic038he.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhWDaNTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlup6edbfba69ic038he.png" alt="Image description" width="880" height="442"&gt;&lt;/a&gt; &lt;br&gt;
Beautiful!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We have created a simple but not so simple map generator, it looks extremely good and i'm honestly very happy with the result, but it wouldn't be possible without the help of these awesome articles about world generation:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/#source"&gt;Polygonal Map Generation for Games - by amitp from Red Blob Games&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.redblobgames.com/x/2022-voronoi-maps-tutorial/"&gt;Voronoi Maps Tutorial - by amitp from Red Blob Games&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/mapbox/delaunator"&gt;MapBox's Delaunator Algorithm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/jwagner/simplex-noise.js"&gt;Jwagner's Simplex-Noise Algorithm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on my social medias, so you won't miss anything:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter/matjs_"&gt;My Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/matjsilva"&gt;My Github&lt;/a&gt;&lt;br&gt;
My Discord: &lt;a class="mentioned-user" href="https://dev.to/matjs"&gt;@matjs&lt;/a&gt;#1006&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Running a .NET Twitter bot on Pi: Part 3 – Pi in the sky 🥧👩‍🚀</title>
      <author>Abdul</author>
      <pubDate>Mon, 27 Dec 2021 21:37:22 +0000</pubDate>
      <link>https://dev.to/iamabdul/running-a-net-twitter-bot-on-pi-part-3-pi-in-the-sky-39if</link>
      <guid>https://dev.to/iamabdul/running-a-net-twitter-bot-on-pi-part-3-pi-in-the-sky-39if</guid>
      <description>&lt;p&gt;Heya! The final part of this twitter bot series is here. &lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/iamabdul/running-a-net-twitter-bot-on-pi-part-1-the-bot-2cdp"&gt;first part&lt;/a&gt; of this series, we've taken a look at creating a twitter bot in .NET that listens to particular tweets and retweets them. For the &lt;a href="https://dev.to/iamabdul/running-a-net-twitter-bot-on-pi-part-2-the-rules-endpoints-23in"&gt;second part&lt;/a&gt; we created Api endpoints for  it, so it now has the capability to change its tweet stream rules whilst listening at the same time. This final part is where we deploy our twitter bot to the Pi, lets go!&lt;/p&gt;

&lt;p&gt;his is the link to the repo (&lt;a href="https://github.com/Iamabdul/DotNetTwitterBot"&gt;here&lt;/a&gt;). It includes the previous changes as well as what will occur during the course of this blog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements-first"&gt;
  &lt;/a&gt;
  Requirements first✋
&lt;/h3&gt;

&lt;p&gt;In order for this to work, we will need a couple of things to have at hand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Raspberry Pi&lt;/li&gt;
&lt;li&gt;Setting up the Pi with SSH (&lt;a href="https://www.youtube.com/watch?v=O8AIuD_QAgE"&gt;link here&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Please take note of the OS chosen during the setup for later&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Docker installed in Pi (&lt;a href="https://pimylifeup.com/raspberry-pi-docker/#:~:text=Installing%20Docker%20to%20the%20Raspberry%20Pi"&gt;link here&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;I only followed the "Installing Docker to the Raspberry Pi" and "Testing the Docker Installation on Raspberry Pi" sections&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;A docker hub account (&lt;a href="https://hub.docker.com/signup"&gt;link here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Docker desktop (&lt;a href="https://www.docker.com/products/docker-desktop"&gt;link here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(Optional) Docker VS Code extension (&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker"&gt;link here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Referring to the video for setting up an SSH for the Pi, her video pretty much applies the same to windows users, if you follow that you should be good to go on your Pi/SSH needs: that’s if you actually need to SSH, if you don’t and are fine with the full OS version then you can go ahead with that too 👍&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerizing-%E2%9B%B4"&gt;
  &lt;/a&gt;
  Dockerizing ..⛴
&lt;/h3&gt;

&lt;p&gt;The dockerizing part is really nothing new, it's just adding the dockerfile and a dockerignore to our project as seen in many tutorials. I came across a hiccup when attempting to pull an image for our twitter bot into the Pi but we'll work up to that point.  &lt;/p&gt;

&lt;p&gt;To start off in visual studio, we’ll first need to add the docker support to the project, and that is pretty much straight forward; right clicking the project and scrolling down the options to select the “add docker support” button. VS generates the necessary files for our docker process which are the dockerignore and dockerfile files: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SI1t0dS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfrz1i67sfiq2x6tiixi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SI1t0dS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfrz1i67sfiq2x6tiixi.png" alt="dockerfile" width="638" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can also be done in VS code, ensuring the docker extension installed, via the command (select the first option): &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKZ8N3Ne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxl2h0483cydgnk8dayl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKZ8N3Ne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxl2h0483cydgnk8dayl.png" alt="VS Code command" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#time-to-build"&gt;
  &lt;/a&gt;
  Time to build
&lt;/h4&gt;

&lt;p&gt;Once this is done, we are ready to start the build process and we do this by going to the terminal/cmd and cd-ing into our project directory. Because of the way the dockerfile looks for things, and how it sets up what current directory it looks at; I ensured that I ran the following docker command in the solution directory and not the individual project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t {username}/abtest-image -f TwitterBot/Dockerfile . 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command specifics can be found &lt;a href="https://docs.docker.com/engine/reference/commandline/build/"&gt;here&lt;/a&gt;. This command basically states to &lt;code&gt;create&lt;/code&gt; a docker image named &lt;code&gt;{username}/abtest-image&lt;/code&gt; which is based on the dockerfile located in the &lt;code&gt;TwitterBot&lt;/code&gt; folder. The period at the end of the command is also a necessity as it states that we will execute this command in the current directory that we are in.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#time-to-test-run"&gt;
  &lt;/a&gt;
  Time to test run
&lt;/h4&gt;

&lt;p&gt;The previous command should build an image, however it has not been run in a container yet. The command to do so is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --rm -p 8080:80 {username}/abtest-image 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we can see that docker instructs (via &lt;code&gt;docker run&lt;/code&gt;) the &lt;code&gt;{username}/abtest-image&lt;/code&gt; image to run on port &lt;code&gt;8080&lt;/code&gt; (via &lt;code&gt;-p 8080:80&lt;/code&gt;). The port argument shows that the left side of the colon is 8080 while the right side is &lt;code&gt;80&lt;/code&gt;. The left side is what docker exposes to the outside world (the users - us) to appropriately talk to this container. The right side is for communication inside the container itself, something we wouldn’t need to look into too much for this project. &lt;code&gt;--rm&lt;/code&gt; is simply an option to let docker know to remove containers once they have been stopped.&lt;/p&gt;

&lt;p&gt;If we want to run this image in a container in the background and not have it hog the terminal, we can introduce the &lt;code&gt;-d&lt;/code&gt; flag just after the &lt;code&gt;run&lt;/code&gt; keyword in that same command above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-hiccup"&gt;
  &lt;/a&gt;
  The hiccup
&lt;/h4&gt;

&lt;p&gt;Now that we have test run this image in our OS, it’s time we talk about the potential nightmare we could’ve gotten into.&lt;/p&gt;

&lt;p&gt;I ran into the hiccup stemming from after creating the dockerfile as instructed above, which is perfectly fine for what we’re currently running on. This file has various steps that include packaging the app into the image we need, however it relies on a base image to create our image from which causes compatibility issues down the line.&lt;/p&gt;

&lt;p&gt;This is usually the first command in the file and it would probably look like this by default:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem is that this command doesn’t get an image which targets the correct OS version that our Pi runs on (remember when we mentioned to keep a note of the OS). This could result in a little mess down the line trying to figure out what this message means:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm/v7) and no specific platform was requested
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The crux of this states that we need to change that first line mentioned a little, depending on what platform we will be targeting. It looks like the platform is targeting the arm instruction set (based on the error message), but to find out what type our host platform (Pi) is running on, we can use the &lt;code&gt;uname –m&lt;/code&gt; command in the Pi terminal. &lt;/p&gt;

&lt;p&gt;This will give us one of two answers, either &lt;code&gt;aarch64&lt;/code&gt; (which means we’re on 64 bit) or &lt;code&gt;armv7l&lt;/code&gt; (which means we’re on 32 bit). Once we find that, we can go to &lt;a href="https://hub.docker.com/_/microsoft-dotnet-aspnet#:~:text=and%20WCF%20Samples-,Full%20Tag%20Listing,-Linux%20amd64%20Tags"&gt;this link&lt;/a&gt; to find out what version of aspnet in that command we should be pulling down. For my case, it was &lt;code&gt;6.0.1-bullseye-slim-arm32v7&lt;/code&gt; and I’d safely guess it could be yours too:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agOcgHec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejaffdrwtqljip7ikr6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agOcgHec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejaffdrwtqljip7ikr6c.png" alt="Image tag listing" width="880" height="149"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now the command looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/aspnet:6.0.1-bullseye-slim-arm32v7 AS base 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this change, running this image in our current OS wouldn’t work as we’ve changed our target platform, but it will run on the Pi (have faith and stay the course!). Now that we have built up the image, it’s time to fling it off to the web!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publishing-the-image-to-the-hub"&gt;
  &lt;/a&gt;
  Publishing the image to the hub 🚀
&lt;/h3&gt;

&lt;p&gt;In order for us to publish the image to docker hub we will need to have a docker account. Given the steps mentioned at the start, we can safely assume this has been done already. &lt;/p&gt;

&lt;p&gt;In our current terminal, we will need to log into to our docker hub:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker login docker.io -u &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A standard credential check will occur, after which we should be granted access to our account via the terminal.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Side note, the “docker.io” part was added to solve an issue I had with pulling from a private repo. I could have used “docker login” on its own and it would have worked for the steps later if I chose to have a public repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyway, once we’ve logged in, we can finally get to the juicy part which is pushing this image out there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Docker push {username}/abtest-image
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does what it says on the tin. The image we created earlier will now be pushed into a new repo in the cloud with the same name. There might be some problems here as I have experienced, mostly to do with the naming convention of the image name. I found that pushing an image name without my username preceding it was not possible, it gave me errors stating &lt;em&gt;“request to the resource is denied”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I looked at the logs when attempting to push the image with that exact name and it seems to push to a directory that didn’t belong to me (if you know please drop a comment below 👍):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The push refers to repository [docker.io/library/abtest-image]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, when I used my docker username and then followed by “/abtest-image”, the logging looked different and the push succeeded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The push refers to repository [docker.io/{username}/abtest-image]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the web to see that the new repo is there and it should be 🙌.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pulling-the-image-from-the-pimoment-of-truth"&gt;
  &lt;/a&gt;
  Pulling the image from the Pi(moment of truth)
&lt;/h3&gt;

&lt;p&gt;Coolio, we’ll need to SSH in to the Pi for this. When we have done so, we’ll need to install docker into the Pi. &lt;a href="https://pimylifeup.com/raspberry-pi-docker/"&gt;This blog&lt;/a&gt; is adequate enough to install docker, three quick easy steps to get docker into the Pi 👍 &lt;/p&gt;

&lt;p&gt;Once that is done, all that is left is to say these magic words:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull {username}/abtest-image 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will do its thing, with regards to getting the image down from our remote repo and adding it to the list of images in our Pi docker. Check using the &lt;code&gt;docker images&lt;/code&gt; for this list. &lt;/p&gt;

&lt;p&gt;Once that is done, and the hiccup issue has been resolved, we should be able to run our twitter bot using the same command in previous steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -p 8080:80 {username}/abtest-image
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test it in the Pi for a final time to see if it holds and we should have lift off!&lt;/p&gt;

&lt;p&gt;This was a fun project to take on, this three-part series saw me create a .NET twitter bot app which listens to specific tags I’ve pre-set and retweets those tags. We then went onto creating endpoints to change what the tweet stream should and shouldn’t listen to by exposing the “rules” end point. This led to looking at deploying this .NET bot onto the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;I’ve learnt quite a bit from this, I was able to enjoy some of the features of .NET 6 such as minimal Api. This was also followed by a refreshing and fun exposure to docker and how it can be used. I have some ideas for a bonus episode on how much a dockerized twitter bot in azure would rack up in costs. I have a feeling it wouldn’t be more than two burgers worth a month (let's hope it doesn't cost me a pretty penny!).&lt;/p&gt;

&lt;p&gt;Thank you for sticking around and following my journey with this twitter bot, I hope to see you in the next project I decide to take on. PS: lookout for that possible bonus episode on exploring this bot with Azure 🚀&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>dotnet</category>
      <category>devjournal</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I received 4 salary raises in 2 years as a Software Engineer</title>
      <author>TK</author>
      <pubDate>Mon, 27 Dec 2021 21:32:23 +0000</pubDate>
      <link>https://dev.to/teekay/how-i-received-4-salary-raises-in-2-years-as-a-software-engineer-110m</link>
      <guid>https://dev.to/teekay/how-i-received-4-salary-raises-in-2-years-as-a-software-engineer-110m</guid>
      <description>&lt;p&gt;Or a better title would be: &lt;em&gt;"how to be a Rebel at Work and keep improving the craft"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The original post was published at &lt;a href="https://www.iamtk.co/how-i-received-4-salary-raises-in-2-years-of-quintoandar-as-a-software-engineer"&gt;iamtk.co&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;these ideas and insights come from a privileged person working in a very privileged industry.&lt;/li&gt;
&lt;li&gt;my intent is not to show off, but to share my experience and I hope you can steal some ideas.&lt;/li&gt;
&lt;li&gt;it's ok to see money as a valuable capital in your life, but I'll focus on how I improved my craft in this post.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#before-telling-my-experience"&gt;
  &lt;/a&gt;
  Before telling my experience
&lt;/h2&gt;

&lt;p&gt;In this essay, I'll talk about skills, experiences, opportunities, and mindset. Basically how I became better at my own craft.&lt;/p&gt;

&lt;p&gt;My focus was always on the journey and I didn't intend to grow at the company. This was not my goal. I actually didn't have a real goal, just wanted to have fun while working, search for autonomy and control, and have a space I could learn a lot.&lt;/p&gt;

&lt;p&gt;With that in mind, my experience may not help you "climb" the &lt;em&gt;Career Ladder&lt;/em&gt;. But I hope you can steal some ideas and use them in your favor for better working life.&lt;/p&gt;

&lt;p&gt;Also, if your goal is to grow at the company, climb the career ladder, and get raises, maybe I'll write about it in the future, but here are two (shallow) advice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Understand the career ladder (if your company has one)&lt;/em&gt;: to be able to get promotions, you need to understand where you are at and what are the expectations for the next level.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Work with your manager&lt;/em&gt;: use One-on-One meetings to sync the career ladder expectations, receive feedback, ask for projects you could work on. Everything that can help you go to the next level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other things you can do to get raises, but, for me, these are the fundamental pieces that will help you take the first step. And as I don't want this essay to focus on promotions, I'll probably write a separate article for this topic. But you can find awesome content on the internet that is probably better than my future one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-experience"&gt;
  &lt;/a&gt;
  My Experience
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#external-factors"&gt;
  &lt;/a&gt;
  External Factors
&lt;/h3&gt;

&lt;p&gt;To start, I have to say that I had important &lt;em&gt;External Factors&lt;/em&gt;. QuintoAndar is one of the fastest-growing startups in Brazil. Today it's valued at $5.1 billion. It's an innovative company in the real estate industry, and it has a business model that works well in Brazil.&lt;/p&gt;

&lt;p&gt;The fact that it's a company that's making money, was invested a huge amount of capital, and keeps growing, it's a very important factor when it comes to getting raises and promotions.&lt;/p&gt;

&lt;p&gt;Besides this, it's a company that attracts real talented people, not only in engineering but in the product and other organizations too.&lt;/p&gt;

&lt;p&gt;IMHO, the culture is great for engineers as I always felt that it was a safe place to expose and discuss my and new ideas, to share my honest opinion on what was working or not, and was always incentivized to challenge the status quo.&lt;/p&gt;

&lt;p&gt;So these are the important &lt;em&gt;external factors&lt;/em&gt; that had nothing to do with my skills and work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;QuintoAndar is a fast-growing company&lt;/li&gt;
&lt;li&gt;It kept growing financially over the years&lt;/li&gt;
&lt;li&gt;Real talented people&lt;/li&gt;
&lt;li&gt;Great culture (but not only) for engineers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#achieving-my-teams-goals"&gt;
  &lt;/a&gt;
  Achieving my team's goals
&lt;/h3&gt;

&lt;p&gt;Before anything else, my focus was always on my team and our quarter goals. It was truly important to me that I understand the team's goals, the business metrics we should look at, and why we were doing this list of features.&lt;/p&gt;

&lt;p&gt;To have everybody on board, we had a Notion page with everything business and product-related to our team. I also created a dashboard with all the important pages we had in the Amplitude platform to be easier to access key metrics.&lt;/p&gt;

&lt;p&gt;Understanding &lt;em&gt;why&lt;/em&gt; is just the first step. As engineers, one of our responsibilities is to help and come up with solutions for the &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Collaborating with the product manager, the designer, and the other engineers here is key to succeeding as a team. I think this part not many people talk about and it was always a bit fuzzy for me when I first started working in software engineering. &lt;em&gt;Collaborating&lt;/em&gt; means a lot of different things here, but I'll list some ideas I executed in the past:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ideas can come from different places: your manager, the PM, the designer, or any other person outside your team. After understanding the idea (and most importantly, the problem), you help shape and polish the solution with your engineering background and knowledge from the current system you're working on.

&lt;ul&gt;
&lt;li&gt;You probably understand the pain points from the system you're working on.&lt;/li&gt;
&lt;li&gt;With your background, you can think of different solutions: each with its own effort and time you and your team will be needed to spend on.&lt;/li&gt;
&lt;li&gt;Negotiate to have more time to polish the chosen solution after the implementation that needed to be deployed faster to the real user but lacked a bit of the engineering best practices.&lt;/li&gt;
&lt;li&gt;Or better, negotiate to have time to deliver the feature or product with best practices already built-in.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ideas can come from you: a feature, a product, or an improvement that you saw that could improve the user experience and business metrics. Later, we'll talk about my experience leading the &lt;a href="//iamtk.co/optimizing-the-performance-of-a-react-progressive-web-app"&gt;web performance project&lt;/a&gt; and being a product-minded software engineer.&lt;/li&gt;
&lt;li&gt;Create a safe space to collaborate: it's easy when the company's culture already creates this space that you feel safe to discuss ideas, come up with your own, or disagree with others. Having a more and more diverse team was important to enrich the discussions we had in the team, and having a safe space is the building block that enables people to discuss without fear of judgment.

&lt;ul&gt;
&lt;li&gt;Creating space by asking everybody in the team to ask questions, discuss, and share their opinions.&lt;/li&gt;
&lt;li&gt;Actively listen to people, care about what they are saying, and document the insights to use to polish the ideas discussed.&lt;/li&gt;
&lt;li&gt;Having better processes for developing products: a space to discuss the strategy, a space to discuss quarter's goals and metrics, a space to discuss the engineering challenges and architectures/solutions.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thing is, as you mature as an engineer, you not only code to deliver products but you collaborate in all aspects of software engineering. You understand that making the team, the processes, the delivery, and the dev experience better are part of your "&lt;em&gt;responsibility&lt;/em&gt;".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-the-status-quo-everything-can-be-improved"&gt;
  &lt;/a&gt;
  Challenge the status quo: everything can be improved
&lt;/h3&gt;

&lt;p&gt;I need to emphasize that the QuintoAndar's culture not only expected me to challenge the status quo but I was always incentivized to improve – or create awareness – about everything that was suboptimal. So it was always an environment where I could question everything and experiment with ideas and then improve things that were not working or could be better.&lt;/p&gt;

&lt;p&gt;When thinking about improving stuff in a company, the goal is to make the organization better. I could think of processes, technologies, the team's culture, the developer experience, and so on.&lt;/p&gt;

&lt;p&gt;My idea was always to &lt;a href="http://paulgraham.com/ds.html"&gt;&lt;em&gt;do things that don't scale&lt;/em&gt;&lt;/a&gt; first: focus on my team, try experiments, learn with this process, and improve it. Do this cycle until the idea gets matured. When I felt it was ready to scale, I could share it in more broad scope, like a tribe (a set of squads/teams) or for the whole organization.&lt;/p&gt;

&lt;p&gt;A good solution always comes up with a well-defined problem (or a well-defined &lt;em&gt;thing&lt;/em&gt; that could be improved). This is why understanding the problem and the context is so important. Living and breathing the engineering problems on a daily basis gave me a lot of understanding of how things worked and enabled me to think of solutions to make it better.&lt;/p&gt;

&lt;p&gt;As I was working in a big tech company, the technologies, patterns, and conventions are extremely important to make us move fast but always with quality in mind.&lt;/p&gt;

&lt;p&gt;My first initiative was to create guidelines about how we used React, optimizations, immutability, and testing in JavaScript and React. Guideline documents are a nice initiative because first, we can normalize the conventions and patterns cross-company, and second, they gave awareness about these topics and as engineers, we could discuss the conventions we wanted to adopt and formalize. I liked the whole process, mainly because it was always nice to receive feedback, different views, and insights from other engineers and we could come up with great solutions for frequently problems we face on a daily basis.&lt;/p&gt;

&lt;p&gt;With this first initiative, I gained confidence that I could improve more and more things in the engineering scope. For every problem that I faced, I documented the solutions and patterns that I came up with and shared them with other engineers.&lt;/p&gt;

&lt;p&gt;I remember when we didn't have the opportunity to use Hooks in our PWAs. So I made some experiments (&lt;a href="//iamtk.co/react-hooks-context-api-and-pokemons"&gt;React Hooks, Context API, and Pokemons&lt;/a&gt;) and shared them.&lt;/p&gt;

&lt;p&gt;Regarding JavaScript patterns, I also experimented with some ideas on &lt;a href="//iamtk.co/closure-currying-and-cool-abstractions"&gt;Closures and Currying&lt;/a&gt;, &lt;a href="//iamtk.co/building-an-abstraction-for-react-internationalization-messages"&gt;Internationalization abstraction in React&lt;/a&gt;, and &lt;a href="//iamtk.co/functional-programming-principles-in-javascript"&gt;Functional Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As our codebase was getting more and more complex, it started to get difficult to reason about it, mostly the state management part, which we were heavily using Redux.&lt;/p&gt;

&lt;p&gt;&lt;a href="//iamtk.co/consistent-state-management-in-react-and-redux"&gt;"Typing" our state management&lt;/a&gt; gave us more confidence and make it more clear how data was structured in the app.&lt;/p&gt;

&lt;p&gt;Choosing TypeScript to handle this made me study a bit more and create a &lt;a href="//iamtk.co/a-mental-model-to-think-in-typescript"&gt;Mental Model to think in TypeScript&lt;/a&gt;. As we were using React in almost all codebases, it was important to have examples of &lt;a href="//iamtk.co/ux-studies-with-react-typescript-and-testing-library"&gt;how React and TypeScript can work together&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Testing applications was a topic people were always interested in the company. We had mini guilds to discuss these ideas and create patterns and conventions we wanted to use. I could share my two experiments: &lt;a href="//iamtk.co/tdd-functions-and-react-components"&gt;TDD, JavaScript, and React&lt;/a&gt; and &lt;a href="//iamtk.co/basic-recipes-for-react-testing-library"&gt;Basic Recipes for React Testing Library&lt;/a&gt;. I think TDD is a more personal process, but using the testing library was our default choice to test our applications.&lt;/p&gt;

&lt;p&gt;Technology is always changing and improving. We saw many libraries coming up and two gained our attention: &lt;a href="https://react-query.tanstack.com/"&gt;react-query&lt;/a&gt; and &lt;a href="https://swr.vercel.app/"&gt;swr&lt;/a&gt;. I could make experiments with both and my colleague and I came up with an Architecture Decision Record (ADR) for &lt;a href="//iamtk.co/data-fetching-in-react-with-react-query"&gt;react-query&lt;/a&gt;. We saw the potential to use this pattern and replace redux-pack and redux-saga, which were bottlenecks in terms of performance for us. Also, react-query brings a more intuitive approach and focuses on the server cache challenge.&lt;/p&gt;

&lt;p&gt;Besides technology, we can think of developer experience. Engineering time is getting more and more important.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;We recently found that the new 2021 M1 MacBooks cut our Android build times in half.&lt;br&gt;&lt;br&gt;So for a team of 9, $32k of laptops will actually save $100k in productivity over 2022. The break-even point happens at 3 months.&lt;br&gt;&lt;br&gt;TL;DR Engineering hours are much more expensive than laptops!&lt;/p&gt;— Jameson (@softwarejameson) &lt;a href="https://twitter.com/softwarejameson/status/1455971162060697613?ref_src=twsrc%5Etfw"&gt;November 3, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;But in my opinion, it's not only important but can be crucial for many companies that are scaling their business. You don't need a separate team or a platform squad to improve the engineer's productivity, we as engineers can always design better processes and solve productivity bottlenecks. It's up to us to talk to our managers, allocate more time for this type of work, or even create a new team from scratch.&lt;/p&gt;

&lt;p&gt;I did work on developer experience and I need to say that I had a blast. I wrote a whole piece about this experience if you want to take a look at it: &lt;a href="//iamtk.co/dx-and-software-maintainability-in-frontend-engineering"&gt;DX &amp;amp; Software Maintainability in Frontend Engineering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But in summary, I worked on the engineers' pain points at that time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Monitoring&lt;/em&gt;: instrument the new system, create dashboard links, document how to use monitoring systems on a daily basis.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Tests&lt;/em&gt;: experiment with new testing toolings, share the insights from these experiences, write guidelines and examples on how to use them, show different patterns.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;CI/CD&lt;/em&gt;: not only optimized the CI builds to tune developers' productivity but also automated the release process. Before it was GitHub tags, now they just need to merge the PR and it automatically deploys the new change.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Code Formatting&lt;/em&gt;: now using prettier together with ESLint's rules. I was able to format the whole codebase with prettier in less than a week. And with confidence as we had quality automated tests and our monitoring system backing us. Also was able to implement a pre-commit hook to run prettier and ESLint for every commit made on the repository.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Web Performance&lt;/em&gt;: I had the opportunity to work on a web performance project before, but in this case, I could work on instrumenting performance tooling to collect real user metrics (&lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Monitoring&lt;/em&gt; and &lt;em&gt;Tests&lt;/em&gt; were the building blocks to do more experiments, refactoring, and change code with confidence. Formatting code automatically was a huge gain in letting engineers discuss business rules and architecture instead of debating if you need to add a semicolon or not. Web performance tooling was the building block to measure any initiative related to improving the performance of that software. Making &lt;em&gt;CI&lt;/em&gt; faster improved the experience for every engineer that worked on that project. Building a &lt;em&gt;Continuous Delivery&lt;/em&gt; also makes the developer experience smoother.&lt;/p&gt;

&lt;p&gt;And the last piece in this &lt;em&gt;Challenge the status quo&lt;/em&gt; part is &lt;em&gt;Knowledge Sharing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For me, everything that I learn, research, or experiment, I like to document and share. The document format can vary. It can be an article, a guideline, a Notion document, slides to use for tech talks, or simple notes on my Moleskine to be used to create content based on this draft.&lt;/p&gt;

&lt;p&gt;I've been doing this for 8 years now and everything is documented here: &lt;a href="//iamtk.co"&gt;writings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's a way to share my learnings with my teammates, but also share ideas with the tech communities. Having this process helps me craft my thoughts and learn more about each topic I experimented with before.&lt;/p&gt;

&lt;p&gt;First &lt;em&gt;writing&lt;/em&gt;, second any kind of content I want to share. Writing down and organizing the ideas and experiments is the foundation to create any other content. With the written article, I basically detailed everything I wanted to share and it could turn into guidelines (the example here was the &lt;a href="//iamtk.co/basic-recipes-for-react-testing-library"&gt;testing recipes&lt;/a&gt;), engineering critics, or slides for a tech talk, as I did for &lt;em&gt;&lt;a href="//iamtk.co/optimizing-the-performance-of-a-react-progressive-web-app"&gt;Web Performance Improvements&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But the thing that I liked the most was turning my writings into topics to discuss with the team. We had a group meeting called &lt;em&gt;Guildinha&lt;/em&gt;, or Little Guild, and every engineer could plan the meeting with a topic in mind. It was always an informal meeting to chat, discuss, and learn from each other.&lt;/p&gt;

&lt;p&gt;With more knowledge and experience I could also mentor informally and formally my colleagues throughout the 3 years I was working there. It was always nice to talk to other people, help them grow in their careers, and impact their work somehow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improving-my-craft"&gt;
  &lt;/a&gt;
  Improving my Craft
&lt;/h3&gt;

&lt;p&gt;Among all topics I'm covering in this article, this is what I find the most interesting: &lt;em&gt;Improving my Craft&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I partially wrote about this before in two essays:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//iamtk.co/designing-my-lifes-system"&gt;Designing my Life's System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/designing-my-learning-experience"&gt;Designing my Learning Experience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know I'm not a machine, but I'm constantly looking for ways to learn more and gain more knowledge about things I care about. Every day. Every time. Forever.&lt;/p&gt;

&lt;p&gt;I've been rethinking the way I learn in my free time and usually, I have three ways&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fundamentals&lt;/li&gt;
&lt;li&gt;On-demand&lt;/li&gt;
&lt;li&gt;Local Maxima vs Global Maxima&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I think about fundamentals, I think of &lt;em&gt;First Principles&lt;/em&gt;. What are the building blocks of software engineering? What are we absolutely sure is true? And reasoning from this principle, we can understand and solve more difficult and complex problems.&lt;/p&gt;

&lt;p&gt;In software engineering, we have an ocean of things we can learn. When I was a backend engineer, my focus was on understanding APIs, system architecture, automated tests, and databases. For each topic, I could go deep and understand the building block of each one of them. With a better understanding, I could link this knowledge (or "connect the dots") and solve more difficult problems in backend engineering.&lt;/p&gt;

&lt;p&gt;This worked the same way for frontend engineering. I started with HTML and CSS and then learned more about JavaScript. Now we have other things we need a better understanding of to do the work (or at least more complex work) like build systems (the compilers and bundlers), automated tests (for components and integration), browsers engines, and so on.&lt;/p&gt;

&lt;p&gt;Knowledge is infinity and I won't learn everything but reasoning from first principles helps me not only solve complex problems but also understand what are the knowledge gaps that I'm missing.&lt;/p&gt;

&lt;p&gt;On-demand way of learning is basically when I have a new challenge at work or in my side-project and I need this specific kind of knowledge to solve the problem. It happened when I needed to understand monitoring, testing, and web performance at work and it's also happening on my current side-project which I need to have a better understanding of CMS and text editors.&lt;/p&gt;

&lt;p&gt;And Local Maxima vs Global Maxima is one of the things that I learned these days. It was very counterintuitive for me but as I'm doing more and more it got clear to me how important it's to diversify your knowledge portfolio.&lt;/p&gt;

&lt;p&gt;If you're a JavaScript engineer, the obvious choice is to keep learning about JavaScript but soon you can get trapped in the local maxima. What I did was to first get one step away from my comfort zone and &lt;a href="//iamtk.co/a-mental-model-to-think-in-typescript"&gt;learn TypeScript&lt;/a&gt; and &lt;a href="https://github.com/leandrotk/programming-with-types"&gt;how to get the best out of type systems&lt;/a&gt;. My next step was to learn more about browsers, &lt;a href="https://github.com/leandrotk/algorithms"&gt;algorithms&lt;/a&gt; &amp;amp; &lt;a href="//iamtk.co/series/data-structures"&gt;data structures&lt;/a&gt;. Now I'm investing my time and effort in &lt;a href="https://leandrotk.github.io/series/building-an-interpreter/"&gt;learning about compilers&lt;/a&gt;, &lt;a href="https://github.com/leandrotk/minibundler"&gt;how bundlers work&lt;/a&gt;, and Rust. Everything I've been learning has a direct or indirect impact on my work and how I think about engineering.&lt;/p&gt;

&lt;p&gt;At work, it was no different. My approach was to actively look for feedback, from my managers and peers, and figure out how to be a better software/product engineer.&lt;/p&gt;

&lt;p&gt;Actively looking for feedback is a habit that I wanted to start earlier in my career. In the early days, my thoughts were "feedback is great, I'm always open to receiving feedback". But it was not enough. I did at my last job was to have a weekly meeting with my manager and always ask about her perspective about my work on that week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The things I was doing well and should keep doing&lt;/li&gt;
&lt;li&gt;The things I was doing ok and could improve or could do more&lt;/li&gt;
&lt;li&gt;The things I was doing were not that great and could improve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think these bullet points are a good starting point to discuss things I could learn, do, and build habits.&lt;/p&gt;

&lt;p&gt;The other thing was to provide feedback and ideas to make the project better. I had a weekly log about the things that could be better and I shared it with my manager to discuss how to implement them in our processes and project's codebases.&lt;/p&gt;

&lt;p&gt;Another effective way to receive feedback is to work on your &lt;a href="//iamtk.co/building-an-individual-development-plan-with-notion"&gt;IDP (Individual Development Plan)&lt;/a&gt;. I wrote about that before but the idea is to develop a plan for your (career) growth. With this shared document, I could always debate with my manager about the path I was following, what I was learning, what were things I was interested in, and receive feedback and advice on how to improve my actions and habits. It's also a nice way to become more self-aware and share with your manager the things you like the most and possibly receive projects that have the intersections of your skills and interests. I really liked working on my IDP and I came up with a public version of it to share with my teammates. Everyone knew what I was learning and it was the starting point to discuss and share more knowledge within the team.&lt;/p&gt;

&lt;p&gt;But It's ok if you don't want to create a plan to grow in your career. There are always other ways to incentivize receiving (and giving) feedback in your team. To receive feedback from my peers I first gave feedback (informal and formal) for each one of them and kindly shared that if they had time, I would be happy to receive feedback too.&lt;/p&gt;

&lt;p&gt;Regarding figuring out how to be a better product/software engineer, there are very interesting articles about product-minded engineers out there but I'll give my two cents on this topic through my lens and experience.&lt;/p&gt;

&lt;p&gt;For me, the first step is to understand the product you are working on.&lt;/p&gt;

&lt;p&gt;Is it a product for &lt;em&gt;final users&lt;/em&gt;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;who are the clients?&lt;/li&gt;
&lt;li&gt;can I understand their behavior through data?&lt;/li&gt;
&lt;li&gt;talk to designers who interviewed them, and have documented insights.&lt;/li&gt;
&lt;li&gt;how does the business work?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it a product for &lt;em&gt;internal stakeholders&lt;/em&gt;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what are the goals of these stakeholders when using this product?&lt;/li&gt;
&lt;li&gt;what are the missing functionalities?&lt;/li&gt;
&lt;li&gt;what are the general complaints?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it a &lt;em&gt;product for engineers&lt;/em&gt;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what's their current workflow?&lt;/li&gt;
&lt;li&gt;what are the things they are happy about?&lt;/li&gt;
&lt;li&gt;what are the things they are angry about?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But for all three (and any other) groups, we can always think about UX (what are the UX pain points?) and find ways to help them achieve their goal.&lt;/p&gt;

&lt;p&gt;Figuring out which product you're working on is a good starting point. Asking a lot of questions about the business, the users, and how it is used are also tools to gain more knowledge about the product.&lt;/p&gt;

&lt;p&gt;The second thing I usually do is to understand the next steps, the OKR, the goals of the team regarding the product. Understanding why we are creating this feature &lt;em&gt;X&lt;/em&gt;, the related metrics we want to achieve, and actively participating in discussions to debate &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; to do things.&lt;/p&gt;

&lt;p&gt;Having open doors to engineers in these meetings is awesome because we can not only help thinking about product ideas but also give insights into the software underneath the product. As we have the engineering and the software background, it's very useful when creating strategies and debating engineering X product tradeoffs.&lt;/p&gt;

&lt;p&gt;Don't miss the opportunity to learn more about the product and actively participate in strategy and planning meetings if it's possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-yourself-with-interesting-projects"&gt;
  &lt;/a&gt;
  Challenge yourself with interesting projects
&lt;/h3&gt;

&lt;p&gt;Interesting projects can be the building block for your learning experience at work. While doing a challenging project, you'll probably learn a lot. Things you don't know and need to search and learn. Things you know and could do the best work. After finishing this kind of project, it's nice to do a retrospective on things that went well and things that you could do better. It's always a learning experience.&lt;/p&gt;

&lt;p&gt;I like challenging projects because, first, I like challenges. Second, because I always have fun at work when I have the opportunity to learn new things. And finally, because I like to look at my past self and be proud of the work I did.&lt;/p&gt;

&lt;p&gt;Things I did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built products and business from scratch:

&lt;ul&gt;
&lt;li&gt;Built a whole new app for photographers&lt;/li&gt;
&lt;li&gt;Built the for sale business in the affiliates product&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/optimizing-the-performance-of-a-react-progressive-web-app"&gt;Web Performance optimizations for the real estate's owners product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/dx-and-software-maintainability-in-frontend-engineering"&gt;Developer Experience in frontend engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CI/CD optimizations, monitoring systems, and &lt;a href="//iamtk.co/basic-recipes-for-react-testing-library"&gt;automated tests&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all these projects I could always learn a lot. Building the photographers app was the first time I worked with serverless functions and React. Building the affiliate product was the first time I worked with Clojure and the payment system. Improving web performance was the first time I worked with performance in the web and build tooling (mostly Webpack) in depth. Thinking about DX gave me a macro perspective about the engineer's workflow and I can apply this knowledge in other places as well.&lt;/p&gt;

&lt;p&gt;Challenging projects are always great tools for self-improvement as they are opportunities to keep learning and improving your craft. Seek interesting projects and keep learning. The feeling to look to your past self and be proud of your decisions and development is amazing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-a-journal"&gt;
  &lt;/a&gt;
  Keep a Journal
&lt;/h3&gt;

&lt;p&gt;I have a habit to document everything. From things I'm learning to book's notes. From articles ideas to daily journals. Journaling is part of my day and it helps me think and opens space to reflect on the things I did in the past.&lt;/p&gt;

&lt;p&gt;These are a series of ideas I came across and you can use in your favor as well:&lt;/p&gt;

&lt;p&gt;Document all the things I accomplished&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;What&lt;/code&gt;: What was the project I was working on, the problem I was solving, or features I implemented.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;How&lt;/code&gt;: How were the solution and the architecture decision, which PRs I worked on, what were the tradeoffs, how the team worked together, and what was my role in this whole project.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Learnings&lt;/code&gt;: What are things I would do differently – it can be architecture, solution, process, delegation, communication, prioritization, anything that could be improved and you can use it as a learning experience for another project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understand the impact of your work&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first things that should be 100% clear to me are: what's the problem we are solving, why (this usually come from the PM, designer, or business people), and how we should solve this.&lt;/li&gt;
&lt;li&gt;With that in mind, I keep my eye on the important "metrics":

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;business/ux&lt;/code&gt;: I work together with PMs and designers to understand the business metrics and OKRs we'll be looking at.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;engineering&lt;/code&gt;: performance, build time, error logs, monitoring systems.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dx&lt;/code&gt;: feedback from my teammates about what are the pain points and create initiatives to solve these problems.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Weekly documents&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As I told you, I document everything. It's a habit. At the end of the week, I tend to compile all my daily documents in a weekly document.&lt;/li&gt;
&lt;li&gt;It's cool to see what I've been working on, what I've learned, and the challenges I had to overcome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quarter document&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is also great to document in this way because I can just compound all notes I wrote at the end of the quarter, and it works like a report document for everyone at the company that wants to know what I've been doing.&lt;/li&gt;
&lt;li&gt;This document also serves as a "brag document" to talk to your manager.&lt;/li&gt;
&lt;li&gt;It's easy for your manager to understand your accomplishments.&lt;/li&gt;
&lt;li&gt;It's easy for your manager to use this document to work on your promotion (if you're interested in this).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is why I think documentation and journals are powerful. Making it a tiny habit has a huge impact after compounding all your work. As engineers, we tend to focus on the little things in our daily lives, but having this macro vision about our work is rewarding. It makes me proud and aware of my self-development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;As I wrote at the beginning of this essay, even though the title is a true story and money is a valuable and important capital in our lives, I wanted to talk about skills, experiences, opportunities, and mindset. Basically how I became better at my own craft. And I hope this piece can help you in some way in your career. Feel free to steal some ideas you find interesting and apply them in your life.&lt;/p&gt;

&lt;p&gt;Finally, I need to say &lt;em&gt;Thanks!&lt;/em&gt; to QuintoAndar for its great culture and the amazing people I worked with: my peers, my managers and leaders, and stakeholders that enabled me to be the best version of myself. I only have gratitude.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#writings"&gt;
  &lt;/a&gt;
  Writings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//iamtk.co/optimizing-the-performance-of-a-react-progressive-web-app"&gt;Optimizing the Performance of a React Progressive Web App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/react-hooks-context-api-and-pokemons"&gt;React Hooks, Context API, and Pokemons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/closure-currying-and-cool-abstractions"&gt;Closures, Currying, and Cool Abstractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/building-an-abstraction-for-react-internationalization-messages"&gt;Building an abstraction for React intl messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iamtk.co/functional-programming-principles-in-javascript"&gt;Functional Programming Principles in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/consistent-state-management-in-react-and-redux"&gt;Consistent State Management in React and Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iamtk.co/a-mental-model-to-think-in-typescript"&gt;A Mental Model to think in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iamtk.co/ux-studies-with-react-typescript-and-testing-library"&gt;UX Studies with React, TypeScript, and Testing Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/tdd-functions-and-react-components"&gt;TDD, simple functions, and React components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/basic-recipes-for-react-testing-library"&gt;Basic Recipes for React Testing Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/data-fetching-in-react-with-react-query"&gt;Data Fetching in React with react-query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/dx-and-software-maintainability-in-frontend-engineering"&gt;DX &amp;amp; Software Maintainability in Frontend Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#series"&gt;
  &lt;/a&gt;
  Series
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//iamtk.co/series/data-structures"&gt;Data Structures series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/series/building-an-interpreter"&gt;Building an Interpreter Series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#learning"&gt;
  &lt;/a&gt;
  Learning
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//iamtk.co/designing-my-lifes-system"&gt;Designing my Life's System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/designing-my-learning-experience"&gt;Designing my Learning Experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//iamtk.co/building-an-individual-development-plan-with-notion"&gt;Building a simple Individual Development Plan (IDP) with Notion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leaddev.com/culture-engagement-motivation/compromise-and-collaboration-working-product"&gt;Compromise and collaboration: Working with product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.getrevue.co/profile/lucianohgo/issues/nope-practice-does-not-make-perfect-lu-s-newsletter-issue-4-423806"&gt;Nope, Practice does not make perfect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fs.blog/first-principles/"&gt;First Principles: The Building Blocks of True Knowledge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jamesclear.com/first-principles"&gt;First Principles: Elon Musk on the Power of Thinking for Yourself&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#interesting-resources"&gt;
  &lt;/a&gt;
  Interesting resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jvns.ca/blog/brag-documents/"&gt;Get your work recognized: write a brag document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paulgraham.com/ds.html"&gt;Do Things that Don't Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-query.tanstack.com/"&gt;react-query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;swr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deep Learning Library From Scratch 1: Feedforward networks</title>
      <author>ashwins-code</author>
      <pubDate>Mon, 27 Dec 2021 21:03:55 +0000</pubDate>
      <link>https://dev.to/ashwinscode/deep-learning-library-from-scratch-1-feedforward-networks-2485</link>
      <guid>https://dev.to/ashwinscode/deep-learning-library-from-scratch-1-feedforward-networks-2485</guid>
      <description>&lt;p&gt;Hello! Welcome to this first post in a series where we try to build our own deep learning library in Python.&lt;/p&gt;

&lt;p&gt;In this post, we will go begin to write a simple feedforward neural network. &lt;/p&gt;

&lt;p&gt;We will only work on the forward pass in this post and we will work on training our network in the next post.&lt;/p&gt;

&lt;p&gt;This post will cover how basic feedforward neural networks take in a input and produce an output from it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firstly-what-is-a-neural-network"&gt;
  &lt;/a&gt;
  Firstly, what is a neural network?
&lt;/h2&gt;

&lt;p&gt;Neural networks are a machine learning technique which is loosely inspired by the model of the brain.&lt;/p&gt;

&lt;p&gt;As with all machine learning techniques, it learns from a dataset which contains inputs and their corresponding outputs.&lt;/p&gt;

&lt;p&gt;Neural networks consist of layers. Each layer is connected to the next layer with &lt;strong&gt;weights&lt;/strong&gt; and &lt;strong&gt;biases&lt;/strong&gt;. These weights and biases are used by the network to calculate the output it will give. They are adjusted when the network trains, so that the network produces the optimal output based on the data it trained on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HbTO2Nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjf0jjiaf8syciqzel7k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HbTO2Nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjf0jjiaf8syciqzel7k.jpg" alt="3 layer neural network" width="502" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This diagram shows a 3 layer neural network. The lines connecting the nodes are used to represent the weights and biases of the network&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-they-work-the-maths"&gt;
  &lt;/a&gt;
  How do they work? (the maths)
&lt;/h2&gt;

&lt;p&gt;Each layer has its own weights and bias.&lt;/p&gt;

&lt;p&gt;The weights and biases initially start as a matrix of random values.&lt;/p&gt;

&lt;p&gt;A basic feedforward neural network consists of only &lt;strong&gt;linear layers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Linear layers produce their output with the following formula&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x @ w + b


Where...
x is the input to the layer
w is the weights of the layer
b is the bias of the layer
(@ means matrix multiply)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;If you are unaware of how matrix multiplication works, this website &lt;a href="https://www.mathsisfun.com/algebra/matrix-multiplying.html"&gt;here&lt;/a&gt; explains it nicely.&lt;/p&gt;

&lt;p&gt;This is all we will cover for now - next post we will get into the mathematics behind how these weights and biases get corrected in training!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#activation-functions"&gt;
  &lt;/a&gt;
  Activation functions
&lt;/h2&gt;

&lt;p&gt;Layers of neural nets are composed of nodes.&lt;/p&gt;

&lt;p&gt;Activation functions are applied to layers to determine which nodes should "fire"/"activate". This "firing" is observed in the human brain too, hence why it was introduced in neural networks, since they are loosely based of the model of the brain.&lt;/p&gt;

&lt;p&gt;Activation functions also allows the network to model non-linear data. Without activation functions, the neural network would just be a linear regression model, meaning it would not be able to model most real world data.&lt;/p&gt;

&lt;p&gt;There are multiple activation functions, but here are the most common ones used...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sigmoid"&gt;
  &lt;/a&gt;
  Sigmoid
&lt;/h4&gt;

&lt;p&gt;The sigmoid function maps inputs to a value between 0 and 1, as shown in the graph below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEzCEDtk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sri1afzso7ewvbkfnsmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEzCEDtk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sri1afzso7ewvbkfnsmt.png" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lnZJopl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f65bkjg3henrz8vnguf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lnZJopl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f65bkjg3henrz8vnguf2.png" alt="Image description" width="337" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(x is the input vector)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#relu-rectified-linear"&gt;
  &lt;/a&gt;
  Relu (Rectified Linear)
&lt;/h4&gt;

&lt;p&gt;The Relu function only allows positive values of the input vector to pass through. Negative values are mapped to 0.&lt;/p&gt;

&lt;p&gt;For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[-5, 10]  
 [15, -10] --&amp;gt; relu --&amp;gt; [[0, 10]
                         [15, 0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IothhfGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt5yw7s0mt1m1960a878.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IothhfGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt5yw7s0mt1m1960a878.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UvNRWcpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jspnd55u9xd7eby6wr79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UvNRWcpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jspnd55u9xd7eby6wr79.png" alt="Image description" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tanh"&gt;
  &lt;/a&gt;
  Tanh
&lt;/h4&gt;

&lt;p&gt;Tanh is similar to Sigmoid, except it maps inputs to values between -1 and 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JimIOwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw436xbomm7t19qwg0ru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JimIOwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw436xbomm7t19qwg0ru.png" alt="Image description" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#softmax"&gt;
  &lt;/a&gt;
  Softmax
&lt;/h4&gt;

&lt;p&gt;Softmax takes in an input and maps it out as a probability distribution (meaning all the values in the output sum to 1).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jckUop04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4utxxcbspjs5gtry70b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jckUop04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4utxxcbspjs5gtry70b.png" alt="Image description" width="513" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(z is the input vector, K is the length of the input vector)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-code"&gt;
  &lt;/a&gt;
  Writing the code
&lt;/h2&gt;

&lt;p&gt;We will need numpy for our matrix operations...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, let's write our linear layer class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#initialise weights and biases if the linear layer is being called for the first time
&lt;/span&gt;        &lt;span class="c1"&gt;#weights and biases must be initialised with a matrix shape that is with compatible the operations it's involved in with the input matrix
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;#formula for calculating linear layer output
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example usage...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; [[-2.63399933 -1.18289984  0.32129587  0.2903246  -0.2602642 ]]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's write all our activation function classes, following the formulae given previously&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sigmoid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Relu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Softmax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tanh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's write a "Model" class, which will act as a container for all our layers / the actual neural network class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save all of those classes into "layer.py" (or any name you wish).&lt;/p&gt;

&lt;p&gt;Now we can build a simple neural network, with our tiny library so far&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;layers&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;#inputs array
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

&lt;span class="c1"&gt;#network uses all the layers we have designed so far
&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sigmoid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Softmax&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Relu&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>deeplearning</category>
      <category>numpy</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Find safe and reusable code within your IDE in seconds</title>
      <author>Julien</author>
      <pubDate>Mon, 27 Dec 2021 20:59:41 +0000</pubDate>
      <link>https://dev.to/codiga/find-safe-and-reusable-code-within-your-ide-in-seconds-55g3</link>
      <guid>https://dev.to/codiga/find-safe-and-reusable-code-within-your-ide-in-seconds-55g3</guid>
      <description>&lt;p&gt;Any developer knows how difficult it can be to find the right code online that is safe, secure and reliable. We use these building blocks as a basis to build programs, but searching for this code online can be time consuming, not to mention untrustworthy. You may spend precious time sourcing code that turns out to be outdated or unsafe, leading to a lot of wasted time that could have been avoided. &lt;/p&gt;

&lt;p&gt;At &lt;a href="https://codiga.io/"&gt;Codiga&lt;/a&gt;, we firmly believe that whether you work alone or with a team of developers, coding should be a truly collaborative experience. Being able to share and receive code patterns from other developers that you trust can save you an infinite amount of time and minimize the amount of potential mistakes. We want to eliminate the guesswork for you and allow you to become a part of a network of thousands of talented and trusted developers just like you. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.codiga.io/marketplace"&gt;Coding Assistant&lt;/a&gt; does just that. Think of it as a network of like-minded people who are sharing and taking code from one another to help enrich their projects and save each other hours, so you can stop searching and start coding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.codiga.io/marketplace"&gt;Coding Assistant&lt;/a&gt; couldn’t be easier to use, and works anywhere you write code. It can be easily added to your environment using our &lt;a href="https://marketplace.visualstudio.com/items?itemName=codiga.vscode-plugin"&gt;VS Code&lt;/a&gt;, &lt;a href="https://plugins.jetbrains.com/plugin/17969-codiga"&gt;JetBrains&lt;/a&gt;, or &lt;a href="https://chrome.google.com/webstore/detail/codiga/dbkhkhonmelajjempmoadocgneoadjge"&gt;Chrome&lt;/a&gt; plugins, which will populate the Recipes directly in your environment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recipes-amp-marketplace"&gt;
  &lt;/a&gt;
  Recipes &amp;amp; Marketplace
&lt;/h1&gt;

&lt;p&gt;Reusable blocks of code are known as Recipes. This feature works anywhere you write code and in any language, and you can import code into your IDE in a matter of seconds by simply typing in a few key words (for example &lt;code&gt;create table&lt;/code&gt; in a HTML file of &lt;code&gt;read csv file&lt;/code&gt; in a Python file). Our automated platform will determine the right code for you based on a number of criteria; keywords, popularity, rating, libraries used and language. Our algorithm will find the right match for your needs, and the Recipe will be imported into your IDE instantly, and you can begin to build your project in no time.&lt;/p&gt;

&lt;p&gt;You can search for and subscribe to Recipes within the &lt;a href="https://app.codiga.io/marketplace"&gt;Coding Assistant Marketplace&lt;/a&gt;. Here, you can define search Recipes by name or language, or use our more advanced search settings to search for keywords and tags associated with the Recipes you are looking for. Once you find the right Recipe, you can subscribe to it and easily populate it directly in your IDE by simply typing in the name or a keyword into your top bar.&lt;/p&gt;

&lt;p&gt;These Recipes have been added, vetted and used by thousands of other developers, so you can be sure you are only getting the most accurate and safe code to help your development. It allows you to source Recipes for code you might not have a lot of experience writing, so you don’t have to spend crucial hours trying to find and adapt it yourself. You can see how many times a recipe has been used by another developer, as well as any comments and ratings on the Recipes so you can get a full understanding of the code you will be using.&lt;/p&gt;

&lt;p&gt;Providing you with the most reliable Recipes is our main priority, so we allow users to flag a Recipe that might not be 100% accurate. We take these flags very seriously, and ask that you provide us a reason why you feel this Recipe cannot be utilized in a safe or efficient manner. Once a Recipe has been flagged by a user and looked into by our team, Coding Assistant will never suggest or populate it in your environment again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-recipes"&gt;
  &lt;/a&gt;
  Adding Recipes
&lt;/h2&gt;

&lt;p&gt;We want Coding Assistant to be a give and take environment, so that’s why we made it very simple to add your own Recipes that can be shared with your team or any other developers on our platform. This allows you to easily help out your fellow developers across the world, or streamline projects with your own team by sharing reusable Recipes, meaning your project will be consistent amongst the engineers working on it. Recipes can be created in our web interface, seen below, or directly in your IDE (more on this below).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--28Lci2ZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://doc.codiga.io/img/coding-assistant/creating-recipes.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--28Lci2ZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://doc.codiga.io/img/coding-assistant/creating-recipes.gif" alt="Create a Recipe" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to stay directly in your IDE and not have to navigate around multiple environments, Coding Assistant allows you to create a Recipe right where you are working. Once you write or find a piece of code you want to share, simply highlight it, right click directly in your environment, select create &lt;code&gt;Codiga Recipe&lt;/code&gt; and you’ll be asked to add a name, language, a brief description, and most importantly, the keywords that will trigger a recipe to populate in Coding Assistant. Once saved, your Recipe will be available instantly to any developer within our network. Recipes can either be public or private, but know that once you have determined the visibility, it cannot be altered once the Recipe has been added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cookbooks"&gt;
  &lt;/a&gt;
  Cookbooks
&lt;/h2&gt;

&lt;p&gt;As you might have guessed, a Cookbook is a collection of Recipes, and allows you to store multiple pieces of code together in one place for a particular project to keep things better organized. When creating a Recipe, there is an option to add it into a Cookbook that can be shared privately or publicly with the entire platform. You can also subscribe to Cookbooks, which means you will automatically be able to see all public Recipes within the Cookbook. Cookbooks help you keep code for a team project organized, or allow you to add to an existing library you have created of similar code that can be used separately or together.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ide-integration"&gt;
  &lt;/a&gt;
  IDE Integration
&lt;/h1&gt;

&lt;p&gt;Codiga IDE Plugins for &lt;a href="https://marketplace.visualstudio.com/items?itemName=codiga.vscode-plugin"&gt;VS Code&lt;/a&gt;, &lt;a href="https://plugins.jetbrains.com/plugin/17969-codiga"&gt;JetBrains-based&lt;/a&gt; products (IntelliJ, CLion, PyCharm, etc) and &lt;a href="https://chrome.google.com/webstore/detail/codiga/dbkhkhonmelajjempmoadocgneoadjge"&gt;Chrome&lt;/a&gt; make using Coding Assistant extremely efficient and means you can create and use Recipes directly in your IDE environment. One plugin supports all languages; Apex, C, C++, Dart, Docker, Go, Java, Javascript, Kotlin, PHP, Python, Ruby, Scala, Shell Script, Terraform, Typescript, and YAML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code"&gt;
  &lt;/a&gt;
  VS Code
&lt;/h2&gt;

&lt;p&gt;Setting VS Code is simple, and is done in the plugin section. You can find said plugin within the VS Code Marketplace. It’s important to remember to link your Codiga account using an API token, done in the settings section. This gives you access to all of the public Recipes in our network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUUKy-xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2u7m6mtg64b8w9exnxj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUUKy-xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2u7m6mtg64b8w9exnxj.gif" alt="Import recipe in VS Code" width="880" height="591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have subscribed to Recipes, you can use them within VS Code by selecting Codiga: Use Recipe(CTRL+SHIFT+C and search for Codiga). To make things even more efficient for you, Coding Assistant on VA Code allows you to populate a Recipe by typing a keyword on a single line, and the Recipe will appear instantly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jetbrains"&gt;
  &lt;/a&gt;
  Jetbrains
&lt;/h2&gt;

&lt;p&gt;The Codiga Jetbrains plugin is easily downloaded from the Jetbrains marketplace, and is available to install with all Jetbrains plugins including IntelliJ, PHP Storm, PyCharm and more. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2FFAK5NR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf660uveuvatqw8fu6gp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2FFAK5NR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf660uveuvatqw8fu6gp.gif" alt="Import recipes in JetBrains" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find a Recipe on Jetbrains, you can select the menu and then find Coding Assistant. You can also trigger the menu using CTRL+ALT+C. From there and as shown below, a window will populate for you to type in keywords to find the Recipe you have subscribed to and want to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chrome"&gt;
  &lt;/a&gt;
  Chrome
&lt;/h2&gt;

&lt;p&gt;Codiga’s Chrome Integration can be downloaded from the Chrome Store and is compatible with all Chrome-based browsers. What’s amazing about our Chrome plugin is that it allows you to create a Recipe by highlighting and selecting a piece of code on any Chrome browser from around the web. From there, all you need to do is right click and select &lt;code&gt;Create Codiga Recipe&lt;/code&gt; and you’ll be directed to the page to determine the specifics of your Recipe, and the code will automatically populate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wp1S0kXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://doc.codiga.io/img/coding-assistant/chrome-create-recipe.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wp1S0kXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://doc.codiga.io/img/coding-assistant/chrome-create-recipe.gif" alt="Create Recipes in Chrome" width="800" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;We are passionate about making coding as efficient and fast as possible, and Coding Assistant allows you to not only save yourself time, but also help your fellow software engineers save themselves a lot of headaches. Once you try it and see how easy the smart Coding assistant is, you will never go back to the days of scouring the web for a snippet of code. The more Recipes and Cookbooks our platform has, the more robust it becomes for all users, so we encourage you to try the Coding Assistant Feature for yourself and see how much easier it will make your daily working life!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=codiga.vscode-plugin"&gt;VS Code Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plugins.jetbrains.com/plugin/17969-codiga"&gt;JetBrains Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/codiga/dbkhkhonmelajjempmoadocgneoadjge"&gt;Chrome Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.codiga.io/marketplace"&gt;Codiga Coding Assistant Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.codiga.io/docs/coding-assistant/coding-assistant-getting-started/"&gt;Coding Assistant Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>assistant</category>
      <category>snippets</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Capturando erros no React Native utilizando o Sentry.io</title>
      <author>Emerson Stark</author>
      <pubDate>Mon, 27 Dec 2021 20:39:27 +0000</pubDate>
      <link>https://dev.to/starkdev/capturando-erros-no-react-native-utilizando-o-sentryio-5bd5</link>
      <guid>https://dev.to/starkdev/capturando-erros-no-react-native-utilizando-o-sentryio-5bd5</guid>
      <description>&lt;p&gt;&lt;strong&gt;O Que é o Sentry?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basicamente, o &lt;a href="//sentry.io"&gt;sentry&lt;/a&gt; é uma ferramenta que nos auxilia na captura de erros que acontecem nas nossas aplicações em modo debug e também em produção.&lt;/p&gt;

&lt;p&gt;é só isso mesmo!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bora ver como isso funciona?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VzM3CW3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aled0dzq820v0s716d1i.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VzM3CW3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aled0dzq820v0s716d1i.jpeg" alt="Image description" width="612" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Crie uma conta no &lt;a href="//sentry.io"&gt;sentry&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vai em &lt;em&gt;Criar um projeto&lt;/em&gt; e selecione a plataforma ( no nosso caso, REACT NATIVE ) e clica em Criar projeto.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZrBpe8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bdugtpk5o85tlqt9ic6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZrBpe8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bdugtpk5o85tlqt9ic6.png" alt="Image description" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#agora-no-nosso-projeto-react-native"&gt;
  &lt;/a&gt;
  Agora no nosso projeto React Native
&lt;/h2&gt;

&lt;p&gt;1 - Instalar a biblioteca de integração do Sentry com o React Native.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save @sentry/react-native
# or
yarn add @sentry/react-native
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 - Adicionar o Sentry no nosso aplicativo&lt;/p&gt;

&lt;p&gt;Você pode adicionar a chamada do sentry no seu app.js ou app.ts da seguinte maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: SUA_DSN_AQUI
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Sua DSN aparece logo após você criar o seu projeto React Native na plataforma do Sentry&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3 - Faça o build da sua aplicação novamente&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; yarn android 
 ou
 yarn ios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pronto, sua aplicação agora está sendo monitorada pelo sentry, e qualquer erro ele vai te mostrar em uma dashboard da plataforma.&lt;/p&gt;

&lt;p&gt;Você também consegue ver algumas métricas do dispositivo do usuário, como:&lt;/p&gt;

&lt;p&gt;Nível de bateria, network que estava sendo utilizada no momento do crash, IP e etc...&lt;/p&gt;

&lt;p&gt;É isso galera, qualquer dúvida deixe nos comentários :D&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
