<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn CSS Grid in 5 minutes</title>
      <author>Sagar Barapatre</author>
      <pubDate>Sat, 13 Nov 2021 02:59:49 +0000</pubDate>
      <link>https://dev.to/sagarbarapatre/learn-css-grid-in-5-minutes-1j0n</link>
      <guid>https://dev.to/sagarbarapatre/learn-css-grid-in-5-minutes-1j0n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#a-quick-tutorial-on-the-future-of-website-layouts"&gt;
  &lt;/a&gt;
  A quick tutorial on the future of website layouts.
&lt;/h3&gt;

&lt;p&gt;Grid layouts are fundamental to the design of websites, and the CSS Grid module is the most powerful and easiest tool for creating it. I personally think it’s a lot better than for example Bootstrap (read why &lt;a href="https://hackernoon.com/how-css-grid-beats-bootstrap-85d5881cf163"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The module has also gotten native support by the &lt;a href="https://caniuse.com/#feat=css-grid"&gt;major browsers&lt;/a&gt; (Safari, Chrome, Firefox, Edge) this year, so I believe that all front-end developer will have to learn this technology in the &lt;em&gt;not too distant&lt;/em&gt; future.&lt;/p&gt;

&lt;p&gt;In this article, I’ll take you through the very basics of CSS Grid as quickly as possible. I’ll be leaving out everything you shouldn’t care about until you’ve understood the basics.&lt;/p&gt;

&lt;p&gt;Now let’s jump into it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-grid-layout"&gt;
  &lt;/a&gt;
  Your first grid layout
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The two core ingredients of a CSS Grid are the wrapper&lt;/strong&gt; &lt;strong&gt;(parent) and the items (children). The wrapper is the actual&lt;/strong&gt; &lt;strong&gt;grid and the items are the content inside the grid.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s the markup for a wrapper with six items in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To turn our wrapper &lt;code&gt;div&lt;/code&gt; into a &lt;strong&gt;grid&lt;/strong&gt;, we simply give it a display of &lt;code&gt;grid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, this doesn’t do anything yet, as we haven’t defined how we want our grid to look like. It’ll simply stacks 6 &lt;code&gt;div's&lt;/code&gt; on top of each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiTBF34p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6xxe3ootqt2gjg0abf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiTBF34p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6xxe3ootqt2gjg0abf5.png" alt="I’ve added a bit of styling, but that hasn’t got anything to do with CSS grid." width="700" height="206"&gt;&lt;/a&gt;&lt;br&gt;
I’ve added a bit of styling, but that hasn’t got anything to do with CSS grid.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#columns-and-rows"&gt;
  &lt;/a&gt;
  Columns and rows
&lt;/h3&gt;

&lt;p&gt;To make it two-dimensional, we’ll need to define the columns and rows. Let’s create three columns and two rows. We’ll use the &lt;code&gt;grid-template-row&lt;/code&gt; and &lt;code&gt;grid-template-column&lt;/code&gt; properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we’ve written three values for &lt;code&gt;grid-template-columns&lt;/code&gt;, we’ll get three columns. We’ll get two rows, as we’ve specified two values for the &lt;code&gt;grid-template-rows&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The values dictate how wide we want our columns to be (100px) and how tall we’d want our rows to be (50px). Here’s the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVBYyF0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbote8w1p98bk943oji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVBYyF0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbote8w1p98bk943oji.png" alt="Imagenckjnaj" width="700" height="159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make sure you properly understand the relation between the values and how the grid looks, take a look at this example as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to grasp the connection between the code and the layout.&lt;/p&gt;

&lt;p&gt;Here’s how it plays out:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m65cezaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cibtwix71o8dp5zq4l15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m65cezaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cibtwix71o8dp5zq4l15.png" alt="Imagekmkmlams" width="700" height="176"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#placing-the-items"&gt;
  &lt;/a&gt;
  Placing the items
&lt;/h3&gt;

&lt;p&gt;The next thing you’ll need to learn is how to place items on the grid. This is where you get superpowers, as it makes it dead simple to create layouts.&lt;/p&gt;

&lt;p&gt;Let’s create a 3x3 grid, using the same markup as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in the following layout:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpWArMim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb14oi4m6ftfl5bdbjpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpWArMim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb14oi4m6ftfl5bdbjpy.png" alt="Imagemalslkm" width="700" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Notice, we only see a 3x2 grid on the page, while we defined&lt;/code&gt; &lt;code&gt;it as a 3x3 grid. That’s because we only have six items to&lt;/code&gt; &lt;code&gt;fill the grid with. If we had three more, then the lowest row would be filled as well.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To position and resize the items we’ll target them and use the &lt;code&gt;grid-column&lt;/code&gt; and &lt;code&gt;grid-row&lt;/code&gt; properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we’re saying here is that we want item1 to start on the first grid line and end on the fourth column line. In other words, it’ll take up the entire row. Here’s how that’ll play out on the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXabrSlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wk52uh7hnmnu69d33xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXabrSlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wk52uh7hnmnu69d33xv.png" alt="Imagoopido" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you confused why we have 4 column lines when we only have 3 columns. Take a look at this image, where I’ve drawn the column lines in black:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGTl6TQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgetu40i925spdja61bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGTl6TQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgetu40i925spdja61bu.png" alt="Imagelmak" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that we’re now using all the rows in the grid. When we made the first item take up the entire first row, it pushed the rest of the items down.&lt;/p&gt;

&lt;p&gt;Finally, I’d like to show a simpler way of writing the syntax above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure you’ve understood this concept properly, let’s rearrange the items a little bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s how that looks on the page. Try to wrap you head around why it looks like it does. It shouldn’t be too hard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4WchxUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20l5in2ja63nxb81210s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4WchxUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20l5in2ja63nxb81210s.png" alt="Imagsbajaks" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that was it!&lt;br&gt;
Thanks for reading! My name is Sagar Barapatre, and I often write about learning new stuff. Follow me on &lt;a href="https://twitter.com/sagar_sb_"&gt;Twitter&lt;/a&gt; if you want to keep in touch.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>codepen</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Easy Conversion Tracking with PropelAuth</title>
      <author>propelauthblog</author>
      <pubDate>Sat, 13 Nov 2021 02:44:41 +0000</pubDate>
      <link>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</link>
      <guid>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</guid>
      <description>&lt;p&gt;Almost every advertising platform has a concept of "conversion tracking." When someone clicks on your ad, conversion tracking is a way to determine how valuable that click was. Did the user leave after 5 seconds? Did they sign up? Did they buy something?&lt;/p&gt;

&lt;p&gt;By providing answers to those questions to your advertiser, they can tune the ads to get the outcomes you want. Usually this is done by copying some javascript onto your site and triggering events on the actions you want to encourage.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://www.propelauth.com"&gt;PropelAuth&lt;/a&gt;, we strongly believe that your auth tool should take on as much as possible in order to get you back to building your product. PropelAuth does this by providing a fully configurable, hosted authentication service - complete with a UI, straightforward documentation, and easy to use libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" alt="Screenshot of setting up conversion" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To further our mission of taking on as much of the work surrounding auth as possible, we're releasing support for signup conversion tracking. If you want your ads to optimize for user signups, just enter the ID supplied by your advertiser, and we handle the rest. From email/password to social signups, we'll automatically trigger the correct event for your advertiser.&lt;/p&gt;

&lt;p&gt;We currently support Google, Reddit, Facebook, and Twitter. Looking for a different advertiser? Let us know at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>marketing</category>
      <category>tooling</category>
      <category>startup</category>
      <category>advertising</category>
    </item>
    <item>
      <title>Data Access in F#</title>
      <author>Angel D. Munoz</author>
      <pubDate>Sat, 13 Nov 2021 02:27:40 +0000</pubDate>
      <link>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</link>
      <guid>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</guid>
      <description>&lt;p&gt;Hello there, this is the next entry in Simple Things F#.&lt;/p&gt;

&lt;p&gt;Today we'll talk about Database access. Databases are something we have to use very often after all it is where we store our data most common databases we use are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Databases&lt;/li&gt;
&lt;li&gt;NoSQL Databases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won't dive deep into the differences between them, rather than that I will focus on how you can access these databases from F# code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As in previous entries I'll be using F# scripts which can be executed with the .NET CLI that comes in the .NET SDK which you can get from here: &lt;a href="https://get.dot.net"&gt;https://get.dot.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's review our options for today&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; - Dapper Wrapper (i.e. anything that MSSQL, PostgreSQL, MySQL supports)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; - ADO.NET wapper (i.e MSSQL, PostgreSQL, SQLite, MySQL, and others)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AngelMunoz/Mondocks"&gt;Mondocks&lt;/a&gt; - MongoDB DSL for the MongoDB .NET Driver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will not complicate things and work with simple DB Schemas, and we will be using PostgreSQL since it's a pretty common database used around the world, but please keep in mind these solutions (and others that I will share at the end) work with MSSQL and MySQL as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have docker installed, spin up a postgresql instance&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d \
 --name my-instance-name \
 -e POSTGRES_PASSWORD=Admin123 \
 -e POSTGRES_USER=admin
 -p 5432:5432 \
 postgres:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;This will be our little schema, nothing fancy something just to get started with some F# code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;references&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can create the PostgreSQL database using any DB manager you already know. In case you don't have anything available you can use &lt;a href="https://dbeaver.io/"&gt;dbeaver&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you have your database cretated and have the schema in place let's begin with the cool stuff&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dapperfsharp"&gt;
  &lt;/a&gt;
  Dapper.FSharp
&lt;/h2&gt;

&lt;p&gt;If you like ORMs this is going to be a library for you, given that you can map records to tables so using them is seamless, also Dapper.FSharp adds a couple of F# types to make your life easier.&lt;/p&gt;

&lt;p&gt;Let's check what are our F# records going to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we just did a 1-1 record translation, more complex schemas may differ from what your application is using you can use DTO's or anonymous records to work with these differences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From F# 5.0 + you can "require" NuGet packages in F# scripts&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// we can use this function to match tables&lt;/span&gt;
    &lt;span class="c1"&gt;// with different names to our record definitions&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="c1"&gt;/// In normal circunstances you would write&lt;/span&gt;
&lt;span class="c1"&gt;/// `use! conn = new NpgsqlConnection(connString)`&lt;/span&gt;
&lt;span class="c1"&gt;/// but inside F# scripts we're not allowed for top declarations like this,&lt;/span&gt;
&lt;span class="c1"&gt;/// so we use let instead&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Generate two different authors&lt;/span&gt;
&lt;span class="c1"&gt;// one with an optional handle to see how we can deal with null values&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// If you were to use ASP.NET core&lt;/span&gt;
&lt;span class="c1"&gt;// you would be running on a task or async method&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// the `!` here indicates that we will wait&lt;/span&gt;
    &lt;span class="c1"&gt;/// for the `InsertAsync` operation to finish&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// here's the Dapper.FSharp magical DSL&lt;/span&gt;
        &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt;
            &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InsertAsync&lt;/span&gt;

    &lt;span class="c1"&gt;/// If all goes well you shoul'd see&lt;/span&gt;
    &lt;span class="c1"&gt;/// `Rows Affected: 2` in tour console&lt;/span&gt;
    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Rows Affected: %i{result}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get a message like "warning FS3511: This state machine is not statically compilable." don't worry it is being tracked in &lt;a href="https://github.com/dotnet/fsharp/issues/12038"&gt;https://github.com/dotnet/fsharp/issues/12038&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cool! so far we have inserted two authors to our database from our mapping, now let's bring those folks back&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;selectAll&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Names: "&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.name}"&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Twitter Handles:"&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;// we use .Value because filter users whose handle is None&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.twitter_handle.Value}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Names:
  Angel D. Munoz
  Misterious Person
Twitter Handles:
  angel_d_munoz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check the update code, which to be honest is pretty similar, what do we update though? Our Mysterious user doesn't have a twitter handle, so let's add one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// let's try to get the first result from the result set&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if there is one, let's update it&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// partially update the record of the user with&lt;/span&gt;
            &lt;span class="c1"&gt;// the F# record update syntax&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
                    &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;UpdateAsync&lt;/span&gt;

        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Users updated: %i{result}"&lt;/span&gt;
    &lt;span class="c1"&gt;// if we have run this script, our result set will be empty&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Users Without handle were Found"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the script is run, we should see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Users updated: 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run it for a second time we'll see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No Users Without handle were Found&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run the "select" script we'll should see the &lt;code&gt;mysterious_fsharper&lt;/code&gt; handle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Twitter Handles:
  angel_d_munoz
  mysterious_fsharper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, things have been quite straight forward, but what if you don't like the ORM style? If you like to write SQL like a real programmer (&lt;em&gt;&lt;strong&gt;Which of course, it's sarcasm&lt;/strong&gt;&lt;/em&gt;.) or you simply like to write your SQL queries, let's then take a look at &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#donald"&gt;
  &lt;/a&gt;
  Donald
&lt;/h2&gt;

&lt;p&gt;Donald can help us to have a 1-1 mapping with our models just like &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; but it needs help from our side, it is quite flexible in some aspects and tedious in others let's see how can we add these helpers.&lt;/p&gt;

&lt;p&gt;For the Donald scripts we will modify our &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; records a little bit, we will add a static function called &lt;code&gt;DataReader&lt;/code&gt; which will take an &lt;code&gt;IDataReader&lt;/code&gt; and return the corresponding record&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;

&lt;span class="c1"&gt;// Same Author model from before&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Add the DataReader&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// the reader has some functions that help us map&lt;/span&gt;
        &lt;span class="c1"&gt;// existing columns from the database and their&lt;/span&gt;
        &lt;span class="c1"&gt;// data type to our record, this can be really great&lt;/span&gt;
        &lt;span class="c1"&gt;// when you need to work on a schema you don't own&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We do the same with the Post record&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more patterns you can follow rather than attaching the static function directly to the Record, you could have a &lt;code&gt;module Author = ...&lt;/code&gt; which contains helper functions (like the data reader) but for simplicity we will attach it right there in the record.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; offers two syntax styles when it comes to creating and manipulating queries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fluent Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fluent style is an approach based on piping functions (i.e. using &lt;code&gt;|&amp;gt;&lt;/code&gt;), this is similar to other fluent APIs in other languages like &lt;code&gt;db.newCommand(cmd).setParams(params).execute()&lt;/code&gt; these are common in C#, in the case of F# we do something like that but using individual functions and partial application in some cases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsFluent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newCommand&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setParams&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Expression Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Expression style, uses what in F# we call &lt;code&gt;Computation Expressions&lt;/code&gt; which you already used with &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;! Here's the same previous query with the expression style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsExpression&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
          &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are slightly different and depending on your background one might feel more comfortable than the other Feel free to choose the one you like the best, in my case I will continue the rest of the post with the Expression based one given that we already have some expression based code from &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;. Previously we added some authors, let's try to add Posts to those authors with &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// let's query all of the authors&lt;/span&gt;
    &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// authorsResult is a DbResult&amp;lt;Author list&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// that is a helper type&lt;/span&gt;
    &lt;span class="c1"&gt;// which help us successful and failed database operations&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if the operation was successful return the authors&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise print to the console what failed&lt;/span&gt;
    &lt;span class="c1"&gt;// and return an empty list&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"%O"&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="s2"&gt;"""INSERT INTO posts(id, title, content, authorId)
     VALUES(@id, @title, @content, @authorId)"""&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt;

            &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt;
                       &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"RandomPost: {postId}"&lt;/span&gt;
                       &lt;span class="s2"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="s2"&gt;"This is an extremely Long Post!..."&lt;/span&gt;
                       &lt;span class="s2"&gt;"authorId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted post with id: {postId}"&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Failed to insert post with id: {postId}... {err}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point we should have one post for each user in our database you can run it a couple times more to insert other posts if you wish, but I think these scripts show how you can do Database operations with these libraries&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-libraries"&gt;
  &lt;/a&gt;
  Other Libraries
&lt;/h2&gt;

&lt;p&gt;The F# ecosystem has several options that can appeal to developers of all kinds here are a few more that are worth looking at if you're looking for more alternatives&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RepoDB - &lt;a href="https://github.com/mikependon/RepoDB"&gt;https://github.com/mikependon/RepoDB&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RepoDB is a .NET micro ORM Database library that focuses on performance and has compatibility with many adapters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dusty Tables - &lt;a href="https://github.com/Zaid-Ajaj/DustyTables"&gt;https://github.com/Zaid-Ajaj/DustyTables&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid is an F# OSS Beast, Dusty tables is a simple functional wrapper on top of the SqlClient ADO.NET adapter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npgsql.FSharp - &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp&lt;/a&gt; , &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid once again showing us the F# OSS spirit, this time with Npgsql.FSharp which is a PostgreSQL focused wrapper which has a SQL analyzer that can type verify your queries against your database at compile time!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLHydra - &lt;a href="https://github.com/JordanMarr/SqlHydra"&gt;https://github.com/JordanMarr/SqlHydra&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQLHydra provides a CLI experience for record generation from an existing database Schema plus a SQL query builder similar to Dapper.FSharp, this is a more complete solution that works for Postgres, MSSQL and SQLite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-elephant-in-the-room"&gt;
  &lt;/a&gt;
  The elephant in the Room...
&lt;/h3&gt;

&lt;p&gt;EntityFramework has always been unfriendly to F# given how it relies on inheritance and mutability which isn't bad, it is the most used ORM in C# after all but it provides some heavy friction with F#, recently C# added records to the language and even if they are not like F# ones, they can be immutable just like F# ones, so with these Records it might be on a better place but I haven't been able to try it nor have the excitement to test it to be honest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-mondocks"&gt;
  &lt;/a&gt;
  Bonus! Mondocks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Time for some shameless plug (with some shame)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know, I Know... .NET is not the most friendly towards mongodb databases given how schemaless it is, and with F# it is even worse! there's a lot of cases where you can have missing properties (which is the same as having a null or even worse some times) but if you control the Database or for some reason you need to interact with Mongo Databases (perhaps because you're migrating from Node.js or similar) I took some time to work out on a DSL that is quite similar to Node's MongoDB query language.&lt;/p&gt;

&lt;p&gt;The approach with Mondocks is somewhat different, with Mondocks ideally you want to work with anonymous records to shape your data and then once you have the information do the mapping to the corresponding Record or DTO&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;MongoDB&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InsertResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted: %i{result.n}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;To do an update it's a similar case, we will fetch the author first then we will update it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Bson&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
        &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindResult&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// check on the database result set if we have an author&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstBatch&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// query by author _id&lt;/span&gt;
            &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;._&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
                        &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                              &lt;span class="c1"&gt;// set the updated handle&lt;/span&gt;
                              &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;multi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;upsert&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;collation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;arrayFilters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;hint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UpdateResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Updated: %i{result.n}"&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Author was found"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will also see that you lost a lot of safety doing these kinds of queries, given the nature of MongoDB it's hard to keep safety around it overall, however if you come from a dynamic runtime this DSL might feel a little bit more to what you're used to, there are some rough corners but I invite you to try it and log issues, if you're looking for an F# OSS project to dip your toes, it might be a great one :)&lt;/p&gt;

&lt;p&gt;Also, you can use the usual MongoDB Driver as well you can use both side by side to be honest I made it in a way that doesn't require you to jump out from a standard .NET Driver experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts...
&lt;/h2&gt;

&lt;p&gt;When it comes to SQL F# is a safe bet be it on the server, scripts and other environments F# can help you keep type safety between your database and your application, there are plenty of alternatives for you to try and I'm pretty sure you'll find what fits best for you.&lt;/p&gt;

&lt;p&gt;We'll catch ourselves on the next time!&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>sql</category>
      <category>mongodb</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Using the affix plugin in bootstrap 4.</title>
      <author>Gemini392</author>
      <pubDate>Sat, 13 Nov 2021 01:26:10 +0000</pubDate>
      <link>https://dev.to/gemini392/using-the-affix-plugin-in-bootstrap-4-15o1</link>
      <guid>https://dev.to/gemini392/using-the-affix-plugin-in-bootstrap-4-15o1</guid>
      <description>&lt;p&gt;Have you ever been on a site and there is this really cool feature you can't get enough of? And what's more, as you scroll on further, the feature stays in place, as if it has been glued to that portion of the screen. Awesome, right? Yes! &lt;/p&gt;

&lt;p&gt;All you have to say is 'cool'. But in this article, we will transform your awe to practicality, using bootstrap 4 of course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Say we made a pretty vertical side navigation bar, and we know that people who visit our site are going to love it.It doesn't necessarily need to beautify the page. Sometimes, web pages come like books with sections or chapters.If a user needed to see only a particular chapter of that book he/she would need to scroll forever. The affix plugin reduces all that time wasted by a lot. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Bootstrap will be our working tool. But what exactly do we need, you might ask? We want to use the affix plugin. This feature will help us 'stick' blocks of code (from horizontal navigation bars, to vertical side navigation bars) on our web page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: I will be taking you gradually through the coding steps, and you'll see how easy it is to solve our little problem. &lt;/p&gt;

&lt;p&gt;But first of, I'll assume that you started off your html page by linking all related bootstrap CDNs. If you have your files installed locally on your machine, then you're still awesomely prepared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; &lt;br&gt;
Our side nav isn't just going to start from anywhere.That might not look as okay as we want it to be. So, let's create some content at the beginning of the page instead. Say, a few paragraphs to introduce our user to our page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3nrXheh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzaxcctptlpnms08baol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3nrXheh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzaxcctptlpnms08baol.png" alt="Paragraphs" width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Now that the page intro is out the way,we can start on our side nav. We are going to create a list, it could be ordered or unordered depending on you.&lt;/p&gt;

&lt;p&gt;Let's drop the code, and then explain it, shall we?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-tlu4yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s07uu8lrnli8a9oo2eg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-tlu4yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s07uu8lrnli8a9oo2eg9.png" alt="Image description" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want you to notice quite a few things here. First of all, I want you to take note of how we enclose everything in a container from this point. We've also made use of the bootstrap grid system, and we've assigned 3 columns to our navigation menu. You can already picture the menu occupying a  portion of the left side of your screen, and your content falling on the other side.&lt;/p&gt;

&lt;p&gt;Another pretty amazing thing to remark, is what is enclosed by our &lt;code&gt;ul&lt;/code&gt; tag. What I want you to see is &lt;code&gt;data-spy&lt;/code&gt; and &lt;code&gt;data-offset-top&lt;/code&gt;. So, basically, we add &lt;code&gt;data-spy&lt;/code&gt; to the element we want to affix. Well, obviously, because its value is &lt;code&gt;affix&lt;/code&gt;. The &lt;code&gt;data-offset-top&lt;/code&gt; tells us how many pixels we should scroll, before the sticking effect kicks in. In our case, we chose 205px. Feel free to try this with different values, of course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;br&gt;
Our side nav bar is out there. Is that it? Hell,no it isn't. What will your users scroll through? Where is the actual page? You made a great table of content, where are the book pages? &lt;/p&gt;

&lt;p&gt;This is the part where we make that. It'll just be random content to illustrate the 'scroll and see sticky' effect. Let's write a few more paragraphs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auyYdSgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxv87p7yz3dzkcyg98mi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auyYdSgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxv87p7yz3dzkcyg98mi.png" alt="Image description" width="880" height="874"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see now, we added our new content over 9 columns. This is what will appear on the other portion of the screen. In other words, it is what you will be scrolling through.&lt;/p&gt;

&lt;p&gt;But it does not really end there. In order to make this function perfectly we need a teeny bit of css.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AT-GQKvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwvem7dxuz3q8erd33un.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AT-GQKvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwvem7dxuz3q8erd33un.png" alt="Image description" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;top&lt;/code&gt; to make sure that our menu bar sticks to the top as we scroll. We have given it a value of 20px in this case, so that as soon as the sticky effect takes place, our vertical menu bar stays 20px from the top of the page.&lt;/p&gt;

&lt;p&gt;And voila! Too technical? Too hard? Easier than you thought? You're smart, I know you'll get it. &lt;/p&gt;

&lt;p&gt;After going through this article, I hope you've learned something. &lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Most Popular Web Application Frameworks</title>
      <author>matthewekeller</author>
      <pubDate>Sat, 13 Nov 2021 00:49:09 +0000</pubDate>
      <link>https://dev.to/matthewekeller/most-popular-web-application-frameworks-135p</link>
      <guid>https://dev.to/matthewekeller/most-popular-web-application-frameworks-135p</guid>
      <description>&lt;p&gt;Many companies large and small fret over which web application framework to use to create a new application.  Listed below are the main categories of choices, products within those choices, and the pros and cons of each choice.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-solutions-architects-first-choice-is-to-decide-if-they-want-to-use-server-side-or-client-side-html-rendering"&gt;
  &lt;/a&gt;
  The solutions architects first choice is to decide if they want to use &lt;u&gt;server side&lt;/u&gt; or &lt;u&gt;client side&lt;/u&gt; HTML rendering.
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-server-side-rendering"&gt;
  &lt;/a&gt;
  1) Server side rendering
&lt;/h2&gt;

&lt;p&gt;Originally all web application frameworks had the UI rendered server side.  This is because the world wide web started out as static content, consisting of HTML pages.  If you wanted to update your static website you would upload a newer version of your HTML file to your web server.  Very quickly the need to make the web page dynamic, for example to render your bank account contents, became obvious so frameworks and entire programming languages were written to make this possible.&lt;/p&gt;

&lt;p&gt; Pros&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Highly intuitive - Code the static html and indicate places in it where dynamic content will be inserted.&lt;/p&gt;

&lt;p&gt;2) Complete artistic design freedom - The look and feel of your web page is only limited by your ability to layout html and css.  Many frameworks sell themselves as being component based, when the truth is that HTML already consists of components.  They are called HTML input tags.  The only drawback is that a good web designer can be hard to find, and they are usually a different breed than a web developer, usually experts in photoshop rather than javascript. So, if you want a truly beautiful and interactive web application you will often need both a web designer and a web developer.&lt;/p&gt;

&lt;p&gt;3) Rendering is physically close to resources - When HTML is rendered server side, it is usually done on a server that is physically close to the database and/or service calls.  In the modern world of cloud computing, this means it is done within the same virtual private cloud.  The speed of light is fast but it is still much faster when servers are 20 feet apart instead of being located on different parts of the planet.&lt;/p&gt;

&lt;p&gt;4) Inherently secure - Authenticated users have their authorization (aka access rights) stored server side where they cannot manipulate them.  Furthermore, resources such as service endpoints and databases are beyond the reach of any bad actors.  Vulnerable servers are behind the application server, out of site.&lt;/p&gt;

&lt;p&gt;5) Strongly typed languages - Server side code is mostly written in strongly typed compiled programming languages, which minimizes programmer errors and provides a rich selection of interactive IDE choices.  Client side languages will be used to interact with the user browser side, to provide a richer experience, but client side script is a much smaller percentage of the code.&lt;/p&gt;

&lt;p&gt;6) Mature technology - Being over 20 years old, server side rendering and the libraries that support it are very complete and highly tested.&lt;/p&gt;

&lt;p&gt;7) Large community - The majority of enterprise web applications are still built on server side UI rendering.  Many companies are shifting to client side UI rendering for use cases that better fit that pardigm, but server side rendering is still the norm and the labor force that can work on these systems is the most abundant.  Furthermore, extensive libraries of client side components and styling are available that are designed to work with this architecture.&lt;/p&gt;

&lt;p&gt;8) Asynchronous communication - Early server side application architecture forced developers to refresh the entire page every time new information was needed.  This is no longer the case. New information can be brought into the page using ajax calls, allowing any combination of data and layout to be refreshed without ever leaving the page.  Single page applications can be easily written even when the layout is dynamically combined with the data server side.&lt;/p&gt;

&lt;p&gt;9) Efficient Internationalization - Server side rendering is usually coupled with an in memory language Resource Bundle.  Large web applications can have 1000's of translated phrases.  By rendering the html server side the layout can be infused with these translations in thousandths of a second.  On the other hand, client side rendering would require downloading of all of these translations client side and sewing the translations into the layout as another type of server side data, which best case can cause noticeable delays in rendering and worst case causes the user to believe the application is hung.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; Cons&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) More bandwith - Since HTML has to be returned with every request, server side rendering sends more data.  However, good HTML design that excludes inline styling and defines all styles instead in style sheets, and furthermore caches all of the static content browser side, greatly reduces the amount of layout that is transmitted, making the HTML very thin.  Combine this good design with the stratospheric speed of modern networks and this con becomes more academic than a real world concern.&lt;/p&gt;

&lt;p&gt;2) More memory usage on server - Server side rendering relies on user sessions to keep track of who a user is and to potentially cache other useful data.  This means that the minimum footprint of a logged in user is their authentication and authorization state.  It is up to developers to decide just how large a user session can become.  Careless handling of session state can cause resource problems on the server, but good management can also keep the session size insignificantly small, especially if each server is not expected to handle more than 500,000 users at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-client-side-rendering"&gt;
  &lt;/a&gt;
  2) Client side rendering
&lt;/h2&gt;

&lt;p&gt;Server side rendering has come a long way since 2000, but there are still use cases where it falls short.  In particular, applications like Facebook are a collage of components that need to update independently from each other, yet all are displayed to the user at the same time.  Even more demanding is the requirement that some subsets of these components aren't fully independent but need to work together.  This kind of website is a very different animal from an airlines site or a bank site where the user generally does one thing at time, and therefore requires a different solution.&lt;/p&gt;

&lt;p&gt; Pros&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Full logical isolation of components - Components in client side frameworks aren't just parts of the page, they are more like independent web pages.  They have their own independent layout, state, css, and transactions with the server.&lt;/p&gt;

&lt;p&gt;2) Libaries of standard components - Just like server side rendering communities, the client side community has also created libraries of standard components with the vision of making web development become a plug and play development experience.  The fuller logical isolation of components makes these widgets more portable especially since they carry their css along with them.  Interestingly this does create the inverse challenge of having to figure out how to make components work with each other.  The boundary that makes them more isolated also makes them harder to integrate.&lt;/p&gt;

&lt;p&gt;3) Backing of some major technology companies - Angular is backed by Google and React is backed by Facebook.  This means that these companies are throwing a lot of money at their frameworks as well as cultivating a fan base.  While Facebook uses React in its major public facing applications, Google does not use Angular in any of its major public facing applications.&lt;/p&gt;

&lt;p&gt;4) Integration with Node.js - Client side javascript frameworks appear to go hand in hand with the Node.js community.  In fact, they have been so tightly integrated that it is actually hard to imagine developing a React application outside of Node.js.  Many libraries and command line interface commands have been cobbled together to make development faster and more intuitive.  It is interesting that Node.js has become the foundation of a lot of this development while it by itself remains the best server solution for only a subset of use cases.  Node.js works best with web applications that have very short transaction times because it is single threaded.&lt;/p&gt;

&lt;p&gt;5) Less memory usage on the Server - Since ideal client side javascript frameworks require very little to no server side memory state, this memory footprint is reduced on the servers, which makes client side applications potentially better scaling.  However, some sort of authorization state still needs to be kept on the server side to verify who a request is coming from and what the user is allowed to do.  So, the most accurate statement is to say that the server side memory footprint of a user is very small but it still exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; Cons&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Difficult to secure - The user's authentication and authorization has to be kept on the client since the server is ideally stateless, consisting of nothing more than service calls.  Browser clients are inherently insecure because they are under the control of the user, and running on the user's machine.  Therefore, complex encryption schemes need to be implemented to keep the credentials on the user's machine but not open to manipulation by the user.  Furthermore, since all layout is cached on the browser, regardless of the user's role, pages that a user should not see are cached there.  So, a sophisticated bad actor will have the entire attack surface of all other roles laid out for them.  &lt;/p&gt;

&lt;p&gt;Some companies solve the authentication issue by authenticating the user through a web server (not application server) and then using the web server as a reverse proxy to all the services.  However, this is in affect maintaining a server side session on the web server instead of on an application server and defeats one of the "benefits" of a client rendering framework.&lt;/p&gt;

&lt;p&gt;2) Complexity - Client side rendering requires much more javascript on the client than server side rendering.  While server side rendering delivers the layout using HTML and the role of javascript is only to power some client side widgets and validation, client side rendering requires an entire ecosystem of javascript including a model, a view, and a controller.  Angular out of the box, for example, delivers 30,000 lines of javascript code to the browser.  The raw size of this stack is just the beginning of the complexity because these frameworks completely abstract the developer away from direct browser DOM operations.  All layout, data, and flow control is done through a custom API.  Developers no longer learn how to code javascript in a browser.  They instead learn to code to the client side framework API.  The learning curve for all of these API's is rather steep and therefore an entire industry of online and in person classes has sprung up to support these tools.&lt;/p&gt;

&lt;p&gt;3) Difficult to debug - The debugging of client side javascript frameworks is generally difficult.  The loose typing of javascript and the sheer size of the libraries leads to cryptic error messages that tell little of what the real problem is.  The code running on the browser is often transpiled into a different form than what the developer wrote to begin with.  For example, the developer wrote typescript and the compiler transpiled this to javascript and delivered it to the browser.  There have been browser plugins specifically written to help with the debugging, but the complexity of the entire paradigm still often leaves the developer in a trial and error loop, wondering why things don't work.&lt;/p&gt;

&lt;p&gt;4) Proprietary - Large client side javascript frameworks are very specific solutions that are almost impossible to port to another framework.  While, server side rendering is far more standards based.  To contrast, going from Struts to Spring MVC is fairly trivial whereas going from Angular to React would be a complete rewrite.  In fact, Angular recently went from Angular 1 to Angular 2, and it was not backward compatible.  Many compaines are spending millions of dollars making the Angular upgrade.  HTML, CSS, and raw javascript are universally available and portable, whereas specific opinionated client side API's are not.&lt;/p&gt;

&lt;p&gt;5) Integration with Node.js - While this can be a pro, it can also be a con.  Some javascript frameworks are so integrated with Node.js that using them in the absence of Node.js is difficult.&lt;/p&gt;

&lt;p&gt;6) Difficult to internationalize - Resource bundles have to be downloaded to the client and treated as data instead of being seamlessly included in the HTML at the server.  Therefore, pulling down labels will need to be done as service calls, greatly slowing the performance of the application and making UI development more complex.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#list-of-frameworks-and-associated-tools-for-2022"&gt;
  &lt;/a&gt;
  List of Frameworks and associated tools for 2022
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering-frameworks"&gt;
  &lt;/a&gt;
  Server side rendering frameworks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;a href="https://https://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; - Backed by a very enthusiastic and vibrant community and designed for web application development.&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html"&gt;Spring MVC&lt;/a&gt; - The most popular choice for a java based serverside rendering framework, and supported by an enthusiastic and extensive java community.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://struts.apache.org/"&gt;Struts 2&lt;/a&gt; - Also a popular java based framework.  Backed by the Apache Foundation and built to easily integrate with Spring.  This is the easiest choice when converting from a Struts 1 framework to a more modern and secure framework.&lt;/p&gt;

&lt;p&gt;4) &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; - The most popular PHP based server side framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering-associated-client-side-tools"&gt;
  &lt;/a&gt;
  Server side rendering, associated client side tools
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;a href="https://jquery.com/"&gt;Jquery&lt;/a&gt; - Provides a single api interface for DOM manipulation in all major browsers&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://jqueryui.com/"&gt;Jquery UI&lt;/a&gt; - Provides library of widgets backed by Jquery, such as drag and drop, dialogs, autocomplete, datepicker, progress bar, and more.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://webrocketx.com"&gt;WebRocketX&lt;/a&gt; - A javascript based client side API that facilitates Single Page Architecture including navigation, partial page rendering, and structured error handling.&lt;/p&gt;

&lt;p&gt;4) &lt;a href="https://animejs.com/"&gt;Animejs&lt;/a&gt; - Add animations to your javascript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#client-side-rendering-frameworks"&gt;
  &lt;/a&gt;
  Client side rendering frameworks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;a href="https://vuejs.org/"&gt;View.js&lt;/a&gt; - The fastest rising star in the client side world.  Provides a fairly intuitive paradigm compared to the other client side frameworks.&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; - Created by Facebook to meet their needs for a scalable collage type user interface.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; - Created by Google to create a client based UI that talks to stateless services.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>laravel</category>
      <category>react</category>
    </item>
    <item>
      <title>100 días de código: 10, repasando HTML, creando mas repositorios y comenzando con la hoja de estilos de mi pagina personal.</title>
      <author>Daro</author>
      <pubDate>Sat, 13 Nov 2021 00:43:07 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</guid>
      <description>&lt;p&gt;¡Hey, hey, hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este nuevo día del reto, hoy es el día en el que comienzo a mejorar mis habilidades de escritura probando touch typing que, de forma muy resumida, consiste en escribir en el teclado lo mas rápido posible.&lt;/p&gt;

&lt;p&gt;Lo hice con ayuda de esta &lt;a href="https://www.typingstudy.com"&gt;guia&lt;/a&gt; y se los recomiendo ya que te permite codificar mas rápido. &lt;br&gt;
Te recomiendo intentarlo aunque tengas una velocidad muy buena.&lt;/p&gt;

&lt;p&gt;También he avanzado en algunas otras cosas que me gustaría contarles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la sección de Fundamentos de HTML en &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Aprendí a agregar una clave ssh a mi cuenta de github.&lt;/li&gt;
&lt;li&gt;Realice una instalación y configuracion de git en linux.&lt;/li&gt;
&lt;li&gt;Cree un proyecto de ejemplo en github y realice cambios.&lt;/li&gt;
&lt;li&gt;Aprendí que la mejor forma de hacer una explicación de los cambios en una confirmación (commit) es escribirlo de forma imperativa.&lt;/li&gt;
&lt;li&gt;Volví a aprender los comandos basicos de linux como &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; entre otros.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la sección &lt;code&gt;Project recipes&lt;/code&gt; del capitulo &lt;strong&gt;HTML foundations&lt;/strong&gt; de la guia &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt; con lo cual ya realice mi objetivo de spring semanal.&lt;/li&gt;
&lt;li&gt;Cree unos cuantos repositorios para los proyectos que voy realizando en la guia.&lt;/li&gt;
&lt;li&gt;Comencé a codificar los estilos principales de mi pagina web.&lt;/li&gt;
&lt;li&gt;Repase las etiquetas de html. (se los recomiendo porque yo ya no recordaba algunas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ademas encontré &lt;a href="https://www.befunky.com/es/crear/editor-de-fotos/"&gt;este&lt;/a&gt; editor de fotos online que es bastante interesante y &lt;a href="https://comprimir-video.convertir-pdf.com/"&gt;este&lt;/a&gt; compresor de vídeo. &lt;/p&gt;

&lt;p&gt;¿Debería de hacer una guia de todas las herramientas que utilizo en el día a día? Quizás...&lt;/p&gt;

&lt;p&gt;¡Y eso es todo por hoy! Espero que les vaya super bien con sus proyectos y animo.&lt;br&gt;
Adiós mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>html</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 7 of #100daysofcode: General Progress and Competitive Programming</title>
      <author>Ryan Whelchel</author>
      <pubDate>Sat, 13 Nov 2021 00:09:35 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-7-of-100daysofcode-general-progress-and-competitive-programming-fo9</link>
      <guid>https://dev.to/rydwhelchel/day-7-of-100daysofcode-general-progress-and-competitive-programming-fo9</guid>
      <description>&lt;p&gt;Between Competitive Programming, talking with my professors, planning my next semester, working on my resume and working on my project I had a very full day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#competitive-programming"&gt;
  &lt;/a&gt;
  Competitive Programming
&lt;/h2&gt;

&lt;p&gt;I participated in my first competitive programming event today and had a lot of fun. I was the senior in my team, so I took the lead and helped coach my team through some of the problems. One of the members of my team had very little coding experience, so it was cool to show him the ropes on how to approach some of these problems and to show him some of the common problem patterns you'd run into. He was pretty excited about using Dictionaries to count duplicates so that was fun.&lt;/p&gt;

&lt;p&gt;Everybody in the team were familiar with different languages, so I thought it would be best to use Python as it is fairly simple to understand. That seemed to work very well, and I was able to bust out some of the Python-tech that I've learned over the years, namely list comprehension and f-strings. &lt;/p&gt;

&lt;p&gt;We placed a little above middle of the pack, but we were happy with how we did and I feel like everyone walked away today better programmers.&lt;/p&gt;

&lt;p&gt;In the future, I would like to participate in an even more competitive scenario where you compete for a prize with randomly selected teams. I think that would be really fun.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I made a lot of progress today. I spent more time with React-bootstrap and decided on which components I am going to use in my page. In addition, I modified the CSS layout and fixed some code modularity problems I had with my Flask server. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I'm going to continue working on my project. I hope I will have some what of a final product to show off tomorrow. Don't be too harsh on the design; I never claimed to be a good designer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;I'm still finding some trouble on how to use Flexbox in conjunction with Grid. As I understand it, they're both made much more powerful when you use them in conjunction, so I'm trying to force myself to use them together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RhUuMl3R1PE"&gt;CSS Grid Tutorial - Dev Dreamer&lt;/a&gt; &lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/components/"&gt;React-Bootstrap Components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Betterer v5.0.0</title>
      <author>Craig ☠️💀👻</author>
      <pubDate>Sat, 13 Nov 2021 00:06:54 +0000</pubDate>
      <link>https://dev.to/phenomnominal/betterer-v500-5-4518</link>
      <guid>https://dev.to/phenomnominal/betterer-v500-5-4518</guid>
      <description>&lt;p&gt;Oof, this one feels like it's been a while coming, but after a whole bunch of work, and a whole bunch of breaking changes &lt;strong&gt;I've just released&lt;/strong&gt; &lt;a href="https://www.npmjs.com/package/@betterer/cli"&gt;&lt;strong&gt;v5.0.0&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;of&lt;/strong&gt; &lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;&lt;strong&gt;Betterer!&lt;/strong&gt;&lt;/a&gt; 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-betterer"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;Betterer&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;&lt;strong&gt;Betterer&lt;/strong&gt;&lt;/a&gt; is a test runner that helps make incremental improvements to your code!&lt;/p&gt;

&lt;p&gt;The first time &lt;strong&gt;Betterer&lt;/strong&gt; it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse ❌), or update the snapshot (if the test got better ✅). That's pretty much it!&lt;/p&gt;

&lt;p&gt;You can check out the (newly updated!) documentation at &lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;https://phenomnomnominal.github.io/betterer/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened-to-v2-v3-v4"&gt;
  &lt;/a&gt;
  What happened to v2, v3, v4...?
&lt;/h2&gt;

&lt;p&gt;"But Craig", I hear you say, "The &lt;a href="https://dev.to/phenomnominal/betterer-v1-0-0-301b"&gt;last time you posted about &lt;strong&gt;Betterer&lt;/strong&gt;&lt;/a&gt;, it was at v1.0.0!? What's been going on?!". 🔥🔥🔥&lt;/p&gt;

&lt;p&gt;That's very astute of you dear reader, and let's just put it this way - I sure do love breaking APIs! One of the interesting things about &lt;strong&gt;Betterer&lt;/strong&gt; is that it is a tool designed for problems that emerge in large and old codebases. That means it has to be able to handle large and old codebases from the get go! So I've had a lot of fun as I've tried to figure out the best workflows and APIs for using &lt;strong&gt;Betterer&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Between v1.0.0 and now, I've released a bunch of features, consolidated and simplified APIs, and just generally made &lt;strong&gt;Betterer&lt;/strong&gt; more usable and flexible. I'm pretty happy with where it is at now, so I figured it was about time for an update. I've even been talking about it at a few conferences now that they're coming back! What a world 🌍!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-v500"&gt;
  &lt;/a&gt;
  What's in v5.0.0?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#parallel-tests"&gt;
  &lt;/a&gt;
  Parallel tests:
&lt;/h3&gt;

&lt;p&gt;Performance is hard. Prior to v5, the default &lt;strong&gt;Betterer&lt;/strong&gt; reporter would struggle pretty badly, especially when lots of tests were running and producing lots of issues. That was because the main thread was responsible for updating the reporter output &lt;em&gt;and&lt;/em&gt; running all the tests.&lt;/p&gt;

&lt;p&gt;To fix this, &lt;strong&gt;Betterer&lt;/strong&gt; will now execute all your tests using &lt;a href="https://nodejs.org/api/worker_threads.html"&gt;Node.js Worker Threads&lt;/a&gt;! That frees up the main thread to focus on rendering and also means that multiple tests can run at the same time. Getting this to work required breaking some APIs, so your &lt;a href="https://phenomnomnominal.github.io/betterer/docs/test-definition-file"&gt;test definition file&lt;/a&gt; needs to change:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my other test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my other test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But never fear, you can use the &lt;code&gt;betterer upgrade&lt;/code&gt; command to do this migration for you! Just running &lt;code&gt;betterer upgrade&lt;/code&gt; will show you what the migration will look like, and &lt;code&gt;betterer upgrade --save&lt;/code&gt; will actually update your files. Easy ✨. The &lt;code&gt;betterer upgrade&lt;/code&gt; command will be used in the future when I (most probably) break more stuff.&lt;/p&gt;

&lt;p&gt;Check out the &lt;strong&gt;beast&lt;/strong&gt; of a PR &lt;a href="https://github.com/phenomnomnominal/betterer/pull/815"&gt;here&lt;/a&gt; (and yes, it took me three branches to get it right 😅)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#betterer-angular"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Betterer&lt;/strong&gt; ❤️ &lt;strong&gt;Angular&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I've published a new &lt;strong&gt;Betterer&lt;/strong&gt; test for incrementally adding &lt;a href="https://angular.io/guide/angular-compiler-options"&gt;&lt;strong&gt;Angular&lt;/strong&gt; compiler configuration&lt;/a&gt; to a project! I'm pretty excited by this, as there are a lot of &lt;em&gt;big&lt;/em&gt; Angular codebases out there that don't utilise the full power of the Angular compiler. In particular, I think &lt;strong&gt;Betterer&lt;/strong&gt; could be a good way to introduce the &lt;a href="https://angular.io/guide/template-typecheck#strict-mode"&gt;&lt;code&gt;strictTemplates&lt;/code&gt;&lt;/a&gt; option. You can now do that with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;strict templates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tsconfig.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;strictTemplates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expect to see a full post detailing this in the near future!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#simpler-raw-bettererfiletest-endraw-"&gt;
  &lt;/a&gt;
  Simpler &lt;code&gt;BettererFileTest&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The old &lt;code&gt;BettererFileTest&lt;/code&gt; API was a bit clunky and confusing due to the &lt;code&gt;BettererFileResolver&lt;/code&gt; thing. I've hidden that away in the internals, so now the public API is less clunky and confusing:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererFileResolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFileTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileResolver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileTestResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// test implementation...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFileTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileTestResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// test implementation...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Smaller public API, less magic, and you only have to use it if you know why, choice! 👍&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#improved-workflow"&gt;
  &lt;/a&gt;
  Improved workflow:
&lt;/h3&gt;

&lt;p&gt;I'm still working on figuring out the ideal &lt;strong&gt;Betterer&lt;/strong&gt; workflow. For now, I recommend running &lt;strong&gt;Betterer&lt;/strong&gt; in &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode"&gt;Pre-commit mode&lt;/a&gt; as a pre-commit hook (perhaps using &lt;a href="https://typicode.github.io/husky"&gt;husky&lt;/a&gt; and &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;) and in &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#ci-mode"&gt;CI mode&lt;/a&gt; on your build server.&lt;/p&gt;

&lt;p&gt;But one thing about &lt;strong&gt;chonky&lt;/strong&gt; codebases is that they often have &lt;em&gt;lots&lt;/em&gt; of contributors! Lots of contributors making changes (and making things better) means that 👻 &lt;em&gt;merge&lt;/em&gt; &lt;em&gt;conflicts&lt;/em&gt; 👻 in the &lt;a href="https://phenomnomnominal.github.io/betterer/docs/results-file"&gt;results file&lt;/a&gt; are quite common!&lt;/p&gt;

&lt;p&gt;To try to help with resolving merge conflicts, I've introduced the &lt;code&gt;betterer merge&lt;/code&gt; command. You can still fix merge conflicts manually, but &lt;code&gt;betterer merge&lt;/code&gt; will do it for you! If you're as lazy as me, you can even enable &lt;code&gt;automerge&lt;/code&gt; and you'll never have to think about merging the results file ever again (I hope, this could still be buggy 🐛😅.&lt;/p&gt;

&lt;p&gt;To enable automerge run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;betterer init &lt;span class="nt"&gt;--automerge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#improved-caching"&gt;
  &lt;/a&gt;
  Improved caching:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Betterer&lt;/strong&gt; got some cool (ish) &lt;a href="https://phenomnomnominal.github.io/betterer/docs/cache"&gt;caching&lt;/a&gt; implemented in v4, but turns out caching is a hard problem (😅), so it's &lt;a href="https://github.com/phenomnomnominal/betterer/pull/712"&gt;taken&lt;/a&gt; &lt;a href="https://github.com/phenomnomnominal/betterer/pull/746/files"&gt;a&lt;/a&gt; &lt;a href="https://github.com/phenomnomnominal/betterer/pull/819/files"&gt;little&lt;/a&gt; bit to get right. &lt;/p&gt;

&lt;p&gt;It works by passing the &lt;code&gt;--cache&lt;/code&gt; flag when running &lt;strong&gt;Betterer&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;betterer &lt;span class="nt"&gt;--cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will create a file something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"testCache"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"no hack comments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/angular/src/angular.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0e37c0539e37787964573a56ad1b7eb6ee378a9087"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/angular/src/index.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0eb9494122f82a750085fc20d2c3b0f14b34897431"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/betterer/src/betterer.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0e94efcd2f99a4cf14222c400693335ac1b94696bb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Betterer&lt;/strong&gt; will use this cache to only re-test files that have actually changes, so it can be &lt;em&gt;much&lt;/em&gt; faster (useful for running on &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode"&gt;pre-commit&lt;/a&gt;!) I suspect there are still issues here, so please try it out and create issues. 🙌&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bug-fixes-and-improvements"&gt;
  &lt;/a&gt;
  Bug fixes and improvements:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/phenomnomnominal/betterer/pull/828/files"&gt;&lt;code&gt;betterer results&lt;/code&gt;&lt;/a&gt; command to get a quick summary:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2DFq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvzavtxwithpzxge39ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2DFq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvzavtxwithpzxge39ut.png" alt="An example of Betterer's results summary output" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/phenomnomnominal/betterer/issues/831"&gt;Negative filters&lt;/a&gt;. I already suspect I'll regret this, but you can now use &lt;code&gt;"!"&lt;/code&gt; at the start of a filter to negate it. Now &lt;code&gt;--filter myTest&lt;/code&gt; will just run &lt;code&gt;"myTest"&lt;/code&gt;, and &lt;code&gt;--filter !myTest&lt;/code&gt; will run every other test.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rewrote most of the &lt;a href="https://phenomnomnominal.github.io/betterer/docs/index"&gt;public API docs&lt;/a&gt;. These are now generated from the code, so should &lt;em&gt;hopefully&lt;/em&gt; be easier to keep up to date. 🤞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed a bunch of stuff from the public API. This means more consistency, and I'll be less likely to accidentally break stuff in the future. 😇&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks ❤️
&lt;/h2&gt;

&lt;p&gt;Huge thanks to everyone who has helped me with this stuff, if you've read my &lt;a href="https://twitter.com/phenomnominal/status/1453511720098541569"&gt;rambling, cryptic tweets&lt;/a&gt;, opened &lt;a href="https://github.com/phenomnomnominal/betterer"&gt;issues on Github&lt;/a&gt;, chatted to me about &lt;strong&gt;Betterer&lt;/strong&gt; at conferences, it's all meant a lot! Maybe I'll print some stickers or something? ☀️&lt;/p&gt;

&lt;p&gt;Love 🥰 this? Hate 🤬 this? Go off in the comments, DM me on Twitter, or be the &lt;strong&gt;third&lt;/strong&gt; person to join the &lt;a href="https://discord.com/invite/YNgtXt6QVX"&gt;&lt;strong&gt;Betterer&lt;/strong&gt; Discord&lt;/a&gt;. Catch you on the line 💻!&lt;/p&gt;

</description>
      <category>incremental</category>
      <category>improvement</category>
      <category>betterer</category>
      <category>release</category>
    </item>
    <item>
      <title>Resources to help you practice web development</title>
      <author>Cess</author>
      <pubDate>Sat, 13 Nov 2021 00:05:00 +0000</pubDate>
      <link>https://dev.to/cesscode/resources-to-help-you-practice-web-development-e35</link>
      <guid>https://dev.to/cesscode/resources-to-help-you-practice-web-development-e35</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;I remember once reading somewhere that the best way to be good at web development is to practice consistently. In order to practice, you need challenges and ideas for side projects.&lt;/p&gt;

&lt;p&gt;In this blog post, I have compiled a list of websites that provides more challenges and ideas for us to practice web development.&lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;strong&gt;FrontendMentor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Solve real-world HTML, CSS, and JavaScript challenges whilst working on professional designs. Build projects, review code, and help each other get better.&lt;/p&gt;

&lt;p&gt;Once you've completed your project, you can submit it for review and criticism.  You can also review the works of other developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3jhnCrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675054152/qkmNANTXi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3jhnCrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675054152/qkmNANTXi.png" alt="frame_chrome_mac_dark (4).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Frontendmentor website [&lt;a href="https://www.frontendmentor.io/"&gt;https://www.frontendmentor.io/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;Codewel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Improve your HTML and CSS skills by practicing on real design templates.&lt;/p&gt;

&lt;p&gt;Once you've completed your project, submit it to receive feedback on your solutions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wu-3Vs_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673454403/Z3S9y8apJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wu-3Vs_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673454403/Z3S9y8apJ.png" alt="frame_chrome_mac_dark.png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Codewell website [&lt;a href="https://www.codewell.cc/"&gt;https://www.codewell.cc/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;Coderbyte&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Helps you improve your coding with  Algorithm, front-end, back-end, and database challenges. it also provides real-world interview kits to help you prepare &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYE49TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674186844/fcgJGKteB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYE49TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674186844/fcgJGKteB.png" alt="frame_chrome_mac_dark (2).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Coderbyte website [&lt;a href="https://coderbyte.com/"&gt;https://coderbyte.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Freecodecamp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeCodeCamp is an online learning platform that helps you learn and build projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ8-tEsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673840895/_bxMCBLTBf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ8-tEsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636673840895/_bxMCBLTBf.png" alt="frame_chrome_mac_dark (1).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Freecodecamp website [&lt;a href="https://www.freecodecamp.org/"&gt;https://www.freecodecamp.org/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;Codepen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Weekly challenges for building things to level up your talents.  Enroll in them and get picked and featured on the homepage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ud6JE2xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674807264/VFHK2EMd5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ud6JE2xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636674807264/VFHK2EMd5.png" alt="frame_chrome_mac_dark (3).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to codepen website [&lt;a href="https://codepen.io/challenges"&gt;https://codepen.io/challenges&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;JavaScript30&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;30 Day Vanilla JS Coding Challenge. Build 30 things in 30 days with 30 tutorials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRsHBlgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675225633/S6qygaO8X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRsHBlgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675225633/S6qygaO8X.png" alt="frame_chrome_mac_dark (5).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Javascript30 website [&lt;a href="https://codepen.io/challenges"&gt;https://codepen.io/challenges&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;7.&lt;br&gt;
&lt;strong&gt;JavaScript Quiz&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check your knowledge by having fun with javascript questions. Detailed explanations included.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DCvyVzTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675696753/CpHfwenkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DCvyVzTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636675696753/CpHfwenkd.png" alt="frame_chrome_mac_dark (6).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Javascript quiz website [&lt;a href="https://javascriptquiz.com/"&gt;https://javascriptquiz.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;8.&lt;br&gt;
&lt;strong&gt;Devchallenges&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enroll in awesome challenges and boost your skills by solving and building websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSFZfw9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676129090/UsQPzsx_b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSFZfw9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676129090/UsQPzsx_b.png" alt="frame_chrome_mac_dark (7).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Devchallenges website [&lt;a href="https://devchallenges.io/"&gt;https://devchallenges.io/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;9.&lt;br&gt;
&lt;strong&gt;Codewars&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Improve your development skills by training with your peers using coding challenges&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dP3ngnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676381060/Jg7NeEI4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dP3ngnt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676381060/Jg7NeEI4h.png" alt="frame_chrome_mac_dark (8).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Codewars website [&lt;a href="https://www.codewars.com/"&gt;https://www.codewars.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;10.&lt;br&gt;
&lt;strong&gt;frontendpractice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take your frontend skills to the next level by recreating real websites&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5SaPTo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676663049/TZzrnOxW9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5SaPTo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676663049/TZzrnOxW9.png" alt="frame_chrome_mac_dark (9).png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to frontend practice website [&lt;a href="https://www.frontendpractice.com/"&gt;https://www.frontendpractice.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;11.&lt;br&gt;
&lt;strong&gt;Cssbattle&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Challenge yourself in building different shapes with CSS and level your skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_-dOCVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676903295/DxklY1kot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_-dOCVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636676903295/DxklY1kot.png" alt="frame_chrome_mac_dark (10).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to CSS battle website [&lt;a href="https://cssbattle.dev/"&gt;https://cssbattle.dev/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;12.&lt;br&gt;
&lt;strong&gt;100dayscss&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Build something great for 100 days and take your CSS skills to next level. New challenges every day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjJv1__5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636677079007/_iF0EiXqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjJv1__5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636677079007/_iF0EiXqd.png" alt="frame_chrome_mac_dark (11).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to 100daysCSS  website [&lt;a href="https://100dayscss.com/"&gt;https://100dayscss.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;13.&lt;br&gt;
&lt;strong&gt;Codementor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Improve your programming skills by working on real-world projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ83_cVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756188730/wNJ7ZElL3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ83_cVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756188730/wNJ7ZElL3.png" alt="frame_chrome_mac_dark.png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Codementor  website [ &lt;a href="https://www.codementor.io/projects"&gt;https://www.codementor.io/projects&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;14.&lt;br&gt;
&lt;strong&gt;Daily UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Daily UI helps you Become a Better Designer in 100 Days by working on different challenges&lt;/p&gt;

&lt;p&gt;Once you've completed your project, you can post it on dribble or Behance for review and criticism. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d0l4o2Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756683612/xWO1pAmkD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d0l4o2Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756683612/xWO1pAmkD.png" alt="frame_chrome_mac_dark (1).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Daily UI  website [&lt;a href="https://www.dailyui.co/"&gt;https://www.dailyui.co/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;15.&lt;br&gt;
&lt;strong&gt;Codier&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Explore and attempt front-end coding challenges. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9tylPse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756942231/-zI8cqNp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9tylPse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636756942231/-zI8cqNp4.png" alt="frame_chrome_mac_dark (2).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to codier  website [ &lt;a href="https://codier.io/"&gt;https://codier.io/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;16.&lt;br&gt;
&lt;strong&gt;Ace Frontend&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ace Front End has complete and practical coding challenges, with a detailed walk-through of a perfect interview solution. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0oqF_c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757293057/pqpD5NXKd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0oqF_c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757293057/pqpD5NXKd.png" alt="frame_chrome_mac_dark (3).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Ace Frontend  website [&lt;a href="https://www.acefrontend.com/"&gt;https://www.acefrontend.com/&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;17.&lt;br&gt;
&lt;strong&gt;Exercism&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercism&lt;/strong&gt; helps you develop fluency in 55 programming languages. It also provides fun coding exercises that build your understanding of concepts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4S9CDrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757708063/TdquWWSyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4S9CDrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757708063/TdquWWSyv.png" alt="frame_chrome_mac_dark (4).png" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to  Exercism website [&lt;a href="https://exercism.org/"&gt;https://exercism.org/&lt;/a&gt;]  &lt;/p&gt;

&lt;p&gt;18.&lt;br&gt;
&lt;strong&gt;Fun Javascript&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A FREE series of fun Javascript, HTML &amp;amp; CSS projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzdwt0kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757976987/r0Sdj80WW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzdwt0kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636757976987/r0Sdj80WW.png" alt="frame_chrome_mac_dark (5).png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to fun Javascript  website [&lt;a href="https://fun-javascriptprojects.com/"&gt;https://fun-javascriptprojects.com/&lt;/a&gt;] &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As a rookie web developer, the websites listed above will make your life easier. If you have any questions or know of any other websites that you use for project practice,  Post about it in the comment below and I'll be pleased to respond to each and every one.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>SOLID</title>
      <author>Mauro de Carvalho</author>
      <pubDate>Sat, 13 Nov 2021 00:03:15 +0000</pubDate>
      <link>https://dev.to/mdcg/solid-2de</link>
      <guid>https://dev.to/mdcg/solid-2de</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Recentemente estava buscando ampliar um pouco o meu conhecimento no desenvolvimento back-end, e me deparei com um projeto super legal chamado &lt;strong&gt;Web Developer Roadmap 2021&lt;/strong&gt;, criado por Kamran Ahmed. Basicamente, este estipula alguns “caminhos” a se seguir para você iniciar/melhorar o seu conhecimento acerca do desenvolvimento front-end, back-end e devOps. Vale a pena dar uma conferida se você, assim como eu, tem uma certa dificuldade, dada a grande variedade de tecnologias existentes, de saber onde focar seus estudos.&lt;/p&gt;

&lt;p&gt;Na introdução deste roadmap, existe uma lista de noções/tecnologias/metodologias a serem entendidas independente do caminho que você for seguir. Alguns deles eu já domino, como Git, uso básico do terminal, estruturas de dados e licenças. Porém, ainda não me sinto confortável com os demais “requisitos” listados nesta introdução, por isso, irei documentar aqui no Dev.to um pouco dos meus estudos acerca deles.&lt;/p&gt;

&lt;p&gt;Vale ressaltar que talvez essa publicação não seja o suficiente para você se aprofundar no tema-chave (indicado pelo título). Porém, ainda assim vale a leitura, já que talvez a minha visão possa agregar um pouco nos seus conhecimentos em relação ao assunto. Então sem mais delongas, vamos iniciar o nosso assunto sobre SOLID!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9"&gt;
  &lt;/a&gt;
  O que é?
&lt;/h2&gt;

&lt;p&gt;Basicamente, &lt;strong&gt;SOLID&lt;/strong&gt; é um acrônimo criado por Michael Feathers para &lt;strong&gt;cinco princípios&lt;/strong&gt; de design na programação orientada a objetos, com o intuito de criar projetos de software mais compreensíveis, flexíveis e manuteníveis. São eles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Single Responsibility Principle - SRP&lt;/em&gt;&lt;/strong&gt; (Princípio da responsabilidade única)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Open Closed Principle - OCP&lt;/em&gt;&lt;/strong&gt; (Princípio do aberto/fechado)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Liskov Substitution Principle - LSP&lt;/em&gt;&lt;/strong&gt; (Princípio da substituição de Liskov)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Interface Segregation Principle - ISP&lt;/em&gt;&lt;/strong&gt; (Princípio da segregação de interfaces)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Dependency Inversion Principle - DIP&lt;/em&gt;&lt;/strong&gt; (Princípio da inversão de dependência)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#o-primeiro-princ%C3%ADpio-srp"&gt;
  &lt;/a&gt;
  O primeiro princípio: SRP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“uma classe deve ter apenas uma única responsabilidade.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A descrição mais clara e formal deste princípio diz que &lt;strong&gt;a classe deve ter uma, e apenas uma, razão para mudar&lt;/strong&gt;. Em outras palavras, poderíamos dizer que uma classe deve ser especializada em um único objetivo dentro do software, ou seja, ela deve executar/desempenhar uma única tarefa/ação. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-segundo-princ%C3%ADpio-ocp"&gt;
  &lt;/a&gt;
  O segundo princípio: OCP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"entidades de software devem ser abertas para extensão, mas fechadas para modificação."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Em resumo, para termos classes ainda mais coesas e de fácil evolução, elas devem ser modeladas de modo que quando houver mudanças nas regras de negócios, que não haja a necessidade de alteração no código original, mas sim que o comportamento deste possa ser estendido com facilidade.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-terceiro-princ%C3%ADpio-lsp"&gt;
  &lt;/a&gt;
  O terceiro princípio: LSP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“objetos em um programa devem ser substituíveis por instâncias de seus subtipos, sem alterar a funcionalidade do programa.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O princípio de substituição de Liskov leva esse nome por ter sido criado por &lt;strong&gt;Barbara Liskov&lt;/strong&gt; que introduziu este conceito em uma conferência em 1987 e, posteriormente, em 1994 no artigo &lt;strong&gt;&lt;em&gt;Family Values: A behavioral Notion of Subtyping&lt;/em&gt;&lt;/strong&gt; juntamente com Jeannette Wing. A definição original desse princípio, de forma resumida, é a seguinte:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Se q(x) é uma propriedade demonstrável dos objetos x de tipo T. Então q(y) deve ser verdadeiro para objetos y de tipo S onde S é um subtipo de T.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Em outras palavras, toda e qualquer classe derivada deve poder ser usada como se fosse a classe base. Este princípio tem algo bem parecido com a &lt;em&gt;metodologia do projeto por contrato&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Precondições não podem ser reforçadas em uma sub-classe. Isto significa que não é permitida uma sub-classe com precondições mais fortes que a sua super-classe;&lt;/li&gt;
&lt;li&gt;Pós-condições não podem ser enfraquecidas em uma sub-classe. Isto significa que não é permitida uma sub-classe que contém condições posteriores mais fracas que a super-classe.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#o-quarto-princ%C3%ADpio-isp"&gt;
  &lt;/a&gt;
  O quarto princípio: ISP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“muitas interfaces de clientes específicas, são melhores do que uma para todos propósitos.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esse é um princípio um pouco mais simples que os anteriores. Em resumo, basicamente ele diz que é melhor criar interfaces mais específicas ao invés de uma única interface genérica. Uma classe não deve ser forçada a implementar interfaces e métodos que não irão utilizar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-quinto-princ%C3%ADpio-dip"&gt;
  &lt;/a&gt;
  O quinto princípio: DIP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;“deve-se depender de abstrações, não de objetos concretos.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;De acordo com &lt;strong&gt;Robert Martin&lt;/strong&gt; (Uncle Bob), este princípio pode ser definido da seguinte forma:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender da abstração;&lt;/li&gt;
&lt;li&gt;Abstrações não devem depender de detalhes. Detalhes devem depender de abstrações.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Abstrações tendem a ser estáveis, já as implementações, instáveis. Caso uma classe qualquer precise depender de outro módulo, seria interessante que esta seja uma abstração. Tente ao máximo não depender de outras implementações.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; Não confunda &lt;strong&gt;Inversão de dependência&lt;/strong&gt; com &lt;strong&gt;Injeção de dependência&lt;/strong&gt;. São duas coisas diferentes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Como dito anteriormente, esse é um resumo bem superficial e talvez não seja o suficiente para você se aprofundar no assunto. Contudo, deixo aqui a recomendação de um livro muito bom que abriu muito a minha mente sobre SOLID:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Orientação a Objetos e SOLID para Ninjas&lt;/strong&gt; - &lt;em&gt;Projetando classes flexíveis&lt;/em&gt;, de Mauricio Aniche. Você pode adquirir esse livro clicando &lt;a href="https://www.casadocodigo.com.br/products/livro-oo-solid"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura e até a próxima! ;)&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>resume</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Javascript Superpower - Higher Order Function</title>
      <author>Fadhil Radhian</author>
      <pubDate>Fri, 12 Nov 2021 23:47:50 +0000</pubDate>
      <link>https://dev.to/fadhilradh/javascript-superpower-higher-order-function-4inn</link>
      <guid>https://dev.to/fadhilradh/javascript-superpower-higher-order-function-4inn</guid>
      <description>&lt;p&gt;Yes I know, Higher Order Function seems a little bit daunting at first. &lt;/p&gt;

&lt;p&gt;Higher order? What does order even mean ?&lt;/p&gt;

&lt;p&gt;Don't worry, I will explain it to you with human language 😎&lt;/p&gt;

&lt;p&gt;Actually its concept is very simple.&lt;/p&gt;

&lt;p&gt;It is just a function that takes a parameter (like normal function!) but its parameter is not usual values.&lt;/p&gt;

&lt;p&gt;So what is it then ?&lt;/p&gt;

&lt;p&gt;Its parameter is some part of its functionality.&lt;/p&gt;

&lt;p&gt;But why ?&lt;/p&gt;

&lt;p&gt;Let's step back a little bit.&lt;/p&gt;

&lt;p&gt;In your journey as a programmer, you must have seen two functions that do stuff similarly, with only minor difference.&lt;/p&gt;

&lt;p&gt;Sometimes you feel like "Hmm.. why I need to write this again? It is very similar to that one". 😑&lt;/p&gt;

&lt;p&gt;You feel like they should have been a one reusable function, and that minor difference is passed through the function's parameter.&lt;/p&gt;

&lt;p&gt;Just like normal functions with different values as their parameter.&lt;/p&gt;

&lt;p&gt;But how we do it ?&lt;/p&gt;

&lt;p&gt;We do it with, yes, &lt;strong&gt;Higher Order Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basically, Higher Order function is a &lt;em&gt;reusable function that takes a part of its functionality from its parameter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Its purpose is one : Generalizing our function. To make it reusable in many places in our code with similar but slightly different use case.&lt;/p&gt;

&lt;p&gt;Cool, isn't it ?&lt;/p&gt;

&lt;p&gt;It is in accordance to key programming principle :&lt;br&gt;
Don't Repeat Yourself (DRY).&lt;/p&gt;

&lt;p&gt;And if you're like me, I like to write something that can be used in different places.&lt;/p&gt;

&lt;p&gt;It feels like I invent something, and it feels satisfying.&lt;/p&gt;

&lt;p&gt;Now let's start with a little bit of example.&lt;/p&gt;

&lt;p&gt;Let's suppose we have a function that takes and array and return array with elements divided by 2 :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IYekFWUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds3hf7rw83wv6q4gassn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYekFWUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds3hf7rw83wv6q4gassn.png" alt="Image description" width="663" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Yes, I know this example use that 'cruel' for loop. It is on purpose, to make a function that somewhat long but simple to understand)&lt;/p&gt;

&lt;p&gt;Now, in other place in our code, we have that 'similar but little different' function with the previous one :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDrGIcqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amow3o3zos1z5gorlt1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDrGIcqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amow3o3zos1z5gorlt1z.png" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we have 'that' type of function, again, somewhere else in our code :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vCeeeh4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8r0hj1udcm3q1w6spb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vCeeeh4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8r0hj1udcm3q1w6spb.png" alt="Image description" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it feels repetitive and our code get unnecessarily big. 😞&lt;/p&gt;

&lt;p&gt;I know how you feel.&lt;/p&gt;

&lt;p&gt;And yes, we break DRY principle.&lt;/p&gt;

&lt;p&gt;So, how we simplify these functions then ?&lt;/p&gt;

&lt;p&gt;Simple : &lt;strong&gt;by passing that different part in the function, as parameter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But can we pass string like " + 3 " and put it in our function ?&lt;/p&gt;

&lt;p&gt;No, we can't do that in Javascript.&lt;/p&gt;

&lt;p&gt;Then, how we do it ?&lt;br&gt;
&lt;em&gt;We make it a function and then, pass it as parameter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, this is our "Use It Anywhere Function" :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPXfgK-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g8l80rhqvihxqgedmyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPXfgK-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g8l80rhqvihxqgedmyi.png" alt="Image description" width="838" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We gave it a general name too, copyArrayAndManipulate()&lt;/p&gt;

&lt;p&gt;We just have to call it with different parameter each time we need slightly different functionality (see the last line).&lt;/p&gt;

&lt;p&gt;Now we have a reusable function, and our code get smaller and abstracted.&lt;/p&gt;

&lt;p&gt;That's it folks!&lt;/p&gt;

&lt;p&gt;Hopefully, now you understand Higher Order Function in Javascript. Congrats! 🎉 &lt;/p&gt;

&lt;p&gt;See you next time !&lt;/p&gt;

&lt;p&gt;Reach me at : &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/fadhil-radhian/"&gt;https://www.linkedin.com/in/fadhil-radhian/&lt;/a&gt;&lt;br&gt;
Github : fadhilradh&lt;/p&gt;

&lt;p&gt;Screenshots credit: &lt;br&gt;
Twitter: @willsentance&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>functional</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Remote Development with AWS Cloud9 IDE using a Docker and Docker-Compose application</title>
      <author>Cindy Le</author>
      <pubDate>Fri, 12 Nov 2021 23:41:47 +0000</pubDate>
      <link>https://dev.to/cindyledev/getting-started-with-aws-cloud9-ide-using-a-docker-and-docker-compose-application-35hj</link>
      <guid>https://dev.to/cindyledev/getting-started-with-aws-cloud9-ide-using-a-docker-and-docker-compose-application-35hj</guid>
      <description>&lt;p&gt;In this tutorial, we will be setting up Telescope in AWS Cloud9 IDE. &lt;a href="https://telescope.cdot.systems/"&gt;Telescope&lt;/a&gt; is a tool for tracking blogs around Seneca's open source develop. The application itself has many microservices that use Docker containers and are composed together using Docker-Compose. You can find the GitHub repo &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#telescope-tech-stack"&gt;
  &lt;/a&gt;
  Telescope Tech Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Material UI&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Traefik&lt;/li&gt;
&lt;li&gt;Firebase&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#telescope-microservices"&gt;
  &lt;/a&gt;
  Telescope Microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Auth&lt;/li&gt;
&lt;li&gt;Feed-Discovery&lt;/li&gt;
&lt;li&gt;Image&lt;/li&gt;
&lt;li&gt;Parser&lt;/li&gt;
&lt;li&gt;Planet&lt;/li&gt;
&lt;li&gt;Posts&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloud9/"&gt;AWS Cloud9&lt;/a&gt; is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The EC2 instance used in this guide is not within AWS's Free-Tier so please see &lt;a href="https://aws.amazon.com/ec2/pricing/on-demand/"&gt;EC2 Pricing&lt;/a&gt; to see if you're comfortable with these costs. Cloud9 has a cost-saving setting to help reduce costs by automatically hibernating after 30 minutes of inactivity. Running Docker in development is CPU intensive so these are the EC2 instances I recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimum: &lt;code&gt;t2.medium (4 GiB RAM + 2 vCPU)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Recommended: &lt;code&gt;t2.large (8 GiB RAM + 2 vCPU)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Summary of Pricing&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;t2.medium costs \$0.0464 per hour&lt;/li&gt;
&lt;li&gt;t2.large costs \$0.0928 per hour&lt;/li&gt;
&lt;li&gt;30GB Amazon Elastic Block Storage (EBS) costs \$3 per month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cost Estimate Per Month&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;t2.medium&lt;/th&gt;
&lt;th&gt;t2.large&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cost per hour&lt;/td&gt;
&lt;td&gt;\$0.0464&lt;/td&gt;
&lt;td&gt;\$0.0928&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hours per day&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Days per month&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sub-total&lt;/td&gt;
&lt;td&gt;\$11.14&lt;/td&gt;
&lt;td&gt;\$22.27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30GB EBS Volume&lt;/td&gt;
&lt;td&gt;\$3&lt;/td&gt;
&lt;td&gt;\$3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;\$14.14&lt;/td&gt;
&lt;td&gt;\$25.27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create an &lt;a href="https://aws.amazon.com/"&gt;AWS Account&lt;/a&gt;. You can watch this &lt;a href="https://www.youtube.com/watch?v=3hLmDS179YE&amp;amp;t=10552s"&gt;part&lt;/a&gt; of the AWS Certified Cloud Practitioner course on creating an account if you need help.&lt;/li&gt;
&lt;li&gt;Sign into your AWS Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-cloud9-environment"&gt;
  &lt;/a&gt;
  Creating your Cloud9 Environment:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the upper-right hand corner of your AWS Management Console, select &lt;code&gt;US East (Ohio) us-east-2&lt;/code&gt; as your &lt;code&gt;Region&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gb0iQlu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_08_11-.png" alt="Select us-east-2 region" width="450" height="287"&gt;
&lt;/li&gt;
&lt;li&gt;In the upper-left hand corner of your AWS Management Console, click on &lt;code&gt;Services&lt;/code&gt;. This is bring up a list of AWS Services, search for &lt;code&gt;Cloud9&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Create Environment&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rZ4MgK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_14_54-Welcome%2Bto%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Create environment" width="880" height="374"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Step 1 - Name environment:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name: &lt;code&gt;Telescope-Dev&lt;/code&gt; (whatever you want)&lt;/p&gt;

&lt;p&gt;Description (optional): &lt;code&gt;AWS Cloud9 development environment for Telescope&lt;/code&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBDCJknR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_15_58-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBDCJknR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_15_58-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 1" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 2 - Configure settings:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Environment type: &lt;code&gt;Create a new EC2 instance for environment (direct access)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instance type: &lt;code&gt;Other instance type: t2.medium (4 GiB RAM + 2 vCPU)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Platform: &lt;code&gt;Ubuntu Server 18.04 LTS&lt;/code&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1JQQ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_17_57-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1JQQ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_17_57-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 2a" width="880" height="712"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9R5r9j17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_19_55-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9R5r9j17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_19_55-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 2b" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 3 - Review and click &lt;code&gt;Create Environment&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will take a few minutes for AWS to create your new C9 environment&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#opening-the-ports-on-our-ec2-instance"&gt;
  &lt;/a&gt;
  Opening the ports on our EC2 instance:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Firstly, we'll need the MAC address of our EC2 instance
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/mac

06:c5:aa:63:ee:f4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPDsrRnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_30_02-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPDsrRnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_30_02-.png" alt="Getting MAC address" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using your EC2 instance's MAC address, we can get a list of Security Groups
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/&amp;lt;your_mac&amp;gt;/security-group-ids

sg-0c63c6f026a2b9288
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Find out what your IP address is using &lt;a href="http://checkip.amazonaws.com/"&gt;http://checkip.amazonaws.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You will need to authorize your IP address access to ports 3000, 8000, and 8443
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 3000 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 8000 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 8443 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEQ_wymV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_34_11-Telescope-Dev%2B-%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEQ_wymV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_34_11-Telescope-Dev%2B-%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Opening the ports" width="880" height="595"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#resize-your-amazon-ebs-volume"&gt;
  &lt;/a&gt;
  Resize your Amazon EBS volume
&lt;/h2&gt;

&lt;p&gt;Check first using &lt;code&gt;df -h&lt;/code&gt; in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      9.7G  9.3G  371M  97% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you first create an EC2 instance, it has an EBS Volume of 10GB. To increase it to 20GB, create a new file called &lt;code&gt;resize.sh&lt;/code&gt; in &lt;code&gt;~/environment&lt;/code&gt; directory and copy the following script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# Specify the desired volume size in GiB as a command-line argument. If not specified, default to 20 GiB.
SIZE=${1:-20}

# Get the ID of the environment host Amazon EC2 instance.
INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)

# Get the ID of the Amazon EBS volume associated with the instance.
VOLUMEID=$(aws ec2 describe-instances \
  --instance-id $INSTANCEID \
  --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
  --output text)

# Resize the EBS volume.
aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE

# Wait for the resize to finish.
while [ \
  "$(aws ec2 describe-volumes-modifications \
    --volume-id $VOLUMEID \
    --filters Name=modification-state,Values="optimizing","completed" \
    --query "length(VolumesModifications)"\
    --output text)" != "1" ]; do
sleep 1
done

# Check if we're on an NVMe filesystem
if [ $(readlink -f /dev/xvda) = "/dev/xvda" ]
then
  # Rewrite the partition table so that the partition takes up all the space that it can.
  sudo growpart /dev/xvda 1

  # Expand the size of the file system.
  # Check if we are on AL2
  STR=$(cat /etc/os-release)
  SUB="VERSION_ID=\"2\""
  if [[ "$STR" == *"$SUB"* ]]
  then
    sudo xfs_growfs -d /
  else
    sudo resize2fs /dev/xvda1
  fi

else
  # Rewrite the partition table so that the partition takes up all the space that it can.
  sudo growpart /dev/nvme0n1 1

  # Expand the size of the file system.
  # Check if we're on AL2
  STR=$(cat /etc/os-release)
  SUB="VERSION_ID=\"2\""
  if [[ "$STR" == *"$SUB"* ]]
  then
    sudo xfs_growfs -d /
  else
    sudo resize2fs /dev/nvme0n1p1
  fi
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: AWS Free-Tier includes 30GB of Storage, 2 million I/Os, and 1GB of snapshot storage with &lt;a href="https://aws.amazon.com/ebs/pricing/"&gt;Amazon Elastic Block Store (EBS)&lt;/a&gt; free for 12 months.&lt;/p&gt;

&lt;p&gt;In the terminal, execute the script by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh resize.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify size change with &lt;code&gt;df -h&lt;/code&gt; again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       20G  9.3G   11G  48% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-dockercompose"&gt;
  &lt;/a&gt;
  Install Docker-Compose
&lt;/h2&gt;

&lt;p&gt;By default, Docker is installed on AWS EC2's Ubuntu but Docker-Compose is not, so we have to install it ourselves.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run to download the current stable version of Docker-Compose:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Apply executable permissions to the downloaded file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Check installation using:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose --version

docker-compose version 1.29.2, build 5becea4c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-telescope-repository-in-cloud9"&gt;
  &lt;/a&gt;
  Setting up the Telescope repository in Cloud9:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the terminal, clone the Telescope repository and name the remote &lt;code&gt;upstream&lt;/code&gt; by entering
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone -o upstream https://github.com/Seneca-CDOT/telescope.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Change to the telescope directory
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd telescope
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set all the necessary environment variables in your env.remote file to contain your EC2 instance's public IPv4 address by executing the &lt;code&gt;aws-ip.sh&lt;/code&gt; script
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh ./tools/aws-ip.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#if-you-did-everything-correctly-youve-completed-the-environment-setup-using-aws-cloud9-yay"&gt;
  &lt;/a&gt;
  If you did everything correctly, you've completed the environment setup using AWS Cloud9! Yay!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#now-to-get-started-with-development"&gt;
  &lt;/a&gt;
  Now to get started with development...
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install all depenencies
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Start all Telescope services. This will take some time to complete
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose --env-file .env up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Start the Telescope development server on Port 3000
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=3000 npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Find your EC2 instance's public IPv4
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/public-ipv4

35.174.16.133
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:8000&lt;/code&gt; browser tab to see Telescope running on a AWS Cloud9 environment!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:3000/feeds&lt;/code&gt; in another browser tab to see all the feeds in the backend&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:8443/v1/&amp;lt;microservice-port&amp;gt;&lt;/code&gt; in another browser tab to see the microservices. For example &lt;code&gt;35.174.16.133:8443/v1/posts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfIyuz_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_54_59-Mozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfIyuz_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_54_59-Mozilla%2BFirefox.png" alt="Ports 3000 and 8000 opened in browser" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frequently-asked-questions-faq"&gt;
  &lt;/a&gt;
  Frequently Asked Questions (FAQ)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#whats-in-raw-awsipsh-endraw-"&gt;
  &lt;/a&gt;
  What's in &lt;code&gt;aws-ip.sh&lt;/code&gt;?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ipv4=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)

sed -r \
  -e  "s@(.+=)http://localhost:8000(/[^ ]*)*@\1http://$ipv4:3000\2@g" \
  -e  "s@(.+=)http://localhost:3000(/[^ ]*)*@\1http://$ipv4:8000\2@g" \
  -e  "s@(.+=)http://localhost([^:]*)@\1http://$ipv4:8443\2@g" \
  -e  "s@development\.yml@gitpod\.yml@" \
  config/env.development &amp;gt; .env

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-do-i-stop-my-docker-containers"&gt;
  &lt;/a&gt;
  How do I stop my docker containers?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run services:stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-do-i-delete-my-docker-containers"&gt;
  &lt;/a&gt;
  How do I delete my docker containers?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker system prune -af --volumes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-think-i-have-multiple-services-using-the-same-port-how-i-can-check"&gt;
  &lt;/a&gt;
  I think I have multiple services using the same port, how I can check?
&lt;/h3&gt;

&lt;p&gt;To see a list of all running services and what ports they're binding to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo lsof -i -P -n | grep LIST
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-cant-open-8000-running-what-could-i-be-doing-wrong"&gt;
  &lt;/a&gt;
  I can't open :8000 running, what could I be doing wrong?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you have a VPN on, turn it off and get your IP address by visiting &lt;a href="http://checkip.amazonaws.com/"&gt;http://checkip.amazonaws.com/&lt;/a&gt; then allow your IP address to access the ports 3000 and 8000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS may change your EC2 instance IP address when you stop or restart your EC2 instance. One solution is to purchase an &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#eip-basics"&gt;Elastic IP address&lt;/a&gt; to reserve the particular public IP address. However, you can just clean out the &lt;code&gt;env.remote&lt;/code&gt; and &lt;code&gt;.env&lt;/code&gt; files and run the &lt;code&gt;./tools/aws-ip.sh&lt;/code&gt; script again to set your new EC2 IP address in the appropriate environment variables. Just remember to use the new EC2 IP address in the browser as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RrKRN9zRBWs"&gt;AWS Certified Developer - Associate 2020&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>docker</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
