<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Replace std::find_if in 80% of the cases</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 29 Sep 2021 05:25:52 +0000</pubDate>
      <link>https://dev.to/sandordargo/replace-std-findif-in-80-of-the-cases-2kl2</link>
      <guid>https://dev.to/sandordargo/replace-std-findif-in-80-of-the-cases-2kl2</guid>
      <description>&lt;p&gt;If you've been following the posts on this blog, you know that &lt;a href="https://www.sandordargo.com/blog/2020/05/13/loops-vs-algorithms"&gt;I'm a big fan of using standard algorithms&lt;/a&gt; in any programming language, in particular in C++.&lt;/p&gt;

&lt;p&gt;They contain fewer bugs, in general they have better performance and the standard algorithms are more expressive.&lt;/p&gt;

&lt;p&gt;The last point on expressiveness is very important to me and after I saw a not-so-ideal example of using &lt;code&gt;std::find_if&lt;/code&gt; in our codebase, I wanted to have a deeper look.&lt;/p&gt;

&lt;p&gt;So I went through all our usages of &lt;code&gt;find_if&lt;/code&gt; and I found that it was only used in a proper way in about 20% of all the cases.&lt;/p&gt;

&lt;p&gt;This means that the Pareto principle applies here too. In 80% of the cases, &lt;code&gt;std::find_if&lt;/code&gt; should not have been used.&lt;/p&gt;

&lt;p&gt;But what else should have been used? And why?&lt;/p&gt;

&lt;p&gt;I brought some examples, where I changed the variable names.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-any-such-element"&gt;
  &lt;/a&gt;
  Is there any such element?
&lt;/h2&gt;

&lt;p&gt;Here is the first example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
           &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;myType&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENUM_ELEMENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might also see a close variant of the above example in your code base. Sometimes, there is a temporary variable to store the returned value of &lt;code&gt;find_if&lt;/code&gt;, even if it's used only once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;foundElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;myType&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENUM_ELEMENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;foundElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what goes on here? &lt;/p&gt;

&lt;p&gt;First of all, what does &lt;code&gt;find_if&lt;/code&gt; return? &lt;/p&gt;

&lt;p&gt;It returns an iterator to the first element of the searched range that satisfies the condition. If there is no such item, it returns an iterator pointing beyond the last element, in other words, to &lt;code&gt;end()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The function's return value in the above examples is a boolean, we simply compare whether &lt;code&gt;find_if&lt;/code&gt; returns anything else than the &lt;code&gt;end()&lt;/code&gt; of the examined collection. In other words, it checks whether the &lt;code&gt;find _if&lt;/code&gt; returns an iterator to any of the elements in &lt;code&gt;myCollection&lt;/code&gt;. Yet in other words, we check if &lt;em&gt;any of&lt;/em&gt; &lt;code&gt;myCollection&lt;/code&gt;'s elements satisfy the condition passed to &lt;code&gt;find_if&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alright, this last sentence should give us the hint. We can replace the above expression with &lt;code&gt;std::any_of&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;any_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;      &lt;span class="n"&gt;myType&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENUM_ELEMENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we gain? We have a comparison less and potentially a temporary variable less as well. At the same time, our code is shorter, more expressive and we didn't even have to touch the lambda we wrote.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-is-no-such-element"&gt;
  &lt;/a&gt;
  There is no such element!
&lt;/h2&gt;

&lt;p&gt;A bit different, yet similar example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;aPotentialItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aPotentialItem&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;aPotentialItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we don't use &lt;code&gt;!=&lt;/code&gt; as a comparison between the &lt;code&gt;end()&lt;/code&gt; of the collection and the return value of &lt;code&gt;find_if&lt;/code&gt;, but &lt;code&gt;==&lt;/code&gt; instead. Which means that we check whether there is no element in a given range complying to our condition.&lt;/p&gt;

&lt;p&gt;In other words, we check whether &lt;em&gt;none of&lt;/em&gt; the elements satisfy our condition.&lt;/p&gt;

&lt;p&gt;You guessed it right, in such cases we can replace &lt;code&gt;find_if&lt;/code&gt; with &lt;code&gt;none_of&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;none_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;aPotentialItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our gains are similar. We still spare comparison and potentially a temporary as well. Besides, our code is more terse, more expressive and we didn't even have to touch the lambda we use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-to-do"&gt;
  &lt;/a&gt;
  So what to do?
&lt;/h2&gt;

&lt;p&gt;Based on the cases I saw, I came up with this rule rule of thumb:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the result of &lt;code&gt;find_if&lt;/code&gt; is compared using &lt;code&gt;!= end()&lt;/code&gt; use &lt;code&gt;any_of&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if the result of &lt;code&gt;find_if&lt;/code&gt; is compared using &lt;code&gt;== end()&lt;/code&gt; use &lt;code&gt;none_of&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep &lt;code&gt;find_if&lt;/code&gt; only if you want to interact with the object pointed by the returned iterator. If the outcome is just a boolean, like in the above example, you have an alternative still in the standard library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a short post on how to use the C++ standard algorithms in a better way than often it is used. &lt;code&gt;std::find_if&lt;/code&gt; is often misused, probably because it's something more people know about than the alternatives.&lt;/p&gt;

&lt;p&gt;In the vast majority of the cases I saw, it can be replaced either with &lt;code&gt;std::any_of&lt;/code&gt; or &lt;code&gt;std::none_of&lt;/code&gt; which improves the readability of the given piece of code a lot.&lt;/p&gt;

&lt;p&gt;Go and check in your codebases how &lt;code&gt;std::find_if&lt;/code&gt; is used. Do you have similar findings?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>stl</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>I made 100 CSS loaders for your next project</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:24:42 +0000</pubDate>
      <link>https://dev.to/hyshah/i-made-100-css-loaders-for-your-next-project-16m2</link>
      <guid>https://dev.to/hyshah/i-made-100-css-loaders-for-your-next-project-16m2</guid>
      <description>&lt;p&gt; &lt;span&gt;You either make a super fast website/application or you use loaders. I think most of us fall into the second category.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now the question is: what loader should I use? the "loading" text, the 3 dots, a progress bar, the Batman symbol??&lt;/p&gt;
&lt;p&gt;You no more need to bother yourself searching for loaders. Find below a collection of 100 different CSS loaders. From the simple one to the more fancy one, you will find the most suitable for your project.&lt;/p&gt;
&lt;p&gt;Each loader is done using a &lt;span&gt;single&lt;/span&gt; element. Yes, only one &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, nothing more. You don't have to copy a ton of code. Add a class to your div and start loading! &lt;/p&gt;

&lt;p&gt;Read More:&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwjRwJLBuKPzAhX9xzgGHRRPBagQFnoECCIQAQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt; I made 100 CSS loaders for your next project &lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwjRwJLBuKPzAhX9xzgGHRRPBagQFnoECCIQAQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;&lt;br&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;





</description>
      <category>css</category>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:11:53 +0000</pubDate>
      <link>https://dev.to/hyshah/7-best-tools-for-developers-they-can-t-live-without-it-13mb</link>
      <guid>https://dev.to/hyshah/7-best-tools-for-developers-they-can-t-live-without-it-13mb</guid>
      <description>&lt;p&gt; &lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;best tools for developers &lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;VS Code extensions for JS &lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the &lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>10 Awesome Github Repos Every Web Developer Should Know</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:04:07 +0000</pubDate>
      <link>https://dev.to/hyshah/10-awesome-github-repos-every-web-developer-should-know-4i35</link>
      <guid>https://dev.to/hyshah/10-awesome-github-repos-every-web-developer-should-know-4i35</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference. &lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>I wrote a fully-functioning File Explorer, using TypeScript.</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:01:53 +0000</pubDate>
      <link>https://dev.to/hyshah/i-wrote-a-fully-functioning-file-explorer-using-typescript-35ac</link>
      <guid>https://dev.to/hyshah/i-wrote-a-fully-functioning-file-explorer-using-typescript-35ac</guid>
      <description>&lt;p&gt;I am very happy to introduce &lt;a href="https://xplorer.vercel.app/"&gt;Xplorer&lt;/a&gt; to help you organize your files and/or folders.&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;img alt="Xplorer win" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBmk6MCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;br&gt;&lt;/h2&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#features"&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#designed-out-of-the-box"&gt;&lt;/a&gt;Designed Out Of The Box&lt;/h3&gt;
&lt;p&gt;Xplorer is not written on traditional language like C, C++ or C#. It is written on TypeScript, HTML and SCSS, using the Electron framework, this makes Xplorer looks much more modern, and it will support theme customization in the future release. There are four available default themes for now.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#cross-platform"&gt;&lt;/a&gt;Cross Platform&lt;/h3&gt;
&lt;p&gt;As I mentioned, Xplorer is powered by the web because it's written with the Electron framework, this makes it possible to run Xplorer from any platform. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjPiI64s6PzAhW4wjgGHTZOBx0QFnoECB8QAQ&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;I wrote a fully-functioning File Explorer, using TypeScript&lt;/a&gt;&lt;/b&gt;. &lt;/p&gt;






</description>
    </item>
    <item>
      <title>5 Common HTML Mistakes you should avoid.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Wed, 29 Sep 2021 04:59:11 +0000</pubDate>
      <link>https://dev.to/abhirajb/5-common-html-mistakes-you-should-avoid-35he</link>
      <guid>https://dev.to/abhirajb/5-common-html-mistakes-you-should-avoid-35he</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-semantic-header-and-footer"&gt;
  &lt;/a&gt;
  1. Semantic Header and Footer
&lt;/h2&gt;

&lt;p&gt;Divs have no semantic structure. Instead of using divs to create headers or footer structures, use "header" and "footer" elements.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-use-figure-element"&gt;
  &lt;/a&gt;
  2. Use Figure Element
&lt;/h2&gt;

&lt;p&gt;If you need to add a caption to your image, use the "figure" element combined with the "figcaption" element.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image url"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Lorem Ipsum Description &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image url"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Lorem Ipsum Description &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-dont-use-bold-or-italic-tags"&gt;
  &lt;/a&gt;
  3. Don't use bold or italic tags
&lt;/h2&gt;

&lt;p&gt;The "b" and "i" tags are presentational tags, and have no semantic meaning, instead either change the font-weight/font-style in the CSS or use the "strong" or "em" element.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;Bold&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;Italics&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Bold&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;Italics&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-using-descriptive-links"&gt;
  &lt;/a&gt;
  4. Using descriptive links
&lt;/h2&gt;

&lt;p&gt;A link’s text should be explicit and convey where is redirecting the user to, both users and search engines can more easily understand your content and how it relates to other pages.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Check our pricing...
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Check our &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; pricing &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-using-inline-styles"&gt;
  &lt;/a&gt;
  5. Using inline styles
&lt;/h2&gt;

&lt;p&gt;Writing inline styles violates the principle of having the structure (HTML) separate from the presentation (CSS). Instead write the styles in a stylesheet.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 24"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Header
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read my blog @ &lt;a href="https://abhirajb.netlify.app"&gt;abhirajb.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 VS Code extensions you need to install right now!</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Wed, 29 Sep 2021 04:31:23 +0000</pubDate>
      <link>https://dev.to/byteslash/top-10-vs-code-extensions-you-need-to-install-right-now-2m67</link>
      <guid>https://dev.to/byteslash/top-10-vs-code-extensions-you-need-to-install-right-now-2m67</guid>
      <description>&lt;h3&gt;
  &lt;a href="#prettier-code-formatter"&gt;
  &lt;/a&gt;
  Prettier - Code formatter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67baK3Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632840482623/tvWvse0hD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67baK3Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632840482623/tvWvse0hD.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Prettier is one of the most used code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#gitlens-git-supercharged"&gt;
  &lt;/a&gt;
  GitLens — Git supercharged
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1mskxCIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882714995/POS8TDbKN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1mskxCIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882714995/POS8TDbKN.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
GitLens is a great extension that makes working in a group easier. It shows you which piece of code was committed when and by whom and also the commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#live-share"&gt;
  &lt;/a&gt;
  Live Share
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WUjwx8eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882970018/V5urCY0i5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WUjwx8eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882970018/V5urCY0i5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to code together with your friend or get some help from a person and want them to see your code easily and code in real-time in front of you then this is what you need. This extension allows you to code together with someone else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#import-cost"&gt;
  &lt;/a&gt;
  Import Cost
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6A7H9YBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887403661/w3h0zgRck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6A7H9YBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887403661/w3h0zgRck.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Whenever you import something from a package, it will show its size and the gzip like this-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HOxJBjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887387510/0DibnxsxTK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HOxJBjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887387510/0DibnxsxTK.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-preview"&gt;
  &lt;/a&gt;
  Image Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ySILPME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887490339/qmv4qBr4Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ySILPME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887490339/qmv4qBr4Y.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension shows you a small image in the sidebar when you give the path of an image and a bigger image if you hover over the link. It is quite useful and it is also a way to check if the image path is correct :P&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#codesnap"&gt;
  &lt;/a&gt;
  CodeSnap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeGmKHn4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888957808/qxLP6ABmZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeGmKHn4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888957808/qxLP6ABmZ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeSnap allows you to take beautiful screenshots of your code and share it with someone easily that too inside VS Code. Here is an example-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ssBHiq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888196146/chdgiGe10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ssBHiq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888196146/chdgiGe10.png" alt="code.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-es6-code-snippets"&gt;
  &lt;/a&gt;
  JavaScript (ES6) code snippets
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2G-RhpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888526653/GhEknGXPD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2G-RhpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888526653/GhEknGXPD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension provides various commonly used code snippets and saves a lot of time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#htmltagwrap"&gt;
  &lt;/a&gt;
  Htmltagwrap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plOG9NWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889109557/6lr2zCJKW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plOG9NWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889109557/6lr2zCJKW.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a small extension but pretty useful. If you select some tags or text then click Alt + W or Option + W for Mac then it will wrap it around a tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#auto-rename-tag"&gt;
  &lt;/a&gt;
  Auto rename tag
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-ShN_wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889136001/2sNt6BEjQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-ShN_wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889136001/2sNt6BEjQ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use XML or HTML then this extension is a lifesaver. Whenever you need to change the tag, if you just edit the opening or closing tag it will automatically change the other one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#es7-reactreduxgraphqlreactnative-snippets"&gt;
  &lt;/a&gt;
  ES7 React/Redux/GraphQL/React-Native snippets
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unXBM1HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889083726/WzxMDexWF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unXBM1HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889083726/WzxMDexWF.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension provides you with commonly used React, Redux, GraphQL, and React Native snippets and saves a lot of time. For example, writing _rafce gives me a React arrow function component-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Home = () =&amp;gt; {
    return (
        &amp;lt;div&amp;gt;

        &amp;lt;/div&amp;gt;
    )
}

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;Install&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;Connect with me&lt;/a&gt; &lt;/p&gt;

</description>
      <category>vscode</category>
      <category>extensions</category>
      <category>productivity</category>
      <category>tooling</category>
    </item>
    <item>
      <title>[Solved]: non-default argument follows default argument</title>
      <author>Rajesh Joshi</author>
      <pubDate>Wed, 29 Sep 2021 03:59:09 +0000</pubDate>
      <link>https://dev.to/rajeshj3/solved-non-default-argument-follows-default-argument-400d</link>
      <guid>https://dev.to/rajeshj3/solved-non-default-argument-follows-default-argument-400d</guid>
      <description>&lt;p&gt;Once in your life, you must have faced this error in &lt;code&gt;Python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;non-default argument follows default argument&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;In Python, normally you can't define &lt;code&gt;non-default&lt;/code&gt; arguments after &lt;code&gt;default&lt;/code&gt; arguments in a function, method or class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;non-default arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;default arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, a combination of both of these looks something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is 100% correct. It works great.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Executing this code will log, &lt;strong&gt;non-default argument follows default argument&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution?
&lt;/h2&gt;

&lt;p&gt;The solution is very simple, just use &lt;code&gt;*&lt;/code&gt; at 0th index in the definition.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was introduced in &lt;code&gt;Python 3.4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Don;t forget to pass required keyword arguments while calling the function, method or class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'School'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;Rajesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;School&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you&lt;br&gt;
Cheers&lt;/p&gt;

</description>
      <category>python</category>
      <category>help</category>
      <category>errors</category>
      <category>solved</category>
    </item>
    <item>
      <title>A Complete Practical Guide on Hoppscotch.</title>
      <author>Sankalp Swami</author>
      <pubDate>Wed, 29 Sep 2021 03:54:07 +0000</pubDate>
      <link>https://dev.to/sankalpswami1122/a-complete-practical-guide-on-hoppscotch-374j</link>
      <guid>https://dev.to/sankalpswami1122/a-complete-practical-guide-on-hoppscotch-374j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;INTRODUCTION&lt;/strong&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this blog we will work practically on Hoppscotch. We will study how API Testing is done in Hoppscotch. Writing pre-request scripts and Test scripts to make sure the API is highly secured and reliable because If our APIs are not secured &amp;amp; reliable, it will crash just like &lt;em&gt;tom&lt;/em&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/WoXxAq4QGsvCg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/WoXxAq4QGsvCg/giphy.gif" alt="Flying Tom"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-api-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;WHAT IS API ?&lt;/strong&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;API stands for Application-Programming-Interface. It is the middle layer between User Interface and Backend Server. You can take &lt;code&gt;API&lt;/code&gt; as an waiter in restaurant, where &lt;code&gt;User requests&lt;/code&gt; are customers and &lt;code&gt;Server&lt;/code&gt; is the Chef in the Kitchen. When customer has a specific request, it is taken to chef by waiter. In same way, When user makes a specific request, it is requested to the server through &lt;code&gt;API&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-hoppscotch-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;WHAT IS HOPPSCOTCH ?&lt;/strong&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;a href="https://hoppscotch.io"&gt;Hoppscotch&lt;/a&gt;&lt;/strong&gt;&lt;/strong&gt; is a tool that helps us to build HTTP requests that we send to Servers. It is an tool that allow us to work easily with the APIs. It is an HTTP Client using which we can make HTTP requests using an GUI for validating the responses we retrieve using those API requests.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-work-practically-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;Let's Work Practically !&lt;/strong&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The Best way of learning is by working on it practically. We will test some APIs and will write tests for it.&lt;br&gt;
Go to &lt;strong&gt;&lt;strong&gt;&lt;a href="https://hoppscotch.io"&gt;Hoppscotch.io&lt;/a&gt;&lt;/strong&gt;&lt;/strong&gt;. Lets start creating http requests.&lt;br&gt;
Lets make our first http GET Request on Hoppscotch using the url -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//api-client-1122.herokuapp.com/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy this url and paste it in URL box in Hoppscotch.&lt;br&gt;
And start with simple GET Request and press Send Button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FFvYZftV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55sxkyyxohbyd8zlr48i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FFvYZftV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55sxkyyxohbyd8zlr48i.png" alt="GET Request"&gt;&lt;/a&gt;&lt;br&gt;
Yayy!! We just made our first GET Request and got response of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HI THERE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats super cool! Now save the response by clicking on &lt;code&gt;Save&lt;/code&gt; button. New dialog box appears.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oNPtslX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0wj85cpcjbsowevuwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNPtslX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0wj85cpcjbsowevuwh.png" alt="Save Button"&gt;&lt;/a&gt;&lt;br&gt;
Add name to your request as &lt;code&gt;1st Request&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#collections"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;Collections&lt;/strong&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;So what are &lt;code&gt;Collections&lt;/code&gt; in &lt;code&gt;Hoppscotch&lt;/code&gt;?&lt;br&gt;
With the help of &lt;code&gt;Collections&lt;/code&gt;, we can group together all the HTTP Requests of the single API Endpoint to organise it in a well-mannered way.&lt;br&gt;
Click on &lt;code&gt;Add new&lt;/code&gt; button to create a new &lt;code&gt;Collection&lt;/code&gt; and name it &lt;code&gt;Users API&lt;/code&gt; and click on &lt;code&gt;save&lt;/code&gt; button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJQGbzUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wemv50mre96fynhlu213.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJQGbzUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wemv50mre96fynhlu213.png" alt="User API"&gt;&lt;/a&gt;&lt;br&gt;
Select &lt;code&gt;User API&lt;/code&gt; from &lt;code&gt;My Collections&lt;/code&gt; and save the request to the &lt;code&gt;User API&lt;/code&gt; Collection.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRvY3vdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ueghw5dc8unv6og1le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRvY3vdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ueghw5dc8unv6og1le.png" alt="User API"&gt;&lt;/a&gt;&lt;br&gt;
We have created our first &lt;code&gt;Collection&lt;/code&gt; successfully and saved our 1st request to the &lt;code&gt;User API&lt;/code&gt; Collection.&lt;/p&gt;

&lt;p&gt;Now we will try to fetch the Users list from the API.&lt;br&gt;
Paste the below url for fetching the Users list from the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//api-client-1122.herokuapp.com/users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using GET Method send the request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8VPqxcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch117zq1z31c3ljx8gh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8VPqxcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch117zq1z31c3ljx8gh2.png" alt="Unauthorized"&gt;&lt;/a&gt;&lt;br&gt;
Uh oh! We received an Authentication error.&lt;br&gt;
Reason for this error is that We are not Authenticated and for that We need to create our credentials. Lets get into creating a new user.&lt;br&gt;
Change the method to &lt;code&gt;POST&lt;/code&gt;.&lt;br&gt;
And change &lt;code&gt;Content Type&lt;/code&gt; to &lt;code&gt;application/json&lt;/code&gt; because we are providing our data in &lt;code&gt;json&lt;/code&gt; format.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saBhDRE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxyy4rx804tq0r3rykv0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saBhDRE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxyy4rx804tq0r3rykv0.png" alt="JSON"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sankee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IplayGTA5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your data to the request body which you want to send with the request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWMYeasP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9nrz5muk08q6z5z39vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWMYeasP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9nrz5muk08q6z5z39vr.png" alt="Body"&gt;&lt;/a&gt;&lt;br&gt;
Click on &lt;code&gt;Send&lt;/code&gt; button to make the request.&lt;br&gt;
Wooo! We just made our first &lt;code&gt;POST&lt;/code&gt; request here.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-ONxrft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sqv0l5e7f6dwxbjuwsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-ONxrft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sqv0l5e7f6dwxbjuwsl.png" alt="Response"&gt;&lt;/a&gt;&lt;br&gt;
We have successfully created our credentials and have received the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6151b7499602b70004d674f2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sankee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$2b$10$kcNFDQnfkewy.tT6TQtgVOICyeHFbT4B0rzMXVfPVuzdlGFK4htJW&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__v&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets move forward and generate an auth token by send our credentials to the &lt;code&gt;login&lt;/code&gt; route.&lt;br&gt;
Add the same json data to request body to generate auth token.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEx9LhqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foxh6h8jk5fum23rg6r8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEx9LhqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foxh6h8jk5fum23rg6r8.png" alt="Auth token"&gt;&lt;/a&gt;&lt;br&gt;
Yep! We successfully generated our auth token. Copy the &lt;code&gt;auth token&lt;/code&gt; for using it in &lt;code&gt;user&lt;/code&gt; route.&lt;br&gt;
Save the &lt;code&gt;login&lt;/code&gt; route to the &lt;code&gt;User API&lt;/code&gt; collection by clicking on dropdown arrow next to &lt;code&gt;Save&lt;/code&gt; Button and click on &lt;code&gt;Save as&lt;/code&gt; button. Name it and select &lt;code&gt;User API&lt;/code&gt; from &lt;code&gt;My Collections&lt;/code&gt;, Save it!.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fwxqWbqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rknrlyq60hxck404yr5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fwxqWbqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rknrlyq60hxck404yr5s.png" alt="Login Route"&gt;&lt;/a&gt;&lt;br&gt;
Now again we will try to fetch users list on &lt;code&gt;users&lt;/code&gt; route by adding the &lt;code&gt;auth token&lt;/code&gt; along with the request.&lt;br&gt;
Click on &lt;code&gt;Authorization&lt;/code&gt; button below the URL box and set &lt;code&gt;Authorization Type&lt;/code&gt; to &lt;code&gt;Bearer Token&lt;/code&gt;. Paste the copied &lt;code&gt;auth token&lt;/code&gt; in the &lt;code&gt;Token&lt;/code&gt; box.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TRmMfze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8f8vp4x3wkm6pohcfv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TRmMfze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8f8vp4x3wkm6pohcfv5.png" alt="Authz"&gt;&lt;/a&gt;&lt;br&gt;
Now make the &lt;code&gt;GET&lt;/code&gt; Method Request to fetch the users list.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdO3qwjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36vzx5pa1guh54zg18rx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdO3qwjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36vzx5pa1guh54zg18rx.png" alt="Users List"&gt;&lt;/a&gt;&lt;br&gt;
We have successfully fetched the Users list.&lt;br&gt;
Lets try it by manipulating the token to verify its security.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4kbqIbGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h758dt26x6mfdn2a9c5o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kbqIbGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h758dt26x6mfdn2a9c5o.png" alt="Error"&gt;&lt;/a&gt;&lt;br&gt;
Yeah its highly secured, cannot access the API with wrong &lt;code&gt;Auth Token&lt;/code&gt;.&lt;br&gt;
Make it correct and save the &lt;code&gt;/users&lt;/code&gt; route to &lt;code&gt;User API&lt;/code&gt; collection in the same way as we did for &lt;code&gt;/login&lt;/code&gt; route.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34EV-U60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7gkwhnp5eavn2i3800l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34EV-U60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7gkwhnp5eavn2i3800l.png" alt="Users route"&gt;&lt;/a&gt;&lt;br&gt;
Moving on! Copy &lt;code&gt;id&lt;/code&gt; of one of the user for further use.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e02MiESc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6647anmw92lcowwqh2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e02MiESc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6647anmw92lcowwqh2l.png" alt="Copy ID"&gt;&lt;/a&gt;&lt;br&gt;
Add the id in URL box to update data of an user using &lt;code&gt;PUT&lt;/code&gt; request. Now your URL Box will look like something of this kind.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//api-client-1122.herokuapp.com/users/6151a8649602b70004d674f1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the method to &lt;code&gt;PUT&lt;/code&gt; and add this data to the request body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sankalp123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Send the request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOS_FTRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i6gesyydws2dav2y3gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOS_FTRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i6gesyydws2dav2y3gb.png" alt="PUT"&gt;&lt;/a&gt;&lt;br&gt;
As we have received status code of 200, we have successfully updated our document. Verify it by sending &lt;code&gt;GET&lt;/code&gt; request on same route. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2txE8pa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt9mc4z5u6r7c69nvie8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2txE8pa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt9mc4z5u6r7c69nvie8.png" alt="img"&gt;&lt;/a&gt;&lt;br&gt;
Wohoo! Successfully updated our document. Now save the route as &lt;code&gt;Update an User&lt;/code&gt; to the &lt;code&gt;User API&lt;/code&gt; Collection.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#environments"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;Environments&lt;/strong&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Our url is getting bit lengthy, No worries, &lt;code&gt;Environments&lt;/code&gt; are here for rescue. We can create variables to store data and we can use those variables in our requests.&lt;br&gt;
Lets make an variable &lt;code&gt;baseURL&lt;/code&gt; and store our API Endpoint in it. Click on &lt;code&gt;Environment&lt;/code&gt; icon button next to our workspace and click on &lt;code&gt;Add new&lt;/code&gt; button and name it &lt;code&gt;User API&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5siJz4jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6o9xq1eove3p0584upn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5siJz4jM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6o9xq1eove3p0584upn.png" alt="Env"&gt;&lt;/a&gt;&lt;br&gt;
Click on &lt;code&gt;User API&lt;/code&gt; and add variables to the &lt;code&gt;env&lt;/code&gt;. Name it &lt;code&gt;baseURL&lt;/code&gt; and add &lt;code&gt;https://api-client-1122.herokuapp.com/&lt;/code&gt; url to &lt;code&gt;value&lt;/code&gt; box and save it.&lt;br&gt;
Switch to &lt;code&gt;User API&lt;/code&gt; env by clicking on &lt;code&gt;No Environment&lt;/code&gt; button followed by &lt;code&gt;User API&lt;/code&gt; button.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nDm4_Ylk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbe0hp44fs4sqtca1qzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDm4_Ylk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbe0hp44fs4sqtca1qzq.png" alt="env"&gt;&lt;/a&gt;&lt;br&gt;
Hurray! Env switching done !!&lt;br&gt;
But how I m gonna access the variables?&lt;br&gt;
mmm, yeah dont worry, &lt;code&gt;&amp;lt;&amp;lt;value&amp;gt;&amp;gt;&lt;/code&gt; brackets are here.&lt;br&gt;
Go to url box and replace the API with the syntax.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ud1ysQ8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5hizrnqtqs4djzcg9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ud1ysQ8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5hizrnqtqs4djzcg9z.png" alt="ENV VARIABLE"&gt;&lt;/a&gt;&lt;br&gt;
Hover over it and you can see the value stored in the variable. If the variable has blue correct, its correct and if you make an typo, you will get red color indicating that you have no such variable in your &lt;code&gt;environment&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcA1VjLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si6p6i1xs228p01wl5uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcA1VjLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si6p6i1xs228p01wl5uk.png" alt="red"&gt;&lt;/a&gt;&lt;br&gt;
Now lets move forward on deleting an User with &lt;code&gt;DELETE&lt;/code&gt; method. Lets delete an User by changing the Method to &lt;code&gt;DELETE&lt;/code&gt; and with the same id we used for updating an User Document.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BWmaQBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04oskmk7mx45ygm1ng0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BWmaQBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04oskmk7mx45ygm1ng0w.png" alt="Delete"&gt;&lt;/a&gt;&lt;br&gt;
Lets confirm the deletion of user document by making another &lt;code&gt;GET&lt;/code&gt; request to the same URL.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PbcUyYbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4jojbkf60potswweyag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PbcUyYbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4jojbkf60potswweyag.png" alt="Verify"&gt;&lt;/a&gt;&lt;br&gt;
Yeah! Not found !&lt;/p&gt;

&lt;p&gt;We have gone through all the common Request Methods and also organised our all requests using &lt;code&gt;Collections&lt;/code&gt; and created variables by using &lt;code&gt;Environments&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;TESTS&lt;/strong&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;What the heck &lt;code&gt;Tests&lt;/code&gt; are ? Well &lt;code&gt;Tests&lt;/code&gt; are scripts written in javascript which executes after the response is received.&lt;br&gt;
Lets start writing tests for our API Requests.&lt;br&gt;
Go to our &lt;code&gt;1st Request&lt;/code&gt; and then go the &lt;code&gt;Tests&lt;/code&gt; section. We have some pre written tests to the right side of the workspace.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHODw1Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szri18dkuclvq2upw3um.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHODw1Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szri18dkuclvq2upw3um.png" alt="snippets"&gt;&lt;/a&gt;&lt;br&gt;
Click on &lt;code&gt;Response: status code is 200&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--87Dkxb2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxuu57ogh4hk7h1a3i8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--87Dkxb2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxuu57ogh4hk7h1a3i8v.png" alt="snippet200"&gt;&lt;/a&gt;&lt;br&gt;
Now click on send button and check for the tests.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6-XKkL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4j1ta93xkdkscnbkgmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6-XKkL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4j1ta93xkdkscnbkgmz.png" alt="Test Result"&gt;&lt;/a&gt;&lt;br&gt;
Oh Yeah! Our test is successful. Lets write custom test.&lt;br&gt;
Syntax -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Syntax is pretty much simple, we start with &lt;code&gt;pw.test&lt;/code&gt; followed by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; for the &lt;code&gt;test&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Check for HI THERE&lt;/span&gt;
&lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response is HI THERE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"Message":"HI THERE"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this code to &lt;code&gt;Tests&lt;/code&gt; and lets check if this fails or Passes. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Y2vlUru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16vumo4ezl8ti7mka6d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Y2vlUru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16vumo4ezl8ti7mka6d2.png" alt="Test"&gt;&lt;/a&gt;&lt;br&gt;
Hurray! We passed both the tests - &lt;code&gt;status code 200&lt;/code&gt; and &lt;code&gt;expected message&lt;/code&gt; test successfully.&lt;br&gt;
Now its your assignment to add status code tests to all the http request we made today because &lt;code&gt;Practice makes man Perfect&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;Yep! We worked on complete practical use of Hopscotch HTTP Client. We learned how to make different HTTP Requests along with 4 most common Request Methods - &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; &amp;amp; &lt;code&gt;DELETE&lt;/code&gt;. We worked on how to organise all of our API Requests using &lt;code&gt;Collections&lt;/code&gt; and creating &amp;amp; using variables by using &lt;code&gt;Environments&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  🙌&lt;strong&gt;SUPPORT&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/sankalpswami"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIp6irG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wa7xuvv19rndc0j2gab.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  CONNECT WITH ME
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://twitter.com/sankalpswami01"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, Peace and Bubbyeye and yeah keep learning no matter how sleepy you are..!&lt;br&gt;
&lt;a href="https://i.giphy.com/media/bEs40jYsdQjmM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bEs40jYsdQjmM/giphy.gif" alt="Sleepy Tom"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>security</category>
    </item>
    <item>
      <title>[free template] App UI package for Food ordering</title>
      <author>Adamo Digital</author>
      <pubDate>Wed, 29 Sep 2021 03:44:40 +0000</pubDate>
      <link>https://dev.to/adamodigitalco/free-template-app-ui-package-for-food-ordering-7mh</link>
      <guid>https://dev.to/adamodigitalco/free-template-app-ui-package-for-food-ordering-7mh</guid>
      <description>&lt;p&gt;As social distancing spread globally, we saw a surge of demand in developing food ordering websites and apps. Unfortunately, there have some ambiguities in concept and features deterring companies from defining what they really want.&lt;/p&gt;

&lt;p&gt;Accordingly, today we give you a small step of what a realistic app should be? Despite spending money buying UI design in ThemeForest or other design marketplaces, we give you FREE.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bf8gbbcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enr35kn3bi69ex71zoek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bf8gbbcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enr35kn3bi69ex71zoek.png" alt="On demand food delivery UI set"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#readytoused-template-for-everyone"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;Ready-to-used template&lt;/a&gt; for everyone
&lt;/h2&gt;

&lt;p&gt;We offer a full set of 15 app screens of featured delivery app, specialize in user apps. It contains interfaces for user login, placing orders, and tracking orders.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Screens&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Log-in/sign-up screen&lt;/td&gt;
&lt;td&gt;For users access&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Profile management screen&lt;/td&gt;
&lt;td&gt;Payment, notification, languages, and more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Home Screen&lt;/td&gt;
&lt;td&gt;Dishes and drinks exploring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Store screen&lt;/td&gt;
&lt;td&gt;Menus and information display&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Order and Payment&lt;/td&gt;
&lt;td&gt;Order review and placing payment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#get-it-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;GET IT NOW&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#completed-ui-design-for-ordering-app"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;Completed UI design&lt;/a&gt; for ordering app
&lt;/h2&gt;

&lt;p&gt;As developers, you intend to explore the fundamental feature set to be applied in an app development project. In fact, each project has its own architecture and UI depending on the unique requirement of product owners. However, in terms of &lt;a href="https://adamodigital.com/on-demand-food-ordering-app"&gt;Food ordering apps&lt;/a&gt;, some common authorism could be shared.&lt;/p&gt;

&lt;p&gt;As a UX/UI designer, it is a rare opportunity for you to capture a completed package UI for FREE. Our latest UI template comes from experienced designers who contributed to many real projects. As &lt;a href="https://adamodigital.com/"&gt;software outsourcing companies&lt;/a&gt;, we have a chance to execute several projects related to &lt;a href="https://adamodigital.com/on-demand-food-ordering-app"&gt;on-demand Food ordering&lt;/a&gt; and &lt;a href="https://adamodigital.com/on-demand-food-delivery-app"&gt;on-demand food delivery&lt;/a&gt;, which turned into a valued experience.&lt;/p&gt;

&lt;p&gt;As a client planning a new project regarding food orders to your business, our template would give you the initial concept before talking further.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fUuAln2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uicybnmz6s3zsak5bvot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fUuAln2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uicybnmz6s3zsak5bvot.png" alt="UI template screen reveal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-here"&gt;
  &lt;/a&gt;
  &lt;a href="https://inspire.adamodigital.com/food-delivery-app-design"&gt;DOWNLOAD HERE&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>design</category>
      <category>template</category>
      <category>uiset</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 65</title>
      <author>Christopher Glikpo</author>
      <pubDate>Wed, 29 Sep 2021 03:40:43 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-65-4fg5</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-65-4fg5</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will be Creating the video progress timer&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FvbGFqo37UI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS Elastic Beanstalk - Hands On</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 29 Sep 2021 03:18:30 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-elastic-beanstalk-hands-on-1gji</link>
      <guid>https://dev.to/this-is-learning/aws-elastic-beanstalk-hands-on-1gji</guid>
      <description>&lt;p&gt;To create a stack on AWS bean stalk follow the steps below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Search for beanstalk in the Search bar after logging in &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1ffTUkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaam95jxtyo4nvrp8e1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1ffTUkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaam95jxtyo4nvrp8e1o.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on create application on the homepage&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkTXmXM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xcuclrlfimfnopukxs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkTXmXM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xcuclrlfimfnopukxs8.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select an application name I selected &lt;code&gt;test-beanstalk-app&lt;/code&gt; and tags you want to attach to this app&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8iJ5tGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8yf42k7utp2qt4xhsyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8iJ5tGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8yf42k7utp2qt4xhsyl.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that on platform select &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Platform- Language with which you want to deploy your app &lt;/li&gt;
&lt;li&gt;Select version of node.js I selected the automatically selected one&lt;/li&gt;
&lt;li&gt;Platform version- Version of AWS platform that you want to select as different versions support deifferent node.js engines&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SzHV5Y3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fduethjv4k96nc0emif3.png" alt="alt text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In application code select sample application for a test app. If you want to upload your own code select upload your code &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpy7l_7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8l6rtiihzdhsus8x9zv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpy7l_7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8l6rtiihzdhsus8x9zv.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on create application and wait for a few minutes after a few logs you will see the following screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7t9Sa_KB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um317go8q6u4rpjt5nkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7t9Sa_KB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um317go8q6u4rpjt5nkm.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the app link highlighted in the previous image to have a look at your demo app.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uUmfJPK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0pzek97i9dj9epo50qc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUmfJPK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0pzek97i9dj9epo50qc.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After that in configuration you can check all the things that were setup by AWS beanstalk&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDmxjLdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fixajx8n2xaj38qjmuvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDmxjLdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fixajx8n2xaj38qjmuvt.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create various environments in the environments like creating develop, production etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KG2z3ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dp0f36utk7sux6tum2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KG2z3ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dp0f36utk7sux6tum2.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally delete your app using the applications tab and select application and after that click on actions and click delete application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a4ukKRy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xesnl92a4mi0adklhmqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a4ukKRy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xesnl92a4mi0adklhmqr.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are done with creating a platform in Beanstalk next will study how to create your own pipelines in AWS&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
