<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Benefits of Outsourcing Software Development Ukraine</title>
      <author>AscendixTech</author>
      <pubDate>Thu, 05 Aug 2021 15:47:18 +0000</pubDate>
      <link>https://dev.to/ascendixtech/top-5-benefits-of-outsourcing-software-development-ukraine-3jf</link>
      <guid>https://dev.to/ascendixtech/top-5-benefits-of-outsourcing-software-development-ukraine-3jf</guid>
      <description>&lt;p&gt;&lt;em&gt;The article was originally published on &lt;a href="https://ascendixtech.com/outsourcing-software-development-ukraine-benefits/"&gt;Ascendix Tech's blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the last 10 years, Ukraine has become one of the leading outsourcing software development centers for dozens of countries around the world.&lt;/p&gt;

&lt;p&gt;What’s more, Ascendix has outsourced IT services to India, Mexico, Argentina, and China having different experiences with both positive and negative outcomes.&lt;/p&gt;

&lt;p&gt;After a while, we have received a message from a Ukraine-based IT services provider inviting us to give them a try and consider Ukraine as a great offshore dev location.&lt;/p&gt;

&lt;p&gt;This way, we had settled a new office in Ukraine 5 years ago and since then we’ve been growing our team with over 150 employees in 2021.&lt;/p&gt;

&lt;p&gt;Due to the fact that this topic was vital for our business and it’s still essential for lots of startups and companies around the world, we want to share 5 objective reasons and benefits of outsourcing software development Ukraine without using rose-tinted glasses.&lt;/p&gt;

&lt;p&gt;Hope you’ll enjoy reading this post and share your feedback in the comments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-market-in-ukraine%C2%A02021-overview"&gt;
  &lt;/a&gt;
  IT market in Ukraine: 2021 Overview
&lt;/h1&gt;

&lt;p&gt;We want to NOTE that most statistics and analysis data was taken from an in-depth report &lt;a href="https://beetroot.co/wp-content/uploads/sites/2/2021/03/Ukraine-the-Home-Of-Great-Devs-2021-_-Ebook-v3-2.0-3.pdf"&gt;‘Ukraine: The Home of Great Devs. 2021 Tech Market Report’ prepared by Beetroot&lt;/a&gt; and other sources.&lt;/p&gt;

&lt;p&gt;Let’s start with the quick 5 facts about Ukraine as a prosperous IT services market cluster.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ukraine&lt;/strong&gt; &lt;strong&gt;IT Services Market: 5 Quick Facts&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;gt; 200,000 active tech professionals with over 36,000 tech graduates were spotted in 2021.&lt;/li&gt;
&lt;li&gt;Over 35% of the active IT labor force have 5-10 years of technial background while 14.2% of tech professionals provide 10 years of working experience.&lt;/li&gt;
&lt;li&gt;According to PwC forecast, the Ukrainian IT services market volume is projected to reach $8.4 bln by 2025 along with 243,000 IT professionals.&lt;/li&gt;
&lt;li&gt;The United States (&amp;gt;50%), Great Britain (~30%), and Western European countries are among the top clients of the Ukrainian IT services market.&lt;/li&gt;
&lt;li&gt;Over 85% of Ukrainian tech specialists have at least an intermediate English level while &amp;gt;30% of them show Advanced (C1) English proficiency level.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDNd2S2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tqw9y83dpqlxcykfh63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDNd2S2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tqw9y83dpqlxcykfh63.png" alt="Quick facts on outsourcing software development Ukraine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ukraine as a progressive R&amp;amp;D&lt;/strong&gt; &lt;strong&gt;center in Europe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The investment-attractive nature of the Ukrainian tech cluster has drawn attention and motivated many entrepreneurs, startups, and companies to give it a try and establish new R&amp;amp;D centers in Ukraine.&lt;/p&gt;

&lt;p&gt;Let’s the best known and popular companies having their R&amp;amp;D offices in Ukraine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gameloft&lt;/li&gt;
&lt;li&gt;Huawei&lt;/li&gt;
&lt;li&gt;Upwork&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Plarium&lt;/li&gt;
&lt;li&gt;Grammarly&lt;/li&gt;
&lt;li&gt;Siemens&lt;/li&gt;
&lt;li&gt;Samsung &lt;/li&gt;
&lt;li&gt;eBay&lt;/li&gt;
&lt;li&gt;And others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EF6zWn8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7fq988gy7t59tnb5e51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EF6zWn8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7fq988gy7t59tnb5e51.png" alt="Top R&amp;amp;D Centers in Ukraine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top Investment-Intensive Tech Startups from Ukraine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aside from outsourcing, Ukraine has also become a great and competitive IT product-based center with dozens of startups and companies that have greatly succeeded in the world arena with millions of investments.&lt;/p&gt;

&lt;p&gt;Among the most prosperous companies, we should mention the following ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitLab with $268M raised investments in 2019&lt;/li&gt;
&lt;li&gt;Grammarly with over $90M round of funding in 2019&lt;/li&gt;
&lt;li&gt;People.ai with $60M of raised funds&lt;/li&gt;
&lt;li&gt;Restream (a collaboration between Vinnytsya, Ukraine, and Austin, USA) with $50M of investments raised during the first 2020 round&lt;/li&gt;
&lt;li&gt;Reface raising $5.5M in 2020.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_b-WTmBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tq3jcs1bumkgmtfj96t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_b-WTmBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tq3jcs1bumkgmtfj96t.png" alt="Top Ukrainian-Based Tech Startups 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How many hours ahead is Ukraine?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the core reasons of becoming an investment-attractive location for outsourcing software development is the suitable timing difference for most European locations and even the Americas compared to other competitors of Ukraine.&lt;/p&gt;

&lt;p&gt;In terms of the Western European countries, they mostly have from 1 to 4 hours difference which allows collaborating efficiently for 4-7 business hours.&lt;/p&gt;

&lt;p&gt;Considering North American countries, the companies usually have 6h time zone difference which allows using 2 hours on average for performing strategic discussions, project progress updates, and even cross-development team interactions.&lt;/p&gt;

&lt;p&gt;This means that Ukraine app developers work on projects while the US clients fall asleep and still stay active while Americans wake up in the morning.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Competitive Ukraine outsourcing rates in 2021&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to Beetroot’s report, the average Middle Software Developer's monthly salary in Ukraine is about $3770. &lt;/p&gt;

&lt;p&gt;As a comparison, US middle technical specialists get paid $86,523/year which means $7210 per month.&lt;/p&gt;

&lt;p&gt;So, if you hire software developers Ukraine, you approximately save up to $3440 per month in average compared to nearshoring resources in the US.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#top%C2%A05%C2%A0benefits-of-outsourcing-software-development-ukraine"&gt;
  &lt;/a&gt;
  Top 5 Benefits of Outsourcing Software Development Ukraine
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;#1 Large talent pool of &amp;gt;200,000 tech specialists&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As mentioned earlier, the number of tech specialists has exceeded 200,000 in 2021 along with 36,000 tech graduates per year.&lt;/p&gt;

&lt;p&gt;In turn, Ukraine could have provided only 130,000 tech specialists in 2017 with only 23,000 IT graduates that year.&lt;/p&gt;

&lt;p&gt;Below you can see the results of StackOverflow Developer Survey 2021 with the ranking showing the top programming languages and tools preferred by Ukrainian professional developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GrZ6UB78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0mwlm2ui7e0la0pmxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GrZ6UB78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0mwlm2ui7e0la0pmxj.png" alt="StackOverflow Developer Survey 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below you can see the detailed percent-based chart of technologies mostly used by Ukraine tech community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBnpAZE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3d936tc577d93if1j1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBnpAZE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3d936tc577d93if1j1x.png" alt="Programming Languages by Ukrainian Developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What does this all mean to your business?&lt;/p&gt;

&lt;p&gt;Put it simply, the current Ukrainian IT market growth rates allow to ensure that there are no potential warnings and risks even considering COVID-19 and unstable political environment in the nearest future.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2 The quality meets the price&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The fact that Ukraine provides a growing number of IT specialists and reasonable developer rates transforms into a high price-quality relationship. It allows Ukrainian software development companies to compete with many European and US technology providers.&lt;/p&gt;

&lt;p&gt;So, the average Ukraine outsourcing rates are $25-$50 while US companies charge $55-$85 providing the same technical background.&lt;/p&gt;

&lt;p&gt;Moreover, Ukraine offers more cost-efficient rates compared to Poland, Belarus, and Czech Republic that make the list of the top East European IT services providers.&lt;/p&gt;

&lt;p&gt;According to PayScale, the average monthly salary of a software developer in Poland is approximately $4,540. In turn, the same tech specialist in Ukraine gets paid $2,260 per month based on Indeed’s data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5kJBmHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0or7g2xqenjibcnyo6h7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5kJBmHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0or7g2xqenjibcnyo6h7.png" alt="Median IT Salary by Seniority Level"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These numbers mean that outsourcing software development Ukraine is a great opportunity to save funds thus accessing a large talent pool with a solid technical background and high final quality of delivery.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3 Strong English proficiency level&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Efficient and roadblock-free communication is among the top priorities for software development providers and companies to deliver fast, high-quality, and result-oriented technology solutions.&lt;/p&gt;

&lt;p&gt;If you experience miscommunication issues and other challenges while performing calls and meetings with a technology provider, it will most likely negatively influence the project deadlines and final product quality.&lt;/p&gt;

&lt;p&gt;In terms of software development outsourcing Ukraine, you can be sure of being roughly on the same page with 85% of development teams according to &lt;a href="https://dou.ua/lenta/articles/portrait-2020/"&gt;The Portrait of IT Specialist 2020 report by Dou.ua&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Product and Project Managers, Business Analysts, Solution Architects, and Team/Technical Leads are among the key tech positions that perform advanced English proficiency levels.&lt;/p&gt;

&lt;p&gt;Senior PMs are the best communicators as the majority of them have Advanced+ English level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8tPvfNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i0amaxnm6g200dtro8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8tPvfNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i0amaxnm6g200dtro8r.png" alt="English proficiency level by tech specialists | Ascendix Tech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This benefit allows you to make sure that most Ukraine app developers will get your project requirements in the right way and provide alternative technology solutions (if needed) without wasting your time and nerves.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#4 Suitable geolocation and time zone difference&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we’ve already stated, Ukraine is 1-3h ahead of most European countries that makes it possible to share at least 7 business hours for collaboration.&lt;/p&gt;

&lt;p&gt;For example, a company from London has only 2 shared business hours with an outsourcing software development team based in Vietnam and only 1h with the Philippines.&lt;/p&gt;

&lt;p&gt;In contrast, Ukraine provides 7 out 9 shared business hours for the UK and 8 out of 9 for most other European companies.&lt;/p&gt;

&lt;p&gt;Interestingly, the Ukrainian geographical location allows us to be the #1 nearshoring option for CEE countries.&lt;/p&gt;

&lt;p&gt;What’s more, Ukrainian airlines offer (depending on COVID-19 restrictions) daily direct flights to most European locations that take only 2-3 hours from Kyiv to Lisbon, for example.&lt;/p&gt;

&lt;p&gt;For example, you can greatly save funds on tickets by purchasing Ryanair and Wizzair low-cost fly tickets that offer two-way direct flights from London, Berlin, Vienna, and other cities for $20-$60 per ticket.&lt;/p&gt;

&lt;p&gt;Besides, 81 European and US countries don’t need to be issued a visa for visiting Ukraine and approximately 50 other countries just need to share online their residents’ online passports to visit Ukraine for a short period of time.&lt;/p&gt;

&lt;p&gt;This all means that a convenient location and suitable time zone difference feature the list of the core reasons many startups and companies outsource development Ukraine.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#5 Rapid Annual Growth of IT&lt;/strong&gt; &lt;strong&gt;Industry Ukraine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’ve shared the current Ukrainian IT services market growth rates, but now we want to discuss more in-depth statistics, so you get a better understanding.&lt;/p&gt;

&lt;p&gt;So, during the last 5 years, Ukraine has significantly grown and invested in increasing the volume of IT services export.&lt;/p&gt;

&lt;p&gt;Let’s review these 5 years in greater detail:&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;5-Year Ukrainian IT Services Market Overview&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;Number of tech specialists&lt;/td&gt;
&lt;td&gt;Market value, billions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;153,000&lt;/td&gt;
&lt;td&gt;$1,98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;172,000&lt;/td&gt;
&lt;td&gt;$2,49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;184,000&lt;/td&gt;
&lt;td&gt;$3,2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;192,000&lt;/td&gt;
&lt;td&gt;$4,17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;205,000&lt;/td&gt;
&lt;td&gt;$5,03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2025 (estimated)&lt;/td&gt;
&lt;td&gt;242,000&lt;/td&gt;
&lt;td&gt;$8,4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;Has &lt;strong&gt;COVID-19 impacted the Ukrainian IT services export?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The pandemic influenced the IT industry in Ukraine only positively as software development provides flexible remote opportunities.&lt;/p&gt;

&lt;p&gt;In witness whereof, we want to show the Ukrainian IT job market dynamics from Jan 2020 to Jan 2021 according to the DOU report (one of the top IT blogs and communities in Ukraine).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; below you can see the accumulated number of tech vacancies by month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--REMjCtcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jywce29ojk0rfr8s04ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--REMjCtcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jywce29ojk0rfr8s04ph.png" alt="Ukraine IT Job Market Dynamics 2020-2021 | Ascendix Tech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the Ukrainian IT jobs market has shown a solid decrease from Jan to Apr 2020 due to multiple factors like winter holidays, an upcoming pandemic, etc.&lt;/p&gt;

&lt;p&gt;However, the Ukrainian IT market has returned to its previous positions in July 2020 and since then we can only spot a significant increase with a short pause for winter holidays in Dec 2020.&lt;/p&gt;

&lt;p&gt;Surprisingly, Ukraine has performed an all-time record in terms of the number of tech-related vacancies in Jan 2021 with the number of over 8,132 positions.&lt;/p&gt;

&lt;p&gt;Moreover, the recent years have been featured as the most investment-intensive period for the Ukrainian IT market.&lt;/p&gt;

&lt;p&gt;Specifically, GitLab, Restream, Reface, Grammarly, People.ai, and other tech startups have accumulated totally over $500 million since 2019.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ultimately, why outsourcing software development Ukraine is&lt;/strong&gt; &lt;strong&gt;a progressive and profitable choice for multiple companies?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, why outsource to Ukraine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decrease labor costs through cost-efficient rates&lt;/li&gt;
&lt;li&gt;Approach an enormous talent pool with over 200,000 tech specialists&lt;/li&gt;
&lt;li&gt;Get high-quality delivery with strong technical background&lt;/li&gt;
&lt;li&gt;Dodge plenty of legal restrictions&lt;/li&gt;
&lt;li&gt;Work within a convenient time zone&lt;/li&gt;
&lt;li&gt;Benefit from minimal cultural differences.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MzRbJaQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdjbbpw3c8wpyc3tki52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzRbJaQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdjbbpw3c8wpyc3tki52.png" alt="Benefits of IT Outsourcing to Ukraine | Ascendix Tech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We hope our brief list of reasons and benefits of outsourcing software development Ukraine will become in handy for you while considering IT outsourcing and choosing an ideal offshore dev location.&lt;/p&gt;

&lt;p&gt;Always study the pros and cons carefully to make a well-considered decision as it will influence the final product quality, development costs, and future success of your business idea.&lt;/p&gt;

&lt;p&gt;If you’re interested in getting more detailed information on outsourcing software development Ukraine with infographics, numbers, charts, and tables, check the full blog article &lt;strong&gt;&lt;a href="https://ascendixtech.com/outsourcing-software-development-ukraine-benefits/"&gt;Top 5 Benefits of Outsourcing Software Development Ukraine&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>laerning</category>
      <category>todayilearned</category>
      <category>technology</category>
      <category>startup</category>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>gaidu</author>
      <pubDate>Thu, 05 Aug 2021 15:22:40 +0000</pubDate>
      <link>https://dev.to/gaidu/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-bmn</link>
      <guid>https://dev.to/gaidu/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-bmn</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency &lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best Web Development Roadmap For Beginners</title>
      <author>gaidu</author>
      <pubDate>Thu, 05 Aug 2021 15:17:29 +0000</pubDate>
      <link>https://dev.to/gaidu/best-web-development-roadmap-for-beginners-gn2</link>
      <guid>https://dev.to/gaidu/best-web-development-roadmap-for-beginners-gn2</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;There has never been a better time to learn to code or make a career change to software engineering. The demand for web developers is at an all-time high, and it’s only increasing. There are both free and premium tutorials online that teach you the skills to get a job as a developer — no CS degree required 🤓.&lt;/p&gt;
&lt;p id="561d"&gt;This article details the needed skills and the corresponding tutorials to learn them effectively. The illustrated guide is provided by &lt;b&gt;&lt;a href="http://www.codelivly.com"&gt;Codelivly&lt;/a&gt;&lt;/b&gt; and can be found on codelivly  — Codelivly work is excellent so be sure to star the repo and subscribe to his newsletter to support his efforts. Don’t be intimidated by the map. It may seem like a lot, but I’ll break it down so you can learn each part step-by-step.&lt;/p&gt;
&lt;p id="dda0"&gt;This article will be divided into the following sections:&lt;/p&gt;
&lt;p id="dda0"&gt;1. &lt;b&gt;&lt;a href="https://www.codelivly.com/web-developer-roadmap-2021/"&gt;Full Stack Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;2. &lt;b&gt;&lt;a href="https://www.codelivly.com/frontend-web-developer-roadmap/"&gt;Frontend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;3. &lt;b&gt;&lt;a href="https://www.codelivly.com/backend-web-developer-roadmap/"&gt;Backend Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p id="dda0"&gt;4. &lt;b&gt;&lt;a href="https://www.codelivly.com/the-best-python-frameworks-for-web-development-in-2021/"&gt;Best Python Framework For Web Development&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;







</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Should we be using estimated reading times?</title>
      <author>Nathaniel</author>
      <pubDate>Thu, 05 Aug 2021 15:10:50 +0000</pubDate>
      <link>https://dev.to/shadowfaxrodeo/should-we-be-using-estimated-reading-times-eib</link>
      <guid>https://dev.to/shadowfaxrodeo/should-we-be-using-estimated-reading-times-eib</guid>
      <description>&lt;p&gt;I'm working on a new website. We're trying to be thoughtful about every feature we add. Asking ourselves do we really need this?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We're currently having a discussion about estimated reading times on articles, and would be interested to hear what everyone has to say?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some points we're thinking about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Where does the estimated reading time come from? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it takes 20 minutes for someone to read an article that we've labelled &lt;code&gt;5 minute read&lt;/code&gt; how does that make that person feel?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does it put off fast readers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should we consider alternatives like: "short read", "long read", "article", "essay", "a couple of paragraphs".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do interactive elements, infographics, embedded videos or audio make the whole thing redundant?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is there any evidence to support estimated reading times?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What are your thoughts?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>a11y</category>
      <category>webdev</category>
      <category>writing</category>
    </item>
    <item>
      <title>How Game Dev and Betting on Myself Altered My Career Path Forever</title>
      <author>Bradston Henry</author>
      <pubDate>Thu, 05 Aug 2021 15:01:40 +0000</pubDate>
      <link>https://dev.to/bradstondev/how-game-dev-and-betting-on-myself-altered-my-career-path-forever-17bn</link>
      <guid>https://dev.to/bradstondev/how-game-dev-and-betting-on-myself-altered-my-career-path-forever-17bn</guid>
      <description>&lt;p&gt;It was February 15th, 2013 and there was no turning back. &lt;/p&gt;

&lt;p&gt;It had been a year and half since I took my first real job after graduating from college and I had officially quit. It was an extremely hard decision but I knew it was the only decision that was right for me. I had invested 5 long years in school, fighting tooth and nail to get a Mechanical Engineering degree and just like that, It was all over. All because I had come to the "preposterous" conclusion that &lt;strong&gt;I wanted to be a Game Developer&lt;/strong&gt; and wanted to pursue those aspirations full-time. &lt;/p&gt;

&lt;p&gt;See, I had always been a gamer since I was a kid and had always been a creative. School growing up was tough at times, but if I ever had an opportunity to do a creative project or make a presentation, It was a guaranteed A for me. I truly shined in the moments where I had freedom to be myself and do whatever was on my heart. While growing up I was either trying to learn how to draw anime, making music in Fruity Loops Studio, or randomly recording my own one-man radio shows and crafting up elaborate movie storylines in my head. &lt;/p&gt;

&lt;p&gt;I was a born-and-breed creative but my engineering job at the time was not giving me that outlet to express myself. And by pure coincidence, I had stumbled into the world of game development while working there.&lt;/p&gt;

&lt;p&gt;It was definitely a deliberate effort to find a new career as I worked at my engineering job (as I felt wholly dissatisfied) but it wasn't my goal to necessarily pursue a "creative" passion of sorts. It just so happened that as I was looking at alternatives to my current career pursuits, I discovered the depth of career opportunities within the gaming industry and was inspired to pursue that path. I was so Inspired, that in the Spring 2012 I travelled all by myself from my home in Atlanta, Georgia to San Francisco to attend the &lt;a href="https://gdconf.com/"&gt;Game Developers Conference&lt;/a&gt; or GDC. This was not only my first time taking a flight alone but also the first time I had ever been on the West coast.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cuUx-Hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w8o3bav7s92nq7qhu0g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cuUx-Hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w8o3bav7s92nq7qhu0g.jpg" alt="The Final Hours of GDC 2012 as People were heading home"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48-jTY8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dlcxuna6o484351gfko.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48-jTY8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dlcxuna6o484351gfko.jpg" alt="Nintendo's Booth Was huge and absolutely buzzing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OrIZzgBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4thev0qrvuee0v7tmw5q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OrIZzgBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4thev0qrvuee0v7tmw5q.jpg" alt="Where the journey all began. A talk at GDC for Junior Programmers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That trip changed EVERYTHING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I can still remember the feeling of being there those three days. The buzz of energy, the cacophony of sounds being created by games being played all over the Mascone Center, and the feeling that I was finally &lt;strong&gt;home&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQhUkahZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rft09o68rqz86iv4gntk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQhUkahZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rft09o68rqz86iv4gntk.jpg" alt="Entrance to the Mascone Center for GDC 2012"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I didn't realize in that moment was that GDC was &lt;strong&gt;giving me the courage to bet on myself&lt;/strong&gt;. It showed me that there was a path to finding a career in any industry that I enjoyed that could tap into my gift of creativity. I knew in that moment, I had to make a change. And a year later, I had quit my job and was working full-time in Game Development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wNv_IqF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bheojk5dg60tk9p314cn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wNv_IqF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bheojk5dg60tk9p314cn.jpg" alt="Me at San Francisco for GDC circa 2012"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now do not be deceived; The journey to get to where I am now as a &lt;a href="https://developer.ibm.com/profiles/bradston.henry/"&gt;IBM Developer Advocate&lt;/a&gt; who has published multiple games to Google Play Store and who has released multiple games to &lt;a href="https://sleeping-zebu-games.itch.io/"&gt;itch.io&lt;/a&gt; did not come easy.&lt;/p&gt;

&lt;p&gt;The path I pursued was wrought with failure, disappointment, and rejection. With every personal victory came an equally powerful defeat. &lt;/p&gt;

&lt;p&gt;A great example of this truth was that about 9 months after leaving my job, I went all in and decided to create a full-commercial mobile game that I would release on the Google Play Store. It was an immense amount of work and because I never had any savings and I was still struggling to survive while paying off student loans, I turned to kickstarter for help. I launched a campaign for my game titled &lt;a href="https://www.kickstarter.com/projects/24631228/follow-me-a-biblically-inspired-game-in-a-western?ref=discovery&amp;amp;term=follow%20me"&gt;Follow Me&lt;/a&gt; and was successfully able to raise the funds I needed to complete the game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YA5DgMQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aobvug24nxtmz2mu87i5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YA5DgMQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aobvug24nxtmz2mu87i5.png" alt="Follow Me - Title Screen Image for Android Game"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Artwork for the Title screen of "Follow Me"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But with that victory, came a quick and sound defeat.&lt;/p&gt;

&lt;p&gt;Though I had successfully Kickstarted this game and successfully published it to the Google Play Store, it was not at all a commercial or financial success. This game, along with the two other games I released to the Play Store, netted me almost no profit; forcing me to make a tough decision.... The decision that I had to get a "real" job. 😬&lt;/p&gt;

&lt;p&gt;In one year, my hopes and dreams seemed to have been shattered. Though I was able to live with my parents for that period of time, I was struggling financially and was becoming a burden on my parents. So I reluctantly decided I would pursue a job in engineering again and defer my goals...&lt;/p&gt;

&lt;p&gt;But as fortune would have it, during that past year, I had found a mentor, Jonathan, through my local church and I had begun working with him on some creative projects. Jonathan didn't live in my state and he couldn't pay me but he was a huge moral support and inspiration on my journey. And to keep a long story "less long", right as I felt that I was going to have to give up on my dream, Jonathan offered me the opportunity to move from my home state of Georgia to the deep south, Louisiana, and work with him. He told me he couldn't pay me but he would help me find a job there (which he did), and we would continue to work together on creative projects and see where it took us.&lt;/p&gt;

&lt;p&gt;Well, I took him up on his offer, loaded up my whole life into my 2-door sedan (which I was able to buy while working my previous engineering job) and moved to Baton Rouge, Louisiana. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRXBTpR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kq9v6y8tyyhufws8h3w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRXBTpR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kq9v6y8tyyhufws8h3w.jpg" alt="First day in Baton Rouge with Friends from Church. Jonathan is on far right"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Picture from my first day coming to Baton Rouge. Friends from church and Jonathan, my mentor (far right)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In a year-and-a-half of me living in Baton Rouge my whole life changed. In that time I had worked at Starbucks, taught Excel classes at LSU, lost so much weight from barely eating that I looked like Skeletor, and been fighting through a pre-existing medical condition that was destroying my spirit.... &lt;strong&gt;BUT&lt;/strong&gt; I was blessed and landed a job that would completely change everything. In June of 2015, I was hired on as an entry-level Mobile Developer at IBM and... the rest is history!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLkSnHYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa7bult86o373rl4cc7d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLkSnHYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa7bult86o373rl4cc7d.jpg" alt="The struggle was real at Starbucks. So many drinks to make."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;The struggle was real at Starbucks. This is what a typical Saturday looked like where I worked. Look at the number of drinks I had to make that were in the queue! 😱&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yepyT-aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74pc333avum7bn4g3b1n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yepyT-aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74pc333avum7bn4g3b1n.jpg" alt="First day at the IBM Center in Baton Rouge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Picture from my first day at the IBM Center in Baton Rouge, Louisiana, where it all began.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;One thing to be aware of is that in the year and half of me moving to Baton Rouge and before getting my job at IBM, I had became really focused on becoming a programmer. I had found, purely through necessity, that all my game development experience had made me into a competent coder. All the challenges I had encountered making the three games that I had release and the countless game prototypes I had created, taught me three core fundamentals that I would later need in "real-world" development..&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I learned how to research and problem-solve with limited information&lt;/li&gt;
&lt;li&gt;I learned how find bugs and trace problems (even without a debugger)&lt;/li&gt;
&lt;li&gt;I had learned how to learn and continuously evolve and how to be self-motivated&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And those three things prepared me more than I would have ever understood for the role I took at IBM. &lt;/p&gt;

&lt;p&gt;In the convening years of working at IBM, I learned soooo much and became a pursuer of technical knowledge and understanding. In my first two years at IBM, I was promoted 4 times culminating with me becoming a manager of about 10 mobile developers. At the same time, I had found new mentors through work colleagues and managers who helped me immensely in navigating my career and helped me believe that I could truly grow. &lt;/p&gt;

&lt;p&gt;After a year as a manager (and a developer) at IBM, I ended up taking a role at a start-up in the Baton Rouge-area where I spent about a year-and-half. In that time, I was promoted  to Senior Engineer and eventually left to come back to IBM where I continued working as a Senior Engineer before transitioning into my current role as a IBM Developer Advocate. &lt;/p&gt;

&lt;p&gt;It's definitely been quite a journey but in every way I feel that it was all worth it. The highs, the lows, the victories and defeats have brought me to this point and I wouldn't change one single thing. And without a doubt, &lt;strong&gt;the best decisions in my life have come from me betting on myself&lt;/strong&gt;. Not just accepting what life threw at me but putting it all on the line and believing that if I work hard and do my personal best, that I will be able to achieve something worthwhile. Thought it took time, I 110% feel that has come true for me and that I have been truly blessed through it all.&lt;/p&gt;

&lt;p&gt;And you may be wondering to yourself, what happened to your original dream of becoming a game developer; my aspiration of working in that wonderful world that I had seen all those years ago...&lt;/p&gt;

&lt;p&gt;Well that dream is more than alive. If there is one thing that has been consistent in my life since the fateful day in February 2013, it's game development. Sometimes I may not have as much time to give to it as other times, but I am ALWAYS working on some game project with my good friend and fellow IBMer, &lt;a href="https://www.linkedin.com/in/kyle-smith-67393b80/"&gt;Kyle Smith&lt;/a&gt;; Testing out new mechanics, participating in &lt;a href="https://itch.io/jam/gmtk-2021/rate/1081464"&gt;Game Jams&lt;/a&gt; or just building ideas and concepts for that game that we really believe will change the world 😎. Honestly, game dev for me has never stopped.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTh6gtFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rat6vlzkz8jjnike5mo0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTh6gtFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rat6vlzkz8jjnike5mo0.jpg" alt="Me and Kyle, my game dev partner in crime at GDC 2018"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Me and Kyle, my game dev partner in crime, at GDC 2018&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I would encourage anyone pursuing a goal or is looking to accomplish a dream that has been etched into their heart, to &lt;strong&gt;not give up&lt;/strong&gt;. To never let the world or society convince you that you can't accomplish those things. To bet on yourself, to work hard, and do the best that *&lt;em&gt;You&lt;/em&gt; can do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Know that you are not alone on that path and that you have at least on other person on that journey alongside you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the best on your future endeavors,&lt;/p&gt;

&lt;p&gt;Bradston Henry&lt;/p&gt;

&lt;p&gt;==== FOLLOW ME ON SOCIAL MEDIA ====&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/BradstonDev"&gt;Bradston Dev&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/bradstondev"&gt;@bradstondev&lt;/a&gt;
 &lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UC6Ky8s71RP65akLb_XV1_OA"&gt;Bradston YT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>inspiration</category>
      <category>programming</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Best Programming Language For Cyber Security</title>
      <author>gaidu</author>
      <pubDate>Thu, 05 Aug 2021 14:54:18 +0000</pubDate>
      <link>https://dev.to/gaidu/best-programming-language-for-cyber-security-2p5g</link>
      <guid>https://dev.to/gaidu/best-programming-language-for-cyber-security-2p5g</guid>
      <description>&lt;p&gt;&lt;span&gt;Cybersecurity&lt;/span&gt; is more popular than ever. Cyber security is more important than ever, thanks to the highly consequential 2020 data breach and massive cyber and IT skill demand forecasts for the next ten years. Many of us wouldn’t have heard this word ten years ago.&lt;/p&gt;
&lt;p&gt;It should come as no surprise that cyber security is a popular topic. There’s also an increasing desire to work in the business. What are the most popular cyber-security programming languages? Let’s see.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/best-programming-language-to-learn-for-cyber-security/"&gt;Best Programming Language To Learn For Cyber Security&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using the React Context API, the right way (a time saver)</title>
      <author>Itay Schechner</author>
      <pubDate>Thu, 05 Aug 2021 14:47:00 +0000</pubDate>
      <link>https://dev.to/itays123/using-the-react-context-api-the-right-way-a-time-saver-5c3f</link>
      <guid>https://dev.to/itays123/using-the-react-context-api-the-right-way-a-time-saver-5c3f</guid>
      <description>&lt;p&gt;Hey everyone! I'm Itay, a fullstack web developer who specializes in back-of-the-frontend code, particularly with React.js. Today, I'll teach you useful code hacks to supercharge your codebase.&lt;/p&gt;

&lt;p&gt;What you'll learn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The flaws of the context API&lt;/li&gt;
&lt;li&gt;The logical wrapper factory&lt;/li&gt;
&lt;li&gt;The action factory&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before We Begin
&lt;/h3&gt;

&lt;p&gt;I want to introduce my common way of writing context providers, so that I can write custom components and hooks and the you‘ll understand their meaning without me having to explain too much. If you want me to do a more simple context tutorial in the future, let me know in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5T4L3M_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz78wo2e4e814n4yfqiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5T4L3M_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz78wo2e4e814n4yfqiu.png" alt="My Context Naming Convension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-flaws-of-the-context-api"&gt;
  &lt;/a&gt;
  The Flaws of the context API
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Context API is the state-of-the-art way to manage state in React. It is an alternative to Redux, MobX, and a large variety of state management libraries made by the community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#repetitive-tasks"&gt;
  &lt;/a&gt;
  Repetitive Tasks
&lt;/h3&gt;

&lt;p&gt;Almost every time I use the Context API in a frontend application, I run into doing the exact same thing: I create an AuthContext, like the one below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C5mGHbDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7972onzj8d6moh0adbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C5mGHbDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7972onzj8d6moh0adbh.png" alt="Auth Context Provider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, I use the signed in state anywhere in my app:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXIpfVv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vznsmkx27ahis2ch4af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXIpfVv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vznsmkx27ahis2ch4af.png" alt="Usage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine having 60 auth-protected component in your app. Your codebase would be a mess!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-are-the-problems-with-this-approach"&gt;
  &lt;/a&gt;
  What are the problems with this approach?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Messy code&lt;/li&gt;
&lt;li&gt;Repeating a lot of code all the time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#easy-to-mess-up-your-codebase"&gt;
  &lt;/a&gt;
  Easy to mess up your codebase
&lt;/h3&gt;

&lt;p&gt;Suppose you have a context and a ContextProvider component attached to it.&lt;/p&gt;

&lt;p&gt;In the same component you provided the context, you want to use the context for a button, like the example below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPUjNNpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boxo8lboi52dgldxa4a2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPUjNNpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boxo8lboi52dgldxa4a2.png" alt="Component A Provides and Consumes!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You wanted to do something really simple, but ended up messing up your codebase. As a workaround, you might do something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEPH5Lrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7h85d1uy62puywnxyoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEPH5Lrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7h85d1uy62puywnxyoy.png" alt="A Workaround"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But now, we are back in the repetitive tasks zone.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-factories-to-the-rescue"&gt;
  &lt;/a&gt;
  Component Factories to the rescue
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A component factory is a function that returns a React functional component.&lt;br&gt;
I. e: &lt;code&gt;() =&amp;gt; () =&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can use component factories to clean up our codebase and create a clean code structure. Today, I will teach you about 2 time-saving and life-saving factories: The context logical wrapper and the context action factory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logical-wrappers"&gt;
  &lt;/a&gt;
  Logical Wrappers
&lt;/h3&gt;

&lt;p&gt;Logical Wrappers solve the problems of conditional rendering we saw in the beginning, without having to mess up your codebase. You create them with this function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKoVWe63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx8c70pa3zz3cep7apcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKoVWe63--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx8c70pa3zz3cep7apcr.png" alt="Logical Wrappers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, our problem from before can be solved in just a few lines of code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCMoBuTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhrzt97hog4johia5aqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCMoBuTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhrzt97hog4johia5aqq.png" alt="Using Conditional Wrappers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can save tons of time by using this component factory for every context you create.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#context-actions"&gt;
  &lt;/a&gt;
  Context actions
&lt;/h3&gt;

&lt;p&gt;Context actions are high-reusable components because of the way they are built.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUoUvuMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwh74po0ojpyl73yqiuh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUoUvuMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwh74po0ojpyl73yqiuh.png" alt="Create Context Action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can create out &lt;code&gt;ComponentB&lt;/code&gt; with just one line of code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--goexeuZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlxo7nqk9ovyh7z6kk3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goexeuZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlxo7nqk9ovyh7z6kk3n.png" alt="Using Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you must ask yourselves - why would you add the className prop to your context action? The reason is simple: Reusability. The best way to demonstrate it is by example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l5NQIyRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm1gekc0okkfv6hqap56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5NQIyRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm1gekc0okkfv6hqap56.png" alt="Reusability"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;Do you want to see how to add icons to our action buttons? How to use TypeScript with those? Let me know in the comments below.&lt;/p&gt;

&lt;p&gt;In the next episode, we'll discuss supercharging forms with react! Give me a follow if you want to see this.&lt;/p&gt;

&lt;p&gt;See component factories in action (at branch 1.1.2):&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itays123"&gt;
        itays123
      &lt;/a&gt; / &lt;a href="https://github.com/itays123/partydeck"&gt;
        partydeck
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A cool online card game!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Here is how I built the countdown timer at the top of CodeSwaps</title>
      <author>Simon</author>
      <pubDate>Thu, 05 Aug 2021 14:22:13 +0000</pubDate>
      <link>https://dev.to/codeswaps/here-is-how-i-built-the-countdown-timer-at-the-top-of-codeswaps-5h2</link>
      <guid>https://dev.to/codeswaps/here-is-how-i-built-the-countdown-timer-at-the-top-of-codeswaps-5h2</guid>
      <description>&lt;p&gt;I'm &lt;a href="https://www.codeswaps.com/giving-away-1500-dollars"&gt;running a promotion&lt;/a&gt; and I wanted to make it clearer on the homepage about it. I researched a few different things but it was leading to a lot of unnecessary code bloat and with the solution I tried it was quite expensive to use the unbranded version, so I decided to code it myself. &lt;/p&gt;

&lt;p&gt;You can see it working &lt;a href="https://www.codeswaps.com/"&gt;here&lt;/a&gt;. Hopefully the code will be useful to someone else here too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-wrapper"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.codeswaps.com/giving-away-1500-dollars/"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ⚡️ $1500 CodeSwaps Giveaway! 2nd winner in:
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"countdown"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"days"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-digits"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Days&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hours"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-digits"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Hours&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"minutes"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-digits"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Mins&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"seconds"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"countdown-timer-digits"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Secs&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.countdown-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slideDown&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-fill-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="err"&gt;@keyframes&lt;/span&gt; &lt;span class="err"&gt;slideDown&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;from&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:visited&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.countdown-timer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;&amp;amp;-group&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-digits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffd803&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#141414&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//Change end date as required, next deadline is end of August&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;givesway&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aug 30, 2021 00:00:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;countDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givesway&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;days&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hours&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minutes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;seconds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;//hide when date is reached&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countdownBanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;countdown-banner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;countdownBanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;//seconds&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create good patreon benefits</title>
      <author>Beatriz Oliveira</author>
      <pubDate>Thu, 05 Aug 2021 14:14:34 +0000</pubDate>
      <link>https://dev.to/beatrizoliveira/how-to-create-good-patreon-benefits-36n8</link>
      <guid>https://dev.to/beatrizoliveira/how-to-create-good-patreon-benefits-36n8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#this-case-i-will-add-my-exclusive-discord-server-for-new-patreons"&gt;
  &lt;/a&gt;
  This case I will add my exclusive Discord Server for new Patreons!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Have a Discord Server created.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Log in to Patreon and navigate to your &lt;a href="https://www.patreon.com/edit/about"&gt;&lt;strong&gt;Creator Page Editor&lt;/strong&gt;&lt;/a&gt;. From here select the Tiers link of your editor. From here select the &lt;strong&gt;Tiers link&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uF7yAYaz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gkhd7yr6hy4e1jg63h9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uF7yAYaz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gkhd7yr6hy4e1jg63h9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 3:&lt;/strong&gt; Click the &lt;strong&gt;Edit tier&lt;/strong&gt; button on a Tier you’d like to assign a Discord role(s) and click into the &lt;strong&gt;Advanced&lt;/strong&gt; button. Scroll until you find the &lt;strong&gt;Connect to Discord button&lt;/strong&gt;.&lt;br&gt;
1:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJDIK3E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aejfio9na41rjzyjl1xw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJDIK3E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aejfio9na41rjzyjl1xw.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
2:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E00AaAC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8k4ey9jdzgjliyhdu8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E00AaAC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8k4ey9jdzgjliyhdu8q.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
3:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkzIjed4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atspsjizlycm8i5px9uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkzIjed4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atspsjizlycm8i5px9uk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Click the &lt;strong&gt;Connect to Discord&lt;/strong&gt; button and log in to your Discord account via the pop-up window that populates.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NdzsLyNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah3zc1sw0am80envxz8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdzsLyNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah3zc1sw0am80envxz8i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Head to the Server Settings window and navigate to the Roles tab. You’ll notice a new “Patreon” role is in your server, go ahead and rename the role “Patreon Bot”. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbtIGTR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y24h92sdezvozu2jm48t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbtIGTR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y24h92sdezvozu2jm48t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Server management tips: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename your roles so that they match your Tier names&lt;/li&gt;
&lt;li&gt;Give your roles a distinguishing color &lt;/li&gt;
&lt;li&gt;Enable the Display role members separately from online members setting, this will help you distinguish Patrons from other server members &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Give the Patreon Bot the required permissions&lt;br&gt;
Make sure that the Patreon Bot is above the roles you’ve just created for your Tiers. If you have existing roles you’d like to assign to patrons, be sure to drag the Patreon Bot above those roles. If the Patreon Bot is not above these roles, it will not assign that role to patrons. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Do not deselect or add any permissions to the Patreon Bot! It has all of the permissions it needs, and adding any additional permissions may break the integration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pRhpExH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw6tj4v9kbf37oqz4r83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pRhpExH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw6tj4v9kbf37oqz4r83.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; Click the &lt;strong&gt;Edit tier&lt;/strong&gt; button on a Tier you’d like to assign a Discord role(s), and click into the &lt;strong&gt;Advanced button&lt;/strong&gt;. Scroll down and select &lt;strong&gt;Gives patrons access to selected Discord roles&lt;/strong&gt;. A drop-down menu will populate where you can select a role. &lt;/p&gt;

&lt;p&gt;You can select multiple roles. This useful if higher tiers are meant to receive benefit that lower tiers do. When you’ve selected your role(s) click &lt;strong&gt;Save tier button&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjT0GuUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yzj09xpyjxud0qj5q7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjT0GuUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yzj09xpyjxud0qj5q7c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#and-done-now-you-can-create-better-benefits-for-your-patreons"&gt;
  &lt;/a&gt;
  And done, now you can create better benefits for your patreons 🎉
&lt;/h5&gt;

&lt;h4&gt;
  &lt;a href="#enjoy-and-support-me-in-patreon-i-create-several-things-related-to-open-source"&gt;
  &lt;/a&gt;
  Enjoy and support me in &lt;a href="https://www.patreon.com/beatrizoliveira"&gt;&lt;strong&gt;Patreon&lt;/strong&gt;&lt;/a&gt;, I create several things related to open source😄
&lt;/h4&gt;

</description>
      <category>patreon</category>
    </item>
    <item>
      <title>Distributed Tracing: Build vs Buy</title>
      <author>Michael Haberman</author>
      <pubDate>Thu, 05 Aug 2021 13:57:12 +0000</pubDate>
      <link>https://dev.to/aspecto/distributed-tracing-build-vs-buy-5c8k</link>
      <guid>https://dev.to/aspecto/distributed-tracing-build-vs-buy-5c8k</guid>
      <description>&lt;p&gt;As microservices observability becomes more and more of a challenge for engineers, companies are turning to distributed tracing solutions.&lt;/p&gt;

&lt;p&gt;Now, they have to decide whether to buy or to build their distributed tracing infrastructure. While building a solution from scratch might sound compelling, and can even be supported with open source &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; and &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;, buying solutions provide more features and easier usage.&lt;/p&gt;

&lt;p&gt;Let’s see how the two compare and when you should choose each one. But first, let’s remind ourselves about what distributed tracing is.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is Distributed Tracing?
&lt;/h1&gt;

&lt;p&gt;Logging is a difficult and time-consuming practice, which doesn’t always provide the relevant information for solving performance issues and regressions. Traces complement logs, by presenting the relationships between services and components and tracking requests across them. It’s no surprise, then, that many developers are adding tracing to their workflows, and engineering departments are using it to reduce their MTTR.&lt;/p&gt;

&lt;p&gt;But we live in a world of microservices, and we need tracing to adapt.&lt;/p&gt;

&lt;p&gt;That’s where distributed tracing comes in. Distributed tracing is tracing that is suited for microservices. It provides observability into the microservices architecture. For example, it shows why failed integrations between components occur. These insights are used for faster troubleshooting and accelerating time-to-market.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read more about distributed tracing, its advantages, and when to use it &lt;a href="https://www.aspecto.io/blog/logging-vs-tracing-why-logs-arent-enough-to-debug-your-microservices/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;in this blog post&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-vs-buying-distributed-tracing"&gt;
  &lt;/a&gt;
  Building vs. Buying Distributed Tracing
&lt;/h1&gt;

&lt;p&gt;So you’ve determined your organization needs a distributed tracing solution. Congratulations! Now you need to decide whether you’re going to build one or to buy one.&lt;/p&gt;

&lt;p&gt;Building a solution means the product is built internally, from the ground up. This includes researching the problem, designing the tracing solution with open source solutions like &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt;, using &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; to instrument, gather and analyze data, allocating resources to build it, and continuously maintaining it.&lt;/p&gt;

&lt;p&gt;One of the most famous examples of building an internal distributed testing solution is Netflix, whose developers wrote a &lt;a href="https://netflixtechblog.com/building-netflixs-distributed-tracing-infrastructure-bb856c319304"&gt;blog post&lt;/a&gt; about the progress they’ve made four years after they started building it.&lt;/p&gt;

&lt;p&gt;But even if you’re not Netflix, you can probably still build your own basic tracing solution.&lt;/p&gt;

&lt;p&gt;What if you need a tracing solution that can scale and provide lots of added value? Then, you might want to look into buying a solution.&lt;/p&gt;

&lt;p&gt;This means purchasing a ready-made out-of-the-box distributed tracing solution. You can either choose a managed solution, i.e a solution that manages open source (like Jaeger) for you. Or, an unmanaged solution, i.e a distributed tracing solution from a vendor, with unique features and capabilities. &lt;/p&gt;

&lt;p&gt;Whichever you choose, buying a solution enables immediate implementation, observability, and insights. &lt;/p&gt;

&lt;p&gt;Let’s dive deeper into how these two types of solutions compare.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-vs-buying-distributed-tracing-a-comparison"&gt;
  &lt;/a&gt;
  Building vs. Buying Distributed Tracing – a Comparison
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-maintenance-and-scalability"&gt;
  &lt;/a&gt;
  1. Maintenance and Scalability
&lt;/h2&gt;

&lt;p&gt;You’re on the quest for data. Luckily, you’ve come to the right place. However, maintaining and storing all that data isn’t always easy, or easy on your resources. Scaling your tracing operation is another huge challenge.&lt;/p&gt;

&lt;p&gt;Ingesting and storing large amounts of data from many services requires a reliable infrastructure. This infrastructure should enable scaling the amount of traces collected, processing them, and storing them in a database like &lt;a href="https://www.elastic.co/"&gt;ElasticSearch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building a solution requires constant operation and maintenance as you scale your data collections. Buying a solution ensures your data is scalable and available, no matter the load or requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-features-and-capabilities"&gt;
  &lt;/a&gt;
  2. Features and Capabilities
&lt;/h2&gt;

&lt;p&gt;Built and bought solutions offer different features and capabilities. With built solutions, you can design the system according to your specific needs and requirements. On the other hand, buying solutions provide out-of-the-box capabilities that are meant to give you value beyond your basic needs. There is usually a wide variety, and they are built on industry best practices and requirements from multiple companies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cost"&gt;
  &lt;/a&gt;
  3. Cost
&lt;/h2&gt;

&lt;p&gt;Built solutions require many resources for configuring, designing, managing, maintaining, and operating. While this might seem more cost-effective, the truth is that when you build your own, you know where you start – but not where you’ll end up. You have to factor in the time developers need to learn and build the solution, as well as the cloud resources cost.&lt;/p&gt;

&lt;p&gt;Buying a solution, on the other hand, has a fixed cost. The price might seem higher, but everything is taken care of. You can also always start out with a free trial or free tier to make sure the solution answers your needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-security"&gt;
  &lt;/a&gt;
  4. Security
&lt;/h2&gt;

&lt;p&gt;Security is shifting left, making it more and more the responsibility of developers. When building a distributed tracing solution, you also have to take security controls into consideration. Data privacy, reducing the attack surface and mitigating vulnerabilities have to be designed. Purchased solutions, on the other hand, do the security heavy lifting. They take security concerns off your plate and offer it out-of-the-box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-business-focus"&gt;
  &lt;/a&gt;
  5. Business Focus
&lt;/h2&gt;

&lt;p&gt;Sure, your super developer powers can build anything. But should they? When developers build a distributed tracing solution internally, they’re diverted from the core business. Why not let other developers, who work at companies where distributed tracing is the core business, build the solution for you?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-democratization-and-accessibility"&gt;
  &lt;/a&gt;
  6. Democratization and Accessibility
&lt;/h2&gt;

&lt;p&gt;When distributed tracing solutions are built internally, the engineers who built them control the knowledge and accessibility to the product. Buying a solution enables more democratization since access and training is available for all.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#buy-vs-build-distributed-tracing-comparison-table"&gt;
  &lt;/a&gt;
  Buy vs. Build Distributed Tracing Comparison Table
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cF_1Ss8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsotxu1tt5fpvf2yq5zc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cF_1Ss8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsotxu1tt5fpvf2yq5zc.png" alt="Build vs. Built Distributed Tracing Comparison Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#distributed-tracing-solutions"&gt;
  &lt;/a&gt;
  Distributed Tracing Solutions
&lt;/h1&gt;

&lt;p&gt;Unless you are a large company with available resources and unique architecture, or an individual looking to test the water of distributed tracing (in which case maybe a hybrid model would also work for you), we believe buying is the way to go. &lt;/p&gt;

&lt;p&gt;Here are some of the tools you can choose from for both building and buying a distributed tracing solution:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-open-source-jaeger"&gt;
  &lt;/a&gt;
  1. Open Source: Jaeger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; is an open-source, distributed tracing tool that you can use as the basis for building your own distributed tracing solution. You can use Jaeger for transaction monitoring, latency optimization, root cause analysis, dependency analysis, and context propagation. Jaeger can run on any infrastructure and leverage OpenTelemetry regardless of the code language.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---66FObX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk56upjq0xbsoyff4uan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---66FObX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk56upjq0xbsoyff4uan.png" alt="Jaeger UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-managed-distributed-tracing-solution"&gt;
  &lt;/a&gt;
  2. Managed Distributed Tracing Solution
&lt;/h2&gt;

&lt;p&gt;If you’re into Jaeger but not into getting your hands dirty with it, managed solutions will bring the hand sanitizer and do it for you. With such solutions, you get Jaeger’s capabilities, but the vendor packs them up for you in dashboards that already provide you with insights and observability.&lt;/p&gt;

&lt;p&gt;It’s also easier to get started than having to download Jaeger and building your infrastructure from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-aspecto"&gt;
  &lt;/a&gt;
  3. Aspecto
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;Aspecto&lt;/a&gt; is a distributed tracing platform with plenty of new features and a unique UI. Aspecto helps developers find, fix, and prevent distributed application issues across the entire development cycle.&lt;/p&gt;

&lt;p&gt;It’s the Chrome DevTools for your distributed applications.&lt;/p&gt;

&lt;p&gt;OpenTelemetry based, Aspecto allows developers to prevent issues before they reach production by implementing telemetry data that learns the system, then compares what they do locally to the production, staging, or other locals baseline data. You can easily &lt;a href="https://docs.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;install&lt;/a&gt; Aspecto, for free, with a one-liner SDK, or give the &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=distributed-tracing-build-vs-buy"&gt;Live Playground&lt;/a&gt; a spin.&lt;/p&gt;

&lt;p&gt;And if you’re already using the OpenTelemetry collector, you can use it to export traces to the Aspecto OTEL collector.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIM2E51n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y86txjdcuynnr46vsvfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIM2E51n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y86txjdcuynnr46vsvfh.png" alt="Aspecto UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Building your distributed tracing solution might sound like a nice challenge. Unless you’re a huge company with endless resources and unique architecture – you might be embarking on a very costly and ineffective adventure. &lt;/p&gt;

&lt;p&gt;Buying a tracing solution offers you all the capabilities and observability you need right when you get started. You can buy Jaeger-based managed solutions or get more feedback and visibility with tons of additional features through solutions like Aspecto. &lt;/p&gt;

&lt;p&gt;We recommend getting started with distributed tracing as soon as you can, no matter your choice. Make your microservices management and troubleshooting a lot more effective with tracing.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>How to cut a cake with various tech</title>
      <author>Siddharth</author>
      <pubDate>Thu, 05 Aug 2021 13:47:10 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/how-to-cut-a-cake-with-various-tech-262m</link>
      <guid>https://dev.to/siddharthshyniben/how-to-cut-a-cake-with-various-tech-262m</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You build a robust, accurate user experience to cut cake. But then you realize that knifes are not supported in most browsers.&lt;/li&gt;
&lt;li&gt;You cut yourself.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You try to cut the cake, but by the time you position the knife, the cake has moved into your face. You realize that you need Adobe Flash to cut cake.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTML&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You cut a triangle in your cake with nothing more than a small penknife, but you realize that to make it look convincing, you need to be using Dreamweaver.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Git&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It is easy to cut cake with Git, but also easy to revert to a previous cake and merge it with your current frosting.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~$ ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cake.c cake.h cake.o frosting.c frosting.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~$ rm * .o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm: .o: No such file or directory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~$ ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You don't remember any syntax and spend 5 hours reading man pages. Then you give up and cut the computer&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can't actually cut the cake; all you can do is describe the knife in painful detail.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cake and knife are available, but they use callbacks. You install packages for them, but the knife is too heavy. Frustrated, you rewrite Node.js.&lt;/li&gt;
&lt;li&gt;You write the knife, using 13 other libraries. But this bloats the knife, and you can't lift it. You get frustrated and kick the cake and cut it yourself. Considering this a success, you blog about your experience of being able to cut cake without even using a knife!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You spend hours learning Angular, and when you are done you are so happy you forget about cutting cake.&lt;/li&gt;
&lt;li&gt;You absolutely mutilate the cake&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cut cake. You are now an expert on JavaScript.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since the only instruction is to cut cake, the Svelte compiler hyperoptimizes your code so that it only shaves off a small part of the cake&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You manage to get rid of &lt;code&gt;this&lt;/code&gt;, which was stopping you from cutting cake, but then you face a closure.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cut cake, but you can't quit.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"cake"&lt;/code&gt; is falsy, so you can't cut it&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;VSCode&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You type cake, but VSCode autocompletes to &lt;code&gt;hasUncaughtExceptionCaptureCallback&lt;/code&gt;. The next time you try, it autocompletes to &lt;code&gt;REGEX_SPECIAL_CHAR_BACKREF&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Assembly&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You try to cut cake, but then you realize you need to invent the cake, the knife, the oven needed to cook cake, and your hand&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;BASIC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POINT KNIFE at CAKE, then MOVE DOWN 45px, then MOVE UP 45px, then ROTATE KNIFE.HANDLE, then MOVE DOWN 45px, then MOVE UP 45px.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>jokes</category>
    </item>
    <item>
      <title>A Complete Guide to Buffers in Node.js</title>
      <author>Ruan Martinelli</author>
      <pubDate>Thu, 05 Aug 2021 13:22:20 +0000</pubDate>
      <link>https://dev.to/ruanmartinelli/a-complete-guide-to-buffers-in-node-js-1150</link>
      <guid>https://dev.to/ruanmartinelli/a-complete-guide-to-buffers-in-node-js-1150</guid>
      <description>&lt;p&gt;In Node.js, buffers are a special type of object that can store raw binary data. A buffer represents a chunk of memory - typically RAM - allocated in your computer. Once set, the size of a buffer cannot be changed.&lt;/p&gt;

&lt;p&gt;A buffer stores &lt;strong&gt;bytes&lt;/strong&gt;. A byte is a sequence of eight &lt;strong&gt;bits&lt;/strong&gt;. Bits are the most basic unit of storage on your computer, they can hold the value of either 0 or 1.&lt;/p&gt;

&lt;p&gt;Node.js exposes the &lt;code&gt;Buffer&lt;/code&gt; class in the global scope (you don't need to import or require it like other modules). With this API, you get a series of functions and abstractions to manipulate raw binaries.&lt;/p&gt;

&lt;p&gt;A buffer in Node.js looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Buffer&lt;/span&gt; &lt;span class="na"&gt;61&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt; &lt;span class="na"&gt;71&lt;/span&gt; &lt;span class="na"&gt;3b&lt;/span&gt; &lt;span class="na"&gt;65&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt; &lt;span class="na"&gt;31&lt;/span&gt; &lt;span class="na"&gt;2f&lt;/span&gt; &lt;span class="na"&gt;61&lt;/span&gt; &lt;span class="na"&gt;2e&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you can see 10 pairs of letters and numbers. Each pair represents a byte stored in the buffer. The total size of this particular buffer is 10.&lt;/p&gt;

&lt;p&gt;You might be asking yourself: "if these are bits and bytes, where are the 0s and 1s?"&lt;/p&gt;

&lt;p&gt;That's because Node.js displays bytes using the &lt;strong&gt;hexadecimal&lt;/strong&gt; system. This way, every byte can be represented using just two digits - a pair of numbers and letters from 0-9 and "a" to "f".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why buffers?&lt;/strong&gt; Before buffers were introduced, there was no easy way of handling binary data in JavaScript. You would have to resort to primitives such as strings, which are slower and have no specialized tools to handle binaries. Buffers were created to provide a proper set of APIs to manipulate bits and bytes in an easy and performant way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-buffers"&gt;
  &lt;/a&gt;
  Working with buffers
&lt;/h2&gt;

&lt;p&gt;Let's see some of the things we can do with buffers.&lt;/p&gt;

&lt;p&gt;You will notice that handling buffers is a bit similar to the way we handle arrays in JavaScript. For example, you can &lt;code&gt;.slice()&lt;/code&gt;, &lt;code&gt;.concat()&lt;/code&gt; and get the &lt;code&gt;.length&lt;/code&gt; of a buffer. Buffers are also iterable and can be used within constructs such as &lt;code&gt;for-of&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you're following the examples on your computer, keep in mind that the &lt;code&gt;Buffer&lt;/code&gt; class is exposed globally. You don't need to import or require it as a separate module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-buffers"&gt;
  &lt;/a&gt;
  Creating buffers
&lt;/h3&gt;

&lt;p&gt;Buffers are created using these three methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffer.from()&lt;/li&gt;
&lt;li&gt;Buffer.alloc()&lt;/li&gt;
&lt;li&gt;Buffer.allocUnsafe()&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In the past, buffers were created using the Buffer class constructor (e.g., &lt;code&gt;new Buffer()&lt;/code&gt;). This syntax is now deprecated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Buffer.from()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This method is the most straightforward way to create a buffer. It accepts a string, an array, an &lt;code&gt;ArrayBuffer&lt;/code&gt;, or another buffer instance. Depending on which params you pass, &lt;code&gt;Buffer.from()&lt;/code&gt; will create a buffer in a slightly different way.&lt;/p&gt;

&lt;p&gt;When passing a string, a new buffer object will be created containing that string. By default, it will parse your input using &lt;strong&gt;utf-8&lt;/strong&gt; as the enconding (see &lt;a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings"&gt;here&lt;/a&gt; all enconding types supported):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a new buffer with the string 'heya!'&lt;/span&gt;
&lt;span class="c1"&gt;// If no enconding is passed in the second parameter, defaults to 'utf-8'.&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;heya!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates the same buffer as the above, but passes 'heya!' as a hex encoded string&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6865796121&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass an array of bytes to &lt;code&gt;Buffer.from()&lt;/code&gt;. Here I am passing the same string as before (&lt;em&gt;"heya!"&lt;/em&gt;), but represented as an array of hexadecimal characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Also writes 'heya!' to the buffer, but passes a array of bytes&lt;/span&gt;
&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mh"&gt;0x68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x21&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you're not familar with the &lt;code&gt;0xNN&lt;/code&gt; syntax, it means that the characters after &lt;code&gt;0x&lt;/code&gt; should be interpreted as hexadecimal values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When passing a buffer to &lt;code&gt;Buffer.from()&lt;/code&gt;, Node.js will copy that buffer into the current one. The new buffer is allocated in a different area of memory, so you can modify it independently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates a buffer from `buffer1`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Modify `buffer2`&lt;/span&gt;
&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6d is the letter "m"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; "cars"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; "mars"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These should cover most of the cases where you use &lt;code&gt;Buffer.from()&lt;/code&gt;. Refer to the &lt;a href="https://nodejs.org/api/buffer.html"&gt;docs&lt;/a&gt; for other ways to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buffer.alloc()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.alloc()&lt;/code&gt; method is useful when you want to create empty buffers, without necessarily filling them with data. By default, it accepts a number and returns a buffer of that given size filled with 0s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 00 00 00 00 00 00&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can later on fill the buffer with any data you want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a buffer of size 1 filled with 0s (&amp;lt;Buffer 00&amp;gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Fill the first (and only) position with content&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x78&lt;/span&gt; &lt;span class="c1"&gt;// 0x78 is the letter "x"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'x'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also fill the buffer with other content than 0 and a given enconding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 78 78 78 78 78 78&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Buffer.allocUnsafe()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;.allocUnsafe()&lt;/code&gt; , the process of sanitizing and filling the buffer with 0s is skipped. The buffer will be allocated in a area of memory that may contain old data (that's where the "unsafe" part comes from). For example, the following code will most likely always print some random pieces of data every time you run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Allocates a random area of memory with size 10000&lt;/span&gt;
&lt;span class="c1"&gt;// Does not sanitizes it (fill with 0) so it may contain old data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allocUnsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Prints loads of random data&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A good use case for &lt;code&gt;.allocUnsafe()&lt;/code&gt; is when you are copying a buffer that was safely allocated. Since you will completely overwrite the copied buffer, all the old bytes will be replaced by predictable data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a buffer from a string&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi, I am a safely allocated buffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates a new empty buffer with `allocUnsafe` of the same&lt;/span&gt;
&lt;span class="c1"&gt;// length as the previous buffer. It will be initally filled with old data.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffCopy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allocUnsafe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Copies the original buffer into the new, unsafe buffer.&lt;/span&gt;
&lt;span class="c1"&gt;// Old data will be overwritten with the bytes&lt;/span&gt;
&lt;span class="c1"&gt;// from 'hi, I am a safely allocated buffer' string.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffCopy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffCopy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'hi, I am a safely allocated buffer'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general, &lt;code&gt;.allocUnsafe()&lt;/code&gt; should only be used if you have a good reason (e.g., performance optimizations). Whenever using it, make sure you never return the allocated buffer without completely filling it with new data, otherwise you could be potentially leaking sensitive information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-buffers"&gt;
  &lt;/a&gt;
  Writing to buffers
&lt;/h3&gt;

&lt;p&gt;The way to write data into buffers is using &lt;code&gt;Buffer.write()&lt;/code&gt;. By default, it will write a string encoded in &lt;code&gt;utf-8&lt;/code&gt; with no offset (starts writing from the first position of the buffer). It returns a number, which is the number of bytes that were written in the buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 9 (number of bytes written)&lt;/span&gt;

&lt;span class="c1"&gt;// If you write more bytes than the buffer supports,&lt;/span&gt;
&lt;span class="c1"&gt;// your data will truncated to fit the buffer.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey christopher&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// retuns 9 (number of bytes written)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 'hey chris'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that not all characters ocuppy a single byte in the buffer (!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The copyright symbol ('©') occupies two bytes,&lt;/span&gt;
&lt;span class="c1"&gt;// so the following operation will completely fill the buffer.&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;©&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 2&lt;/span&gt;

&lt;span class="c1"&gt;// If the buffer is too small to store the character, it will not write it.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tinyBuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tinyBuff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;©&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 0 (nothing was written)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tinyBuff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; &amp;lt;Buffer 00&amp;gt; (empty buffer)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also notice that 2 is &lt;strong&gt;not&lt;/strong&gt; the highest number of bytes a character can have. For example, the &lt;code&gt;utf-8&lt;/code&gt; enconding type supports characters with up to 4 bytes. Since you cannot modify the size of the buffer, you always need to be mindful of what you are writing and how much space it will take (size of the buffer vs. size of your content).&lt;/p&gt;

&lt;p&gt;Another way to write into buffers is throguh an array-like syntax, where you add bytes to a specific position of the buffer. It's important to notice that any data with more than 1 byte needs to be broken down and set on each position of the buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x68&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x68 is the letter "h"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x65&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x65 is the letter "e"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6c is the letter "l"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6c is the letter "l"&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x6f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0x6f is the letter "o"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 'hello'&lt;/span&gt;

&lt;span class="c1"&gt;// ⚠️ Warning: if you try setting a character with more than 2 bytes&lt;/span&gt;
&lt;span class="c1"&gt;// to a single position, it will fail:&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xc2a9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0xc2a9 is the symbol '©'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; '�ello'&lt;/span&gt;

&lt;span class="c1"&gt;// But if you write each byte separately...&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xc2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xa9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; '©llo'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it's appreciated that you can write to buffers using an array-like syntax, I suggest sticking to &lt;code&gt;Buffer.from()&lt;/code&gt; when you can. Managing the length of inputs can be a hard task and will bring complexity to your code. With &lt;code&gt;.from()&lt;/code&gt;, you can write things in a buffer worry-free and handle the cases where the input is too large by checking if nothing was written (when it returns 0).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iterating-over-buffers"&gt;
  &lt;/a&gt;
  Iterating over buffers
&lt;/h3&gt;

&lt;p&gt;You can use modern JavaScript constructs to iterate over a buffer the same way you would with an array. For example, with &lt;code&gt;for-of&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// `.toString(16)` returns the content in hexadecimal format.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Prints:&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 68&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 65&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6c&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6c&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 6f&lt;/span&gt;
&lt;span class="c1"&gt;// --&amp;gt; 21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other iterator helpers such as &lt;code&gt;.entries()&lt;/code&gt;, &lt;code&gt;.values()&lt;/code&gt; and &lt;code&gt;.keys()&lt;/code&gt; are also available for buffers. For example, using &lt;code&gt;.entries()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyBuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;copyBuff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyBuff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 'hello!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#going-further-buffers-and-typedarrays"&gt;
  &lt;/a&gt;
  Going further: &lt;strong&gt;Buffers and TypedArrays&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In JavaScript (I mean JavaScript in general, not restricted to Node.js), memory can be allocated using the special &lt;code&gt;ArrayBuffer&lt;/code&gt; class. We rarely manipulate &lt;code&gt;ArrayBuffer&lt;/code&gt; objects directly. Instead, we use a set of "view" objects which reference the underlying array buffer. Some of the view objects are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Int8Array&lt;/code&gt;, &lt;code&gt;Uint8Array&lt;/code&gt;, &lt;code&gt;Uint8ClampedArray&lt;/code&gt;, &lt;code&gt;Int16Array&lt;/code&gt;, &lt;code&gt;Uint16Array&lt;/code&gt;, &lt;code&gt;Int32Array&lt;/code&gt;, etc. See the full list &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And then there is &lt;code&gt;TypedArray&lt;/code&gt;, which is an umbrella term to refer to all of these view objects listed above. All view objects inherit methods from &lt;code&gt;TypedArray&lt;/code&gt; via prototypes. The &lt;code&gt;TypedArray&lt;/code&gt; constructor is &lt;strong&gt;not&lt;/strong&gt; exposed globally, you always have to use one of the view methods. If you see some tutorial or documentation using &lt;code&gt;new TypedArray()&lt;/code&gt;, it means it's using any of the view objects (Uint8Array, Float64Array, etc).&lt;/p&gt;

&lt;p&gt;In Node.js, objects created from the &lt;code&gt;Buffer&lt;/code&gt; class are also instance of &lt;code&gt;Uint8Array&lt;/code&gt;. There are a few small differences between them, which you can read &lt;a href="https://nodejs.org/api/buffer.html#buffer_buffers_and_typedarrays"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As a beginner, buffers were a topic in Node.js that got me very confused (another one was streams, but that deserves its own post). Hopefully I was able to demystify some of the concepts around buffers and give an overview of the Buffer API.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
