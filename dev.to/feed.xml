<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I made a basic search-bar using JS</title>
      <author>Abhii</author>
      <pubDate>Sun, 18 Jul 2021 06:38:16 +0000</pubDate>
      <link>https://dev.to/abhilearnstocode/i-made-a-basic-search-bar-using-js-55dp</link>
      <guid>https://dev.to/abhilearnstocode/i-made-a-basic-search-bar-using-js-55dp</guid>
      <description>&lt;p&gt;I created a basic search bar using JS and here is how it looks.&lt;br&gt;
So, whenever a &lt;code&gt;keyup&lt;/code&gt; occurs inside the search box, our function searches for the item in our list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things you should know&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic JS&lt;/li&gt;
&lt;li&gt;onKeyUp &lt;/li&gt;
&lt;li&gt;forEach method&lt;/li&gt;
&lt;li&gt;DOM Manipulation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the &lt;a href="https://amdhanwate.github.io/search-bar-using-js/"&gt;live demo here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/amdhanwate/embed/XWRRvgm?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-repo"&gt;
  &lt;/a&gt;
  Github Repo
&lt;/h3&gt;

&lt;p&gt;Feel free to fork or clone the repo.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/amdhanwate"&gt;
        amdhanwate
      &lt;/a&gt; / &lt;a href="https://github.com/amdhanwate/search-bar-using-js"&gt;
        search-bar-using-js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Amazon S3 Deep Dive (part 2-buckets)
</title>
      <author>Supratip Banerjee</author>
      <pubDate>Sun, 18 Jul 2021 06:34:49 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-s3-deep-dive-part-2-buckets-aod</link>
      <guid>https://dev.to/aws-builders/amazon-s3-deep-dive-part-2-buckets-aod</guid>
      <description>&lt;h4&gt;
  &lt;a href="#object-storage-in-amazon-s3"&gt;
  &lt;/a&gt;
  Object storage in Amazon S3
&lt;/h4&gt;

&lt;p&gt;Within the final lesson, you learned that object storage could be a flat capacity structure where objects are put away in buckets. Objects are any piece of information put away inside a bucket. You moreover learned simply can make a pseudo organizer structure utilizing prefixes. In Amazon S3 protest capacity, you'll organize objects to mimic a pecking order by utilizing key title prefixes and delimiters. Prefixes and delimiters permit you to bunch comparative things to assist outwardly organize and effectively recover your information. Within the client interface, these prefixes grant the appearance of a organizer/ subfolder structure but in reality, the capacity is still a flat structure.&lt;/p&gt;

&lt;p&gt;In the image below, you have a bucket called getting-started-with-s3. Inside the bucket there is an object called dolphins.jpg. To organize and group the oceanography data for the external vendor you created a logical hierarchy using the prefix ocean. Ocean looks like a subfolder but this is only to help make the structure readable.&lt;/p&gt;

&lt;p&gt;In reality, the key name of the dolphin object is a little longer, allowing us to locate the ocean/dolphin.jpg object. The object still sits in one single flat-storage structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQLe2bf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsramgx16qdn95jxmdz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQLe2bf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsramgx16qdn95jxmdz8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use prefixes to organize the data that you store in Amazon S3 buckets. A prefix value is similar to a directory name that enables you to group similar objects together in a bucket. When you programmatically upload objects, you can use prefixes to organize your data.&lt;/p&gt;

&lt;p&gt;The prefix limits the results to only those keys that begin with the specified prefix. The delimiter causes a list operation to roll up all the keys that share a common prefix into a single summary list result.&lt;/p&gt;

&lt;p&gt;The purpose of the prefix and delimiter parameters is to help you organize and then browse your keys hierarchically. To do this, first pick a delimiter for your bucket, such as slash (/), that doesn't occur in any of your anticipated key names. Next, construct your key names by concatenating all containing levels of the hierarchy, separating each level with the delimiter.&lt;/p&gt;

&lt;p&gt;For example, if you were storing information about cities, you might naturally organize them by continent, then by country, then by province or state. Because these names don't usually contain punctuation, you might use slash (/) as the delimiter. The following examples use a slash (/) delimiter.&lt;/p&gt;

&lt;p&gt;• Europe/France/Nouvelle-Aquitaine/Bordeaux&lt;br&gt;
• North America/Canada/Quebec/Montreal&lt;br&gt;
• North America/USA/Washington/Bellevue&lt;br&gt;
• North America/USA/Washington/Seattle&lt;/p&gt;

&lt;p&gt;If you stored data for every city in the world in this manner, it would become awkward to manage a flat key namespace. By using Prefix and Delimiter with the list operation, you can use the hierarchy you've created to list your data. For example, to list all the states in USA, set Delimiter='/' and Prefix='North America/USA/'. To list all the provinces in Canada for which you have data, set Delimiter='/' and Prefix='North America/Canada/'.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#listing-objects-using-prefixes-and-delimiters"&gt;
  &lt;/a&gt;
  Listing objects using prefixes and delimiters
&lt;/h4&gt;

&lt;p&gt;A list request with a delimiter lets you browse your hierarchy at just one level, skipping over and summarizing the (possibly millions of) keys nested at deeper levels. For example, assume that you have a bucket (ExampleBucket) with the following keys.&lt;/p&gt;

&lt;p&gt;sample.jpg&lt;br&gt;
photos/2006/January/sample.jpg&lt;br&gt;
photos/2006/February/sample2.jpg&lt;br&gt;
photos/2006/February/sample3.jpg&lt;br&gt;
photos/2006/February/sample4.jpg&lt;/p&gt;

&lt;p&gt;The sample bucket has only the sample.jpg object at the root level. To list only the root level objects in the bucket, you send a GET request on the bucket with "/" delimiter character. In response, Amazon S3 returns the sample.jpg object key because it does not contain the "/" delimiter character. All other keys contain the delimiter character. Amazon S3 groups these keys and returns a single CommonPrefixes element with prefix value photos/ that is a substring from the beginning of these keys to the first occurrence of the specified delimiter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bucket-overview"&gt;
  &lt;/a&gt;
  Bucket overview
&lt;/h4&gt;

&lt;p&gt;Buckets are lasting holders that hold objects. You'll be able make between 1 and 100 buckets in each AWS account. You'll be able increment the bucket restrain to a most extreme of 1,000 buckets by submitting a service restrain increment. Bucket sizes are for all intents and purposes boundless so you do not ought to allocate a foreordained bucket measure the way you'd when making a capacity volume or parcel. &lt;/p&gt;

&lt;p&gt;An Amazon S3 bucket may be a flexible capacity choice with the capacity to: have a inactive web location, hold form data on objects, and utilize life-cycle administration approaches to adjust form maintenance with bucket estimate and taken a toll.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlkoQmhT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9b9nbff52jatoxugfsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlkoQmhT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9b9nbff52jatoxugfsj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bucket-limitations"&gt;
  &lt;/a&gt;
  Bucket limitations
&lt;/h4&gt;

&lt;p&gt;Prior to creating an Amazon S3 bucket, there are some important restrictions and limitations that you should know.&lt;br&gt;
Select each of the plus (+) symbols listed below to find out more about bucket limitations.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#bucket-owner"&gt;
  &lt;/a&gt;
  Bucket owner
&lt;/h6&gt;

&lt;p&gt;Amazon S3 buckets are owned by the account that creates them and cannot be transferred to other accounts&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#bucket-names"&gt;
  &lt;/a&gt;
  Bucket names
&lt;/h6&gt;

&lt;p&gt;Bucket names are globally unique.  There can be no duplicate names within the entire S3 &lt;br&gt;
infrastructure.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#bucket-renaming"&gt;
  &lt;/a&gt;
  Bucket renaming
&lt;/h6&gt;

&lt;p&gt;Once created, you cannot change a bucket name. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#permanent-entities"&gt;
  &lt;/a&gt;
  Permanent entities
&lt;/h6&gt;

&lt;p&gt;Buckets are permanent storage entities and only removable when they are empty. After deleting a bucket, the name becomes available for reuse by any account after 24 hours if not taken by another account.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#object-storage-limits"&gt;
  &lt;/a&gt;
  Object storage limits
&lt;/h6&gt;

&lt;p&gt;There’s no limit to the number of objects you can store in a bucket. You can store all of your objects in a single bucket, or organize them across several buckets. However, you can't create a bucket from within another bucket, also known as nesting buckets.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#object-storage-limits"&gt;
  &lt;/a&gt;
  Object storage limits
&lt;/h6&gt;

&lt;p&gt;There’s no limit to the number of objects you can store in a bucket. You can store all of your objects in a single bucket, or organize them across several buckets. However, you can't create a bucket from within another bucket, also known as nesting buckets.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#bucket-creation-limits"&gt;
  &lt;/a&gt;
  Bucket creation limits
&lt;/h6&gt;

&lt;p&gt;By default, you can create up to 100 buckets in each of your AWS accounts. If you need additional buckets, you can increase your account bucket limit to a maximum of 1,000 buckets by submitting a service limit increase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#naming-buckets"&gt;
  &lt;/a&gt;
  Naming buckets
&lt;/h4&gt;

&lt;p&gt;When naming buckets, carefully determine how you want to structure your bucket names and how they will function. Will you use them only for data storage or hosting a static website? Your bucket names matter to S3, and based on how you use the bucket, your bucket names and characters will vary. Bucket names are globally viewable and need to be DNS-compliant. &lt;/p&gt;

&lt;p&gt;Here are the rules to follow when naming your buckets. Bucket names must: &lt;/p&gt;

&lt;p&gt;• Be unique across all of Amazon S3&lt;br&gt;
• Be between 3-63 characters long&lt;br&gt;
• Consist only of lowercase letters, numbers, dots (.), and hyphens (-)&lt;br&gt;
• Start with a lowercase letter or number&lt;br&gt;
• Not begin with xn-- (beginning February 2020)&lt;br&gt;
• Not be formatted as an IP address. (i.e. 198.68.10.2)&lt;br&gt;
• Use a dot (.) in the name only if the bucket's intended purpose is to host an Amazon S3 static website; otherwise do not use a dot (.) in the bucket name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4jD4a62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kjc4rdlrc69kmdub5lx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4jD4a62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kjc4rdlrc69kmdub5lx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This identifies the bucket URL in the format of bucket name/ region endpoint.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Amazon S3 Deep Dive (part 1-storage fundamentals)</title>
      <author>Supratip Banerjee</author>
      <pubDate>Sun, 18 Jul 2021 06:15:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-s3-deep-dive-part-1-storage-fundamentals-1f54</link>
      <guid>https://dev.to/aws-builders/amazon-s3-deep-dive-part-1-storage-fundamentals-1f54</guid>
      <description>&lt;h4&gt;
  &lt;a href="#storage-fundamentals"&gt;
  &lt;/a&gt;
  Storage fundamentals
&lt;/h4&gt;

&lt;p&gt;Amazon S3 is storage for the Internet that makes web-scale computing easier for developers and users alike.  Amazon S3 is an object storage platform that allows you to store and retrieve any amount of data, at any time, from anywhere on the web.  If you are new to storage, you may not be aware that there are different types of storage. &lt;/p&gt;

&lt;p&gt;Amazon S3 is an object storage-based service. However, to better understand object storage and how it differs from the other storage types, take a moment to review the underlying differences between storage types. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4GOIaxUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xidmezng8hy0b83h0hf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4GOIaxUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xidmezng8hy0b83h0hf7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#block-storage"&gt;
  &lt;/a&gt;
  Block storage
&lt;/h6&gt;

&lt;p&gt;A block is a range of bytes or bits on a storage device. Block storage files, are divided into blocks and written directly to empty blocks on a physical drive. Each block is assigned a unique identifier and then written to the disk in the most efficient manner possible. Since blocks are assigned identifiers, they do not need to be stored in adjacent sections of the disk. Indeed they can be spread across multiple disks or environments. You can retrieve the individual blocks separately from the rest of the file, which makes block storage excellent for technology like relational databases.&lt;/p&gt;

&lt;p&gt;With relational databases, you might only need to retrieve a single piece of a file, such as an inventory tracking number, or one specific employee ID, rather than retrieving the entire inventory listing or whole employee repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jpn00yZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe32ytfxiuqwu1qg28ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jpn00yZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe32ytfxiuqwu1qg28ga.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#file-storage"&gt;
  &lt;/a&gt;
  File Storage
&lt;/h6&gt;

&lt;p&gt;Historically, operating systems save data in hierarchical file systems organized in the form of directories, sub-directories and files, or folders, sub-folders, and files depending on the operating system.&lt;/p&gt;

&lt;p&gt;For example, if you are troubleshooting an issue on a Linux distribution, you may need to look in /var/log or /etc/config. Once inside of these directories, you need to identify which file to explore and open. When using a file-based system, you must know the exact path and location of the files you need to work with or have a way to search the entire structure to find the file you need.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--62acdvo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/poovcdcd7fv9q24thpoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--62acdvo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/poovcdcd7fv9q24thpoa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#object-storage"&gt;
  &lt;/a&gt;
  Object Storage
&lt;/h6&gt;

&lt;p&gt;Unlike the hierarchical structure used in file-based storage, object storage is a flat structure where the data, called an object, is located in a single repository known as a bucket. Object can be organized to imitate a hierarchy by attaching key name prefixes and delimiters. Prefixes and delimiters allow you to group similar items to help visually organize and easily retrieve your data. In the user interface, these prefixes give the appearance of a folder and subfolder structure but in reality, the storage is still a flat structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_gmDQgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnllbigf9guu1hdlcfui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_gmDQgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnllbigf9guu1hdlcfui.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#amazon-s3-fundamentals"&gt;
  &lt;/a&gt;
  Amazon S3 fundamentals
&lt;/h4&gt;

&lt;p&gt;Amazon S3 is an object storage service that offers industry-leading scalability, data availability, security, and performance. It is intentionally built with a minimal feature set that focuses on simplicity and robustness. You have access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of web sites. The service aims to maximize benefits of scale and to pass those benefits on to the you, the customer. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>data</category>
      <category>s3</category>
      <category>storage</category>
    </item>
    <item>
      <title>GitHub Copilot: My experience after one week usage</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 18 Jul 2021 05:46:22 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/github-copilot-my-experience-after-one-week-usage-eie</link>
      <guid>https://dev.to/ruppysuppy/github-copilot-my-experience-after-one-week-usage-eie</guid>
      <description>&lt;p&gt;Unless you were living under a rock, you must have come across some article or video about &lt;strong&gt;GitHub Copilot&lt;/strong&gt;, the &lt;em&gt;AI Pair Programmer&lt;/em&gt; which a lot of people believe spells the end of programmers. I recently got access to the &lt;a href="https://copilot.github.com/"&gt;Technical Preview&lt;/a&gt; of the software. After using it for a week, I decided to write this article, going over some experiments, the pros &amp;amp; cons of &lt;strong&gt;GitHub Copilot&lt;/strong&gt; and my thoughts on whether it will actually replace programmers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-experiments"&gt;
  &lt;/a&gt;
  Some Experiments
&lt;/h1&gt;

&lt;p&gt;The best way, I think, to test out software such as &lt;strong&gt;GitHub Copilot&lt;/strong&gt;, would be to run a couple of experiments on it. Here are a few short experiments to test how the software faired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-stock-price-fetch"&gt;
  &lt;/a&gt;
  1. Stock Price Fetch
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_I99fOSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itqsjivw19mcb4mmizs1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_I99fOSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itqsjivw19mcb4mmizs1.gif" alt="Stock Price Generation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetched stock price from &lt;strong&gt;external API&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Did not come up with the types on its own in a &lt;strong&gt;TypeScript&lt;/strong&gt; File&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-bfs-traversal"&gt;
  &lt;/a&gt;
  2. BFS Traversal
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNOv_VaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5rhh26mued6nwzqj2md.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNOv_VaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5rhh26mued6nwzqj2md.gif" alt="BFS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generated the function body &lt;strong&gt;line by line&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Did not &lt;strong&gt;auto-import&lt;/strong&gt; &lt;code&gt;deque&lt;/code&gt; Data Structure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-array-of-100-ones"&gt;
  &lt;/a&gt;
  3. Array of 100 Ones
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mE50SP4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohzvi7dzrtfu8wz53ugf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mE50SP4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohzvi7dzrtfu8wz53ugf.gif" alt="Array of 100 Ones"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Came up with a bit &lt;em&gt;wonky&lt;/em&gt; solution (and would not suggest anything else on &lt;strong&gt;Next Suggestion&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Came up with the efficient solution after it was partially typed&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Automate the repetitive parts of the code&lt;/li&gt;
&lt;li&gt;Find an &lt;strong&gt;API&lt;/strong&gt; for the task at hand, saving hours of &lt;em&gt;Googling&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Can help in case you are using a feature where you don't know the syntax. Just describe the task in the comments, and &lt;strong&gt;Copilot&lt;/strong&gt; will help you out.&lt;/li&gt;
&lt;li&gt;It somewhat forces you to use more descriptive variable and function names&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Occasionally, the suggestions are a bit &lt;em&gt;wonky&lt;/em&gt; (it's currently a &lt;em&gt;Technical Preview&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slow suggestions for small snippets. When I am writing code for production stuff, I was barely using &lt;strong&gt;Copilot&lt;/strong&gt; as by the time it could suggest something, I was done writing. This picture describes how &lt;strong&gt;Copilot&lt;/strong&gt; works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-BvIeIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ad58jvkwu58owy378cp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-BvIeIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ad58jvkwu58owy378cp.png" alt="How Copilot Works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the suggestions are fetched from the &lt;em&gt;internet&lt;/em&gt;, there is a slight delay between starting to type and actually getting the suggestions. In the case of &lt;strong&gt;line-by-line&lt;/strong&gt; suggestions, you will easily be able to type faster than waiting for the suggestions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Copilot&lt;/strong&gt; overrides &lt;strong&gt;automatic parenthesis closing&lt;/strong&gt;, which turned out to be a major pain for someone like me, who heavily relies on it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#will-it-replace-programmers"&gt;
  &lt;/a&gt;
  Will It Replace Programmers?
&lt;/h1&gt;

&lt;p&gt;Short answer: &lt;strong&gt;NO&lt;/strong&gt;. &lt;strong&gt;GitHub Copilot&lt;/strong&gt; is definitely an amazing piece of software; even in its early stages, it can streamline the process of programming and provide a huge productivity boost. But programmers will still be required in the Tech Industry.&lt;/p&gt;

&lt;p&gt;Let's go back 15 years (15 years for &lt;strong&gt;India&lt;/strong&gt;, the time might be different in different parts of the world), when &lt;strong&gt;PC&lt;/strong&gt;s were becoming commonplace, everyone was afraid of losing their jobs to computers. Yet computers didn't replace the jobs, it just made the processes more efficient leading to more throughput. Similarly, I believe &lt;strong&gt;GitHub Copilot&lt;/strong&gt; would &lt;em&gt;increase productivity&lt;/em&gt;, &lt;em&gt;make programming a better experience&lt;/em&gt; and &lt;em&gt;lead to the development of better software products&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What are your thoughts on &lt;strong&gt;GitHub Copilot&lt;/strong&gt;? Share them in the comments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Design Patterns: Prototype</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 18 Jul 2021 05:44:27 +0000</pubDate>
      <link>https://dev.to/tamerlang/design-patterns-prototype-14jg</link>
      <guid>https://dev.to/tamerlang/design-patterns-prototype-14jg</guid>
      <description>&lt;p&gt;Prototype?&lt;/p&gt;

&lt;p&gt;Your probably thinking of this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v4L7MKPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u806xfssmraf7vzgoj37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4L7MKPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u806xfssmraf7vzgoj37.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or maybe even this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z6evwN2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai7qfueq5e1hnvymq9bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z6evwN2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai7qfueq5e1hnvymq9bh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would love to make an article about how amazing Prototype the game is. But unfortunately we are on a design pattern series. Instead we are going to cover the &lt;em&gt;Prototype&lt;/em&gt; Design Pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today you will learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core concepts of the Prototype Pattern.&lt;/li&gt;
&lt;li&gt;Simple implementations of the Prototype Pattern.&lt;/li&gt;
&lt;li&gt;Opportunities to use the Prototype Pattern.&lt;/li&gt;
&lt;li&gt;Prototype pattern pros and cons.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XhU-lMXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xjc5ycqp2iwlvcy0lr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhU-lMXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xjc5ycqp2iwlvcy0lr3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Prototype Pattern is a creational design pattern that allows us to clone objects without having to depend on their underlying classes.&lt;/p&gt;

&lt;p&gt;But why would we want to clone objects?&lt;/p&gt;

&lt;p&gt;Well, there might be certain situations where you might need to clone an object:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Laziness&lt;/strong&gt;: Creating a new object might be a hassle, you might need to pass in some parameters to the constructor or call methods to set some fields. Sometimes it's easier to simply make a clone of an object that you want.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Business Logic&lt;/strong&gt;: Sometimes the logic of the business simply requires you to clone objects. For example, your working on a map app that finds for you the best path from A to B using a car. The program may clone the &lt;code&gt;Car&lt;/code&gt; object, and have them all go to separate paths and pick the best.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Defensive Copying&lt;/strong&gt;: Let's say for example you want to return the date of birth of a &lt;code&gt;Person&lt;/code&gt; at that moment. It would be wise to create a clone of &lt;code&gt;Person&lt;/code&gt; first and then take its date of birth because there is a slight chance that it would be modified by some other code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Snapshot&lt;/strong&gt;: Cloning allows you to have snapshots of objects, making some sort of history that you can traverse later on.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;PS. Cloning is not the same thing as copying. There are in-fact two types of copying:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Shallow Copying:&lt;/em&gt;&lt;/strong&gt; Copying the reference of an object. Basically working on the copy, you are still working on the same instance of the objects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Deep Copying&lt;/em&gt;&lt;/strong&gt;: When you create a whole new instance of an object. The copy lives independently from the original object. This is basically cloning and the premise of Prototype Pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;Let's imagine that your working on a blogging platform where people can create and share their articles. One day, your product owner comes and tells you that you will have to implement the duplicate article feature. &lt;/p&gt;

&lt;p&gt;You say it's pretty simple, and begin working.&lt;/p&gt;

&lt;p&gt;You come up with a naive solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="nf"&gt;duplicate&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you see the problem?&lt;/p&gt;

&lt;p&gt;We created a new &lt;code&gt;Article&lt;/code&gt; object and copied the title and body from the initial object to the copied one, but what about the &lt;code&gt;created_at&lt;/code&gt; field? &lt;/p&gt;

&lt;p&gt;We can't simply copy it over because it's a private field. A solution would be to simply make it public but this is bad practice. &lt;/p&gt;

&lt;p&gt;Another problem is that our client is now coupled together with the &lt;code&gt;Article&lt;/code&gt; class, if we want to copy an object of another class, we will have to create this whole process again, but for a different class. &lt;/p&gt;

&lt;p&gt;We can do better. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;The prototype pattern delegates the cloning to the actual object.&lt;/p&gt;

&lt;p&gt;But first let us create a common interface for all objects that are clonable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Cloneable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that that's done let us refactor our &lt;code&gt;Article&lt;/code&gt; class to use this interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Cloneable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;Article&lt;/code&gt; class now has a clone method which returns for use a clone of the current object. &lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;Client&lt;/code&gt; class we can simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="nf"&gt;duplicate&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple enough, this is the basic premise of the prototype pattern. Keep in mind that this is already implemented out of the box in most programming languages, so you don't have to implement this yourself, but it's good to know how things work under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-this-pattern"&gt;
  &lt;/a&gt;
  When to use this pattern?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use the prototype pattern when you client doesn't need to depend on concrete classes to copy objects.&lt;/li&gt;
&lt;li&gt;Use the pattern when you want to limit the number of subclasses that differ only in their initial field values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can clone objects more conveniently.&lt;/li&gt;
&lt;li&gt;Your client code doesn't have to depend on the concrete class of the object.&lt;/li&gt;
&lt;li&gt;You get rid of repeated initialization code, instead you can simply clone objects.&lt;/li&gt;
&lt;li&gt;You get an alternative to inheritance, instead of creating a bunch of classes with different configs. Just have one class and copy it with different configs each time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cloning complex objects may be very tricky and lead to spaghetti code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is the simplest design pattern we have covered so far, but don't forget:&lt;/p&gt;

&lt;p&gt;"Knowing is Half the Battle"&lt;/p&gt;

&lt;p&gt;Take a step further and see ways in your own projects where you would use this pattern. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today you learned:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The prototype pattern.&lt;/li&gt;
&lt;li&gt;Implementations of the prototype pattern.&lt;/li&gt;
&lt;li&gt;To recognize opportunities where the Prototype pattern can be used.&lt;/li&gt;
&lt;li&gt;It's pros and cons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-readings"&gt;
  &lt;/a&gt;
  Further Readings
&lt;/h2&gt;

&lt;p&gt;If you want to learn more about the design patterns, I would recommend &lt;a href="https://refactoring.guru/design-patterns"&gt;Diving into Design Patterns&lt;/a&gt;. It explains all 23 design patterns found in the GoF book, in a fun and engaging manner.&lt;/p&gt;

&lt;p&gt;Another book that I recommend is &lt;a href="https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124"&gt;Heads First Design Patterns: A Brain-Friendly Guide&lt;/a&gt;, which has fun and easy-to-read explanations.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Write It Down</title>
      <author>Dylan Balagtas</author>
      <pubDate>Sun, 18 Jul 2021 04:54:18 +0000</pubDate>
      <link>https://dev.to/dylan_balagtas/write-it-down-1mfe</link>
      <guid>https://dev.to/dylan_balagtas/write-it-down-1mfe</guid>
      <description>&lt;p&gt;Everyone has their idea may it be about a video game or the food they last ate, or even the formula to solve cancer&lt;/p&gt;

&lt;p&gt;We all have ideas and they come and go, in times when we want them and in most times when we don't want them.&lt;/p&gt;

&lt;p&gt;Sometimes it comes in the most inappropriate times, like when we are trying to sleep.&lt;/p&gt;

&lt;p&gt;These ideas just circle in your head, bouncing around your skull like a banshee that wants to get out.&lt;/p&gt;

&lt;p&gt;But it doesn't, it sits and camps there for a while.&lt;/p&gt;

&lt;p&gt;Well let me tell you the only way you can remove that nasty camper&lt;br&gt;
Is by writing it down, may it be Digital or physical&lt;/p&gt;

&lt;p&gt;Somehow it just transfers once you put it down. The beauty of writing down.&lt;/p&gt;

&lt;p&gt;For me, the best ideas show ups when I'm trying to sleep&lt;/p&gt;

&lt;p&gt;That's why I bring always a notebook, The Notebook of Ideas&lt;br&gt;
If it's not there I have my smartphone with a note-taking app.&lt;/p&gt;

&lt;p&gt;But it doesn't happen during sleeping only&lt;/p&gt;

&lt;p&gt;It can happen in the shower, while you're walking, while you're commuting&lt;/p&gt;

&lt;p&gt;But what's common of all situations, most ideas come when you are in a silent place&lt;/p&gt;

&lt;p&gt;Where you can talk to yourself&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;think, think, think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sad thing is this ideas come and go, once you get distracted or even think of something else, your idea is gone&lt;/p&gt;

&lt;p&gt;Lucky you if ever you'll get to have the chance to grasp that idea again&lt;/p&gt;

&lt;p&gt;Again a reason why you should write it down&lt;/p&gt;

&lt;p&gt;“Like Yow right down now not later nor tomorrow”&lt;/p&gt;

&lt;p&gt;Now is the best time before it's gone&lt;/p&gt;

&lt;p&gt;You won't want to waste a wonderful idea&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#every-idea-is-important"&gt;
  &lt;/a&gt;
  Every Idea is important
&lt;/h2&gt;

&lt;p&gt;No matter how small the solution you came up with can solve.&lt;/p&gt;

&lt;p&gt;No matter what your race, your gender, your sexuality, or your educational background.&lt;/p&gt;

&lt;p&gt;Its a solution to a problem&lt;/p&gt;

&lt;p&gt;And that's helpful&lt;/p&gt;

&lt;p&gt;It may even be incomplete&lt;/p&gt;

&lt;p&gt;Allowing you to branch out and research more to better up your idea&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ideas-from-others"&gt;
  &lt;/a&gt;
  Ideas from others
&lt;/h2&gt;

&lt;p&gt;Talking to other people. Fitting their shoes.&lt;/p&gt;

&lt;p&gt;Helps you practice thinking. Helps you and your friend or whoever you are talking to unrivaled wonderful ideas&lt;/p&gt;

&lt;p&gt;The power of having different brains!&lt;/p&gt;

&lt;p&gt;Ideas are like a jigsaw puzzle, Sometimes they fit, sometimes they don't.&lt;br&gt;
But when it does fit, it forms a beautiful image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You'll never know you'll have that one idea that can change people's lives, or even change your idea.&lt;/p&gt;

&lt;p&gt;And you'll never know when you'll form it. And you'll never know when you'll forget about it&lt;/p&gt;

&lt;p&gt;So keep a notebook, make it as small as possible that it fits your back pocket with that pen of yours&lt;/p&gt;

&lt;p&gt;Because I know you're a thinker because we are all thinkers.&lt;/p&gt;

&lt;p&gt;And all these problems we face can only be solved by sharing and contributing our ideas to the world, and collaborating with others!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>9 Cool ways to make money as Developer</title>
      <author>codinglists-dev</author>
      <pubDate>Sun, 18 Jul 2021 04:46:05 +0000</pubDate>
      <link>https://dev.to/codinglistsdev/9-cool-ways-to-make-money-as-developer-4i1p</link>
      <guid>https://dev.to/codinglistsdev/9-cool-ways-to-make-money-as-developer-4i1p</guid>
      <description>&lt;p&gt;On this page you'll track down the very most ideal approaches to bring in cash in your extra time while learning to code. None of the 9 techniques recorded here to get some cash rapidly will break the notorious bank. Some are simpler than others, yet virtually all require next to no to no capital. They are intended to get you through the troublesome occasions. &lt;/p&gt;

&lt;p&gt;A portion of these methodologies to bring in additional cash will expect you to be in sure regions, while others are area autonomous, yet everything reduces to being clever. We've all wound up in a difficult situation at one point in our lives or another, yet to the individual who's submitted, the sky is the limit.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#selling-digital-books"&gt;
  &lt;/a&gt;
  Selling digital books
&lt;/h3&gt;

&lt;p&gt;Digital books presently sell in the large numbers every year, with a worldwide market worth $18.13 billion starting at 2020. You can write of them yourself, utilize authors, utilize public area content, and make your digital books from numerous sources. &lt;/p&gt;

&lt;p&gt;What's more, pretty much any subject can be covered — similarly as many, if not more, than what a conventional distributer may deliver on the grounds that you can tailor your books to specialty markets. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places for seeling eBooks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon KDP&lt;/li&gt;
&lt;li&gt;Gumroad&lt;/li&gt;
&lt;li&gt;Personal store(Shopify)&lt;/li&gt;
&lt;li&gt;Google Play Books&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#making-money-by-building-saas-app"&gt;
  &lt;/a&gt;
  Making money by building SaaS App
&lt;/h3&gt;

&lt;p&gt;Software as a Service, additionally know as SaaS, is a cloud-based assistance where as opposed to downloading programming your work area PC or business organization to run and refresh, you rather access an application by means of a web program. The product application could be anything from office programming to brought together interchanges among a wide scope of other business applications that are accessible.&lt;/p&gt;

&lt;p&gt;Most people bounce right to "fabricate what they need" without guaranteeing they have a group of people that needs it, or they assemble what they think their clients need, without really approving their suspicions.&lt;/p&gt;

&lt;p&gt;So how do SaaS apps makes money? Is it easy? &lt;/p&gt;

&lt;p&gt;No. It's not easy not very hard. It's hard to get the users to use your app. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Subscriptions&lt;/strong&gt;: Subscription revenue model is a normal and has many sub-features&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data&lt;/strong&gt;: No business is free, you'll get some high bucks for selling your data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ads&lt;/strong&gt;: Not showing ads for some features&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Free + Premium&lt;/strong&gt;: Providing free service and and option to upgrade to premium with more features&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#job-freelancing"&gt;
  &lt;/a&gt;
  Job + Freelancing
&lt;/h3&gt;

&lt;p&gt;Getting a suitable and lovel job + freelancing on websites(fiverr, upwork, toptal) will help you inn making more income. For extra income remember you need to hustle. &lt;/p&gt;

&lt;p&gt;So how can you make money as freelance? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign up at freelancing sites (fiverr, toptal, upwork)&lt;/li&gt;
&lt;li&gt;Start sending proposals to people looking for developers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, you must have an amazing portfolio with your old projects if any. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blogging"&gt;
  &lt;/a&gt;
  Blogging
&lt;/h3&gt;

&lt;p&gt;Chossing a niche you're confident about and writing consistently can get you some extra income. There are many bloggers making 6 figures by just blogging. &lt;/p&gt;

&lt;p&gt;So how you can make a blog? (Post coming soon)&lt;br&gt;
If you have a blog, multiple ways of monetizing? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ad networks(Media.net, Adsense)&lt;/li&gt;
&lt;li&gt;Affiliate Marketing(Amazon affiliate)&lt;/li&gt;
&lt;li&gt;Paid reviews&lt;/li&gt;
&lt;li&gt;Sponsord Posts&lt;/li&gt;
&lt;li&gt;Selling online course or eBooks (you'll have an audience so it will be easy)&lt;/li&gt;
&lt;li&gt;Offering freelance service  (you'll have an audience so it will be easy)&lt;/li&gt;
&lt;li&gt;Web Monetization (Coil, Uphold)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So above I have given you 7 sub-ways to make money by blogging, so implementing all you can make in 6 digits easily. Again blogging is not easy you'll require a lot of understanding and consitency and also quality. (Our post will be coming soon regarding this)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#newsletters"&gt;
  &lt;/a&gt;
  Newsletters
&lt;/h3&gt;

&lt;p&gt;Yes, newsletters can be a way to make money. Maybe six figures🤯. You likely get a few diverse week after newsletters in your inbox every day, except presumably haven't understood that these newsletters are frequently raking in boatloads of cash for their brands through their email marketing. &lt;/p&gt;

&lt;p&gt;Newsletters are as yet quite possibly the most remarkable types of computerized showcasing. You can foster an immediate association with your subscribers. Newsletters can bring in cash differently, including advertisement space, subsidiary connections and advancement of your image's items and administrations. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sponsored Content&lt;/li&gt;
&lt;li&gt;Selling AD Space&lt;/li&gt;
&lt;li&gt;Donations&lt;/li&gt;
&lt;li&gt;Selling your own products/services&lt;/li&gt;
&lt;li&gt;Affiliate marketing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bug-bounty-earning"&gt;
  &lt;/a&gt;
  Bug Bounty earning
&lt;/h3&gt;

&lt;p&gt;Bug bounty programs permit autonomous security specialists to report bugs to an association and get prizes or pay. These bugs are generally security adventures and weaknesses, however they can likewise incorporate cycle issues, equipment blemishes, etc. &lt;/p&gt;

&lt;p&gt;The reports are commonly made through a program run by a free outsider (like Bugcrowd or HackerOne). The association will set up (and run) a program curated to the association's requirements. &lt;/p&gt;

&lt;p&gt;Projects might be private (welcome just) where reports are kept secret to the association or public (where anybody can join and join). They can occur over a set time span or with no closure date (however the subsequent choice is more normal).&lt;/p&gt;

&lt;p&gt;List of &lt;a href="https://hackerone.com/bug-bounty-programs"&gt;Bug bounty programs&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source-development"&gt;
  &lt;/a&gt;
  Open Source Development
&lt;/h3&gt;

&lt;p&gt;A great many people, when they consider open source programming, envision eager and liberal engineers who go through their days and evenings making programming free of charge. For sure, for years and years "open source programming" was inseparable from "free programming." Developing programming with open code through collective endeavor avoided the chance for benefit. However, today there are approaches to benefit from building open source programming (OSS). &lt;/p&gt;

&lt;p&gt;Recently, engineers have begun contemplating how to adapt their OSS. We will feature a couple of basic approaches to make benefits from open source programming.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paid support&lt;/li&gt;
&lt;li&gt;Dual licensing&lt;/li&gt;
&lt;li&gt;Extra features, extra pay&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#developing-templates"&gt;
  &lt;/a&gt;
  Developing templates
&lt;/h3&gt;

&lt;p&gt;Coding templates can be an amazing way to make fast cash.  The way that you can do this is to go on a portion of the sites like ThemeForest where anybody can sell their templates for a little charge for every each buy. This is basically the same as selling on the web courses. You'll have to invest some energy making the template, however once you transfer it to the web, cash goes totally detached.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teaching"&gt;
  &lt;/a&gt;
  Teaching
&lt;/h3&gt;

&lt;p&gt;An amazing approach to bring in cash as an engineer is to show others how to code. There are various ways that you can do that. The first is to make and sell online courses. You can sell seminars on your own foundation or sell them on places like Udemy or Pluralsight. The second way that you can approach training how to code is to show individuals exclusively, that can be on the web or face to face. In the event that you show individuals thusly, you'll bring in significantly more cash, yet it's not going to be detached. You'll have to exchange your time for cash along these lines, which is the reason a great many people pick the main choice. &lt;/p&gt;

&lt;p&gt;Likewise If you pick to show others how to code, you may consider beginning a YouTube channel where you show individuals how to code. That way you can get free publicizing on the off chance that you give quality data.&lt;/p&gt;




&lt;p&gt;Always remember creator economy is growing, so you have to. Many things above relate to creating content. Probably in future that will be the only way (except jobs) you can make some extra money.  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>earning</category>
    </item>
    <item>
      <title>Analog Clock Using HTML,CSS &amp; JS ⚡</title>
      <author>Rohan Kulkarni</author>
      <pubDate>Sun, 18 Jul 2021 04:36:16 +0000</pubDate>
      <link>https://dev.to/rohank_2502/analog-clock-using-html-css-js-ah2</link>
      <guid>https://dev.to/rohank_2502/analog-clock-using-html-css-js-ah2</guid>
      <description>&lt;p&gt;Hello Everyone !! In this article, I will try to explain the code of the Analog clock which I made recently !! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rohan-kulkarni-25/front-end-templates"&gt;Code ( GitHub Repository )&lt;/a&gt;  &lt;a href="https://rohan-kulkarni-25.github.io/front-end-templates/analog-clock/index.html"&gt;Website Preview&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aim-to-develop-an-analog-clock-like"&gt;
  &lt;/a&gt;
  Aim: To Develop an Analog Clock Like 👇🏻
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JaiY3zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626580726489/L3Viwpgsiz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JaiY3zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626580726489/L3Viwpgsiz.gif" alt="ezgif.com-gif-maker(2).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  HTML CODE
&lt;/h3&gt;

&lt;p&gt;In this section, we are having simple code which consists of a div that has a title.&lt;br&gt;
Below that, there is one section in which the whole clock div is located and inside the clock div, there is a separate div for each hand!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;div class="heading"&amp;gt; 
        &amp;lt;p&amp;gt;ANALOG CLOCK&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;section class="page--section"&amp;gt; 
        &amp;lt;div id="clock--box"&amp;gt; 
            &amp;lt;div id="hour--hand"&amp;gt;&amp;lt;/div&amp;gt; 
            &amp;lt;div id="min--hand"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div id="sec--hand"&amp;gt;
                &amp;lt;div class="round--dot"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS CODE
&lt;/h3&gt;

&lt;p&gt;Let's see the design code part by part &lt;/p&gt;

&lt;p&gt;This is CSS code for the body. This has given a flex display to the body so we can align the div to the center of the page. I have selected the background gradient from  &lt;a href="https://uigradients.com/"&gt;uigradients.com&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  display: flex;
  justify-content: space-around;
  flex-direction: column;
  background: #7f7fd5;
  background: -webkit-linear-gradient(to right, #91eae4, #86a8e7, #7f7fd5);
  background: linear-gradient(to right, #91eae4, #86a8e7, #7f7fd5);
}
p {
  margin: 0;
  padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the code block for the heading and page section. I have added width and given display flex to the page section because I can align the clock div to center by flex methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.heading {
  text-align: center;
  font-size: 4vmax;
  font-weight: 900;
  color: white;
  text-shadow: 4px 4px black;
}

.page--section {
  width: 98vw;
  height: fit-content;
  margin-top: 5em;
  display: flex;
  justify-content: center;
  align-items: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is code for the clock box which has a border-radius of 50% which makes the div box rounded. I have added an image in the background which is a normal image of a clock.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jy9K4CQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626581320738/szO-YJxZv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jy9K4CQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626581320738/szO-YJxZv.png" alt="circle-cropped.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this code, position relative plays the most important role this will help us to align the hands in relative to this div box. I have also added an animation effect that changes box-shadow you can have fun by changing the color and size of the shadow 😁&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#clock--box {
  height: 30vw;
  width: 30vw;
  background-image: url(../images/circle-cropped.png);
  background-size: contain;
  background-repeat: no-repeat;
  position: relative;
  border-radius: 50%;
  box-shadow: 4px 4px 32px 32px yellow;
  animation: box 4s infinite;
}

@keyframes box {
  0% {
    box-shadow: 2px 2px 10px 10px #fceabb;
  }
  25% {
    box-shadow: 3px 3px 16px 16px #f8b500;
  }
  50% {
    box-shadow: 4px 4px 32px 32px #f87000;
  }
  75% {
    box-shadow: 3px 3px 16px 16px #f8b500;
  }
  100% {
    box-shadow: 2px 2px 10px 10px #fceabb;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code, I have made the position of the hour hand absolute so we can align them with respect to the top, bottom, left, the right position of the clock div. &lt;br&gt;
We have to align all hands to the center with the help of these properties.&lt;br&gt;
In this code, the transform-origin is set to the bottom that will help our clock hand to rotate from the bottom. By default, this property is set to center.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#hour--hand,
#min--hand,
#sec--hand {
  position: absolute;
  background-color: black;
  border-radius: 12px;
  transform-origin: bottom;
}

#hour--hand {
  height: 23%;
  width: 1.5%;
  left: 50%;
  top: 26%;
  border-radius: 75%;
}

#min--hand {
  height: 30%;
  width: 1%;
  left: 50.3%;
  top: 20%;
  border-radius: 200%;
}

#sec--hand {
  height: 30%;
  background-color: black;
  width: 0.2%;
  left: 50.5%;
  top: 20%;
  position: relative;
}

.round--dot {
  background-color: red;
  height: 1vmax;
  width: 1vmax;
  left: 50%;
  top: 20%;
  border-radius: 50%;
  display: block;
  opacity: 1;
  position: absolute;
  top: 0vmax;
  left: -0.4vmax;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is CSS code for Small devices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media only screen and (max-width: 800px) {
  .page--section {
    padding: 0;
  }
  #clock--box {
    height: 60vw;
    width: 60vw;
    background-image: url(../images/circle-cropped.png);
    background-size: contain;
    background-repeat: no-repeat;
    position: relative;
    border-radius: 50%;
    box-shadow: 4px 4px 32px 32px yellow;
    animation: box 4s infinite;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#js-code"&gt;
  &lt;/a&gt;
  JS CODE
&lt;/h3&gt;

&lt;p&gt;This is Javascript code in which we have Set Interval function which will repeat itself after every 1000 milliseconds ( 1 sec ). In the variable current date, we are storing the current date with help of the Date Object. By using methods on date object we will be taking current time in hours, minutes &amp;amp; seconds. Then we have defined rotation for each hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hour hand rotation 
Total Hours 12 Rotation of 360 deg So in 1 hour 
It will rotate 30 deg but the minute hand also impact the rotation of the hour hand so if in 60 min it rotates 30 deg then in 1 min it will rotate half deg so we will add this to the total turn 

Minute hand rotation 
Total Min in Hour is 60 with rotation of 360 deg so per min will rotate 6 deg 

Second-Hand rotation 
Total sec in Min is 60 with rotation of 360 deg so per sec will rotate 6 deg 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the style transform property we will rotate the hand as per time and will update it every sec.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(() =&amp;gt; {
    let currentDate = new Date();
    let timeInHour = currentDate.getHours();
    let timeInMinutes = currentDate.getMinutes();
    let timeInSeconds = currentDate.getSeconds();
    let hourHandTurn = (30 * timeInHour + timeInMinutes / 2);
    let minuteHandTurn = 6 * timeInMinutes;
    let secondHandTurn = 6 * timeInSeconds;
    document.getElementById('sec--hand').style.transform = `rotate(${secondHandTurn}deg)`;
    document.getElementById('min--hand').style.transform = `rotate(${minuteHandTurn}deg)`;
    document.getElementById('hour--hand').style.transform = `rotate(${hourHandTurn}deg)`;
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#great-we-have-created-our-own-analog-clock-i-hope-you-enjoyed-developing-with-me-do-tag-me-if-this-article-helped-you-in-creating-your-own-analog-clock-and-do-share-on-socials-"&gt;
  &lt;/a&gt;
  Great we have created our own analog clock. I hope you enjoyed developing with me. Do tag me if this article helped you in creating your own analog clock and do share on socials !!
&lt;/h3&gt;

&lt;p&gt;Wanna get connected with me 😄&lt;br&gt;
&lt;a href="https://twitter.com/rohan_2502"&gt;Twitter&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/rohan-k-2502/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started with Regular Expressions</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Sun, 18 Jul 2021 04:17:00 +0000</pubDate>
      <link>https://dev.to/nickytonline/getting-started-with-regular-expressions-11dg</link>
      <guid>https://dev.to/nickytonline/getting-started-with-regular-expressions-11dg</guid>
      <description>&lt;p&gt;Regular expressions (regex) are one of those things that folks seem to make fun of most of the time because they don't understand them, or partially understand them.&lt;/p&gt;

&lt;p&gt;I decided to write this post after Ben Hong Tweeted out asking for good regex resources.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOtStrIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305674805757333504/-4nFHMCK_normal.jpg" alt="Ben Hong profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ben Hong
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/bencodezen"&gt;@bencodezen&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I've finally taken the plunge to gain better mastery of regex, but I'm a little surprised at the limited selection of learning resources available for it.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:18 PM - 17 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1416417046150193152" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1416417046150193152" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1416417046150193152" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Is this post going to make you a regex guru? No, but it will teach some of the pitfalls that developers succumb to. The example code shown in the post will be for regular expression in JavaScript, but you should be able to use them in your language of choice or at least the concepts if the syntax is slighlty different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-specific"&gt;
  &lt;/a&gt;
  Be Specific
&lt;/h2&gt;

&lt;p&gt;Know what you're trying to look for. This may sound obvious on the surface, but it's not always the case. Let's say I want to find instances of &lt;code&gt;three&lt;/code&gt; in a text file because we need to replace all instances of &lt;code&gt;three&lt;/code&gt; with the number &lt;code&gt;3&lt;/code&gt;. You've done a bit of Googling and or checked out &lt;a href="https://regex101.com"&gt;regex101.com&lt;/a&gt;. You're feeling pretty good so you write out this regular expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/three/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you're new to regular expressions, everything between the starting &lt;code&gt;/&lt;/code&gt; and the ending &lt;code&gt;/&lt;/code&gt; is the regular expression. The &lt;code&gt;g&lt;/code&gt; after the last &lt;code&gt;/&lt;/code&gt; means global, as in find all instances.&lt;/p&gt;

&lt;p&gt;You run the regular expression to match all instances of &lt;code&gt;three&lt;/code&gt; so it can be replaced with &lt;code&gt;3&lt;/code&gt;. You look at what got replaced in the text and you're a little perplexed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- There were three little pigs that live in their own houses to keep safe from the big bad wolf who is thirty-three years old.
&lt;/span&gt;&lt;span class="gi"&gt;+ There were 3 little pigs that live in their own houses to keep safe from the big bad wolf who is thirty-3 years old.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;three&lt;/code&gt; got replaced by &lt;code&gt;3&lt;/code&gt; everywhere in the file, but why was thirty-three replaced? You only wanted &lt;code&gt;three&lt;/code&gt;s replaced. And here we have our first lesson. Be specific. We only want to match when it's only the word &lt;code&gt;three&lt;/code&gt;. So we need to beef up this regex a little. We only want to find the &lt;code&gt;three&lt;/code&gt; when it's the first word in a sentence, has white space before and after it, or if it's the last word in a sentence. With that criteria, the regex might look like this now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?:\s&lt;/span&gt;&lt;span class="sr"&gt;|^&lt;/span&gt;&lt;span class="se"&gt;)(&lt;/span&gt;&lt;span class="sr"&gt;three&lt;/span&gt;&lt;span class="se"&gt;)(?:\s&lt;/span&gt;&lt;span class="sr"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\|&lt;/span&gt;&lt;span class="sr"&gt;.|,|;|:|'|"|!|"|'|$&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Don't worry if you're not familiar with all the syntax. The &lt;code&gt;^&lt;/code&gt; character means the beginning of a line of text. The &lt;code&gt;$&lt;/code&gt; character means the end of a line of text. For more information about &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;, see &lt;a href="https://www.regular-expressions.info/anchors.html"&gt;Start of String and End of String Anchors&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;When parts of a regex are contained by parentheses, it means a group, and what's in that group will return as a group as part of the match. If partos of a regex are contained by &lt;code&gt;(?:&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;, it means a non-capturing group as in, it won't show up in the matching regex object.&lt;/p&gt;

&lt;p&gt;Other things to note ar that &lt;code&gt;.&lt;/code&gt; means match anything. In our case, we're looking for a period in text, so we need to escape it with a backslash, &lt;code&gt;\.&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The grouped sections of the regex contain the &lt;code&gt;|&lt;/code&gt; character. In regex, that means or. For example &lt;code&gt;(?:\s|^)&lt;/code&gt; means find white space, &lt;code&gt;\s&lt;/code&gt; or the start of the text, &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another special regexe character that you may have noticed in the first group is &lt;code&gt;\s&lt;/code&gt;. This means a whitespace character. It can be a space or tab.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-too-greedy"&gt;
  &lt;/a&gt;
  Don't Be Too Greedy
&lt;/h2&gt;

&lt;p&gt;Greed is usually not a good thing and greed in regex is no exception. Let's say you're tasked with finding all the text snippets between double quotes. If you remember from the previous section, I mentioned that &lt;code&gt;.&lt;/code&gt; means any character. Another special character is  &lt;code&gt;+&lt;/code&gt;. It means at least one character. With this knowledge, you set out to build your regex. Also, for the sake of this example, we are going to assume the happy path, i.e. no double quoted strings withing double quoted strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchBetweenDoubleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/"&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;"/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're feeling good and you run this regex over the file you need to extract the texts from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hi there "this text is in double quotes". As well, "this text is in double quotes too".
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results come in and here are the texts that the regex matched for texts within double quotes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this text is in double quotes". As well, "this text is in double quotes too&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait a minute!? That's not what you were expecting. There are clearly two sets of text within double quotes, so what went wrong? Lesson number two. Don't be greedy.&lt;/p&gt;

&lt;p&gt;If we look again at the regex you created, it contains &lt;code&gt;.+&lt;/code&gt; which means literally match any character as many times as possible which is why we end up matching only &lt;code&gt;this text is in double quotes". As well, "this text is in double quotes too&lt;/code&gt; because &lt;code&gt;"&lt;/code&gt; is considered any character.&lt;/p&gt;

&lt;p&gt;There are two ways to approach this in our simplified scenario. We can use the non-greedy version of &lt;code&gt;+&lt;/code&gt;, by repalcing it with &lt;code&gt;+?&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchBetweenDoubleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/"&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.+&lt;/span&gt;&lt;span class="se"&gt;?)&lt;/span&gt;&lt;span class="sr"&gt;"/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which means find a &lt;code&gt;"&lt;/code&gt;, start a capturing group then find as many characters as possible before you hit a &lt;code&gt;"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another approach, which I prefer is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchBetweenDoubleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/"&lt;/span&gt;&lt;span class="se"&gt;([^&lt;/span&gt;&lt;span class="sr"&gt;"&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;"/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which means find a &lt;code&gt;"&lt;/code&gt;, start a capturing group then find as many characters as possible that aren't &lt;code&gt;"&lt;/code&gt; before you hit a &lt;code&gt;"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: Some new syntax. &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; are a way to say match any of the following things. In our case though, we're using it with &lt;code&gt;^&lt;/code&gt;, i.e. &lt;code&gt;[^&lt;/code&gt;, to say do not match any of the following things. I our case, we're saying to not match the &lt;code&gt;"&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;That's all for now! If you have questions about regexes, drop a comment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://regex101.com"&gt;regex101.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.regular-expressions.info"&gt;regular-expressions.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/mastering-regular-expressions/0596528124/"&gt;Matering Regular Expression 3rd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;Regular Expressions | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>regularexpressions</category>
      <category>regex</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Learn to become a modern frontend developer</title>
      <author>Takuya Kikuchi</author>
      <pubDate>Sun, 18 Jul 2021 03:53:32 +0000</pubDate>
      <link>https://dev.to/takuyakikuchi/learn-to-become-a-modern-frontend-developer-1m4h</link>
      <guid>https://dev.to/takuyakikuchi/learn-to-become-a-modern-frontend-developer-1m4h</guid>
      <description>&lt;p&gt;&lt;a href="https://roadmap.sh/frontend"&gt;Learn to become a modern frontend developer&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-my-next-learnings"&gt;
  &lt;/a&gt;
  What's my next learnings? 🤔
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Test

&lt;ul&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;li&gt;React testing library&lt;/li&gt;
&lt;li&gt;Cypress&lt;/li&gt;
&lt;li&gt;Enzyme&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;SSR ⇒ Next.js&lt;/li&gt;
&lt;li&gt;Static Site Generators ⇒ GatsbyJS&lt;/li&gt;
&lt;li&gt;React Native&lt;/li&gt;
&lt;li&gt;Web Assembly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#jest-amp-react-testing-library"&gt;
  &lt;/a&gt;
  Jest &amp;amp; React testing library
&lt;/h3&gt;

&lt;p&gt;Official page&lt;br&gt;
&lt;a href="https://jestjs.io/ja/docs/getting-started"&gt;はじめましょう · Jest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crash course&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=3e1GHCA3GP0"&gt;React unit testing with Jest &amp;amp; React-testing-library - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h3&gt;

&lt;p&gt;Official page&lt;br&gt;
&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript: Typed JavaScript at Any Scale.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-next-actions"&gt;
  &lt;/a&gt;
  My next actions
&lt;/h2&gt;

&lt;p&gt;I will do a quick crash course for Jest and TypeScript as a start&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Managing concurrency in Django using select_for_update</title>
      <author>CH S Sankalp jonna</author>
      <pubDate>Sun, 18 Jul 2021 02:37:39 +0000</pubDate>
      <link>https://dev.to/sankalpjonna/managing-concurrency-in-django-using-selectforupdate-1cg9</link>
      <guid>https://dev.to/sankalpjonna/managing-concurrency-in-django-using-selectforupdate-1cg9</guid>
      <description>&lt;p&gt;If you ever plan to run multiple processes for the same server code, it is inevitable that you have to deal with the age-old problem of managing concurrency. &lt;/p&gt;

&lt;p&gt;The Django ORM is no different. If you call the save() method on an object, there is a good chance that two different instances of your server call this method on the same object at the same time causing your data to get corrupted.&lt;/p&gt;

&lt;p&gt;Consider the example of an account model that is responsible for storing how much bank balance somebody has in their account:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models

from django.contrib.auth.models import User
from django.db import models, transaction

class Account(models.Model):
    balance = models.IntegerField(default=0)
    user = models.ForeignKey(User)

    def deposit(self, amount):
        self.balance += amount
        self.save()

    def withdraw(self, amount):
        if amount &amp;gt; self.balance:
            raise errors.InsufficientFunds()
        self.balance -= amount
        self.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As you can see, there are two methods included in this model to deposit and withdraw money into the account. &lt;/p&gt;

&lt;p&gt;Seems straightforward enough right? Nothing could go wrong here right? Its basic addition and subtraction right? WRONG!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-classic-concurrency-problem"&gt;
  &lt;/a&gt;
  The classic concurrency problem
&lt;/h2&gt;

&lt;p&gt;Let’s say there is an account with a Balance of $1000 in it which is accessible by 2 different users. Think of it as a joint account.&lt;/p&gt;

&lt;p&gt;Now let’s say User1 is the earner and User2 is the spender. User1 deposited 100$ into the account and therefore the server invoked &lt;strong&gt;account.deposit(100)&lt;/strong&gt; but at the exact same time, User2 withdrew $100 thus invoking &lt;strong&gt;account.withdraw(100)&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;What should happen in this case? Ideally the balance at the end of these two transactions should remain 1000$ right? If you are running a single instance of your server, this would indeed be the case because these two transactions would always run one after another.&lt;/p&gt;

&lt;p&gt;But if these transactions are run by different instances of your server in parallel, there is a good chance that the balance at the end of it would be $900. Why does this happen? &lt;/p&gt;

&lt;p&gt;Here are the steps that occur in these transactions&lt;/p&gt;

&lt;p&gt;Step 1: User1 retrieves the account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: User2 retrieves the account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 3: User1 deposits $100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000 + $100 = $1100&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 4: User2 withdraws $100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000 - $100 = $900&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In step 4, the balance that the server has loaded into memory is stale because it was already updated to $1100 in step 3 which the other server instance was not aware of and hence it thinks that the current balance is still $1000. &lt;/p&gt;

&lt;p&gt;This is the classic concurrency problem and thankfully this age-old problem has an age-old solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-to-the-concurrency-problem"&gt;
  &lt;/a&gt;
  Solution to the concurrency problem
&lt;/h2&gt;

&lt;p&gt;The solution is quite simple. When a database operation is in progress, the object or the set of objects that are being updated must be locked until the operation is complete so that no other process can access this object/objects.&lt;/p&gt;

&lt;p&gt;This will prevent multiple instances of a server from loading stale data into memory and corrupting the database. &lt;/p&gt;

&lt;p&gt;The best place to lock an object is to do it at the database level as opposed to the application level. This will protect your data from getting corrupted by other processes such as cron jobs as well. &lt;/p&gt;

&lt;p&gt;Besides, when you run multiple workers of your Django application, it can be a pain to maintain locks at the application level because you would need to use some other 3rd party tool that stays in sync across all your workers to achieve a global lock.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-selectforupdate-in-django"&gt;
  &lt;/a&gt;
  What is select_for_update in Django?
&lt;/h2&gt;

&lt;p&gt;The select_for_update method offered by the Django ORM solves the problem of concurrency by returning a queryset that locks all the rows that belong to this queryset until the outermost transaction it is inside gets committed thus preventing data corruption.&lt;/p&gt;

&lt;p&gt;Here is how you can modify the Account model to use select_for_update and lock the account object:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models

from django.contrib.auth.models import User
from django.db import models, transaction

class Account(models.Model):
    balance = models.IntegerField(default=0)
    user = models.ForeignKey(User)

    def get_queryset(self):
        return self.__class__.objects.filter(id=self.id)

    @transaction.atomic()
    def deposit(self, amount):
        obj = self.get_queryset().select_for_update().get()
        obj.balance += amount
        obj.save()

    @transaction.atomic()
    def withdraw(self, amount):
        obj = self.get_queryset().select_for_update().get()
        if amount &amp;gt; obj.balance:
            raise errors.InsufficientFunds()
        obj.balance -= amount
        obj.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To acquire a lock, we need to fetch the object from the database using select_for_update. Operating on the &lt;strong&gt;self&lt;/strong&gt; object will not work since it has already been fetched. This is why the above code has a method defined called &lt;strong&gt;get_queryset&lt;/strong&gt; where we fetch the object that is being operated on at the time of withdrawal/deposit.&lt;/p&gt;

&lt;p&gt;Do keep in mind that for this to work, the database that you are using must support transactions and locks. If you are using SQLite, select_for_update is pretty much useless. My personal recommendation would be to use PostgreSQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-operations-after-introducing-selectforupdate"&gt;
  &lt;/a&gt;
  Database operations after introducing select_for_update
&lt;/h2&gt;

&lt;p&gt;The steps that have been defined in the concurrency problem above will now change to this:&lt;/p&gt;

&lt;p&gt;Step 1: User1 raises request to deposit $100 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;User1 acquires a lock on the account&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Balance is $1000&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: User2 raises request to withdraw $100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;User2 attempts to acquire a lock which fails because the account has already been locked by User1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User2 waits for the lock to be released&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 3: User1 deposits $100 into the account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Balance is $1000 + $100 = $1100&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lock on the account by User1 is released&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User2 acquires the lock on the account soon after.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 4: User2 withdraws $100 from the account&lt;/p&gt;

&lt;p&gt;- Balance is $1100 - $100 = $1000&lt;/p&gt;

&lt;p&gt;- Lock on the account by User2 is released.&lt;/p&gt;

&lt;p&gt;Step 5: Balance is $1000 and the data is free of corruption.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When you run multiple workers of your Django application, you will run into concurrency issues when the same queryset is updated by different processes at the same time.&lt;/p&gt;

&lt;p&gt;To prevent this, use select_for_update inside a transaction block to fetch your queryset so that it is locked until the transaction is completed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sankalpjonna.com/learn-django/managing-concurrency-in-django-using-select-for-update"&gt;Originally posted on my blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
    </item>
    <item>
      <title>The Frontend Hitchhiker's Guide: 3rd Party Code</title>
      <author>Nicholas Mendez</author>
      <pubDate>Sun, 18 Jul 2021 02:27:35 +0000</pubDate>
      <link>https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-3rd-party-code-4fka</link>
      <guid>https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-3rd-party-code-4fka</guid>
      <description>&lt;h1&gt;
  &lt;a href="#theres-a-package-for-that"&gt;
  &lt;/a&gt;
  There's a package for that
&lt;/h1&gt;

&lt;p&gt;You don't need to build your entire web app from scratch. There are many libraries, tools, APIs and SDKs to help you along the way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3rd-party-resources"&gt;
  &lt;/a&gt;
  3rd Party Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Libraries

&lt;ul&gt;
&lt;li&gt;&lt;a href="#visualization-libraries"&gt;Visualization Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utility-libraries"&gt;Utility Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#graphics-frameworks"&gt;Graphics Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-systems"&gt;Template Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Tooling

&lt;ul&gt;
&lt;li&gt;&lt;a href="#static-site-generators"&gt;Static Site Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#task-runners"&gt;Task Runners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integrations

&lt;ul&gt;
&lt;li&gt;&lt;a href="#rest-apis"&gt;REST APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sdks"&gt;SDKs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h2&gt;

&lt;p&gt;The first stop of this series looked at UI libraries however there are other types of libraries out there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visualization-libraries"&gt;
  &lt;/a&gt;
  Visualization Libraries
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DqH5r9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r97afibuuhwudt0bnq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DqH5r9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r97afibuuhwudt0bnq2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While tables are cool, data visualizations like maps, or charts can often provide more insight and bring more visibility to latent trends. &lt;a href="https://www.highcharts.com/"&gt;Highcharts&lt;/a&gt; and &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; are often the gotos for charts but a newer library like &lt;a href="https://nivo.rocks/"&gt;nvio&lt;/a&gt; can somewhat offer a more stylized look to your charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#utility-libraries"&gt;
  &lt;/a&gt;
  Utility Libraries
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6si1Fvkj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ydw4ji4clmn24sgp846.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6si1Fvkj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ydw4ji4clmn24sgp846.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are libraries that are small and focused on making a specific problem easier for the developer. &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt; can make displaying time based data and perform various operations with it. &lt;a href="https://underscorejs.org/"&gt;Underscore&lt;/a&gt; adds a collection of functional programming primitives to JavaScript if that's your cup of tea. &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt; is similar in providing functions to make working with arrays, numbers objects easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphics-frameworks"&gt;
  &lt;/a&gt;
  Graphics Frameworks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nS8BhwTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5bzdyyx6d2yf85b6j5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nS8BhwTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5bzdyyx6d2yf85b6j5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These technologies allow you render beautiful experiences on the web. Whether it be AR/VR with &lt;a href="https://aframe.io/"&gt;AFrame&lt;/a&gt;, exciting browser games with &lt;a href="https://phaser.io/"&gt;phaser&lt;/a&gt; or everything else with the likes of &lt;a href="https://threejs.org/"&gt;three.js&lt;/a&gt; and &lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt;. These technologies let you tap into the power of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;canvas&lt;/a&gt; and &lt;a href="https://get.webgl.org/"&gt;webGL&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#template-systems"&gt;
  &lt;/a&gt;
  Template Systems
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJ91L-Ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bkidswnehuqrsua5ieh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJ91L-Ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bkidswnehuqrsua5ieh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the days of the earlier UI Libraries &lt;a href="https://en.wikipedia.org/wiki/Web_template_system#Client-side_systems"&gt;template systems&lt;/a&gt; were a often a popular companion. These libraries focused solely on adding data-binding and templating syntax that newer libraries like react offer out of the box. Some popular examples are &lt;a href="https://github.com/janl/mustache.js"&gt;mustache&lt;/a&gt; and &lt;a href="https://handlebarsjs.com/"&gt;handlebars&lt;/a&gt;, though they are more used on the server side in nodejs projects these days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;p&gt;This category is similar to the Build Tools stop in this series. They are command line software that deal how the project is built and deployed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-runners"&gt;
  &lt;/a&gt;
  Task Runners
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgwEc4wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exaa52e5t3qr1uchhzvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgwEc4wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exaa52e5t3qr1uchhzvp.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One can say task runners were the precursor to build tools which was explored in the 4th stop in this series. Task runners let you automate tasks like minification, transpilations, deployment and using other CLI tools. The two most popular task runners are &lt;a href="https://gruntjs.com/"&gt;grunt&lt;/a&gt; and &lt;a href="https://gulpjs.com/"&gt;gulp&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-site-generators"&gt;
  &lt;/a&gt;
  Static Site Generators
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SlVbj0oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh3lxw3m8is041j31370.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SlVbj0oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh3lxw3m8is041j31370.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Static Site Generators (SSGs) are CLI tools which let you focus on writing content of static websites such as blogs. Typically they turn formatted markdown files to fully functional websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; is a modern static site generator written in react. Gatsby is different from other SSGs in that it offers features usually seen in frameworks, like components and integration with rest APIs. &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; is another popular SSG and &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt; sites boast really good performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrations"&gt;
  &lt;/a&gt;
  Integrations
&lt;/h2&gt;

&lt;p&gt;Integrations let you incorporate 3rd party products and services into you app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rest-apis"&gt;
  &lt;/a&gt;
  REST APIs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDny5-iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0no4xcq54kqgpj7l8cwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDny5-iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0no4xcq54kqgpj7l8cwt.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;REST Application Programming Interfaces are web services that your web app can use to provide features. For example the &lt;a href="https://pokeapi.co/"&gt;PokeAPI&lt;/a&gt; let's you create your own pokedex! There are many &lt;a href="https://github.com/public-apis/public-apis"&gt;public APIs&lt;/a&gt; available to power &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sdks"&gt;
  &lt;/a&gt;
  SDKs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmJBRkN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzren79ikfd9460vfc90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmJBRkN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzren79ikfd9460vfc90.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software Development Kits, are a collection of libraries and tooling that let you integrate your code with a service. You can use the &lt;a href="https://developer.twitter.com/en/docs"&gt;Twitter API&lt;/a&gt; to retrieve tweets or use the Firebase SDK to add &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; features to your application.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With that The Frontend Hitchhickers Guide is finally completed. It's my hope that this series helped you better understand the overwhelming frontend ecosystem. &lt;/p&gt;

&lt;p&gt;I would like to offer my heartfelt gratitude to everyone who shared, read and engaged with this series. &lt;br&gt;
The positive feedback went a long way to keep me writing for 8 weeks.&lt;/p&gt;

&lt;p&gt;You can find me on &lt;a href="https://twitter.com/snickdx"&gt;twitter&lt;/a&gt; to find out what I'm writing on next and I intend to share more web tech there from time to time as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9xpqJL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hxthv57v5gtuly9j71s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9xpqJL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hxthv57v5gtuly9j71s.png" alt="hitchhikers (6)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo in Image by &lt;a href="https://pixabay.com/photos/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=691581"&gt;Free-Photos&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=691581"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/dmnsgn/76878ba6903cf15789b712464875cfdc"&gt;Collection of WEB GL Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/node-js-task-runners-are-they-right-for-you-bb29ea30b7fa/"&gt;Task Runners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>gatsby</category>
    </item>
  </channel>
</rss>
