<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Use HarperDB Custom Functions With Your React App.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Wed, 05 Jan 2022 06:08:33 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-to-use-harperdb-custom-functions-with-your-react-app-2c43</link>
      <guid>https://dev.to/tyaga001/how-to-use-harperdb-custom-functions-with-your-react-app-2c43</guid>
      <description>&lt;p&gt;Last week, I got a chance to explore HarperDB - a fast, modern database that allows you to develop full-stack apps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I've developed a ToDo React app with HarperDB Custom Functions. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#harperdb-is-a-distributed-database-focused-on-making-data-management-easy"&gt;
  &lt;/a&gt;
  HarperDB is a distributed database focused on making data management easy.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It supports both SQL and NoSQL queries. &lt;/li&gt;
&lt;li&gt;It also offers to access the database instance directly inside the client-side application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, let's learn about HarperDB and how to build a React app using HarperDB Custom Functions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-harperdb-custom-functions"&gt;
  &lt;/a&gt;
  Let's talk about HarperDB custom functions:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add your own API endpoints to a standalone API server inside HarperDB.&lt;/li&gt;
&lt;li&gt;Use HarperDB Core methods to interact with your data at lightning speed.&lt;/li&gt;
&lt;li&gt;Custom Functions are powered by Fastify, so they’re extremely flexible.&lt;/li&gt;
&lt;li&gt;Manage in HarperDB Studio, or use your own IDE and Version Management System.&lt;/li&gt;
&lt;li&gt;Distribute your Custom Functions to all your HarperDB instances with a single click.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WiN98TEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637214440641/TbI71-efi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WiN98TEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637214440641/TbI71-efi.jpeg" alt="harperDB1.JPG" width="812" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-building"&gt;
  &lt;/a&gt;
  What are we building?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We will create a simple ToDo React App. When we are done, it will look like this when it runs in localhost: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFOvr7zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637675582514/mZq86DzSq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFOvr7zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637675582514/mZq86DzSq.jpeg" alt="7.JPG" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-look-at-how-we-develop-our-todo-react-app"&gt;
  &lt;/a&gt;
  Let's look at how we develop our To-Do React app:
&lt;/h2&gt;

&lt;p&gt;This ToDo app allows a user to create a task that needs to be completed by the user. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-has-2-states"&gt;
  &lt;/a&gt;
  It has 2 states:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Active &lt;/li&gt;
&lt;li&gt;Completed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users can filter the tasks list based on the status of tasks as well. It will also allow the user to edit a task &amp;amp; delete one as well.&lt;/p&gt;

&lt;p&gt;So the main idea is whatever task is created by the user which you can see in the "View All" list, all the tasks will be saved in HarperDB with the help of Custom Functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup-overview"&gt;
  &lt;/a&gt;
  Project setup overview:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/create-react-app"&gt;Create React App&lt;/a&gt; is the best way to start building a new single-page application in React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-app
cd my-app
npm start

Dependencies used:

 "@emotion/react": "^11.5.0",
    "@emotion/styled": "^11.3.0",
    "@mui/icons-material": "^5.0.5",
    "@mui/material": "^5.0.6",
    "@testing-library/jest-dom": "^5.15.0",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^12.8.3",
    "axios": "^0.24.0",
    "classnames": "^2.3.1",
    "history": "^5.1.0",
    "lodash.debounce": "^4.0.8",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^6.0.1",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.1.2"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it just creates a frontend build pipeline for this project, so we can use HarperDB in the backend.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Alternatively, you can clone the  &lt;a href="https://github.com/tyaga001/HarperDB-Custom-Functions"&gt;GitHub repository&lt;/a&gt;  and use the start directory as your project root. It contains the basic project setup that will get you ready. In this project for the CSS you can refer to Tasks.css (src\todo-component\Tasks.css)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-the-react-components-which-are-being-used"&gt;
  &lt;/a&gt;
  Let's talk about the react components which are being used:
&lt;/h2&gt;

&lt;p&gt;This is the folder structure:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUUX7QSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638607477693/N_2e30KLu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUUX7QSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638607477693/N_2e30KLu.jpeg" alt="file.JPG" width="378" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In file structure, we can see that Tasks is the container component where we are managing the application's state, here the app state means the data we are getting from HarperDB using API endpoints, and this data is shared across all child components through props.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-component-tasksjsx"&gt;
  &lt;/a&gt;
  Task component (Tasks.jsx):
&lt;/h3&gt;

&lt;p&gt;Here is the file reference in the project:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;src\todo-component\Tasks.jsx&lt;/p&gt;

&lt;p&gt;This component acts as a container component (which is having a task list &amp;amp; task search as a child component)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect, useCallback, useState, useRef } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import TaskSearch from './task-search-component/TaskSearch';
import './Tasks.css';
import axios from 'axios';
import debounce from '@mui/utils/debounce';
import TaskItem from './task-list-component/TaskList';
import Snackbar from '@mui/material/Snackbar';

export default function Tasks() {
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const [taskList, setTaskList] = useState([]);
  const [filteredList, setFilteredList] = useState([]);
  const [open, setOpen] = useState(false);
  const [msg, setMsg] = useState('')
  const selectedId = useRef();
  useEffect(() =&amp;gt; {
    getFilteredList();
  }, [searchParams, taskList]);

  const setSelectedId = (task) =&amp;gt; {
    selectedId.current = task;
  };
  const saveTask = async (taskName) =&amp;gt; {
    if (taskName.length &amp;gt; 0) {
      try {
        await axios.post(
          'your_url_here',
          { taskTitle: taskName, taskStatus: 'ACTIVE', operation: 'sql' }
        );
        getTasks();
      } catch (ex) {
        showToast();
      }
    }
  };

  const updateTask = async (taskName) =&amp;gt; {
    if (taskName.length &amp;gt; 0) {
      try {
        await axios.put(
          'your_url_here',
          {
            taskTitle: taskName,
            operation: 'sql',
            id: selectedId.current.id,
            taskStatus: selectedId.current.taskStatus,
          }
        );
        getTasks();
      } catch (ex) {
        showToast();
      }
    }
  };

  const doneTask = async (task) =&amp;gt; {
    try {
      await axios.put(
        'your_url_here',
        {
          taskTitle: task.taskTitle,
          operation: 'sql',
          id: task.id,
          taskStatus: task.taskStatus,
        }
      );
      getTasks();
    } catch (ex) {
        showToast();
    }
  };

  const deleteTask = async (task) =&amp;gt; {
    try {
      await axios.delete(
        `your_url_here/${task.id}`
      );
      getTasks();
    } catch (ex) {
        showToast();
    }
  };

  const getFilteredList = () =&amp;gt; {
    if (searchParams.get('filter')) {
      const list = [...taskList];
      setFilteredList(
        list.filter(
          (item) =&amp;gt; item.taskStatus === searchParams.get('filter').toUpperCase()
        )
      );
    } else {
      setFilteredList([...taskList]);
    }
  };

  useEffect(() =&amp;gt; {
    getTasks();
  }, []);

  const getTasks = async () =&amp;gt; {
    try {
    const res = await axios.get(
      'your_url_here'
    );
    console.log(res);
    setTaskList(res.data);
    } catch(ex) {
        showToast();
    }
  };

  const debounceSaveData = useCallback(debounce(saveTask, 500), []);
  const searchHandler = async (taskName) =&amp;gt; {
    debounceSaveData(taskName);
  };

  const showToast = () =&amp;gt; {
    setMsg('Oops. Something went wrong!');
    setOpen(true)
  }

  return (
    &amp;lt;div className="main"&amp;gt;
      &amp;lt;TaskSearch searchHandler={searchHandler} /&amp;gt;
      &amp;lt;ul className="task-filters"&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;a
            href="javascript:void(0)"
            onClick={() =&amp;gt; navigate('/')}
            className={!searchParams.get('filter') ? 'active' : ''}
          &amp;gt;
            View All
          &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;a
            href="javascript:void(0)"
            onClick={() =&amp;gt; navigate('/?filter=active')}
            className={searchParams.get('filter') === 'active' ? 'active' : ''}
          &amp;gt;
            Active
          &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;a
            href="javascript:void(0)"
            onClick={() =&amp;gt; navigate('/?filter=completed')}
            className={
              searchParams.get('filter') === 'completed' ? 'active' : ''
            }
          &amp;gt;
            Completed
          &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
      {filteredList.map((task) =&amp;gt; (
        &amp;lt;TaskItem
          deleteTask={deleteTask}
          doneTask={doneTask}
          getSelectedId={setSelectedId}
          task={task}
          searchComponent={
            &amp;lt;TaskSearch
              searchHandler={updateTask}
              defaultValue={task.taskTitle}
            /&amp;gt;
          }
        /&amp;gt;
      ))}
      &amp;lt;Snackbar
        open={open}
        autoHideDuration={6000}
        onClose={() =&amp;gt; setOpen(false)}
        message={msg}
      /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;your_url_here = you should replace this with your HarperDB endpoint URL. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For an example of the URL, look below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wWsXEef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638689635403/PC0lGCOdh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWsXEef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638689635403/PC0lGCOdh.jpeg" alt="16.JPG" width="369" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-list-tasklistjsx"&gt;
  &lt;/a&gt;
  Task List (TaskList.jsx):
&lt;/h3&gt;

&lt;p&gt;Here is the file reference in the project:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;src\todo-component\task-list-component\TaskList.jsx&lt;/p&gt;

&lt;p&gt;This component is used to render all the list of tasks that we are getting from the HarperDB&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React, { useState } from 'react';
import classNames from 'classnames';
import IconButton from '@mui/material/IconButton';
import DoneIcon from '@mui/icons-material/Done';
import EditIcon from '@mui/icons-material/Edit';
import ClearIcon from '@mui/icons-material/Clear';
import DeleteIcon from '@mui/icons-material/Delete';
import TextField from '@mui/material/TextField';

export default function TaskItem({ task, searchComponent, getSelectedId, doneTask, deleteTask }) {
  const [editing, setEditing] = useState(false);
  const [selectedTask, setSelectedTask] = useState();
  let containerClasses = classNames('task-item', {
    'task-item--completed': task.completed,
    'task-item--editing': editing,
  });

  const updateTask = () =&amp;gt; {
      doneTask({...task, taskStatus: task.taskStatus === 'ACTIVE' ? 'COMPLETED' : 'ACTIVE'});
  }

  const renderTitle = task =&amp;gt; {
    return (
      &amp;lt;div className="task-item__title" tabIndex="0"&amp;gt;
        {task.taskTitle}
      &amp;lt;/div&amp;gt;
    );
  }
  const resetField = () =&amp;gt; {
      setEditing(false);
  }
  const renderTitleInput = task =&amp;gt; {
    return (
    React.cloneElement(searchComponent, {resetField})
    );
  }

  return (
    &amp;lt;div className={containerClasses} tabIndex="0"&amp;gt;
      &amp;lt;div className="cell"&amp;gt;
        &amp;lt;IconButton color={task.taskStatus === 'COMPLETED' ? 'success': 'secondary'} aria-label="delete" onClick={updateTask} className={classNames('btn--icon', 'task-item__button', {
            active: task.completed,
            hide: editing,
          })} &amp;gt;
          &amp;lt;DoneIcon /&amp;gt;
        &amp;lt;/IconButton&amp;gt;
       &amp;lt;/div&amp;gt;

      &amp;lt;div className="cell"&amp;gt;
        {editing ? renderTitleInput(task) : renderTitle(task)}
      &amp;lt;/div&amp;gt;

      &amp;lt;div className="cell"&amp;gt;
      {!editing &amp;amp;&amp;amp; &amp;lt;IconButton onClick={() =&amp;gt; {setEditing(true); getSelectedId(task)}} aria-label="delete" className={classNames('btn--icon', 'task-item__button', {
            hide: editing,
          })} &amp;gt;
          &amp;lt;EditIcon /&amp;gt;
        &amp;lt;/IconButton&amp;gt; }
        {editing &amp;amp;&amp;amp; &amp;lt;IconButton onClick={() =&amp;gt; {setEditing(false); getSelectedId('');}} aria-label="delete" className={classNames('btn--icon', 'task-item__button', {
            hide: editing,
          })} &amp;gt;
          &amp;lt;ClearIcon /&amp;gt;
        &amp;lt;/IconButton&amp;gt; }
        {!editing &amp;amp;&amp;amp; &amp;lt;IconButton onClick={() =&amp;gt; deleteTask(task)} aria-label="delete" className={classNames('btn--icon', 'task-item__button', {
            hide: editing,
          })} &amp;gt;
          &amp;lt;DeleteIcon /&amp;gt;
        &amp;lt;/IconButton&amp;gt; }
       &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#task-search-tasksearchjsx"&gt;
  &lt;/a&gt;
  Task Search (TaskSearch.jsx):
&lt;/h3&gt;

&lt;p&gt;Here is the file reference in the project:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;src\todo-component\task-search-component\TaskSearch.jsx&lt;/p&gt;

&lt;p&gt;This component provides a text box to users where users can enter the name of the task which they need to perform. (Same component we are using while editing a task)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React from 'react';
import TextField from '@mui/material/TextField';

export default function TaskSearch({ searchHandler, defaultValue, resetField }) {
  const handleEnterKey = event =&amp;gt; {
    if(event.keyCode === 13) {
      searchHandler(event.target.value);
      event.target.value = '';
      if(resetField) {
        resetField();
      }
    }
  }

    return (
        &amp;lt;TextField
        id="filled-required"
        variant="standard"
        fullWidth 
        hiddenLabel
        placeholder="What needs to be done?"
        onKeyUp={handleEnterKey}
        defaultValue={defaultValue}
      /&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can find the complete  &lt;a href="https://github.com/tyaga001/HarperDB-Custom-Functions"&gt;source code&lt;/a&gt;  of the ToDo App. &lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the Tasks.js component, you can see we are leveraging Custom Function APIs which allows us to save &amp;amp; edit the data from HarperDB. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STWtNF7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637676549084/uVANY2DKC.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STWtNF7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637676549084/uVANY2DKC.jpeg" alt="8.JPG" width="819" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-develop-an-api-using-harperdb-custom-functions"&gt;
  &lt;/a&gt;
  How we develop an API using HarperDB Custom functions:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#lets-create-the-schema-first"&gt;
  &lt;/a&gt;
  Let's create the schema first:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_UV_uFpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637676793538/ZRzzjaYxV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UV_uFpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637676793538/ZRzzjaYxV.jpeg" alt="10.JPG" width="835" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#created-table"&gt;
  &lt;/a&gt;
  Created table:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6SFZ5y7o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637676932930/_TGhOgLjA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SFZ5y7o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637676932930/_TGhOgLjA.jpeg" alt="11.JPG" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-project"&gt;
  &lt;/a&gt;
  Create a project:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Before creating a project, you need to enable custom functions, once you click on functions you will see a pop up like below: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Md2ZIT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677035806/rxEuYScO-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Md2ZIT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677035806/rxEuYScO-.jpeg" alt="12.JPG" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the green button "enable the custom function" it will look like 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSf6wbmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677085945/iWUbCD6xs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSf6wbmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677085945/iWUbCD6xs.jpeg" alt="13.JPG" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-lets-create-project-todoapi-which-will-look-like"&gt;
  &lt;/a&gt;
  Now let's create project "ToDoApi" which will look like 👇
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvrsOY01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677185567/KpsjvJhXw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvrsOY01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677185567/KpsjvJhXw.jpeg" alt="15.JPG" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under the section "/ToDoApi/routes" we will see one file example.js contains the API endpoints.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-our-own-api-endpoints-in-order-to-"&gt;
  &lt;/a&gt;
  Let's write our own API endpoints in order to :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;create a task&lt;/li&gt;
&lt;li&gt;edit a task &lt;/li&gt;
&lt;li&gt;delete a task&lt;/li&gt;
&lt;li&gt;get task
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#save-task-endpoint"&gt;
  &lt;/a&gt;
  Save Task endpoint:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Which is used to store data in DB&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  server.route({
    url: '/saveTask',
    method: 'POST',
    // preValidation: hdbCore.preValidation,
    handler: (request) =&amp;gt; {
      request.body= {
        operation: 'sql',
        sql: `insert into example_db.tasks (taskTitle, taskStatus) values('${request.body.taskTitle}', '${request.body.taskStatus}')`
      };
      return hdbCore.requestWithoutAuthentication(request);

    },
  });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#edit-task-endpoint"&gt;
  &lt;/a&gt;
  Edit Task endpoint:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This is used to edit an existing record in your DB, we are using the same endpoint as the save task but having a different method type as PUT.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; server.route({
    url: '/saveTask',
    method: 'PUT',
    // preValidation: hdbCore.preValidation,
    handler: (request) =&amp;gt; {
      request.body= {
        operation: 'sql',
        sql: `update example_db.tasks set taskTitle='${request.body.taskTitle}', taskStatus='${request.body.taskStatus}' where id='${request.body.id}'`
      };
      return hdbCore.requestWithoutAuthentication(request);

    },
  });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#delete-a-task-endpoint"&gt;
  &lt;/a&gt;
  Delete a task endpoint:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
    url: '/deleteTask/:id',
    method: 'DELETE',
    // preValidation: hdbCore.preValidation,
    handler: (request) =&amp;gt; {
      request.body= {
        operation: 'sql',
        sql: `delete from example_db.tasks where id='${request.params.id}'`
      };
      return hdbCore.requestWithoutAuthentication(request);

    },
  });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-task-endpoint"&gt;
  &lt;/a&gt;
  Get task endpoint:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// GET, WITH ASYNC THIRD-PARTY AUTH PREVALIDATION
  server.route({
    url: '/tasks',
    method: 'GET',
    // preValidation: (request) =&amp;gt; customValidation(request, logger),
    handler: (request) =&amp;gt; {
      request.body= {
        operation: 'sql',
        sql: 'select * from example_db.tasks'
      };

      /*
       * requestWithoutAuthentication bypasses the standard HarperDB authentication.
       * YOU MUST ADD YOUR OWN preValidation method above, or this method will be available to anyone.
       */
      return hdbCore.requestWithoutAuthentication(request);
    }
  });


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#all-about-helpers-in-custom-functions"&gt;
  &lt;/a&gt;
  All about helpers in Custom Functions:
&lt;/h2&gt;

&lt;p&gt;In this, we can implement our own custom validation using JWT.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_58AnCT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637678020921/eJ5He63MX.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_58AnCT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637678020921/eJ5He63MX.jpeg" alt="helper.JPG" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our, ToDo React app on the UI. &lt;/p&gt;

&lt;p&gt;How to get the endpoint URL to hit on the UI. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ts0xODA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677578551/9RUVG6f0R.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ts0xODA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637677578551/9RUVG6f0R.jpeg" alt="16.JPG" width="369" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-host-a-static-web-ui"&gt;
  &lt;/a&gt;
  You can host a static web UI:
&lt;/h2&gt;

&lt;p&gt;Your project must meet the below details to host your static UI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An index file located at /static/index.html&lt;/li&gt;
&lt;li&gt;Correctly path any other files relative to index.html&lt;/li&gt;
&lt;li&gt;If your app makes use of client-side routing, it must have [project_name]/static as its base (basename for react-router, base for vue-router, etc.):
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Router basename="/dogs/static"&amp;gt;
    &amp;lt;Switch&amp;gt;
        &amp;lt;Route path="/care" component={CarePage} /&amp;gt;
        &amp;lt;Route path="/feeding" component={FeedingPage} /&amp;gt;
    &amp;lt;/Switch&amp;gt;
&amp;lt;/Router&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example can be checked out at &lt;a href="https://harperdb.io/docs/custom-functions/host-a-static-web-ui/"&gt;HarperDB &lt;/a&gt; as well. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-functions-operations"&gt;
  &lt;/a&gt;
  Custom Functions Operations:
&lt;/h2&gt;

&lt;p&gt;There are 9 operations you can do in total: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;custom_functions_status&lt;/li&gt;
&lt;li&gt;get_custom_functions&lt;/li&gt;
&lt;li&gt;get_custom_function&lt;/li&gt;
&lt;li&gt;set_custom_function&lt;/li&gt;
&lt;li&gt;drop_custom_function&lt;/li&gt;
&lt;li&gt;add_custom_function_project&lt;/li&gt;
&lt;li&gt;drop_custom_function_project&lt;/li&gt;
&lt;li&gt;package_custom_function_project&lt;/li&gt;
&lt;li&gt;deploy_custom_function_project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can have a more indepth look at every individual operation in  &lt;a href="https://harperdb.io/docs/harperdb-api/"&gt;HarperDB &lt;/a&gt; docs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restarting-the-server"&gt;
  &lt;/a&gt;
  Restarting the Server:
&lt;/h2&gt;

&lt;p&gt;For any changes you’ve made to your routes, helpers, or projects, you’ll need to restart the Custom Functions server to see them take effect. HarperDB Studio does this automatically whenever you create or delete a project, or add, edit, or edit a route or helper. If you need to start the Custom Functions server yourself, you can use the following operation to do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "operation": "restart_service",
    "service": "custom_functions"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was it for this blog. &lt;/p&gt;

&lt;p&gt;I hope you learned something new today. If you did, please like/share so that it reaches others as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re a regular reader, thank you, you’re a big part of the reason I’ve been able to share my life/career experiences with you.&lt;/p&gt;

&lt;p&gt;Let me know how you will use  &lt;a href="https://harperdb.io/"&gt;HarperDB&lt;/a&gt; to create your next project.&lt;/p&gt;

&lt;p&gt;Follow  &lt;a href="https://twitter.com/harperdbio"&gt;HarperDB&lt;/a&gt; on Twitter for the latest updates. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Connect with me on &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter &lt;/a&gt; *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you like this. I encourage you all to sign up for my newsletter.&lt;/p&gt;

&lt;p&gt;It's free. You can ask me your questions via email.&lt;/p&gt;

&lt;p&gt;Check out old editions here:  &lt;a href="https://www.getrevue.co/profile/AnkurTyagi"&gt;The 2-1-1 Developer Growth Newsletter by Ankur&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Best Design Pattern Courses for Java Programmers</title>
      <author>javinpaul</author>
      <pubDate>Wed, 05 Jan 2022 06:03:27 +0000</pubDate>
      <link>https://dev.to/javinpaul/5-best-java-design-pattern-courses-for-beginners-4dj</link>
      <guid>https://dev.to/javinpaul/5-best-java-design-pattern-courses-for-beginners-4dj</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/software-architecture-in-java-design-development?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tTPWuXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/editorpage/5669828520574976/image/6296864620544000" alt="Spring Framework tutorial: Getting started with Spring" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Java developers, if you want to learn Design patterns in 2022 and looking for the best resources like books, tutorials, and online courses then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared the &lt;a href="https://www.java67.com/2016/10/top-5-object-oriented-analysis-and-design-patterns-book-java.html"&gt;best design pattern books&lt;/a&gt;, &lt;a href="https://www.java67.com/2012/09/top-10-java-design-pattern-interview-question-answer.html"&gt;interview questions&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2018/02/composite-design-pattern-in-java-real.html"&gt; many design pattern tutorials&lt;/a&gt; and in this article, I am going to share the best design pattern courses for Java developers. &lt;/p&gt;

&lt;p&gt;A design pattern is the tried and tested solution of classical software problems which is common during software development. &lt;/p&gt;

&lt;p&gt;Knowing design pattern not only help you to solve those problems quickly but also encouraged you to use tried and tested solution, thus overall improving the quality of the software application you are building.&lt;/p&gt;

&lt;p&gt;By the way, if you are wondering what's the design pattern in Java? It's fairly simple! It's nothing but figuring out the solutions for commonly occurring programming language problems.&lt;/p&gt;

&lt;p&gt;If you're a crazy fan of Java, you could browse the publication -- GOF design pattern (&lt;a href="http://www.amazon.com/Design-Patterns-Object-Oriented-Professional-Computing/dp/0201634988?tag=javamysqlanta-20"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Well, knowing this perfectly, will make you a promising coder! In promotion to this, knowing the design pattern will make you stand out of crowd in interviews, and thereby crack the questions of the interviewer.&lt;/p&gt;

&lt;p&gt;It's also important to learn when to use these design patterns and that's where this nice diagram from &lt;a href="https://www.educative.io?affiliate_id=5073518643380224"&gt;Educative&lt;/a&gt; is really helpful&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/web-application-software-architecture-101?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bq6q_Rhj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-FliyHYR2fYY/Xk3o0f4XOsI/AAAAAAAAdA4/SqBdGXG9rKY5XYtBUAxrZoKe6nBaXi2hACLcBGAsYHQ/s640/Design%252BPatterns%252Band%252Btheir%252Brelationship%252Bfor%252Bprogrammers%252Beducative.jpg" alt="A comprehensive list of Java design patterns" width="582" height="640"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-best-online-courses-to-learn-design-patterns-in-java"&gt;
  &lt;/a&gt;
  5 Best Online courses to learn Design Patterns in Java
&lt;/h2&gt;

&lt;p&gt;Without further fuss, let's look into the 5 promising areas to comprehend Design Pattern In Java.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-java-design-patterns-and-architecture-udemy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-design-patterns-tutorial%2F"&gt;Java Design Patterns and Architecture -- Udemy&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Udemy - an immense networked course provider is ready to gift you a Costless course made by John Purcell.  This free course is comprised of 19 lectures, and seriously the nicest platforms to inaugurate your learning voyage.&lt;/p&gt;

&lt;p&gt;This course applies to newcomers and also intermediate levels. It educates you with ordinary layout structures, the application of these structures, how to build them in your respective system software.&lt;/p&gt;

&lt;p&gt;What you require to know is essential Java knowledge.&lt;/p&gt;

&lt;p&gt;What'll this tutorial course content cover?&lt;/p&gt;

&lt;p&gt;The path is categorized into 3 parts -- Methodology, Structural Patterns, Smaller Scale Patterns.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  History of designing software.&lt;/li&gt;
&lt;li&gt;  Front end &amp;amp; back end development. &lt;/li&gt;
&lt;li&gt;  Model-view-controller (concept &amp;amp; practice). &lt;/li&gt;
&lt;li&gt;  Observer pattern (concept &amp;amp; real-time example). &lt;/li&gt;
&lt;li&gt;  MVC&lt;/li&gt;
&lt;li&gt;  Adapter Pattern&lt;/li&gt;
&lt;li&gt;  Factory Pattern&lt;/li&gt;
&lt;li&gt;  Beans&lt;/li&gt;
&lt;li&gt;  DAO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the light of the evidence, it is crystal clear that this course is one of the best courses to learn design patterns in Java.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this course&lt;/strong&gt; - ** &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-design-patterns-tutorial%2F"&gt;Java Design Patterns and Architecture&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjava-design-patterns-tutorial%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x1zGjzEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-u_hWR46Zh9A/YbU5KHDp03I/AAAAAAAAAH8/dvPGxHkM6TIHMzECJ3OjQEyCcYeNIZiyQCNcBGAsYHQ/w400-h225/1639266598367546-0.png" alt="Top 5 Courses to learn Design Patterns in Java" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-design-patterns-coursera"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fdesign-patterns"&gt;Design Patterns -- Coursera&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Defining how to solve UI issues utilizing the Design patterns in Java, critical codes identification, and the design pattern tenets are not simple. This course will mold you to make this feasible.&lt;/p&gt;

&lt;p&gt;It's assigned by the top University of Alberta, and the instructor is Kenny Wong&lt;/p&gt;

&lt;p&gt;(Associate Professor Computing Science, from the Faculty of Science). You can enroll Free of the cost!&lt;/p&gt;

&lt;p&gt;The period of the course is nearly 15 hours (timing reset according to the learner's convenience) accessible in form of videos, assignments, quizzes are formulated for the intermediate stage learner, and the certificate is obtained when the learner gives money. This course is also part of  **&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fsoftware-design-architecture"&gt;Software Design and Architecture Specialization&lt;/a&gt; **and completing this course will count towards that certification.&lt;/p&gt;

&lt;p&gt;Here are the things you will learn in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Design Pattern - Creational, Structural, and Behavioral Patterns, examples, Composite Pattern, Proxy Pattern, Decorator Pattern, Facade Pattern, Adapter Pattern, assignment.&lt;/li&gt;
&lt;li&gt;  Template Method Pattern, Chain of Responsibility Pattern, State Pattern, Command Pattern, Observer Pattern.&lt;/li&gt;
&lt;li&gt;  tenets of Code Smells, Open/Closed Principle, Composing Objects, Interface Segregation, Dependency Inversion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The course is divided into multiple weeks and in the final week, you'll take assignments, tests, etc. In short, this course covers nearly 95% of the domain's (design pattern in Java) syllabus.&lt;/p&gt;

&lt;p&gt;Here is the link to join his course - &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fdesign-patterns"&gt;Design Patterns -- Coursera&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fdesign-patterns"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HmaN4BKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-XHLK3--Uffg/YbU5JWnEyGI/AAAAAAAAAH4/Mm9ZeeoPOBEMAAv5XmqrxH80SQAIqshxgCNcBGAsYHQ/w400-h210/1639266594630046-1.png" alt="Best Coursera course to learn Design Pattern" width="400" height="210"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-software-design-and-architecture-specialization-coursera"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fsoftware-design-architecture"&gt;Software Design and Architecture Specialization --- Coursera&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Develop your first specialized software using the design pattern in this Free-of-cost course offered to the learners by the University of Alberta, the world's overseeing social research and schooling-motive institute. &lt;/p&gt;

&lt;p&gt;It infuses you with countless techniques which use the tenets of design Patterns to suit a proper Java code writer.&lt;/p&gt;

&lt;p&gt;This arena is subdivided into 4 primary topics, in which, you'll learn how to compare diversified architectural styles by the usage of design pattern, Object-Oriented design, UML, design pattern (covers -- inversion, open-closed, last knowledge, model-view-controller, code smells) with a highlighting project, database-centric, UML carton.&lt;/p&gt;

&lt;p&gt;You'll also learn to identify, sue, and develop interfaces using REST (API design), BPEL, UDDI, WSDL (Web Services Description Language), and SOAP(Subject, Object, Assessment, and Plan) over HTTP.&lt;/p&gt;

&lt;p&gt;Here is the link to join his course - ** &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fsoftware-design-architecture"&gt;Software Design and Architecture Specialization&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fsoftware-design-architecture"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2O8AbZMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-zLNyEHJ2dZw/YbU5IbW-tfI/AAAAAAAAAH0/O82bGm7P29sZRXx0tN6QQZWh4MpQOQQQQCNcBGAsYHQ/w400-h210/1639266590428048-2.png" alt="Best Coursera certification to learn Design Pattern" width="400" height="210"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-building-scalable-java-microservices-with-spring-boot-and-spring-cloud-coursera"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fgoogle-cloud-java-spring"&gt;Building Scalable Java Microservices with Spring Boot and Spring Cloud -- Coursera&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In this open course, you'll understand to develop Java applications. The lesson is developed by Google, hence you'll know to apply for Java programs in Google cloud utilizing the support of spring boot and spring cloud.&lt;/p&gt;

&lt;p&gt;The pedagogy is solidified on the integral database of Google cloud - Cloud SQL. To learn this course effectively, the learner must have the essential insight of Java language, Google cloud, a bit of experience in handling appliances like Gradle and Maven.&lt;/p&gt;

&lt;p&gt;Many of the syllabi it covers are Pub/Sub, uploading, storing &amp;amp; formatting data on the cloud, debugging, and on and on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Link -- **&lt;/strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fgoogle-cloud-java-spring"&gt;Building Scalable Java Microservices with Spring Boot&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lh3.googleusercontent.com/-bffLCkWba6g/YbU5HUDH_xI/AAAAAAAAAHw/rEmtdKG0AzkACgGl24Q_Pzl6hSHNDkiKwCNcBGAsYHQ/s1600/1639266585769362-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URYH_Y8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-bffLCkWba6g/YbU5HUDH_xI/AAAAAAAAAHw/rEmtdKG0AzkACgGl24Q_Pzl6hSHNDkiKwCNcBGAsYHQ/w400-h210/1639266585769362-3.png" alt="Best Microservice course to learn Design Pattern" width="400" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, instead of joining these courses and specialization individually, you can also join the &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;Coursera Plus&lt;/a&gt;&lt;/strong&gt;, a subscription plan from Coursera which gives you unlimited access to their most popular courses, specialization, professional certificate, and guided projects.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-design-patterns-in-java-pluralsight"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpaths%2Fdesign-patterns-in-java"&gt;Design Patterns in Java -- Pluralsight&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The entire passage of the course will help in boosting your Java skills and strengthening your coding ability. Though it is a paid course, it is worth enrolling in it! Why? If you're a fresher to design patterns, this course path will encourage you in understanding all fundamentals you need to proceed further.&lt;/p&gt;

&lt;p&gt;The path is subdivided into 4 courses and IQ exercises to examine your observation of the lessons.&lt;/p&gt;

&lt;p&gt;This course has a staked pack of design pattern topics such as Creational pattern - the creation of patterns (incorporating basics of the factory method, prototype pattern, abstract, builder, object pool pattern), behavioral pattern - object's interaction (command, template, visitor, null object pattern, iterator pattern), structural pattern - how objects are identified &amp;amp; structured (flyweight, bridge, adaptor, decorator Pattern) expending Java 8.&lt;/p&gt;

&lt;p&gt;The mentors Jose Paumard and Bryan Hansen, the well-experienced teachers enable you to understand the theories with no difficulties. Jose Paumard's teachings are highly relatable with the real-time application, while Bryan Hansen's teachings grab the attention of the learners.&lt;/p&gt;

&lt;p&gt;In short, this path has online courses that cover every nook and corner of the domain of Java's design pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the Course Link to learn more -- **&lt;/strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpaths%2Fdesign-patterns-in-java"&gt;Design Patterns in Java&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpaths%2Fdesign-patterns-in-java"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRCGu0ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-mj3AnJUjHf0/YdEtHHmJRkI/AAAAAAAAqtw/MQkqlXuxGLAFO6VarbrWxLYqfq1n2lyRQCNcBGAsYHQ/design-patterns-java-structural-v3.jpg" alt="best pluralsight course to learn design patterns" width="512" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, you would need a Pluralsight membership to join this course which costs around $29 per month or $299 per year (14% discount). &lt;/p&gt;

&lt;p&gt;I highly recommend this subscription to all programmers as it provides instant access to more than 7000+ online courses to learn any tech skill. Alternatively, you can also use their &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpricing%2Ffree-trial"&gt;10-day-free-pass&lt;/a&gt;&lt;/strong&gt; to watch this course for FREE.&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;best design pattern courses for Java developers in 2022.&lt;/strong&gt; I hope this article will assist you in finding a suitable course for learning how to design patterns using Java. &lt;/p&gt;

&lt;p&gt;Not only patterns are good exercises to practice loop statements but, also help in job interviews. If you like this article please share it with your friends &amp;amp; colleagues.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Best Online Courses for Java Developers&lt;/strong&gt; you may like to explore&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html#axzz6JJFPbsyP"&gt;Top 5 Courses to Learn Microservices with Spring Boot&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/top-5-online-courses-to-learn-web-development.html#axzz57wed1PWd"&gt;5 Courses to Learn Web Development in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/06/top-6-spring-framework-online-courses-Java-programmers.html"&gt;Top 5 Courses to learn Spring in Depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd"&gt;10 Advanced Spring Boot Courses for Java developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/04/top-5-spring-cloud-courses-for-java.html"&gt;Top 5 Courses to learn Spring Cloud for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/5-courses-to-learn-shell-scripting-in-linux.html"&gt;5 Courses to learn Shell Scripting in Linux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/top-5-java-design-pattern-courses-for-developers.html"&gt;Top 5 Java design patterns courses for experienced Java devs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-microservices-in-java-and-spring-framework-e9fed1ba804d"&gt;Top 7 Courses to learn Microservices in Java&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html"&gt;5 Free Spring  Framework Courses for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-python-for-web-development-in-2020-best-of-lot-efe11fb6d212"&gt;10 Courses to become full-stack Python Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/10-courses-to-prepare-for-programming-job-interviews.html"&gt;10 courses for Programming/Coding Job Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2017/11/top-5-free-java-courses-for-beginners.html"&gt;5 Online Courses to learn Core Java for Free&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-15-java-and-spring-framework-courses-from-udemy-best-of-lot-d7b965b62a9f"&gt;15 Java and Spring Courses from Udemy &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/my-favorite-udemy-online-courses-for-programmers-and-software-engineers-f9d941dd0035"&gt;10 Best Udemy Courses for Programmers and Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-online-courses-to-become-a-fullstack-web-developer-in-2020-d608a6b63232"&gt;10 Courses to become full-stack JavaScript Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/6-best-dynamic-programming-courses-for-coding-interviews-14744060923c"&gt;6 Best Courses to learn Dynamic Programming for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these best design pattern online courses useful then please share them with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S.&lt;/strong&gt; - If you are serious about learning design patterns and improving your coding skill but looking for a free course to start with then you can also check out this &lt;strong&gt;&lt;a href="http://bit.ly/java-design-patterns-tutorial"&gt;Java Design Patterns and Architecture course&lt;/a&gt;&lt;/strong&gt; from Udemy. This online course is completely free and you just need a free Udemy account to join this course.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>coding</category>
      <category>development</category>
    </item>
    <item>
      <title>Ultimate List Of Javascript Learning Resources [Free]</title>
      <author>Chetan Atrawalkar</author>
      <pubDate>Wed, 05 Jan 2022 05:52:11 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/ultimate-list-of-javascript-learning-resources-free-37c2</link>
      <guid>https://dev.to/chetan_atrawalkar/ultimate-list-of-javascript-learning-resources-free-37c2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-javascript-is-and-why-you-should-learn-it"&gt;
  &lt;/a&gt;
  What JavaScript Is And Why You Should Learn It
&lt;/h3&gt;

&lt;p&gt;In simple terms, JavaScript is a scripting or programming language used to make a website interactive. It allows you to implement complex features on web pages. These features could be timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, modals, etc. JavaScript isn’t only used to create websites. It can also be used to build browser-based games and, with the help of certain frameworks, mobile apps for different operating systems.&lt;/p&gt;

&lt;p&gt;If you want to get into web development, or are already into web development, and want to succeed in your career, then learning JavaScript is a required skill for you. Aside from its beginner-friendliness, JavaScript is the most popular programming language, which means that it’ll be relevant in years to come. With more and more businesses moving online, demand for JavaScript developers has been rocketing. The best time to learn JavaScript was yesterday, the next best time is now, so let’s get started.&lt;/p&gt;

&lt;p&gt;In this article, I have put together a variety of free resources that you can easily access to help you learn the JavaScript basics to advanced. From courses and videos, to written guides and blogs, there is something here for everyone. Enjoy....&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ultimate-list-of-javascript-learning-resources-free"&gt;
  &lt;/a&gt;
  Ultimate List Of Javascript Learning Resources [Free].
&lt;/h3&gt;

&lt;p&gt;Let’s take a look at some awesome resources we can all learn from now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#websites"&gt;
  &lt;/a&gt;
  🌐 Websites
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-tutorialrepublic"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.tutorialrepublic.com/"&gt;TutorialRepublic&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-javascriptinfo"&gt;
  &lt;/a&gt;
  - &lt;a href="https://javascript.info/"&gt;Javascript.info&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-html-dog"&gt;
  &lt;/a&gt;
  - &lt;a href="https://htmldog.com/"&gt;HTML Dog&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-freecodecamp"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-the-odin-project"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.theodinproject.com/"&gt;The Odin Project&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-w3schools"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-javatpoint"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.javatpoint.com/"&gt;JavatPoint&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-javascript-notes-amp-reference-by-wesbos"&gt;
  &lt;/a&gt;
  - &lt;a href="https://wesbos.com/javascript"&gt;JavaScript Notes &amp;amp; Reference (By Wesbos)&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-study-tonight"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.studytonight.com/"&gt;Study Tonight&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-tutorials-point"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.tutorialspoint.com/index.htm"&gt;Tutorials Point&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-devdocsio"&gt;
  &lt;/a&gt;
  - &lt;a href="https://devdocs.io/"&gt;Devdocs.io&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-mdn-web-docs"&gt;
  &lt;/a&gt;
  - &lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Web Docs&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-geeks-for-geeks"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.geeksforgeeks.org/"&gt;Geeks For Geeks&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-sololearn"&gt;
  &lt;/a&gt;
  - &lt;a href="https://www.sololearn.com/home"&gt;Sololearn&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#youtube-channels"&gt;
  &lt;/a&gt;
  📺 YouTube Channels
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-freecodecamporg"&gt;
  &lt;/a&gt;
  - FreeCodeCamp.Org
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-javascript-mastery"&gt;
  &lt;/a&gt;
  - JavaScript Mastery
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-florin-pop"&gt;
  &lt;/a&gt;
  - Florin Pop
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-hitesh-choudhary"&gt;
  &lt;/a&gt;
  - Hitesh Choudhary
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-telusko"&gt;
  &lt;/a&gt;
  - Telusko
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-clever-programmer"&gt;
  &lt;/a&gt;
  - Clever Programmer
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-akshay-saini"&gt;
  &lt;/a&gt;
  - Akshay Saini
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-wes-bos"&gt;
  &lt;/a&gt;
  - Wes Bos
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-codewithharry"&gt;
  &lt;/a&gt;
  - CodeWithHarry
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-academind"&gt;
  &lt;/a&gt;
  - Academind
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-traversy-media"&gt;
  &lt;/a&gt;
  - Traversy Media
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-the-net-ninja"&gt;
  &lt;/a&gt;
  - The Net Ninja
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-web-dev-simplified"&gt;
  &lt;/a&gt;
  - Web Dev Simplified
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-dcode"&gt;
  &lt;/a&gt;
  - Dcode
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-learnwebcode"&gt;
  &lt;/a&gt;
  - LearnWebCode
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-dev-ed"&gt;
  &lt;/a&gt;
  - Dev Ed
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-thapa-technical"&gt;
  &lt;/a&gt;
  - Thapa Technical
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#-yahoo-baba"&gt;
  &lt;/a&gt;
  - Yahoo Baba
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#ebooks"&gt;
  &lt;/a&gt;
  📚 E-Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Eloquent Javascript&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You Don't Know JS Yet Series&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript: The Definitive Guide&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript: The Good Parts&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript And JQuery&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Speaking JavaScript&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript For Impatient Programmers&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Effective JavaScript&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript In Easy Steps&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn JavaScript Visually&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The list in this article is not exhaustive, but it covers some of the best resources to learn JavaScript. By using these resources, you can get to a pretty advanced level, and even get a job offer. For the best results, try to mix them because you can learn something from all of them.&lt;/p&gt;

&lt;p&gt;And the best thing: they are entirely free. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I've also a Instagram channel the link &lt;a href="https://www.instagram.com/codev_land/"&gt;here&lt;/a&gt; for amazing web development resources as well source code.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>5 mistakes most dev's do when starting out on Linux!</title>
      <author>Nomadev💻🔱</author>
      <pubDate>Wed, 05 Jan 2022 05:42:22 +0000</pubDate>
      <link>https://dev.to/thenomadevel/5-mistakes-most-devs-do-when-starting-out-on-linux-4de5</link>
      <guid>https://dev.to/thenomadevel/5-mistakes-most-devs-do-when-starting-out-on-linux-4de5</guid>
      <description>&lt;p&gt;Hello Beautiful People, Nomadev is back with another blog in this new year. I hope the new year will make your life brighter, I have all the good wishes for you. Thanks for being such constant supporters.&lt;br&gt;
Today we are going to see a bunch of mistakes that Linux beginner makes when they first move to Linux. So let's start with our topic&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cm1ku6eJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278002933/dAVXiTDGn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cm1ku6eJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278002933/dAVXiTDGn.gif" alt="start.gif" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-thinking-linux-is-windowsmacos"&gt;
  &lt;/a&gt;
  1. Thinking Linux is Windows/macOS
&lt;/h2&gt;

&lt;p&gt;Linux can do almost all the things that a mac or windows system can do, that's absolutely correct but it does the stuff not in exact same way that you are habitual of doing, for example, drivers on Linux, there is virtually no driver installation apart from the proprietary NVIDIA drivers either your devices drivers are in the Linux kernel and it's supported out of the box or the drivers are not in there and chances are it won't get supported. You can compile some third-party drivers for a few very limited sets of peripherals but generally, your drivers are in the kernel you get newer drivers when you update the kernel and that's the file system will be different and the location of files will also, be different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2M3gXeAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278304346/6uVyY5Wk_a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2M3gXeAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278304346/6uVyY5Wk_a.png" alt="lin.png" width="440" height="330"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#2-getting-hung-up-on-distributions"&gt;
  &lt;/a&gt;
  2. Getting Hung up on distributions
&lt;/h2&gt;

&lt;p&gt;Distribution is basically just a way to package the Linux kernel to some system tools. A graphical desktop manages some drivers basically, a few packages and that's what users generally think when they see. A distro is a look that retains the look and feels of this distribution and what they really want is something that looks like that not specifically the distro itself.&lt;br&gt;
Beginners will tend to install or gravitate towards a specific distribution because of the way it looks and feels. They tend to forget or not know that you can replicate the look and feel on virtually any other distribution Linux is customizable. You can grab the theme and the icons and do that exact look somewhere else what users should really&lt;br&gt;
look for is desktop environments, not distributions when you're a beginner you need to look at a distro that you like you like the way it looks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5I8I5CHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278957203/yv5EXUwaS.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5I8I5CHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278957203/yv5EXUwaS.jpeg" alt="distros.jpg" width="770" height="493"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#3-getting-stuck-on-the-default"&gt;
  &lt;/a&gt;
  3. Getting stuck on the default
&lt;/h2&gt;

&lt;p&gt;I often get messages on Twitter telling me oh I used to use this distro or I used to use this desktop but then I couldn't do this and so I moved to another distro entirely like seriously, I had users telling me that they moved distributions because the close button on the windows was on the left instead of on the right seriously LOL and that all comes from the fact that people are used to generally aren't very customizable out of the box you can tweak a few things in mac os or on windows but that's &lt;strong&gt;very very&lt;/strong&gt; limited or you could use third party tools and break your system that's not the case on Linux here you can virtually tweak or change anything without even changing desktop environments.&lt;br&gt;
You have extensions and gnome tweaks and you can really make this thing your own users coming from windows or mac os generally expect things to stay the way they are out of the box and so if something doesn't work for them they will just move house completely on Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L3iBIA-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641279076970/F4EN5foVg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3iBIA-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641279076970/F4EN5foVg.jpeg" alt="customer.jpg" width="880" height="555"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#4-expecting-previous-software-to-work"&gt;
  &lt;/a&gt;
  4. Expecting Previous software to work
&lt;/h2&gt;

&lt;p&gt;The fourth mistake Linux beginners make is expecting all of their programs to just work on Linux. Linux doesn't run Windows programs or mac programs you wouldn't expect windows programs on a mac, you wouldn't expect mac programs on windows you can't expect windows or mac programs.&lt;br&gt;
On Linux, some of them can work. if you're a professional and if most&lt;br&gt;
if not all of your workflow depends on a specific application you need to look it up beforehand check if it runs on Linux and if it has the whole range of functionality that you would expect if you're an individual and you can learn new alternatives expect to waste some time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Tysu4Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641279117923/bhfWHBVxA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Tysu4Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641279117923/bhfWHBVxA.jpeg" alt="m1.jpg" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#5-following-cli-tutorials-blindly"&gt;
  &lt;/a&gt;
  5. Following CLI tutorials blindly
&lt;/h2&gt;

&lt;p&gt;The fifth mistake Linux beginners make is generally following command line tutorials online completely blindly most tutorials for Linux are written using command line commands and that's because for the author it's way easier than trying to screengrab a capture of every single desktop environment. They are trying to explain how to do things graphically because generally you can do them graphically but it's way more complex than just typing a command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkYYJe1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641279326597/PUYa33kdQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkYYJe1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641279326597/PUYa33kdQ.png" alt="indian.png" width="500" height="399"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope you liked it, comment down which mistake you have done in the past&lt;br&gt;
 For other such information, make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; and here also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/thenomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oXBZZGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638859846607/CmXZ9RBvb.jpeg" alt="Twitter.jpg" width="880" height="418"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you want to appreciate my work you can  &lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;buy me a coffee&lt;/a&gt;, &lt;strong&gt;Your appreciation is my motivation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Vno0upf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637869195331/r4SfPP57h.jpeg" alt="coffee.jfif" width="880" height="441"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;That's my time dev's, see you next time, Happy New Year &amp;amp; Happy Coding&lt;/p&gt;

</description>
      <category>linux</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding and Crafting HTTP Middlewares in Go</title>
      <author>MacBobby Chibuzor</author>
      <pubDate>Wed, 05 Jan 2022 05:06:02 +0000</pubDate>
      <link>https://dev.to/theghostmac/understanding-and-crafting-http-middlewares-in-go-3183</link>
      <guid>https://dev.to/theghostmac/understanding-and-crafting-http-middlewares-in-go-3183</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;When communication is needed between a client and a server running on different computers, a middleware is implemented.&lt;br&gt;
In this article, the reader will be introduced to Middlewares, their use cases, and how they are crafted in the Go Programming Language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-http-middlewares"&gt;
  &lt;/a&gt;
  What Are HTTP Middlewares?
&lt;/h2&gt;

&lt;p&gt;To better understand what HTTP Middlewares are, some underlying concepts must be explained.&lt;br&gt;
Assuming a programmer wants two computers to communicate, where one would provide the other with a resource or service. The programmer would quickly build a client/server system to make this happen.&lt;br&gt;
The server waits for the client to request for a resource or service, then forwards the requested resource to the client in response. The requested resource or service may be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication—verifying that the client is who it claims to be&lt;/li&gt;
&lt;li&gt;Authorization—determining whether the given client is permitted to access any of the services the server supplies&lt;/li&gt;
&lt;li&gt;Providing services&lt;/li&gt;
&lt;li&gt;Data security—guaranteeing that a client is not able to access data that the client is not permitted to access, preventing data from being stolen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Servers are built to be stateless or stateful. Stateless servers do not concern themselves with the status of client communication, while stateful servers do. &lt;/p&gt;

&lt;p&gt;Middleware is a software entity that hooks one software or enterprise application to another, forming a distributed system. An HTTP request is sent to an API server, which returns an HTTP response to the client. &lt;/p&gt;

&lt;p&gt;Middlewares have a request receiver function to process requests before they reach the handler function. It then processes the handler function, before processing a response and sending it out to the client.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#middleware-use-cases"&gt;
  &lt;/a&gt;
  Middleware Use Cases
&lt;/h2&gt;

&lt;p&gt;The most common use cases are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loggers for logging each and every request hitting the REST API &lt;/li&gt;
&lt;li&gt;Validation of user session, and keeping the communication alive&lt;/li&gt;
&lt;li&gt;User authentication&lt;/li&gt;
&lt;li&gt;Writing custom logic to scrape request data&lt;/li&gt;
&lt;li&gt;Attach properties to responses while serving the client&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#middleware-handlers"&gt;
  &lt;/a&gt;
  Middleware Handlers
&lt;/h2&gt;

&lt;p&gt;In Go, a middleware handler is an &lt;code&gt;http.Handler&lt;/code&gt; that wraps another &lt;code&gt;http.Handler&lt;/code&gt; to do some pre- and/or post-processing of the request. It's called "middleware" because it sits in the middle between the Go web server and the actual handler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLIxNh0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641358750607/eI3DAYdOz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLIxNh0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641358750607/eI3DAYdOz.png" alt="flow.png" width="880" height="178"&gt;&lt;/a&gt;&lt;br&gt;
A basic middleware handler is written below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; 
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing middleware before request phase!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c"&gt;// Pass control back to the handler&lt;/span&gt;
         &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing middleware after response phase!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;mainLogic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c"&gt;// Business logic goes here&lt;/span&gt;
     &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing mainHandler..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c"&gt;// HandlerFunc returns a HTTP Handler&lt;/span&gt;
     &lt;span class="n"&gt;mainLogicHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mainLogic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mainLogicHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the code above in the terminal gives the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run middleware.go

Executing middleware before request phase!
Executing mainHandler...
Executing middleware after response phase!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logging-middleware-handler"&gt;
  &lt;/a&gt;
  Logging Middleware Handler
&lt;/h2&gt;

&lt;p&gt;To explain how a logging middleware handler works in example use cases, we will build one to execute some functions.&lt;br&gt;
This example creates two middleware handlers: &lt;code&gt;middlewareGreetingsHandler&lt;/code&gt; and &lt;code&gt;middlewareTimeHandler&lt;/code&gt;. The Gorilla Mux router has a &lt;code&gt;HandleFunc( )&lt;/code&gt; method for handling the middleware functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
    "log"
    "net/http"
    "os"
    "time"
)

func middlewareGreetingsHandler(w http.ResponseWriter, r *http.Request) {
    w.Write([]byte("Happy New Year, 2022!"))
}

func middlewareTimeHandler(w http.ResponseWriter, r *http.Request) {
    curTime := time.Now().Format(time.Kitchen)
    w.Write([]byte(fmt.Sprintf("the current time is %v", curTime)))
}

func main() {
    addr := os.Getenv("ADDR")

    mux := http.NewServeMux()
    mux.HandleFunc("/v1/greetings", middlewareHelloHandler)
    mux.HandleFunc("/v1/time", middlewareTimeHandler)

    log.Printf("server is listening at %s", addr)
    log.Fatal(http.ListenAndServe(addr, mux))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run this server, set the ADDR environment variable to a free port, and use go run main.go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localhost:8080
go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the server is live, visit &lt;a href="http://localhost:8080/v1/greetings"&gt;http://localhost:8080/v1/greetings&lt;/a&gt; in your browser to see the &lt;code&gt;middlewareGreetingsHandler&lt;/code&gt; response, and &lt;a href="http://localhost:8080/v1/time"&gt;http://localhost:8080/v1/time&lt;/a&gt; to see the &lt;code&gt;middlewareTimeHandler&lt;/code&gt; response. &lt;br&gt;
With this achieved, creating the logging middleware to log all requests made to this server, list the request method, resource path, and how long it took to handle, comes next.&lt;br&gt;
To do so, we will initialize a new struct that implements the &lt;code&gt;ServeHTTP()&lt;/code&gt; method of the &lt;code&gt;http.Handler&lt;/code&gt; interface. The struct will have a field to track the real &lt;code&gt;http.Handler&lt;/code&gt; for process calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Create a request logging middleware handler called Logger
type Logger struct {
    handler http.Handler
}

//ServeHTTP handles the request by passing it to the real handler and logging the request details
func (l *Logger) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    start := time.Now()
    l.handler.ServeHTTP(w, r)
    log.Printf("%s %s %v", r.Method, r.URL.Path, time.Since(start))
}

//NewLogger constructs a new Logger middleware handler
func NewLogger(handlerToWrap http.Handler) *Logger {
    return &amp;amp;Logger{handlerToWrap}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;NewLogger()&lt;/code&gt; takes an &lt;code&gt;http.Handler&lt;/code&gt; to wrap. It then returns a new &lt;code&gt;Logger&lt;/code&gt; instance wrapped around it. Since an &lt;code&gt;http.ServeMux&lt;/code&gt; satisfies the &lt;code&gt;http.Handler&lt;/code&gt; interface, it is possible to wrap an entire mux with the logger middleware. Further, since &lt;code&gt;Logger&lt;/code&gt; implements the &lt;code&gt;ServeHTTP()&lt;/code&gt; method, it also satisfies the &lt;code&gt;http.Handler&lt;/code&gt; interface, so it can be passed to the &lt;code&gt;http.ListenAndServe()&lt;/code&gt; function instead of the mux wrapped.&lt;br&gt;
Finally, change the &lt;code&gt;main()&lt;/code&gt; function to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func main() {
    addr := os.Getenv("ADDR")

    mux := http.NewServeMux()
    mux.HandleFunc("/v1/greetings", middlewareGreetingsHandler)
    mux.HandleFunc("/v1/time", middlewareTimeHandler)
    //wrap entire mux with logger middleware
    wrappedMux := NewLogger(mux)

    log.Printf("server is listening at %s", addr)
    //use wrappedMux instead of mux as root handler
    log.Fatal(http.ListenAndServe(addr, wrappedMux))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After starting the server and requesting for the APIs again, all requests will be logged to the terminal, despite the resource path requested.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-gorillas-raw-handlers-endraw-middleware-for-logging"&gt;
  &lt;/a&gt;
  Using Gorilla's &lt;code&gt;Handlers&lt;/code&gt; middleware for Logging
&lt;/h2&gt;

&lt;p&gt;The Gorilla Mux router has a &lt;code&gt;Handlers&lt;/code&gt; package that provides various kinds of middleware for common tasks including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;LoggingHandler&lt;/code&gt;: For logging in Apache Common Log Format &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CompressionHandler&lt;/code&gt;: For zipping the responses &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RecoveryHandler&lt;/code&gt;: For recovering from unexpected panics &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below, we use the &lt;code&gt;LoggingHandler&lt;/code&gt; to perform API-wide logging. &lt;br&gt;
First, install this library using &lt;code&gt;go get&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get &lt;span class="s2"&gt;"github.com/gorilla/handlers"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, import and use it in a go file &lt;code&gt;loggingMiddleware.go&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main 
import (
    "github.com/gorilla/handlers"
    "github.com/gorilla/mux"


    "log"
    "os"
    "net/http"
)

func mainLogic(w http.ResponseWriter, r *http.Request) {
     log.Println("Processing request!")
     w.Write([]byte("OK"))
     log.Println("Finished processing request")
 } 

func main() {
     r := mux.NewRouter()
     r.HandleFunc("/", mainLogic)     loggedRouter := handlers.LoggingHandler(os.Stdout, r)
     http.ListenAndServe(":8080", loggedRouter)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run loggingMiddleware.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigating to &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; in the browser will show the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2022/01/05 10:51:44 Processing request!
2022/01/01 10:51:44 Finished processing request
127.0.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;05/January/2022:10:51:44 +0530] &lt;span class="s2"&gt;"GET / HTTP/1.1"&lt;/span&gt; 
200 2 127.0.0.1 - - &lt;span class="o"&gt;[&lt;/span&gt;05/January/2017:10:51:44 +0530] &lt;span class="s2"&gt;"GET /favicon.ico HTTP/1.1"&lt;/span&gt; 404 19
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example introduces the use of Gorilla Mux &lt;code&gt;Handlers&lt;/code&gt; package and nothing more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, the reader is introduced to Middlewares. A logging middleware was built from scratch for easy understanding. Next, a use case was implemented in an API. Afterwards, a simpler solution to crafting Middlewares in Go (i.e. the Gorilla Mux Handlers) was introduced and implemented in an example.&lt;br&gt;
In a future article, Crafting RPC Servers and Clients in Go will be explained.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-name-is-macbobby-chibuzor-and-i-am-a-contract-technical-writer-for-wevolvercom-and-reachext-k-k-i-have-over-7-years-experience-in-writing-commercially-with-2-years-in-software-i-write-about-software-development-security-ml-iot-and-more-recently-blockchain-leave-me-a-message-if-you-need-my-services-theghostmacgmailcom"&gt;
  &lt;/a&gt;
  My name is MacBobby Chibuzor and I am a Contract Technical Writer for Wevolver.com, and ReachExt K. K. I have over 7 years experience in writing commercially, with 2 years in Software. I write about Software Development, Security, ML, IoT, and more recently, Blockchain. Leave me a message if you need my services: &lt;a href="mailto:theghostmac@gmail.com"&gt;theghostmac@gmail.com&lt;/a&gt;.
&lt;/h2&gt;

</description>
      <category>webdev</category>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Unique APIs to use in 2022</title>
      <author>SnowBit</author>
      <pubDate>Wed, 05 Jan 2022 05:02:30 +0000</pubDate>
      <link>https://dev.to/snowbit/unique-apis-to-use-in-2022-2p6o</link>
      <guid>https://dev.to/snowbit/unique-apis-to-use-in-2022-2p6o</guid>
      <description>&lt;p&gt;You have used APIs... But today I have a great list of unique APIs you can use in 2022&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imgflip"&gt;
  &lt;/a&gt;
  Imgflip
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imgflip.com/api"&gt;https://imgflip.com/api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gets data of popular meme templates&lt;/li&gt;
&lt;li&gt;API key required &lt;strong&gt;No&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;CORS &lt;strong&gt;No&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nasa"&gt;
  &lt;/a&gt;
  NASA
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://api.nasa.gov/"&gt;https://api.nasa.gov/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get NASA Data including imagery&lt;/li&gt;
&lt;li&gt;API key required &lt;strong&gt;Yes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;CORS &lt;strong&gt;No&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#international-space-station-location"&gt;
  &lt;/a&gt;
  International Space Station Location
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://open-notify.org/Open-Notify-API/ISS-Location-Now/"&gt;http://open-notify.org/Open-Notify-API/ISS-Location-Now/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get real-time location of ISS&lt;/li&gt;
&lt;li&gt;API key required &lt;strong&gt;No&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;CORS &lt;strong&gt;unknown&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-york-times"&gt;
  &lt;/a&gt;
  New York Times
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.nytimes.com/"&gt;https://developer.nytimes.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get news data from NYTimes &lt;/li&gt;
&lt;li&gt;API key required &lt;strong&gt;Yes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;CORS &lt;strong&gt;No&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ipstack"&gt;
  &lt;/a&gt;
  IPStack
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ipstack.com/"&gt;https://ipstack.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get IP and GEO Location Data&lt;/li&gt;
&lt;li&gt;API key required &lt;strong&gt;Yes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;CORS &lt;strong&gt;unknown&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#openweathermap"&gt;
  &lt;/a&gt;
  OpenWeatherMap
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openweathermap.org/api"&gt;https://openweathermap.org/api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get Weather&lt;/li&gt;
&lt;li&gt;API key required &lt;strong&gt;Yes&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;CORS &lt;strong&gt;No&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#eva-email-verification"&gt;
  &lt;/a&gt;
  EVA | Email Verification
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eva.pingutil.com/"&gt;https://eva.pingutil.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Verify fake/disposable emails &lt;/li&gt;
&lt;li&gt;API Key required - &lt;strong&gt;No&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;CORS &lt;strong&gt;unknown&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subscribe on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Build a Video Conference App from Scratch using WebRTC,Websocket,PHP +JS Day 0</title>
      <author>ben pobi</author>
      <pubDate>Wed, 05 Jan 2022 04:37:14 +0000</pubDate>
      <link>https://dev.to/benpobi/build-a-video-conference-app-from-scratch-using-webrtcwebsocketphp-js-10l6</link>
      <guid>https://dev.to/benpobi/build-a-video-conference-app-from-scratch-using-webrtcwebsocketphp-js-10l6</guid>
      <description>&lt;p&gt;In this video,I am going to walk you through what we are going to create.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8IKjdnZRPWM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video we'll cover the download of vscode and xamp&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ziMzNq6cQlo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video we'll cover the  installation of composer&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cpgg0OnF7-k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hi, welcome to the course Build a Video Conference App from Scratch using WebRTC, PHP +JS.&lt;br&gt;
Webrtc and Websocket is combination of powerful technology where you will able to transfer data in real time with low latency. And thats why its been considering the best technology to build video conferencing app. So If you are webrtc enthusiastic, want to build web conferencing website also want to learn websocket.&lt;/p&gt;

&lt;p&gt;It doesn't matter if you're a beginner or an experienced programmer, just you have to know the basics of PHP, JavaScript and MySQL and HTML/CSS&lt;/p&gt;

&lt;p&gt;This course will be greatly and highly beneficial to you. And by the end of this course you will be capable of creating your own Peer To Peer Live Video Chat Application Just like WhatsApp, or zoom, not only this you will also learn about websocket because we will be using websocket with PHP.&lt;/p&gt;

&lt;p&gt;And you can also add this One to one live video chat feature to your existing website or to your project where you want to add support with video chat.&lt;/p&gt;

&lt;p&gt;This course will be greatly and highly beneficial to you. And by the end of this course you will be capable of creating your own Peer To Peer Live Video Chat Application Just like WhatsApp, or zoom, not only this you will also learn about websocket because we will be using websocket with PHP.&lt;/p&gt;

&lt;p&gt;And you can also add this One to one live video chat feature to your existing website or to your project where you want to add support with video chat.&lt;/p&gt;

&lt;p&gt;Okay so what’s the course about?&lt;/p&gt;

&lt;p&gt;I will personally guide you, step by step, in creating your own real time video conference system from scratch using webrtc, websocket &amp;amp; JS complete with:&lt;/p&gt;

&lt;p&gt;User registration&lt;/p&gt;

&lt;p&gt;WebSocket Server&lt;/p&gt;

&lt;p&gt;Clients Connections Logic&lt;/p&gt;

&lt;p&gt;WebRTC Connection Logic&lt;/p&gt;

&lt;p&gt;Live search system&lt;/p&gt;

&lt;p&gt;Peer to Peer connection&lt;/p&gt;

&lt;p&gt;One to one Video Chat&lt;/p&gt;

&lt;p&gt;Ratchet&lt;/p&gt;

&lt;p&gt;Clean Friendly URLs&lt;/p&gt;

&lt;p&gt;and much more!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webrtc</category>
      <category>php</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Everything you need to know about var, let and const.</title>
      <author>Emmanuel Onah</author>
      <pubDate>Wed, 05 Jan 2022 04:31:09 +0000</pubDate>
      <link>https://dev.to/emmanuelonah/everything-you-need-to-know-about-var-let-and-const-56a5</link>
      <guid>https://dev.to/emmanuelonah/everything-you-need-to-know-about-var-let-and-const-56a5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#key-points-used-in-this-article"&gt;
  &lt;/a&gt;
  Key points used in this article
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scope:&lt;/strong&gt; Refers to a lexical environment at which variables and functions (be it expression or statement) are declared and made accessible as precedence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hoisting:&lt;/strong&gt; A mechanism used by the JavaScript engine to take all variables and function declarations to the top of their respective scopes. If an engine supports JIT compilation, then it's in the JIT compilation phase that hoisting happens else during interpretation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-know-about-var"&gt;
  &lt;/a&gt;
  Things to know about var
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;var is global and function scoped based only, e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRYF65vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gk3g24oq23dhyi09m64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRYF65vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gk3g24oq23dhyi09m64.png" alt="Image description" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var allows variable redeclaration(which doesn't make sense) and redefinition(which makes sense) within a singular scope, e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Np5sCj3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps0wtyercvbggh69jtcl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Np5sCj3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps0wtyercvbggh69jtcl.png" alt="Image description" width="880" height="592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;during hoisting, if a variable is accessed before its declarations as var variable, the compiler will hoist the var variable to the top of its scope with an implicit value of undefined, e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_jbikwq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m68gbqwsom70d7bzcsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_jbikwq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m68gbqwsom70d7bzcsm.png" alt="Image description" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var variables declared inside block scope like if-statement, loops are not scoped meaning they can be accessed outside the block. e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dEfQf1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w0fbdecce9v0t18pt1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dEfQf1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w0fbdecce9v0t18pt1j.png" alt="Image description" width="880" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-know-about-let"&gt;
  &lt;/a&gt;
  Things to know about let
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;let is global, and block(anything with { }) scoped e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLsG3VLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fylkunuxo8pjroeb9si.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLsG3VLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fylkunuxo8pjroeb9si.png" alt="Image description" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;let doesn't allow redeclaration within a singular scope but allows redefinition, e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyvtf7gM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfb9ah2nehs13zsh3b3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyvtf7gM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfb9ah2nehs13zsh3b3r.png" alt="Image description" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;during hoisting, if a let variable is accessed before the declaration, the compiler throws a Reference error, unlike the var where an undefined value will be implicitly assigned, e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hiz-eLZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9oxawp4397pttlfpdl2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hiz-eLZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9oxawp4397pttlfpdl2c.png" alt="Image description" width="880" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-know-about-const"&gt;
  &lt;/a&gt;
  Things to know about const
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;const has the same features as the let above. The only difference is that its read-only and doesn't allow redefinition, but allows mutation for objects(e.g obj.propertyOrMethod =newValue ) if not frozen(Object.freeze(obj)) e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btByWE_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jy950tfbilrmy3yhp7dm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btByWE_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jy950tfbilrmy3yhp7dm.png" alt="Image description" width="880" height="1056"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In conclusion, var, let and const is not bad in my opinion it just depends on how you understand your program, but rarely do we use var this day.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>New Redux 😱 is just 🔥</title>
      <author>Rajesh Joshi</author>
      <pubDate>Wed, 05 Jan 2022 04:11:11 +0000</pubDate>
      <link>https://dev.to/rajeshj3/new-redux-is-just-3mle</link>
      <guid>https://dev.to/rajeshj3/new-redux-is-just-3mle</guid>
      <description>&lt;p&gt;React Redux is the official React binding for Redux. It allows React components to read data from a Redux Store, and dispatch Actions to the Store to update data.&lt;/p&gt;

&lt;p&gt;Redux helps apps to scale by providing a sensible way to manage state through a unidirectional data flow model. React Redux is conceptually simple. It subscribes to the Redux store, checks to see if the data which your component wants have changed, and re-renders your component.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-code-a-simple-counter-app"&gt;
  &lt;/a&gt;
  Let's Code a simple Counter App 🚀
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Create new React App&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-react-app learn-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Add Redux and Redux Toolkit&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add @reduxjs/toolkit react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Redux Toolkit&lt;/strong&gt; is &lt;strong&gt;official, opinionated, batteries-included toolset for efficient Redux development&lt;/strong&gt;. It includes the most widely used Redux addons, like Redux Thunk for async logic and Reselect for writing selector functions, so that you can use them right away.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Directory Structure&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
│   App.js
│   index.js
│
└───redux
│   │   store.js
│   │
│   └───counter
│       │   counterSlice.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Create a Redux Store&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in the file &lt;code&gt;src/redux/store.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Provide the Redux Store to React&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in the file &lt;code&gt;src/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Create a Redux State Slice for Counter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in the file &lt;code&gt;src/store/counter/counterSlice.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Action creators are generated for each case reducer function&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;counterSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Add Slice Reducers to the Store&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in the file &lt;code&gt;src/redux/store.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./counter/counterSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Write &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Increment value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Decrement value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Decrement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Import requirements&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/counter/counterSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;useSelector&lt;/strong&gt; will be used to fetch data from the global store&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;useDispatch&lt;/strong&gt; will be used to update the data in the global store&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Create &lt;code&gt;Counter&lt;/code&gt; variable and insialize the dispatch&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Accessing the counter value&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update the span tag accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;#{counter.value}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Writing on Click Events&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Increment Button
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
  &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Increment value"&lt;/span&gt;
  &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; dispatch(setCounter(counter.value + 1))}
&amp;gt;
  Increment
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Decrement Button
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
  &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Decrement value"&lt;/span&gt;
  &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; dispatch(setCounter(counter.value - 1))}
&amp;gt;
  Decrement
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;App.js looks like this&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/counter/counterSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Increment value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Increment&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Decrement value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Decrement&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#run-the-development-server"&gt;
  &lt;/a&gt;
  Run the development Server 🚀
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_XdAnVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3894fhfbzq0insg5u2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_XdAnVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3894fhfbzq0insg5u2.png" alt="React Redux Demo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, if you hit and of the counter buttons, you'll see the updated values of the counter in the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0iLLuL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d8pmsbx8va012xenhdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0iLLuL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d8pmsbx8va012xenhdf.png" alt="React Redux" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hurray! You just learned &lt;code&gt;What's new is React Redux.&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial. If so, then please don't forget to drop a Like ❤️&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; 🤩, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! 😃💻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>redux</category>
    </item>
    <item>
      <title>Twitter Followers Tracker using Next.js, NextAuth and TailwindCSS</title>
      <author>Nilanth</author>
      <pubDate>Wed, 05 Jan 2022 03:58:01 +0000</pubDate>
      <link>https://dev.to/nilanth/twitter-followers-tracker-using-nextjs-nextauth-and-tailwindcss-1em7</link>
      <guid>https://dev.to/nilanth/twitter-followers-tracker-using-nextjs-nextauth-and-tailwindcss-1em7</guid>
      <description>&lt;p&gt;Steps to build Twitter followers counter using Next.js, NextAuth, SWR, Tailwind CSS with Dark Mode Support.&lt;/p&gt;

&lt;p&gt;To learn new things, just reading the docs is not enough. We should practically apply it. Likewise, while learning new tech stacks we should apply them by developing simple apps to get a hands-on experience. &lt;/p&gt;

&lt;p&gt;So to learn some new tech stacks let build a small application. Here we are going to learn &lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js&lt;/a&gt;, &lt;a href="https://next-auth.js.org/getting-started/introduction"&gt;NextAuth&lt;/a&gt;, &lt;a href="https://swr.vercel.app/docs/getting-started"&gt;SWR&lt;/a&gt; and &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; by developing a Twitter followers counter app. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are going to build an app like &lt;a href="https://twiter-stats.vercel.app/"&gt;TwiterStats&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Next.js for building ReactJS Application.&lt;/li&gt;
&lt;li&gt;NextAuth for OAuth implementation with Twitter.&lt;/li&gt;
&lt;li&gt;SWR for fetching data from API.&lt;/li&gt;
&lt;li&gt;Tailwind for UI&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/draftbit/twitter-lite"&gt;Twitter Lite&lt;/a&gt; for fetching data from Twitter APIs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-and-tailwind%C2%A0setup"&gt;
  &lt;/a&gt;
  Next.js and Tailwind Setup
&lt;/h2&gt;

&lt;p&gt;We can setup tailwind with next.js using a single command, as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app -e with-tailwindcss twitter-count
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above command automatically configures the Tailwind setup based on the official Next.js example.&lt;/p&gt;

&lt;p&gt;Once the installation is completed navigate to your project folder using &lt;code&gt;cd twitter-count&lt;/code&gt; and start the dev server using &lt;code&gt;yarn dev&lt;/code&gt; command. You can see the below page if you hit &lt;code&gt;http://localhost:3000&lt;/code&gt; in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhN1wQOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx7vwnx8ryvuakcf3qn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhN1wQOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx7vwnx8ryvuakcf3qn5.png" alt="next-home" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-nextauthjs"&gt;
  &lt;/a&gt;
  Configure NextAuth.js
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-is-nextauth"&gt;
  &lt;/a&gt;
  What is NextAuth?
&lt;/h3&gt;

&lt;p&gt;NextAuth is an open-source Authentication package for Next.js. NextAuth simplifies the social auth logins like Twitter, Google, Apple, Github and many more. It also supports email or passwordless login and database integration.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;next auth&lt;/code&gt; to your project using the below command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add next-auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, create a file named &lt;code&gt;[…nextauth].js&lt;/code&gt; in &lt;code&gt;pages/api/auth&lt;/code&gt; folder and add the below code&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Let's break down the above code&lt;/p&gt;

&lt;p&gt;Above NextAuth function handles the dynamic route for all social auth. Here we are going to use Twitter OAuth, so we have added &lt;strong&gt;TwitterProvider&lt;/strong&gt; in providers. To perform successful OAuth we require &lt;strong&gt;TWITTER_ID&lt;/strong&gt; and &lt;strong&gt;TWITTER_SECRET&lt;/strong&gt;, Get these from the &lt;a href="https://developer.twitter.com/en"&gt;Twitter Developer Platform&lt;/a&gt; with a few simple steps. &lt;/p&gt;

&lt;p&gt;Follow the steps in this &lt;a href="https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api"&gt;link&lt;/a&gt; to get Twitter API access.&lt;/p&gt;

&lt;p&gt;After getting the Secrets from the developer portal, Update it in the env and add to the &lt;strong&gt;provider&lt;/strong&gt; as above. &lt;/p&gt;

&lt;p&gt;Using &lt;strong&gt;callback&lt;/strong&gt; set the required data in session after successful OAuth with Twitter. On Successful OAuth, we get many details from Twitter, Here we will customize the data that we require and save it in session. &lt;/p&gt;

&lt;p&gt;We should not expose secrets such as &lt;code&gt;authToken&lt;/code&gt; and &lt;code&gt;authSecret&lt;/code&gt; to the client-side, so we save them in JWT token objects. Then we can access the user credential on the server-side  using the &lt;code&gt;getToken&lt;/code&gt; helper method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;secret&lt;/code&gt;&lt;/strong&gt; a random string used to hash tokens, sign or encrypt cookies and generate cryptographic keys.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-sessionprovider"&gt;
  &lt;/a&gt;
  Configure SessionProvider
&lt;/h2&gt;

&lt;p&gt;Warp the &lt;strong&gt;SessionProvier&lt;/strong&gt; context at the top-level component to use &lt;code&gt;useSession&lt;/code&gt; hooks to get session data in child components as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;refetchInterval&lt;/code&gt; is used to fetch the session periodically in the background.&lt;/p&gt;

&lt;p&gt;In our app, &lt;code&gt;_app.js&lt;/code&gt; is the top-level component, so we have wrapped the session provider. Here we have wrapped ThemeProvide context from &lt;a href="https://github.com/pacocoursey/next-themes"&gt;next-theme&lt;/a&gt; to enable dark mode support. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#followers-counter-component"&gt;
  &lt;/a&gt;
  Followers Counter Component
&lt;/h2&gt;

&lt;p&gt;Add the below code in Followers Components&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#break-down-the-followers-component"&gt;
  &lt;/a&gt;
  Break Down the Followers Component
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is%C2%A0swr"&gt;
  &lt;/a&gt;
  What is SWR?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://swr.vercel.app/docs/getting-started"&gt;SWR&lt;/a&gt; is a React Hooks for Data Fetching developed by the Next.js team. It supports real-time data fetching, built-in cache, Auto Revalidation, Prefetching and more.&lt;/p&gt;

&lt;p&gt;In the followers component, we have called &lt;code&gt;/api/twitter/user&lt;/code&gt; API to get basic details of the Twitter user such as name, followers count, profile description and location. We have used SWR to get the data from the API in an interval of time.&lt;br&gt;
 &lt;br&gt;
As the data we get from NextOAuth is not real-time data. So we use &lt;strong&gt;Twitter Lite&lt;/strong&gt; API to get the Twitter user details in real-time. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#twitter-lite-integration"&gt;
  &lt;/a&gt;
  Twitter Lite Integration
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/draftbit/twitter-lite"&gt;Twitter Lite&lt;/a&gt; is a tiny, full-featured, flexible server library for Twitter APIs.&lt;/p&gt;

&lt;p&gt;In Next.js you can build APIs also, files inside &lt;code&gt;api/*&lt;/code&gt; are considered as API endpoints. Which are processed on the server, not on the client-side. Twitter APIs can be accessed from the server-side only, so we have a user API in the &lt;code&gt;api/&lt;/code&gt; folder to access the show API using the Twitter lite package.&lt;/p&gt;

&lt;p&gt;Add the below code &lt;code&gt;pages/api/twitter/user.js&lt;/code&gt; to access the user details using &lt;code&gt;/api/twitter/userAPI&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Add the Followers component in &lt;code&gt;index.js&lt;/code&gt; file as below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we use &lt;code&gt;signIn&lt;/code&gt; and &lt;code&gt;signOut&lt;/code&gt; the method from &lt;code&gt;next-auth&lt;/code&gt; to initiate OAuth login. To log in with Twitter we pass Twitter param to the sign-in method as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;signIn('twitter');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now just hit the URL in the browser to see the changes like below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPS0_3-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nefdzdteha6yi78d0uzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPS0_3-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nefdzdteha6yi78d0uzj.png" alt="login" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On calling the &lt;strong&gt;&lt;code&gt;signIn&lt;/code&gt;&lt;/strong&gt; method, the app will be redirected to the Twitter OAuth page and clicking the &lt;strong&gt;Authorize App&lt;/strong&gt; button on OAuth Page will redirect back to our followers component as below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AAHiiqR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4z9k7dgjhq19w9v236j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AAHiiqR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4z9k7dgjhq19w9v236j.png" alt="follower-image" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We need to configure the OAuth redirect URL in Twitter Developer Portal when registering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can customize the UI based on your need, Here I have covered only the integration part and with basic UI using tailwind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-in%C2%A0vercel"&gt;
  &lt;/a&gt;
  Deploying in Vercel
&lt;/h2&gt;

&lt;p&gt;You can deploy your Counter App in Vercel within two steps as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="https://vercel.com/signup"&gt;Vercel&lt;/a&gt; Account&lt;/li&gt;
&lt;li&gt;Connect your repository and click deploy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo&lt;/strong&gt; -&amp;gt; &lt;a href="https://github.com/Nilanth/twiter-stats"&gt;https://github.com/Nilanth/twiter-stats&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Demo&lt;/strong&gt; -&amp;gt; &lt;a href="https://twiter-stats.vercel.app"&gt;https://twiter-stats.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have successfully integrated Twitter with NextAuth and displayed the follower's count using Next and tailwind. We have got hands-on experience with these tech stacks now.&lt;/p&gt;

&lt;p&gt;Thank you for reading&lt;/p&gt;

&lt;p&gt;Get more updates on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-ebook"&gt;
  &lt;/a&gt;
  Free eBook
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nilanth.gumroad.com/l/NYkdN"&gt;ReactJS Optimization Techniques and Development Resources&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-blogs"&gt;
  &lt;/a&gt;
  More Blogs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/dont-optimize-your-react-app-use-preact-instead-30og"&gt;Don't Optimize Your React App, Use Preact Instead
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-reduce-react-app-loading-time-by-70-1kmm"&gt;How to Reduce React App Loading Time By 70%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/build-a-portfolio-using-next-js-tailwind-and-vercel-4dd8"&gt;Build a Portfolio Using Next.js, Tailwind, and Vercel with Dark Mode Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/no-more-import-in-react-2mbo"&gt;No More ../../../ Import in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-react-packages-with-1k-ui-components-2bf3"&gt;10 React Packages with 1K UI Components
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/5-packages-to-optimize-and-speed-up-your-react-app-during-development-4h5f"&gt;5 Packages to Optimize and Speed Up Your React App During Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-use-axios-in-an-optimized-and-scalable-way-with-react-518n"&gt;How To Use Axios in an Optimized and Scalable Way With React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd"&gt;15 Custom Hooks to Make your React Component Lightweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga"&gt;10 Ways to Host Your React App For Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko"&gt;How to Secure JWT in a Single-Page Application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to Animate an Emoji with CSS</title>
      <author>Anthony_Dellavecchia</author>
      <pubDate>Wed, 05 Jan 2022 03:45:11 +0000</pubDate>
      <link>https://dev.to/anthonyjdella/how-to-animate-an-emoji-with-css-5eb9</link>
      <guid>https://dev.to/anthonyjdella/how-to-animate-an-emoji-with-css-5eb9</guid>
      <description>&lt;p&gt;If you go to the home page of &lt;a href="https://anthonydellavecchia.com"&gt;this website&lt;/a&gt;, you might find some hidden "easter eggs" around the page. One of which is an emoji that is animated using CSS. 👋 is the emoji. It's just a waving hand, that doesn't actually wave. There is no animation, so I wanted to make it move. It's actually pretty easy!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-html"&gt;
  &lt;/a&gt;
  Step 1: Create HTML
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class="waving" data-hover="👋"&amp;gt;Hi&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All I've done here is create a simple div with the text, "Hi". Then I've given it 2 HTML attributes, &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;data-hover&lt;/code&gt;. The contents within &lt;code&gt;data-hover&lt;/code&gt; ( 👋 ) is what will be animated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-css"&gt;
  &lt;/a&gt;
  Step 2: Create CSS
&lt;/h3&gt;

&lt;p&gt;`.waving:before {&lt;br&gt;
  content: attr(data-hover);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.waving:hover {&lt;br&gt;
  animation-name: wave-animation;&lt;br&gt;
  animation-duration: 3.0s;&lt;br&gt;
  animation-iteration-count: infinite;&lt;br&gt;
  transform-origin: 70% 70%;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;@keyframes wave-animation {&lt;br&gt;
  0% {&lt;br&gt;
      transform: rotate( 0.0deg)&lt;br&gt;
  }&lt;br&gt;
  10% {&lt;br&gt;
      transform: rotate(14.0deg)&lt;br&gt;
  }&lt;br&gt;
  20% {&lt;br&gt;
      transform: rotate(-8.0deg)&lt;br&gt;
  }&lt;br&gt;
  30% {&lt;br&gt;
      transform: rotate(14.0deg)&lt;br&gt;
  }&lt;br&gt;
  40% {&lt;br&gt;
      transform: rotate(-4.0deg)&lt;br&gt;
  }&lt;br&gt;
  50% {&lt;br&gt;
      transform: rotate(10.0deg)&lt;br&gt;
  }&lt;br&gt;
  60% {&lt;br&gt;
      transform: rotate( 0.0deg)&lt;br&gt;
  }&lt;br&gt;
  100% {&lt;br&gt;
      transform: rotate( 0.0deg)&lt;br&gt;
  }&lt;br&gt;
}`&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.waving:before&lt;/code&gt; defines the content of which is to be displayed ( 👋 ).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.waving:hover&lt;/code&gt; defines what action happens when we hover over that element. In this case we have an &lt;code&gt;animation-name&lt;/code&gt; which is defined below in &lt;code&gt;@keyframes wave-animation&lt;/code&gt;. We also give it an animation-duration of &lt;code&gt;3 seconds&lt;/code&gt; and tell it to &lt;code&gt;animate infinitely&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@keyframes wave-animation&lt;/code&gt; is where we create the actual animation. In this case, I wanted to make the hand wave, so to do this I just want the hand to rotate back and forth. I add different keyframes and tell it to rotate a certain number of degrees in certain intervals. This mimics 👋 actually waving!&lt;/p&gt;

&lt;p&gt;You can apply this basic template to any emoji. Be creative! For example, you can try to animate a rocket 🚀 using CSS. Just think of what type of animation you want it to do (possibly translate up and down).&lt;/p&gt;

&lt;p&gt;For more articles check out my blog @ &lt;a href="https://anthonydellavecchia.com"&gt;anthonydellavecchia.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Code Smell 113 - Data Naming</title>
      <author>Maxi Contieri</author>
      <pubDate>Wed, 05 Jan 2022 03:16:15 +0000</pubDate>
      <link>https://dev.to/mcsee/code-smell-113-data-naming-1bm9</link>
      <guid>https://dev.to/mcsee/code-smell-113-data-naming-1bm9</guid>
      <description>&lt;p&gt;&lt;em&gt;Use entity domain names to model entity domain objects.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR: Don't name your variables as Data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Readability&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bad Naming&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use role suggesting names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find names in the &lt;a href="https://dev.to/mcsee/the-one-and-only-software-design-principle-3086"&gt;Bijection&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h1&gt;

&lt;p&gt;We use 'data' a lot in our variables.&lt;/p&gt;

&lt;p&gt;We are used to doing it.&lt;/p&gt;

&lt;p&gt;Using this kind of name favors the anemic treatment of objects.&lt;/p&gt;

&lt;p&gt;We should think about domain-specific and role-suggesting names.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  Wrong
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dataExists&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;div&amp;gt;Loading Data...&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#right"&gt;
  &lt;/a&gt;
  Right
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;peopleFound&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;div&amp;gt;Loading People...&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#detection"&gt;
  &lt;/a&gt;
  Detection
&lt;/h1&gt;

&lt;p&gt;[X] SemiAutomatic &lt;/p&gt;

&lt;p&gt;We can check for this substring on our code and warn our developers.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Readability&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Naming&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Data is everywhere if you see the world as only data.&lt;/p&gt;

&lt;p&gt;We can never see the data we manipulate. &lt;/p&gt;

&lt;p&gt;We can only infer it through behaviour.&lt;/p&gt;

&lt;p&gt;We don't know the current temperature. We observe our thermometer pointing at 35 Degrees.&lt;/p&gt;

&lt;p&gt;Our variables should reflect the domain and role they are fulfilling. &lt;/p&gt;

&lt;p&gt;Naming them as 'data' is lazy and hinders readability.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#relations"&gt;
  &lt;/a&gt;
  Relations
&lt;/h1&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-01-anemic-models-4dg2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 01 - Anemic Models&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Oct 20 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-65-variables-named-after-types-9da" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 65 - Variables Named After Types&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Apr 2 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codesmells&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More Info
&lt;/h1&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/what-exactly-is-a-name-part-ii-rehab-20gd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What exactly is a name - Part II Rehab&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ May 23 '21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;blockquote&gt;
&lt;p&gt;Twenty percent of all input forms filled out by people contain bad data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Dennis Ritchie&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/software-engineering-great-quotes-26ci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Software Engineering Great Quotes&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Dec 28 '20 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#quotes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#software&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This article is part of the CodeSmell Series.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/how-to-find-the-stinky-parts-of-your-code-1dbc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Find the Stinky parts of your Code&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ May 21 '21 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>oop</category>
      <category>webdev</category>
      <category>database</category>
      <category>refactoring</category>
    </item>
  </channel>
</rss>
