<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Comunidade Tech e Sensação de Pertencimento</title>
      <author>TechSisters Brasil</author>
      <pubDate>Wed, 22 Sep 2021 12:43:17 +0000</pubDate>
      <link>https://dev.to/techsistersbrasil/comunidade-tech-e-sensacao-de-pertencimento-5dii</link>
      <guid>https://dev.to/techsistersbrasil/comunidade-tech-e-sensacao-de-pertencimento-5dii</guid>
      <description>&lt;p&gt;&lt;em&gt;“O sentimento de pertencer é altamente motivador. Quando nos sentimos parte de algo, nossa entrega é muito maior. Coisas incríveis acontecem quando um time motivado entra em ação!” Autor desconhecido&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmeueFAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za3t7lbcdmixisg09jjm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmeueFAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za3t7lbcdmixisg09jjm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;É incrível como a sensação de não-pertencimento mexe com a gente e, ultimamente, tenho percebido esse sentimento bem forte, conversando com pessoas que estão passando por &lt;strong&gt;uma transição de carreira.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A impressão é de que estamos num LIMBO entre um universo e outro. É como se a gente não pertencesse mais a carreira anterior - por não se identificar mais, ou por já ter tomado a decisão de que não queremos mais seguir aquele caminho - somada com a sensação de que ainda não fazemos parte da nova área. &lt;/p&gt;

&lt;p&gt;Muitos questionamentos surgem nessa etapa, principalmente se estamos fazendo a escolha correta. Afinal, temos a sensação de ainda estarmos entrando num mundo desconhecido e ainda não entendemos muito como ele funciona. 🤷🏽‍♀️&lt;/p&gt;

&lt;p&gt;Por muito tempo, esse sentimento me acompanhou, pelas várias mudanças de cidades, estados e países que enfrentei. Foram inúmeras casas, escolas, culturas e comidas. E a falta de vínculos e a falta de conexão com as pessoas e o lugar onde você vive é algo que impacta bastante.🌎&lt;/p&gt;




&lt;p&gt;Mas com o passar do tempo eu comecei a criar técnicas para que esse processo fosse mais tranquilo. E então, quando chegou a hora da transição de carreira, eu já sabia o que fazer! &lt;/p&gt;

&lt;p&gt;Por isso, resolvi compartilhar um pouco da minha experiência, pois ela pode te ajudar a passar com mais tranquilidade por esse processo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Em primeiro lugar é importante saber, que como tudo na vida, &lt;strong&gt;esse sentimento PASSA.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É normal se sentir deslocado em um novo ambiente. Mas não fique observando ele de fora por muito tempo. Dê pequenos passos diários que te levem pra dentro daquele universo. 🚀&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Faça com que aquele ambiente seja mais acolhedor&lt;/strong&gt;, você tem a faca e o queijo na mão, coloque suas melhores qualidades em ação - seja a comunicação, o ensino ou a criação de algo. &lt;em&gt;Aproxime-se das pessoas. Entre em comunidades. Compartilhe o que você sabe. O pouco pra você, poder ser o muito pra alguém.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Absorva todo conhecimento que você puder.&lt;/strong&gt; E eu não digo só de qualidade técnicas, também entenda como aquela área funciona, saiba quem é referencia na área, quais a notícias mais relevantes e o que há de novo. Fique atento! &lt;em&gt;Pegue a “onda das novidades” e utilize elas como ponte para se conectar e conversar com as pessoas da área.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Não tenho medo e nem vergonha de pedir ajuda.&lt;/strong&gt; Desde que o mundo é mundo, pessoas ajudam pessoas e o conhecimento é passado de geração em geração. Quando você mostra interesse as pessoas lembram de você em outras oportunidades.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Siga pessoas que te inspirem diariamente.&lt;/strong&gt; Motivação é algo passageiro e quando ela passa só sobra você e o seu sonho de continuar seguindo aquele percurso. Não permita que os obstáculos no meio do caminho te desanimem. Ouça quem já está na área e utilize isso como combustível para chegar onde você quer. 💪🏼&lt;/p&gt;




&lt;p&gt;A comunidade tech é altamente ativa. Tem muita gente acolhedora e com vontade de ajudar. Aproveite esse ambiente de troca e aprendizado para vencer os seus medos e inseguranças. E quando você se sentir preparado e livre para voar, volte, e inspire quem está iniciando. Não deixe esse ciclo se quebrar! ❤️&lt;/p&gt;




&lt;p&gt;Se esse conteúdo foi útil pra você, compartilhe!&lt;/p&gt;

&lt;p&gt;📝 escrito com 💜 por &lt;a href="https://dev.to/simonepedrosa"&gt;Simone Pedrosa&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>technology</category>
      <category>developer</category>
      <category>womanintech</category>
    </item>
    <item>
      <title>HackOnLisk2</title>
      <author>Lisk</author>
      <pubDate>Wed, 22 Sep 2021 12:32:28 +0000</pubDate>
      <link>https://dev.to/liskhq/hackonlisk2-1994</link>
      <guid>https://dev.to/liskhq/hackonlisk2-1994</guid>
      <description>&lt;p&gt;Build your own blockchain application with the Lisk SDK in JavaScript. Blockchain applications should be submitted to either the DeFi or GameFi category. 60,000 CHF in prizes.&lt;/p&gt;

&lt;p&gt;Here's everything you need to know: &lt;a href="https://hackonlisk2.devpost.com/"&gt;https://hackonlisk2.devpost.com/&lt;/a&gt; 👈&lt;/p&gt;

&lt;p&gt;Join our community at Lisk.chat 💙&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>challenge</category>
    </item>
    <item>
      <title>How to create MCQs WordPress Website</title>
      <author>Academy365</author>
      <pubDate>Wed, 22 Sep 2021 12:29:57 +0000</pubDate>
      <link>https://dev.to/academy365/how-to-create-mcqs-wordpress-website-3ad2</link>
      <guid>https://dev.to/academy365/how-to-create-mcqs-wordpress-website-3ad2</guid>
      <description>&lt;p&gt;Learn how to create a complete MCQs website using WordPress Plugin. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xQdOixr9t_E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>mcqs</category>
    </item>
    <item>
      <title>Choose. Build. Get Rewarded. $1.3M+ funding.</title>
      <author>Lisk</author>
      <pubDate>Wed, 22 Sep 2021 12:18:04 +0000</pubDate>
      <link>https://dev.to/liskhq/choose-build-get-rewarded-1-3m-funding-4hla</link>
      <guid>https://dev.to/liskhq/choose-build-get-rewarded-1-3m-funding-4hla</guid>
      <description>&lt;p&gt;Never heard of Lisk or the Lisk SDK, but you would like to develop a project/business with blockchain technology, and you know Javascript and/or Typescript?&lt;/p&gt;

&lt;p&gt;Current opportunities for funding:&lt;br&gt;
🔹 &lt;a href="https://lisk.com/grant-program"&gt;https://lisk.com/grant-program&lt;/a&gt; 👈&lt;br&gt;
🔹 &lt;a href="https://hackonlisk2.devpost.com/"&gt;https://hackonlisk2.devpost.com/&lt;/a&gt; 👈&lt;/p&gt;

&lt;p&gt;Interested? ⚡ &lt;a href="https://bit.ly/QuickStartLisk"&gt;https://bit.ly/QuickStartLisk&lt;/a&gt; ⚡&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>blockchain</category>
      <category>programming</category>
      <category>challenge</category>
    </item>
    <item>
      <title>How to become a console.log() ninja</title>
      <author>Eli H. Schei</author>
      <pubDate>Wed, 22 Sep 2021 12:16:10 +0000</pubDate>
      <link>https://dev.to/elischei/how-to-become-a-console-log-ninja-dk2</link>
      <guid>https://dev.to/elischei/how-to-become-a-console-log-ninja-dk2</guid>
      <description>&lt;p&gt;If you are a web developer I'm guessing you have used console.log() a couple of (thousand) times. But did you know that the console object has some other usefull methods you can use to structure the output you get?&lt;/p&gt;

&lt;h2&gt;What is the console object?&lt;/h2&gt;

&lt;p&gt;First, a very with a short introduction to the console object before we dive in to its methods.&lt;/p&gt;

&lt;p&gt;So what is the console object? The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/console" rel="noreferrer noopener" title="https://developer.mozilla.org/en-US/docs/Web/API/console"&gt;MDN Web docs&lt;/a&gt; sais "The &lt;strong&gt;&lt;code&gt;console&lt;/code&gt;&lt;/strong&gt; object provides access to the browser's debugging console (e.g. the &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Web_Console"&gt;Web console&lt;/a&gt; in Firefox). The specifics of how it works varies from browser to browser, but there is a &lt;em&gt;de facto&lt;/em&gt; set of features that are typically provided." &lt;/p&gt;

&lt;p&gt;In other words, it is a object that is available to use for debugging purposes. &lt;/p&gt;

&lt;p&gt;Lets take a look at some of the methods it provides. &lt;/p&gt;




&lt;h2&gt;console.table() &lt;/h2&gt;

&lt;p&gt;You have two objects that contains the same structure of information about two pets. You add both pets to an array.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myPet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Poppy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;favoriteToy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ball&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myOtherPet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pig&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;favoriteToy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;food&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myPet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myOtherPet&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to print the array to the console you can use &lt;code&gt;console.log()&lt;/code&gt;, that will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5US9GgEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9vmtp07q3up42i8x5h6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5US9GgEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9vmtp07q3up42i8x5h6.png" alt="Image of console.log ouput"&gt;&lt;/a&gt;&lt;br&gt;
If you would like a better overview of what the array contains you can use &lt;code&gt;console.table()&lt;/code&gt; instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will give you a nice table presentation of the array content, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MyOFXu5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a442hjir1d8c7aywtrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MyOFXu5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a442hjir1d8c7aywtrz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;console.group()&lt;/h2&gt;

&lt;p&gt;You can use console.group() to create collapsible groups of outputs. For instance you can use it to group output from functions.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;function1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Function 1 output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is a message from function1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;function2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Other function output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Well hello there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;function1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;function2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the functions are called you will get the messages presented like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08wlurOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0vsc7sjefk9di4y4mcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08wlurOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0vsc7sjefk9di4y4mcs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nested groups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also nest groups inside eachother&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;function2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Other function output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Well hello there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This group is nested inside of the 'Other function output' group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from inside this group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbDwslN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiijsdmjbvdio2rurg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbDwslN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiijsdmjbvdio2rurg7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;collapsed groups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want the groups to collapsed as default you can use &lt;code&gt;console.groupCollapsed("name of group")&lt;/code&gt; instead of &lt;code&gt;console.group("name of group")&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;console.dir()&lt;/h2&gt;

&lt;p&gt;When you want to output information about an object in a structured manner you can also use &lt;code&gt;console.dir(object);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCQUoJaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9muyilbh9q0molmk0jxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCQUoJaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9muyilbh9q0molmk0jxi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;console.assert()&lt;/h2&gt;

&lt;p&gt;If you want some condition to decide if your ouput is displayed in the console, &lt;code&gt;console.assert()&lt;/code&gt; is the function for you. This function takes two parameters, a boolean and a string. The message (string) will only be displayed in the console if the boolean value is &lt;code&gt;false&lt;/code&gt;.  &lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;function1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This message will be displayed as a warning if the condition equals false&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;function1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZDHnAWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyoo6m4pg3s6tsxd8gil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZDHnAWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyoo6m4pg3s6tsxd8gil.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;Adding color to your console output&lt;/h2&gt;

&lt;p&gt;The console object have two built in functions that will add color to the displad text. These are console.warn() and console.error(). And as you might have guessed they will be displayed as a warning and an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VXMNfbLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swtsefstpg0jks4u8q4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VXMNfbLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swtsefstpg0jks4u8q4c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Add your own styling&lt;/h3&gt;

&lt;p&gt;If you add %c before your string, and pass a string of styling as a second parameter you can style your output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V6Uyoe3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilto9etcm91ecicwrn7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6Uyoe3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilto9etcm91ecicwrn7v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;Other usefull console methods&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Create and use a timer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use&lt;code&gt; console.time()&lt;/code&gt; to start a timer, and &lt;code&gt;console.timeEnd() &lt;/code&gt;to end it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is your function being called?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;console.trace()&lt;/code&gt; to see where the function was called from&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/console" rel="noreferrer noopener" title="https://developer.mozilla.org/en-US/docs/Web/API/console"&gt;console &lt;/a&gt;(MDN)&lt;/li&gt;&lt;/ul&gt;




&lt;p&gt;Did you find this article usefull? &lt;a href="https://twitter.com/acupof_dev"&gt;Follow me on twitter&lt;/a&gt; to be notified when I publish something new!&lt;/p&gt;

&lt;p&gt;Also, if you have any feedback or questions, please let me know in the comments below. :)&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;/Eli&lt;/p&gt;

</description>
      <category>console</category>
      <category>tips</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 30, Spinbox and Labelbox</title>
      <author>Aatmaj</author>
      <pubDate>Wed, 22 Sep 2021 12:07:01 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-30-spinbox-and-labelbox-1b35</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-30-spinbox-and-labelbox-1b35</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-see-how-to-use-the-spinbox-and-listbox-widgets-widget"&gt;
  &lt;/a&gt;
  Today let us see how to use the spinbox and listbox widgets widget.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#spin-box-widget"&gt;
  &lt;/a&gt;
  Spin box widget.
&lt;/h2&gt;

&lt;p&gt;The spinbox widget is a type of widget which lets the users choose values in an easy way. The user can navigate through the values using the up and down arrows. You can read more about it &lt;a href="https://anzeljg.github.io/rin2/book2/2405/docs/tkinter/spinbox.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-spinbox-widget"&gt;
  &lt;/a&gt;
  Making the spinbox widget
&lt;/h3&gt;

&lt;p&gt;The spinbox widget is very similar to the slider widget we learnt in the last part. &lt;code&gt;v&lt;/code&gt; all we need to do is replace slider by spinbox&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"200x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;spinbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Spinbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;spinbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;spinbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBQFvyHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qc3et3mzybli3ky0rcll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBQFvyHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qc3et3mzybli3ky0rcll.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBuulqXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efky3z3yzxlcfxoeskf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBuulqXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efky3z3yzxlcfxoeskf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4RZbJwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la37pd672vh4yb20a9ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4RZbJwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la37pd672vh4yb20a9ga.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we get the value from the spinbox in the same manner as we did for slider widget, that is, by using the &lt;code&gt;get()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listbox-widget"&gt;
  &lt;/a&gt;
  Listbox widget
&lt;/h2&gt;

&lt;p&gt;The listbox widget also allows the users to choose values from a given set of string or numerical values. These value sets are determined by the program. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Listbox widget is used to display a list of items from which a user can select a number of items.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#making-a-listbox-widget"&gt;
  &lt;/a&gt;
  Making a listbox widget
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Lb = Listbox(frame)&lt;/code&gt; creates a listbox widget. We can add values to the widget using the &lt;code&gt;insert()&lt;/code&gt; method. &lt;br&gt;
Here is an example which creates a Listbox&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"200x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Lb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Listbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Julia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"MATLAB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mathematica"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Haskell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-the-value-from-the-listbox"&gt;
  &lt;/a&gt;
  Getting the value from the listbox.
&lt;/h3&gt;

&lt;p&gt;We can get the value using the &lt;code&gt;curselection()&lt;/code&gt; method. The curselection returns the position of the selected item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"200x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Lb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Listbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Julia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"MATLAB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mathematica"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Haskell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curselection&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--McmuOQQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uyohpnk8ltlaqk4lctm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--McmuOQQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uyohpnk8ltlaqk4lctm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MZNHpgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rwdbysjk1x979bh6cs1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MZNHpgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rwdbysjk1x979bh6cs1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to get the value, we can use listbox method &lt;code&gt;get()&lt;/code&gt; to return the tuple of values and index the position.&lt;code&gt;showbutton.config(text=Lb.get(Lb.curselection()))&lt;/code&gt;&lt;br&gt;
But instead it will be more flexible if we make a tuple of those values themselves and feed them into the program. moreover using a for loop to feed in values enhances flexibility and extensibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"200x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Julia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MATLAB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Mathematica"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Haskell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Listbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curselection&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;showbutton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5GbbBmUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jfujp1a322mtapuvu4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5GbbBmUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jfujp1a322mtapuvu4e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exercise-&lt;br&gt;
1) Should &lt;code&gt;item&lt;/code&gt; be a tuple or a list??&lt;br&gt;
2) What will happen if we remove &lt;code&gt;[0]&lt;/code&gt; in &lt;code&gt;items[Lb.curselection()[0]]&lt;/code&gt;?&lt;br&gt;
3) Use &lt;code&gt;Lb.get(Lb.curselection())&lt;/code&gt; and rewrite the entire program&lt;br&gt;
4) The above program, lot of lines are wasted. use the &lt;code&gt;height&lt;/code&gt; attribute to adjust the number of lines.&lt;br&gt;
5) Does the height attribute take in the number of lines or pixel space? Try to find out using trial and error methods.&lt;br&gt;
6) When you set the height, did you feel the usefulness of flexibility initializing a tuple and setting the values?&lt;/p&gt;

&lt;p&gt;Answer in the comments below. Answers will be found in the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning Python Repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#types-of-selections"&gt;
  &lt;/a&gt;
  Types of selections
&lt;/h3&gt;

&lt;p&gt;In the listbox object, there is a attribute called as &lt;code&gt;selectmode&lt;/code&gt;. By using this attribute, we can set how we want to select the items.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Selectmode determines how many items can be selected, and how mouse drags affect the selection −&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BROWSE − Normally, you can only select one line out of a listbox. If you click on an item and then drag to a different line, the selection will follow the mouse. This is the default.&lt;/li&gt;
&lt;li&gt;SINGLE − You can only select one line, and you can't drag the mouse. Wherever you click button 1, that line is selected.&lt;/li&gt;
&lt;li&gt;MULTIPLE − You can select any number of lines at once. Clicking on any line toggles whether or not it is selected.&lt;/li&gt;
&lt;li&gt;EXTENDED − You can select any adjacent group of lines at once by clicking on the first line and dragging to the last line.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"200x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Julia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MATLAB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Mathematica"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Haskell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Listbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;selectmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MULTIPLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQFSsRfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibbq5hroe9nqa220u1c0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQFSsRfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibbq5hroe9nqa220u1c0.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"200x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Julia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MATLAB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Mathematica"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Haskell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Lb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Listbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;selectmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;EXTENDED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;Lb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aR8IVsME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a127qouctumjuhftnb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aR8IVsME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a127qouctumjuhftnb4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
In the extended mode, you cannot choose two non-continues values at once. Example, you cannot choose only Haskell and Julia in the above program. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For displaying the contents we will require a better method, like for example textbox. We will need to extract out all values out from the tuple, or convert it out into a string before displaying it.&lt;/p&gt;



&lt;p&gt;In tomorrows part, as promised we will make a program with slider and repeat the same with the spinbox widget. &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorual</category>
    </item>
    <item>
      <title>Best Node.js apps examples to inspire your next project</title>
      <author>Monika Ambrozowicz</author>
      <pubDate>Wed, 22 Sep 2021 12:04:29 +0000</pubDate>
      <link>https://dev.to/forestadmin/best-node-js-apps-examples-to-inspire-your-next-project-3bkh</link>
      <guid>https://dev.to/forestadmin/best-node-js-apps-examples-to-inspire-your-next-project-3bkh</guid>
      <description>&lt;p&gt;Fast, flexible, comfortable to work with — these are just a few words Node.js developers use to describe this extremely popular JavaScript runtime environment. The fact that it allows front-end developers to build and execute code on the server side makes the development faster, perfect for building light and real-time web applications. It shouldn’t come as a surprise that both well-established companies and ambitious startups have chosen Node.js to build their products. Let’s have a look at examples of reputable apps built in Node.js.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nodejs-fintech-apps"&gt;
  &lt;/a&gt;
  Node.js Fintech apps
&lt;/h1&gt;

&lt;p&gt;Security and reliability are crucial in building any apps, however, this statement is particularly relevant for fintech products. No users would trust an app with their money if there is even the tiniest chance their assets or data could be stolen, compromised, or misused. That’s why, many financial services eventually chose to build their applications in Node.js, as it’s known for data safety and reliability, and its huge open-source community makes sure that if there is any vulnerability, it gets fixed immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paypal"&gt;
  &lt;/a&gt;
  PayPal
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bCDRGhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/PayPal-Logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bCDRGhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/PayPal-Logo.png" alt="PayPal logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being one of the world’s first FinTech companies, for many years PayPal has been almost considered a synonym for this term. Although this is no longer the case as financial services have been blooming globally, PayPal is still one of the oldest and most well-known systems for online payments, trusted by millions of users around the world. At first, PayPal has been developed in Java, and then, in 2013, the customer-facing side of the app was migrated to JavaScript and Node.js. The new app was built almost twice as fast with fewer people, in 33% fewer lines of code, with 40% fewer files. On top of that, it has visibly higher performance and the dev team witnessed a 35% decrease in the average response time that eventually resulted in the pages being served 200ms faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#juspay"&gt;
  &lt;/a&gt;
  JusPay
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPF8KMYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/juspay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPF8KMYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/juspay.png" alt="JusPay logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JusPay is a younger but yet reputable fintech solution providing a digital payment platform similar to Google Play. One of their products is Express Checkout, a payment gateway that facilitates making secure online payments. The company created a dashboard that shows user metrics in real-time, and they needed to make sure there are no safety or performance issues. After all, JusPay products process over 4 million transactions every day on more than 100 million devices. Their choice fell on Node.js, mostly due to its real-time capabilities and high performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.forestadmin.com/customers/fintech?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic&amp;amp;utm_content=customers-fintech"&gt;Read how FinTech companies use Forest Admin to manage KYC, fraud prevention, compliance, and more.&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nodejs-realtime-applications"&gt;
  &lt;/a&gt;
  Node.js real-time applications
&lt;/h1&gt;

&lt;p&gt;Real-time apps have become ubiquitous, as we all expect our favorite products to be able to perform actions that occur instantly, like streaming videos, instant messaging, gaming, performing e-commerce transactions, just to name a few. In such applications speed, scalability, and performance are absolutely critical, and they need to be developed using technologies that are able to handle all of that well. Node.js is proven to bring the expected results and is chosen by household names like Netflix or Uber.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#netflix"&gt;
  &lt;/a&gt;
  Netflix
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jf9_8p5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/netflix-interface.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jf9_8p5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/netflix-interface.jpg" alt="Netflix main page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Netflix clearly shows that Node.js is capable of dealing with huge real-time applications with an enormous library of content watched by over 192 million subscribers in over 190 countries. One of the reasons to build the Netflix.com website UI in Node.js was its speed and effectiveness. Reducing startup time as much as possible was one of the most important goals and it was achieved with flying colors — the startup time of the new Netflix application has been reduced by 70%. On top of that, the overall performance improved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uber"&gt;
  &lt;/a&gt;
  Uber
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XL-ewbs8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/uber-app.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XL-ewbs8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/uber-app.jpg" alt="A smartphone with an Uber app open"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Real-time applications deal with many real-time users, and this is very true for Uber. After all, the platform is used by over 3 million drivers and 75 million users who take the ride. The company was aware from the beginning that its global online transportation network will require the ability to process large amounts of data almost instantly, and performance must be the key as both customers and drivers rely on that. Their choice fell on Node.js when it wasn’t as obvious as now — in fact, Uber is one of the first companies that used Node.js in production. Now, the process more than 2 million remote procedure calls per second, and praise Node.js for its ability to process huge amounts of data instantly, and for appropriate error handling.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nodejs-in-social-media-and-singlepage-applications"&gt;
  &lt;/a&gt;
  Node.js in Social Media and single-page applications
&lt;/h1&gt;

&lt;p&gt;Node.js is also a good choice for both social media and single-page applications that look light and simple from a user perspective, but require complex work to be handled by the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linkedin"&gt;
  &lt;/a&gt;
  LinkedIn
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmoQn-nW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/linkedin-app.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmoQn-nW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/linkedin-app.jpg" alt="A smartphone with a Linkedin app open"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn is a well-established business-oriented social networking website purchased by Microsoft in 2016 for an impressive $26 billion. The first mobile app has been initially built in Ruby on Rails, and then the tech team decided to switch to Node.js. According to Kiran Prasad, LinkedIn’s Mobile Development Lead, the main reason was its ability to scale, and the new app is 20 times faster and uses only a fraction of previous resources — servers were cut to 3 from 30.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter-lite"&gt;
  &lt;/a&gt;
  Twitter Lite
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rXifKvcV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/twitter-lite.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rXifKvcV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/twitter-lite.jpg" alt="Twitter Lite logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter’s ambition is to reach almost every internet user in the world. It seems there is just one major obstacle — poor internet connection and the cost of data in developing countries. The idea to tackle this problem was simple - to create a lightweight version of the Twitter application.&lt;/p&gt;

&lt;p&gt;Twitter Lite uses React and frontend and Node.js on the backend, which makes it accessible from any browser and any device. The Service Worker caches the content and makes it available even if the internet connection is currently down. According to Twitter, its Lite version loads in up to 5 seconds in incredibly slow 3G network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trello"&gt;
  &lt;/a&gt;
  Trello
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PbWzLS66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/Trello-Logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PbWzLS66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/Trello-Logo.png" alt="Trello logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trello is a good example of a single-page application that looks simple but requires complex work on the server-side. The creators of one of the most popular project management tools launched in 2011 have chosen Node.js as their core technology from the early days. Trello looks simple and it’s easy, and in fact, the team wanted to keep the simplicity of its first HTML mockup while creating a solid server and a maintainable client. Their choice fell on Node.js. Quoting the Trello blog, We knew we wanted instant propagation of updates, which meant that we needed to be able to hold a lot of open connections, so an event-driven, non-blocking server seemed like a good choice.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#iot-solutions"&gt;
  &lt;/a&gt;
  IoT Solutions
&lt;/h1&gt;

&lt;p&gt;Node.js is capable to handle a large volume of data generated by multiple concurrent requests and events coming from multiple IoT devices. No wonder we often see opinions that IoT and Node.js is the perfect match, and it’s safe to say that the number of IoT products developed with Node.js will only continue to grow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connected-boat"&gt;
  &lt;/a&gt;
  Connected boat
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--huSOj06F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/connected-boat.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--huSOj06F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/connected-boat.png" alt="Connectet Boat logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connected boat is an example of such an application, as it monitors key parameters of vessels through smart IoT sensors. The company needs to make sure everything is well monitored, as safety is one of the most significant concerns faced by boat owners. The mobile app built with Node.js together with sensors makes it possible for the owners to access all important information and to ensure the safety of the boat.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skycatch"&gt;
  &lt;/a&gt;
  Skycatch
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4wIskcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/skycatch-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4wIskcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/09/skycatch-logo.png" alt="Sky Catch logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Skycatch is another example of an IoT application powered by Node.js. It allows capturing high-quality drone imagery of the construction sites, and then process them in order to give their clients actionable insights about what is happening there. Drone monitoring is increasingly popular in the construction, mining, and energy industry because it surveying such vast sites traditionally is a huge and expensive task that drones can significantly improve.&lt;/p&gt;

&lt;p&gt;Skycatch uses Node.js in its backend development, data processing, and creating drones.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;All of the examples presented above prove that Node.js clearly reveals several advantages to both well-established companies and ambitious startups. At Forest Admin, we work with Node.js on a daily basis (&lt;a href="https://www.forestadmin.com/integration-page/nodejs-sequelize?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic&amp;amp;utm_content=nodejs-sequelize-lp"&gt;try our Node.js integration for free&lt;/a&gt;), and we can clearly see why a big part of our users has chosen Node.js to build their product with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;High speed of both development and use. Node.js is famous for its micro-services that allow for making changes in the set of features instead of the complete software. Code is reusable, execution faster, everything is scalable.&lt;/li&gt;
&lt;li&gt;High performance makes it a reliable technology, perfect for even the most demanding products&lt;/li&gt;
&lt;li&gt;The ability to process even massive volumes of real-time data makes it the first choice for applications such as Uber or Netflix.&lt;/li&gt;
&lt;li&gt;Access to a global pool of talent as Node.js is one of the most popular programming languages.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#are-you-looking-for-the-perfect-internal-tool-solution-for-your-nodejs-application-look-no-further-and-try-forest-admin-for-free"&gt;
  &lt;/a&gt;
  Are you looking for the perfect internal tool solution for your Node.js application? Look no further and &lt;a href="https://app.forestadmin.com/signup?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic&amp;amp;utm_content=nodejs-apps-examples"&gt;try Forest Admin for free.&lt;/a&gt; 🌲🌲🌲
&lt;/h2&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>startup</category>
    </item>
    <item>
      <title>EpyNN: Educational python for Neural Networks.</title>
      <author>Synthaze</author>
      <pubDate>Wed, 22 Sep 2021 11:36:55 +0000</pubDate>
      <link>https://dev.to/synthaze/epynn-educational-python-for-neural-networks-177g</link>
      <guid>https://dev.to/synthaze/epynn-educational-python-for-neural-networks-177g</guid>
      <description>&lt;p&gt;For those wishing to understand and build from basic implementations of Neural Network architectures, in Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Synthaze/EpyNN"&gt;EpyNN - Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://epynn.net"&gt;EpyNN - Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>How to create a JavaScript Dictionary?</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 22 Sep 2021 11:32:24 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-create-a-javascript-dictionary-5dmg</link>
      <guid>https://dev.to/hrishikesh1990/how-to-create-a-javascript-dictionary-5dmg</guid>
      <description>&lt;p&gt;In this short tutorial, we look at all the methods you could use to create a JavaScript Dictionary. We also look at a few limitations and caveats.&lt;/p&gt;

&lt;p&gt;If you are new to programming or JavaScript, we recommend you read through the entire article. However, If you are just looking for the code, you can skip to the code section below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-javascript-dictionary"&gt;
  &lt;/a&gt;
  Table of Contents - JavaScript Dictionary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#are-there-dictionaries-in-javascript"&gt;Are there dictionaries in JavaScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-javascript-dictionary"&gt;Creating a Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-accessing-amp-deleting-values"&gt;Adding &amp;amp; Deleting values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitation-and-caveats-javascript-dictionary"&gt;Limitations and Caveats - JavaScript Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#are-there-dictionaries-in-javascript"&gt;
  &lt;/a&gt;
  Are there dictionaries in JavaScript?
&lt;/h2&gt;

&lt;p&gt;No, as of now JavaScript does not include a native “Dictionary” data type. However, Objects in JavaScript are quite flexible and can be used to create key-value pairs. These objects are quite similar to dictionaries and work alike.&lt;/p&gt;

&lt;p&gt;Dictionaries are commonly used as each value stored has a unique key, and through these keys, their respective values can be accessed. This allows a lot of flexibility while reading and storing data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-javascript-dictionary"&gt;
  &lt;/a&gt;
  Creating a JavaScript Dictionary
&lt;/h2&gt;

&lt;p&gt;A dictionary can be created using two methods. The Object Literal method or by using the new keyword. However, we focus on the former. This is because it is very likely that you have used dictionaries before and this method follows a familiar syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-using-object-literals"&gt;
  &lt;/a&gt;
  Syntax using Object literals:
&lt;/h3&gt;

&lt;p&gt;To create an empty JavaScript dictionary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here “dict” is the name of the object.&lt;/p&gt;

&lt;p&gt;Initializing and creating a dictionary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eric&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
  &lt;span class="na"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Freelancer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;Skills&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-accessing-amp-deleting-values"&gt;
  &lt;/a&gt;
  Adding, accessing &amp;amp; deleting values
&lt;/h2&gt;

&lt;p&gt;Key-value pairs can be added while creating a JavaScript dictionary, however, these methods can also be used to add values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code-to-add-items"&gt;
  &lt;/a&gt;
  The code to add items:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here “key” refers to the name of the unique key and “value” is the respective data the key references to.&lt;/p&gt;

&lt;p&gt;In case the dictionary already contains the name you have passed as the key, you could either rename your key or you could use the following code to update the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Accessing items is also very straightforward; the following code can be used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code-to-access-items"&gt;
  &lt;/a&gt;
  The code to access items:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here “value” refers to the variable you are using to store the accessed key’s value.&lt;/p&gt;

&lt;p&gt;Deleting items is also easy. We use the delete keyword to delete the item.&lt;br&gt;
The code to delete items:&lt;br&gt;
delete dict.key;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-and-caveats-javascript-dictionary"&gt;
  &lt;/a&gt;
  Limitation and Caveats - JavaScript Dictionary:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The new object method can also be used but keeping readability in mind, I have suggested the above method.&lt;/li&gt;
&lt;li&gt;Be aware of your naming convention, I would recommend using a common style for all your keys. This would help access them easily.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>3D Button in React Native</title>
      <author>Abdul Wasey</author>
      <pubDate>Wed, 22 Sep 2021 10:19:45 +0000</pubDate>
      <link>https://dev.to/abdulwasey/3d-button-in-react-native-1h3</link>
      <guid>https://dev.to/abdulwasey/3d-button-in-react-native-1h3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you will learn how to build a basic 3dimensional looking button in react native. We will be utilizing the &lt;a href="https://reactnative.dev/docs/animated"&gt;&lt;strong&gt;Animated&lt;/strong&gt;&lt;/a&gt; module that is readily available in react native.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Lets get started
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FypV1pU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o15v8rvu3ysuxxx80jep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FypV1pU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o15v8rvu3ysuxxx80jep.png" alt="3D Button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/611533567" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  CODE
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TouchableWithoutFeedback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tailwind&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/tailwind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;toValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useNativeDriver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleButtonOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;toValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useNativeDriver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TouchableWithoutFeedback&lt;/span&gt;
      &lt;span class="nx"&gt;onPressIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;onPressOut&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tailwind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rounded-full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-rose-700&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;border-rose-700&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;
            &lt;span class="nx"&gt;tailwind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rounded-full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;items-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-red-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;border&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;border-red-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interpolate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;inputRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="na"&gt;outputRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                  &lt;span class="p"&gt;}),&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;]}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tailwind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;font-bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-lg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Animated.View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TouchableWithoutFeedback&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;Declare a animation variable and assign the value to 0. We need wrap it in the useRef hook to make sure the animation value persists any changes that might happen outside the 3D button component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The press animation starts on clicking the button where the &lt;code&gt;interpolate&lt;/code&gt; function is invoked changing the value from &lt;code&gt;0 to 1&lt;/code&gt;, this causes the &lt;code&gt;translateY&lt;/code&gt; value to change from &lt;code&gt;-5px to 0px&lt;/code&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;translateY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-5px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0px&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The above table shows how the value relates to the pixels changes, you can add more values and customize it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
  &lt;span class="na"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interpolate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;inputRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;outputRange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="p"&gt;})}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://reactnative.dev/docs/touchablewithoutfeedback#onpressin"&gt;&lt;code&gt;onPressIn&lt;/code&gt;&lt;/a&gt; triggers the function to change the &lt;code&gt;animation&lt;/code&gt; variable value to 1, we can assign a duration value of &lt;code&gt;50&lt;/code&gt; or &lt;code&gt;any number&lt;/code&gt;.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;toValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useNativeDriver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://reactnative.dev/docs/touchablewithoutfeedback#onpressout"&gt;&lt;code&gt;onPressOut&lt;/code&gt;&lt;/a&gt; function is triggered when the user presses out of the &lt;a href="https://reactnative.dev/docs/touchablewithoutfeedback"&gt;&lt;code&gt;TouchableWithoutFeedback&lt;/code&gt;&lt;/a&gt; where the value goes back to 0&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;toValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useNativeDriver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Hope you enjoyed this mini tutorial.&lt;br&gt;
&lt;em&gt;Abdul Wasey&lt;/em&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>tailwindcss</category>
      <category>3dbutton</category>
      <category>animation</category>
    </item>
    <item>
      <title>PHP libraries and tools</title>
      <author>Rubén Rubio</author>
      <pubDate>Wed, 22 Sep 2021 10:10:25 +0000</pubDate>
      <link>https://dev.to/filmineng/php-libraries-and-tools-3blf</link>
      <guid>https://dev.to/filmineng/php-libraries-and-tools-3blf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;We want the new project we are starting at Filmin to be robust. Therefore, besides adopting good coding practices, we checked some PHP libraries and tools that can help us improve its quality.&lt;/p&gt;

&lt;p&gt;Here is a list of the tools we analyzed with the description they have in its Github repository, excluding well known tools or libraries, such as PHPUnit.&lt;/p&gt;

&lt;p&gt;Most of these tools are CLI commands, so they can be integrated in a CI/CD flow. Others can be integrated within the IDE, such as Psalm or PHPStan in PHPStorm. And others are libraries that we use in our project.&lt;/p&gt;

&lt;p&gt;The list is based in our experience, and it is heavily influenced by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ramsey/status/1396592906102722561"&gt;https://twitter.com/ramsey/status/1396592906102722561&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/lulco/status/1397813303037079553"&gt;https://twitter.com/lulco/status/1397813303037079553&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ArkadiuszKondas/status/1338485275002068993"&gt;https://twitter.com/ArkadiuszKondas/status/1338485275002068993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/8rdTSYljts4"&gt;Aggressive PHP Quality Assurance in 2019 | Marco Pivetta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/brick/date-time"&gt;brick/date-time&lt;/a&gt;: Date and time library for PHP&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thecodingmachine/safe8/"&gt;thecodingmachine/safe&lt;/a&gt;: All PHP functions, rewritten to throw exceptions instead of returning false, now for php8&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tactician.thephpleague.com/"&gt;Tactician&lt;/a&gt;: A small, flexible command bus&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ronanguilloux/IsoCodes"&gt;ronanguilloux/isocodes&lt;/a&gt;: PHP library - Validators for standards from ISO, International Finance, Public Administrations, GS1, Manufacturing Industry, Phone numbers &amp;amp; Zipcodes for many countries&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://opensource.box.com/spout/"&gt;box/spout&lt;/a&gt;: Read and write spreadsheet files (CSV, XLSX and ODS), in a fast and scalable way&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flysystem.thephpleague.com/v2/docs/"&gt;league/flysystem&lt;/a&gt;: Abstraction for local and remote filesystems&lt;/li&gt;
&lt;li&gt;Serializer:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://symfony.com/doc/current/components/serializer.html"&gt;Symfony Serializer Component&lt;/a&gt;: The Serializer component is meant to be used to turn objects into a specific format (XML, JSON, YAML, …) and the other way around.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jmsyst.com/libs/serializer"&gt;JMS Serializer&lt;/a&gt;: This library allows you to (de-)serialize data of any complexity. Currently, it supports XML and JSON.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fractal.thephpleague.com/serializers/"&gt;Fractal&lt;/a&gt;: Fractal provides a presentation and transformation layer for complex data output, the like found in RESTful APIs, and works really well with JSON. Think of this as a view layer for your JSON/YAML/etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#code-quality"&gt;
  &lt;/a&gt;
  Code quality
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/qossmic/deptrac"&gt;Deptrac&lt;/a&gt;: Keep your architecture clean.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://phpinsights.com/"&gt;PHP Insights&lt;/a&gt;: Instant PHP quality checks from your console&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/phpro/grumphp"&gt;GrumPHP&lt;/a&gt;: A PHP code-quality tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bmitch/churn-php"&gt;churn-php&lt;/a&gt;: Discover files in need of refactoring.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://psalm.dev/"&gt;Psalm&lt;/a&gt;: A static analysis tool for finding errors in PHP applications. Plugins:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/boesing/psalm-plugin-stringf"&gt;boesing/psalm-plugin-stringf&lt;/a&gt;: Psalm plugin to provide more details for sprintf, printf, sscanf and fscanf functions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hectorj/safe-php-psalm-plugin"&gt;hectorj/safe-php-psalm-plugin&lt;/a&gt;: vimeo/psalm plugin for thecodingmachine/safe.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marartner/psalm-no-empty"&gt;marartner/psalm-no-empty&lt;/a&gt;: Psalm plugin to detect usage of empty().&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marartner/psalm-strict-equality"&gt;marartner/psalm-strict-equality&lt;/a&gt;: Psalm plugin to enforce strict equality.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/psalm/psalm-plugin-phpunit"&gt;psalm/plugin-phpunit&lt;/a&gt;: A PHPUnit plugin for Psalm.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/psalm/psalm-plugin-symfony"&gt;psalm/plugin-symfony&lt;/a&gt;: Psalm Plugin for Symfony.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/psalm/psalm-plugin-doctrine"&gt;weirdan/doctrine-psalm-plugin&lt;/a&gt;: Stubs to let Psalm understand Doctrine better.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://phpstan.org/"&gt;PHPStan&lt;/a&gt;: PHP Static Analysis Tool - discover bugs in your code without running it!. Plugins:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ergebnis/phpstan-rules"&gt;ergebnis/phpstan-rules&lt;/a&gt;: Provides additional rules for phpstan/phpstan.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spaze/phpstan-disallowed-calls"&gt;spaze/phpstan-disallowed-calls&lt;/a&gt;: PHPStan rules to detect disallowed calls and constant &amp;amp; namespace usages&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/no-floaters"&gt;roave/no-floaters&lt;/a&gt;: static analysis rules to prevent IEEE-754 floating point errors.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://phpstan.org/user-guide/extension-library"&gt;More extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://infection.github.io/"&gt;Infection&lt;/a&gt;: PHP Mutation Testing library. Plugins:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/infection-static-analysis-plugin"&gt;roave/infection-static-analysis-plugin&lt;/a&gt;: Static analysis on top of mutation testing - prevents escaped mutants from being invalid according to static analysis&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bitExpert/captainhook-infection"&gt;bitexpert/captainhook-infection&lt;/a&gt;: Captain Hook Plugin to run InfectionPHP only against the changed files of a commit&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/no-leaks"&gt;roave/no-leaks&lt;/a&gt;: PHPUnit Plugin for detecting Memory Leaks in code and tests&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lulco/populator"&gt;lulco/populator&lt;/a&gt;: Allows populate fake data to your database.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thephpleague/openapi-psr7-validator"&gt;OpenAPI PSR-7 Message (HTTP Request/Response) Validator&lt;/a&gt;:
It validates PSR-7 messages (HTTP request/response) against OpenAPI specifications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paratestphp/paratest"&gt;Paratest&lt;/a&gt;: Parallel testing for PHPUnit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#composer-tools"&gt;
  &lt;/a&gt;
  Composer tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/maglnet/ComposerRequireChecker"&gt;ComposerRequireChecker&lt;/a&gt;: A CLI tool to check whether a specific composer package uses imported symbols that aren't part of its direct composer dependencies&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/composer-unused/composer-unused"&gt;composer-unused&lt;/a&gt;: Show unused composer dependencies by scanning your code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ergebnis/composer-normalize"&gt;composer-normalize&lt;/a&gt;: Provides a composer plugin for normalizing composer.json.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/SecurityAdvisories"&gt;roave/security-advisories&lt;/a&gt;: Security advisories as a simple composer exclusion list, updated daily&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Roave/BackwardCompatibilityCheck"&gt;roave/backward-compatibility-check&lt;/a&gt;: Tool to compare two revisions of a class API to check for BC breaks&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fabpot/local-php-security-checker"&gt;Local PHP Security Checker&lt;/a&gt;: PHP security vulnerabilities checker&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://robo.li/"&gt;Robo&lt;/a&gt;: Modern Task Runner for PHP&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/captainhookphp/captainhook"&gt;CaptainHook&lt;/a&gt;: Very flexible git hook manager for php developers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is a huge amount of tools written by the PHP community that helps us increase the quality of our project, and that ease our task as developers. We need to choose the ones that adapt better to our project and use case.&lt;/p&gt;

&lt;p&gt;And you? Do you know any interesting tool that is not in this list?&lt;/p&gt;

</description>
      <category>php</category>
      <category>tooling</category>
      <category>codequality</category>
      <category>libraries</category>
    </item>
    <item>
      <title>How to import a function from a module to the main script?</title>
      <author>101samovar</author>
      <pubDate>Wed, 22 Sep 2021 09:54:59 +0000</pubDate>
      <link>https://dev.to/101samovar/how-to-import-a-function-from-a-module-to-the-main-script-2g09</link>
      <guid>https://dev.to/101samovar/how-to-import-a-function-from-a-module-to-the-main-script-2g09</guid>
      <description>&lt;p&gt;There is a site with the main script.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zz6HVtUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or1p8mpwoeisixyvfg4g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zz6HVtUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or1p8mpwoeisixyvfg4g.PNG" alt="101samovar"&gt;&lt;/a&gt;&lt;br&gt;
To use the import statement we gotta set the type of main script to module.&lt;/p&gt;

&lt;p&gt;There is another JS-file with a function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3nXt17K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6k8kydoifp446w6a8tz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3nXt17K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6k8kydoifp446w6a8tz.PNG" alt="101samovar"&gt;&lt;/a&gt;&lt;br&gt;
Let this function return an inverted value.&lt;br&gt;
This file is a separate module.&lt;br&gt;
The module exports the inverse function.&lt;br&gt;
In the main script we import the inverse function from the helper module.&lt;br&gt;
Let’s use it and log out the inverted value of 2.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GcgYJLaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j7d06ffm0yu7gefbcvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GcgYJLaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j7d06ffm0yu7gefbcvb.png" alt="101samovar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run the site we need a web-server.&lt;br&gt;
The live-server will do. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz3GQCEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qeek1agpmhpwbe2phvb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz3GQCEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qeek1agpmhpwbe2phvb.PNG" alt="101samovar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s get it started.&lt;br&gt;
So, here is the answer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gh2f2exf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8on5jmfdj5eupl5p2rc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gh2f2exf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8on5jmfdj5eupl5p2rc.PNG" alt="101samovar"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;👋 See you next time. Have a nice day!&lt;/p&gt;

&lt;p&gt;Subscribe to our channel:&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Samovar101"&gt;https://www.youtube.com/c/Samovar101&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
