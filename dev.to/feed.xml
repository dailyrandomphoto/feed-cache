<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Open Source Software Product Development, Building DDTJ  - Day 1</title>
      <author>Shai Almog</author>
      <pubDate>Mon, 20 Dec 2021 09:23:15 +0000</pubDate>
      <link>https://dev.to/codenameone/open-source-software-product-development-building-ddtj-day-1-5de9</link>
      <guid>https://dev.to/codenameone/open-source-software-product-development-building-ddtj-day-1-5de9</guid>
      <description>&lt;p&gt;I’m on a two-week vacation from Lightrun and I have this urge to build something new. I also have a great product idea: DDT. In the past I built many projects, both commercial and open source. I never documented the complete process. This is something I’d like to change. So in this blog I'll go over that process from concept development to product prototype. Notice that this process is identical for proprietary software too, it's a remarkably similar approach. &lt;/p&gt;

&lt;p&gt;You, the reader, have a crucial part in this: You’re my “daily”. I don't have project and product managers who can keep me in check, so I need you...&lt;/p&gt;

&lt;p&gt;Procrastination is the biggest point of failure in any project. It’s where projects rise or fall. In normal company settings, we have daily meetings to combat that. You know you’ll have to stand in front of the entire team tomorrow to talk about what you did. So you’ve got to “do something” so you’ll be covered in the daily meeting. &lt;/p&gt;

&lt;p&gt;With a single person open source project, you’re all alone. There’s no product team to report to, no product roadmap and you can’t get fired. Procrastination becomes a major temptation. That’s where blogging can help by leveraging the power of the open source community. I hope you will keep me “honest”, I need you to read and follow this so stopping would be embarrassing. But I also need you to ask questions and help keep me focused on the product strategy. It's easy to get carried away and try to create an overly complex product. If it looks like I'm straying from &lt;a href="https://www.agilealliance.org/glossary/mvp/"&gt;MVP&lt;/a&gt;, please call me out on that. &lt;/p&gt;

&lt;p&gt;I plan to write 10 blog posts until we have a working first version of the project. I’ll skip working weekends because my family would murder me if I do that... I hope I'll be able to keep the pace and document this process well. I also hope it will be entertaining. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-process"&gt;
  &lt;/a&gt;
  The Process
&lt;/h2&gt;

&lt;p&gt;I already went through the first major part, which is the product idea. I think a lot has been written about idea generation so I won't bother writing about that. As I said, the idea I'm working on is DDT (or DDTJ to be exact), I'll get to that soon enough.&lt;/p&gt;

&lt;p&gt;This is the plan for the next 10 days. I don’t know if I’ll be able to stick to it or exceed it, but that’s my general direction. It isn't "really" product management, but in the early stage a hacker mentality is more useful than an organized process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial Developer Guide and Basic Design&lt;/li&gt;
&lt;li&gt;Scaffold the project and implement CI&lt;/li&gt;
&lt;li&gt;Connect to server with initial server unit tests&lt;/li&gt;
&lt;li&gt;Implement the first version of CLI&lt;/li&gt;
&lt;li&gt;Implement mocking abstraction logic&lt;/li&gt;
&lt;li&gt;Create tests for mocking well known libraries
*Performance and Integration tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a flexible guideline and not as a product roadmap. As I move forward, I’m leaving room for mistakes, omissions and delays. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#target-market"&gt;
  &lt;/a&gt;
  Target Market
&lt;/h3&gt;

&lt;p&gt;There’s one thing that’s missing from this list, which I already did. You need to validate the concept of the project you’re working on, a "product to market fit". There’s a famous “quote” of Henry Ford:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“If I had asked people what they wanted, they would have said faster horses.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But the thing is, &lt;a href="https://quoteinvestigator.com/2011/07/28/ford-faster-horse/"&gt;he didn’t say that&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;It’s also a bullshit concept. People wanted cars and asked for them. Ford built what people asked for: faster, cheaper cars. So did every innovator. A Successful product or successful open source project starts with a need by real people. &lt;/p&gt;

&lt;p&gt;When I explain this to people I often get the response that this is "closed source" thinking related to proprietary software. That's just wrong, open source software needs a proper product development process just like any proprietary software tool. We want people to use our tools... But we want them to spend time with our tools and time is money. We need to offer a sublime product concept regardless of our source license!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-guide-is-first"&gt;
  &lt;/a&gt;
  Developer Guide is First
&lt;/h3&gt;

&lt;p&gt;I sorted the list in mostly chronological order. I’m a big believer in very “light” design. I really can't stand these huge documents that end up as a legacy of all our mistakes. &lt;/p&gt;

&lt;p&gt;You can’t debug design. There are some cases where it's very warranted, but they are usually the exception, not the rule.&lt;/p&gt;

&lt;p&gt;I usually start by creating a simple developer guide for the final physical products. This has the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It forces us to think first about the finished product. How it will look and feel&lt;/li&gt;
&lt;li&gt;We maintain it since it's the guide, it won't go too stale. A "living" document is important&lt;/li&gt;
&lt;li&gt;It lets us focus our product strategy on specific goals. E.g. this block in the guide relates to that module in the system&lt;/li&gt;
&lt;li&gt;It explains the product to other people. Testing product to market fit is important and having a clear guide is crucial&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I finished the first draft of the developer guide for DDTJ today. You can check it out &lt;a href="https://github.com/ddtj/ddtj"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scaffolding-amp-ci"&gt;
  &lt;/a&gt;
  Scaffolding &amp;amp; CI
&lt;/h2&gt;

&lt;p&gt;I'm a believer in creating mocks for all the big pieces first. Deciding on the big set pieces and flushing them out together. The logic behind this is to see the first full stack process running as soon as possible to find any conceptual problems we might have. It also helps the development teams move faster when we have more than one developer. We can find our respective sandboxes.&lt;/p&gt;

&lt;p&gt;In our specific architecture, we have three tiers and a common library among them. We can always refactor after the MVP so we shouldn't get too hung up on decisions. A major part of the scaffolding is the choice of technologies. Mostly, this isn't a big deal. However, we need to limit our scope and be wary of RDD (Resume Driven Design) which is a silent but deadly project killer.&lt;/p&gt;

&lt;p&gt;Having a CI build in place with some code quality verification is just good common sense. Especially with security, static analysis, etc. This is important even when there's just one person working on the project...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-ddt-or-ddtj"&gt;
  &lt;/a&gt;
  So What's DDT or DDTJ?
&lt;/h2&gt;

&lt;p&gt;I'll discuss the other points as we move forward, but let's talk a bit about the project. It would be great if you can follow it here.&lt;/p&gt;

&lt;p&gt;DDT stands for Development Driven Testing. DDTJ is the implementation of the DDT idea.&lt;/p&gt;

&lt;p&gt;The idea is simple. When we have a bug at pretty much any company, there's a requirement to add a test that fails for the bug.This is often harder to do than the fix itself. DDT is about fixing the bug and running your server. Then generating the unit test for the case that failed.&lt;/p&gt;

&lt;p&gt;Unit tests are normally easy to write but the mocks aren't trivial. That's where DDT will try to shine.&lt;/p&gt;

&lt;p&gt;There are many other uses for the basic technology, e.g. we can detect when code that isn't covered by tests is reached and generate unit tests for that code automatically. But that's not part of the MVP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-product-management-roadmap"&gt;
  &lt;/a&gt;
  The Product Management Roadmap
&lt;/h3&gt;

&lt;p&gt;I said there's no roadmap, but I planned the MVP, which is a bit of a roadmap. There's a minimum we need to "prove" DDT is useful. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A CLI that generates the tests&lt;/li&gt;
&lt;li&gt;Support for Java with Spring Boot applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've set these goals since they will provide something useful for a large enough community and I know Java/Spring Boot well enough. I want the architecture to be generic since the concept is translatable to most languages and frameworks. So if the MVP is successful, DDT will add support to additional platforms/languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-challenges"&gt;
  &lt;/a&gt;
  Technical Challenges
&lt;/h2&gt;

&lt;p&gt;To be clear, I'm not sure if DDT is technically workable. So I'll try to prove it with a product prototype as soon as possible. I think that even if the product development fails, there's still a lot to learn, so this will still be a valuable experience.&lt;/p&gt;

&lt;p&gt;I need to be prepared though, so I've given a lot of thought to the challenges that lie ahead and organized them in this ordered list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It isn't possible - Essentially I would need to monitor every method in a running application. Initially, I thought I would use the debugger API to walk through the app. But I'm not sure that would scale. I'm considering bytecode manipulation, but that has its own problems. The main issue is one of scale. The debugger approach will work for a small application but might fail for larger apps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance - it might be impractical because it has such a significant impact on performance, making the application unusable. It might consume too much RAM in real-world applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generating mocks might be difficult - the generation phase would be pretty difficult since we need to understand the classes involved. We need to generate mocking code that compiles for classes we've never "seen". &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supporting other languages/platforms might be challenging. They don't all have the same capabilities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'll address these concerns in my following posts as I explain my architectural choices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;Tomorrow I plan to talk about why I made some of my architectural choices and how you should choose the right tools for building your MVP.&lt;/p&gt;

&lt;p&gt;I will also plan to talk about the scaffolding process and how I got started with the project. &lt;/p&gt;

&lt;p&gt;If you want to get updates on what I've been up to. Please &lt;a href="https://twitter.com/debugagent"&gt;follow me on twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>tutorial</category>
      <category>opensource</category>
      <category>product</category>
    </item>
    <item>
      <title>Learn how to use the forEach method in JS!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Mon, 20 Dec 2021 09:23:06 +0000</pubDate>
      <link>https://dev.to/ziratsu/learn-how-to-use-the-foreach-method-in-js-3im</link>
      <guid>https://dev.to/ziratsu/learn-how-to-use-the-foreach-method-in-js-3im</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;forEach&lt;/em&gt; method is really handy when you’re working with arrays or nodelists. &lt;br&gt;
It allows you to run a callback function for each element in those containers. &lt;br&gt;
Let’s learn how to use it in less than a minute!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RovdEv8NHPg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-how-to-use-it"&gt;
  &lt;/a&gt;
  1. How to use it.
&lt;/h2&gt;

&lt;p&gt;To use it, you need to feed it with a callback function, which can take up to three parameters. &lt;br&gt;
Those parameters are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The current value&lt;/li&gt;
&lt;li&gt;The index&lt;/li&gt;
&lt;li&gt;And the array/nodelist that you’re working with.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Take a look in your console/terminal and you’ll see:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PjrZIyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdig7ut95o1hqyvmn4tv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PjrZIyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdig7ut95o1hqyvmn4tv.png" alt="image of console" width="778" height="174"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-lets-create-three-buttons-to-have-a-real-example"&gt;
  &lt;/a&gt;
  2. Let’s create three buttons to have a real example.
&lt;/h2&gt;

&lt;p&gt;In an HTML file, create three buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"modify"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Modify&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"delete"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"update"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your JS file, select the buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The .queryAll method returns a nodelist, and the nodelists also have access to the forEach method in their prototype.&lt;/p&gt;

&lt;p&gt;Thus, we can use it to attach an event listener to each button :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;buttons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-action&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a basic example but you now know how useful this method is!&lt;br&gt;
You can easily avoid code repetition.&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>html</category>
    </item>
    <item>
      <title>👨‍💻 DynamoDB for every developer</title>
      <author>Mohamed Fayaz</author>
      <pubDate>Mon, 20 Dec 2021 09:21:20 +0000</pubDate>
      <link>https://dev.to/aws-builders/dynamodb-for-every-developers-3n6n</link>
      <guid>https://dev.to/aws-builders/dynamodb-for-every-developers-3n6n</guid>
      <description>&lt;h4&gt;
  &lt;a href="#understanding-the-databases-is-important-for-every-developer-and-the-arising-cloud-services-bring-the-best-in-class-tools-and-technologies-for-every-developer-to-build-applications-in-hours"&gt;
  &lt;/a&gt;
  Understanding the databases is important for every developer, and the arising cloud services bring the best in class tools and technologies for every developer to build applications in hours.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#database-is-a-critical-component-for-any-application-nosql-database-has-become-a-widely-popular-choice-for-various-solutions-from-web-to-machine-learning-applications"&gt;
  &lt;/a&gt;
  Database is a critical component for any application. NoSQL database has become a widely popular choice for various solutions from web to machine learning applications.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#lets-understand-one-of-the-most-popular-cloud-database-services-called-dynamodb"&gt;
  &lt;/a&gt;
  Let's understand one of the most popular cloud database services called DynamoDB.
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dynamodb"&gt;
  &lt;/a&gt;
  ❓What is DynamoDB?
&lt;/h2&gt;

&lt;p&gt;DynamoDB is a fully managed NoSQL database from Amazon Web Services (AWS). It is a document database which means the data is stored in key/value pairs. The  DynamoDB stores the data across 3 different availability zones in a region. &lt;/p&gt;

&lt;p&gt;Since it is a fully managed service, DynamoDB is well suited for various workloads with any amount of data that require auto-scaling from small to large and anywhere in between. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-benefits-of-using-dynamodb"&gt;
  &lt;/a&gt;
  📌 Key Benefits of using DynamoDB
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;⚡ Elasticity and Performance &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally scaling databases is hard and risky, but DynamoDB gives you the ability to auto-scale based on the usage which allows your system to adjust according to the traffic and other needs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🦾 Security &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access control policies and encryptions are available for your tables, so it makes the database more secure and accessible to the appropriate users without any bottlenecks. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; 🏁 Real-time event streaming &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DynamoDB streams enable developers to access the data when it happens which makes the DynamoDB suitable for many complex solutions. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; 🧰 Database Management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DynamoDB creates and keeps the backup of your data safely on the cloud, so in the event of any occurrence, you can safely retrieve the data. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; ⏲️ Time to Live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TTL allows you to define when to expire the items in a table so they get deleted automatically from the database. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  ✅ Considerations
&lt;/h3&gt;

&lt;p&gt;Some of the important guidelines to assess your suitability of using DynamoDB are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DynamoDB is well suitable for any business-critical applications which require higher scalability and is predominantly used for transactions processing (OLTP)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DynamoDB is not suitable for data warehousing and OLAP purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#read-and-write-consistency"&gt;
  &lt;/a&gt;
  ⭐ &lt;strong&gt;Read and Write Consistency&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DynamoDB supports two types of reading such as &lt;strong&gt;Eventually Consistent Read&lt;/strong&gt; and &lt;strong&gt;Strongly Consistent Read&lt;/strong&gt;, By default, it is set to Eventually Consistent Read. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the Eventually consistent read, data may not be consistent as the copies of data will generally be available in 1 second. Whereas, a Strongly consistent read will always be up-to-date since it fetches the straight from the leader node. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DynamoDB does not support strongly consistent reads across AWS regions &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#throughputs-and-capacity-management"&gt;
  &lt;/a&gt;
  🌋Throughputs and Capacity Management
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DynamoDB offers two capacity modes, &lt;strong&gt;Provisioned&lt;/strong&gt; and &lt;strong&gt;On-Demand&lt;/strong&gt;. In the Provisioned mode, the developer would need to define the read and write capacity of the database. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On-demand mode is a flexible way to provision your DynamoDB tables to serve thousands of requests without doing any capacity planning.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switching between provisioned and on-demand modes can be done once every 24 hours.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#calculating-read-and-write-capacity-units"&gt;
  &lt;/a&gt;
  👨‍🔬 Calculating Read and Write Capacity Units
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#read-capacity-units-rcu"&gt;
  &lt;/a&gt;
  Read Capacity Units (RCU)
&lt;/h3&gt;

&lt;p&gt;Read capacity units represents one strongly consistent read per second or two eventually consistent reads per second for an item of up to 4KB.&lt;/p&gt;

&lt;p&gt;Let's see how we calculate RCU for strongly consistent read: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 read RCU = 1 strongly consistent read of up to 4kb, So let's take an example of 50 reads at 40KB: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;= 50 X 40/4 = 500 RCUs &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For eventually consistent reads, it's two reads of up to 4KB. As an example of the same 50 reads at 40 KB:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;= 50/2 X 40/4 = 250  RCUs&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-capacity-units-wcu"&gt;
  &lt;/a&gt;
  Write Capacity Units (WCU)
&lt;/h3&gt;

&lt;p&gt;One write capacity unit represents one write of 1 KB per second, so for example, if we need 50 writes of 40 KB per item:&lt;/p&gt;

&lt;p&gt;= 50 X 40 = 2000 WCUs&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#partitions"&gt;
  &lt;/a&gt;
  📑 Partitions
&lt;/h2&gt;

&lt;p&gt;The partitions in DynamoDB slice the table as multiple chunks of data for faster reads. It automatically creates partitions on every 10GB of data or when your application exceeds 3000 RCUs or 1000 WCUs in a single partition. Generally, DynamoDB will try to evenly distribute the RCU and WCU capacities across the partitions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primary-key-hash-and-sort-key-range"&gt;
  &lt;/a&gt;
  🔑 Primary Key (HASH) and Sort Key (RANGE)
&lt;/h2&gt;

&lt;p&gt;The primary key determines the partition to store the data, so it is important to get the primary key correct to be able to distribute the data across the partitions for better performance. &lt;/p&gt;

&lt;p&gt;DynamoDB can have two keys &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primary Key&lt;/li&gt;
&lt;li&gt;Sort Key &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Primary Key&lt;/strong&gt; can either be simple or composite keys. Composite keys consist of both a partition and a sort key. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sort Key&lt;/strong&gt; helps to organize the data in DynamoDB. So sort keys logically group the data in one place for efficient querying purposes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#secondary-indexes"&gt;
  &lt;/a&gt;
  🤖 Secondary Indexes
&lt;/h2&gt;

&lt;p&gt;DynamoDB allows your application to query the table using an alternate key, in addition to queries against the primary key. The two types of indexes are as follows: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global Secondary Index (GSI) &lt;br&gt;
An index with a partition key and sort key that can be different. It only supports eventually consistent reads, and it can be created or modified at any time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local Secondary Index (LSI) &lt;br&gt;
An index that has the same partition key as the table, but a different sort key. It supports strongly or eventual consistent reads, and it can be created only during the initial table creation. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dax"&gt;
  &lt;/a&gt;
  🚀 DAX
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DynamoDB Accelerator (DAX) is a fully managed, highly available, in-memory cache for DynamoDB. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DAX can reduce the response times to microseconds. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DAX only supports the server-side encryption &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DAX is not ideal for write-intensive workloads &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backups-and-monitoring"&gt;
  &lt;/a&gt;
  ⛑️ Backups and Monitoring
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DynamoDB provides on-demand backup capability as well as enable point-in-time recovery for your DynamoDB tables. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backups includes the data, indexes, streams and provisioned capacity of RCU's and WCU's &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DynamoDB usage can be monitored using CloudWatch and CloudTrail. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Lessons Learnt Making my First Proper Website</title>
      <author>Dave Henson</author>
      <pubDate>Mon, 20 Dec 2021 09:12:58 +0000</pubDate>
      <link>https://dev.to/dwhenson/lessons-learnt-making-my-first-proper-website-32co</link>
      <guid>https://dev.to/dwhenson/lessons-learnt-making-my-first-proper-website-32co</guid>
      <description>&lt;p&gt;It’s not finished by a long way, but &lt;a href="https://dwhenson.com/"&gt;my personal site&lt;/a&gt; is my first attempt at building something from scratch with no design brief or guidance to follow. A total “blank canvas”; pretty intimidating stuff! Once I got started and into the technical stuff I really enjoyed it; the main issue now is that I think I could go on tweaking things forever…&lt;/p&gt;

&lt;p&gt;Here’s my take-aways if you are thinking of building your own site for the first time:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#just-start"&gt;
  &lt;/a&gt;
  Just start
&lt;/h2&gt;

&lt;p&gt;Honestly just start. I know everyone says this, but really, just start. I was waiting until I had a good number of decent projects that I was happy with to showcase (still not the case), and was thinking about how I could "wow" people so much they’d instantly want me to join their team. Then I asked around about the best approach and the overwhelming consensus (from, like, everyone) was to just get on build something, get it out there and improve later. Looking back now this was very good advice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-is-hard"&gt;
  &lt;/a&gt;
  Design is Hard
&lt;/h2&gt;

&lt;p&gt;I’ve never really designed anything before, beyond a PowerPoint slide, so I wasn’t really sure how to go about this. I knew that I wanted my site to feel friendly, welcoming and not to take itself too seriously. The two things I knew would help with this were the colours I chose and the fonts.&lt;/p&gt;

&lt;p&gt;I chose colours first and just went for bold primary colours because, well, it seemed easy and obvious (and it reminded me of Lego). For fonts I knew I just wanted something clean and simple for the body, and something quirky, but readable, for the headings, so I just went to Google Fonts and chose something. I didn’t look elsewhere.&lt;/p&gt;

&lt;p&gt;Regarding page layout and other design features I did or didn’t add, my overall approach reminds me of how I wrote CSS when I was rubbish at it: basically try something and if it doesn’t work, try another thing until I can just about live with the result, even if I’m not 100% sure why the change made things better.&lt;/p&gt;

&lt;p&gt;I knew I just wanted a very simple structure, focused on showing my work and writing, and how to get in touch, so the architecture of the site was quite simple. Generally with the design side of things once things were “OK” I just went with it rather than loose momentum and get lost down endless rabbit holes of details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-some-content-ready"&gt;
  &lt;/a&gt;
  Have Some Content Ready
&lt;/h2&gt;

&lt;p&gt;I kinda knew this day would come so I’d actually been recording some of my experiences learning to code since I started way back in 2018. I don’t think the articles will win any prizes, but at least it gave me some content to work with. I also have a stack of articles on things I’ve made that I should incorporate (another one for the todo list…).&lt;/p&gt;

&lt;p&gt;I should also say that writing &lt;strong&gt;good&lt;/strong&gt; content is hard. It still feels strange to be sat here writing things that I feel are kind of obvious now. But again, just like the site design, I just have to start. I think that now that I actually have somewhere to put out what I have written it will make all this seem more real, and force me to up my game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-stress-about-the-stack"&gt;
  &lt;/a&gt;
  Don’t Stress About the Stack
&lt;/h2&gt;

&lt;p&gt;I feel a bit pretentious even writing about a “stack” but there we have it. For me this was pretty simple. I wanted the site to be fast, secure, and easy to update. I only know one static site generator (eleventy) so I went with that. So far this choice has proven to be pretty good and I’m happy with it.&lt;/p&gt;

&lt;p&gt;I’d not tried &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; before, but wanted to as I’d heard a lot of good things about them. I have to say, aside from the hype, my experience with them has been excellent. I am using their forms feature on the contact page and it was really simple to set up. I also set up things so that the font files are cached, which again they made super easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-the-thing"&gt;
  &lt;/a&gt;
  Build the Thing
&lt;/h2&gt;

&lt;p&gt;Finally, we get to talk about actually building the site. I’d done other sites approaching a similar size and complexity before, but not quite at this level. That said, although it took a while, scaffolding out the site was actually OK as I was only focused on that side of things and as I’d already dealt with the design and other details.&lt;/p&gt;

&lt;p&gt;What actually got to me, and still needs sorting, is the long-tail of things that need to be sorted in order for a site to be considered close to completion, and have, what I hope would be, a polished feel to it. I still have a long todo list of things that I’d like to address on the repos’s readme and I am sure I am missing many more.&lt;/p&gt;

&lt;p&gt;On the design side of things, this included addressing hover, active, selected states, transitions on buttons and other elements, styles that I missed when setting up the CSS for links, quotes, blockquotes. On the development side, testing in browsers and screen readers, sorting font loading (still not happy), optimising images, and performance.&lt;/p&gt;

&lt;p&gt;That’s just stuff I’ve done. The todo list goes on…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#track-your-time-i-like-to-anyway"&gt;
  &lt;/a&gt;
  Track Your Time (I like to anyway)
&lt;/h2&gt;

&lt;p&gt;Overall I spent a totally of around 38 hours building the site. This includes everything from npm install to the moment I’m writing this. I think the bulk of the site was complete in about 30 hours. Since then I’ve been fiddling around down in the details. Most of this has probably been trying to fix the FOUT that I’m still not happy with!&lt;/p&gt;

&lt;p&gt;Overall I’ve already learnt a lot making this site, and now I have something to work with I’m super excited about trying to take things further and improve both its design and performance. I want to try a CDN for images [UPDATE: tried this over the weekend!], service workers for fonts, and add in some fun animations. I guess a personal site is never really finished? And that’s just fine with me.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dwhenson.com"&gt;I’m Dave&lt;/a&gt;. I love building fast, easy-to-use and accessible websites. I’m a frontend developer with a strong focus on accessible HTML, modern CSS and vanilla JavaScript. I’m looking for my next opportunity as a frontend web developer starting in 2022. I'd love to hear from you; please do &lt;a href="https://dwhenson.com/contact/"&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post first appeared on &lt;a href="https://dwhenson.com/posts/lessons-learnt-making-my-first-proper-website/"&gt;dwhenson.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginner</category>
      <category>eleventy</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>21 Binary Tree Interview Questions for Programmers</title>
      <author>javinpaul</author>
      <pubDate>Mon, 20 Dec 2021 08:57:27 +0000</pubDate>
      <link>https://dev.to/javinpaul/21-binary-tree-interview-questions-for-programmers-42bh</link>
      <guid>https://dev.to/javinpaul/21-binary-tree-interview-questions-for-programmers-42bh</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Falgorithms-and-data-structures-in-python%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gOE27CM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AbhnjFh3ZeWNlAtg1unulTw.png" alt="best binary tree interview questions for beginners" width="860" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, I have been sharing a lot of resources about programming job interviews like the &lt;a href="https://medium.com/javarevisited/10-best-books-for-data-structure-and-algorithms-for-beginners-in-java-c-c-and-python-5e3d9b478eb1"&gt;books&lt;/a&gt;, &lt;a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927"&gt;courses&lt;/a&gt;, and some interview questions on the &lt;a href="https://medium.com/javarevisited/25-software-design-interview-questions-to-crack-any-programming-and-technical-interviews-4b8237942db0"&gt;software design&lt;/a&gt; and data structures like an &lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html#axzz5dCg1cNYo"&gt;array&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45"&gt;string&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/top-20-linked-list-coding-problems-from-technical-interviews-90b64d2df093"&gt;linked list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far, we have looked at only the &lt;strong&gt;linear data structures&lt;/strong&gt;, like an array and linked list, but all information in the real world cannot be represented in a linear fashion, and that's where tree data structure helps.&lt;/p&gt;

&lt;p&gt;A tree data structure is a hierarchical data structure that allows you to store hierarchical data like a family tree or office hierarchy. Depending on how you store data, there are different types of trees, such as a &lt;a href="http://javarevisited.blogspot.sg/2016/07/binary-tree-preorder-traversal-in-java-using-recursion-iteration-example.html"&gt;binary tree&lt;/a&gt;, where each node has, at most, two child nodes.&lt;/p&gt;

&lt;p&gt;Along with its close cousin &lt;a href="http://javarevisited.blogspot.sg/2017/04/recursive-binary-search-algorithm-in-java-example.html"&gt;binary search tree&lt;/a&gt;, it's also one of the most popular tree data structures. &lt;/p&gt;

&lt;p&gt;Therefore, you will find a lot of questions based on them, such as how to traverse them, count nodes, find depth, and check if they are balanced or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A key point to solving binary tree questions is a strong knowledge of theory,&lt;/strong&gt; like what is the size or depth of the binary tree, what is a leaf, and what is a node, as well as an understanding of the popular traversing algorithms, like pre-order, post-order, and in-order traversal.&lt;/p&gt;

&lt;p&gt;If you are not familiar with these concepts then I strongly suggest you to first go through a comprehensive data structure and algorithm course like&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;strong&gt;Data Structures and Algorithms: Deep Dive Using Java&lt;/strong&gt;&lt;/a&gt; which explains essential data structure in detail. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Oe2Tmij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-d5raKl4Ft04/X_PmheVHgtI/AAAAAAAAlgI/PfQINWkuVmMGtGoCXLif11r-VBaNL-L1gCLcBGAsYHQ/w1200-h630-p-k-no-nu/Essential%252BData%252Bstructure%252Bfor%252BJava%252Bdevelopers.png" alt="Java67: 6 Essential Data Structures Java Programmer should Learn in 2022" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#top-20-binary-tree-interview-questions-for-programmers"&gt;
  &lt;/a&gt;
  Top 20 Binary Tree Interview Questions for Programmers
&lt;/h2&gt;

&lt;p&gt;Now that you know how to solve binary tree-based coding problem using &lt;a href="https://www.educative.io/courses/recursion-for-coding-interviews-in-java?affiliate_id=5073518643380224"&gt;recursion&lt;/a&gt; and some tips about solving tree-based coding problems, here is a list of popular binary tree-based coding questions from software engineer or developer job interviews:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;How is a binary search tree implemented? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2015/10/how-to-implement-binary-search-tree-in-java-example.html#axzz4wnEtnNB3"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;How do you perform preorder traversal in a given binary tree? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2016/07/binary-tree-preorder-traversal-in-java-using-recursion-iteration-example.html#axzz5ArdIFI7y"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;How do you traverse a given binary tree in preorder without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/07/binary-tree-preorder-traversal-in-java-without-recursion.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;How do you perform an inorder traversal in a given binary tree? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/08/binary-tree-inorder-traversal-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;How do you print all nodes of a given binary tree using inorder traversal without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/08/binary-tree-inorder-traversal-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;How do you implement a postorder traversal algorithm? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/10/binary-tree-post-order-traversal-in.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you traverse a binary tree in postorder traversal without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2017/05/binary-tree-post-order-traversal-in-java-without-recursion.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;br&gt;
For pre-order you need to first traverse root then left node and then right node. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How are all leaves of a binary search tree printed? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/09/how-to-print-all-leaf-nodes-of-binary-tree-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you count a number of leaf nodes in a given binary tree? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2016/12/how-to-count-number-of-leaf-nodes-in-java-recursive-iterative-algorithm.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you perform a binary search in a given array? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2015/10/how-to-implement-binary-search-tree-in-java-example.html#axzz4wnEtnNB3"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you convert a given binary tree to double linked list in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write a program to find a depth of a given binary tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the difference between binary and binary search trees? (answer)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is a self-balanced tree? (answer)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the AVL Tree? (answer)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You have given a BST, where two nodes are swapped? How do you recover the original BST? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you convert a binary tree to a binary search tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find the largest BST subtree of a given binary tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write a Java program to connect nodes at the same level as a binary tree? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is a Trie data structure? (answer)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the difference between the Binary tree and Trie? (answer)&lt;br&gt;
Unlike a binary search tree, nodes in the trie do not store their associated key. Instead, a node's position in the trie defines the key with which it is associated. This distributes the value of each key across the data structure, and means that not every node necessarily has an associated value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are some of the most popular binary tree-based questions asked on Programming job interviews. You can solve them to become comfortable with tree-based problems.&lt;/p&gt;

&lt;p&gt;If you feel that your understanding of binary tree coding is inadequate and you can't solve these questions on your own, I suggest you go back and pick a good data structure and algorithm courses like &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-data-structures%2F"&gt;&lt;strong&gt;Easy to Advanced Data Structures&lt;/strong&gt;&lt;/a&gt; by William Fiset, a former Google engineer, and former &lt;strong&gt;ACM-ICPC world&lt;/strong&gt; finalist to refresh your knowledge about the binary tree and binary search tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-data-structures%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLw2fFoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/525/1%2A_A20XCHNQAu8miDP_jzeDQ.png" alt="binary tree interview questions with answers" width="525" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some more recommendations, here is my list of useful &lt;a href="http://javarevisited.blogspot.sg/2015/07/5-data-structure-and-algorithm-books-best-must-read.html"&gt;data structure algorithm books&lt;/a&gt; and &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;courses&lt;/a&gt; to start with.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#now-youre-one-step-closer-to-crack-your-programming-interview"&gt;
  &lt;/a&gt;
  Now You're One step closer to Crack your Programming interview
&lt;/h4&gt;

&lt;p&gt;These are some of the most common questions about binary tree data structure form coding interviews that help you to do really well in your interview.&lt;/p&gt;

&lt;p&gt;I have also shared a lot of &lt;a href="https://codeburst.io/100-coding-interview-questions-for-programmers-b1cf74885fb7"&gt;data structure questions&lt;/a&gt; on my &lt;a href="http://java67.com/"&gt;blog&lt;/a&gt;, so if you are really interested, you can always go there and search for them.&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;common coding, data structure, and algorithm questions&lt;/strong&gt; are the ones you need to know to successfully interview with any company, big or small, for any level of programming job.&lt;/p&gt;

&lt;p&gt;If you are looking for a programming or software development job in 2022, you can start your preparation with this &lt;a href="https://medium.com/hackernoon/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0"&gt;list of coding questions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This list provides good topics to prepare and also helps assess your preparation to find out your areas of strength and weakness.&lt;/p&gt;

&lt;p&gt;Good knowledge of data structure and algorithms is important for success in coding interviews and that's where you should focus most of your attention.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h5&gt;

&lt;p&gt;Here are my collection of best resources to prepare well for programming interviews in 2022. &lt;br&gt;
1.&lt;a href="https://www.educative.io/collection/5668639101419520/5671464854355968?affiliate_id=5073518643380224"&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;Data Structures and Algorithms: Deep Dive Using Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structure-and-algorithms-analysis%2F"&gt;Data Structure and Algorithms Analysis --- Job Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fads-part1"&gt;Algorithms and Data Structure Part1 and 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/collection/5642554087309312/5724822843686912?affiliate_id=5073518643380224"&gt;Data Structures in Java: An Interview Refresher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5633779737559040?affiliate_id=5073518643380224"&gt;Grokking Dynamic Programming Patterns for Coding Interviews&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading this far.  Good luck with your programming interview! It's certainly not going to be easy, but by practicing these binary tree interview questions and using these resources, you are one step closer to cracking your next coding interview. &lt;/p&gt;

&lt;p&gt;If you like this article, then please share it with your friends and colleagues, and don't forget to follow &lt;a href="https://twitter.com/javinpaul"&gt;javinpaul&lt;/a&gt; on Twitter!&lt;/p&gt;

&lt;p&gt;P.S. --- If you need more FREE resources to learn binary tree and other essential data structures, you can also check out this list of &lt;a href="https://medium.com/javarevisited/top-10-free-data-structure-and-algorithms-courses-for-beginners-best-of-lot-ad807cc55f7a"&gt;free data structure and algorithm courses&lt;/a&gt; to start your preparation.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Don't be a prick: Frontend Engineers and Accessibility</title>
      <author>David Lorenz</author>
      <pubDate>Mon, 20 Dec 2021 08:54:44 +0000</pubDate>
      <link>https://dev.to/activenode/dont-be-a-prick-frontend-engineers-and-accessibility-1m8m</link>
      <guid>https://dev.to/activenode/dont-be-a-prick-frontend-engineers-and-accessibility-1m8m</guid>
      <description>&lt;p&gt;Basic Accessibility isn't hard and it often isn't even a choice. What's hard is your damn stubbornness.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-following-code-will-upset-you"&gt;
  &lt;/a&gt;
  The following code will upset you
&lt;/h2&gt;

&lt;p&gt;You are a Frontend Developer. You start in a new company and you find code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably your first thought is: &lt;em&gt;WTF is this 💣&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's make it nice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listOfTasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchTasks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;idAndTitleList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;listOfTasks&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#did-you-feel-the-anger-in-the-first-sample"&gt;
  &lt;/a&gt;
  Did you feel the anger in the first sample?
&lt;/h3&gt;

&lt;p&gt;You felt it! You felt it because it would've been so damn easy to make it clean and readable. Hence it doesn't matter "why it came to be there". It matters that obviously no one prevented this code to be merged (missing guidelines or what not) and that you suffer in a sense of Developer Experience.&lt;/p&gt;

&lt;p&gt;Developer Experience to you is comparable to accessibility features to people that depend on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is still a very much harmless example comparing how'd you feel if you were dependent on accessibility features because it wouldn't take much time on an atomic basis to improve the sites accessibility but you decided to not do it. And when the app/site is done it'd be a huge thing to adapt so you never do.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-not-hard"&gt;
  &lt;/a&gt;
  Accessibility is &lt;em&gt;not&lt;/em&gt; hard
&lt;/h2&gt;

&lt;p&gt;And often not a choice because:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you do recommend to NOT implement proper accessibility in your application you are actually consulting for something that has legal impact in a lot of countries now. So that's, first and foremost, a very very good reason to inform yourself and your colleagues about accessibility even more. &lt;br&gt;
 Source: &lt;a href="https://www.w3.org/WAI/policies/"&gt;https://www.w3.org/WAI/policies/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you are not developing on / in / for a lonely island then there is a good chance there is legal rules for it.&lt;/p&gt;

&lt;p&gt;I have heard this iffy saying so often. From Frontend Engineers, from Designers but especially from Product Owners and Managers trying to intrigue the engineers to "save time":&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-can-do-it-later"&gt;
  &lt;/a&gt;
  "We can do it later"
&lt;/h3&gt;

&lt;p&gt;Technically I don't see a problem in "doing it later". But let me take a metaphor for it: A fork lies on your table. You can put it in the shelf right now and your room looks amazingly clean. A rush of endorphines hits your body as it comforts with the tidyness. Easygoing. Now imagine you leave everything laying around in your room for a year. Now start cleaning the room - start even finding anything. You get the point...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/8csqNT29i6JTAGMrFT/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/8csqNT29i6JTAGMrFT/giphy.gif" alt="" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#people-with-disabilities-are-not-the-target-group-anyways"&gt;
  &lt;/a&gt;
  "People with disabilities are not the target group anyways"
&lt;/h3&gt;

&lt;p&gt;This statement never holds true. Never. Not in any single case for any application that is used by more than 1 person.&lt;/p&gt;

&lt;p&gt;I have heard this in an automotive sector often saying "blind people cannot drive so how would a11y help?". &lt;/p&gt;

&lt;p&gt;Ehm well a blind person can still be controlling the digital sales part of the automotive sector. Just to have a very, very clear example. I could add thousands more if you want.&lt;/p&gt;

&lt;p&gt;Also bad accessibility always impacts pro users because it often comes with bad keyboard usage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#okay-ill-add-an-raw-arialabel-endraw-and-some-raw-alt-endraw-attributes"&gt;
  &lt;/a&gt;
  "Okay I'll add an &lt;code&gt;aria-label&lt;/code&gt; and some &lt;code&gt;alt&lt;/code&gt; attributes"
&lt;/h3&gt;

&lt;p&gt;Fk no. No no no. Don't just start adding random &lt;code&gt;aria-*&lt;/code&gt; attributes or alt/title tags if you do not know the impact. Start with the basics of understanding. Understanding is the crucial point of effortlessly using it and implementing it whilst coding. I would recommend myself but the problem is that I don't have any public sources on my own so I would need to lend you my brain. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is an &lt;strong&gt;extremely&lt;/strong&gt; good free udacity course from Google (I really, really can recommend this):  &lt;a href="https://www.udacity.com/course/web-accessibility--ud891"&gt;https://www.udacity.com/course/web-accessibility--ud891&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Read this: &lt;a href="https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree"&gt;https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Also you can start off at  &lt;a href="https://twitter.com/SaraSoueidan"&gt;Sara Soueidan&lt;/a&gt;. She also has published a new course which you will find a link on her Twitter account to.&lt;/li&gt;
&lt;li&gt;A good read is always MDN e.g. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/heading_role"&gt;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/heading_role&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#let-me-prove-how-easy-it-can-be-to-improve-accessibility"&gt;
  &lt;/a&gt;
  Let me prove how easy it can be to improve Accessibility
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Understand that CSS impacts a11y: If you do &lt;code&gt;display: none&lt;/code&gt; on an element it is hidden both visually as well as in the &lt;strong&gt;Accessibility Tree&lt;/strong&gt; so your &lt;code&gt;&amp;lt;div style="display: none" aria-label="additional info only for screen readers"&amp;gt;...&lt;/code&gt; is useless.&lt;/li&gt;
&lt;li&gt;Ensure good ratio on your designs (built-in in the chrome inspector; there is also a lot of Sketch plugins for Designers e.g.) ; &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;https://webaim.org/resources/contrastchecker/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Using a proper HTML structure is a very good start. HTML by definition (without adding CSS etc.) is perfectly accessible if correctly used. &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML"&gt;https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If you have fancy elements on your side that literally have no effect but looking cool (so content-wise not relevant) then simply hide em' semantically with &lt;code&gt;aria-hidden="true"&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;alt&lt;/code&gt; attribute on a &lt;code&gt;img&lt;/code&gt; tag is nothing that necessarily needs content. It needs content if the image shown is connected to the content. E.g.: You have a news article and you report about "More and more people visit the new shopping center". Now imagine there is an &lt;code&gt;img&lt;/code&gt; tag with a photo showing a lot of people in the shopping center. Then a good alt tag would be &lt;code&gt;alt="A lot of people standing in the new Shopping Center the city"&lt;/code&gt; . If however the image is just a random stock picture then it doesn't provide additional information and you should have &lt;code&gt;alt=""&lt;/code&gt; (in this case the content lives for itself and the image is just a visual addendum).&lt;/li&gt;
&lt;li&gt;If you use modals, make sure to "Lock In". If you cannot click elements below the Modal with your mouse then you shouldn't be able to tab with your keyboard below it. But many modals do that and it's horrible for people working with screen readers because they often cannot get back to the modal once they left it. I also built one React Library to help with that: &lt;a href="https://github.com/activenode/react-use-focus-trap"&gt;https://github.com/activenode/react-use-focus-trap&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#now-stop-being-a-prick-and-at-least-inform-yourself-a-little-bit"&gt;
  &lt;/a&gt;
  Now stop being a prick and at least inform yourself a little bit.
&lt;/h2&gt;

&lt;p&gt;Providing a good semantic HTML structure, knowing how and when to properly set &lt;code&gt;alt&lt;/code&gt; attributes (most FE Developers think they know this but in fact they don't) and the impact of using &lt;code&gt;aria-*&lt;/code&gt; attributes can be a very good start for having basic a11y. That doesn't sound like a huge effort, does it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26FPOogenQv5eOZHO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26FPOogenQv5eOZHO/giphy.gif" alt="" width="400" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>React &amp; Formik &amp; Tailwind Build elegant forms </title>
      <author>Damian Piwowarczyk</author>
      <pubDate>Mon, 20 Dec 2021 08:54:29 +0000</pubDate>
      <link>https://dev.to/przpiw/build-elegant-forms-reactformik-tailwind-54d8</link>
      <guid>https://dev.to/przpiw/build-elegant-forms-reactformik-tailwind-54d8</guid>
      <description>&lt;p&gt;In my last post, I went through building custom components with formik. Today we will build something more practical responsive login/registration page that uses formik components and tailwind styling. In the end, we will add yup validation schema that will enable effortless error handling. Hopefully, by the end, you will see how powerful the combination of these tools can be when building reusable pages/forms.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tailwindcss-and-what-is-benefit-of-using-it"&gt;
  &lt;/a&gt;
  What is TailwindCSS and what is benefit of using it?
&lt;/h2&gt;

&lt;p&gt;It is a collection of css utility classes, it allows to reduce your code and use standardised approach when designing.&lt;br&gt;
Tailwind out of the box does not provide prebuilt components like bootstrap, materialui or other css libraries. Instead it let you to rapidly build your own components which can be lightweight and customizable.&lt;br&gt;
Tailwind is for devs who what to build fast highly customizable stuff. Tailwind works well with JavaScript libraries.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-formik"&gt;
  &lt;/a&gt;
  What is Formik?
&lt;/h2&gt;

&lt;p&gt;Formik is one of the most popular open-source form libraries for React &amp;amp; React Native. API is well documented and the library lets us choose whether we want to use formik components or utilize it with HTML elements.&lt;br&gt;
Formik takes care of the repetitive and annoying stuff—keeping track of values/errors/visited fields, orchestrating validation, and handling submission—so you don't have to. This means you spend less time wiring up state and change handlers and more time focusing on your business logic.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#this-is-what-we-are-going-to-build"&gt;
  &lt;/a&gt;
  This is what we are going to build
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#large-screen"&gt;
  &lt;/a&gt;
  Large Screen
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MFb_JD2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc2p7rsxmgw78tsunsyk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFb_JD2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc2p7rsxmgw78tsunsyk.gif" alt="Login/Register" width="880" height="536"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#small-screen"&gt;
  &lt;/a&gt;
  Small screen
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvY8tAFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q6mabzmsdh0naqhugbu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvY8tAFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q6mabzmsdh0naqhugbu.png" alt="Image mobile" width="536" height="578"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-setting-up-the-project"&gt;
  &lt;/a&gt;
  1. Setting up the project
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-nextjs-boilerplate"&gt;
  &lt;/a&gt;
  Install Next.js boilerplate
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#instal-formik-amp-yup"&gt;
  &lt;/a&gt;
  Instal Formik &amp;amp; Yup
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i formik &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i yup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#install-tailwind-css"&gt;
  &lt;/a&gt;
  Install Tailwind CSS
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss postcss autoprefixer &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Once installation is completed navigate to&lt;code&gt;tailwind.config.js&lt;/code&gt;&lt;br&gt;
 and replace content with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/**/*.{js,ts,jsx,tsx}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/**/*.{js,ts,jsx,tsx}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;@tailwind&lt;/code&gt; directives to your &lt;code&gt;./styles/globals.css&lt;/code&gt; file to include tailwind styles in our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-build-form-components"&gt;
  &lt;/a&gt;
  2. Build Form components
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-files"&gt;
  &lt;/a&gt;
  Create files
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;components &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;components &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;LoginForm.js &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;RegisterForm.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Formik out of the box comes with powerful wrappers &lt;code&gt;&amp;lt;Form/&amp;gt; &amp;lt;Field/&amp;gt; &amp;lt;ErrorMessage/&amp;gt;&lt;/code&gt; we can directly hook up form elements to &lt;code&gt;&amp;lt;Formik/&amp;gt;&lt;/code&gt; it will look at name attribute to match form elements. This will mean onSubmit and onChange methods don't need to be linked form/input manually. We pass predefined tailwind &lt;code&gt;styles&lt;/code&gt; from the parent component to avoid repetition and keep our form file tidy.&lt;br&gt;
&lt;code&gt;LoginForm.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ErrorMessage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;//import { loginSchema } from './validation/loginSchema'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Formik&lt;/span&gt;
      &lt;span class="nx"&gt;initialValues&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
     &lt;span class="c1"&gt;// validationSchema={loginSchema}&lt;/span&gt;
      &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Email&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorMessage&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Password&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorMessage&lt;/span&gt;
          &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mt-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Login&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Formik&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;
Our registration form will look almost identical.&lt;br&gt;
&lt;code&gt;RegisterForm.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RegisterForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Formik&lt;/span&gt;
      &lt;span class="nx"&gt;initialValues&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Full&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Email&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Password&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mt-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Register&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Formik&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3create-member-page"&gt;
  &lt;/a&gt;
  3.Create Member Page
&lt;/h3&gt;

&lt;p&gt;Now we going to create memberPage.js in pages. This will be common component for both Login and Register Form. We will use useState react hook to store info which form should be rendered for user. When user click &lt;code&gt;Become member&lt;/code&gt; registration form will be render and when &lt;code&gt;Back to login clicked&lt;/code&gt; we will render back login form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoginForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/LoginForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RegisterForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/RegisterForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MemberPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logoUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLogin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLogin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex flex-row w-full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;py-12 flex-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex bg-white rounded-lg shadow-2xl overflow-hidden mx-auto max-w-sm lg:max-w-4xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden lg:block lg:w-1/2 bg-auto bg-no-repeat    &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`url(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;logoUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;w-full p-8 lg:w-1/2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-2xl font-semibold text-gray-600 text-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
              &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setIsLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isLogin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex items-center justify-center mt-4 text-white rounded-lg shadow-md hover:bg-gray-100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px-4 py-3 w-5/6 text-center text-gray-600 font-bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLogin&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Become Member&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Back to Login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mt-4 flex items-center justify-between&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;border-b border-red-700 w-1/5 lg:w-1/4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
                &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-xs text-center text-gray-500 uppercase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLogin&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;border-b w-1/5 border-red-700 lg:w-1/4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLogin&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoginForm&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RegisterForm&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally we can go to index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MemberPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./memberPage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex justify-center items-center w-screen h-screen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MemberPage&lt;/span&gt;
        &lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Brand Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;logoUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://i.imgur.com/l1kG0LQ.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now last step is to define our validation schema so we can see error messages on invalid input.&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1NQtq-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx6rdcnhq7ba26sz4e8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1NQtq-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx6rdcnhq7ba26sz4e8b.png" alt="Form Validation" width="476" height="221"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup-directory"&gt;
  &lt;/a&gt;
  Setup Directory
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd components &amp;amp;&amp;amp; mkdir validation &amp;amp;&amp;amp; touch loginSchema.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;loginSchema.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Required&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Too Short!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;
Now we can uncomment following lines from &lt;code&gt;LoginForm.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import { loginSchema } from './validation/loginSchema'&lt;/span&gt;
&lt;span class="c1"&gt;// validationSchema={loginSchema}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;
Now we have good looking login and registration form. We could reuse it for other projects. Next step could be adding forgot password form, validation schema or tweaking styling.&lt;br&gt;
 &lt;br&gt;
Designing complex forms can be time consuming. I am sure that with this approach we can safe up a some time.&lt;br&gt;
 &lt;br&gt;
Thanks for reading! Hope this tutorial was helpful. &lt;br&gt;
Stay tuned for next part where we will add redux and implement user authentication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/przpiw/login-formik-tw"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Create Laravel Blog with Strapi v4</title>
      <author>Shahed Nasser</author>
      <pubDate>Mon, 20 Dec 2021 08:50:50 +0000</pubDate>
      <link>https://dev.to/shahednasser/create-laravel-blog-with-strapi-v4-39pe</link>
      <guid>https://dev.to/shahednasser/create-laravel-blog-with-strapi-v4-39pe</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published &lt;a href="https://blog.shahednasser.com/create-laravel-blog-with-strapi-v4/"&gt;on my personal blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://laravel.com"&gt;Laravel&lt;/a&gt; is one of the most popular web frameworks that allow you to create secure and scalable websites. With Laravel, you can create almost any website, ranging from simple portfolio websites to full-fledged e-commerce solutions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://strapi.io"&gt;Strapi&lt;/a&gt; is a headless CMS framework that has been gaining a lot of attention. With Strapi, you can easily add CMS functionalities to your website, regardless of the technology being used. Strapi also removes the hassles of creating a database and models tailored to your CMS needs as it is customizable to the point that you can create your own models and entities, also called content types.&lt;/p&gt;

&lt;p&gt;In this tutorial, you'll learn how to create a blog in Laravel using Strapi. The blog will have posts, tags, and allow users to post comments. You can find the code for this tutorial in &lt;a href="https://github.com/shahednasser/strapi-laravel-blog"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you start, you need the following tools on your machine:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;. Only versions 12 and 14 are supported by Strapi, and 14 is recommended.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.php.net"&gt;PHP&lt;/a&gt; &amp;gt;= v7.3&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getcomposer.org/download/"&gt;Composer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please note that this tutorial will be using Strapi v4 and Laravel v8.9&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-strapi"&gt;
  &lt;/a&gt;
  Setup Strapi
&lt;/h2&gt;

&lt;p&gt;Start by setting up Strapi. In your terminal, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-strapi-app@latest strapi --quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the command is done, the server will start at &lt;a href="http://localhost:1337"&gt;localhost:1337&lt;/a&gt; and a new page will open in a browser. It will be a registration form, where you need to create an admin account on Strapi.&lt;/p&gt;

&lt;p&gt;Once you're done, you'll be redirected to the main dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPqSJsvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.40.33-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPqSJsvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.40.33-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-contenttypes"&gt;
  &lt;/a&gt;
  Create Content-Types
&lt;/h3&gt;

&lt;p&gt;Next, you'll create the content types necessary for the blog. You'll create content types for the posts and tags that the posts will use. You'll also create a comment content type which will be filled from our blog on Laravel.&lt;/p&gt;

&lt;p&gt;Start by clicking on &lt;em&gt;Create your first Content type&lt;/em&gt; in the dashboard. This will open a new page to create content types. Under the Content Types Builder sidebar, click on &lt;em&gt;Create new collection type&lt;/em&gt; under  Collection type. This will open a pop-up where you can enter basic and advanced settings.&lt;/p&gt;

&lt;p&gt;You'll first create the tags content type. Enter in the Display Name field in the popup &lt;code&gt;Tag&lt;/code&gt;. This will automatically generate the singular and plural forms of the content type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxKdXdU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.45.23-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxKdXdU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.45.23-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're done, click &lt;em&gt;Continue&lt;/em&gt;. You can now choose the fields in this content type. tags will only have a &lt;code&gt;name&lt;/code&gt; field other than their id. So, click on the &lt;em&gt;Text&lt;/em&gt; field type. Then, enter in the Name field &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_emEilml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.47.28-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_emEilml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.47.28-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Advanced Settings tab, check the Required checkbox to ensure that all tags have a name.&lt;/p&gt;

&lt;p&gt;Since that's the only field you'll add for the Tag content type, click on &lt;em&gt;Finish&lt;/em&gt;. Then, when the pop-up closes, click on the &lt;em&gt;Save&lt;/em&gt; button at the top right. This will restart the server. Every time you create a content type, the server is restarted.&lt;/p&gt;

&lt;p&gt;Next, you'll create the Post content type. Again, click on &lt;em&gt;Create new collection type.&lt;/em&gt; In the pop up that opens, enter for Display Name &lt;code&gt;Post&lt;/code&gt;, then click on &lt;em&gt;Continue.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For posts, there will be fields for title, content, image, date posted, and tags that the post falls under.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;title&lt;/code&gt; field, choose the Text field and make it required as we did earlier. Once done, click on &lt;em&gt;Add another field.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;content&lt;/code&gt; field, choose the Rich text field, and make it required.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;image&lt;/code&gt; field, choose the Media field, and choose for Type "Single media". In the Advanced Settings tab, change the allowed file types under "Select allowed types of media" to only Images. Make the field required as well.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;date_posted&lt;/code&gt; field, choose the Date field, and choose for Type "datetime". Mark this field required as well.&lt;/p&gt;

&lt;p&gt;Finally, for the &lt;code&gt;tags&lt;/code&gt; field, choose the Relation field, then for the relation type choose "Post belongs to many Tags".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDP9XTS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.59.01-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDP9XTS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-15-at-7.59.01-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're done, click on &lt;em&gt;Finish&lt;/em&gt;, then click on &lt;em&gt;Save&lt;/em&gt; at the top right. This will save the new content type and restart the server.&lt;/p&gt;

&lt;p&gt;Finally, you need to create the Comment content type. Just like you did with the previous content types, create a new content type with the name &lt;code&gt;Comment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Comment&lt;/code&gt; content type will have 3 fields. The first is an Email field with the name &lt;code&gt;field&lt;/code&gt;. Make sure to set it as required.&lt;/p&gt;

&lt;p&gt;The second field is a Rich text field with the name &lt;code&gt;content&lt;/code&gt;. This is where the user's comment will go.&lt;/p&gt;

&lt;p&gt;The third field is a Relation field between Comment and Post. The relation should be "Post has many Comments".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TE_BSWn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-8.13.33-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TE_BSWn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-8.13.33-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that when you create this field a new field will be added automatically in Post called &lt;code&gt;comments&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you're done, click on &lt;em&gt;Finish&lt;/em&gt;, then click on &lt;em&gt;Save&lt;/em&gt; at the top right. This will save the new content type and restart the server.&lt;/p&gt;

&lt;p&gt;Our content types are ready!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-content"&gt;
  &lt;/a&gt;
  Add Content
&lt;/h3&gt;

&lt;p&gt;The next step would be to add content. Click on &lt;em&gt;Content Manager&lt;/em&gt; in the sidebar.  Start by adding a few tags by clicking on &lt;em&gt;Tag&lt;/em&gt; in the Content Manager sidebar, then click on &lt;em&gt;Add new entry&lt;/em&gt; at the top right.&lt;/p&gt;

&lt;p&gt;When you create content, make sure you click &lt;em&gt;Publish&lt;/em&gt; after saving the content.&lt;/p&gt;

&lt;p&gt;Next, add posts the same way. You can use &lt;a href="https://loremipsum.io/generator/?n=5&amp;amp;t=p"&gt;Lorem Ipsum Generator&lt;/a&gt; if you want to create mock content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#change-permissions"&gt;
  &lt;/a&gt;
  Change Permissions
&lt;/h3&gt;

&lt;p&gt;The last step left is to make posts and tags public so that you can consume them in Laravel.&lt;/p&gt;

&lt;p&gt;First, you'll create an API token to use for your requests. In the sidebar, click &lt;em&gt;Settings&lt;/em&gt;, then &lt;em&gt;API Token&lt;/em&gt;. Click on &lt;em&gt;Add Entry&lt;/em&gt; at the top right.&lt;/p&gt;

&lt;p&gt;In this form, enter the name of the token. This is just useful to remember what your API tokens are for. You can also enter a description.&lt;/p&gt;

&lt;p&gt;In the Token type field, choose Full Access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvmq3bMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.27.11-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvmq3bMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.27.11-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're done, click on &lt;em&gt;Save&lt;/em&gt; at the top right. This will create a new API token and the API token will be shown to you only once when you create it. So, copy the API token and store it somewhere as you'll use it later.&lt;/p&gt;

&lt;p&gt;Next, you'll modify the permissions for authenticated users to be able to query content types and add new entries.&lt;/p&gt;

&lt;p&gt;On the sidebar, click &lt;em&gt;Settings&lt;/em&gt;, then &lt;em&gt;Roles&lt;/em&gt; in the &lt;em&gt;Settings&lt;/em&gt; sidebar.&lt;/p&gt;

&lt;p&gt;You'll see two roles: Authenticated and Public. Click on the pencil icon on the Authenticated row.&lt;/p&gt;

&lt;p&gt;Scroll down and you'll see that for each content type you can select what this role can access. Check Select All for Post, Tag, and Comment, then click &lt;em&gt;Save&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mB2bjTd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.37.10-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mB2bjTd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.37.10-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="977"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-laravel"&gt;
  &lt;/a&gt;
  Setup Laravel
&lt;/h2&gt;

&lt;p&gt;Now that Strapi is ready, you'll get started with Laravel.&lt;/p&gt;

&lt;p&gt;Run the following command to create a new Laravel project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer create-project laravel/laravel blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this command is done, change to the directory created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then start the server with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the server at &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-environment-variables"&gt;
  &lt;/a&gt;
  Add Environment Variables
&lt;/h3&gt;

&lt;p&gt;Before you can make requests to Strapi, you need to add 2 environment variables. Add the following environment variables to &lt;code&gt;.env&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STRAPI_URL=http://localhost:1337
STRAPI_API_TOKEN=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first is the URL to Strapi. You can change it if it's not the same local URL. The second is the API token you created earlier. Paste it here after the &lt;code&gt;=&lt;/code&gt; sign.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-home-page"&gt;
  &lt;/a&gt;
  Add Home Page
&lt;/h3&gt;

&lt;p&gt;On the home page, you'll query all posts in Strapi and display them.&lt;/p&gt;

&lt;p&gt;Run the following command in your terminal to create a new controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:controller BlogController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, open &lt;code&gt;app/Http/Controllers/BlogController.php&lt;/code&gt; and the following method in the class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function home () {
    //retrieve the posts from Strapi
    $response = Http::withToken(env('STRAPI_API_TOKEN'))-&amp;gt;get(env('STRAPI_URL') . '/api/posts?populate=image,tags');
    $posts = [];

    if ($response-&amp;gt;failed()) {
        if (isset($data['error'])) {
            Log::error('Server error: ' . $data['error']['message']);
        } else {
            Log::error('Request Failed');
        }
    } else {
        //get posts from response
        $posts = $response-&amp;gt;json('data');
    }

    return view('home', ['posts' =&amp;gt; $posts]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, you query Strapi using Laravel's &lt;a href="https://laravel.com/docs/8.x/http-client"&gt;HTTP Client&lt;/a&gt;. You use &lt;code&gt;withToken&lt;/code&gt; to pass it the API token from &lt;code&gt;.env&lt;/code&gt; using the &lt;code&gt;env&lt;/code&gt; helper function. Then, you send a &lt;code&gt;get&lt;/code&gt; request to the endpoint  &lt;code&gt;localhost:1337/api/posts?populate=image,tags&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that &lt;code&gt;localhost:1337&lt;/code&gt; also is retrieved from &lt;code&gt;.env&lt;/code&gt;. As for the endpoint path, Strapi has a conventional path for all its content types. When querying a collection, the pattern for the endpoint is &lt;code&gt;/api/{collection_name}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you use Strapi's API, you can pass it a lot of &lt;a href="https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#api-parameters"&gt;useful parameters&lt;/a&gt; that allow you to filter, sort, paginate the data, and more. Here, you use the &lt;code&gt;populate&lt;/code&gt; parameter which allows you to retrieve a content type with its relations. You use it to retrieve the post with its image and tags.&lt;/p&gt;

&lt;p&gt;After sending the request, you can check if the request failed using &lt;code&gt;$response-&amp;gt;failed()&lt;/code&gt;. If the request failed, you log the error. If not, you set &lt;code&gt;$posts&lt;/code&gt; to the &lt;code&gt;data&lt;/code&gt; parameter in the response body. Note that you can use the &lt;code&gt;json&lt;/code&gt; method to retrieve the parameters from a JSON response, optionally passing it a parameter name as the first element.&lt;/p&gt;

&lt;p&gt;Next, you need to add the &lt;code&gt;home&lt;/code&gt; view. Create the file &lt;code&gt;resources/views/home.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="{{ str_replace('_', '-', app()-&amp;gt;getLocale()) }}"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="utf-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;

        &amp;lt;title&amp;gt;Blog&amp;lt;/title&amp;gt;

        &amp;lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class="antialiased bg-light"&amp;gt;
        &amp;lt;div class="container mt-4 py-3 mx-auto bg-white rounded shadow-sm"&amp;gt;
            &amp;lt;div class="row"&amp;gt;
                @forelse ($posts as $post)
                    &amp;lt;div class="col-2 col-md-4"&amp;gt;
                        &amp;lt;div class="card"&amp;gt;
                            &amp;lt;img src="{{ env('STRAPI_URL') . $post['attributes']['image']['data']['attributes']['formats']['medium']['url'] }}" 
                                class="card-img-top" alt="{{ $post['attributes']['image']['data']['attributes']['alternativeText'] }}"&amp;gt;
                            &amp;lt;div class="card-body"&amp;gt;
                                &amp;lt;h5 class="card-title"&amp;gt;{{ $post['attributes']['title'] }}&amp;lt;/h5&amp;gt;
                                &amp;lt;p class="card-text"&amp;gt;{{ substr($post['attributes']['content'], 0, 50) }}...&amp;lt;/p&amp;gt;
                                &amp;lt;a href="/post/{{ $post['id'] }}" class="btn btn-primary"&amp;gt;Read More&amp;lt;/a&amp;gt;
                            &amp;lt;/div&amp;gt;
                            &amp;lt;div class="card-footer"&amp;gt;
                                @if(count($post['attributes']['tags']['data']))
                                    @foreach ($post['attributes']['tags']['data'] as $tag)
                                        &amp;lt;span class="badge bg-success"&amp;gt;{{ $tag['attributes']['name'] }}&amp;lt;/span&amp;gt;
                                    @endforeach
                                @endif
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                @empty
                    &amp;lt;div class="col"&amp;gt;
                        &amp;lt;div class="card"&amp;gt;
                            &amp;lt;div class="card-body"&amp;gt;
                                This is some text within a card body.
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                @endforelse
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just displays the posts as &lt;a href="https://getbootstrap.com/docs/5.1/components/card/"&gt;cards&lt;/a&gt; using &lt;a href="https://getbootstrap.com"&gt;Bootstrap&lt;/a&gt;. Notice that the content type entries that Strapi return has the following format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "data": {
        "id",
        "attributes": {
            "title",
            ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, you'll find the content type's fields inside the &lt;code&gt;attributes&lt;/code&gt; key of &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, change the current route in &lt;code&gt;routes/web.php&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/', [\App\Http\Controllers\BlogController::class, 'home']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it out. Make sure that both Laravel and Strapi's servers are running. Then, open &lt;code&gt;localhost:8000&lt;/code&gt;. You'll see the posts you added as cards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PI7IOazO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.48.15-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PI7IOazO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.48.15-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-view-post-page"&gt;
  &lt;/a&gt;
  Add View Post Page
&lt;/h3&gt;

&lt;p&gt;Next, you'll add the page to view a post. This page receives the post ID as a parameter, then queries the post's data from Strapi.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;app/Http/Controllers/BlogController.php&lt;/code&gt; add a new method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function viewPost ($id) {
        //retrieve the post from Strapi
        $response = Http::withToken(env('STRAPI_API_TOKEN'))-&amp;gt;get(env('STRAPI_URL') . '/api/posts/' . $id . '?populate=image,tags,comments');

        if ($response-&amp;gt;failed()) {
            if (isset($data['error'])) {
                Log::error('Server error: ' . $data['error']['message']);
            } else {
                Log::error('Request Failed');
            }

            return response()-&amp;gt;redirectTo('/');
        }

        //get post from response
        $post = $response-&amp;gt;json('data');

        return view('post', ['post' =&amp;gt; $post]);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this method, you use the &lt;code&gt;$id&lt;/code&gt; parameter, which is the post ID, to send a request to Strapi's single entry endpoint. The endpoint's pattern is &lt;code&gt;/api/{collection_name}/{id}&lt;/code&gt;. Similar to the previous endpoint, you can also pass it parameters like &lt;code&gt;populate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the request fails, you redirect the user to the home page and log the error. If the request is done successfully, you retrieve the post from the response's body and render the view &lt;code&gt;post&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, create &lt;code&gt;resources/views/post.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="{{ str_replace('_', '-', app()-&amp;gt;getLocale()) }}"&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset="utf-8"&amp;gt;
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;

        &amp;lt;title&amp;gt;{{ $post['attributes']['title'] }} - Blog&amp;lt;/title&amp;gt;

        &amp;lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class="antialiased bg-light"&amp;gt;
        &amp;lt;div class="container mt-4 py-3 px-5 mx-auto bg-white rounded shadow-sm"&amp;gt;
            &amp;lt;h1&amp;gt;{{ $post['attributes']['title'] }}&amp;lt;/h1&amp;gt;
            &amp;lt;small class="text-muted d-block"&amp;gt;{{ $post['attributes']['date_posted'] }}&amp;lt;/small&amp;gt;
            &amp;lt;img src="{{ env('STRAPI_URL') . $post['attributes']['image']['data']['attributes']['formats']['medium']['url'] }}" 
                                class="img-fluid mx-auto d-block my-3" alt="{{ $post['attributes']['image']['data']['attributes']['alternativeText'] }}"&amp;gt;
            @if(count($post['attributes']['tags']['data']))
              &amp;lt;div class="mb-3"&amp;gt;
                @foreach ($post['attributes']['tags']['data'] as $tag)
                  &amp;lt;span class="badge bg-success"&amp;gt;{{ $tag['attributes']['name'] }}&amp;lt;/span&amp;gt;
                @endforeach
              &amp;lt;/div&amp;gt;
            @endif
            &amp;lt;p class="content"&amp;gt;
              {{ $post['attributes']['content'] }}
            &amp;lt;/p&amp;gt;

            &amp;lt;hr /&amp;gt;
            &amp;lt;form action="/post/{{ $post['id'] }}" method="POST"&amp;gt;
              @csrf
              &amp;lt;h2&amp;gt;Add Your Comment&amp;lt;/h2&amp;gt;
              &amp;lt;div class="mb-3"&amp;gt;
                &amp;lt;label for="email" class="form-label"&amp;gt;Email address&amp;lt;/label&amp;gt;
                &amp;lt;input type="email" class="form-control" id="email" name="email" required&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;div class="mb-3"&amp;gt;
                &amp;lt;label for="content" class="form-label"&amp;gt;Your Comment&amp;lt;/label&amp;gt;
                &amp;lt;textarea rows="5" class="form-control" id="content" name="content" required&amp;gt;&amp;lt;/textarea&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;Submit&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This page just shows the post's details. Similar to how you extracted the post's data, the post's field is nested inside the &lt;code&gt;attributes&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;This page also has a comments form at the end of it. You'll implement its functionality after this.&lt;/p&gt;

&lt;p&gt;Finally, add the new route in &lt;code&gt;routes/web.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/post/{id}', [\App\Http\Controllers\BlogController::class, 'viewPost']);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open the home page again and click on &lt;em&gt;Read More&lt;/em&gt; for one of the posts. A new page will open with the post's content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IbEaCWTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.55.39-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IbEaCWTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-7.55.39-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you scroll down, you'll see a form to add your comment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mEo2PV-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-8.10.42-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mEo2PV-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-8.10.42-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-comment-functionality"&gt;
  &lt;/a&gt;
  Add Comment Functionality
&lt;/h3&gt;

&lt;p&gt;The last thing you'll do in this tutorial is add the commenting functionality. The form is already added, so you just need to add the &lt;code&gt;POST&lt;/code&gt; route to add the comment.&lt;/p&gt;

&lt;p&gt;Add the following method in &lt;code&gt;app/Http/Controllers/BlogController.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function addComment (Request $request, $id) {
        $data = [
            "data" =&amp;gt; [
                'email' =&amp;gt; $request-&amp;gt;get('email'),
                'content' =&amp;gt; $request-&amp;gt;get('content'),
                'post' =&amp;gt; $id
            ]
        ];

        $response = Http::withToken(env('STRAPI_API_TOKEN'))-&amp;gt;post(env('STRAPI_URL') . '/api/comments', $data);

        if ($response-&amp;gt;failed()) {
            if (isset($data['error'])) {
                Log::error('Server error: ' . $data['error']['message']);
            } else {
                Log::error('Request Failed');
            }

            return response()-&amp;gt;redirectTo('/');
        }

        //successfully added
        return response()-&amp;gt;redirectTo('/post/' . $id);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You first format the data as Strapi likes it. When adding a content type entry, you should nest the data inside a &lt;code&gt;data&lt;/code&gt; parameter. Here, you add the &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, and &lt;code&gt;post&lt;/code&gt; fields. Notice that we are skipping validation here for tutorial simplicity.&lt;/p&gt;

&lt;p&gt;Then, you send a &lt;code&gt;POST&lt;/code&gt; request to the endpoint &lt;code&gt;/api/comments&lt;/code&gt;. Strapi's endpoint pattern for adding a content type entry is &lt;code&gt;/api/{collection_name}&lt;/code&gt;. You pass the data as a second parameter to the &lt;code&gt;post&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;If the request fails, the user is redirected to the home page. If it's successful, the user is redirected back to the post's page.&lt;/p&gt;

&lt;p&gt;Next, add before the comment form in &lt;code&gt;resources/views/post.blade.php&lt;/code&gt; the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr/&amp;gt;
@if (count($post['attributes']['comments']['data']))
    &amp;lt;div class="comments"&amp;gt;
        &amp;lt;h2&amp;gt;Comments&amp;lt;/h2&amp;gt;
        @foreach ($post['attributes']['comments']['data'] as $comment)
            &amp;lt;div class="card mb-3"&amp;gt;
                &amp;lt;div class="card-body"&amp;gt;
                    {{ $comment['attributes']['content'] }}
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="card-footer"&amp;gt;
                    By {{ $comment['attributes']['email'] }}
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        @endforeach
    &amp;lt;/div&amp;gt;
@endif
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show the comments if a post has any.&lt;/p&gt;

&lt;p&gt;Finally, add the new route in &lt;code&gt;routes/web.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('/post/{id}', [\App\Http\Controllers\BlogController::class, 'addComment']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it out. Go to a post's page, then go to the comment form. Add your comment and click Submit. You'll be redirected back to the post's page, but you can see the comment below the post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mf0X5MIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-8.10.34-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mf0X5MIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-16-at-8.10.34-PM.png" alt="Create Laravel Blog with Strapi v4" width="880" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you learned how to build a blog with Laravel and Strapi. Strapi is completely customizable, and that simplifies the process of adding content types, adding entries, and using its endpoints to query the content types or add new entries in them.&lt;/p&gt;

</description>
      <category>strapi</category>
      <category>laravel</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What I Learn From Trying Selenium on VPS</title>
      <author>Adyaksa W</author>
      <pubDate>Mon, 20 Dec 2021 08:39:51 +0000</pubDate>
      <link>https://dev.to/adyaksa_w/what-i-learn-from-trying-selenium-on-vps-5a56</link>
      <guid>https://dev.to/adyaksa_w/what-i-learn-from-trying-selenium-on-vps-5a56</guid>
      <description>&lt;p&gt;Currently, I'm exploring various ideas for side projects. One of them needs some automated scraping that runs as a CRON job. Because I'm used to scrapping with Python using Selenium, I immediately choose them and connect them with Flask. There is 1 little problem: My previous scraping experience is only on a local machine. So I need to learn how to do scraping on the server  and add a CRON job on top of that. Because it's quite a common use case, there should be many tutorials about it and make it easier when I need to troubleshoot, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Oh god, how wrong I was.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, so before I started building this, I already researched a bit about 3 common libraries for scraping in Python with their advantage and disadvantage. To recap it a bit from what I learned:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Selenium:&lt;/strong&gt; Can handle javascript-heavy websites, pass more scrapper detection than other alternatives, but so much slower than other libraries.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;BeautifulSoup + requests:&lt;/strong&gt; Simplest solution (I used requests on my previous project, so I only need to learn how to parse HTML using BeautifulSoup, which is quite easy too).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scrapy:&lt;/strong&gt; So much functionality and faster than Selenium, but quite inflexible than other solutions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because some websites that I need to scrape have some scrapper detection and are quite javascript-heavy, I don't see the need to use another library. I also don't need to update this CRON job too often, so slow performance doesn't matter to me.&lt;/p&gt;

&lt;p&gt;In total, it took me 1 day to finish the prototype for this side project. I tested the scrapper locally and it works. It's slow, but expected. Satisfied with the result, I try to start the scraping on the VPS.&lt;/p&gt;

&lt;p&gt;It broke. Okay no worry, I can fix this.&lt;/p&gt;

&lt;p&gt;The error keeps changing, and it's getting more obscure.&lt;/p&gt;

&lt;p&gt;I spent a few days after that to debug it, and my final solution is "&lt;strong&gt;Restart and hope for the best&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PB7fUPCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48vv98d42g6d8ys6xrt4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PB7fUPCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48vv98d42g6d8ys6xrt4.png" alt="Image description" width="800" height="533"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;By &lt;a href="https://unsplash.com/@lucabravo"&gt;Luca Bravo&lt;/a&gt; from &lt;a href="https://unsplash.com/photos/XJXWbfSo2f0"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is so much hardship that comes with scraping on the VPS.&lt;/p&gt;

&lt;p&gt;First, VPS doesn't have GUI, so we need to configure the server or the Selenium so it can still run without GUI. I found 2 solutions regarding this, using &lt;a href="https://stackoverflow.com/questions/6183276/how-do-i-run-selenium-in-xvfb"&gt;virtual display&lt;/a&gt; or running Selenium with a &lt;a href="https://stackoverflow.com/questions/55544648/how-to-run-selenium-script-on-server"&gt;headless&lt;/a&gt;browser.&lt;/p&gt;

&lt;p&gt;I tried the virtual display approach, but the error that came up is still the same. When I changed to the headless solution, the error changes, so I choose this solution.&lt;/p&gt;

&lt;p&gt;Second, &lt;strong&gt;the program frequently crashes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To handle this, I used &lt;a href="https://selenium-python.readthedocs.io/waits.html"&gt;WebDriverWait&lt;/a&gt; so the driver can wait until the browser finishes loading. I also added various try except in risky lines that have a high chance to create an error.&lt;/p&gt;

&lt;p&gt;Lastly, &lt;strong&gt;the driver frequently disconnects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is the hardest problem for me. What I found out is that ChromeDriver is very unstable compared to GeckoDriver. It successfully reduces the disconnection, but still not zero. So I need to run the scrapper in batch and restart every time the driver disconnected.&lt;/p&gt;

&lt;p&gt;As a result, I changed my approach. I used the second scraping method (BeautifulSoup + requests) for website that can handle it. For the rest of the website, I used Selenium and wait patiently.&lt;br&gt;
From this project, I learned that scheduled scraping on VPS is hard and time-consuming. Moreover, the problem that I encountered doesn't include when the target website blocks your scraping attempt. To handle this, there is a need to configure my scrapper so it doesn't look like it came from a scraping program. But because I'm just doing this side project for fun, I just change a few basic configurations. If in the future I need to have another scraping on VPS, I probably will invest a bit on a few proxies to change the requester's IP or even use web scraping services such as &lt;a href="https://www.scraperapi.com/?fp_ref=adyaksaw"&gt;ScraperAPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But if not really needed, I don't want to do scraping on VPS again.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you're curious about the side project that I'm building, you can check it out on &lt;a href="https://www.lnprice.com/"&gt;this page&lt;/a&gt;. This is a simple price aggregation website for &lt;a href="https://en.wikipedia.org/wiki/Light_novel"&gt;light novels&lt;/a&gt;. I'm planning to release a weekly blog about something that I find interesting while working on my side projects, and this article is one of them.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>webdev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>A self-made funny animation series for programmers</title>
      <author>💋Amber Moe</author>
      <pubDate>Mon, 20 Dec 2021 08:29:00 +0000</pubDate>
      <link>https://dev.to/ambermoe/a-self-made-funny-animation-series-for-programmers-1o84</link>
      <guid>https://dev.to/ambermoe/a-self-made-funny-animation-series-for-programmers-1o84</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwmOlIzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtlst2bssoy5gya3imim.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwmOlIzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtlst2bssoy5gya3imim.jpg" alt="Image description" width="880" height="501"&gt;&lt;/a&gt;&lt;br&gt;
I'm thinking about making a funny animation series for programmers. Here is the first episode: &lt;a href="https://www.bilibili.com/video/BV1yS4y1Q7cT?spm_id_from=333.999.0.0"&gt;Learning database, from zero to zero.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will upload the series to my &lt;a href="https://www.youtube.com/channel/UC4WkzUDZ4SmHW_wWCspk8ng"&gt;youtube channel&lt;/a&gt; vey very soon.&lt;/p&gt;

&lt;p&gt;Leave your comments and let me know what you are interested in.&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>programming</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to create installers for your Python application?🤔</title>
      <author>B.Jothin kumar</author>
      <pubDate>Mon, 20 Dec 2021 08:25:26 +0000</pubDate>
      <link>https://dev.to/jothinkumar/how-to-create-installers-for-your-python-application-37jp</link>
      <guid>https://dev.to/jothinkumar/how-to-create-installers-for-your-python-application-37jp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Debian operating system.&lt;/li&gt;
&lt;li&gt;Windows operating system with Python 3, pip and inno setup installed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-inno-setup-installer-on-windows"&gt;
  &lt;/a&gt;
  Creating inno setup installer (on windows)
&lt;/h2&gt;

&lt;p&gt;In order to create an installer, we must convert the application script to executable. We can do this using pyinstaller.&lt;br&gt;&lt;br&gt;
Step 1: create a directory &lt;code&gt;my_app&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
Step 2: Create a new file &lt;code&gt;my_app/app.py&lt;/code&gt; and copy the following contents to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import tkinter as tk

root = tk.Tk()
tk.Label(master=root, text="Hello world", font=("Arial", 30)).pack()
root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: Navigate to &lt;code&gt;my_app&lt;/code&gt; directory and run the following command in CMD:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install pyinstaller  
pyinstaller --onefile app.py -w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 4: Wait for the command to complete and open inno setup compiler.&lt;br&gt;&lt;br&gt;
Step 5: On the inno setup welcome screen, click "Create a new script file using the Script Wizard" and hit ok.&lt;br&gt;&lt;br&gt;
Step 6: Follow on screen instructions (main executable file is in &lt;code&gt;my_app/dist/app.exe&lt;/code&gt;).&lt;br&gt;&lt;br&gt;
Step 7: Compile the script and done!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-deb-package-on-debian-os"&gt;
  &lt;/a&gt;
  Creating deb package (On Debian OS)
&lt;/h2&gt;

&lt;p&gt;Just like windows, we must create an executable from our script for deb package.&lt;br&gt;&lt;br&gt;
Step 1: Create a directory &lt;code&gt;my_app&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Step 2: Create a new file &lt;code&gt;my_app/app.py&lt;/code&gt; and copy the following contents to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import tkinter as tk

root = tk.Tk()
tk.Label(master=root, text="Hello world", font=("Arial", 30)).pack()
root.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: Navigate to &lt;code&gt;my_app&lt;/code&gt; directory and run the following command in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install pyinstaller
pyinstaller app.py -w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 4: wait for it to complete and create the following directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my-app_1.0.0/DEBIAN
my-app_1.0.0/my_app
my-app_1.0.0/usr/share/applications
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 5: Create a file &lt;code&gt;my-app_1.0.0/DEBIAN/control&lt;/code&gt; and copy the following contents into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Package: my-app
Version: 1.0.0
Architecture: all
Maintainer: [Your name]
Copyright: [year] [Your name]
License: MIT
Homepage: [homepage url]
Description: My deb package.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 6: Create a file &lt;code&gt;my-app_1.0.0/usr/share/applications/my-app.desktop&lt;/code&gt; and copy the following contents into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Desktop Entry]
Type=Application
Exec=/my_app/app
Hidden=false
NoDisplay=false
Name=My app
Comment=My app.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 7: Copy all files and folders from &lt;code&gt;my_app/dist&lt;/code&gt; to &lt;code&gt;my-app_1.0.0/my_app&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Step 8: navigate to the parent directory of &lt;code&gt;my-app_1.0.0&lt;/code&gt; and execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dpkg-deb --build my-app_1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 9: Wait for it to complete and done! You will find a deb package named &lt;code&gt;my-app_1.0.0.deb&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;a href="https://jothin-kumar.github.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VadHVZJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jothin-kumar.github.io/assets/img/my%2520logo%2520192%2520192.png" alt="About me" width="192" height="192"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>ubuntu</category>
      <category>pyinstaller</category>
      <category>windows</category>
    </item>
    <item>
      <title>Full Stack Developer Vs. Software Developer (What’s The Difference)</title>
      <author>Danial Wilson</author>
      <pubDate>Mon, 20 Dec 2021 08:24:55 +0000</pubDate>
      <link>https://dev.to/danialwilson33/full-stack-developer-vs-software-developer-whats-the-difference-2n3a</link>
      <guid>https://dev.to/danialwilson33/full-stack-developer-vs-software-developer-whats-the-difference-2n3a</guid>
      <description>&lt;p&gt;Full Stack Developer vs Software Engineer, is there a difference? As software development becomes more complex and diverse, it’s important for developers to be able to adapt to different technologies which previously were specialized roles. In this blog post we will briefly go over the differences between a Full Stack Developer and a Software Engineer.&lt;/p&gt;

&lt;p&gt;Have you ever encountered a website that caught your attention in the first place with its attractive graphics and efficient functionalities? Did you find the website useful to you in the future when needed? Today we shall talk about Full-Stack Developers vs Software Engineers in detail and cover various areas of discussion.&lt;/p&gt;

&lt;p&gt;If this is the case, you should give a moment to show gratitude to the procedure for building that website which is termed the web development process. Any full-stack web development company helps you develop such solutions, and at Solwin Infotech, we assure you that we will fulfill your requirements in every aspect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fullstack-developer-versus-software-developer-a-brief-overview"&gt;
  &lt;/a&gt;
  Full-Stack Developer Versus Software Developer: A Brief Overview
&lt;/h2&gt;

&lt;p&gt;The skills for web development are highly demanded these days. If a non-technical person has these skills, he may quickly develop a website. Even though it seems a straightforward task, it requires more than just the coding skills for becoming a Web developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-stack-developer-need-skills-and-benefits"&gt;
  &lt;/a&gt;
  Full Stack Developer: Need, Skills, And Benefits
&lt;/h3&gt;

&lt;p&gt;As is clear from the name, a Full Stack Developer is the one who controls and manages the front end along with the back end of the web application.&lt;/p&gt;

&lt;p&gt;The list of skills required for a Full Stack Developer includes:&lt;/p&gt;

&lt;p&gt;Creating dynamic UI/UX for the websites which use attractive graphics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client interactions.&lt;/li&gt;
&lt;li&gt;Maintaining the databases as well as maintenance of the Web Development life-cycle.&lt;/li&gt;
&lt;li&gt;They also work on the native platform, mobile application development platforms, and Web Development platforms according to the client’s requirements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-do-you-need-a-fullstack-developer"&gt;
  &lt;/a&gt;
  Why Do You Need A Full-Stack Developer?
&lt;/h3&gt;

&lt;p&gt;When managing clients, databases, servers, system developments, etc., come as a package, the first thing that pops up in the manager’s mind is approaching a Full Stack Developer.&lt;/p&gt;

&lt;p&gt;Getting these modules combined into one is what we term as a complete project, which a Full Stack Developer handles. Using their expertise, these developers help build prototypes for the new projects quicker based on the client’s needs and specifications.&lt;/p&gt;

&lt;p&gt;They also assist their fellow mates in a situation where any issue is faced while the development process is going on, irrespective of the functionality or module assigned to that fellow mate.&lt;/p&gt;

&lt;p&gt;Skills Of A Full Stack Developer&lt;br&gt;
The name Full Stack Developer itself suggests that the developer must work on the whole of a technology stack and work on all the layers of the web application development process.&lt;/p&gt;

&lt;p&gt;Following are the essential skills that a Full Stack Developer must possess&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Knowledge of HTML, JavaScript, and CSS&lt;/li&gt;
&lt;li&gt;Hands-on experience with Github and Git&lt;/li&gt;
&lt;li&gt;Experience with backend development&lt;/li&gt;
&lt;li&gt;Knowledge of web architecture&lt;/li&gt;
&lt;li&gt;Essential skills required for designing&lt;/li&gt;
&lt;li&gt;Experience in dealing with various databases&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Source URL: &lt;a href="https://www.solwininfotech.com/blog/web-development/full-stack-developer-vs-software-developer/"&gt;https://www.solwininfotech.com/blog/web-development/full-stack-developer-vs-software-developer/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
