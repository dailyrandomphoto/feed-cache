<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Full Stack Reddit Clone - Spring Boot, React, Electron App - Part 9</title>
      <author>Aaron C. Beasley</author>
      <pubDate>Sat, 19 Jun 2021 03:33:11 +0000</pubDate>
      <link>https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-9-3pj5</link>
      <guid>https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-9-3pj5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#full-stack-reddit-clone-spring-boot-react-electron-app-part-9"&gt;
  &lt;/a&gt;
  Full Stack Reddit Clone - Spring Boot, React, Electron App - Part 9
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to Part 9 of creating a Reddit clone using Spring Boot, and React.&lt;/p&gt;

&lt;p&gt;What are we building in this part?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pagination Support

&lt;ul&gt;
&lt;li&gt;We will update our backend to support pagination, this will reduce the amount of loading times for the client as the database begins to scale&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;JWT Invalidation&lt;/li&gt;
&lt;li&gt;JWT Refreshing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-3-4a4n"&gt;Part 8&lt;/a&gt; we added the CREATE &amp;amp;&amp;amp; READ endpoints for creating and reading comments!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-links"&gt;
  &lt;/a&gt;
  Important Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backend Source: &lt;a href="https://github.com/MaxiCB/vox-nobis/tree/master/backend"&gt;https://github.com/MaxiCB/vox-nobis/tree/master/backend&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Frontend Source: &lt;a href="https://github.com/MaxiCB/vox-nobis/tree/master/client"&gt;https://github.com/MaxiCB/vox-nobis/tree/master/client&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Live URL: In Progress&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#part-1-updating-repositories-%F0%9F%97%84"&gt;
  &lt;/a&gt;
  Part 1: Updating Repositories 🗄
&lt;/h2&gt;

&lt;p&gt;Let's cover the updating of all of our repositories to implement pagination and sorting support. Inside &lt;strong&gt;com.your-name.backend.repository&lt;/strong&gt; we will update the following classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommentRespository: We will convert our existing logic, as well as add a findAllByPost method that still returns a list, as we rely on that for sending back the total amount of comments in our PostService
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.Comment;
import com.maxicb.backend.model.Post;
import com.maxicb.backend.model.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.List;

public interface CommentRepository extends PagingAndSortingRepository&amp;lt;Comment, Long&amp;gt; {
    Page&amp;lt;Comment&amp;gt; findByPost(Post post, Pageable pageable);
    List&amp;lt;Comment&amp;gt; findAllByPost(Post post);
    Page&amp;lt;Comment&amp;gt; findAllByUser(User user, Pageable pageable);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;PostRepository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.Post;
import com.maxicb.backend.model.Subreddit;
import com.maxicb.backend.model.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.List;

public interface PostRepository extends PagingAndSortingRepository&amp;lt;Post, Long&amp;gt; {
    Page&amp;lt;Post&amp;gt; findAllBySubreddit(Subreddit subreddit, Pageable pageable);
    Page&amp;lt;Post&amp;gt; findByUser(User user, Pageable pageable);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SubredditRepository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.Subreddit;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.Optional;

public interface SubredditRepository extends PagingAndSortingRepository&amp;lt;Subreddit, Long&amp;gt; {
    Optional&amp;lt;Subreddit&amp;gt; findByName(String subredditName);
    Optional&amp;lt;Page&amp;lt;Subreddit&amp;gt;&amp;gt; findByNameLike(String subredditName, Pageable pageable);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-2-updating-services"&gt;
  &lt;/a&gt;
  Part 2: Updating Services 🌎
&lt;/h2&gt;

&lt;p&gt;Now that we have updated our repositories we will need to update our servcies to refelct these changes. Inside &lt;strong&gt;com.your-name.backend.service&lt;/strong&gt; we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommentService: We will update the getCommentsForPost &amp;amp;&amp;amp; getCommentsForUser methods to handle pagination properly
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public Page&amp;lt;CommentResponse&amp;gt; getCommentsForPost(Long id, Integer page) {
        Post post = postRepository.findById(id)
                .orElseThrow(() -&amp;gt; new PostNotFoundException("Post not found with id: " + id));
        return commentRepository.findByPost(post, PageRequest.of(page, 100)).map(this::mapToResponse);
    }

    public Page&amp;lt;CommentResponse&amp;gt; getCommentsForUser(Long id, Integer page) {
        User user = userRepository.findById(id)
                .orElseThrow(() -&amp;gt; new UserNotFoundException("User not found with id: " + id));
        return commentRepository.findAllByUser(user, PageRequest.of(page, 100)).map(this::mapToResponse);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;PostService: We will update the mapToResponse &amp;amp;&amp;amp; getAllPosts &amp;amp;&amp;amp; getPostsBySubreddit &amp;amp;&amp;amp; getPostsByUsername methods to implement pagination, and also retain the existing logic of mapping to DTO's
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    private PostResponse mapToResponse(Post post) {
        return PostResponse.builder()
                .postId(post.getPostId())
                .postTitle(post.getPostTitle())
                .url(post.getUrl())
                .description(post.getDescription())
                .userName(post.getUser().getUsername())
                .subredditName(post.getSubreddit().getName())
                .voteCount(post.getVoteCount())
                .commentCount(commentRepository.findAllByPost(post).size())
                .duration(TimeAgo.using(post.getCreationDate().toEpochMilli()))
                .upVote(checkVoteType(post, VoteType.UPVOTE))
                .downVote(checkVoteType(post, VoteType.DOWNVOTE))
                .build();
    }

    public Page&amp;lt;PostResponse&amp;gt; getAllPost(Integer page) {
        return postRepository.findAll(PageRequest.of(page, 100)).map(this::mapToResponse);
    }

    public Page&amp;lt;PostResponse&amp;gt; getPostsBySubreddit(Integer page, Long id) {
        Subreddit subreddit = subredditRepository.findById(id)
                .orElseThrow(() -&amp;gt; new SubredditNotFoundException("Subreddit not found with id: " + id));
        return postRepository
                .findAllBySubreddit(subreddit, PageRequest.of(page, 100))
                .map(this::mapToResponse);
    }

    public Page&amp;lt;PostResponse&amp;gt; getPostsByUsername(String username, Integer page) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -&amp;gt; new UserNotFoundException("User not found with username: " + username));
        return postRepository
                .findByUser(user, PageRequest.of(page, 100))
                .map(this::mapToResponse);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SubredditService: We will update the getAll method
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @Transactional(readOnly = true)
    public Page&amp;lt;SubredditDTO&amp;gt; getAll(Integer page) {
        return subredditRepository.findAll(PageRequest.of(page, 100))
                .map(this::mapToDTO);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-3-updating-controllers"&gt;
  &lt;/a&gt;
  Part 3: Updating Controllers
&lt;/h2&gt;

&lt;p&gt;Now that we have updated our services &amp;amp;&amp;amp; repositories we will need to update our controllers to allow client to use pagination. Inside &lt;strong&gt;com.your-name.backend.controller&lt;/strong&gt; we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommentController: We will update the getCommentsByPost &amp;amp;&amp;amp; getCommentsByUser methods to handle pagination properly
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @GetMapping("/post/{id}")
    public ResponseEntity&amp;lt;Page&amp;lt;CommentResponse&amp;gt;&amp;gt; getCommentsByPost(@PathVariable("id") Long id, @RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(commentService.getCommentsForPost(id, page.orElse(0)), HttpStatus.OK);
    }

    @GetMapping("/user/{id}")
    public ResponseEntity&amp;lt;Page&amp;lt;CommentResponse&amp;gt;&amp;gt; getCommentsByUser(@PathVariable("id") Long id,@RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(commentService.getCommentsForUser(id, page.orElse(0)), HttpStatus.OK);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;PostController: We will update the addPost method firstly to send the created post back to the client on successful creation, getAllPost &amp;amp;&amp;amp; getPostsBySubreddit &amp;amp;&amp;amp; getPostsByUsername methods to implement pagination
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @PostMapping
    public ResponseEntity&amp;lt;PostResponse&amp;gt; addPost(@RequestBody PostRequest postRequest) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.save(postRequest), HttpStatus.CREATED);
    }

    @GetMapping
    public ResponseEntity&amp;lt;Page&amp;lt;PostResponse&amp;gt;&amp;gt; getAllPost(@RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.getAllPost(page.orElse(0)), HttpStatus.OK);
    }

    @GetMapping("/sub/{id}")
    public ResponseEntity&amp;lt;Page&amp;lt;PostResponse&amp;gt;&amp;gt; getPostsBySubreddit(@PathVariable Long id, @RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.getPostsBySubreddit(page.orElse(0), id), HttpStatus.OK);
    }

    @GetMapping("/user/{name}")
    public ResponseEntity&amp;lt;Page&amp;lt;PostResponse&amp;gt;&amp;gt; getPostsByUsername(@PathVariable("name") String username, @RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.getPostsByUsername(username, page.orElse(0)), HttpStatus.OK);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SubredditController: We will update all of the methods to implement sending ResponseEntity as well as support pagination
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @GetMapping("/{page}")
    public ResponseEntity&amp;lt;Page&amp;lt;SubredditDTO&amp;gt;&amp;gt; getAllSubreddits (@PathVariable("page") Integer page) {
        return new ResponseEntity&amp;lt;&amp;gt;(subredditService.getAll(page), HttpStatus.OK);
    }

    @GetMapping("/sub/{id}")
    public ResponseEntity&amp;lt;SubredditDTO&amp;gt; getSubreddit(@PathVariable("id") Long id) {
        return new ResponseEntity&amp;lt;&amp;gt;(subredditService.getSubreddit(id), HttpStatus.OK);
    }

    @PostMapping
    public ResponseEntity&amp;lt;SubredditDTO&amp;gt; addSubreddit(@RequestBody @Valid SubredditDTO subredditDTO) throws Exception{
        try {
            return new ResponseEntity&amp;lt;&amp;gt;(subredditService.save(subredditDTO), HttpStatus.OK);
        } catch (Exception e) {
            throw new Exception("Error Creating Subreddit");
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-our-appliction-fully-supports-pagination-for-all-resources-that-could-grow-and-cause-slow-load-time-for-our-front-end-application"&gt;
  &lt;/a&gt;
  Now our appliction fully supports pagination for all resources that could grow and cause slow load time for our front end application!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#part-5-refresh-token-class"&gt;
  &lt;/a&gt;
  Part 5: Refresh Token Class ⏳
&lt;/h2&gt;

&lt;p&gt;Now we need to create our RefreshToken class, this class will have a ID, token, and the creationDate associated with it to allow for invalidating tokens after a set amount of time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RefreshToken:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.time.Instant;

@Data
@Entity
@AllArgsConstructor
@NoArgsConstructor
public class RefreshToken {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String token;
    private Instant creationDate;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-5-refresh-token-service-and-dto"&gt;
  &lt;/a&gt;
  Part 5: Refresh Token Service and DTO🌎
&lt;/h2&gt;

&lt;p&gt;Now that we have our RefreshToken, we will get everything in place to begin updating our Authentication system. Inside the project we will add, and update the following classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RefreshTokenRepository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.RefreshToken;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.Optional;

public interface RefreshTokenRepository extends PagingAndSortingRepository&amp;lt;RefreshToken, Long&amp;gt; {
    Optional&amp;lt;RefreshToken&amp;gt; findByToken(String token);

    void deleteByToken(String token);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;RefreshTokenService: This service will allow us to generate tokens, validate tokens, and delete tokens.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.service;

import com.maxicb.backend.exception.VoxNobisException;
import com.maxicb.backend.model.RefreshToken;
import com.maxicb.backend.repository.RefreshTokenRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.UUID;

@Service
@AllArgsConstructor
@Transactional
public class RefreshTokenService {
    private RefreshTokenRepository refreshTokenRepository;

    RefreshToken generateRefreshToken () {
        RefreshToken refreshToken = new RefreshToken();
        refreshToken.setToken(UUID.randomUUID().toString());
        refreshToken.setCreationDate(Instant.now());
        return refreshTokenRepository.save(refreshToken);
    }

    void validateToken(String token) {
        refreshTokenRepository.findByToken(token)
                .orElseThrow(() -&amp;gt; new VoxNobisException("Invalid Refresh Token"));
    }

    public void deleteRefreshToken(String token) {
        refreshTokenRepository.deleteByToken(token);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Updated AuthResponse: We will update the AuthResponse to include our newly generated token.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.Instant;

@Data
@AllArgsConstructor
public class AuthResponse {
        private String authenticationToken;
        private String refreshToken;
        private Instant expiresAt;
        private String username;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;RefreshTokenRequest: This DTO will handle requests from the client to refresh their token, before it expires in the system
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.validation.constraints.NotBlank;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class RefreshTokenRequest {
    @NotBlank
    private String refreshToken;
    private String username;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-6-jwtprovider-update"&gt;
  &lt;/a&gt;
  Part 6: JWTProvider Update 🔏
&lt;/h2&gt;

&lt;p&gt;Now that we have everything in place, we will begin updating our JWT system. Inside &lt;strong&gt;com.your-name.backend.service&lt;/strong&gt; we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JWTProvider: We will update our JWT implementation to include a issuedAt date, and also set a expiration date when we create a new token.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Service
public class JWTProvider {
    private KeyStore keystore;
    @Value("${jwt.expiration.time}")
    private Long jwtExpirationMillis;

    ...
    ....
    public String generateToken(Authentication authentication) {
        org.springframework.security.core.userdetails.User princ = (User) authentication.getPrincipal();
        return Jwts.builder()
                .setSubject(princ.getUsername())
                .setIssuedAt(from(Instant.now()))
                .signWith(getPrivKey())
                .setExpiration(from(Instant.now().plusMillis(jwtExpirationMillis)))
                .compact();
    }

    public String generateTokenWithUsername(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(from(Instant.now()))
                .signWith(getPrivKey())
                .setExpiration(from(Instant.now().plusMillis(jwtExpirationMillis)))
                .compact();
    }
    ....
    ...
    public Long getJwtExpirationMillis() {
        return jwtExpirationMillis;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-7-updated-authentication"&gt;
  &lt;/a&gt;
  Part 7: Updated Authentication 💂‍♀️
&lt;/h2&gt;

&lt;p&gt;Now that we implemented pagination, we will begin updating our Authentication system. Inside our project we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AuthService: We will update our AuthService to handle sending refreshTokens, and add the logic for refreshing existing tokens.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public AuthResponse refreshToken(RefreshTokenRequest refreshTokenRequest) {
        refreshTokenService.validateToken(refreshTokenRequest.getRefreshToken());
        String token = jwtProvider.generateTokenWithUsername(refreshTokenRequest.getUsername());
        return new AuthResponse(token, refreshTokenService.generateRefreshToken().getToken(), Instant.now().plusMillis(jwtProvider.getJwtExpirationMillis()), refreshTokenRequest.getUsername());
    }

public AuthResponse login (LoginRequest loginRequest) {
        Authentication authenticate = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(), loginRequest.getPassword()));
        SecurityContextHolder.getContext().setAuthentication(authenticate);
        String authToken = jwtProvider.generateToken(authenticate);
        String refreshToken = refreshTokenService.generateRefreshToken().getToken();
        return new AuthResponse(authToken, refreshToken, Instant.now().plusMillis(jwtProvider.getJwtExpirationMillis()), loginRequest.getUsername());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;AuthController: We will now implement the new endpoints to allow the client to use the newly added logic.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@PostMapping("/refresh/token")
    public AuthResponse refreshToken(@Valid @RequestBody RefreshTokenRequest refreshTokenRequest) {
        return authService.refreshToken(refreshTokenRequest);
    }

    @PostMapping("/logout")
    public ResponseEntity&amp;lt;String&amp;gt; logout(@Valid @RequestBody RefreshTokenRequest refreshTokenRequest) {
        refreshTokenService.deleteRefreshToken(refreshTokenRequest.getRefreshToken());
        return ResponseEntity.status(HttpStatus.OK).body("Refresh Token Deleted");
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-8-custom-exception"&gt;
  &lt;/a&gt;
  Part 8: Custom Exception 🚫
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;VoxNobisException: We will create a general purpose custom exception that can be used repeatedly throughout our application as we extend it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.exception;

public class VoxNobisException extends RuntimeException {
    public VoxNobisException(String message) {super(message);}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-9-updated-applicationproperties"&gt;
  &lt;/a&gt;
  Part 9: Updated application.properties
&lt;/h2&gt;

&lt;p&gt;We will need to add the expiration time that we would like our application to use when it comes to generating tokens, and setting their expiration dates accordingly. I have chose to set it to 15 minutes, but in the future will increase the duration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# JWT Properties
jwt.expiration.time=900000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-10-implementing-swagger-ui"&gt;
  &lt;/a&gt;
  Part 10: Implementing Swagger UI 📃
&lt;/h2&gt;

&lt;p&gt;Now that we are at the end of our MVP backend, we will add Swagger UI. If you have never used Swagger before, it is a great way to automatically generate documentation for your API. You can learn more &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pom.xml: We will need to include the swagger dependencies inside our project's pom.xml file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SwaggerConfig: Inside &lt;strong&gt;com.your-name.backend.config&lt;/strong&gt; we will create the following class.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {
    @Bean
    public Docket voxNobisAPI() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.any())
                .paths(PathSelectors.any())
                .build()
                .apiInfo(getAPIInfo());
    }

    private ApiInfo getAPIInfo(){
        return new ApiInfoBuilder()
                .title("Vox-Nobis API")
                .version("1.0")
                .description("API for Vox-Nobis reddit clone")
                .build();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;BackendApplication: Inside &lt;strong&gt;com.your-name.backend&lt;/strong&gt; we will inject our Swagger configuration.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@SpringBootApplication
@EnableAsync
@Import(SwaggerConfig.class)
public class BackendApplication {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Security: If you run the application now, and try to navigate to &lt;strong&gt;&lt;a href="http://localhost:8080/swagger-ui.html#/"&gt;http://localhost:8080/swagger-ui.html#/&lt;/a&gt;&lt;/strong&gt;, you will likely get a 403 forbidden error. Inside &lt;strong&gt;com.your-name.backend.config&lt;/strong&gt; we will need to update our security configuration to allow access without authorization by adding the following matchers underneath our existing one.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.antMatchers(HttpMethod.GET, "/api/subreddit")
.permitAll()
.antMatchers("/v2/api-docs",
            "/configuration/ui",
            "/swagger-resources/**",
            "/configuration/security",
            "/swagger-ui.html",
            "/webjars/**")
.permitAll()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 🔍
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To ensure everything is configured correctly you can run the application, and ensure there are no error in the console. Towards the bottom of the console you should see output similar to below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgbYnXkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mcnzflm8vjwnvjcx40sh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgbYnXkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mcnzflm8vjwnvjcx40sh.PNG" alt="Alt Text" title="Successful Run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If there are no error's in the console you can test the new logic by sending a post request to &lt;strong&gt;&lt;a href="http://localhost:8080/api/auth/login"&gt;http://localhost:8080/api/auth/login&lt;/a&gt;&lt;/strong&gt; with the correct data, upon successful login you should receive the refreshToken, and username back now!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also navigate to &lt;strong&gt;&lt;a href="http://localhost:8080/swagger-ui.html#/"&gt;http://localhost:8080/swagger-ui.html#/&lt;/a&gt;&lt;/strong&gt;, and view the documentation for all of the endpoints we have created, as well as the information they need, and return.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this article we added pagination, and token expiration times.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#next"&gt;
  &lt;/a&gt;
  Next
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#follow-to-get-informed-when-part-ten-is-released-where-we-will-begin-working-on-the-front-end-of-the-application"&gt;
  &lt;/a&gt;
  Follow to get informed when part ten is released, where we will begin working on the Front End of the application!
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>java</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Have Fedora of Mine Been</title>
      <author>Naufan Rusyda Faikar</author>
      <pubDate>Sat, 19 Jun 2021 02:30:54 +0000</pubDate>
      <link>https://dev.to/naruaika/how-have-fedora-of-mine-been-439j</link>
      <guid>https://dev.to/naruaika/how-have-fedora-of-mine-been-439j</guid>
      <description>&lt;p&gt;I, &lt;em&gt;sometimes&lt;/em&gt;, love being as a researcher. In just a minute or two, my machine, &lt;em&gt;oftentimes&lt;/em&gt;, ended up be a mess. Hearing of Fedora thirty-four which has just officially launched, doing a fresh install of the operating system (OS) had been emerging in my mind, &lt;em&gt;all the time&lt;/em&gt;. But how could clean installation clean up the mess? Nay, that is not possible! Once I got my hands dirty, everything will not be alright. Consequently, I have thoughts of keeping myself away from messing around for this time.&lt;/p&gt;

&lt;p&gt;As many of people in many different communities have mentioned what is new in the thirty-four edition, followed by how-tos when installing Fedora for the first time, or even again, I have nothing more to share. Still and all, it is rather not a bad idea to capture and talk about decisions I have made.&lt;/p&gt;

&lt;p&gt;Most of people will do update all the pre-installed packages on their newly installed operating system, so did I. On Fedora, to update/upgrade packages, we need to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nt"&gt;--assumeyes&lt;/span&gt; upgrade
...

&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thereafter, I started to setup this armament of mine.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  #1
&lt;/h1&gt;

&lt;p&gt;I have concerned that my cheap wireless earbuds is not working correctly on &lt;a href="https://pipewire.org/"&gt;PipeWire&lt;/a&gt;. There are audio skips and out-of-sync issues, constantly. So, I have decided to switch back to &lt;a href="https://www.freedesktop.org/wiki/Software/PulseAudio/"&gt;PulseAudio&lt;/a&gt; by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf swap &lt;span class="nt"&gt;--allowerasing&lt;/span&gt; pipewire-pulseaudio pulseaudio
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will give PipeWire a second chance after hearing that this issue is resolved in the upstream. Until then, we are done. Or until someone gives me more supported earbuds. LOL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  #2
&lt;/h1&gt;

&lt;p&gt;To play a wide variety of multimedia, especially those with restricted codecs, we need to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Enable the RPMFusion repositories&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install &lt;/span&gt;https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-&lt;span class="si"&gt;$(&lt;/span&gt;rpm &lt;span class="nt"&gt;-E&lt;/span&gt; %fedora&lt;span class="si"&gt;)&lt;/span&gt;.noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-&lt;span class="si"&gt;$(&lt;/span&gt;rpm &lt;span class="nt"&gt;-E&lt;/span&gt; %fedora&lt;span class="si"&gt;)&lt;/span&gt;.noarch.rpm
...

&lt;span class="c"&gt;# Install the restricted codecs&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;group upgrade &lt;span class="nt"&gt;--with-optional&lt;/span&gt; Multimedia
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, I can now play all of them using the default video player on Fedora, &lt;a href="https://wiki.gnome.org/Apps/Videos"&gt;GNOME Videos&lt;/a&gt;, or formerly known as Totem. I know, it is not the best choice, but it just worked for me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  #3
&lt;/h1&gt;

&lt;p&gt;Since my machine has a dedicated graphics processing unit (GPU), the GeForce GTX 10 Series for mobile, I have also grabbed the proprietary driver by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; akmod-nvidia
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then restart my machine once again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  #4
&lt;/h1&gt;

&lt;p&gt;We are all know that technology is changing too fast these days. They are unpredictable anymore. It seems like every day, new programming languages and frameworks are born. Sometimes they are solutions, sometimes they are new problems.&lt;/p&gt;

&lt;p&gt;As a software developer, or even just a normal computer user, the need to testing out which tool works best cannot be avoided. This is the another reason why my Fedora-yey is getting bloated and unkempt by the day.&lt;/p&gt;

&lt;p&gt;I was thinking to keep my host as minimum as possible by installing all the generic software—such as multimedia players, internet browsers, and text editors—on the host and separating all the specific things into container groups.&lt;/p&gt;

&lt;p&gt;Gratefully, Fedora comes with &lt;a href="https://podman.io/"&gt;Podman&lt;/a&gt; and &lt;a href="https://github.com/containers/toolbox"&gt;Toolbox&lt;/a&gt; pre-installed. Let us take the curiosity out by looking into how I organised my workspaces into groups.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman ps &lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; toolbox
CONTAINER ID  IMAGE                                         COMMAND               CREATED       STATUS                      PORTS                   NAMES
45da333221a9  docker.io/vulnerables/web-dvwa:latest                               5 weeks ago   Created                     0.0.0.0:8080-&amp;gt;80/tcp    dvwa
00cd783bf551  docker.io/raesene/bwapp:latest                /run.sh               5 weeks ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;137&lt;span class="o"&gt;)&lt;/span&gt; 5 weeks ago    0.0.0.0:8080-&amp;gt;80/tcp    bwapp
6d248675f778  docker.io/bkimminich/juice-shop:latest        npm start             5 weeks ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 5 weeks ago      0.0.0.0:8080-&amp;gt;3000/tcp  juice-shop
feea59da1a18  docker.io/szsecurity/webgoat:latest           /usr/bin/supervis...  5 weeks ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 5 weeks ago      0.0.0.0:8080-&amp;gt;80/tcp    webgoat
7f791fa949e1  docker.io/library/postgres:latest             postgres              40 hours ago  Created                                             postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For other cases, I need to have them installed on the root;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;podman ps &lt;span class="nt"&gt;-a&lt;/span&gt;
CONTAINER ID  IMAGE                                      COMMAND               CREATED      STATUS                    PORTS                                           NAMES
cef6fbe452f6  docker.io/tleemcjr/metasploitable2:latest  sh &lt;span class="nt"&gt;-c&lt;/span&gt; /bin/servic...  4 weeks ago  Exited &lt;span class="o"&gt;(&lt;/span&gt;137&lt;span class="o"&gt;)&lt;/span&gt; 4 weeks ago                                                  metasploitable
db82745c519b  k8s.gcr.io/pause:3.5                                             2 weeks ago  Created                   0.0.0.0:3000-&amp;gt;3000/tcp, 0.0.0.0:3306-&amp;gt;3306/tcp  18235f9b87b5-infra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having those containers, I rarely boot up GNU/Linux OSes with GNOME Boxes. Although, I still need them for a couple of things.&lt;/p&gt;

&lt;p&gt;You might noticed that all the above containers can be easily obtained by, for instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download the PostgreSQL image&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;podman pull docker.io/library/postgres
...

&lt;span class="c"&gt;# Create and run a new PostgreSQL container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;podman run &lt;span class="nt"&gt;--name&lt;/span&gt; postgres &lt;span class="nt"&gt;--network&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;host &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pass &lt;span class="nt"&gt;-d&lt;/span&gt; postgres
...

&lt;span class="c"&gt;# Enter the PostgreSQL client&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;podman &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; postgres psql &lt;span class="nt"&gt;-U&lt;/span&gt; postgres
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each one is pre-configured by every great maintainers around the globe; nothing more to configure anything. But what if I want to customise a container from scratch? Meaning, just give me a &lt;code&gt;rootfs&lt;/code&gt; (if I am not mistaken) and I will do the rest. In this case, Toolbox has &lt;a href="https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/"&gt;some advantages&lt;/a&gt; over the other;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;toolbox list

IMAGE ID      IMAGE NAME                                    CREATED
9c649cf455d4  registry.fedoraproject.org/fedora-toolbox:34  7 weeks ago

CONTAINER ID  CONTAINER NAME  CREATED      STATUS      IMAGE NAME
25dba789f9c7  build-tool      13 days ago  exited      registry.fedoraproject.org/fedora-toolbox:34
17e258afdc85  games           6 days ago   exited      registry.fedoraproject.org/fedora-toolbox:34
b1263fcbb2f3  iot-dev         3 days ago   configured  registry.fedoraproject.org/fedora-toolbox:34
788dea945c07  mobile-dev      7 days ago   configured  registry.fedoraproject.org/fedora-toolbox:34
b68dcf5c322f  texlive         6 weeks ago  configured  registry.fedoraproject.org/fedora-toolbox:34
709bab881755  web-dev         13 days ago  exited      registry.fedoraproject.org/fedora-toolbox:34
6317f74b06ae  web-sec         5 weeks ago  exited      registry.fedoraproject.org/fedora-toolbox:34
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whensoever it is required to build a package from the source code, I will do so in the &lt;code&gt;build-tool&lt;/code&gt; container and grab the executable to the host if needed. This is pretty much where I installed the &lt;code&gt;-devel&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;I have all games, with all the dependencies for the &lt;code&gt;wine&lt;/code&gt; to run correctly, installed in the &lt;code&gt;games&lt;/code&gt; container. Despite being not a pro gamer, but rather a programmer, I have included Steam as well.&lt;/p&gt;

&lt;p&gt;Although we have installed the GPU driver and have fully access to the GPU from the box, out-of-the-box, until now we need to install the driver &lt;em&gt;again&lt;/em&gt; inside the box (read: container). There is &lt;a href="https://github.com/containers/toolbox/issues/116"&gt;a discussion&lt;/a&gt; and work-in-progress solution for this.&lt;/p&gt;

&lt;p&gt;By the way, do not forget to set the launch game options with &lt;code&gt;__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia %command%&lt;/code&gt; to every Steam games to run it using the Nvidia GPU.&lt;/p&gt;

&lt;p&gt;For programming, I have &lt;code&gt;iot-dev&lt;/code&gt;, &lt;code&gt;mobile-dev&lt;/code&gt;, and &lt;code&gt;web-dev&lt;/code&gt; containers, even though they can all be put together (not to-get-her, sorry) into a single container.&lt;/p&gt;

&lt;p&gt;For writing, as I prefer LaTeX to LibreOffice Writer and Google Docs, I have created &lt;code&gt;texlive&lt;/code&gt; container. Why not the host? Is not it a generic-purpose software? Because of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install &lt;/span&gt;texlive-scheme-full
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are so many packages that need to be installed, whoops, that is it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  #5
&lt;/h1&gt;

&lt;p&gt;Firefox is by default comes with Fedora Workstation installation. I love Firefox, she is a nice friend, not a pet. But I love Firefox Developer Edition more. So, sorry, got to move on. Unluckly, there is not any Firefox Developer Edition in the official Fedora repository. Therefore, I had to download the &lt;code&gt;tar&lt;/code&gt; file, extract, and install it manually.&lt;/p&gt;

&lt;p&gt;By the way, Firefox has its own way to get an update, thus need not to do it by hand. It means no more downloading, extracting, and installing it manually.&lt;/p&gt;

&lt;p&gt;Apparently, Visual Studio Code (VSCode) Insider has no idea about this behaviour. But it is relatively easier to install compared to Firefox Developer Edition.&lt;/p&gt;

&lt;p&gt;Besides these two, I have also installed Krita, GIMP, and Inkscape for daily use. For Krita, I am not using it for creating artworks, but for writing/sketching notes (please, do not blame me). For setting up my programmable mouse, I have &lt;a href="https://github.com/libratbag/piper/"&gt;Piper&lt;/a&gt;. For recording my screen, I have chosen &lt;a href="https://github.com/SeaDve/Kooha"&gt;Kooha&lt;/a&gt;. For connecting my desktop to mobile devices, I have been using &lt;a href="https://github.com/GSConnect/gnome-shell-extension-gsconnect"&gt;GSConnect&lt;/a&gt;. And it goes on ... As everyone has their own preferences.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6"&gt;
  &lt;/a&gt;
  #6
&lt;/h1&gt;

&lt;p&gt;You might be wondering, how do I compile &lt;code&gt;*.tex&lt;/code&gt; files? The host does not have LaTeX compiler, but the &lt;code&gt;texlive&lt;/code&gt; container does. With Visual Studio Code, it is easy to remote access to the container.&lt;/p&gt;

&lt;p&gt;First of all, let us run and enter the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;toolbox enter texlive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, give write permission to the &lt;code&gt;/root&lt;/code&gt; directory for our user. In spite of not the best workaround, I tend to change the ownership instead;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; naru /root

&lt;span class="c"&gt;# ls -la /&lt;/span&gt;
total 20
...
drwxr-x---.   9 naru   root    420 Jun 19 09:04 root
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, attach the VSCode to the running container named &lt;code&gt;texlive&lt;/code&gt;. We need the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;&lt;code&gt;Remote - Containers&lt;/code&gt;&lt;/a&gt; extension installed on the VSCode.&lt;/p&gt;

&lt;p&gt;Forth, open a folder contains our LaTex files.&lt;/p&gt;

&lt;p&gt;Fifth, happy writing! You probably would like to install &lt;a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop"&gt;&lt;code&gt;LaTeX Workshop&lt;/code&gt;&lt;/a&gt; extension for VSCode.&lt;/p&gt;

&lt;p&gt;We actually need not to enter the &lt;code&gt;texlive&lt;/code&gt; container, just run it. So, we can safely &lt;code&gt;exit&lt;/code&gt; from the container now. Next time, make sure to run the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;toolbox run &lt;span class="nt"&gt;-c&lt;/span&gt; texlive &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;before VSCode, if not already run.&lt;/p&gt;

&lt;p&gt;That is all. Appreciate any feedback from all of you. Feel free to share your setup with us. Have a nice day!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fedoraproject.org/wiki/Changes/DefaultPipeWire"&gt;https://fedoraproject.org/wiki/Changes/DefaultPipeWire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rpmfusion.org/Configuration"&gt;https://rpmfusion.org/Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rpmfusion.org/Howto/Multimedia?highlight=%28%5CbCategoryHowto%5Cb%29"&gt;https://rpmfusion.org/Howto/Multimedia?highlight=%28%5CbCategoryHowto%5Cb%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rpmfusion.org/Howto/NVIDIA?highlight=%28%5CbCategoryHowto%5Cb%29"&gt;https://rpmfusion.org/Howto/NVIDIA?highlight=%28%5CbCategoryHowto%5Cb%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/"&gt;https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.steampowered.com/kb_article.php?ref=1040-JWMT-2947"&gt;https://support.steampowered.com/kb_article.php?ref=1040-JWMT-2947&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://download.nvidia.com/XFree86/Linux-x86_64/435.17/README/primerenderoffload.html"&gt;https://download.nvidia.com/XFree86/Linux-x86_64/435.17/README/primerenderoffload.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.fedoraproject.org/en-US/neurofedora/latex/"&gt;https://docs.fedoraproject.org/en-US/neurofedora/latex/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/containers/toolbox/issues/610#issuecomment-726057756"&gt;https://github.com/containers/toolbox/issues/610#issuecomment-726057756&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>fedora</category>
    </item>
    <item>
      <title>Making Styles Repeatable: Dynamic Styling in React using Styled Components</title>
      <author>Shaundai Person</author>
      <pubDate>Fri, 18 Jun 2021 23:20:28 +0000</pubDate>
      <link>https://dev.to/shaundai/making-styles-repeatable-dynamic-styling-in-react-using-styled-components-5afl</link>
      <guid>https://dev.to/shaundai/making-styles-repeatable-dynamic-styling-in-react-using-styled-components-5afl</guid>
      <description>&lt;p&gt;The &lt;a href="https://styled-components.com/"&gt;styled-components library&lt;/a&gt; makes it easy to create dynamic styles.  At the most fundamental level, Styled Components are just React components with CSS styles attached.  Thus, they can be used the same way we'd use any React component.  Styled Components also come with out-of-the-box constructors that allow you to pass props and functions into your styles, which is what gives them their dynamic abilities.&lt;/p&gt;

&lt;p&gt;Before we get into the &lt;em&gt;how&lt;/em&gt; though, let’s talk about the &lt;em&gt;why&lt;/em&gt;.  Why would we want to use dynamic styles in our React apps?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DRY and Maintainable:&lt;/strong&gt; Instead of declaring the same styles again and again each time you need them, dynamic styles are declared once and exported as needed.  This means that any future changes to styles only need to be made in one place.  When you Don’t Repeat Yourself (DRY), maintaining and updating your codebase is simpler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less Error Prone:&lt;/strong&gt; Now that we only need to make our changes in one place, it's also less likely we’ll accidentally miss a change somewhere.  For this reason, DRY code (via dynamic styling) is more trustworthy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clean and Easy to Read:&lt;/strong&gt; Dynamic styling allows us to change up our styles without injecting or removing class names, making our stylesheets shorter and cleaner.  Styles can even be declared &lt;em&gt;within&lt;/em&gt; the &lt;code&gt;.js&lt;/code&gt; file using the styles, making them really easy to find later!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#starting-with-a-basic-button"&gt;
  &lt;/a&gt;
  Starting with a Basic Button
&lt;/h3&gt;

&lt;p&gt;Start by declaring a variable with a descriptive name (like &lt;code&gt;PrimaryButton&lt;/code&gt; below) and setting it equal to &lt;code&gt;styled.[HTML-element-we-want-to-use]&lt;/code&gt;.  The styles are declared between two backticks at the end of the Styled Component declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: darkcyan;
  color: white;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: rgb(0,139,139,0.5);
  } 
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;PrimaryButton&lt;/code&gt; contains a lot of styles that we'll be using frequently in our app.  Luckily - since &lt;code&gt;PrimaryButton&lt;/code&gt; is fundamentally a React Component - we don't need to retype these styles each time we need to use them.  We also don't need to worry about adding class names to link our styles to a separate stylesheet.  To use &lt;code&gt;PrimaryButton&lt;/code&gt; styles, all we do is swap the old HTML element &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...with our new &lt;code&gt;PrimaryButton&lt;/code&gt; Styled Component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrimaryButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PrimaryButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If our marketing team later decides to change our app’s theme colors from &lt;code&gt;darkcyan&lt;/code&gt; to &lt;code&gt;green&lt;/code&gt;, all we need to do is make a one-line change to &lt;code&gt;PrimaryButton&lt;/code&gt; to change &lt;em&gt;all&lt;/em&gt; instances of &lt;code&gt;PrimaryButton&lt;/code&gt; to &lt;code&gt;green&lt;/code&gt; at once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extending-custom-styles"&gt;
  &lt;/a&gt;
  Extending Custom Styles
&lt;/h3&gt;

&lt;p&gt;What if we want two different-but-fairly-similar types of buttons in our app?  For instance, what if our primary buttons are &lt;code&gt;darkcyan&lt;/code&gt;, but we also want some buttons with a &lt;code&gt;red&lt;/code&gt; background to indicate to users that an action is permanent?  Other than the color, these red “destructive buttons” will be identical to the &lt;code&gt;PrimaryButtons&lt;/code&gt; we built in the previous example.&lt;/p&gt;

&lt;p&gt;Rather than creating a new class for our destructive style, we &lt;em&gt;extend&lt;/em&gt; the &lt;code&gt;PrimaryButton&lt;/code&gt; styles that we want to use and override the styles we don’t need.  This is all the code we need to tell Styled Components “&lt;code&gt;PrimaryButton&lt;/code&gt;, but red.”:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DestructiveButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  color: ‘red’;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use our new &lt;code&gt;DestructiveButton&lt;/code&gt; in place of &lt;code&gt;PrimaryButton&lt;/code&gt; wherever we'd like the &lt;code&gt;red&lt;/code&gt; buttons to appear. Our code is much cleaner and easier to maintain.  If our marketing team comes back and wants to change the padding for all buttons to &lt;code&gt;12px&lt;/code&gt; instead of &lt;code&gt;14px&lt;/code&gt;, we only need to change the single padding declaration in &lt;code&gt;PrimaryButton&lt;/code&gt; to update the padding for &lt;em&gt;all&lt;/em&gt; buttons, Primary and Destructive alike.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-styles-dynamic"&gt;
  &lt;/a&gt;
  Making Styles Dynamic
&lt;/h3&gt;

&lt;p&gt;Now let’s get into the dynamic styling.  In this example, we want a button to be &lt;code&gt;darkcyan&lt;/code&gt; some of the time and &lt;code&gt;red&lt;/code&gt; some of the time (for example, the submit button on a form that only turns red when the user has entered invalid information).&lt;/p&gt;

&lt;p&gt;How can we make our styles change based on the current status of elements in our UI?  If we were using just CSS, we'd need to add or remove a class when the input is empty.  If we were using React, we might use a function that accepts props.  Based on the value in those props, our function could set the color equal to either &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;darkcyan&lt;/code&gt;.  Since Styled Components is just React, we have an easy way of doing the latter.&lt;/p&gt;

&lt;p&gt;Styled Components comes with an Attributes constructor (&lt;code&gt;attrs&lt;/code&gt;) that accepts static props or dynamic props.  We're going to use dynamic props for this example.&lt;/p&gt;

&lt;p&gt;We start from scratch with a styled button component - &lt;code&gt;MainButton&lt;/code&gt; - which can dynamically render three variants: &lt;code&gt;primary&lt;/code&gt;, &lt;code&gt;destructive&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt; (inverted &lt;code&gt;primary&lt;/code&gt; colors).  We'll use the &lt;code&gt;attrs&lt;/code&gt; constructor to make the &lt;code&gt;background-color&lt;/code&gt;, &lt;code&gt;border-color&lt;/code&gt; colors, and &lt;code&gt;hover&lt;/code&gt; colors change dynamically.&lt;/p&gt;

&lt;p&gt;Below, we start with three objects each defining the colors by variant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ButtonBackgroundColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darkcyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;destructive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ButtonBorderColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;destructive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darkcyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ButtonHoverColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgb(0,139,139,0.5)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;destructive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgb(255,0,0,0.5)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgb(0,139,139,0.5)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use &lt;code&gt;attrs&lt;/code&gt;, we add it onto the end of the template literal declaration.  &lt;code&gt;attrs&lt;/code&gt; accepts a function that takes in the &lt;code&gt;props&lt;/code&gt; from our instance of &lt;code&gt;&amp;lt;MainButton&amp;gt;&lt;/code&gt;. The &lt;code&gt;attrs&lt;/code&gt; function returns an object, and we've set those &lt;code&gt;props&lt;/code&gt; equal to the object's keys.  In other words, to use &lt;code&gt;colorVariant&lt;/code&gt; in an instance of &lt;code&gt;MainButton&lt;/code&gt;, all we need to do is add colorVariant as a prop like this: &lt;code&gt;&amp;lt;MainButton colorVariant="primary"&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is good practice to also include a fallback or default option in case the developer does not add any &lt;code&gt;colorVariant&lt;/code&gt; props to &lt;code&gt;MainButton&lt;/code&gt;.  Setting &lt;code&gt;colorVariant&lt;/code&gt; equal to either &lt;code&gt;props.colorVariant&lt;/code&gt; or &lt;code&gt;'primary'&lt;/code&gt; means that if &lt;code&gt;colorVariant&lt;/code&gt; is not present, we will always use &lt;code&gt;primary&lt;/code&gt; as our variant.&lt;/p&gt;

&lt;p&gt;In this example we're only changing colors using a &lt;code&gt;colorVariant&lt;/code&gt; prop, but the variant possibilities are endless!  In the future, if we wanted to add, say, a &lt;code&gt;sizeVariant&lt;/code&gt; that manipulates the height, width, and padding of the button based on variants of &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, and &lt;code&gt;large&lt;/code&gt;, we could add that to our object as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MainButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: darkcyan;
  color: white;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: rgb(0,139,139,0.5);
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, we've told &lt;code&gt;MainButton&lt;/code&gt; to look out for the &lt;code&gt;colorVariant&lt;/code&gt; prop, but we haven't yet provided it our colors.  Let's start with &lt;code&gt;background-color&lt;/code&gt;.  Below, we set it equal to a function that accepts the &lt;code&gt;props&lt;/code&gt; from &lt;code&gt;attrs&lt;/code&gt;.  We return the property in &lt;code&gt;ButtonBackgroundColors&lt;/code&gt; that has the color variant we used (in this case, &lt;code&gt;primary&lt;/code&gt;) as a key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonBackgroundColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  color: white;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: rgb(0,139,139,0.5);
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, we can make our color function a bit cleaner using object destructuring.  Below, we destructure &lt;code&gt;props&lt;/code&gt; in our declaration function for &lt;code&gt;background-color&lt;/code&gt;.  (Note, the code in &lt;code&gt;background-color&lt;/code&gt; below does exactly the same thing as the &lt;code&gt;background-color&lt;/code&gt; above.  Destructuring as we've done below is a matter of personal preference).&lt;/p&gt;

&lt;p&gt;We also use our &lt;code&gt;ButtonBorderColors&lt;/code&gt; and &lt;code&gt;ButtonHoverColors&lt;/code&gt; objects to give dynamic styling to &lt;code&gt;border-color&lt;/code&gt; and &lt;code&gt;hover&lt;/code&gt; &lt;code&gt;background-color&lt;/code&gt;.  &lt;code&gt;props&lt;/code&gt; has been destructured in their declaration as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonBackgroundColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonTextColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonHoverColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're ready to use our dynamic styles!  We can provide props to our button like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MainButton&lt;/span&gt; &lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;destructive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MainButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or we have the option of using a function that passes in the correct color based on props or events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MainButton&lt;/span&gt; &lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getColorVariantFunction&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MainButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Dynamic styling gives us clean, DRY code that can be easily reused.  Our codebase is more trustworthy and easier to maintain; any future changes only need to be made in one place.  Best of all, we have a way to change styles without the messiness of adding class names, eliminating the chances of making silly errors that cause bugs in production.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I'm building a TypeScript course - TypeScript for JavaScript Developers&lt;/em&gt;!  &lt;b&gt;Sign up for updates &lt;a href="https://www.tsforjs.com"&gt;here&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;...or find me on &lt;a href="https://twitter.com/shaundai"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Deploy your React App using Github Pages.</title>
      <author>Gus Bikos</author>
      <pubDate>Fri, 18 Jun 2021 23:06:28 +0000</pubDate>
      <link>https://dev.to/gusbikos/deploy-your-react-app-using-github-pages-27f8</link>
      <guid>https://dev.to/gusbikos/deploy-your-react-app-using-github-pages-27f8</guid>
      <description>&lt;p&gt;If you don't have any hosting at the moment and you want to use something free Github is a very good option.  In this step by step tutorial I will be going over the process of creating and deploying a React application.  &lt;/p&gt;

&lt;p&gt;Before the process gets started we need to make sure we have the following installed: &lt;br&gt;
Node.js - &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once that's installed you can head over to your terminal/text editor and decide where you would like to create your react application.  Now that your ready to create your app you type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init react-app &amp;lt;your project name here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should take about a minute as you are now creating your new react application and all the files that comes with it.  &lt;/p&gt;

&lt;p&gt;Then you want to cd into the folder that contains your application.  Run a npm start to make sure that your application is running, and you should see a tab open with the react logo.  If your able to see that then your react application loaded successfully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that your react app is all set head over to your Github page and create a new repository. I personally like to name my repository and my react app the same but it's ok to have a different name if you like. Make sure its a public, and empty repository so make sure there is no README.md, description etc.&lt;/p&gt;

&lt;p&gt;You will see this page &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0du6yTkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghjo978hw6ftfn3rv4y5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0du6yTkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghjo978hw6ftfn3rv4y5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Leave that open for now and lets move on to the next step.&lt;/p&gt;

&lt;p&gt;Make sure your server is shut down by hitting ctrl+C and run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install gh-pages --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we install the github pages and we save it as a dev dependancy. Explanation of a dev dependency here &lt;a href="https://nodejs.dev/learn/npm-dependencies-and-devdependencies"&gt;https://nodejs.dev/learn/npm-dependencies-and-devdependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that's installed you want to head over to your react application in your text editor, and go into your package.json, here we need to add a few things.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BdjLZ6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym2hyuq2yu0zflk4mu7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BdjLZ6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym2hyuq2yu0zflk4mu7f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the very top above "name" your going to add "homepage": "http://"your-github-name".github.io/"your-repo-name", don't forget to add the comma.  This is going to be the link to your web application.&lt;/p&gt;

&lt;p&gt;Then your going to navigate where it says "scripts" and in that hash you are going to add two things:&lt;br&gt;
"predeploy": "npm run build",&lt;br&gt;
"deploy": "gh-pages -d build",&lt;br&gt;
so the final product looks like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xt7WBDE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av8k31gfkfa18sqse6g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xt7WBDE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av8k31gfkfa18sqse6g2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Refer to the picture above to see the differences.&lt;/p&gt;

&lt;p&gt;Next step in your text editor (make sure you are in the right folder) type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go back to your Github page where you created the repo earlier, make sure your link it set to HTTPS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ywLhiQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6c48ssahxnyxw9wagaxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ywLhiQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6c48ssahxnyxw9wagaxb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy where it says git remote add origin  and  paste it into your text editor.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXhDthQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exn8syihxyv772x0ib66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXhDthQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exn8syihxyv772x0ib66.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This will create a remote repository called origin.  You can check if its running by running these two commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shows you your origin branch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shows you the link of your repo.  These are good ways to check if everything is synced correctly.&lt;/p&gt;

&lt;p&gt;Navigate to your src/App.js and delete all the react code that is there.  Inside the return in your App function you can add some HTML there and see if any changes are made to your site.  You can run another npm start and see the changes made to your page. &lt;/p&gt;

&lt;p&gt;Your app is not fully deployed yet there are a few more steps!&lt;/p&gt;

&lt;p&gt;In this next step we will push our code up into the repo.  Run these git commands in your terminal one at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add . 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Deploy my React app to Github Pages"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last thing were missing is to deploy our application from here to Github, so you must run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step will be to push our code to Github:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now all your code is successfully pushed up and your site is up and running!&lt;/p&gt;

&lt;p&gt;Now you want to head over to your repository on your GitHub, click on Settings, and on the left hand side scroll down a bit until you see Pages.  Inside there you will see a green box and green text notifying you that your website is published at that link!  &lt;/p&gt;

&lt;p&gt;Using Github Pages is great for your personal portfolio, or even react projects and the great thing is that it's free! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Aplica el Patrón Pipeline en Laravel</title>
      <author>Herminio Heredia Santos</author>
      <pubDate>Fri, 18 Jun 2021 22:29:06 +0000</pubDate>
      <link>https://dev.to/herminioheredia/aplica-el-patron-pipeline-en-laravel-45ef</link>
      <guid>https://dev.to/herminioheredia/aplica-el-patron-pipeline-en-laravel-45ef</guid>
      <description>&lt;p&gt;El &lt;strong&gt;patrón de diseño Pipeline (Tubería)&lt;/strong&gt; consiste en hacer pasar una estructura o un objeto a través de una secuencia de tareas o etapas.&lt;/p&gt;

&lt;p&gt;La tubería actúa como una línea de montaje, donde los datos se procesan y luego pasan a la siguiente etapa.&lt;/p&gt;

&lt;p&gt;En este video te explico como funciona este patrón en Laravel&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bx_KAkTL-Sg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>testing</category>
      <category>php</category>
    </item>
    <item>
      <title>Newbie's Guide to AI Resources</title>
      <author>Jessi Shakarian</author>
      <pubDate>Fri, 18 Jun 2021 22:12:41 +0000</pubDate>
      <link>https://dev.to/jessishakarian/newbie-s-guide-to-ai-resources-23l2</link>
      <guid>https://dev.to/jessishakarian/newbie-s-guide-to-ai-resources-23l2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#so-you-want-to-get-into-ai-and-ml-but-dont-know-where-to-start"&gt;
  &lt;/a&gt;
  So, you want to get into AI and ML but don't know where to start?
&lt;/h3&gt;

&lt;p&gt;I've been there. Twice, actually. About 6 months ago, I started looking into AI but got too intimidated. I talked myself out of it.&lt;/p&gt;

&lt;p&gt;Not this time! And I'm here to help you not get overwhelmed at where to start. There's a lot of information out there, and it can be difficult to know where to start. This isn't about the job field, or issues around ethics or bias, this is just some good resources to use if you want to learn more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://academy.infinite.red/p/ai-demystified-free-5-day-mini-course"&gt;AI Demystified&lt;/a&gt; from Infinite Red Academy. I recently completed this, and found it incredibly helpful and interesting. Instructor &lt;a href="https://twitter.com/gantlaborde?s=21"&gt;Gant Laborde&lt;/a&gt; breaks down what AI is and how it's used in a humorous and interesting way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.deeplearning.ai/programs/"&gt;DeepLearning.Ai&lt;/a&gt; is a great next step, they have programs for everything - beginners to more advanced stuff. These programs are not completely free, they're through coursera. But coursera does have financial aid, and I highly recommend you take advantage of that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://ai.google/"&gt;Google&lt;/a&gt; - no, not googling something. Google has a wealth of information about AI &lt;a href="https://ai.google/education"&gt;education&lt;/a&gt; and resources, depending on what you're looking for. Here's an example, their filters for content. Lots of options to explore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_EcafOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1pau7yvtpdx06d3k88p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_EcafOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1pau7yvtpdx06d3k88p.jpg" alt="Filter of content options on Google AI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ready to get into the nitty gritty? Let's talk about programming and math!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learn Python!&lt;/em&gt; Python is &lt;a href="https://www.cuelogic.com/blog/role-of-python-in-artificial-intelligence"&gt;great&lt;/a&gt; for AI, lots of programs already built in for the language. If you're new to programming, it's a great place to start, easy to understand. If you need a course, Udemy has &lt;a href="https://www.udemy.com/course/automate/?src=sac&amp;amp;kw=automate+the+boring+stuff"&gt;Automate the Boring Stuff&lt;/a&gt;. I'm going to be starting this soon. Udemy often has sales on stuff, so better to wait if you can. Or, if videos are not for you, there's a &lt;a href="https://automatetheboringstuff.com/"&gt;book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math.&lt;/em&gt; If you're interested in AI or ML, math comes with it. You either love math, or are like me, and are willing to tolerate it because it gets you where you need to go (okay, maybe I like it and I'm just in the closet...). &lt;a href="https://towardsdatascience.com/mathematics-for-ai-all-the-essential-math-topics-you-need-ed1d9c910baf"&gt;Here's&lt;/a&gt; some reasons why math has a lot of value in this realm. Years ago, I got to statistics when I went back to school to be a lab tech, and we used a lot of scientific math, but really what saved my butt here is &lt;a href="https://www.khanacademy.org/math"&gt;Khan Academy&lt;/a&gt;. It's free and helped me understand a lot of concepts. Definitely use that for statistics and other math functions as you need it.&lt;/p&gt;

&lt;p&gt;So there you go! Lots of resources to get you started. Have you tried some of these resources before? Let me know on &lt;a href="https://twitter.com/jessishakarian"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Binary search algorithm </title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 18 Jun 2021 22:07:16 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/binary-search-algorithm-32ki</link>
      <guid>https://dev.to/ayabouchiha/binary-search-algorithm-32ki</guid>
      <description>&lt;p&gt;Hi, this is #day_6, we're going to talk about &lt;strong&gt;Binary Search Algorithm&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-the-binary-search-algorithm"&gt;
  &lt;/a&gt;
  Definition of the binary search algorithm
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;binary search&lt;/strong&gt; also called &lt;strong&gt;half-interval search&lt;/strong&gt;, or &lt;strong&gt;logarithmic search&lt;/strong&gt; is one of the most famous search algorithms, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this algorithm search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.geeksforgeeks.org/binary-search/"&gt;www.geeksforgeeks.org&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#space-and-time-complexity"&gt;
  &lt;/a&gt;
  Space and Time complexity
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;space complexity&lt;/strong&gt; of linear search is &lt;strong&gt;O(1)&lt;/strong&gt; and his Time complexity is &lt;strong&gt;O(log n)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-binary-search-in-python"&gt;
  &lt;/a&gt;
  Implementation of binary search in python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;BinarySearchAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    =&amp;gt;  Algorithm Name : Binary Search
    =&amp;gt;  Algorithm Type : Searching Algorithms
    =&amp;gt;  Time Complexity : O(n)
    =&amp;gt;  Space Complexity : O(1)
    =&amp;gt;  Logic
        [ if wantedItem == mid ]
        [ if wantedItem &amp;lt; sortedItems[mid] ] eliminate right half
        [ if wantedItem &amp;gt; sortedItems[mid] ] eliminate left half
    =&amp;gt;  Arguments
        [wantedItem]{int}
        [sortedItems] {list&amp;lt;int&amp;gt;} sorted list
    =&amp;gt; Returns
        [index] if the wanted item exists in the list
        [False] if the wanted item doesn't exist in the list
    """&lt;/span&gt;
    &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;wantedItem&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;wantedItem&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="c1"&gt;# eliminate left half
&lt;/span&gt;            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# eliminate right half
&lt;/span&gt;            &lt;span class="n"&gt;hight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;# if the item dosen't exist
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation-of-binary-search-in-javascript"&gt;
  &lt;/a&gt;
  Implementation of binary search in javascript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * binary search algorithm
 * Time Complexity: O(log n)
 * Space Complexity: O(1)
 * @param wantedItem {Number} the desired element
 * @param sortedItems {Array&amp;lt;Number&amp;gt;} sorted array of numbers
 * @returns {(Number|Boolean)} (wantedItem) index if it exist otherwise (false)
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchAlgorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wantedItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sortedItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// the mid can be a float num that's why I used Math.floor&lt;/span&gt;
        &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wantedItem&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wantedItem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// eliminate right half&lt;/span&gt;
            &lt;span class="nx"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// eliminate left half&lt;/span&gt;
            &lt;span class="nx"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// if the wanted item dosen't exist&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you so much for your time! Have a good day;&lt;br&gt;
#day_6&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Build a real time video chat app with Next.js and Daily</title>
      <author>Kimberlee Johnson </author>
      <pubDate>Fri, 18 Jun 2021 21:50:46 +0000</pubDate>
      <link>https://dev.to/trydaily/build-a-real-time-video-chat-app-with-next-js-and-daily-1kl7</link>
      <guid>https://dev.to/trydaily/build-a-real-time-video-chat-app-with-next-js-and-daily-1kl7</guid>
      <description>&lt;p&gt;We built one of our first &lt;a href="https://github.com/daily-demos/call-object-react?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;Daily demos&lt;/a&gt; with &lt;a href="https://www.daily.co/blog/building-a-custom-video-chat-app-with-react/?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;React&lt;/a&gt;, because we like working with the framework. We’re not alone. More developers expressed interest in learning React than in picking up any other web framework in the &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-web-frameworks-wanted2"&gt;2020 Stack Overflow Developer Survey&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Meta frameworks for React like &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; are also gaining traction, so we built a &lt;a href="https://github.com/daily-demos/examples/tree/main/dailyjs/basic-call?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;basic video call demo app&lt;/a&gt; using Next.js and the &lt;a href="https://docs.daily.co/docs/build-a-custom-video-chat-interface?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;Daily call object&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h6ZUYBeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gqpldn0ja5f12i9a0b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h6ZUYBeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gqpldn0ja5f12i9a0b2.png" alt="Screenshot of a video chat app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The demo draws inspiration from the new &lt;a href="https://www.daily.co/blog/announcing-the-new-daily-prebuilt-for-developers/?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;Daily Prebuilt&lt;/a&gt; (We’ll eventually open source Daily Prebuilt’s components, stay tuned!), using shared &lt;a href="https://reactjs.org/docs/context.html"&gt;contexts&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/hooks-custom.html"&gt;custom hooks&lt;/a&gt; that we hope help get your own apps up and running ASAP. Dive right into &lt;a href="https://github.com/daily-demos/examples?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;the repository&lt;/a&gt; or read on for a sneak peek at some of the most foundational pieces, like the core call loop (shared contexts and hooks) and generating meeting tokens. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-the-demo-locally"&gt;
  &lt;/a&gt;
  Run the demo locally
&lt;/h2&gt;

&lt;p&gt;You can find our basic Next.js and Daily video chat demo in our ✨ new ✨ &lt;a href="https://github.com/daily-demos/examples/?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;&lt;code&gt;daily-demos/examples&lt;/code&gt; repository&lt;/a&gt;. This is a living repo. It’ll grow and evolve as Daily does and as we receive feedback. Poke around and you might notice a few other demos in progress. To hop right into the basic Next.js and Daily app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork and clone the &lt;a href="https://github.com/daily-demos/examples/?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;repository&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd examples/dailyjs/basic-call&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; Set your &lt;code&gt;DAILY_API_KEY&lt;/code&gt; and &lt;code&gt;DAILY_DOMAIN&lt;/code&gt; environment variables (see &lt;a href="https://github.com/daily-demos/examples/blob/main/dailyjs/basic-call/env.example?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;env.example&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn workspace @dailyjs/basic-call dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-core-call-loop-shared-contexts-and-hooks"&gt;
  &lt;/a&gt;
  The core call loop: shared contexts and hooks
&lt;/h2&gt;

&lt;p&gt;As you’re probably well aware in the year 2021, lots of things can happen on video calls. Participants join and leave, mute and unmute their devices, not to mention the funny things networks can decide to do. Application state can get unwieldy quickly, so we make use of the &lt;a href="https://reactjs.org/docs/context.html"&gt;Context API&lt;/a&gt; to avoid passing ever-changing props to all the different components that need to know about the many states. &lt;/p&gt;

&lt;p&gt;Six contexts make up what we refer to as our call loop. They handle four different sets of state: devices, tracks, participants, and call state, in addition to a waiting room experience and the overall user interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UIStateProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CallProvider&lt;/span&gt; &lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ParticipantsProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TracksProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MediaDeviceProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;WaitingRoomProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/WaitingRoomProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MediaDeviceProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TracksProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ParticipantsProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CallProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UIStateProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of the contexts also make use of &lt;a href="https://reactjs.org/docs/hooks-custom.html"&gt;custom hooks&lt;/a&gt; that abstract some complexity, depending on the, well, context.&lt;/p&gt;

&lt;p&gt;With that pun out of the way, let’s dive into each of the contexts except for &lt;code&gt;&amp;lt;WaitingRoomProvider&amp;gt;&lt;/code&gt;, You’ll have to...wait for a post on that one. &lt;/p&gt;

&lt;p&gt;Okay, really, we’re ready now. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-devices"&gt;
  &lt;/a&gt;
  Managing devices
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/daily-demos/examples/blob/main/dailyjs/shared/contexts/MediaDeviceProvider.js?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;&lt;code&gt;&amp;lt;MediaDeviceProvider&amp;gt;&lt;/code&gt;&lt;/a&gt; grants the entire app access to the cams and mics used during the call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MediaDeviceProvider.js&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MediaDeviceContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;
     &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
       &lt;span class="nx"&gt;cams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;mics&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;speakers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;camError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;micError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;currentDevices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;deviceState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;setMicDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;setCamDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;setSpeakersDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;}}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MediaDeviceContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;MediaDeviceProvider&amp;gt;&lt;/code&gt; relies on a &lt;a href="https://github.com/daily-demos/examples/blob/be5d3decfc0ae2e871506430d81561fa0a8ff9c4/dailyjs/shared/hooks/useDevices.js?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;&lt;code&gt;useDevices&lt;/code&gt;&lt;/a&gt; hook to listen for changes to the call object to make sure the app has an up to date list of the devices on the call and each device’s state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useDevices.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateDeviceState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;devices&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enumerateDevices&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;speaker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInputDevices&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;defaultCam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;videoDevices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;videoinput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deviceId&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;setCams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="nx"&gt;defaultCam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;videoDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sortByKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
       &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;defaultMic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;micDevices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audioinput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deviceId&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;setMics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="nx"&gt;defaultMic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;micDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sortByKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
       &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;defaultSpeaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;speakerDevices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audiooutput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deviceId&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;setSpeakers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="nx"&gt;defaultSpeaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;speakerDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sortByKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
       &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="nx"&gt;setCurrentDevices&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
       &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;mic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;speaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;setDeviceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DEVICE_STATE_NOT_SUPPORTED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useDevices&lt;/code&gt; also handles device errors, like if a cam or mic is blocked, and updates a device’s state when something changes for the participant using the device, like if their tracks change.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keeping-track-of-tracks"&gt;
  &lt;/a&gt;
  Keeping track of tracks
&lt;/h3&gt;

&lt;p&gt;Different devices share different kinds of tracks. A microphone shares an &lt;code&gt;audio&lt;/code&gt; type track; a camera shares &lt;code&gt;video&lt;/code&gt;. Each track contains its own state: playable, loading, off, etc. &lt;a href="https://github.com/daily-demos/examples/blob/main/dailyjs/shared/contexts/TracksProvider.js?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;&lt;code&gt;&amp;lt;TracksProvider&amp;gt;&lt;/code&gt;&lt;/a&gt; simplifies keeping track of all those tracks as the number of call participants grows. This context listens for changes in track state and dispatches updates. One type of change, for example, could be when a participant’s tracks start or stop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// TracksProvider.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TracksProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;callObject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tracksReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialTracksState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleTrackStarted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
       &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TRACK_STARTED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleTrackStopped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
         &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TRACK_STOPPED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="cm"&gt;/** Other things happen here **/&lt;/span&gt;

   &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;track-started&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleTrackStarted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;track-stopped&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleTrackStopped&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#handling-participants"&gt;
  &lt;/a&gt;
  Handling participants
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/daily-demos/examples/blob/main/dailyjs/shared/contexts/ParticipantsProvider.js?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;&lt;code&gt;&amp;lt;ParticipantsProvider&amp;gt;&lt;/code&gt;&lt;/a&gt; makes sure any and all participant updates are available across the app. It listens for &lt;a href="https://docs.daily.co/reference#participant-events?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;participant events&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ParticipantsProvider.js&lt;/span&gt;

 &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joined-meeting&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-left&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;];&lt;/span&gt;

   &lt;span class="c1"&gt;// Listen for changes in state&lt;/span&gt;
   &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleNewParticipantsState&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

   &lt;span class="c1"&gt;// Stop listening for changes in state&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
       &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleNewParticipantsState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleNewParticipantsState&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And dispatches state updates depending on the event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ParticipantsProvider.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleNewParticipantsState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
           &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PARTICIPANT_JOINED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
           &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PARTICIPANT_UPDATED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-left&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
           &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PARTICIPANT_LEFT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;});&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;ParticipantsProvider&amp;gt;&lt;/code&gt; also calls on &lt;a href="https://www.npmjs.com/package/use-deep-compare"&gt;use-deep-compare&lt;/a&gt; to memoize expensive calculations, like all of the participants on the call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ParticipantsProvider.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allParticipants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDeepCompareMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#managing-room-and-call-state"&gt;
  &lt;/a&gt;
  Managing room and call state
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;CallProvider&amp;gt;&lt;/code&gt; handles configuration and state for the room where the call happens, where all those devices, participants, and tracks interact. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/daily-demos/examples/blob/main/dailyjs/shared/contexts/CallProvider.js?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;&lt;code&gt;&amp;lt;CallProvider&amp;gt;&lt;/code&gt;&lt;/a&gt; imports the abstraction hook &lt;a href="https://github.com/daily-demos/examples/blob/main/dailyjs/shared/contexts/useCallMachine.js?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;&lt;code&gt;useCallMachine&lt;/code&gt;&lt;/a&gt; to manage call state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CallProvider.js&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useCallMachine&lt;/code&gt; listens for changes in call access, for example, and updates overall call state accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useCallMachine.js&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;access-state-updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleAccessStateUpdated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;access-state-updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleAccessStateUpdated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleAccessStateUpdated&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Other things happen here&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleAccessStateUpdated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CALL_STATE_ENDED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CALL_STATE_AWAITING_ARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CALL_STATE_READY&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="nx"&gt;state&lt;/span&gt;
       &lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ACCESS_STATE_UNKNOWN&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
       &lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ACCESS_STATE_NONE&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CALL_STATE_NOT_ALLOWED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meetingState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meetingState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ACCESS_STATE_LOBBY&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
       &lt;span class="nx"&gt;meetingState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;MEETING_STATE_JOINED&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;CallProvider&amp;gt;&lt;/code&gt; then uses that information, to do things like verify a participant’s access to a room, and whether or not they’re permitted to join the call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CallProvider.js&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ACCESS_STATE_UNKNOWN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requiresPermission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ACCESS_STATE_LOBBY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;setPreJoinNonAuthorized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requiresPermission&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the participant requires permission to join, and they’re not joining with a token, then the participant will not be allowed into the call.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-daily-meeting-tokens-with-nextjs"&gt;
  &lt;/a&gt;
  Generating Daily meeting tokens with Next.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.daily.co/reference#meeting-tokens?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;Meeting tokens&lt;/a&gt; control room access and session configuration on a per-user basis. They’re also a great use case for &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;Next API routes&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;API routes let us query endpoints directly within our app, so we don’t have to maintain a separate server. We call the Daily &lt;code&gt;/meeting-tokens&lt;/code&gt; endpoint in &lt;code&gt;/pages/api/token.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/api/token.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isOwner&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DAILY_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
       &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;room_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;is_owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isOwner&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="p"&gt;}),&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dailyRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DAILY_REST_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/meeting-tokens`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;options&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dailyRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DAILY_DOMAIN&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt;, we fetch the endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isOwner&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-nextjs"&gt;
  &lt;/a&gt;
  What’s Next.js?
&lt;/h2&gt;

&lt;p&gt;Please &lt;a href="https://github.com/daily-demos/examples?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;fork, clone&lt;/a&gt;, and hack away! There are lots of ways you could start building on top of this demo: adding custom user authentication, &lt;a href="https://www.daily.co/blog/three-ways-to-add-chat-to-your-video-calls-with-the-daily-api/?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;building a chat component&lt;/a&gt;, or pretty much anything that springs to mind. &lt;/p&gt;

&lt;p&gt;We’d appreciate &lt;a href="https://www.daily.co/contact?utm_source=dev&amp;amp;utm_campaign=dev-next-js-and-daily"&gt;hearing what you think&lt;/a&gt; about the demo, especially how we could improve it. We’re also curious about other framework and meta-framework specific sample code that you’d find useful. &lt;/p&gt;

&lt;p&gt;If you’re hoping for more Daily and Next.js sample code, we’ve got you covered. Come back soon! &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>video</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Developers You Must Follow To Improve</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Fri, 18 Jun 2021 21:49:43 +0000</pubDate>
      <link>https://dev.to/line/10-developers-you-must-follow-to-improve-2jah</link>
      <guid>https://dev.to/line/10-developers-you-must-follow-to-improve-2jah</guid>
      <description>&lt;p&gt;&lt;strong&gt;10 amazing developers to follow to improve your skills in front end and back end and programming as a whole.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally, This was published on *&lt;/em&gt;&lt;a href="https://zyox.substack.com"&gt;The Zyox Letter&lt;/a&gt;*&lt;em&gt;, The best Newsletter for Programming, tech, entreprenuership &amp;amp; money.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CLICK HERE&lt;/em&gt; - &lt;a href="https://zyox.substack.com"&gt;https://zyox.substack.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join Now&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-the-list-"&gt;
  &lt;/a&gt;
  Let's start the list -
&lt;/h2&gt;

&lt;p&gt;1.&lt;strong&gt;Ben Awad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ben Awad is one of our first entries here, he has some of the funniest and creative content that I've seen for programming in a long time. He prepares people for coding interviews with Fang as well as teaching on lots of other topics.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Coder Coder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The coder coder is our second channel here with some of the highest quality videos and animations on how to learn to become a web developer or building a responsive web design from scratch.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Danny Thompson&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a developer that knows what it's like when you're starting out. He's out there helping other people get jobs and learn programming and giving them motivation to be able to do so he also has a series where he interviews people and give them tips and coaching on how to get their first job.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Net Ninja&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;He have some of the most professional playlist tutorials on all the types of frameworks and libraries out there.  For example, there's almost 20 videos in this series and by the time you're done, you too will be a net ninja.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Kodu community&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a great channel by Niall which does all sorts of stuff between HTML, CSS, and JavaScript.  Niall is a great creator and he brings in his own style of teaching people how to learn to program.&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Kevin Pal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This channel is dedicated to all things web related, if you're learning HTML, CSS, and JavaScript, there's videos on all of that, as well as maybe even obscure CSS properties you might never have used before. He's also a fun and relatable guy that's also very down to earth.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;Coding Garden&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is brought to us by CJ who is a live streamer on Twitch.  He also puts up all his videos on YouTube as well that you can follow along with. You can watch him build different things and interact with him while he's making his videos.&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;JavaScript Mastery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have JavaScript mastery, and this channel isn't just about JavaScript. There's a lot of really good content here.  stuff on how to use react NPM node, as well as building a fully fledged voice recognition react news application.&lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;Katelyn Pitt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;He has a huge following on Twitter and Recently he started doing videos on YouTube.  He has a very positive message to share with motivation and very good learning resources that he shares almost daily.&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;Claudius&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;He's a software engineer that's got more than 10 years of experience and makes tutorials on things like blazer dotnet, and C sharp. He also goes into good detail into how things work so that you can better understand them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed my article. Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally, This was published on *&lt;/em&gt;&lt;a href="https://zyox.substack.com"&gt;The Zyox Letter&lt;/a&gt;*&lt;em&gt;, The best Newsletter for Programming, tech, entreprenuership &amp;amp; money.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CLICK HERE - &lt;a href="https://zyox.substack.com"&gt;https://zyox.substack.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join Now&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Drupal Layout Builder: A New Authoring Experience</title>
      <author>GravelSoft</author>
      <pubDate>Fri, 18 Jun 2021 21:32:01 +0000</pubDate>
      <link>https://dev.to/gravelsoft/drupal-layout-builder-a-new-authoring-experience-4npd</link>
      <guid>https://dev.to/gravelsoft/drupal-layout-builder-a-new-authoring-experience-4npd</guid>
      <description>&lt;p&gt;Being the number 1 web content administration stage, Drupal is adaptable, versatile, and has numerous language availability. It is likewise upheld by a solid open-source local area everywhere on the world. The top highlights of Drupal are high versatility, portable first, security, simple substance writing, adaptable substance engineering, and multilingual abilities.&lt;/p&gt;

&lt;p&gt;Format Builder is a hot Drupal highlight which permits the site manufacturers and substance editors to make visual designs rapidly. It gives bountiful opportunity to the clients to do modify content and make uniquely crafted presentation pages for your sites. &lt;/p&gt;

&lt;p&gt;The steady form of the Layout Builder module is delivered with Drupal 8.7 on May 2019 alongside a couple of other upgraded modules like CM 2.0, JSON API, Media, Out of the crate multilingual demo, and so on &lt;/p&gt;

&lt;p&gt;Here we will discuss what are Layout Builder, use case, advantages, and video instructional exercise. &lt;/p&gt;

&lt;p&gt;What is Layout manufacturer? &lt;br&gt;
Design developer assists you with organizing your substance show and gives you a UI with a visual see to pick one or various formats from the predefined designs for various areas of the page and afterward partner at least one squares in those segments. &lt;/p&gt;

&lt;p&gt;It is an extreme Drupal highlight which empowers the site manufacturers and substance editors making visual formats rapidly. Format Builders likewise gives total opportunity to the clients to do full customization in regards to content, greeting page, and some more. &lt;/p&gt;

&lt;p&gt;Use instance of Layout manufacturer &lt;br&gt;
While perusing any shopping site, steady client experience is an unquestionable requirement. Drupal Layout Builder empowers you to give something very similar to your clients. For instance, your business sells blossoms for various event on the web. Each rose bouquet you sell ought to have similar visual appearance on your site to the purchasers. Here Drupal 8 Layout Builders empowers to make a design format that you can use for the entirety of your things. The organized substance capacity of Drupal enables you to make similar design of end quantities of pages. Notwithstanding, it is preposterous without employing a Drupal designer.&lt;/p&gt;

&lt;p&gt;Highlights of Drupal 8 Layout Builders &lt;/p&gt;

&lt;p&gt;Custom Pages: With Drupal Layout Builders, you can make one-off greeting pages like a solitary 'About Us' page which isn't connected to organized substance. &lt;br&gt;
Customizations: It offers full customization to your substance configuration, structure, format, and so on &lt;br&gt;
Templated Layouts: You can supersede various formats dependent on one case at a time case. &lt;br&gt;
Designs of Templated Content: Once you make the 'format layout', you can utilize something similar for all pages. &lt;/p&gt;

&lt;p&gt;Advantages of Drupal Layout Builder &lt;br&gt;
We are clarifying the advantages of Drupal Layout Builder here: &lt;/p&gt;

&lt;p&gt;Format Builder not simply helps the site manufacturer to structure the substance the manner in which they might want to show however it likewise gives the visual for doing that. &lt;br&gt;
While it's great to have comparable UI for overall a similar sort of item, still the dealers need to feature a portion of the on-request items and where Layout Builder assists with doing it easily. &lt;br&gt;
Having an extra field in content kind which will be utilized simply by a lot of item isn't needed likewise with Layout Builder you can add the segments in the substance are and partner any square you need. &lt;br&gt;
The modules of Drupal Layout Builders are not difficult to send as the modules are the center piece of the entire bundle. You don't have to carry out new substance types for such organization. &lt;br&gt;
The interface is helpful. It is included with the intuitive alternative and for the squares as well as to the fields of a substance type. Additionally, it upholds the console controls and flipping choice for reviews. Furthermore, it gives unlimited oversight to the substance editorial manager while building their formats. &lt;br&gt;
You can redo every one of the individual substances. Moreover, you can join the fields with isolated substances without making any different reference field. &lt;br&gt;
Openness is the need for Drupal people group consequently the Layout manufacturer additionally hold fast to the availability and passes the Accessibility door (Level AA conformance with WCAG and ATAG) for both the composing apparatus itself, just as the markup it creates. &lt;br&gt;
Drupal engages the clients to utilize all Layouts going from one section to two segments blocks to 3 lines 3 segments in second line and not only that by essentially making or refreshing a couple of format records.&lt;/p&gt;

&lt;p&gt;Conclusion &lt;/p&gt;

&lt;p&gt;The current webpage building and substance composing abilities of Drupal are as of now incredible, in any case, with its straightforward and natural instruments; Layout Builder will change the entire experience of making pages. Basically, the format developer will supplant every one of the current arrangements with both rich UI and code. Making shut segments with the famous modules and afterward making instant designs with similar parts resembles an ideal answer for all your web improvement bother.&lt;br&gt;
Originally &lt;a href="https://gravelsoft.com/blog/f/drupal-layout-builder-a-new-authoring-experience"&gt;https://gravelsoft.com/blog/f/drupal-layout-builder-a-new-authoring-experience&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gravelsoft</category>
    </item>
    <item>
      <title>The Impossible Game. (A game inspired by geometry dash)</title>
      <author>FRADAR</author>
      <pubDate>Fri, 18 Jun 2021 21:29:20 +0000</pubDate>
      <link>https://dev.to/fradar/the-impossible-game-a-game-inspired-by-geometry-dash-2ljm</link>
      <guid>https://dev.to/fradar/the-impossible-game-a-game-inspired-by-geometry-dash-2ljm</guid>
      <description>&lt;p&gt;The Impossible game! I took a lot of time on this, and it was very hard to make. I hope you like it! It is a platform game inspired by Geometry Dash.&lt;/p&gt;

&lt;p&gt;I add Updates to the game frequently, so stay tuned.&lt;/p&gt;

&lt;p&gt;(Updates on the game are in the editor view in the Javascript window)&lt;/p&gt;

&lt;p&gt;If there are any glitches that you encounter while you are playing the game, please tell me about it in the comments!&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/oNBYXap"&gt;https://codepen.io/FRADAR/full/oNBYXap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

&lt;p&gt;Credits - Concept and inspiration from : &lt;a href="https://impossible.game/"&gt;https://impossible.game/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Music - Karl Casey @ White Bat Audio : Inception&lt;/p&gt;

&lt;p&gt;Like my games? Follow me on codepen.io&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S&lt;/em&gt; It might take some time to load the game.&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Very useful resources for developers 2021.</title>
      <author>Gastón Danielsen</author>
      <pubDate>Fri, 18 Jun 2021 21:21:45 +0000</pubDate>
      <link>https://dev.to/gdcodev/very-useful-resources-for-developers-2021-57ga</link>
      <guid>https://dev.to/gdcodev/very-useful-resources-for-developers-2021-57ga</guid>
      <description>&lt;h2&gt;
  &lt;a href="#recursos-muy-%C3%BAtiles-para-desarrolladores"&gt;
  &lt;/a&gt;
  Recursos muy útiles para desarrolladores.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TABLA DE CONTENIDOS

&lt;ul&gt;
&lt;li&gt;&lt;a href="#aprender-desarrollo-web"&gt;Aprender Desarrollo Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#desaf%C3%ADos-de-programaci%C3%B3n"&gt;Desafíos de programación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#descargar-im%C3%A1genes"&gt;Descargar Imágenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#descargar-iconos-gratis"&gt;Descargar Iconos gratis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#descargar-libros-gratis"&gt;Descargar Libros gratis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#colores"&gt;Colores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#templates-gratis"&gt;Templates Gratis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apis-publicas"&gt;APIS Publicas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursos-para-desarrolladores"&gt;Recursos para desarrolladores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#editores-de-codigo-online"&gt;Editores de codigo online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blogs"&gt;Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preguntas"&gt;Preguntas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#velocidad-de-carga-de-sitio-web"&gt;Velocidad de carga de sitio web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#descargar-fuentes-gratis"&gt;Descargar fuentes gratis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#herramientas-para-comprimir-im%C3%A1genes"&gt;Herramientas para comprimir imágenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#png-con-fondo-transparente"&gt;PNG con fondo transparente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#crear-c%C3%B3digo-qr"&gt;Crear código QR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#aprender-desarrollo-web"&gt;
  &lt;/a&gt;
  Aprender Desarrollo Web
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;w3schools&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.w3schools.com/"&gt;https://www.w3schools.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MDN&lt;/td&gt;
&lt;td&gt;&lt;a href="https://developer.mozilla.org/es/"&gt;https://developer.mozilla.org/es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;freecodecamp&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/"&gt;https://www.freecodecamp.org/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codecademy&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.codecademy.com/"&gt;https://www.codecademy.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;geeksforgeeks&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.geeksforgeeks.org/"&gt;https://www.geeksforgeeks.org/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;theodinproject&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.theodinproject.com/"&gt;https://www.theodinproject.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;udemy&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.udemy.com/"&gt;https://www.udemy.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;coursera&lt;/td&gt;
&lt;td&gt;&lt;a href="https://es.coursera.org/"&gt;https://es.coursera.org/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scrimba&lt;/td&gt;
&lt;td&gt;&lt;a href="https://scrimba.com/"&gt;https://scrimba.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#desaf%C3%ADos-de-programaci%C3%B3n"&gt;
  &lt;/a&gt;
  Desafíos de programación
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;frontendmentor&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.frontendmentor.io/"&gt;https://www.frontendmentor.io/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;acefrontend&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.acefrontend.com/"&gt;https://www.acefrontend.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100dayscss&lt;/td&gt;
&lt;td&gt;&lt;a href="https://100dayscss.com/"&gt;https://100dayscss.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codewars&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.codewars.com/"&gt;https://www.codewars.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codingame&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.codingame.com/start"&gt;https://www.codingame.com/start&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;topcoder&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.topcoder.com/"&gt;https://www.topcoder.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;coderbyte&lt;/td&gt;
&lt;td&gt;&lt;a href="https://coderbyte.com/"&gt;https://coderbyte.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hackerrank&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.hackerrank.com/"&gt;https://www.hackerrank.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codechef&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.codechef.com/"&gt;https://www.codechef.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leetcode&lt;/td&gt;
&lt;td&gt;&lt;a href="https://leetcode.com/"&gt;https://leetcode.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;css-tricks&lt;/td&gt;
&lt;td&gt;&lt;a href="https://css-tricks.com/"&gt;https://css-tricks.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#descargar-im%C3%A1genes"&gt;
  &lt;/a&gt;
  Descargar Imágenes
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;unsplash&lt;/td&gt;
&lt;td&gt;&lt;a href="https://unsplash.com/"&gt;https://unsplash.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pexels&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.pexels.com/es-es/"&gt;https://www.pexels.com/es-es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pixabay&lt;/td&gt;
&lt;td&gt;&lt;a href="https://pixabay.com/es/"&gt;https://pixabay.com/es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;coverr&lt;/td&gt;
&lt;td&gt;&lt;a href="https://coverr.co/"&gt;https://coverr.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undraw&lt;/td&gt;
&lt;td&gt;&lt;a href="https://undraw.co/"&gt;https://undraw.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;freepik&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.freepik.es/"&gt;https://www.freepik.es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;svgporn&lt;/td&gt;
&lt;td&gt;&lt;a href="https://svgporn.com/"&gt;https://svgporn.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#descargar-iconos-gratis"&gt;
  &lt;/a&gt;
  Descargar Iconos gratis
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;flaticon&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.flaticon.es/"&gt;https://www.flaticon.es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thenounproject&lt;/td&gt;
&lt;td&gt;&lt;a href="https://thenounproject.com/"&gt;https://thenounproject.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iconstore&lt;/td&gt;
&lt;td&gt;&lt;a href="https://iconstore.co/"&gt;https://iconstore.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iconos8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://iconos8.es/"&gt;https://iconos8.es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;streamlineicons&lt;/td&gt;
&lt;td&gt;&lt;a href="https://streamlineicons.com/"&gt;https://streamlineicons.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iconmonstr&lt;/td&gt;
&lt;td&gt;&lt;a href="https://iconmonstr.com/"&gt;https://iconmonstr.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dryicons&lt;/td&gt;
&lt;td&gt;&lt;a href="https://dryicons.com/"&gt;https://dryicons.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iconfinder&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.iconfinder.com/"&gt;https://www.iconfinder.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iconscout&lt;/td&gt;
&lt;td&gt;&lt;a href="https://iconscout.com/"&gt;https://iconscout.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uxwing&lt;/td&gt;
&lt;td&gt;&lt;a href="https://uxwing.com/"&gt;https://uxwing.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feathericons&lt;/td&gt;
&lt;td&gt;&lt;a href="https://feathericons.com/"&gt;https://feathericons.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tablericons&lt;/td&gt;
&lt;td&gt;&lt;a href="https://tablericons.com/"&gt;https://tablericons.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#descargar-libros-gratis"&gt;
  &lt;/a&gt;
  Descargar Libros gratis
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;yolibrospdf&lt;/td&gt;
&lt;td&gt;&lt;a href="https://yolibrospdf.com/programacion.html"&gt;https://yolibrospdf.com/programacion.html&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pdfdrive&lt;/td&gt;
&lt;td&gt;&lt;a href="https://es.pdfdrive.com/search?q=Programacion&amp;amp;pagecount=&amp;amp;pubyear=&amp;amp;searchin=es&amp;amp;em="&gt;https://es.pdfdrive.com/search?q=Programacion&amp;amp;pagecount=&amp;amp;pubyear=&amp;amp;searchin=es&amp;amp;em=&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EbookFoundation&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/EbookFoundation/free-programming-books/blob/master/books/free-programming-books-es.md#javascript"&gt;https://github.com/EbookFoundation/free-programming-books/blob/master/books/free-programming-books-es.md#javascript&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zlibrary&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ar1lib.org/"&gt;https://ar1lib.org/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#colores"&gt;
  &lt;/a&gt;
  Colores
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;colorhunt&lt;/td&gt;
&lt;td&gt;&lt;a href="https://colorhunt.co/palette/253094"&gt;https://colorhunt.co/palette/253094&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gradienta&lt;/td&gt;
&lt;td&gt;&lt;a href="https://gradienta.io/shattered-feelings"&gt;https://gradienta.io/shattered-feelings&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uigradients&lt;/td&gt;
&lt;td&gt;&lt;a href="https://uigradients.com/#Shore"&gt;https://uigradients.com/#Shore&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;material&lt;/td&gt;
&lt;td&gt;&lt;a href="https://material.colorion.co/"&gt;https://material.colorion.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grabient&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.grabient.com/"&gt;https://www.grabient.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gradientbuttons&lt;/td&gt;
&lt;td&gt;&lt;a href="https://gradientbuttons.colorion.co/"&gt;https://gradientbuttons.colorion.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;coolors&lt;/td&gt;
&lt;td&gt;&lt;a href="https://coolors.co/"&gt;https://coolors.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#templates-gratis"&gt;
  &lt;/a&gt;
  Templates Gratis
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;colorlib&lt;/td&gt;
&lt;td&gt;&lt;a href="https://colorlib.com/"&gt;https://colorlib.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startbootstrap&lt;/td&gt;
&lt;td&gt;&lt;a href="https://startbootstrap.com/templates"&gt;https://startbootstrap.com/templates&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;graphberry.&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.graphberry.com/"&gt;https://www.graphberry.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;templatemo&lt;/td&gt;
&lt;td&gt;&lt;a href="https://templatemo.com/"&gt;https://templatemo.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;html5up&lt;/td&gt;
&lt;td&gt;&lt;a href="https://html5up.net/"&gt;https://html5up.net/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;templated&lt;/td&gt;
&lt;td&gt;&lt;a href="https://templated.co/"&gt;https://templated.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;freehtml5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://freehtml5.co/"&gt;https://freehtml5.co/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bootstraptaste&lt;/td&gt;
&lt;td&gt;&lt;a href="https://bootstraptaste.com/"&gt;https://bootstraptaste.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bootstrapmade&lt;/td&gt;
&lt;td&gt;&lt;a href="https://bootstrapmade.com/"&gt;https://bootstrapmade.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;plantillashtmlgratis&lt;/td&gt;
&lt;td&gt;&lt;a href="https://plantillashtmlgratis.com/"&gt;https://plantillashtmlgratis.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inovatik&lt;/td&gt;
&lt;td&gt;&lt;a href="https://inovatik.com/"&gt;https://inovatik.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creative-tim&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.creative-tim.com/templates"&gt;https://www.creative-tim.com/templates&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;html5boilerplate&lt;/td&gt;
&lt;td&gt;&lt;a href="https://html5boilerplate.com/"&gt;https://html5boilerplate.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;elements.envato&lt;/td&gt;
&lt;td&gt;&lt;a href="https://elements.envato.com/es-419/web-templates"&gt;https://elements.envato.com/es-419/web-templates&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#apis-publicas"&gt;
  &lt;/a&gt;
  APIS Publicas
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public-apis&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;https://github.com/public-apis/public-apis&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apihouse&lt;/td&gt;
&lt;td&gt;&lt;a href="https://apihouse.vercel.app/"&gt;https://apihouse.vercel.app/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apilist&lt;/td&gt;
&lt;td&gt;&lt;a href="https://apilist.fun/"&gt;https://apilist.fun/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#recursos-para-desarrolladores"&gt;
  &lt;/a&gt;
  Recursos para desarrolladores
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;devurls&lt;/td&gt;
&lt;td&gt;&lt;a href="https://devurls.com/"&gt;https://devurls.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devresourc&lt;/td&gt;
&lt;td&gt;&lt;a href="https://devresourc.es/"&gt;https://devresourc.es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;freecodetools&lt;/td&gt;
&lt;td&gt;&lt;a href="https://freecodetools.org/"&gt;https://freecodetools.org/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;devsamples&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.devsamples.com/"&gt;https://www.devsamples.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shortcode&lt;/td&gt;
&lt;td&gt;&lt;a href="https://shortcode.dev/"&gt;https://shortcode.dev/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overapi&lt;/td&gt;
&lt;td&gt;&lt;a href="https://overapi.com/"&gt;https://overapi.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#editores-de-codigo-online"&gt;
  &lt;/a&gt;
  Editores de codigo online
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;codepen&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/"&gt;https://codepen.io/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;playcode&lt;/td&gt;
&lt;td&gt;&lt;a href="https://playcode.io/"&gt;https://playcode.io/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codesandbox&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codesandbox.io/s"&gt;https://codesandbox.io/s&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stackblitz&lt;/td&gt;
&lt;td&gt;&lt;a href="https://stackblitz.com/"&gt;https://stackblitz.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jsfiddle&lt;/td&gt;
&lt;td&gt;&lt;a href="https://jsfiddle.net/"&gt;https://jsfiddle.net/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;codeshare&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codeshare.io/"&gt;https://codeshare.io/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#blogs"&gt;
  &lt;/a&gt;
  Blogs
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;freecodecamp&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.freecodecamp.org/news/"&gt;https://www.freecodecamp.org/news/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hackernoon&lt;/td&gt;
&lt;td&gt;&lt;a href="https://hackernoon.com/"&gt;https://hackernoon.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dev.to&lt;/td&gt;
&lt;td&gt;&lt;a href="https://dev.to/"&gt;https://dev.to/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#preguntas"&gt;
  &lt;/a&gt;
  Preguntas
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;stackoverflow&lt;/td&gt;
&lt;td&gt;&lt;a href="https://stackoverflow.com/"&gt;https://stackoverflow.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reddit&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.reddit.com/"&gt;https://www.reddit.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quora&lt;/td&gt;
&lt;td&gt;&lt;a href="https://es.quora.com/"&gt;https://es.quora.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#velocidad-de-carga-de-sitio-web"&gt;
  &lt;/a&gt;
  Velocidad de carga de sitio web
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;speedpages insights&lt;/td&gt;
&lt;td&gt;&lt;a href="https://developers.google.com/speed/pagespeed/insights/?hl=es"&gt;https://developers.google.com/speed/pagespeed/insights/?hl=es&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gtmetrix&lt;/td&gt;
&lt;td&gt;&lt;a href="https://gtmetrix.com/"&gt;https://gtmetrix.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tools.pingdom&lt;/td&gt;
&lt;td&gt;&lt;a href="https://tools.pingdom.com/"&gt;https://tools.pingdom.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#descargar-fuentes-gratis"&gt;
  &lt;/a&gt;
  Descargar fuentes gratis
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fonts.google&lt;/td&gt;
&lt;td&gt;&lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dafont&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.dafont.com/es/"&gt;https://www.dafont.com/es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;befonts&lt;/td&gt;
&lt;td&gt;&lt;a href="https://befonts.com/"&gt;https://befonts.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#herramientas-para-comprimir-im%C3%A1genes"&gt;
  &lt;/a&gt;
  Herramientas para comprimir imágenes
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;tinypng&lt;/td&gt;
&lt;td&gt;&lt;a href="https://tinypng.com/"&gt;https://tinypng.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kraken&lt;/td&gt;
&lt;td&gt;&lt;a href="https://kraken.io/"&gt;https://kraken.io/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;imagerecycle&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.imagerecycle.com/"&gt;https://www.imagerecycle.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compressor&lt;/td&gt;
&lt;td&gt;&lt;a href="https://compressor.io/"&gt;https://compressor.io/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jpeg-optimizer&lt;/td&gt;
&lt;td&gt;&lt;a href="http://jpeg-optimizer.com/"&gt;http://jpeg-optimizer.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;imagecompressor&lt;/td&gt;
&lt;td&gt;&lt;a href="https://imagecompressor.com/es/"&gt;https://imagecompressor.com/es/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ezgif&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ezgif.com/"&gt;https://ezgif.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#png-con-fondo-transparente"&gt;
  &lt;/a&gt;
  PNG con fondo transparente
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;stickpng&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.stickpng.com/es"&gt;https://www.stickpng.com/es&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pngtree&lt;/td&gt;
&lt;td&gt;&lt;a href="https://es.pngtree.com/"&gt;https://es.pngtree.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;freepngimg&lt;/td&gt;
&lt;td&gt;&lt;a href="https://freepngimg.com/"&gt;https://freepngimg.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pngegg&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.pngegg.com/es"&gt;https://www.pngegg.com/es&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cleanpng&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.cleanpng.com/"&gt;https://www.cleanpng.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;purepng&lt;/td&gt;
&lt;td&gt;&lt;a href="https://purepng.com/"&gt;https://purepng.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;favpng&lt;/td&gt;
&lt;td&gt;&lt;a href="https://favpng.com/"&gt;https://favpng.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#crear-c%C3%B3digo-qr"&gt;
  &lt;/a&gt;
  Crear código QR
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nombre&lt;/th&gt;
&lt;th&gt;Enlace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;qrcode-monkey&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.qrcode-monkey.com/es"&gt;https://www.qrcode-monkey.com/es&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;Repositorio de Git: &lt;a href="https://github.com/gdcodev/recursos-dev"&gt;https://github.com/gdcodev/recursos-dev&lt;/a&gt;&lt;br&gt;
📌 Mis Redes: &lt;a href="https://www.facebook.com/gdcode7"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/gastondanielsen/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/gdcodev"&gt;GitHub&lt;/a&gt; &lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
