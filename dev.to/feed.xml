<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Useful Tmux Configuration Examples</title>
      <author>Igor Irianto</author>
      <pubDate>Thu, 18 Nov 2021 13:30:50 +0000</pubDate>
      <link>https://dev.to/iggredible/useful-tmux-configuration-examples-k3g</link>
      <guid>https://dev.to/iggredible/useful-tmux-configuration-examples-k3g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#configuring-your-tmux-to-be-even-more-awesome"&gt;
  &lt;/a&gt;
  Configuring Your Tmux to Be Even More Awesome
&lt;/h2&gt;

&lt;p&gt;This article is part 2 of my tmux series. In the &lt;a href="https://dev.to/iggredible/tmux-tutorial-for-beginners-5c52"&gt;previous article&lt;/a&gt;, you learned how to use tmux: what tmux is, how to manage multiple terminals, and how to use tmux's powerful features. However, in that article, I didn't cover much how to customize tmux. This is what this article is for. Here you'll learn some configurations that I use.&lt;/p&gt;

&lt;p&gt;My hope is that by exposing a list of my personal tmux configurations and my reasoning behind them, you will see a general pattern and understand it enough to make tmux your own.&lt;/p&gt;

&lt;p&gt;Here you will learn useful tmux shortcuts you might not even know exist. Whenever you thinking &lt;em&gt;"Can Tmux can do that?"&lt;/em&gt; when reading this article, the answer is, 90% of the time, &lt;em&gt;"Yes, tmux can do that!"&lt;/em&gt;. No, tmux can't do your chores or make your wildest dreams come true, but tmux probably can make your wildest terminal multiplexing dreams come true :D.&lt;/p&gt;

&lt;p&gt;It is highly recommended that you either read my previous article or are already familiar with how tmux works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tmux-config-file"&gt;
  &lt;/a&gt;
  The Tmux Config File
&lt;/h3&gt;

&lt;p&gt;When you start using tmux, you may think that some of tmux's keys are not intuitive or straight-up uncomfortable to reach. For example, I never understood why tmux uses &lt;code&gt;Ctrl + b&lt;/code&gt; as a prefix. The letter b is positioned at a weird distance from the ctrl button. I also found commands like the split commands &lt;code&gt;Prefix + "&lt;/code&gt; and &lt;code&gt;Prefix + %&lt;/code&gt; are not intuitive. There is nothing about &lt;code&gt;"&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; that are associable to horizontal / vertical splits.&lt;/p&gt;

&lt;p&gt;It would be nice to be able to change some of the default configs into something that are more intuitive &lt;em&gt;to me&lt;/em&gt;, the user. To do this, we need to configure the &lt;em&gt;tmux config file&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;When you start a tmux session, tmux looks for a file named &lt;code&gt;.tmux.conf&lt;/code&gt; in the HOME path &lt;code&gt;~/.tmux.conf&lt;/code&gt; (technically tmux looks for &lt;code&gt;/etc/tmux.conf&lt;/code&gt; first, then &lt;code&gt;~/.tmux.conf&lt;/code&gt;, but the former is best left untouched).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-modify-the-config-file"&gt;
  &lt;/a&gt;
  How to Modify the Config File
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;.tmux.conf&lt;/code&gt; file to tmux is like &lt;code&gt;.zshrc&lt;/code&gt; to Z-Shell and &lt;code&gt;.vimrc&lt;/code&gt; to Vim. It is a path to a file where you enter your own configurations so next time you launch tmux, it executes everything inside that config file. &lt;/p&gt;

&lt;p&gt;So what can you put inside the tmux config file? Anything. The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Endless possibility is not always a good thing. I remember the times I was staring at a blank MS Word when having to write a report or a blank Strathmore Paper when having to draw a scene - it can be intimidating having to fill up your config file from a blank slate. When I started using tmux a few years ago, I copied + pasted much of my tmux config from random sites I found from the internet. Now that I'm older and wiser (am I? :D), I have deleted the configs that I don't need. I also make sure that I understood the ones that I keep. I hope that you will be able to start your tmux journey at a better place than I did: understanding what you put into your config file instead of copy-pasting anything that remotely look interesting without knowing what it really does.&lt;/p&gt;

&lt;p&gt;Tmux has a set of commands that you can run from the terminal inside a tmux session. For example, to display a message, you can use tmux's &lt;code&gt;display-message&lt;/code&gt; command. Type this from the terminal inside a tmux session:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux display-message "Hello my tmux friends"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see "Hello my tmux friends" displayed on the bottom of the screen.&lt;/p&gt;

&lt;p&gt;If you find &lt;code&gt;display-message&lt;/code&gt; is too long to type, &lt;code&gt;display&lt;/code&gt; works the same way, plus it is shorter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux display "Hello my tmux friends"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to display the message on the terminal instead on the status bar, pass it the &lt;code&gt;-p&lt;/code&gt; flag. Try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux display -p "Hello tmux"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run tmux command from the terminal, you need to precede it with the &lt;code&gt;tmux&lt;/code&gt; command, as you'll see later.&lt;/p&gt;

&lt;p&gt;Another way to run a tmux command is to use the command-line mode. To enter the command-line mode, press &lt;code&gt;Prefix + :&lt;/code&gt; (Vim users might notice striking similarities with Vim's EX mode). In this mode, you can enter any tmux commands without prepending it with &lt;code&gt;tmux&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you haven't already, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + :
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your cursor should now be at the bottom of the tmux window. Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;display "Hello my tmux friends"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, with this approach you don't have to type &lt;code&gt;tmux display&lt;/code&gt; anymore. &lt;code&gt;display&lt;/code&gt; is enough. If you look at the status bar (bottom of the screen), you'll see the "Hello my tmux friends" text.&lt;/p&gt;

&lt;p&gt;One advantage of the command-line mode is that you can run any tmux command while having another program running. For example, if you need to run &lt;code&gt;display "hello"&lt;/code&gt; and you currently have Vim open, instead of exiting Vim then typing &lt;code&gt;tmux display "hello"&lt;/code&gt;, with the command-line mode, you can just press &lt;code&gt;Prefix + :&lt;/code&gt; and type &lt;code&gt;display-message "hello"&lt;/code&gt; - without exiting Vim!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-source"&gt;
  &lt;/a&gt;
  Quick Source
&lt;/h3&gt;

&lt;p&gt;When you edit your tmux config file, you will need to reload it for the change to take place. To reload tmux, run &lt;code&gt;tmux source-file ~/.tmux.conf&lt;/code&gt; from the terminal or run &lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt; from tmux's command-line mode. Tmux will re-execute all the codes inside the &lt;code&gt;~/.tmux.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you're a tinkerer, a shortcut to quickly source your config file can be useful. Add the following inside &lt;code&gt;~/.tmux.conf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind r source-file ~/.tmux.conf \; display "Reloaded!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bind command (short for &lt;code&gt;bind-key&lt;/code&gt;) binds the letter r to perform the following (note, this actually binds &lt;code&gt;Prefix + r&lt;/code&gt;, not just the letter r by itself)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Config file source (&lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Display message (&lt;code&gt;display "Reloaded!"&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The semi-colon (&lt;code&gt;;&lt;/code&gt;) lets you to sequentially combine multiple tmux commands. It's a great way to bind a single key with multiple commands.&lt;/p&gt;

&lt;p&gt;So each time you make changes to the config file, save the tmux config and run &lt;code&gt;Prefix + r&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some configs won't take place even after you reload the config file. Usually these are the UI-related commands. If you don't see your changes after reloading the tmux config, you need to restart the tmux server: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Detach from the session (&lt;code&gt;Prefix + d&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Kill the server (&lt;code&gt;tmux kill-server&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Start a new session (&lt;code&gt;tmux new -s MY_SESSION&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alternatively, you can also run &lt;code&gt;Prefix + I&lt;/code&gt; (note the I is uppercased) to reload tmux environment. &lt;/p&gt;

&lt;p&gt;In short, if running &lt;code&gt;Prefix + r&lt;/code&gt; doesn't do anything, try running &lt;code&gt;Prefix + I&lt;/code&gt; or restart your server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting
&lt;/h3&gt;

&lt;p&gt;Tmux uses &lt;code&gt;#&lt;/code&gt; to comment out any subsequent texts. Commented lines won't be executed by tmux config. I like to use comments to explain an obscure code. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Add binding to reload tmux.conf for fast, iterative development
bind r source-file ~/.tmux.conf \; display "Reloaded!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also put a comment at the end of the same line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind r source-file ~/.tmux.conf \; display "Reloaded!" # quick reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-configurations"&gt;
  &lt;/a&gt;
  Useful Configurations
&lt;/h2&gt;

&lt;p&gt;Here are some configurations that I find useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-default-prefix"&gt;
  &lt;/a&gt;
  Changing the Default Prefix
&lt;/h3&gt;

&lt;p&gt;As said before, I am not a big fan of tmux's default &lt;code&gt;Ctrl + b&lt;/code&gt; default prefix. Let's change it with something more intuitive. If you look around on the internet, some popular tmux prefix alternatives are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + Space&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + s&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + u&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Backticks &lt;/li&gt;
&lt;li&gt;Tab + key variation instead of &lt;code&gt;Ctrl + KEY&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Other?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally use &lt;code&gt;Ctrl + Space&lt;/code&gt; mainly because my Vim leader key is the Space key. To change my prefix to &lt;code&gt;Ctrl + Space&lt;/code&gt;, I add this in the tmux config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind C-Space
set -g prefix C-Space
bind C-Space send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What each does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;unbind&lt;/code&gt; unbinds whatever functionality &lt;code&gt;C-space&lt;/code&gt; had (if any).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;set -g prefix&lt;/code&gt; line informs tmux that the prefix will now be &lt;code&gt;C-Space&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bind ... send-prefix&lt;/code&gt; allows &lt;code&gt;Ctrl + Space&lt;/code&gt; to perform the &lt;code&gt;send-prefix&lt;/code&gt; command. The send-prefix command sends the prefix keystroke to a window. This is useful with nested tmux sessions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to use whatever key combination you feel most comfortable with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mouse-usage-in-tmux"&gt;
  &lt;/a&gt;
  Mouse Usage in Tmux
&lt;/h3&gt;

&lt;p&gt;Although I am not a big fan of using mouse extensively, there were times when I needed to use it. Tmux's default configs are not mouse friendly. Let's change that. To enable scrolling, clicking, and resizing, add the following inside the tmux config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g mouse on
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to see more, check out the &lt;code&gt;MOUSE SUPPORT&lt;/code&gt; section inside &lt;code&gt;man tmux&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#increase-history"&gt;
  &lt;/a&gt;
  Increase History
&lt;/h3&gt;

&lt;p&gt;By default, tmux keeps the previous 2000 lines of window history (you can scroll up 2000 lines above your current terminal line). Sometimes 2000 isn't enough. To increase it to 5000 lines, add this inside the config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g history-limit 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I never needed more than 5000, so I never went higher. Of course, you can make it higher if you need to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jump-to-a-marked-pane"&gt;
  &lt;/a&gt;
  Jump to a Marked Pane
&lt;/h3&gt;

&lt;p&gt;If you're a Vim user, you may be aware that you can create a mark with &lt;code&gt;m&lt;/code&gt; + identifier. You can then return to that mark at any time. You can do the same with tmux.&lt;/p&gt;

&lt;p&gt;To mark the pane you are currently on, press:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Vim, to return to a marked location, you use a single-quote or a backtick. Since we already have the single-quote shortcut taken (recall that &lt;code&gt;Prefix + '&lt;/code&gt; is used to jump to a window number by index), let's use backtick. To  jump to a mark using a backtick, add this config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind \` switch-client -t'{marked}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try this: mark a pane, then go to a different window - observe that you can quickly return to the previous pane with Prefix + backtick. I find it useful to mark the pane I always find myself returning into, usually the pane where the main codebase is.&lt;/p&gt;

&lt;p&gt;To remove a mark, press &lt;code&gt;Prefix + m&lt;/code&gt; again while you're on that marked pane or just press &lt;code&gt;Prefix + M&lt;/code&gt; anywhere.&lt;/p&gt;

&lt;p&gt;One final re*mark* (pun intended), in Vim you can have up to 26 marks. In tmux, you can only have one, so choose wisely which pane to mark.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#numbering-windows-and-panes"&gt;
  &lt;/a&gt;
  Numbering Windows and Panes
&lt;/h3&gt;

&lt;p&gt;Recall that tmux windows and panes are 0-based. I find them not really intuitive. I prefer to have my first windows and panes to start with 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g base-index 1
setw -g pane-base-index 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose that I have 4 windows in a session - call them window A, B, C, and D. If I close the third window (window C), now I end up with window A in position 1, B in position 2, and &lt;em&gt;D in position 4&lt;/em&gt;. I have a gap in position 3. This behavior causes a friction in my workflow because I have to keep in the back of my mind that position 3 window is vacant. Wouldn't it be better to automatically move window D to the third position after deleting window C? Heck yea! To get this behavior, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g renumber-windows on
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I delete window C in position 3, window D automatically moves to position 3. The next window I create will become window 4. Little things like these free up your mental real estate. The fewer things I have to remember in my head, the more I can use my head to think about the important things! (Like, what's for lunch? :D)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-intuitive-split-commands"&gt;
  &lt;/a&gt;
  More Intuitive Split Commands
&lt;/h3&gt;

&lt;p&gt;I think tmux's default split pane shortcuts, &lt;code&gt;Prefix + %&lt;/code&gt; and &lt;code&gt;Prefix + "&lt;/code&gt; are not intuitive. &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; are better symbols to represent vertical and horizontal splits. Why not use them instead?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind | split-window -hc "#{pane_current_path}"
bind - split-window -vc "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I press &lt;code&gt;Prefix + |&lt;/code&gt;, tmux does a vertical split  and when I press &lt;code&gt;Prefix + -&lt;/code&gt;, tmux does a horizontal split.&lt;/p&gt;

&lt;p&gt;Btw, I find that having to press the Shift key to do &lt;code&gt;Prefix + |&lt;/code&gt; is mildly inconvenient. So I have these mappings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key "|" split-window -h -c "#{pane_current_path}"
bind-key "\\" split-window -fh -c "#{pane_current_path}"

bind-key "-" split-window -v -c "#{pane_current_path}"
bind-key "_" split-window -fv -c "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows me to press either the uppercased version of that key to get the vertical / horizontal splits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swapping-windows"&gt;
  &lt;/a&gt;
  Swapping Windows
&lt;/h3&gt;

&lt;p&gt;Sometimes I need to swap windows around. Maybe I want to have the &lt;code&gt;docker-compose&lt;/code&gt; to window 1 from window 2. I think &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; make good, intuitive keys to swap the current window to the right and left, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind -r "&amp;lt;" swap-window -d -t -1
bind -r "&amp;gt;" swap-window -d -t +1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if I want to move the current window to the right, I can do &lt;code&gt;Prefix + &amp;gt;&lt;/code&gt;. To move the current window to the left, do &lt;code&gt;Prefix + &amp;lt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keeping-current-path"&gt;
  &lt;/a&gt;
  Keeping Current Path
&lt;/h3&gt;

&lt;p&gt;When you create a new window (&lt;code&gt;Prefix + c&lt;/code&gt;), tmux resets the path. Wait, what are you talking about? Suppose when I start a new tmux session, I was on the HOME path (&lt;code&gt;~/&lt;/code&gt;). After coding and doing stuff, I end up in &lt;code&gt;~/some/directory/&lt;/code&gt;. Now I need to create a new window. When I run &lt;code&gt;Prefix + c&lt;/code&gt;, the new window will be back on the HOME directory, not whatever path I was on. Tmux automatically resets the path in the new window you just created to the path you were on when you started the current session. 80% of the time, when I create a new window, I want to stay in whatever path I am on. To preserve the path in the new window, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind c new-window -c "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I create a new window, the new window will also be on &lt;code&gt;~/some/directory/&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggling-windows-and-sessions"&gt;
  &lt;/a&gt;
  Toggling Windows and Sessions
&lt;/h3&gt;

&lt;p&gt;I find myself needing to toggle between the current and previous window a lot. To quickly toggle between windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind Space last-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I can type &lt;code&gt;Prefix + Space&lt;/code&gt; to toggle between the current and previous windows.&lt;/p&gt;

&lt;p&gt;Recall that &lt;code&gt;Prefix + Space&lt;/code&gt; was originally the toggle layout tmux shortcut. If you use this, you'll lose that layout toggle shortcut. I personally never use the layout toggle functionality at all. I also choose Space because my Prefix is &lt;code&gt;Ctrl + Space&lt;/code&gt;, making it intuitive. If you use a different prefix, you may consider a different shortcut key.&lt;/p&gt;

&lt;p&gt;Moreover, sometimes I also need to toggle between the current and the previous session. Add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key C-Space switch-client -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, I chose &lt;code&gt;Ctrl + Space&lt;/code&gt; because &lt;code&gt;Ctrl + Space&lt;/code&gt; is also my Prefix. So it's like pressing Prefix twice. If you use a different prefix, consider using that prefix key(s) instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resizing"&gt;
  &lt;/a&gt;
  Resizing
&lt;/h3&gt;

&lt;p&gt;Recall that we can run &lt;code&gt;tmux resize-pane -D/U/L/R&lt;/code&gt; commands to resize the panes. Unfortunately, tmux doesn't come with the shortcuts to quickly resize panes. No worries, let's just add our own! The shortcuts that I use are &lt;code&gt;Prefix + Ctrl-h/j/k/l&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind -r C-j resize-pane -D 15
bind -r C-k resize-pane -U 15
bind -r C-h resize-pane -L 15
bind -r C-l resize-pane -R 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The 15 above is tmux cell unit. I find 15 unit increments to be perfect. Not too little, not too much. I also find &lt;code&gt;Ctrl-h/j/k/l&lt;/code&gt; to be good keys to do this because it resembles Vim navigation. &lt;/p&gt;

&lt;p&gt;Other resizing alternatives are the arrow keys, Ctrl + arrow keys, or &lt;code&gt;&amp;lt;/&amp;gt;/-/+&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-and-joining-panes"&gt;
  &lt;/a&gt;
  Breaking and Joining Panes
&lt;/h3&gt;

&lt;p&gt;Maybe you are on a window with multiple panes and you want to break the current pane out into its own window. To do this, tmux has a built-in break-pane command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + !
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Conversely, what if you want to join a pane from another window into a different window? There is no native keybinding, but tmux has a &lt;code&gt;join-pane&lt;/code&gt; command. Add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind j choose-window 'join-pane -h -s "%%"'
bind J choose-window 'join-pane -s "%%"'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press &lt;code&gt;Prefix + j&lt;/code&gt; to choose which window you want to join. &lt;/p&gt;

&lt;p&gt;Btw notice that I have two shortcuts: &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;J&lt;/code&gt;. The former joins a window horizontally and the latter vertically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-pane-creation"&gt;
  &lt;/a&gt;
  Quick Pane Creation
&lt;/h3&gt;

&lt;p&gt;I don't know when inspiration strikes. But when it strikes, I want to have a quick access to my notes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key h split-window -h "vim ~/scratch/notes.md"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now whenever I thought of a billion-dollar startup idea, I can just press &lt;code&gt;Prefix + h&lt;/code&gt; to open a new horizontal split window and launch &lt;code&gt;~/scratch/notes.md&lt;/code&gt; in Vim. Who says that learning tmux doesn't pay? :D&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-keybinding"&gt;
  &lt;/a&gt;
  General Key-Binding
&lt;/h3&gt;

&lt;p&gt;All the tmux shortcuts you've seen so far have used the Prefix key. What if you need to create a shortcut that does not use Prefix? What if, instead of &lt;code&gt;Prefix + j&lt;/code&gt;, you want to use &lt;code&gt;Ctrl + j&lt;/code&gt; to join windows?&lt;/p&gt;

&lt;p&gt;You can do this bypassing the &lt;code&gt;-n&lt;/code&gt; option to the &lt;code&gt;bind&lt;/code&gt; command in your config file. Instead of &lt;code&gt;bind j YOUR_COMMAND&lt;/code&gt;, you use &lt;code&gt;bind -n C-j YOUR_COMMAND&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind -n C-j choose-window 'join-pane -h -s "%%"'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it will use &lt;code&gt;Ctrl + j&lt;/code&gt; Instead of &lt;code&gt;Prefix + j&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-config-file-path"&gt;
  &lt;/a&gt;
  Changing the Config File Path
&lt;/h3&gt;

&lt;p&gt;By default your config path is in the HOME directory (in my case, it is &lt;code&gt;~/.tmux.conf&lt;/code&gt;). But you can always put it somewhere else. If you run tmux with &lt;code&gt;tmux -f /path/to/your/new/tmux.conf&lt;/code&gt;, it will use whatever path you point instead of the default HOME path.&lt;/p&gt;

&lt;p&gt;Personally, I keep my config path in HOME (&lt;code&gt;~/.tmux.conf&lt;/code&gt;) but it is symlinked to my dotfiles repo (&lt;code&gt;~/Projects/dotfiles/tmux.conf&lt;/code&gt;). With this, can I can edit either &lt;code&gt;~/Projects/dotfiles/tmux.conf&lt;/code&gt; or &lt;code&gt;~/.tmux.conf&lt;/code&gt; and these two files will remain in sync. I like to keep my config files portable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tpm"&gt;
  &lt;/a&gt;
  TPM
&lt;/h2&gt;

&lt;p&gt;At some point, you'll need to use a more complicated setup instead of one-liner configurations. TPM is a good tool for that. It stands for Tmux Plugin Manager. It allows you to create and install tmux plugins easily.&lt;/p&gt;

&lt;p&gt;In the following section, I will briefly go over TPM. If you want to learn more, feel free to check the &lt;a href="https://github.com/tmux-plugins/tpm"&gt;repository&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-tpm"&gt;
  &lt;/a&gt;
  Installing TPM
&lt;/h3&gt;

&lt;p&gt;To install TPM, you need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git clone TPM to a HOME directory (&lt;code&gt;~/.tmux/plugins/tpm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add any plugins with &lt;code&gt;set -g @plugin 'YOUR/PLUGIN'&lt;/code&gt; in your tmux config file. Don't forget to precede it with &lt;code&gt;set -g @plugin 'tmux-plugins/tpm'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Point the &lt;code&gt;run&lt;/code&gt; command to the TPM repository location (by default it points to &lt;code&gt;~/.tmux/tpm/tpm&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more, check out the &lt;a href="https://github.com/tmux-plugins/tpm#installation"&gt;TPM installation page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-tpm-package"&gt;
  &lt;/a&gt;
  Adding a TPM package
&lt;/h3&gt;

&lt;p&gt;Let's go over how to install a package. I really like the &lt;a href="https://github.com/dracula/tmux"&gt;dracula theme&lt;/a&gt; plugin. To install it, I have the following in my tmux config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'dracula/tmux'

run '~/.tmux/plugins/tpm/tpm'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recall that the first plugin in the list, &lt;code&gt;tmux-plugins/tpm&lt;/code&gt;, is required as part of TPM. The next one on the list, &lt;code&gt;dracula/tmux&lt;/code&gt;, is the plugin that you're trying to install. Finally, the &lt;code&gt;run '~/.tmux/plugins/tpm/tpm&lt;/code&gt;, is also a required code to make TPM work.&lt;/p&gt;

&lt;p&gt;You can add as many plugins as you want. Once you added the list of plugins, save and source tmux, then run &lt;code&gt;Prefix + I&lt;/code&gt; (reload environment). The dracula plugin should activate. Cool!&lt;/p&gt;

&lt;p&gt;For a curated list of plugins, checkout &lt;a href="https://github.com/rothgar/awesome-tmux#plugins"&gt;awesome-tmux plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tmux-and-vim"&gt;
  &lt;/a&gt;
  Tmux and Vim
&lt;/h2&gt;

&lt;p&gt;I use tmux and Vim a lot. They are like rice and eggs, or croissant and chocolate, or peanut butter and nutella sandwich - you get the point: they work great together.&lt;/p&gt;

&lt;p&gt;There are some configurations that you can add to make them work together even better. It's like adding butter to your rice and eggs, or sesame seeds to your croissant and chocolate, or cheese to your peanut butter and nutella sandwich.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-vimtmux-navigation"&gt;
  &lt;/a&gt;
  Easy Vim-Tmux Navigation
&lt;/h3&gt;

&lt;p&gt;One of the biggest improvement you can do to vim and tmux is to synchronize their navigations. In my regular workflow, I normally have multiple Vim windows and tmux panes on my screen.&lt;/p&gt;

&lt;p&gt;In vim, you move around different windows with &lt;code&gt;Ctrl + w + h/j/k/l&lt;/code&gt;. In tmux, you move around different panes with &lt;code&gt;Prefix + left/down/up/right&lt;/code&gt;. Wouldn't it be great if you can move your cursor between vim windows and tmux panes using the same key sets?&lt;/p&gt;

&lt;p&gt;Heck yea, that sure would make live a LOT simpler! If this is possible, you don't have to pause to think if you're in vim or tmux - should I press &lt;code&gt;Ctrl + w&lt;/code&gt; or &lt;code&gt;Prefix&lt;/code&gt;? Using only one set of keys eliminates navigation context-switching. The less context-switching you need to do, the more flow you have. The more flow you have, the more brain power you can allocate to actually accomplish the important tasks - like making a tasty rice and egg dish for lunch - I mean, to code!&lt;/p&gt;

&lt;p&gt;To accomplish this, you need to install the &lt;a href="https://github.com/christoomey/vim-tmux-navigator"&gt;vim-tmux-navigator&lt;/a&gt; plugin for vim and tmux. Technically this is just one plugin, but it needs to be installed in &lt;em&gt;both&lt;/em&gt; vim and tmux.&lt;/p&gt;

&lt;p&gt;By the way, this article assumes that you have a sufficient understanding of vim plugins. This article is about tmux, not vim. If you want to learn more, check out my other guide, &lt;a href="https://github.com/iggredible/Learn-Vim"&gt;learn-vim&lt;/a&gt;. It's the best guide you'll ever read on vim (no bias there :D)&lt;/p&gt;

&lt;p&gt;Install the &lt;code&gt;vim-tmux-navigator&lt;/code&gt; plugin in vim. I personally use the &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt; plugin manager, so I only need to add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Plug 'christoomey/vim-tmux-navigator'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and source the vimrc, run &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, install the &lt;code&gt;vim-tmux-navigator&lt;/code&gt; plugin in tmux. Add this in the tmux config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g @plugin 'christoomey/vim-tmux-navigator'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and source the tmux config file. Don't forget to reload tmux (&lt;code&gt;Prefix + I&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let's try it! Inside a tmux session, split your window into multiple panes. Inside one pane, open up Vim and split it into multiple windows. Behold! You can navigate to next vim window / tmux pane with &lt;code&gt;Ctrl + h/j/k/l&lt;/code&gt;. What!! Isn't that cool? Mind-blown. My life has never been the same ever since I discovered this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tmuxinator"&gt;
  &lt;/a&gt;
  Tmuxinator
&lt;/h2&gt;

&lt;p&gt;Once you use tmux for a while, you will realize that most of the time, you perform the same sequence of commands. &lt;/p&gt;

&lt;p&gt;For example, for work, I almost always:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new session called &lt;code&gt;work&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Rename this window &lt;code&gt;servers&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Launch the rails server&lt;/li&gt;
&lt;li&gt;Launch the sidekiq server on a split pane&lt;/li&gt;
&lt;li&gt;Launch redis on a split pane&lt;/li&gt;
&lt;li&gt;Create a new window named &lt;code&gt;codes&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Launch Vim&lt;/li&gt;
&lt;li&gt;Horizontal split adjusted at about 30% for random terminal needs&lt;/li&gt;
&lt;li&gt;Create a new window named &lt;code&gt;consoles&lt;/code&gt; for rails / mysql console&lt;/li&gt;
&lt;li&gt;Create a new window named &lt;code&gt;notes&lt;/code&gt; to take notes / scratchpads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do this almost every single day. Let's automate it. One way to do it is to use tmux templating library like &lt;a href="https://github.com/tmuxinator/tmuxinator"&gt;tmuxinator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tmuxinator lets you to set up your tmux sessions/windows/panes to run specific commands. Set them up once. Reuse any time.&lt;/p&gt;

&lt;p&gt;To get started, install tmuxinator. If you have mac, you can just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install tmuxinator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more info, check out tmuxinator's &lt;a href="https://github.com/tmuxinator/tmuxinator#installation"&gt;installation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of available tmuxinator commands, but the following three are the most important ones, in my opinion (they are also the only ones I remember :D). You can create, edit, and launch a tmuxinator template with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmuxinator new PROJECT
tmuxinator edit PROJECT
tmunxinator PROJECT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, I find that the name &lt;code&gt;tmunxinator&lt;/code&gt; too long to type. I prefer shorter name, like &lt;code&gt;mux&lt;/code&gt;. In my zshrc (or bashrc if you use bash), add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias mux=tmuxinator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I can just run &lt;code&gt;mux new PROJECT&lt;/code&gt; instead of &lt;code&gt;tmuxinator new PROJECT&lt;/code&gt;. Let's call our project "work". Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mux new work
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tmuxinator will create a new file &lt;code&gt;work.yml&lt;/code&gt; somewhere inside the config directory. Inside you can configure your settings for your tmux work project. Mine looks something like this (it comes by default):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /Users/iggy/.config/tmuxinator/work.yml

name: work
root: ~/

# lots of stuff...

windows:
  - editor:
      layout: main-vertical
      panes:
        - vim
        - guard
  - server: bundle exec rails s
  - logs: tail -f log/development.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;name:&lt;/code&gt; attribute is the project name and &lt;code&gt;root&lt;/code&gt; is the root directory. &lt;code&gt;windows&lt;/code&gt; represents tmux windows for this project - in this case we have three windows: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;editor&lt;/code&gt; window using the &lt;code&gt;main-vertical&lt;/code&gt; layout. It is split into two with two panes, one running &lt;code&gt;vim&lt;/code&gt; and another running &lt;code&gt;guard&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;server&lt;/code&gt; that runs &lt;code&gt;bundle exec rails s&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;logs&lt;/code&gt; to display development log.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's edit this template to fit my workflow. First, I'm going to update my root to be my work project. Change them to your work directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root: ~/Work/is/awesome/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now each time I run &lt;code&gt;mux work&lt;/code&gt;, it will automatically use &lt;code&gt;~/Work/is/awesome/&lt;/code&gt; as the root path in my session.&lt;/p&gt;

&lt;p&gt;Next, modify our windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /Users/iggy/.config/tmuxinator/work.yml

name: work
root: ~/Work/is/awesome/

windows:
  - server_stuff:
      layout: tiled
      panes:
        - bundle exec rails s
        - bundle exec sidekiq
        - redis-server
  - code_stuff: vim
  - misc_stuff:
  - notes:
    - cd ~/Dropbox
    - vim

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have four windows defined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first, &lt;code&gt;server_stuff&lt;/code&gt;, has the layout set to be &lt;code&gt;tiled&lt;/code&gt;. It consists of three panes. The first pane runs the rails server, the second sidekiq server, and the third runs redis server.&lt;/li&gt;
&lt;li&gt;The second, &lt;code&gt;code_stuff&lt;/code&gt;, runs vim.&lt;/li&gt;
&lt;li&gt;The third window is just an empty window for whatever comes up (rails console, mysql console, ssh, git workflow, etc)&lt;/li&gt;
&lt;li&gt;The fourth window is my scratchpad. I have it pointed to my Dropbox directory where I store my notes. I take my notes with vim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you're done, save the yml file. If I ever want to edit it, I just need to run &lt;code&gt;mux edit work&lt;/code&gt;. To launch this tmuxinator project, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mux work
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! It's convenient and easy to set up. This can save you 5-10 minutes everyday. &lt;/p&gt;

&lt;p&gt;If you need to close it, since all this is just a tmux session, all you need to do is detach from the &lt;code&gt;work&lt;/code&gt; session (&lt;code&gt;Prefix + d&lt;/code&gt;), then kill it with &lt;code&gt;tmux kill-session -t work&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By the way, earlier I said that for my codebase window, I like having a window with horizontal split at about 70/30, with the top part running Vim while the bottom one for random terminal work. One way is to use tmux's &lt;code&gt;main-horizontal&lt;/code&gt; layout, but it would be nice if I could fine-tune the length of the top and bottom panes.&lt;/p&gt;

&lt;p&gt;There is no clean way to do it, but you can use this trick:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, create a tmux window and split them horizontally.&lt;/li&gt;
&lt;li&gt;Second, you adjust the height to about 70/30 (using &lt;code&gt;resize-pane&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Third, when you're happy with the proportions, run &lt;code&gt;tmux list-windows&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;It will print something like this: &lt;code&gt;test* (2 panes) [278x70] [layout edac,278x70,0,0[278x50,0,0,1,278x19,0,51,15]] @1 (active)&lt;/code&gt;. Your numbers will probably be different from mine.&lt;/li&gt;
&lt;li&gt;The ambiguous-looking number is the tmux's window proportions. Copy that. Inside tmuxinator, paste that number in the &lt;code&gt;layout&lt;/code&gt; section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My tmuxinator &lt;code&gt;work.yml&lt;/code&gt; file now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /Users/iggy/.config/tmuxinator/work.yml

name: work
root: ~/Work/is/awesome/

windows:
  - server_stuff:
      layout: tiled
      panes:
        - bundle exec rails s
        - bundle exec sidekiq
        - redis-server
  - code_stuff:
      layout: edac,278x70,0,0[278x50,0,0,1,278x19,0,51,15]  
      panes:
        - vim
        - echo "empty"
  - misc_stuff:
  - notes:
    - cd ~/Dropbox
    - vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I run the &lt;code&gt;mux work&lt;/code&gt; command, the second window will be split horizontally with the same proportion as what we had before. Cool!&lt;/p&gt;

&lt;p&gt;By the way, tmuxinator is not the only tmux manager in town. There are two more alternatives that I know of (there could be more):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux-python/tmuxp"&gt;tmuxp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/remi/teamocil"&gt;teamocil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your turn now - think of your work / personal project workflows, then create your own tmuxinator / tmuxp / teamocil / etc template!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this chapter you learned the different examples how you can modify your tmux config. They are by no means exhaustive. I've probably only gone through the basic configs. There are many more combinations you can implement to make your tmux more powerful.&lt;/p&gt;

&lt;p&gt;I hope that through reading this article, you'll learn enough to understand how to modify tmux on your own. Tmux is a simple, powerful tool. Used correctly, it allows you to organize your workflows and reduce context-switching, allowing you to focus more on the current task at hand.&lt;/p&gt;

&lt;p&gt;This is by no means the last tmux articles I'll write. I'm currently working on not just one, but two more articles, so stay tuned! Meanwhile, continue to practice and configure tmux to make it truly your own. Until next time!&lt;/p&gt;

</description>
      <category>tmux</category>
      <category>vim</category>
      <category>configuration</category>
      <category>tmuxinator</category>
    </item>
    <item>
      <title>Code Review</title>
      <author>Minsu Kim</author>
      <pubDate>Thu, 18 Nov 2021 13:29:45 +0000</pubDate>
      <link>https://dev.to/mkim219/code-review-2ao2</link>
      <guid>https://dev.to/mkim219/code-review-2ao2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In the previous weeks, I had change to contribute internal Seneca opensource projects: &lt;a href="https://dev.to/mkim219/fix-the-bug-on-telescope-2d4i"&gt;fix the bug on Telescope&lt;/a&gt; and &lt;a href="https://dev.to/mkim219/ipc144-course-curriculum-renewal-5d0p"&gt;IPC144 course note renewal&lt;/a&gt;. The last piece of task is code reviewing on other student's PR. The code reviews that I have done are &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/80"&gt;PR1&lt;/a&gt; and &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/76"&gt;PR2&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pr1-code-review"&gt;
  &lt;/a&gt;
  PR1 Code Review
&lt;/h3&gt;

&lt;p&gt;The first code review is "ASCII Collating Sequence image converted into Table" which is very similar with my IPC144 course note renewal. The reason why I had code review on this PR is that I want to know and compare how he resolved the issue. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lz3MNcXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duds1i6khujx87nsv4ug.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lz3MNcXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duds1i6khujx87nsv4ug.PNG" alt="PR1" width="808" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is Markdown code what he has done. He has smart idea to add one more column to improve readability on Docusarus. However, not only improving readability but also it helps developers to edit code for maintenance. He used &lt;code&gt;prettier&lt;/code&gt; to align all the content in right position. I had fixed my code after I have reviewed his code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pr2-code-review"&gt;
  &lt;/a&gt;
  PR2 Code Review
&lt;/h3&gt;

&lt;p&gt;The second code review is "Audit and Fix arrays.md". The comment that I left for the code review is that there is a picture for explaining the concept of array. However, the picture did not have proper &lt;code&gt;alt&lt;/code&gt; tag in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gVfjBjPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhxnanbqwavlnn4q5kgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gVfjBjPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhxnanbqwavlnn4q5kgx.png" alt="PR2" width="880" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;alt&lt;/code&gt; tag provides context of image that display and inform for search engine crawler which is important for SEO. Also &lt;code&gt;alt&lt;/code&gt; tag is important for accessibility perceptive &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The code review is not only helpful for the author of the code but also it is helpful to remind me the right knowledge and provide me better idea to solve the issue. &lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>A CMS with a new take - SilverStripe first impression</title>
      <author>Anders Björkland</author>
      <pubDate>Thu, 18 Nov 2021 13:14:14 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/a-cms-with-a-new-take-silverstripe-first-impression-46e4</link>
      <guid>https://dev.to/andersbjorkland/a-cms-with-a-new-take-silverstripe-first-impression-46e4</guid>
      <description>&lt;p&gt;Today we are going to expand our knowledge of PHP frameworks and CMSs. While I usually write about Symfony, today we are going to talk about SilverStripe. Compared to the likes of Laravel and Symfony, this is a small framework when we count stars on GitHub. The &lt;a href="https://github.com/silverstripe/silverstripe-framework"&gt;silverstrip-framework repository&lt;/a&gt; has 700+ stars. When compared as a CMS against Bolt (which I've written about previously), SilverStripe sees a bit more of stardom. Bolt sits on 300+ stars for the current iteration. &lt;/p&gt;

&lt;p&gt;So what is SilverStripe? It's main purpose of existence is its CMS component. The framework part of it has some likeness to Laravel, but appears in a first impression to exist to be a part of a content management system (&lt;em&gt;perhaps I may explore just the framework side of it later on&lt;/em&gt;). The SilverStripe CMS markets itself as "the intuitive content management system and flexible framework loved by editors and developers alike". It's big words to live up to, so let's see how it fairs as we set out to build a Book Review platform (&lt;em&gt;because the Dune movie has gotten me to read the Frank Herbert novel and I like to record that experience&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;We will be building a fairly basic Book Review platform. In this first iteration we will be doing most things manually. Entering the books and authors will be all manual, and we will only have the one user (the default admin user). In a follow up to this article we will be adding a registering page, and using the power of Symfony's HttpClient to make requests to the Google Books API - so we won't have to do that manually anymore.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want the code rather than follow along, this project can be found at &lt;a href="https://github.com/andersbjorkland/devto-book-reviewers"&gt;the Github repository devto-book-reviewers&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-ingredients-of-a-book-review-platform"&gt;
  &lt;/a&gt;
  The ingredients of a Book Review Platform
&lt;/h2&gt;

&lt;p&gt;The features we are going to want is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reviewing books

&lt;ul&gt;
&lt;li&gt;Add book&lt;/li&gt;
&lt;li&gt;Add author&lt;/li&gt;
&lt;li&gt;Add review&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Viewing reviews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we are going to need a few things for this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP 8.0 (you may run with PHP 7.3&amp;gt; and it will mostly work)&lt;/li&gt;
&lt;li&gt;MySQL 5.7&lt;/li&gt;
&lt;li&gt;SilverStripe 5.0&lt;/li&gt;
&lt;li&gt;And some Composer dependencies we are going to attach as we move along&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Oh, there are also a few PHP extensions we need.
  &lt;ul&gt;
&lt;li&gt;ctype&lt;/li&gt;
&lt;li&gt;dom&lt;/li&gt;
&lt;li&gt;fileinfo&lt;/li&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;li&gt;intl&lt;/li&gt;
&lt;li&gt;mbstring&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;simplexml&lt;/li&gt;
&lt;li&gt;tokenizer&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;li&gt;gd &lt;em&gt;or&lt;/em&gt; imagick&lt;/li&gt;
&lt;li&gt;mysqli &lt;em&gt;or&lt;/em&gt; pdo
&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;Let's build this!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-silverstripe"&gt;
  &lt;/a&gt;
  Installing Silverstripe
&lt;/h2&gt;

&lt;p&gt;Run the following with Composer in your favourite terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer create-project silverstripe/installer book-reviewers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you have PHP8 this command may fail. It's a dev-dependency in the regular recipe causing this. What you will do then is to modify composer.json by removing the following lines:  &lt;/p&gt;


&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nl"&gt;"require-dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"sminnee/phpunit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"sminnee/phpunit-mock-objects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.4.5"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We will not be using PHPUnit or Mock Objects for this project, so it's safe to disregard these dependencies this time.&lt;br&gt;
You may now go ahead and install SilverStripe. From within the project directory, run the following:&lt;/p&gt;


&lt;pre class="highlight shell"&gt;&lt;code&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;After the installation is done, there are a few configurations needed. We are going to set up a database and an admin-user. I'll be using docker-compose for the database. First off, let's create a &lt;code&gt;.env&lt;/code&gt;-file in the project-root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# DB credentials
SS_DATABASE_CLASS="MySQLDatabase"
SS_DATABASE_SERVER="localhost"
SS_DATABASE_USERNAME="user"
SS_DATABASE_PASSWORD="password"
SS_DATABASE_NAME="silverstripe"

# Admin user
SS_DEFAULT_ADMIN_USERNAME="admin"
SS_DEFAULT_ADMIN_PASSWORD="password"

# WARNING: in a live environment, change this to "live" instead of dev
SS_ENVIRONMENT_TYPE="dev"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-dockercompose-for-the-database"&gt;
  &lt;/a&gt;
  Setting up docker-compose for the database
&lt;/h3&gt;

&lt;p&gt;This part of the project requires &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; - available for Mac and Windows alike. If you're on Linux there exists the &lt;a href="https://hub.docker.com/search?offering=community&amp;amp;operating_system=linux&amp;amp;q=&amp;amp;type=edition"&gt;Docker Engine&lt;/a&gt; for it, and &lt;a href="https://docs.docker.com/compose/install/"&gt;Docker Compose&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now, let's create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file, also in the project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.4'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mariadb:10&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3306:3306&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_PASSWORD}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_PASSWORD}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_USERNAME}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_NAME}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_INITDB_SKIP_TZINFO&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The docker-compose will use some of the environment variables from the .env file to configure the database.&lt;/p&gt;

&lt;p&gt;With docker-compose.yml configured, we can launch it from the terminal with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#matter-of-namespace"&gt;
  &lt;/a&gt;
  Matter of namespace
&lt;/h3&gt;

&lt;p&gt;By default, SilverStripe uses local namespaces. My preference is &lt;a href=""&gt;PSR-4&lt;/a&gt;, so we will add the following to the &lt;code&gt;composer.json&lt;/code&gt; file in the project root (right after the &lt;code&gt;"extra"&lt;/code&gt;-key is what I did):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"autoload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"psr-4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"App\\"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app/src/"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#launching-silverstripe"&gt;
  &lt;/a&gt;
  Launching SilverStripe
&lt;/h3&gt;

&lt;p&gt;Now that the database is up and running, we can launch SilverStripe. I like to launch all my virtual servers with the Symfony CLI tool. An alternative to this is launching with the built in virtual server that comes with PHP. Whichever way you launch it, the first time loading the SilverStripe site will take a while as it builds the data schema and cache. You may need to configure php.ini setting &lt;code&gt;max_execution_time&lt;/code&gt; to a higher value&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#symfony-cli-server"&gt;
  &lt;/a&gt;
  Symfony CLI Server
&lt;/h4&gt;

&lt;p&gt;To launch the Symfony CLI server, in the project root run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;symfony serve &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, this will launch the server on port 8000, so you can access it at &lt;a href="https://127.0.0.1:8000/"&gt;https://127.0.0.1:8000/&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#php-builtin-server"&gt;
  &lt;/a&gt;
  PHP Built-in Server
&lt;/h4&gt;

&lt;p&gt;To launch the built-in server, move into the &lt;code&gt;public&lt;/code&gt; folder and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php &lt;span class="nt"&gt;-S&lt;/span&gt; localhost:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may now visit the site at &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modeling-the-book-review-platform"&gt;
  &lt;/a&gt;
  Modeling the Book Review Platform
&lt;/h2&gt;

&lt;p&gt;Models represent the data in the database, in an object oriented way. In SilverStripe, models are similar to models in Laravel. This means that we are not having entities and repositories as we would with a Symfony application. Instead, models define both the data and a way to interact with the data. Our models will extend a &lt;code&gt;DataObject&lt;/code&gt;-class which will provide us with the basic functionality.&lt;/p&gt;

&lt;p&gt;As we are going to build a Book Review platform, we will need to model the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Book&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;ISBN&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Author&lt;/em&gt; (Many-to-Many relationship)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Review&lt;/em&gt; (One-to-Many relationship)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Author&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GivenName&lt;/li&gt;
&lt;li&gt;AdditionalName&lt;/li&gt;
&lt;li&gt;FamilyName&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Book&lt;/em&gt; (Many-to-Many relationship)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Review&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rating&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Member&lt;/em&gt; (Many-to-One relationship) - a member is how users are designated in SilverStripe&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Book&lt;/em&gt; (One-to-Many relationship)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few things are going to be handled automatically for us, such as ID-generation and timestamps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are using Object relational mapping (ORM) to map the data to the database. This means that we are using the SilverStripe DataObjects to represent the data, but underneath the hood, we are using a database to store the data in a couple of tables. When there are relationships of different kinds, this means that a table will store a key that links to another table. So, for example, a book can have many authors, and an author can have many books. These relationships are stored in a table with keys for each different author and book.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Many-to-Many; each object can have many other objects, and each other object can have many other objects. Our case is a book can have many authors, and an author in turn can have many other books. &lt;a href="https://en.wikipedia.org/wiki/Many-to-many_(data_model)"&gt;Many-to-many on Wikipedia&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-One; each object can have only one other object. The other object have many of this object. Our case is a review can have only one user, and a user can have many reviews. &lt;a href="https://en.wikipedia.org/wiki/One-to-many_(data_model)"&gt;This is the reversed side of One-to-many, read about it on Wikipedia&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;One-to-Many; each object can have many other objects, and each other object can have only one other object. Our case is a book can have many reviews, and a review can have only one book. &lt;a href="https://en.wikipedia.org/wiki/One-to-many_(data_model)"&gt;One-to-many on Wikipedia&lt;/a&gt; 
PS. I didn't mean for this to becomea lecture in relational databases, it's just a happy coincidence! 💡&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#lets-go-modeling"&gt;
  &lt;/a&gt;
  Let's go Modeling!
&lt;/h3&gt;

&lt;p&gt;Let's start by creating a Book model. We will extend the &lt;code&gt;DataObject&lt;/code&gt;-class, and add properties that we want to store in the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#book-model"&gt;
  &lt;/a&gt;
  Book Model
&lt;/h4&gt;

&lt;p&gt;Create the file &lt;code&gt;./app/src/Model/Book.php&lt;/code&gt; which has the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\ORM\DataObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;DataObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Book"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'ISBN'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Description'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Text'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$has_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Reviews'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$many_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Authors'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's describe what we've got here. First, we specify what we want the table to be called in the database that will store our books.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;private static $table_name = "Book";&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Then, we specify the properties that we want to store in this database table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'ISBN'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Description'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Text'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's left to describe is the relationships. We have a many-to-many relationship with authors, and a one-to-many relationship with reviews. We therefore have specify that a book can have many reviews with the &lt;code&gt;$has_many&lt;/code&gt;-property. We also have a many-to-many relationship with authors, which we will specify with the &lt;code&gt;$many_many&lt;/code&gt;-property.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#author-model"&gt;
  &lt;/a&gt;
  Author Model
&lt;/h4&gt;

&lt;p&gt;The Author model will be our way of describing an author, as well as its relation to books. We will se the opposite side of a many-to-many relation, and a couple of new nifty features of SilverStripe. Create the file &lt;code&gt;./app/src/Model/Author.php&lt;/code&gt; which has the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\ORM\DataObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;DataObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Author"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'GivenName'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'AdditionalName'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$belongs_many_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Books'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$summary_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;GivenName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GivenName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;FamilyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FamilyName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="cd"&gt;/**
     * @return string
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$familyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getSchema&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fieldSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fieldSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$familyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$familyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$familyName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; 

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again we see &lt;code&gt;private static $db&lt;/code&gt; where we define the author's properties. We also see that we have a many-to-many relationship with books, but this time we define it with &lt;code&gt;private static $belongs_many_many&lt;/code&gt;. The "belongs" here signifies that we probably will be interacting with books more often than authors, such as we create a book and attach a particular author to it.&lt;/p&gt;

&lt;p&gt;The we have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$summary_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;$summary_fields&lt;/code&gt;-property is used to define ehich fields are searchable as well as which will be used when presenting this model in a list on the CMS. We have specified that we want to show the author's given name and family name.&lt;/p&gt;

&lt;p&gt;Next up we are using a neat function that controls what values are permissable or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;GivenName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GivenName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;FamilyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FamilyName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;validate()&lt;/code&gt; function we are checking that we get any truthy values for &lt;code&gt;GivenName&lt;/code&gt; and &lt;code&gt;FamilyName&lt;/code&gt;. We allow &lt;code&gt;AdditionalName&lt;/code&gt; to be empty.&lt;/p&gt;

&lt;p&gt;Another function we get to see in our Author model is &lt;code&gt;getTitle()&lt;/code&gt;. This function is used to get a simple and readable name for models in the CMS. By default, this function would try to return a 'Name' or 'Title' field, failing that, it will return the ID of the model. As we have neither 'Name' or 'Title' we are instructing the CMS to use 'GivenName' and 'FamilyName' instead.&lt;/p&gt;

&lt;p&gt;This is all for the Author model, now let's move on to the Review model.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#review-model"&gt;
  &lt;/a&gt;
  Review Model
&lt;/h4&gt;

&lt;p&gt;We have one model left to describe. It's our Review model. We will again specify a table-name and fields for our model. This time we will also see our first opposite-side of a many-to-one relationship. There are also some nice features we are using, so let's see what we get with this. Create the file &lt;code&gt;./app/src/Model/Review.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\ORM\DataObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\Security\Member&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\Security\Security&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;DataObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Review"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Rating'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Int'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Review'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Text'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$has_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$owns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$summary_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getCurrentUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Rating must be between 1 and 5'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nc"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getCurrentUser&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Only you may be the reviewer of a book that YOU review.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We again see the use of &lt;code&gt;$table_name&lt;/code&gt; and &lt;code&gt;$db&lt;/code&gt; to define the fields of our model. What's new for us in this model is &lt;code&gt;$has_one&lt;/code&gt; and &lt;code&gt;$owns&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$has_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$owns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$has_one&lt;/code&gt; indicates that each Review has either a one-to-one or many-to-one relationship with each entry into its array. As we have specified in the Book model that it has a one-to-many relationship with the Review model, we know that there can be many reviews for each book. We also have a one-to-one relationship with the Member model, which means that each review is associated with a particular member. We have not specified for the Member model that it has a one-to-many relationship with the Review model, and we don't have to! We are using &lt;code&gt;$owns&lt;/code&gt; to specify that the Review model owns the relationship with the Member model. The same doesn't go for the Book model, as we have specified that it has a one-to-many relationship with the Review model, we have to have the reflected side of that relationship represented there. The reason we have &lt;code&gt;'Book'&lt;/code&gt; in the &lt;code&gt;$owns&lt;/code&gt; array is because we want to be able to control the relationship with these from within the Review model.&lt;/p&gt;

&lt;p&gt;Next up we see the use of a new function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getCurrentUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function is used to populate the default values for the Review model. We are accessing the &lt;code&gt;Member&lt;/code&gt; field and set it to the current logged in member. We also have to call the parent function to ensure that the default values are populated correctly.&lt;/p&gt;

&lt;p&gt;Next up we again see the use of the &lt;code&gt;validate()&lt;/code&gt; function where we check that the &lt;code&gt;Rating&lt;/code&gt; is between 1 and 5, and that the &lt;code&gt;Member&lt;/code&gt; is the current logged in member (if someone were to try anything different than the default).&lt;/p&gt;

&lt;p&gt;We have now set up all the models we need: Book, Author and Review. What we are going to do next is to setup a way to allow users to create new books and authors. We will do this by creating a new tab in the CMS, called "Review", where we can administrate authors, books and reviews. The way to do that is creating a class that will extend SilverStripe's &lt;code&gt;ModelAdmin&lt;/code&gt; class. We will see this next!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#administrating-our-models-with-modeladmin"&gt;
  &lt;/a&gt;
  Administrating our models with ModelAdmin
&lt;/h2&gt;

&lt;p&gt;What we are going to do now is creating an interface for our users to create all that is needed for reviewing a book. That is, we need the user to be able to create authors and books, and then be able to create reviews for those books. So here's what we will do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new folder in the &lt;code&gt;./app/src/&lt;/code&gt; directory called &lt;code&gt;Admin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new file in the &lt;code&gt;./app/src/Admin/&lt;/code&gt; directory called &lt;code&gt;ReviewAdmin.php&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The file &lt;code&gt;./app/src/Admin/ReviewAdmin.php&lt;/code&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Admin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Model\Author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Model\Book&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Model\Review&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\Admin\ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReviewAdmin&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;ModelAdmin&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$managed_models&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$url_segment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'reviews'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$menu_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Reviews'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$menu_icon_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'font-icon-book'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review what we are doing here. We are creating a new class called &lt;code&gt;ReviewAdmin&lt;/code&gt; that extends the &lt;code&gt;ModelAdmin&lt;/code&gt; class. We are telling the CMS that this class will manage the &lt;code&gt;Author&lt;/code&gt;, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Review&lt;/code&gt; models. We are also telling the CMS that this class will be available in the CMS under the tab called "Reviews", this tab will use an icon called &lt;code&gt;font-icon-book&lt;/code&gt;. This is quite powerful, as this is all we need to be able to start reviewing books.&lt;/p&gt;

&lt;p&gt;We have now set up our CMS for reviewing books. Let's update it to handle our models. We do this by visiting &lt;code&gt;127.0.0.1:8000/dev/build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-review"&gt;
  &lt;/a&gt;
  Let's Review
&lt;/h2&gt;

&lt;p&gt;We have set up our models and a way to administrate them in the CMS. Let's go reviewing a book! Go to &lt;code&gt;https://127.0.0.1:8000/admin&lt;/code&gt; and click on the tab called "Reviews". Start by clicking the tab for Author and start creating an author of a book you like to review (&lt;em&gt;Frank Herbert&lt;/em&gt;), then click the tab for books and create the book (&lt;em&gt;Dune&lt;/em&gt;). We are now setup for creating a Review. So here's how that looks like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create an Author&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3WqrNmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpjddzwety7azsnnf7uf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3WqrNmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpjddzwety7azsnnf7uf.gif" alt="Create an author" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Book&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek4vFAfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvdhubb0tvd5ifzjm1en.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek4vFAfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvdhubb0tvd5ifzjm1en.gif" alt="Create a book" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Review&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9stzDnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr0ce7pgwcgh0n2yp4pu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9stzDnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr0ce7pgwcgh0n2yp4pu.gif" alt="Create a review" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this article, but there is room left for improvements. We would like a page for viewing all the reviews on the frontend, and we would like to be able to just review whichever book we want without creating a new entity for each. Those improvements will be left for another day. Please feel free to comment below and let me know what you think.&lt;/p&gt;

</description>
      <category>php</category>
      <category>silverstripe</category>
    </item>
    <item>
      <title>Why Has React Js Become So Popular Among Specialists?</title>
      <author>Hitesh Chauhan</author>
      <pubDate>Thu, 18 Nov 2021 13:08:29 +0000</pubDate>
      <link>https://dev.to/hiteshtbi/why-has-react-js-become-so-popular-among-specialists-3ni7</link>
      <guid>https://dev.to/hiteshtbi/why-has-react-js-become-so-popular-among-specialists-3ni7</guid>
      <description>&lt;p&gt;React Js is a popular open-source JavaScript library that allows you to create stunning web apps with little effort and coding. React Js' main goal is to create engaging User Interfaces (UI) while also increasing the speed of apps.   A Facebook giant of social media has discovered the  React Js programming language for the developer to make the tasks easy. Furthermore, React Js can use Node to render on the server. Developers can also use React Native to create native apps. So, to develop your web application, get in touch with the React Js web development company who will help you in the growth of your business.&lt;/p&gt;

&lt;p&gt;The flexibility of the React Js comes from the fact that it uses single components, allowing the developer to break down complex UI components into smaller pieces. React Js is honored to be affiliated with top-tier companies such as Yahoo, BBC, Instagram, Netflix, PayPal, and many more. Perhaps to build similar web applications for your brand, you will need to &lt;a href="https://www.brihaspatitech.com/hire-react-js-developer"&gt;hire React js developer&lt;/a&gt; who is expertise in the specific industry.&lt;/p&gt;

&lt;h3&gt;Boon of React Js for the Web Development Process&lt;/h3&gt;

&lt;p&gt;According to the statistics, the United States is the most prevalent use of React js followed by other developed countries like Russia, China, the United Kingdom, and Japan. It depicts that most people are using React Js for their websites. React Js is a feasible option for professionals who are trying to find a simple programming language beyond Angular.  &lt;/p&gt;

&lt;p&gt;When the specialists were working with the other frameworks, they were obliged to do a lot of sophisticated coding when creating individual comments. React Js has fixed a lot of this problem, thanks to Facebook. The developers also have the option of reusing the code that speeds up the project execution. However, we have mentioned the traits of the React Js.&lt;/p&gt;

&lt;h3&gt;Easier to make adaptive Web applications with React Js&lt;/h3&gt;

&lt;p&gt;With the help of the React js web development company, you can get your dynamic online application. In fact, we know that it is awkward to develop an app with HTML strings and a difficult task that necessitates extensive coding. So, with React Js the problem is solved. React Js uses JSX syntax that further allows HTML quotes and HTML tag syntax to render the subcomponents. Moreover, it allows the mixing of the various components into a single time variable file.&lt;/p&gt;

&lt;h3&gt;Professionals can reuse the components&lt;/h3&gt;

&lt;p&gt;Reusing the components is a significant asset for web application development developers. The developer can repurpose the elements used to create other applications with the same functionality. Otherwise, you can hire react js developer to build an application with all the functionalities. It will not only save the efforts but also the time consumption to complete the project.&lt;/p&gt;

&lt;p&gt;However, the react js involves less coding so, there are fewer chances of getting errors. Furthermore, it will enhance the speed of the application and will get more customer retention.&lt;/p&gt;

&lt;h3&gt;Easy to learn&lt;/h3&gt;

&lt;p&gt;With the inception of the React Js, it is definitely a plus point for the developers. If you are new to this field and want to learn about the development process, then we think React Js is the one that is very easy to grasp as compared to the other frameworks. Once you start using the React Js, you will become familiar with the features and easily develop web applications. Otherwise, you can approach React Js web development company to get your web application developed in the ReactJs framework.&lt;/p&gt;

&lt;p&gt;However, it is not full-featured but, it is an open-source javascript script library with which you can easily execute every task. With the help of reactjs, you can easily build a high-responsive web application in a short period.&lt;/p&gt;

&lt;h3&gt;Growth of Community&lt;/h3&gt;

&lt;p&gt;Over time, the community of React js has grown widely and making it easier for novice developers to find a library for any task. The developer does not have to build on their own. Moreover, if you want to develop apps with React js and find problems, You can get extended support from Facebook.&lt;/p&gt;

&lt;h3&gt;Use of Practical Tools&lt;/h3&gt;

&lt;p&gt;Although, react js has earned a great reputation for having a useful collection of tools that makes the job of the developers easier. However, you will find React developer tools as a chrome developer add-on. You can easily examine the reactive component hierarchies along with the components of the present state and props.&lt;/p&gt;

&lt;h3&gt;Wind-Up&lt;/h3&gt;

&lt;p&gt;React Js has become so popular that it allows developers to create extremely engaging web apps and user interfaces in a short period. Also, it enables the specialist to reuse the components and build SPA with less coding. Hence, you can contact &lt;a href="https://www.brihaspatitech.com/react-js-development-company"&gt;React js web development company&lt;/a&gt; to create large-scale web apps. By collaborating with a leading agency, you can hire Reactjs developers to establish your full-featured web application at a very cost-effective price.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>discuss</category>
      <category>codequality</category>
    </item>
    <item>
      <title>What is QA Audit?</title>
      <author>OKQA</author>
      <pubDate>Thu, 18 Nov 2021 12:51:10 +0000</pubDate>
      <link>https://dev.to/okqa/what-is-qa-audit-2701</link>
      <guid>https://dev.to/okqa/what-is-qa-audit-2701</guid>
      <description>&lt;p&gt;QA audit is a great opportunity to supercharge your product. You get comprehensive testing along with unbiased feedback from an independent team of QA engineers on the product quality.&lt;/p&gt;

&lt;p&gt;QA audit includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deep QA analysis&lt;/li&gt;
&lt;li&gt;Identification of software vulnerabilities&lt;/li&gt;
&lt;li&gt;Recommendations and guidance for product quality improvement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interested? Let's discuss and start a new project together.&lt;br&gt;
&lt;a href="https://ok-qa.com/"&gt;https://ok-qa.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>okqa</category>
      <category>qa</category>
    </item>
    <item>
      <title>Top signs that you need a QA audit</title>
      <author>OKQA</author>
      <pubDate>Thu, 18 Nov 2021 12:50:17 +0000</pubDate>
      <link>https://dev.to/okqa/top-signs-that-you-need-a-qa-audit-1jb8</link>
      <guid>https://dev.to/okqa/top-signs-that-you-need-a-qa-audit-1jb8</guid>
      <description>&lt;p&gt;=&amp;gt; If you have hold-ups in time-to-market due to hot last-minute bug fixes.&lt;br&gt;
=&amp;gt; If you do not have a clear understanding of the product quality or its bottlenecks.&lt;br&gt;
=&amp;gt; If you want to get independent and unbiased feedback on the developed product quality and its compliance with stated business requirements.&lt;br&gt;
=&amp;gt; If the current QA processes do not allow to scale or keep up with the workload increase.&lt;/p&gt;

&lt;p&gt;One of the following situations sounds familiar? Let's see how a comprehensive QA audit can help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ok-qa.com/"&gt;https://ok-qa.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>qa</category>
      <category>okqa</category>
    </item>
    <item>
      <title>Async, refactoring and fewer bugs: Rust block expressions to the rescue</title>
      <author>Igor Petruk</author>
      <pubDate>Thu, 18 Nov 2021 12:48:54 +0000</pubDate>
      <link>https://dev.to/igorpetruk/async-refactoring-and-fewer-bugs-rust-block-expressions-to-the-rescue-ef0</link>
      <guid>https://dev.to/igorpetruk/async-refactoring-and-fewer-bugs-rust-block-expressions-to-the-rescue-ef0</guid>
      <description>&lt;p&gt;One of the pretty neat features of Rust I'd like to talk about is block expressions. This subtle feature does not receive enough justice as everyone is focused on more prominent language features. They help sealing unnecessary variables, cleaning up scope and have many other advantages. I’d like to go over a few examples. &lt;/p&gt;

&lt;p&gt;First of all, a little intro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nf"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;func5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the code could be divided into two blocks. The first declares multiple variables that are ultimately used to produce &lt;code&gt;c&lt;/code&gt; and then &lt;code&gt;c&lt;/code&gt; is used later in the code. This pattern is not fully artificial, it can be found in many relatively long functions. &lt;/p&gt;

&lt;p&gt;In Rust, blocks that are delimited by &lt;code&gt;{...}&lt;/code&gt; are expressions and are evaluated to a value. There is a way to rewrite this code using block expressions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nf"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;func5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code has some subtle differences to the first example. Blocks limit the scope of variables. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are internal to the block so they are not visible in the outer scope and &lt;code&gt;drop&lt;/code&gt; is applied to them at the block closing line. As simple as that. Using block expressions is a matter of code style that can be applied to suitable code. &lt;/p&gt;

&lt;p&gt;When applied, blocks bring some advantages that are not immediately obvious. Let's take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactoring"&gt;
  &lt;/a&gt;
  Refactoring
&lt;/h2&gt;

&lt;p&gt;Block expressions offer a good ground in preparation for future refactoring. When a block expression is used you can guarantee that internal variables are not used anywhere else in the outer function. This makes the code in the block ready to be easily turned into a standalone function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Make b&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// Well, let's imagine it is a lot of code to get here.&lt;/span&gt;
&lt;span class="c"&gt;// Use b&lt;/span&gt;
&lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay, let’s move that to a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;compute_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;compute_b&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c"&gt;// 100 lines below:&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Btw, important to know, a={}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/// Compilation error, uff!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy to fix probably, but it makes refactoring unpleasant, it does not satisfyingly click. Was it really important to use that a far below? Maybe yes, but often it does not matter and this code is a result of having scope hygiene as an afterthought. Block expressions help us limit the scope to just the right amount.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-boilerplate-variables-in-the-top-scope"&gt;
  &lt;/a&gt;
  No boilerplate variables in the top scope
&lt;/h2&gt;

&lt;p&gt;Let's up the game and see a &lt;a href="https://tokio.rs/"&gt;Tokio&lt;/a&gt; example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a_clone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c"&gt;//  I feel pain each time seeing this.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a_clone&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.to_lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"upper={:?}, lower={:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;a_clone&lt;/code&gt; variable is ugly, but we need it. Two closures need to own their own copies of &lt;code&gt;String&lt;/code&gt; (using &lt;code&gt;Arc&lt;/code&gt; does not fix it), so &lt;code&gt;a_clone&lt;/code&gt; is moved to the first closure, and original &lt;code&gt;a&lt;/code&gt; ends up in the second closure. Let’s attempt a block expression style:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.to_lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"upper={:?}, lower={:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does not look simpler than what we had before at a first glance, but this code has a few benefits. a can remain a and does not need a new name. The outer scope remains clean so you can easily distinguish top variables by the indentation of their &lt;code&gt;let&lt;/code&gt; and hide boilerplate variables to the second level of indentation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-unnecessary-mut-variables-in-the-top-scope"&gt;
  &lt;/a&gt;
  No unnecessary mut variables in the top scope
&lt;/h2&gt;

&lt;p&gt;Here is another example. PathBuf. PathBuf::push only works on mutable instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sub_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="nf"&gt;.ok_or_else&lt;/span&gt;&lt;span class="p"&gt;(||&lt;/span&gt; &lt;span class="nd"&gt;format_err!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot get dir"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;sub_dir&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;sub_dir&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="n"&gt;remains&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="nv"&gt;'t&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Rust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sub_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="nf"&gt;.ok_or_else&lt;/span&gt;&lt;span class="p"&gt;(||&lt;/span&gt; &lt;span class="nd"&gt;format_err!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot get dir"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;d&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The mutability of the variable is confined inside the initialization block.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fewer-bugs"&gt;
  &lt;/a&gt;
  Fewer bugs
&lt;/h2&gt;

&lt;p&gt;Now let’s use some Tokio channels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mpsc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sent {} from sender {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s check the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sent 0 from sender 0
Sent 0 from sender 1
Sent 1 from sender 0
Received 0
Received 0
Received 1
Sent 2 from sender 0
Sent 3 from sender 0
Sent 1 from sender 1
Received 2
Received 3
Received 1
Sent 2 from sender 1
Sent 3 from sender 1
Sent 4 from sender 0
Received 2
Received 4
Received 3
Sent 4 from sender 1
Received 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks correct… Nope, I’ve tricked you here. The text output is correct but the program does not exit! Can you spot the issue?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tx&lt;/code&gt; is being cloned in the loop, so each async co-routine has its own channel &lt;code&gt;Sender&lt;/code&gt;. The problem is that the original &lt;code&gt;tx&lt;/code&gt; remains existing until the end of the &lt;code&gt;main&lt;/code&gt; function, but listening on &lt;code&gt;rx&lt;/code&gt; is expected to only finish when all &lt;code&gt;tx&lt;/code&gt; are dropped.&lt;/p&gt;

&lt;p&gt;Indeed, &lt;code&gt;drop&lt;/code&gt; fixes the issue and the program successfully terminates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yuck, this is like calling &lt;code&gt;free()&lt;/code&gt; from C, otherwise it leaks. In my Rust. The Earl of Lemongrab screams “Unacceptable!”. &lt;/p&gt;

&lt;p&gt;Since this article is about block expressions (a.k.a. “a hammer”), every problem is a nail. Let’s try. Thankfully block expressions are about things not leaking in scope further than needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mpsc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sent {} from sender {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;rx&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works and terminates! It does not need a &lt;code&gt;drop&lt;/code&gt; call. Wait, but we have been promised that refactoring is easy with block expressions, let’s try that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;spawn_senders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Receiver&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mpsc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sent {} from sender {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rx&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;spawn_senders&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, it was. The block content is unchanged. We prepared for potential refactoring ahead of time and avoided a leak.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Longevity of objects can impact performance. I will show the most prominent example: lock guards.&lt;/p&gt;

&lt;p&gt;Let’s say we need to process data from two &lt;code&gt;RwLocks&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;slowly_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_millis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;slowly_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RwLock&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Instant&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_millis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c"&gt;// A bit late to be first to the lock...&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"Writing took 100ms! Wait... It took: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nn"&gt;Instant&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We run our program and it prints&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Result: 3
Writing took 100ms! Wait... It took: 1.000505585s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our writer was delayed a bit, processing took over and apparently locks were held for 1 second. The issue is caused by the fact that &lt;code&gt;slowly_process()&lt;/code&gt; runs with both read locks held. The read locks are implicit scope guarded locks and they are only dropped at the end of the function, when the references go out of scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a relatively well known pitfall with scope guarded locks, whether it is &lt;code&gt;defer&lt;/code&gt; from Go or &lt;code&gt;std::lock_guard&lt;/code&gt; from C++. If scope is used to lock and unlock the data, that scope must be minimal.&lt;/p&gt;

&lt;p&gt;I am not going to say “Let’s fix it with Rust block expressions”. Instead I will say “If we used blocked expressions from the beginning, this would not have happened”. Or simply “I told you so”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process_data_from_two_locks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RwLock&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nf"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Writing took 100ms! Wait... It took: 101.377406ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example has a shortcut. It was smooth because &lt;code&gt;i32&lt;/code&gt; is a &lt;code&gt;Copy&lt;/code&gt; type. Read locks in general only allow you to borrow the data inside while you hold the lock. To release it earlier you need to copy the data you need out of the block. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="py"&gt;.field&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Trade-off is yours to consider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I’ve shown benefits that such a shy Rust feature as block expressions can bring to your code. It should help you to keep your scope clean and can positively impact your programs at runtime.&lt;/p&gt;

&lt;p&gt;Goes without saying, every tool must be used sparingly. The cost of block expressions is the depth of indentation and if overused it can make your programs unreadable. Let’s apply our best judgment.&lt;/p&gt;

&lt;p&gt;I hope this was helpful. This is my first shot at writing articles at dev.to. I hope to keep this up.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Igor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unless otherwise noted, the code on this site is made available to you under the Apache 2.0 license. Copyright 2021 Google LLC.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>codequality</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why is it important to run an independent QA?</title>
      <author>OKQA</author>
      <pubDate>Thu, 18 Nov 2021 12:48:51 +0000</pubDate>
      <link>https://dev.to/okqa/why-is-it-important-to-run-an-independent-qa-191l</link>
      <guid>https://dev.to/okqa/why-is-it-important-to-run-an-independent-qa-191l</guid>
      <description>&lt;ul&gt;
&lt;li&gt;It enhances the quality of the final product with unbiased feedback aimed to meet customers' requirements, needs, and expectations.&lt;/li&gt;
&lt;li&gt;It provides a clear and objective report on critical vulnerabilities, the quality of the developed software, its compliance with expected performance metrics, and business goals.&lt;/li&gt;
&lt;li&gt;It gives you access to the necessary skills and expertise, on-demand QA resources well-versed with the latest tech trends.&lt;/li&gt;
&lt;li&gt;It helps to detect flaws and glitches the team that created the product might have missed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get independent and unbiased feedback on your product quality. A comprehensive QA audit is just a message away. &lt;a href="https://ok-qa.com/"&gt;https://ok-qa.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>qa</category>
      <category>okqa</category>
    </item>
    <item>
      <title>Introducing IPNS-Link</title>
      <author>Somajit Dey</author>
      <pubDate>Thu, 18 Nov 2021 12:41:31 +0000</pubDate>
      <link>https://dev.to/somajitdey/introducing-ipns-link-3bp2</link>
      <guid>https://dev.to/somajitdey/introducing-ipns-link-3bp2</guid>
      <description>&lt;p&gt;You have just built your first website or web-app, from the ground up. You configure and launch a local server - Apache, Nginx or Caddy - and point your browser to &lt;code&gt;http://localhost&lt;/code&gt;. And, IT WORKS! Your dream is right in front of you, a concept realized - a special moment that would remain with you forever! Awesome. &lt;/p&gt;

&lt;p&gt;Now, what's next? Of course, you want to share it with everybody out there, and you want it to last. So, first of all, you'd need a machine that would stay online round the clock. Your Raspberry Pi is perfect for the job. Great. Now, you'd need ... whoops, first roadblock: your ISP doesn't assign you a public IP address, i.e. your server is not reachable from the internet. No problem, you'd just use any free service such as &lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt;, &lt;a href="https://localhost.run"&gt;localhost.run&lt;/a&gt; or &lt;a href="https://getuplink.de"&gt;uplink&lt;/a&gt;. These services expose your site to the internet and provide an https-URL to access it. Everything works! Congrats.&lt;/p&gt;

&lt;p&gt;After your initial joy settles down, you realize the catch with these free plans. From time to time, you have to restart the exposure process and every time you do that the URL changes, the old URL becoming invalid. Your website has an ever-changing address on the internet. What good is that? Even if you were to pay them for a static URL, what would happen if and when the service shuts down?&lt;/p&gt;

&lt;p&gt;But, what other options do you have? You're a student, web-dev has just been an adventure and you can't really afford to get into all the hassles and costs involved in conventional web-hosting with your meagre pocket money and limited time. Are you really going to purchase a public IP or move your site to a premium hosting service? Are you prepared to spend on a domain name year after year and manage SSL setup for https?&lt;/p&gt;

&lt;p&gt;Despair not. &lt;a href="https://github.com/ipns-link/specs"&gt;IPNS-Link&lt;/a&gt; gives you the following alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--st3p9oOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlrbxxfsyt7u3kidp8mp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--st3p9oOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlrbxxfsyt7u3kidp8mp.jpg" alt="Illustration" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;IPNS-Link: Bob and Grace access Alice's localhost and a blocked website using a private and public gateway respectively.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Install and run a free and open-source app on your local server (the Pi in your case), following &lt;a href="https://github.com/ipns-link/ipns-link/blob/main/tutorials/QuickStart.md"&gt;this&lt;/a&gt; easy tutorial.&lt;/li&gt;
&lt;li&gt;The app would give you a long &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUID&lt;/a&gt;. You can make a &lt;a href="https://www.the-qrcode-generator.com/"&gt;QR code&lt;/a&gt; out of it for convenience.&lt;/li&gt;
&lt;li&gt;Send the UUID or QR code to all your friends and community.&lt;/li&gt;
&lt;li&gt;To access your site anytime, all they need to do is go to &lt;em&gt;any&lt;/em&gt; public IPNS-Link-Gateway, such as &lt;a href="https://www.ipns.live"&gt;ipns.live&lt;/a&gt; and put your UUID in there. Or, better yet, they can &lt;a href="https://github.com/ipns-link/ipns-link-gateway#self-hosting"&gt;run their own private gateway locally on their computer&lt;/a&gt;, and access your site directly, without any middle-man.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;That's it!&lt;/strong&gt; You distribute that UUID to your audience once and for all, and you're set. Even if you later port your site to a VPS or cloud hosting provider (e.g. AWS EC2 free-tier), your site can still be accessed using the same UUID. Even if you later get a domain name for your site and make it accessible from the main-stream web, the IPNS-Link exposure would continue to provide your users with decentralized routes to your site. This helps in case your domain is ever &lt;a href="https://ipns-link.medium.com/introducing-ipns-link-36a14c87a4aa"&gt;taken down or blocked&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;IPNS-Link uses the InterPlanetary File System (IPFS) network behind the scenes. &lt;a href="https://docs.ipfs.io/concepts/ipns/"&gt;IPNS&lt;/a&gt;, or Interplanetary Name System, is a subsystem built atop IPFS. Curious? Start &lt;a href="https://ipfs.io"&gt;here&lt;/a&gt; and work your way up to the &lt;a href="https://github.com/ipns-link/specs"&gt;IPNS-Link specs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like what IPNS-Link's doing? Spread the word (&lt;a href="https://ipns-link.medium.com/"&gt;here&lt;/a&gt;'s another blog). Usher in a micro-hosting movement for the decentralized web to learn, experiment, tinker, showcase and grow, worry-free. &lt;a href="https://github.com/ipns-link/contribute#join-the-community"&gt;Join the community&lt;/a&gt; and be a part. &lt;a href="https://github.com/ipns-link/contribute"&gt;Contribute&lt;/a&gt; any way you can.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Hosting!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webhosting</category>
      <category>ipfs</category>
      <category>domainless</category>
      <category>uncensorable</category>
    </item>
    <item>
      <title>From my point of Vue: Headless components</title>
      <author>Jesus Guerrero</author>
      <pubDate>Thu, 18 Nov 2021 12:40:59 +0000</pubDate>
      <link>https://dev.to/jesusantguerrero/from-my-point-of-vue-headless-components-2403</link>
      <guid>https://dev.to/jesusantguerrero/from-my-point-of-vue-headless-components-2403</guid>
      <description>&lt;p&gt;Hello there. This is the second article of the series "From my point of Vue", where we are going to discuss, explore, learn about some interesting topics from a Vue.js perspective.&lt;/p&gt;

&lt;p&gt;Today we are going to explore Headless components I would consider this a middle/advanced topic, so previous knowledge of Vue.js will be required to better grasp the examples, the concept though, is global and you can take advantage of this on any other framework.&lt;/p&gt;

&lt;p&gt;Without more delay, let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;While creating applications you will find yourself either doing the same components with the same logic many times with different User Interface(UI) or installing packages with an opinionated design that have a very different look from the design of your app. It shouldn't be so hard to customize simple components like inputs, labels, buttons but when it comes to complex components like Selects, Tabs, Step Wizards things might be a little harder if the component wasn't created with UI flexibility in mind, and here is where &lt;strong&gt;Headless components&lt;/strong&gt; come to the rescue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-headless-components"&gt;
  &lt;/a&gt;
  What are headless components?
&lt;/h2&gt;

&lt;p&gt;In plain words, headless components are the ones that handle the logic and behavior separated from the UI, giving the responsibility of how the component looks to the developer.&lt;/p&gt;

&lt;p&gt;The headless component can expose values and functions (state and controls) that will allow a child component to control certain parts of it and make UI decisions based on a state value. In other words, they are not attached to the UI but serves as support. &lt;/p&gt;

&lt;p&gt;This gives a huge advantage to share components across projects where their design are very different or to add variations of the same component: an upload component that the upload files as a list or carousel of images for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The concept is not new, it's been discussed and implemented for a couple of years, I first heard of it when &lt;a href="https://twitter.com/adamwathan"&gt;Adam Watham&lt;/a&gt;, creator of Tailwind CSS, and its team launched  &lt;a href="https://headlessui.dev/"&gt;Headless UI&lt;/a&gt; libraries like &lt;a href="https://github.com/downshift-js/downshift"&gt;downshift&lt;/a&gt; by &lt;a href="https://kentcdodds.com/"&gt;Kent Dodds&lt;/a&gt; also used this pattern, just to mention a couple of cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-headless-component"&gt;
  &lt;/a&gt;
  Building a headless component
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#requirements-and-approach"&gt;
  &lt;/a&gt;
  Requirements and approach
&lt;/h3&gt;

&lt;p&gt;To illustrate let's build a headless Rate component with the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The user can specify the &lt;code&gt;count&lt;/code&gt; of how many stars should display.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should expose the selected state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should expose the covered state.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To build this component we are going to use Tailwind CSS for styling, Vue 3 (&lt;a href="https://dev.to/jesusantguerrero/from-my-point-of-vue-composition-api-18de"&gt;the composition API&lt;/a&gt;) and codepen as a online editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h3&gt;

&lt;p&gt;Here is how we defined our main component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;
        &amp;lt;slot 
            v-for="current in range" 
            :key="current" 
            :current="current+1"
            :selected="isSelected(current+1)"
            :covered="isCovered(current+1)"
            :set-hovered="setHovered"
        &amp;gt;
            {{ current }}
        &amp;lt;/slot&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;modelValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// state&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hoveredIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isCovered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modelValue&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;hoveredIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isSelected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modelValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// state functions&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setHovered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;hoveredIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isSelected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isCovered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;setHovered&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain what is happening here we have three main blocks&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;range&lt;/code&gt;: which is an array from 0 to the value we pass count for this case &lt;code&gt;[0, 1, 2, 3, 4]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hoveredIndex&lt;/code&gt;: to store the last star we set the mouse over.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isSelected&lt;/code&gt;: will return true if the value passed is the current rate.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isCovered&lt;/code&gt;: will return true if the value passed is less than the current rate&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The controls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setHovered&lt;/code&gt;: will set the index of the start we put the mouse on.&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;the template&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; 
          &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"current in range"&lt;/span&gt; 
          &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"current"&lt;/span&gt; 
          &lt;span class="na"&gt;:current=&lt;/span&gt;&lt;span class="s"&gt;"current+1"&lt;/span&gt;
          &lt;span class="na"&gt;:selected=&lt;/span&gt;&lt;span class="s"&gt;"isSelected(current+1)"&lt;/span&gt;
          &lt;span class="na"&gt;:covered=&lt;/span&gt;&lt;span class="s"&gt;"isCovered(current+1)"&lt;/span&gt;
          &lt;span class="na"&gt;:set-hovered=&lt;/span&gt;&lt;span class="s"&gt;"setHovered"&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {{ current }}
      &lt;span class="nt"&gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are telling to this component: hey, render &lt;code&gt;n&lt;/code&gt; times whatever element I pass to you as a child and expose the current value, if is selected, if is covered and the function to set the hover.&lt;/p&gt;

&lt;p&gt;And this is exactly what we are going to do next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-our-component"&gt;
  &lt;/a&gt;
  Using our component
&lt;/h3&gt;

&lt;p&gt;Now we'll use our component to render 5 stars and gives some style with Tailwind gray text for the color of the stars but yellow when is covered or selected and changing the value when we click and the hoverIndex with the mouseover and mouseout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
  &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-4 mb-1 font-bold text-blue-900"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;How useful was the post?&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Rate&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;:count=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"space-x-2 cursor-pointer"&lt;/span&gt; &lt;span class="na"&gt;v-slot:default=&lt;/span&gt;&lt;span class="s"&gt;"{ selected, covered, current, setHovered }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
          &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"rating=current"&lt;/span&gt; 
          &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;mouseover=&lt;/span&gt;&lt;span class="s"&gt;"setHovered(current)"&lt;/span&gt;
          &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;mouseout=&lt;/span&gt;&lt;span class="s"&gt;"setHovered(0)"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-bold text-gray-400 transition transform cursor-pointer hover:text-yellow-400 hover:scale-110"&lt;/span&gt; 
          &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"[(selected || covered) ? 'text-yellow-500': 'text-gray-400']"&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
       &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-star"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Rate&amp;gt;&lt;/span&gt;
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrA0CBTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779541636/tfi2G5RmG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrA0CBTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779541636/tfi2G5RmG.png" alt="image.png" width="249" height="95"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-ui"&gt;
  &lt;/a&gt;
  Changing the UI
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#scale-rate"&gt;
  &lt;/a&gt;
  Scale rate
&lt;/h4&gt;

&lt;p&gt;To change to a scale rate for example we just need to change the UI without touching the logic anymore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="c"&gt;&amp;lt;!-- Scale Rate --&amp;gt;&lt;/span&gt;
...
  &lt;span class="nt"&gt;&amp;lt;Rate&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"scale"&lt;/span&gt; &lt;span class="na"&gt;:count=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"space-x-2 cursor-pointer"&lt;/span&gt; &lt;span class="na"&gt;v-slot:default=&lt;/span&gt;&lt;span class="s"&gt;"{ current, selected }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"scale=current"&lt;/span&gt; 
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-3 py-0.5 font-bold border border-gray-400 transition transform rounded-lg cursor-pointer hover:text-blue-400"&lt;/span&gt; 
         &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'text-blue-500 border-blue-500 shadow-md ring ring-blue-200': selected}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
      {{ current }}
     &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Rate&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEKKHcLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779699348/GbS-fP1KVX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEKKHcLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779699348/GbS-fP1KVX.png" alt="image.png" width="482" height="87"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#single-choice-list"&gt;
  &lt;/a&gt;
  Single choice list
&lt;/h4&gt;

&lt;p&gt;Another change this time with a vertical 3 choice list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="c"&gt;&amp;lt;!-- Single Choice List --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt;  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-4 mb-1 font-bold text-blue-900 mt-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;How often do this case happens to you?&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Rate&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"choice"&lt;/span&gt; &lt;span class="na"&gt;:count=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col space-y-2 cursor-pointer w-full"&lt;/span&gt; &lt;span class="na"&gt;v-slot:default=&lt;/span&gt;&lt;span class="s"&gt;"{ current, selected }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"choice=current"&lt;/span&gt; 
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block w-44 text-left px-3 py-0.5 font-bold border border-gray-400 transition transform rounded-lg cursor-pointer hover:text-gray-400"&lt;/span&gt; 
         &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{'text-gray-500 border-gray-500 shadow-md ring ring-gray-200': selected}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-900 text-white px-1.5 rounded-md py-0.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {{ letters[current - 1] }}
          &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          {{ choices[current - 1] }}
     &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/Rate&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iv3rnSXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779808838/ULqpRxD-d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iv3rnSXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628779808838/ULqpRxD-d.png" alt="image.png" width="391" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's what I call maximum flexibility 👌✨. As a last improvement, we could add a wrapper component to support those three use cases and pass a prop like &lt;code&gt;mode&lt;/code&gt; that accepts &lt;code&gt;rate&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;, and &lt;code&gt;choices&lt;/code&gt; once we have our look defined and write less code in the actual pages. I will let it to you, for practice.&lt;/p&gt;

&lt;p&gt;You can see the example code running in &lt;a href="https://codepen.io/freesgen/full/BaRGmYa"&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Headless components provide a way to reuse the logic of components but with the flexibility of customizing the UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They are good for sharing complex components across projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It probably requires wrapper components to use your customized UI across the app in contrast to a traditional component. That will be the cost of flexibility&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find it useful, let me know about any questions you have here or on &lt;a href="https://twitter.com/JesusntGuerrero"&gt;Twitter&lt;/a&gt;. thanks for reading and have a nice day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://headlessui.dev/"&gt;Headlessui&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/headless-rate-1erzy?file=/src/App.vue"&gt;A more advanced implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>When to use Conda and when to use Poetry?</title>
      <author>Oo Pai</author>
      <pubDate>Thu, 18 Nov 2021 12:36:57 +0000</pubDate>
      <link>https://dev.to/oo_pai_7a4947410fc4a570ec/when-to-use-conda-and-when-to-use-poetry-3gce</link>
      <guid>https://dev.to/oo_pai_7a4947410fc4a570ec/when-to-use-conda-and-when-to-use-poetry-3gce</guid>
      <description>&lt;p&gt;Hi.&lt;/p&gt;

&lt;p&gt;I've been fairly extensively using conda for a while now, ditching the old pip + virtualenv habbit of mine, since I'm collaborating with people on a common source code instead of freelancing by myself like the old days, and therefore this question has come to my mind and gone every few weeks.&lt;/p&gt;

&lt;p&gt;Have I chosen the correct dependency manager?&lt;/p&gt;

&lt;p&gt;A little background: Miniconda + conda environments (yml files) have been a good fit so far. Our projects are products focusing on datascience solutions, and we develop the data science microservice of the product. But we're still in the heavy exploration phase, and have not really stabilized the "MLOps" loop.&lt;/p&gt;

&lt;p&gt;So back to the question.&lt;/p&gt;

&lt;p&gt;I see many have advocated for the use of Poetry. Can someone explain to me the pros and cons of each approach? Why poetry seems so loved by many&lt;a href="https://bit.ly/3CtQDyL"&gt;,&lt;/a&gt; and when should someone consider switching from conda to poetry?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Caesar Cipher: A Simple Encryption System in PicoLisp</title>
      <author>Mia</author>
      <pubDate>Thu, 18 Nov 2021 12:30:49 +0000</pubDate>
      <link>https://dev.to/miatemma/caesar-cipher-a-simple-encryption-system-in-picolisp-37gd</link>
      <guid>https://dev.to/miatemma/caesar-cipher-a-simple-encryption-system-in-picolisp-37gd</guid>
      <description>&lt;p&gt;Welcome to the "Classic Algorithms" series. Here we will discuss code examples from the &lt;a href="//wwwo.rosettacode.org"&gt;Rosetta Code Project&lt;/a&gt; and explain step by step how the implementation works. Our first task will be the &lt;a href="https://rosettacode.org/wiki/Caesar_cipher#PicoLisp"&gt;"Caesar Cipher"&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;In this post, we will meet many of the &lt;a href="https://picolisp-blog.hashnode.dev/60-picolisp-functions-you-should-know-6-lists-and-strings"&gt;"List and Strings" functions&lt;/a&gt; that we know from the Beginner's-series.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-task"&gt;
  &lt;/a&gt;
  The Task
&lt;/h3&gt;

&lt;p&gt;If you want to try by yourself first, here is the task description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Implement a Caesar cipher, both encoding and decoding. The key is an integer from 1 to 25. This cipher rotates (either towards left or right) the letters of the alphabet (A to Z). The encoding replaces each letter with the 1st to 25th next letter in the alphabet (wrapping Z to A). So key 2 encrypts "HI" to "JK", but key 20 encrypts "HI" to "BC". &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#how-the-caesar-cipher-encryption-works"&gt;
  &lt;/a&gt;
  How the Caesar Cipher encryption works
&lt;/h3&gt;

&lt;p&gt;If you ever studied cryptographic algorithms, you will probably have come across the Caesar Cipher as it is easy to understand (and easy to break, too). &lt;/p&gt;

&lt;p&gt;It is named after the Roman emperor Julius Caesar as there is some evidence that he used this encryption system to transport secret messages. For more historical background, &lt;a href="https://en.wikipedia.org/wiki/Caesar_cipher"&gt;see here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yT0sEo0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629990963793/YfFe0Lo0X.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yT0sEo0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629990963793/YfFe0Lo0X.jpeg" alt="caesarstatue.jpg" width="880" height="713"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is that every letter in the alphabet is shifted by a fixed number of steps, which is the "encoding key". For example, if the key is 2, then you write "C" for "A", "D" for "B", "E" for "C" and so on. At the end of the alphabet, "Y" becomes "A" and "Z" becomes "B". Obviously it is not a very safe encryption because it's easy to crack using statistical methods, or by checking all possible shifts.&lt;/p&gt;

&lt;p&gt;Nevertheless, the implementation of the Caesar Cipher in PicoLisp is a nice example to start our Rosetta code series. It illustrates some interesting concepts such as &lt;strong&gt;circular lists&lt;/strong&gt;, &lt;strong&gt;mapping&lt;/strong&gt;, and &lt;strong&gt;anonymous functions&lt;/strong&gt;. Many of the functions were already introduced in the "PicoLisp for Beginners" series, and the code is elegant and short.&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#an-intuitive-approach-to-the-algorithm"&gt;
  &lt;/a&gt;
  An intuitive approach to the algorithm
&lt;/h3&gt;

&lt;p&gt;How should we implement this algorithm? It is clear that the &lt;strong&gt;order&lt;/strong&gt; of the letters is very important, and it needs to be &lt;strong&gt;circular&lt;/strong&gt; since the end of the alphabet should be mapped to its beginning. The picture from the cover sheet illustrates the principle very well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1uTopI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629977609118/H7XmVUcKg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1uTopI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629977609118/H7XmVUcKg.jpeg" alt="caesar.jpg" width="800" height="800"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The inner circle is the plain character, the outer circle is the encryption. Let's try to implement this in PicoLisp now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-creating-the-alphabet-list"&gt;
  &lt;/a&gt;
  Step 1 - Creating the alphabet list
&lt;/h3&gt;

&lt;p&gt;The first thing we need is the list of all alphabet characters. One main idea is to make the list "circular", i. e. after "Z" comes "A" (like the tool on the pic above). In PicoLisp, this can be done by the &lt;code&gt;.&lt;/code&gt; symbol, for example &lt;code&gt;(1 2 3 .)&lt;/code&gt; or using the &lt;code&gt;circ&lt;/code&gt; function. Let's form the list:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The straightforward way&lt;/strong&gt;: Of course, we can just type each letter by hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(setq *Letters '("A" "B" "C" ... "Z" .))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The elegent way&lt;/strong&gt;: The solution above is quite error-prone. A better way would be to use &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII encoding&lt;/a&gt; to create this list. Uppercase letters are encoded by the numbers 65 to 90. So let's do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a list from 65 to 90 using &lt;code&gt;(range 65 90)&lt;/code&gt; &lt;strong&gt;--&amp;gt; (65 66 67 ... 90)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Numbers can be converted to characters by &lt;code&gt;char&lt;/code&gt;, for example (char 65) = A. Let's apply the &lt;code&gt;char&lt;/code&gt; function to our list with &lt;code&gt;(mapcar char (range 65 90))&lt;/code&gt;. &lt;strong&gt;--&amp;gt; ("A" "B" "C" ... "Z").&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Now make the list circular by applying the &lt;code&gt;circ&lt;/code&gt; function to each letter. &lt;code&gt;(apply circ (mapcar char(...)))&lt;/code&gt;
&lt;strong&gt;--&amp;gt; ("A" "B" "C" ... "Z" .)&lt;/strong&gt;, where &lt;code&gt;.&lt;/code&gt; shows that after "Z" comes "A" again.&lt;/li&gt;
&lt;li&gt;Set this list to the global variable &lt;code&gt;*Letters&lt;/code&gt; (with uppercase and asterisk according to naming convention).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:(setq *Letters (apply circ (mapcar char (range 65 90))))
-&amp;gt; ("A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" .)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-2-encoding-a-single-character"&gt;
  &lt;/a&gt;
  Step 2 - Encoding a single character
&lt;/h3&gt;

&lt;p&gt;Let's try to get the string we want to encode. As first step, let's convert all letters to uppercase  with &lt;code&gt;uppc&lt;/code&gt; and use the &lt;code&gt;chop&lt;/code&gt; function to transform the string into a list of characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:(chop (uppc "in vino veritas")) 
-&amp;gt;("I" "N" " " "V" "I" "N" "O" " " "V" "E" "R" "I" "T" "A" "S")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to encode these letters, we need to create a function that takes &lt;strong&gt;any character and returns the encoded one&lt;/strong&gt;. Let's go through it step by step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First we check if the character is within the &lt;code&gt;*Letters&lt;/code&gt; list by using the &lt;code&gt;member&lt;/code&gt; function, which returns the list &lt;strong&gt;starting from that character&lt;/strong&gt; if it exists, otherwise &lt;code&gt;NIL&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (member "U" *Letters)                                   
-&amp;gt; ("U" "V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" .)
: (member "D" *Letters)
-&amp;gt; ("D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "A" "B" "C" .)
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As you can see, the &lt;code&gt;member&lt;/code&gt; function returns the &lt;code&gt;*Letters&lt;/code&gt; list starting at the respective letter. Now we want to get the &lt;strong&gt;encoded letter&lt;/strong&gt;, which is &lt;strong&gt;shifted in position by the encryption code &lt;code&gt;key&lt;/code&gt;&lt;/strong&gt;. In order to shift the list, we use the &lt;code&gt;nth&lt;/code&gt; function, which takes a list and integer value and returns the tail of the list starting from that value:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:(nth (member "U" *Letters) 2))
-&amp;gt; ("V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" .)
:(nth (member "D" *Letters) 6)
-&amp;gt; ("I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" .)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;It's getting close, but when we check the list returned by &lt;code&gt;nth&lt;/code&gt;, we actually want the &lt;strong&gt;second item in the shifted list&lt;/strong&gt;, because the &lt;code&gt;nth&lt;/code&gt; function is only shifting by &lt;code&gt;(key -1)&lt;/code&gt; positions. To get this second item, we use &lt;code&gt;cadr&lt;/code&gt;, which is short for &lt;code&gt;cdr&lt;/code&gt; and &lt;code&gt;car&lt;/code&gt;. (Re-read &lt;a href="https://picolisp-blog.hashnode.dev/60-picolisp-functions-you-should-know-6-lists-and-strings"&gt;this post&lt;/a&gt; if you're not sure what &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; mean).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (cadr (nth (member "U" *Letters) 2)))
-&amp;gt; "W"
: (cadr (nth (member "D" *Letters) 6))
-&amp;gt; "J"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-3-bringing-it-together"&gt;
  &lt;/a&gt;
  Step 3 - Bringing it together
&lt;/h3&gt;

&lt;p&gt;In Step 1 we &lt;strong&gt;chopped up the input string to a list&lt;/strong&gt;, and in Step 2 we managed to &lt;strong&gt;encode each of these letters separately&lt;/strong&gt;. Now let's bring it together.&lt;/p&gt;

&lt;p&gt;We want to take each letter of the input string and &lt;strong&gt;apply our encoding function on each single element&lt;/strong&gt;, which is a typical application for &lt;code&gt;mapcar&lt;/code&gt;. &lt;code&gt;mapcar&lt;/code&gt; takes a function and a list as arguments. But what is our function? Obviously, we could define it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(de encodeChar (C)
    (cadr (nth (member C *Letters) Key))) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and hand it over to &lt;code&gt;mapcar&lt;/code&gt;. But actually we need the encoding function only once, so it might be a better option (in terms of structure and readability) to define it as &lt;strong&gt;anonymous function&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As we might remember from the beginner's tutorial, the syntax for anonymous functions is " '((args) ( function )) ", so we can define it as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:'((C) (cadr (nth (member C *Letters) Key)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;C&lt;/code&gt; is the character to be encoded.&lt;/p&gt;




&lt;p&gt;Now let's create and test our &lt;code&gt;mapcar&lt;/code&gt; anonymous function call on the chopped list, with &lt;code&gt;key = 3&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (setq TestStr (chop (uppc "in vino veritas")))
-&amp;gt; ("I" "N" " " "V" "I" "N" "O" " " "V" "E" "R" "I" "T" "A" "S")
: (mapcar '((C) (cadr (nth (member C *Letters) 3))) TestStr)
-&amp;gt; ("L" "Q" NIL "Y" "L" "Q" "R" NIL "Y" "H" "U" "L" "W" "D" "V")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This already looks quite promising: at least the character shifting looks correct now. &lt;/p&gt;

&lt;p&gt;Now as last step, we need to convert these single letters back to a string, which we can do by using the &lt;code&gt;pack&lt;/code&gt; function. We wrap it around our &lt;code&gt;mapcar&lt;/code&gt; function and get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (pack (mapcar '((C) (cadr (nth (member C *Letters) 3))) TestStr))
-&amp;gt; "WKLVLVDWHVW"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we "automatically" also got rid of all the &lt;code&gt;NIL&lt;/code&gt; values that were created by whitespaces and punctuations.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-4-finishing-the-script"&gt;
  &lt;/a&gt;
  Step 4 - Finishing the script
&lt;/h3&gt;

&lt;p&gt;Let's now wrap it up in a small script. We want to call it using the following syntax: &lt;code&gt;./caesar-cipher.l &amp;lt;plain-string&amp;gt; &amp;lt;key&amp;gt;&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./caesar-cipher.l "In vino veritas" 7
PUCPUVCLYPAHZ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we learned in the &lt;a href="https://picolisp-blog.hashnode.dev/a-very-first-picolisp-program"&gt;"A very first PicoLisp Program"&lt;/a&gt;-post, we can retrieve the two parameters &lt;code&gt;&amp;lt;plain-string&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; using &lt;code&gt;opt&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;opt&lt;/code&gt; converts to &lt;strong&gt;string&lt;/strong&gt;, so we need to use the function &lt;code&gt;format&lt;/code&gt; to &lt;strong&gt;convert the key from string to integer&lt;/strong&gt;, and store both in the global variables &lt;code&gt;*PlainStr&lt;/code&gt; and &lt;code&gt;*Key&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#! /usr/bin/picolisp /usr/lib/picolisp/lib.l

# first command line parameter: plain string
(setq *PlainStr (opt))

# second command line parameter: key (integer)
(setq *Key (format (opt)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also we need to define the global &lt;code&gt;*Letters&lt;/code&gt; list and f course our encoding function &lt;code&gt;caesar&lt;/code&gt; that takes a string and a key as parameters and returns the encoded string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(setq *Letters (apply circ (mapcar char (range 65 90))))

(de caesar (Str Key)
   (pack
      (mapcar '((C) (cadr (nth (member C *Letters) Key)))
         (chop (uppc Str)) ) ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then finally, we call the &lt;code&gt;caesar&lt;/code&gt; function with the command line parameters and print out the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(prinl (caesar *PlainStr *Key))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we exit the interpreter with &lt;code&gt;bye&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finished!&lt;/p&gt;




&lt;p&gt;The final script can be downloaded from &lt;a href="https://gitlab.com/picolisp-blog/single-plage-scripts/-/blob/main/rosetta/caesar-cipher.l"&gt;here&lt;/a&gt;. Steps: Download the script, for example using curl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl https://gitlab.com/picolisp-blog/single-plage-scripts/-/raw/main/rosetta/caesar-cipher.l -o caesar-cipher.l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make it executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ chmod +x caesar-cipher.l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./caesar-cipher.l "In vino veritas" 7
PUCPUVCLYPAHZ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;This was the first part of the "Rosetta code" series, I hope you liked it. &lt;/p&gt;

&lt;p&gt;Tomorrow we will have a look a closer look at the &lt;code&gt;set&lt;/code&gt; function in PicoLisp, as preparation for the &lt;a href="https://rosettacode.org/wiki/100_doors"&gt;"100 Doors Task"&lt;/a&gt; from the Rosetta Code.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cover: &lt;a href="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/CipherDisk2000.jpg/800px-CipherDisk2000.jpg"&gt;https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/CipherDisk2000.jpg/800px-CipherDisk2000.jpg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rosettacode.org/wiki/Caesar_cipher#PicoLisp"&gt;https://rosettacode.org/wiki/Caesar_cipher#PicoLisp&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://software-lab.de/doc/index.html"&gt;https://software-lab.de/doc/index.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>picolisp</category>
      <category>lisp</category>
      <category>cryptography</category>
      <category>functional</category>
    </item>
  </channel>
</rss>
