<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Rename an AWS S3 Bucket in Terraform</title>
      <author>Kuba Martin</author>
      <pubDate>Tue, 16 Nov 2021 23:00:05 +0000</pubDate>
      <link>https://dev.to/spacelift/how-to-rename-an-aws-s3-bucket-in-terraform-step-by-step-3cb4</link>
      <guid>https://dev.to/spacelift/how-to-rename-an-aws-s3-bucket-in-terraform-step-by-step-3cb4</guid>
      <description>&lt;p&gt;Occasionally you might want to rename an AWS S3 bucket you are managing with Terraform. However, names of S3 buckets are immutable, which means you can’t change them directly. If you tried, Terraform would destroy the old one and then create a new one, resulting in data loss.&lt;/p&gt;

&lt;p&gt;To avoid this, you need to &lt;strong&gt;create a new bucket with the desired name&lt;/strong&gt;, move the data over to it, make the relevant Terraform state replacements, and finally delete the old bucket.&lt;/p&gt;

&lt;p&gt;In this post you will learn how to rename an AWS S3 bucket in Terraform. First things first – let’s say you have a bucket definition in your Terraform code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bucket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you want to change the name of the bucket to &lt;code&gt;new-name&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-create-the-new-bucket"&gt;
  &lt;/a&gt;
  Step 1 - Create the new bucket
&lt;/h1&gt;

&lt;p&gt;Firstly, we’ll need to create a new bucket. You can do this using the AWS CLI or the &lt;a href="https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/console-help-gsg.pdf"&gt;AWS console&lt;/a&gt;. Just make sure to properly replicate the old settings, especially the ACL (so that your data doesn’t accidentally become public).&lt;/p&gt;

&lt;p&gt;Now, we can copy all the files from the old to the new bucket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//old-name s3://new-name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-modify-the-state"&gt;
  &lt;/a&gt;
  Step 2 - Modify the State
&lt;/h1&gt;

&lt;p&gt;Now that we have our new bucket, we need to remove the old one from our Terraform state and import the new one in its place:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;terraform&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt;
&lt;span class="nx"&gt;terraform&lt;/span&gt; &lt;span class="nx"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt; &lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you tried to run Terraform now, it would show you that there’s drift—and yes, there would be! We’ve just imported a bucket into a resource which still has &lt;code&gt;old-name&lt;/code&gt; in the config.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-change-the-code"&gt;
  &lt;/a&gt;
  Step 3 - Change the Code
&lt;/h1&gt;

&lt;p&gt;That’s why we now have to finally change the name of the bucket in our Terraform config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;aws_s3_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;my_bucket&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bucket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run Terraform now, you’ll see that there are no changes to be made.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-do-a-cleanup"&gt;
  &lt;/a&gt;
  Step 4 - Do a Cleanup
&lt;/h1&gt;

&lt;p&gt;If you want to, you can now delete your old bucket using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="nx"&gt;rm&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//old-name --recursive&lt;/span&gt;
&lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="nx"&gt;rb&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//old-name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure all the data has successfully been copied over to the new bucket.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-5-run-the-above-arbitrary-aws-cli-commands-if-youre-using-spacelift"&gt;
  &lt;/a&gt;
  Step 5 - Run the Above Arbitrary AWS CLI Commands if You’re Using Spacelift
&lt;/h1&gt;

&lt;p&gt;If you’re using Spacelift then you can use &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;tasks&lt;/a&gt; to run the above arbitrary AWS CLI commands. The default runner image already contains the AWS CLI, so no changes are necessary there.&lt;/p&gt;

&lt;p&gt;One additional thing you can do is &lt;a href="https://docs.spacelift.io/concepts/stack/stack-locking"&gt;lock the Stack&lt;/a&gt; while you’re running the migration, this way nobody will accidentally run Terraform or make any other changes while you’re moving the data.&lt;/p&gt;

&lt;p&gt;And that’s it! If you have any questions about how to rename an AWS S3 bucket, drop me a line in the comments and I’ll get back to you straight away.&lt;/p&gt;

&lt;p&gt;You will find more Terraform Tutorials on our website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/importing-exisiting-infrastructure-into-terraform"&gt;How to Import Existing Infrastructure into Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/what-are-terraform-modules-and-how-do-they-work"&gt;How to Use Terraform Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/how-to-use-terraform-variables"&gt;How to Use Terraform Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/terraform-functions-expressions-loops"&gt;How to Use Terraform Functions, Expression and Loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/how-to-destroy-terraform-resources"&gt;How to Destroy Resources from Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/terraform-version-upgrade"&gt;How to Upgrade Terraform to the Latest Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacelift.io/blog/terraform-ansible"&gt;Terraform vs. Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>terraform</category>
      <category>aws</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to style markdown with Tailwind CSS</title>
      <author>Oz Ertas</author>
      <pubDate>Tue, 16 Nov 2021 22:51:58 +0000</pubDate>
      <link>https://dev.to/oerts/how-to-style-markdown-with-tailwind-css-12m9</link>
      <guid>https://dev.to/oerts/how-to-style-markdown-with-tailwind-css-12m9</guid>
      <description>&lt;p&gt;Tailwind CSS comes with "an opinionated set of base styles" called Preflight. A helpful CSS reset built on top of &lt;a href="https://github.com/sindresorhus/modern-normalize"&gt;modern-normalize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Margins, headings, lists, and many others get stripped from their defaults. Thus, achieving cross-browser consistency and an easier adaptation of your design system.&lt;/p&gt;

&lt;p&gt;It all sounds helpful, until you need those defaults to style a markdown post.&lt;/p&gt;

&lt;p&gt;In comes &lt;code&gt;@tailwindcss/typography&lt;/code&gt;, a plugin with sensible typographic styles. It adds a set of &lt;code&gt;prose&lt;/code&gt; classes to style content blocks like the one you are reading.&lt;/p&gt;

&lt;p&gt;You can install it via npm or yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Using npm
npm install @tailwindcss/typography

# Using Yarn
yarn add @tailwindcss/typography
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the plugin to your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tailwindcss/typography&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, you can use the &lt;code&gt;prose&lt;/code&gt; class to apply the markdown styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prose lg:prose-xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to Mars!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Although life on Mars is perfect in every single way, you might have some questions.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Of course there’s air! Just don’t breathe it. And, with the crazy gravity situation, everyone can dunk!
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information about the &lt;code&gt;prose&lt;/code&gt; class and its modifiers can be found at the &lt;a href="https://github.com/tailwindlabs/tailwindcss-typography"&gt;repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why is `this` a pointer and not an rvalue reference in C++?</title>
      <author>Calin Baenen</author>
      <pubDate>Tue, 16 Nov 2021 22:32:46 +0000</pubDate>
      <link>https://dev.to/baenencalin/why-is-this-a-pointer-and-not-an-rvalue-reference-in-c-33a7</link>
      <guid>https://dev.to/baenencalin/why-is-this-a-pointer-and-not-an-rvalue-reference-in-c-33a7</guid>
      <description>&lt;p&gt;What was the thought behind making &lt;code&gt;this&lt;/code&gt; a pointer of &lt;code&gt;T&lt;/code&gt;, instead of &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;?&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>discuss</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>The newest Docker VS Code extension feature you’re not using</title>
      <author>Uche Nkadi</author>
      <pubDate>Tue, 16 Nov 2021 21:54:19 +0000</pubDate>
      <link>https://dev.to/uche_nkadi/the-newest-docker-vs-code-extension-feature-youre-not-using-68n</link>
      <guid>https://dev.to/uche_nkadi/the-newest-docker-vs-code-extension-feature-youre-not-using-68n</guid>
      <description>&lt;p&gt;As Docker usage has grown, Docker Compose has become the leader in running multi-service applications locally. Unfortunately, as your application expands and more services must communicate, we’ve found authoring these Compose files can become arduous, time consuming, and mistake prone. We want to make writing Compose files with volumes, ports, and multiple services much easier. &lt;/p&gt;

&lt;p&gt;Today, we’d like to announce the Docker Compose Language Service in the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker"&gt;Docker Extension for VS Code&lt;/a&gt;. That’s right, the Docker Extension will now provide Docker Compose files with IntelliSense, Tooltips, and syntax validation. Here are a few of the incoming features in our 1.18 release: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IntelliSense tab completions (i.e. volumes, ports)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQUP7Vwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx20ekb3zpw0gsn5d9fn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQUP7Vwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx20ekb3zpw0gsn5d9fn.gif" alt="Gif showing tab completions" width="880" height="589"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tooltips for Compose keywords (i.e. services, image)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPi1dPng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26ed2z6qx3it34vc54l6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPi1dPng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26ed2z6qx3it34vc54l6.png" alt="Gif showing a tooltip from hovering" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right-click to format a Compose file (Shift + Alt + F) &lt;/li&gt;
&lt;li&gt;YAML Syntax Validation &lt;/li&gt;
&lt;li&gt;Hyperlinks for Docker Images &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our 1.18 release, this feature will be on by default, so we hope you enjoy it!&lt;/p&gt;

&lt;p&gt;There are more improvements to come! Stay tuned for these features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More tab completions&lt;/li&gt;
&lt;li&gt;Docker Compose schema validation &lt;/li&gt;
&lt;li&gt;… and much more! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We love your feedback! If you have any comments or ideas on our Compose language support, feel free to submit an issue to the &lt;a href="https://github.com/microsoft/compose-language-service"&gt;Compose Language Service Repo&lt;/a&gt; or the &lt;a href="https://github.com/microsoft/vscode-docker/issues"&gt;VS Code Docker Repo&lt;/a&gt; for general feedback. &lt;/p&gt;

</description>
      <category>docker</category>
      <category>vscode</category>
      <category>microservices</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Going Cloud Native - The problem with two-speed-IT</title>
      <author>David Schmitz</author>
      <pubDate>Tue, 16 Nov 2021 21:06:18 +0000</pubDate>
      <link>https://dev.to/koenighotze/going-cloud-native-the-problem-with-two-speed-it-1k0e</link>
      <guid>https://dev.to/koenighotze/going-cloud-native-the-problem-with-two-speed-it-1k0e</guid>
      <description>&lt;p&gt;At the beginning of November a client asked me to join their Cloud Panel and talk on the topic of cloud transformation. You can find the slides on Slideshare. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/2hcs5MLvQoNEWx" alt="2hcs5MLvQoNEWx on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;This article is based on that presentation. So, let's talk about cloud native development and its impact on organisations. Most of my clients are large insurance or financial companies. And the are considering a migration to the cloud. And they are asking for help. The discussions are either based on FUD (fear uncertainty and doubt) or snake-oil.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VrpnJOf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wedxxs0taa97v5sbaz0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VrpnJOf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wedxxs0taa97v5sbaz0u.png" alt="Snake-oil vendor" width="804" height="720"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is not surprising that the truth lies in between.&lt;/p&gt;

&lt;p&gt;This is the first of a two part series. Each introduces things we learnt while moving companies into the public cloud.  I focus on culture and organisation. Not because tech is boring. Rather most discussions focus on technology and architecture without ever touching the more social aspects.&lt;/p&gt;

&lt;p&gt;Keep in mind that what worked for me and for my clients may not work for you. Context matters.&lt;/p&gt;

&lt;p&gt;This first article probes the questions around the organisation and effective collaboration. The follow up text looks at the mythical platform team and its implications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#efficiency-the-reason-to-adopt-the-cloud"&gt;
  &lt;/a&gt;
  Efficiency - the reason to adopt the cloud
&lt;/h2&gt;

&lt;p&gt;Before we go into the details let's talk about why we migrate into the cloud.&lt;/p&gt;

&lt;p&gt;In a nutshell, it's all about &lt;em&gt;efficiency&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yWHN5BIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slnoyz5m1r6li5ogg1hy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yWHN5BIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slnoyz5m1r6li5ogg1hy.jpg" alt="Photo by Thomas Kelley on Unsplash" width="600" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to be efficient because we &lt;em&gt;do not&lt;/em&gt; know what our customers want. Nobody can specify in detail what is needed. Nobody can predict the future and especially our clients cannot. They don't even know what they want until they see it.&lt;/p&gt;

&lt;p&gt;That means the only way to build the correct products, is to implement our ideas as fast as possible and to iterate on them. Improving our products step-by-step. &lt;/p&gt;

&lt;p&gt;This leads to the conclusion that our businesses are only as efficient as our IT is. No longer can we treat our IT as a cost-centre. We have to move IT into the heart of our organisation, if we want to be and stay competitive.&lt;/p&gt;

&lt;p&gt;And this is where the public cloud enters the game. &lt;/p&gt;

&lt;p&gt;The cloud allows us to focus on the essentials. We use &lt;a href="https://azure.microsoft.com/en-us/overview/what-is-saas/"&gt;SaaS&lt;/a&gt; where possible. We do not build our own load-balancers or start hosting a SQL database ourselves. We replace hand-crafted assets with cloud products. E.g., use &lt;a href="https://cloud.google.com/sql"&gt;Google’s Cloud SQL&lt;/a&gt; instead of our own &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; instance. This reduces complexity and allows us to put more energy into our products. We are more efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#marie-kondo-your-it"&gt;
  &lt;/a&gt;
  &lt;em&gt;Marie Kondo&lt;/em&gt; your IT
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://konmari.com/"&gt;Marie Kondo&lt;/a&gt; is a Japanese organising consultant. She specializes in tidying up and reducing superfluous clutter. We can do the same to our IT. There are many strategies for transforming our IT to the cloud. The following four approaches are pretty common:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTjTv65Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnalzem459ifxxoob7zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTjTv65Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnalzem459ifxxoob7zx.png" alt="Options for cloud transformation" width="686" height="1470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lift-and-Shift&lt;/strong&gt;: we take an asset and host it more or less 1:1 onto the cloud. E.g., taking a monolithic &lt;a href="https://www.oracle.com/java/technologies/java-ee-glance.html"&gt;JEE&lt;/a&gt; application and move it to &lt;a href="https://cloud.google.com/compute"&gt;Google Cloud Compute VMs&lt;/a&gt;. We get rid of the underlying operations components and machines. But do not enjoy other cloud capabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8rFFMcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfzx2eyf7325whoncr81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8rFFMcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfzx2eyf7325whoncr81.png" alt="Lift-and-Shift" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Re-architect&lt;/strong&gt;: The prime example in every microservice book. We take an existing asset, such as a monolithic &lt;a href="https://www.oracle.com/java/technologies/java-ee-glance.html"&gt;JEE&lt;/a&gt; application, and redesign it from the ground up. Effectively replacing it for example with a series of new cloud-native microservices. We can use all cloud capabilities, because we are rebuilding and redesigning everything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9EkjnCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uj8bakcaksw5k33yk1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9EkjnCZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uj8bakcaksw5k33yk1b.png" alt="Re-architect" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retire&lt;/strong&gt;: My favourite. We identify assets and processes that we and our customers no longer need. We remove these assets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LE-DwvnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fbzl7sje7rmhvjahedb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LE-DwvnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fbzl7sje7rmhvjahedb.png" alt="Retire" width="880" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Replace&lt;/strong&gt;: Remember efficiency? "Replace" is all about efficiency. We replace something we took care of ourselves and use a SaaS offering instead. One example could be to replace a self-hosted Kafka with a managed version, e.g., using &lt;a href="https://aws.amazon.com/de/msk/"&gt;AWS MSK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2dwuG8J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n78007zsehwn1ywjhvof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2dwuG8J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n78007zsehwn1ywjhvof.png" alt="Replace" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The effort and efficiency of each approach depends on the strategy for moving into cloud. “Lift-and-Shift” might be the best approach, if the goal is replacing a datacenter. If we want to reduce complexity and use SaaS as much as possible, then “Replace” would be the appropriate approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hybrid-landscape"&gt;
  &lt;/a&gt;
  The hybrid landscape
&lt;/h2&gt;

&lt;p&gt;In the end, we will end up with a hybrid architecture. We build some assets for the cloud and some assets will stay on-premise, at least for some time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXR0i6vZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4boaoj483gbk0c1oaeq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXR0i6vZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4boaoj483gbk0c1oaeq2.png" alt="Hybrid approach" width="880" height="618"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can draw two conclusions from this fact:&lt;/p&gt;

&lt;p&gt;Firstly, we will have more complexity, at least temporarily. The original datacenter is still around. Maybe smaller and with fewer assets, but still a burden. Operations has to support the original environments and the new cloud environment. This increases effort and cost and we must take this into account from the start.&lt;/p&gt;

&lt;p&gt;Secondly, the cloud-hosted assets usually depend on the on-premise assets. More often than not, the cloud-hosted assets need changes to the existing on-premise assets. Firewalls need to be changed, APIs need to be exposed or extended. And so on. This dependency leads to the first potential cultural and organisational trap.&lt;/p&gt;

&lt;p&gt;The fact that we have two areas, that can move at different speeds led to something called the two-speed-IT, which we'll discuss next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-twospeedit-trap"&gt;
  &lt;/a&gt;
  The two-speed-IT trap
&lt;/h2&gt;

&lt;p&gt;The idea of a two-speed-IT is not new. It has been around since circa 2014.&lt;/p&gt;

&lt;p&gt;McKinsey &lt;a href="https://www.mckinsey.com/business-functions/mckinsey-digital/our-insights/a-two-speed-it-architecture-for-the-digital-enterprise"&gt;describes&lt;/a&gt; the goal of a two-speed-IT as &lt;em&gt;"A two-speed IT architecture will help companies develop their customer-facing capabilities at high speed while decoupling legacy systems for which release cycles of new functionality stay at a slower pace."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The underlying premise is that you can run your organisation in two different ways. One shiny, great and new. And the other rusty, dusty and old. I will not delve into all the aspects why this is problematic. I concentrate on the organisational part. But to give you a picture, two-speed-IT is like attaching extra rooms to your house because you cannot be bothered to clean up. Not a very sustainable approach, in my eyes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#language-is-the-smoking-gun"&gt;
  &lt;/a&gt;
  Language is the smoking gun
&lt;/h2&gt;

&lt;p&gt;Going back to the softer, non-technical aspects. With two-speed-IT the language around the transformation changes in an interesting way.&lt;/p&gt;

&lt;p&gt;The cloud-assets are usually associated with a modern and lean technology stack. We use Go-lang, Node and Docker. The development process uses an agile process, such as &lt;a href="https://basecamp.com/shapeup"&gt;Shape-Up&lt;/a&gt;. We speak of forward-leaning teams. We use "Speed Boats" as metaphors for teams working on these cloud-products.&lt;/p&gt;

&lt;p&gt;On the other side of the fence lies the on-premise country. Here are the technologies of days-gone, Corba, Cobol, SOAP and EBCDIC. The process is heavy-weight, maybe even a waterfall with one or two releases per year. We speak of slow-moving tankers, with no ability to either change or react quickly. We even call this "legacy".&lt;/p&gt;

&lt;p&gt;Why is this problematic?&lt;/p&gt;

&lt;p&gt;As we have seen, the cloud-products usually need access or even changes to the existing assets. That means, we need collaboration between the different areas of engineering. Also let’s not forget the expertise of the people working on these systems. Documentation is outdated the moment it was written. The only way to understand systems is to have the human experts available.&lt;/p&gt;

&lt;p&gt;Things become difficult, if the "on-premise-people" are not part of the cloud-transformation.&lt;/p&gt;

&lt;p&gt;If people feel left behind and sidetracked, then we don’t get collaboration. Instead we get resentment. People may not be willing to help as much as we need their help. Or - in the worst case - people may end up sabotaging the cloud-transformation. Either knowingly or more often due to negligence. Why should someone support our efforts, if the person is going to be replaced by our project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#participation-brings-collaboration"&gt;
  &lt;/a&gt;
  Participation brings collaboration
&lt;/h2&gt;

&lt;p&gt;The solution to this dilemma is pretty straightforward. First we need to realise that nobody actually means to do harm or a bad job. &lt;em&gt;Assume Best Intent&lt;/em&gt; is often the best way to operate. With this in place, we see that the root of our problem lies in fear. &lt;/p&gt;

&lt;p&gt;Fear of being obsolete.&lt;br&gt;
Fear of being left behind.&lt;br&gt;
Fear of losing a job or importance.&lt;/p&gt;

&lt;p&gt;We have to get rid of that unfounded fear. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transparency and communication are key to removing fear.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bring everybody on board. Mix cloud-product teams with on-premise experts into one end-to-end team. We retrain the staff, offer courses for people willing to learn. We create new roles and positions for our new engineering culture. We offer people a perspective for growing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sh7d0Wyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6gsycy7jg00v08tbzk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sh7d0Wyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6gsycy7jg00v08tbzk3.png" alt="Team work is key" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we need to be transparent. We should communicate our rationale for the cloud transformation in clear terms. If we want to get rid of our self-hosted datacenter, then what is the plan for the people operating that datacenter now? How will they be retrained and up-skilled? Who hires the new skills we need? And so on. If we tackle these difficult topics openly, then we stop fear and gossip in their tracks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jumping-the-mountain"&gt;
  &lt;/a&gt;
  Jumping the mountain?
&lt;/h2&gt;

&lt;p&gt;If you want to silence the doubters and fear-mongers, delivery is the only option. Only working software in production will prove that the cloud journey is possible. But, one may ask, even if we bring everybody together and work on this, how can we bring an entire company into the cloud?&lt;/p&gt;

&lt;p&gt;Well, one takes one step at a time.&lt;/p&gt;

&lt;p&gt;Instead of trying to jump onto the mountain, we take the scenic route and enjoy the journey. We do not need to go all-in-serverless in the first couple of months. We can decide step-by-step what our realistic target actually is. Let's consider the following illustration. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---efY2yRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ikatog870dri1ua3qvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---efY2yRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ikatog870dri1ua3qvn.png" alt="A step-by-step approach" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want to be opportunistic in some areas but full on cloud-native in others. Again, transparency is key. Everybody should understand why we move some areas to the cloud, while others are not.&lt;/p&gt;

&lt;p&gt;I cannot stress this enough. We must find a thin-slice of business proving the technology and especially the new way of collaboration. The people will form a band of trust and cooperation that will act as a radiator in our organisation. The thin-slice should be something that adds to our area of business. Not a technical spike, not a proof-of-concept. Rather something essential. Only then will people feel committed and get involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Moving into the cloud involves architecture, technology but also organisation and culture. The concrete approach does not change the implications. Whether we lift-and-shift, re-architect, retire or replace, we will end up with a hybrid landscape of new and pre-existing assets.&lt;/p&gt;

&lt;p&gt;Two-speed-IT was brought up as a concept around 2014 but has lost its footing in the last couple of years. Reality has caught up with the ideas. Organisations have seen the downsides and implications, some of which I mentioned in this text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;People are key.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Engineers will learn new technology and new architectures anyway. But learning to trust, to work together, to collaborate is so much harder. Especially during a pandemic, when you cannot go around the corner and grab a cup of tea.&lt;/p&gt;

&lt;p&gt;Allowing people to take part and to get involved helps building bridges. We do not want any walls in our organisation. Not on a social level and not on a communication level.  Software development is a team effort and teams need to trust each other.&lt;/p&gt;

&lt;p&gt;The next article examines the question around the concrete teams. Like which skills are needed and how can we scale this in a reasonable way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-references"&gt;
  &lt;/a&gt;
  Image references
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/photos/xVptEZzgVfo"&gt;https://unsplash.com/photos/xVptEZzgVfo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://unsplash.com/photos/IM8ZyYaSW6g"&gt;https://unsplash.com/photos/IM8ZyYaSW6g&lt;/a&gt;&lt;br&gt;
&lt;a href="https://de.wikipedia.org/wiki/Schlangen%C3%B6l"&gt;https://de.wikipedia.org/wiki/Schlangen%C3%B6l&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>team</category>
      <category>organisation</category>
    </item>
    <item>
      <title>Migrate from react-native-unimodules to Expo modules</title>
      <author>Wouter van den Broek</author>
      <pubDate>Tue, 16 Nov 2021 20:48:04 +0000</pubDate>
      <link>https://dev.to/wbroek/migrate-from-react-native-unimodules-to-expo-modules-25c6</link>
      <guid>https://dev.to/wbroek/migrate-from-react-native-unimodules-to-expo-modules-25c6</guid>
      <description>&lt;p&gt;Expo has upgraded their modules strategy, why you can &lt;a href="https://blog.expo.dev/whats-new-in-expo-modules-infrastructure-7a7cdda81ebc"&gt;read here&lt;/a&gt; and replace the package react-native-unimodules with expo package. In this article you can read how to migrate from the old react-native-unimodules to the brand new Expo modules wth the expo package.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that the react-native-unimodules had some evolution in the past as well, some code changes could look a little but different. Your app name could be different; myapp is used in the examples below&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-reactnativeunimodules"&gt;
  &lt;/a&gt;
  Remove react-native-unimodules
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules from the package.json (&lt;code&gt;npm uninstall&lt;/code&gt; or &lt;code&gt;yarn remove&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ios"&gt;
  &lt;/a&gt;
  iOS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove the import and use of react-native-unimodules in &lt;code&gt;ios/Podfile&lt;/code&gt; and run &lt;code&gt;npx pod-install&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
&lt;/span&gt;&lt;span class="gd"&gt;- require_relative '../node_modules/react-native-unimodules/cocoapods.rb'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;target 'MyApp' do
&lt;/span&gt;&lt;span class="gd"&gt;-  use_unimodules!
&lt;/span&gt;  config = use_native_modules!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules references from &lt;code&gt;ios/MyApp/AppDelegate.h&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- #import &amp;lt;UMCore/UMAppDelegateWrapper.h&amp;gt;
&lt;/span&gt;
- @interface AppDelegate : UMAppDelegateWrapper &amp;lt;UIApplicationDelegate, RCTBridgeDelegate, UNUserNotificationCenterDelegate&amp;gt;
&lt;span class="gi"&gt;+ @interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate, RCTBridgeDelegate, UNUserNotificationCenterDelegate&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules references from &lt;code&gt;ios/MyApp/AppDelegate.m&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- #import &amp;lt;UMCore/UMModuleRegistry.h&amp;gt;
- #import &amp;lt;UMReactNativeAdapter/UMNativeModulesProxy.h&amp;gt;
- #import &amp;lt;UMReactNativeAdapter/UMModuleRegistryAdapter.h&amp;gt;
&lt;/span&gt;
- @interface AppDelegate () &amp;lt;RCTBridgeDelegate&amp;gt;
&lt;span class="gd"&gt;-  @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;
- @end
&lt;/span&gt;
@implementation AppDelegate
    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
&lt;span class="err"&gt;{&lt;/span&gt;
- self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];

- [super application:application didFinishLaunchingWithOptions:launchOptions];
  return YES;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="gd"&gt;- - (NSArray&amp;lt;id&amp;lt;RCTBridgeModule&amp;gt;&amp;gt; *)extraModulesForBridge:(RCTBridge *)bridge
-{
-  NSArray&amp;lt;id&amp;lt;RCTBridgeModule&amp;gt;&amp;gt; *extraModules = [_moduleRegistryAdapter extraModulesForBridge:bridge];
-  // If you'd like to export some custom RCTBridgeModules that are not Expo modules, add them here!
-  return extraModules;
-}
&lt;/span&gt;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#android"&gt;
  &lt;/a&gt;
  Android
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove react-native-unimodules from &lt;code&gt;android/app/build.gradle&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;apply plugin: "com.android.application"
&lt;/span&gt;&lt;span class="gd"&gt;- apply from: '../../node_modules/react-native-unimodules/gradle.groovy'
&lt;/span&gt;
dependencies {

- addUnimodulesDependencies()

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove link to react-native-unimodules from &lt;code&gt;android/settings.gradle&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;rootProject.name = 'MyApp'
&lt;/span&gt;&lt;span class="gd"&gt;- apply from: '../node_modules/react-native-unimodules/gradle.groovy';
- includeUnimodulesProjects()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove reference of react-native-unimodules in &lt;code&gt;android/app/src/main/java/com/myapp/MainApplication.java&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- import com.myapp.generated.BasePackageList;
&lt;/span&gt;
- import java.util.Arrays;

- import org.unimodules.adapters.react.ModuleRegistryAdapter;
&lt;span class="gd"&gt;- import org.unimodules.adapters.react.ReactModuleRegistryProvider;
&lt;/span&gt;
public class MainApplication extends Application implements ReactApplication {
&lt;span class="gd"&gt;-   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(new BasePackageList().getPackageList(), null);
&lt;/span&gt;
    private final ReactNativeHost mReactNativeHost =
      new ReactNativeHost(this) {

        @Override
        protected List&amp;lt;ReactPackage&amp;gt; getPackages() {
            @SuppressWarnings("UnnecessaryLocalVariable")
             List&amp;lt;ReactPackage&amp;gt; packages = new PackageList(this).getPackages();
            // Packages that cannot be autolinked yet can be added manually here, for example:
            // packages.add(new MyReactNativePackage());

-            // Add unimodules
&lt;span class="gd"&gt;-            List&amp;lt;ReactPackage&amp;gt; unimodules = Arrays.&amp;lt;ReactPackage&amp;gt;asList(
-                new ModuleRegistryAdapter(mModuleRegistryProvider)
-            );
-            packages.addAll(unimodules);
&lt;/span&gt;
            return packages;
        }

      };
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remove the generated package list file located at &lt;code&gt;android/app/src/main/java/com/myapp/generated/BasePackageList.java&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#update-expo-sdk-packages"&gt;
  &lt;/a&gt;
  Update Expo SDK packages
&lt;/h2&gt;

&lt;p&gt;If you already have Expo SDK packages installed like &lt;code&gt;expo-calendar&lt;/code&gt;, as I had, you need to update those to the latest version as well. Check your &lt;code&gt;package.json&lt;/code&gt; to see which Expo SDK packages are there, set them to the latest version and run npm or yarn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-expo-modules"&gt;
  &lt;/a&gt;
  Add Expo modules
&lt;/h2&gt;

&lt;p&gt;Now we removed the old react-native-unimodules and updated the Expo SDK packages we can install the new Expo modules. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-install"&gt;
  &lt;/a&gt;
  Automatic install
&lt;/h3&gt;

&lt;p&gt;Expo made a great tool to add the Expo package and adjust all the native files: &lt;code&gt;npx install-expo-modules&lt;/code&gt;&lt;br&gt;
I would recommend this to use for adding the Expo modules. Beacuse we removed the old react-native-unimodules it should work for most projects. If not and it fails or you cannot build the project you can try the manual instalation &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manual-install"&gt;
  &lt;/a&gt;
  Manual install
&lt;/h3&gt;

&lt;p&gt;Expo has an in &lt;a href="https://docs.expo.dev/bare/installing-expo-modules/#manual-installation"&gt;detailed description&lt;/a&gt; how to add Expo modules the manual way. Just modify all the named files and it should be ok.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#update-imports-in-typescriptjavascript"&gt;
  &lt;/a&gt;
  Update imports in Typescript/Javascript
&lt;/h2&gt;

&lt;p&gt;The old react-native-unimodules, and the new Expo moduels as well, included some Expo SDK packages like &lt;code&gt;expo-application&lt;/code&gt;, &lt;code&gt;expo-constants&lt;/code&gt; and 'expo-file-system'.&lt;br&gt;
You need to migrate the one you imported from react-native-unimodules to now use the real Expo SDK package name and imports. For example if we used Expo constants we need to change the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- import { Constants } from 'react-native-unimodules';
&lt;/span&gt;&lt;span class="gi"&gt;+ import Constants from 'expo-constants';
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>reactnative</category>
      <category>expo</category>
    </item>
    <item>
      <title>Horizontal scroll on mouse wheel: nothing easier!</title>
      <author>Luca</author>
      <pubDate>Tue, 16 Nov 2021 20:45:57 +0000</pubDate>
      <link>https://dev.to/ljnce/horizontal-scroll-on-mouse-wheel-nothing-easier-mfm</link>
      <guid>https://dev.to/ljnce/horizontal-scroll-on-mouse-wheel-nothing-easier-mfm</guid>
      <description>&lt;p&gt;Hi Dev! 🙋‍♂️&lt;/p&gt;

&lt;p&gt;I've used this easy way for a horizontal scroll a lot and I want to share the code with you: ✌️&lt;/p&gt;

&lt;p&gt;HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"horizonal-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"horizonal-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.horizonal-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;overflow-y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.horizonal-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.content-2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.content-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.horizonal-wrapper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wheel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is my fiddle example:&lt;br&gt;
&lt;a href="https://jsfiddle.net/k0bojwhu/"&gt;https://jsfiddle.net/k0bojwhu/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you and good coding! 🧑‍💻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>jquery</category>
    </item>
    <item>
      <title>Space Invaders Chaos.</title>
      <author>FRADAR</author>
      <pubDate>Tue, 16 Nov 2021 20:34:44 +0000</pubDate>
      <link>https://dev.to/fradar/space-invaders-chaos-1npd</link>
      <guid>https://dev.to/fradar/space-invaders-chaos-1npd</guid>
      <description>&lt;p&gt;This is basically Space Invaders on Steroids. Use the Arrow Keys to move, and spacebar to shoot the alien spaceships. Comment your score once you finish! (This is a very small game, so please don't expect much.)&lt;/p&gt;

&lt;p&gt;Try the game here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/jOywLmP"&gt;https://codepen.io/FRADAR/full/jOywLmP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games?&lt;br&gt;
Want to see more?&lt;br&gt;
Follow me here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for your time.&lt;br&gt;
Bye!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>javascript</category>
      <category>gamedev</category>
      <category>2d</category>
    </item>
    <item>
      <title>P-PL.com - JavaScript Interview Questions Quiz: Just how Well Do YOU Know JavaScript? </title>
      <author>Lambda Technology Inc</author>
      <pubDate>Tue, 16 Nov 2021 20:18:03 +0000</pubDate>
      <link>https://dev.to/tgrimes/p-plcom-javascript-interview-questions-quiz-just-how-well-do-you-know-javascript-1dac</link>
      <guid>https://dev.to/tgrimes/p-plcom-javascript-interview-questions-quiz-just-how-well-do-you-know-javascript-1dac</guid>
      <description>&lt;p&gt;P-PL is a place where teachers and students, experts and beginners, freelancers and customers can come together to collaborate on software development.&lt;/p&gt;

&lt;p&gt;Currently, were are seeking experts in the languages of Python and JavaScript.&lt;/p&gt;

&lt;p&gt;Just how well do YOU know JavaScript? Take our 10 Question Interview Quiz to find out… &lt;a href="https://bit.ly/321NHgd"&gt;https://bit.ly/321NHgd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you can become a Jedi Master in JavaScript, you first must master the Interview. Give it a go today and see how you do!&lt;/p&gt;




&lt;p&gt;At its core, p-pl.com is a network of experts willing to connect over video chat.&lt;/p&gt;

&lt;p&gt;As a user, you have access to video chat anyone at anytime given their schedule and expertise you are looking for.&lt;/p&gt;

&lt;p&gt;Whether you are a software engineer looking for help on a bug or a life coach advising clients on their next big move, p-pl.com is the solution for convenient quality information.&lt;/p&gt;

&lt;p&gt;As an expert and consultant, you have the option to bill for your time and expertise for every call you accept. It is YOUR time, why not get paid?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Top eCommerce Website Design Features and Tips in 2021</title>
      <author>PNM Group</author>
      <pubDate>Tue, 16 Nov 2021 19:39:08 +0000</pubDate>
      <link>https://dev.to/pnmgroup/top-ecommerce-website-design-features-and-tips-in-2021-5ekf</link>
      <guid>https://dev.to/pnmgroup/top-ecommerce-website-design-features-and-tips-in-2021-5ekf</guid>
      <description>&lt;p&gt;Your eCommerce store isn't complete until it is able to engage and keep customers. In order to do this, retailers may need to develop an appealing and user-friendly eCommerce website. If your eCommerce store is able to make buying easier and make it easier for customers to buy, you'll see the most significant increase in sales.&lt;/p&gt;

&lt;p&gt;In order to achieve this, retailers may want to invest in specific design elements in order to provide a seamless interface to visitors. Customers must be able to find information. These features will enhance the way that customers interact in the eCommerce store and provide them with a the best experience. What is more, PNM Group is one of the leading &lt;a href="https://pnmgroup.co/creative"&gt;Creative Agency Toronto&lt;/a&gt;. Design, Development, SEO, IDX Canada, Branding, and Beyond.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2bjz2EQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.startupguys.net/wp-content/uploads/2020/04/ecommerce-website.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bjz2EQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.startupguys.net/wp-content/uploads/2020/04/ecommerce-website.png" alt="E-Commerce Website Design" width="750" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Store owners will be able to transform their typical day-to-day customers into long-term customers. Here are the features that an eCommerce retailer should try to incorporate in their eCommerce store before 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-important-design-features-to-ecommerce-sites"&gt;
  &lt;/a&gt;
  The most important design features to eCommerce sites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Search Wizard&lt;/li&gt;

&lt;li&gt;Carousel Slides&lt;/li&gt;

&lt;li&gt;Megamenu&lt;/li&gt;

&lt;li&gt;Newsletter Pop-up&lt;/li&gt;

&lt;li&gt;Product Comparison&lt;/li&gt;

&lt;li&gt;Banners&lt;/li&gt;

&lt;li&gt;Reviews&lt;/li&gt;

&lt;li&gt;Help Desk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#search-wizard"&gt;
  &lt;/a&gt;
  Search Wizard
&lt;/h3&gt;

&lt;p&gt;It is not everyone's favorite to click on a link to search for their favourite products. It is possible that they prefer to type in the information and then go to the item right away. In this case, browsing through the website can deter the desire to buy. Therefore, retailers will require an advanced tool to find products on their site.&lt;/p&gt;

&lt;p&gt;The search wizard will search the web, analyze and present huge volumes of relevant data in nearly real-time. Not only that it will be able to pull relevant data from the moment the user begins writing (minimum 3 characters). Users will also have the option to see every result for the search query they typed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#carousel-slides"&gt;
  &lt;/a&gt;
  Carousel Slides
&lt;/h3&gt;

&lt;p&gt;Although it's not appropriate for every eCommerce company, it's an effective method to attract visitors straight off your homepage. Merchants can display top-selling products as well as other promotions that can draw interest of users. This feature has been proven to be informative and impactful.&lt;/p&gt;

&lt;p&gt;Integrating this into your online store won't require any effort. It also gives sellers the opportunity to display important information when users arrive at the home page. Display captivating and convincing images of your products that entice customers to click, go to the product's page and buy them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#megamenu"&gt;
  &lt;/a&gt;
  Megamenu
&lt;/h3&gt;

&lt;p&gt;A well-designed mega menu that efficiently organizes all your products in subcategories and categories will be extremely useful to the users of your site. Customers will be able navigate the site by simply navigating through the menu. It is more than anything else it enhances the experience.&lt;/p&gt;

&lt;p&gt;Merchants are able to first separate all their SKUs , and then group them into categories and subcategories of the menu. Users will be able to find the item. Merchants may also include images and icons to every label on this mega menu. Make sure to design your site mobile-friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#newsletter-popup"&gt;
  &lt;/a&gt;
  Newsletter Pop-up
&lt;/h3&gt;

&lt;p&gt;One method to stay on top of your customers who are loyal is to send them an email newsletter. Include a pop-up on the home page , which is activated after a certain time. Anyone who visits your website must experience them as a pop-up. The pop-up can collect an email address and send details on sales, deals patterns, trends, and other important information.&lt;/p&gt;

&lt;p&gt;Newsletters are the best method to draw customers into your shop. Even non-registered customers can convert after seeing a great bargain in the emails. Merchants are able to interact with customers by providing tips, trivia, and general news about eCommerce and more. Newsletters are the most effective way to establish a connection with your intended audience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-comparison"&gt;
  &lt;/a&gt;
  Product Comparison
&lt;/h3&gt;

&lt;p&gt;Every now and then, consumers may feel the need to look at comparing two or more products in order to determine which one is the best for them. In this situation, having an instrument for comparing products simplifies their problem and helps ease their decision-making process.&lt;/p&gt;

&lt;p&gt;Being able to compare several products from different angles will help users gain greater insight into their options. Users must be able look at dimensions, color of the product, weight, price and more, based on the specific industry. Let customers get the most complete overview of technical aspects of the various products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#banners"&gt;
  &lt;/a&gt;
  Banners
&lt;/h3&gt;

&lt;p&gt;The display of banners on the homepage, particularly animated ones, has been proven to draw attention of visitors. You can include anything you want however ensure that your content is as striking bright, vibrant, and lively as you can. The most attractive and attractive banners are highly visible.&lt;/p&gt;

&lt;p&gt;Everything that is displayed in the banner will be noticed by the people who visit. Merchants can have the top-selling items, any item available for sale, or even the ability to use a countdown timer in order to increase the an urgency. There is a guarantee that people will be enticed to click. Therefore it is very likely that orders will go up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reviews"&gt;
  &lt;/a&gt;
  Reviews
&lt;/h3&gt;

&lt;p&gt;Owners of eCommerce stores can set up an area on their website for positive reviews and positive feedback including ratings. Customers will immediately feel a sense of trust and feel more confident joining with your company. Thus, any customer who encounters this information is more likely to make orders through the website. Sincere and honest reviews help the brand appear more reliable to visitors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#help-desk"&gt;
  &lt;/a&gt;
  Help Desk
&lt;/h3&gt;

&lt;p&gt;Include a helpdesk floating on the pages of the eCommerce website as is possible. Customers can use the help desk to send tickets with regards to their orders. Any issues that arise when placing an order are able to be addressed using the form that appears when you click this widget.&lt;/p&gt;

&lt;p&gt;By submitting the form, tickets, an unique ticket number is generated. This is sent to the customer via email, and to a representative from Support team. Merchants can also make use of the unique number for consolidating each message that is exchanged in relation to the purchase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wishlist"&gt;
  &lt;/a&gt;
  Wishlist
&lt;/h3&gt;

&lt;p&gt;Users can include their preferred products on the Wishlist. Additionally, let them share the list with other users on the site , and make it available with social platforms. Wish Lists are an excellent option to create gift lists or shopping lists. Additionally, this useful tool can act as a reminder for the future purchases. Users can locate the product conveniently in the near future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calltoaction-cta"&gt;
  &lt;/a&gt;
  Call-to-action (CTA)
&lt;/h3&gt;

&lt;p&gt;Engage your users to click on your website by showing an attractive, bright and attractive CTA on different web pages on the eCommerce store. A CTA will require some kind of contact in the future.&lt;/p&gt;

&lt;p&gt;In a rational and qualitative way, make sure you have as numerous CTAs in the best way you could on the website. The user shouldn't need to click through "Contact Us" or the "Contact Us" page or to a form in order to reach an important person within your business. Additionally, PNM Group is proud to announce &lt;a href="https://pnmgroup.co/"&gt;IDX Toronto&lt;/a&gt; service for Toronto Real Estate Board - IDX Listings Only.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>product</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (October 28, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Tue, 16 Nov 2021 19:24:03 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-october-28-2021-latest-mongodb-tutorials-events-podcasts-streams-1go9</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-october-28-2021-latest-mongodb-tutorials-events-podcasts-streams-1go9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  👋 Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate! &lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  🎓 Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-your-apps-search-results-with-autotuning"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/improve-your-apps-search-results-with-auto-tuning/"&gt;Improve Your App's Search Results with Auto-Tuning&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/ethan-steininger/"&gt;Ethan Steininger&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.mongodb.com/developer/author/isa-torres/"&gt;Isa Torres&lt;/a&gt; &lt;br&gt;
This blog will cover how to leverage synonyms to create a feedback loop that is self-tuning, in order to deliver incrementally more relevant search results to your users. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#automate-the-automation-on-mongodb-atlas"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/automate-automation-mongodb-atlas/"&gt;Automate the Automation on MongoDB Atlas&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/cassiano-ziegler-bein/"&gt;Cassiano Ziegler Bein&lt;/a&gt; &lt;br&gt;
Build your own automation with MongoDB Atlas API resources.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#persistence-in-unity-using-realm"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-how-to-add-realm-to-your-unity-project/"&gt;Persistence in Unity Using Realm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/dominic-frei/"&gt;Dominic Frei&lt;/a&gt; &lt;br&gt;
The goal of this article is to show you how to add Realm to your Unity game and make sure your data is persisted. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pymongoarrow-bridging-the-gap-between-mongodb-and-your-data-analysis-app"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/quickstart/pymongoarrow-and-data-analysis/"&gt;PyMongoArrow: Bridging the Gap Between MongoDB and Your Data Analysis App&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/judy2k"&gt;Mark Smith&lt;/a&gt; &lt;br&gt;
In this tutorial, I'm going to be using a sample database you can install when creating a cluster hosted on MongoDB Atlas.   &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  📺 MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.twitch.tv/videos/1157005653"&gt;https://www.twitch.tv/videos/1157005653&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🍿 &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  🎙 Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3RclKR2MycRH4y3qTXdlpd"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 82 - &lt;a href="https://open.spotify.com/episode/4z0EYeJPti4peMvq56MQlV?si=CDvQ2EBhQ2i-0Q15c4hYSg"&gt;Serverless with Chris Shum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 81 - &lt;a href="https://open.spotify.com/episode/6tEcClMmSssrOfrjBC4XbO?si=BdoTygCyS7CjwgoIPG13kQ"&gt;The Realm JavaScript SDK with Kraen Hansen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 80 - &lt;a href="https://open.spotify.com/episode/05dFJ4h2eH3PNwAadDL3Bx?si=koSjwaJ7RV6mGd10bWqF5w"&gt;Exploring Prisma with Daniel Norman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; 😊)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#mongodb-devrel-around-the-interwebz"&gt;
  &lt;/a&gt;
  🌍 MongoDB DevRel around the Interwebz
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Watch our team do their thang at various conferences, meetups, and podcasts around the world (virtually, for now). Also, find external articles and guest posts from our DevRel team here!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;📅 Upcoming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Current Month&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oct 28: &lt;a href="https://www.conf42.com/JavaScript_2021_Lauren_Hayward_Schaefer_Raise_Your_Profile"&gt;Conf42&lt;/a&gt; &lt;br&gt;
🌟 KEYNOTE 🌟&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://www.conf42.com/JavaScript_2021_Lauren_Hayward_Schaefer_Raise_Your_Profile"&gt;Conf42&lt;/a&gt; Conference to give their Keynote "How to Raise Your Profile as a Developer (And Why You Should Bother!)"!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next Month&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nov 8: &lt;br&gt;
&lt;a href="https://2021.devrel.net/speaker/lauren-schaefer/"&gt;DevRelCon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://2021.devrel.net/speaker/lauren-schaefer/"&gt;DevRelCon&lt;/a&gt; Conference to give their talk "SEO 101 for DevRel"!&lt;/p&gt;

&lt;p&gt;Nov 10: &lt;a href="https://events.codemotion.com/conferences/online/2021/online-tech-conference-italian-edition-autumn/speakers"&gt;Codemotion&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://events.codemotion.com/conferences/online/2021/online-tech-conference-italian-edition-autumn/speakers"&gt;Codemotion&lt;/a&gt; Conference to give their talk "How to Raise Your Profile as a Developer (And Why You Should Bother!)"!&lt;/p&gt;




&lt;p&gt;💡 These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Java Data Structures and Algorithms. Doubly Linked List </title>
      <author>Tristan Elliott</author>
      <pubDate>Tue, 16 Nov 2021 19:20:16 +0000</pubDate>
      <link>https://dev.to/theplebdev/java-data-structures-and-algorithms-doubly-linked-list-38j9</link>
      <guid>https://dev.to/theplebdev/java-data-structures-and-algorithms-doubly-linked-list-38j9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This series is going to be dedicated to learning and understanding data structures and algorithms in Java. All the information I am using is coming from the book, &lt;code&gt;Data Structures and Algorithms in Java by Michael T. Goodrich and Roberto Tamassia&lt;/code&gt; and the California State Polytechnic University course, which is free and can be found &lt;a href="https://www.cpp.edu/~ftang/courses/CS240/"&gt;HERE&lt;/a&gt;, shout out professor Tang. Please do not buy the book it is expensive and can be found online for MUCH cheaper.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#youtube-version"&gt;
  &lt;/a&gt;
  YouTube version:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;YouTube version of this code can be found &lt;a href="https://youtu.be/mc2bfrdBDyE"&gt;HERE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#github-code"&gt;
  &lt;/a&gt;
  GitHub code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GitHub for the code can be found &lt;a href="https://github.com/thePlebDev/ElliottSoftwareInitiative/blob/master/lib/src/main/java/ElliottSoftwareInitiative/linkedLists/DoublyLinkedList.java#L1"&gt;HERE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-doubly-linked-list"&gt;
  &lt;/a&gt;
  What is a doubly linked List?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In a singly linked list, each node maintains a reference to the node that is immediately after it. A doubly linked list does that as well. However, it has an additional reference to node previous to it. Hence the name &lt;code&gt;doubly&lt;/code&gt; because a node holds two references, one to the node ahead of it and one to the node behind it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#header-and-trailer-sentinel-nodes"&gt;
  &lt;/a&gt;
  Header and Trailer sentinel nodes.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In order to avoid some special cases when operating near the boundaries of a doubly linked list. It helps to add special &lt;code&gt;sentinel nodes&lt;/code&gt; at both ends of the list. These sentinel nodes do not store any elements from the primary linked list and the do not count towards the size of the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-use-sentinel-nodes-"&gt;
  &lt;/a&gt;
  Why use sentinel nodes ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;While we certainly could implement a doubly linked list without any sentinel nodes(like a singly linked list), the extra memory we use on the sentinel nodes greatly simplifies the logic of our operations on the list. The header and the trailer never change, only the nodes between them do. This means that we can treat all insertions in a uniform manner and all deletions in a uniform manner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-node"&gt;
  &lt;/a&gt;
  Creating the Node
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This Node has 3 instance variables:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) element :&lt;/strong&gt; is a reference to the element stored at this node&lt;br&gt;
&lt;strong&gt;2) previous :&lt;/strong&gt; reference to the previous node&lt;br&gt;
&lt;strong&gt;3) next :&lt;/strong&gt; reference to the next node&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With the node class we are going to use generics to give our class a little bit of flexibility. Once we have the 3 instance variables all we have to do is create a POJO(Plain Old Java Object), so to finish things, just create the constructor and the getters and the setters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  public class DoublyLinkedList &amp;lt;E&amp;gt;{
    private static class Node&amp;lt;E&amp;gt;{
        private E element;
        private Node&amp;lt;E&amp;gt; previous;
        private Node&amp;lt;E&amp;gt; next;

        public Node(E element, Node&amp;lt;E&amp;gt; previous, Node&amp;lt;E&amp;gt; next) {
            this.element = element;
            this.previous = previous;
            this.next = next;
        }
        //GETTERS
        public E getElement() {
            return this.element;
        }
        public Node&amp;lt;E&amp;gt; getPrevious(){
            return this.previous;
        }
        public Node&amp;lt;E&amp;gt; getNext(){
            return this.next;
        }
        //SETTERS
        public void setNext(Node&amp;lt;E&amp;gt; next) {
            this.next = next;
        }
        public void setPrevious(Node&amp;lt;E&amp;gt; previous) {
            this.previous = previous;
        }

    }
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#instance-variables"&gt;
  &lt;/a&gt;
  Instance variables
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Once we have created the Node class, the next thing to do is to implement the instance variables. This class will hold 3 instance variables. 
&lt;strong&gt;1) header :&lt;/strong&gt; holds a reference to the header sentinel node
&lt;strong&gt;2) trailer :&lt;/strong&gt; holds a reference to the trailer sentinel node
&lt;strong&gt;3) size:&lt;/strong&gt; holds an integer value indicating how many nodes are in the list
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; public class DoublyLinkedList &amp;lt;E&amp;gt;{
// The rest of the node class is above.

        private Node&amp;lt;E&amp;gt; header;
    private Node&amp;lt;E&amp;gt; trailer;
    private int size =0;


}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#doubly-linked-list-constructor"&gt;
  &lt;/a&gt;
  Doubly linked list constructor
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The constructor of a doubly linked list is important because we use it to set up the header and trailer sentinel nodes. just a friendly reminder, but these two sentinel nodes help simplify our code and make our operations more efficient. First we create the header and everything is null. Then we set the trailer will is previous reference set to the header. Lastly we set the header's next reference to the trailer. So upon constructing our doubly linked list, we will create something like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--poE1XeC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yepqr19fgqshb66ufsut.png" alt="doubly linked list graphic" width="664" height="234"&gt;
&lt;/li&gt;
&lt;li&gt;With the header and trailer being the sentinel nodes
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public DoublyLinkedList(){
        header = new Node&amp;lt;&amp;gt;(null,null,null);
        trailer = new Node&amp;lt;&amp;gt;(null,header,null);
        header.setNext(trailer);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#doubly-linked-list-methods"&gt;
  &lt;/a&gt;
  Doubly Linked List methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The doubly linked list that we are going to implement today has 8 methods(technically 10 but we will talk about the other two later) and they are:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) size() :&lt;/strong&gt; returns the number of elements in the list&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) isEmpty() :&lt;/strong&gt; returns true if the list is empty and false otherwise&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) first() :&lt;/strong&gt; returns(but does not remove) the first element in the list&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) last() :&lt;/strong&gt; returns(but does not remove) the last element in the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) addFirst(e) :&lt;/strong&gt; adds a new element to the front of the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) addLast(e) :&lt;/strong&gt; adds a new element to the end of the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) removeFirst() :&lt;/strong&gt; removes and returns the first element of the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8) removeLast() :&lt;/strong&gt; removes and returns the last element of the list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of our sentinel nodes will impact the implementation in several ways. First we will create and link the sentinels upon constructing an empty list. We should also keep in mind that the first element of a nonempty list is stored in the node just after the header and not the header itself. Also, the last element is stored in the node just before the trailer.&lt;/li&gt;
&lt;li&gt;We will also be creating a two private methods to deal with general deletions and insertions to the list:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) addBetween() :&lt;/strong&gt; handles general cases of insertions and will be called by addFirst() and addLast()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) remove() :&lt;/strong&gt; handles general cases of removals and will be called by removeFirst() and removeLast()&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before we start implementing the rest of the class, I want to make it incredibly clear that the sentinel nodes are not the head or the tail. They represent end points that hold no values of their own. They act as easy markers and simplify our code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementing-the-retrieval-methods"&gt;
  &lt;/a&gt;
  Implementing the retrieval methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The first four methods that we are going to implement are pretty straight forward, we are implementing, size(), isEmpty(), first() and last(). They are the methods that do not operate on the list, instead they only retrieve values for us.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; public class DoublyLinkedList &amp;lt;E&amp;gt;{
// The rest of the class is above.

        public int size() {
        return this.size;
    }
    public boolean isEmpty() {
        return size == 0;
    }

public E first() {
        if (isEmpty()) {
            return null;
        }else {
            return header.getNext().getElement();
        }
    }
    public E last() {
        if(isEmpty()) {
            return null;
        }else {
            return this.trailer.getPrevious().getElement();
        }
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implementing-the-update-methods"&gt;
  &lt;/a&gt;
  Implementing the update methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The next four methods are for removing and adding nodes to the list. They are, addFirst(), addLast(), removeLast(), removeFirst() and those are the public methods. However, there are also two more private methods, called addBetween() and remove() that are to be called by the other four methods. IN these two private methods we implement the logic for adding/removing from the list.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public void addFirst(E e) {
        addBetween(e,header,header.getNext());
    }
    public void addLast(E e) {
        addBetween(e,trailer.getPrevious(),trailer);
    }
public E removeFirst() {
        if(isEmpty()) {
            return null;
        }else {
            return remove(header.getNext());
        }
    }
    public E removeLast() {
        if(isEmpty()) {
            return null;
        }else {
            return remove(trailer.getPrevious());
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; most of the logic goes inside the remove() and the addBetween() methods.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private void addBetween(E e,Node&amp;lt;E&amp;gt; predecessor, Node&amp;lt;E&amp;gt; successor) {
        Node&amp;lt;E&amp;gt; newest = new Node&amp;lt;&amp;gt;(e,predecessor,successor);
        predecessor.setNext(newest);
        successor.setPrevious(newest);
        size++;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;With the method above all we are really doing is creating a Node and then setting up its next and previous reference values.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private E remove(Node&amp;lt;E&amp;gt; node) {
        Node&amp;lt;E&amp;gt; predecessor = node.getPrevious();
        Node&amp;lt;E&amp;gt; successor = node.getNext();

        predecessor.setNext(successor);
        successor.setPrevious(predecessor);

        size--;
        return node.getElement();
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The remove logic is a little more complicated and I only say that because of the nature of Java. When we are &lt;code&gt;removing&lt;/code&gt; a node, what we are actually doing is simply making sure that no other nodes reference it. In Java, when an object has no other object that reference it, it gets &lt;code&gt;removed&lt;/code&gt; and its memory is returned back to the memory pool. So the removal of a Node looks something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TbR8BYDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zduk10fl0l6hn0zbtxms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TbR8BYDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zduk10fl0l6hn0zbtxms.png" alt="removing a node" width="850" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Thank you for taking the time out of your day to read this blog post of mine. If you have any questions or concerns please comment below or reach out to me on &lt;a href="https://twitter.com/TristAndroidDev"&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>computerscience</category>
      <category>tristan</category>
    </item>
  </channel>
</rss>
