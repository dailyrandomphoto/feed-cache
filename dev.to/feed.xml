<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Write It Down</title>
      <author>Dylan Balagtas</author>
      <pubDate>Sun, 18 Jul 2021 04:54:18 +0000</pubDate>
      <link>https://dev.to/dylan_balagtas/write-it-down-1mfe</link>
      <guid>https://dev.to/dylan_balagtas/write-it-down-1mfe</guid>
      <description>&lt;p&gt;Everyone has their idea may it be about a video game or the food they last ate, or even the formula to solve cancer&lt;/p&gt;

&lt;p&gt;We all have ideas and they come and go, in times when we want them and in most times when we don't want them.&lt;/p&gt;

&lt;p&gt;Sometimes it comes in the most inappropriate times, like when we are trying to sleep.&lt;/p&gt;

&lt;p&gt;These ideas just circle in your head, bouncing around your skull like a banshee that wants to get out.&lt;/p&gt;

&lt;p&gt;But it doesn't, it sits and camps there for a while.&lt;/p&gt;

&lt;p&gt;Well let me tell you the only way you can remove that nasty camper&lt;br&gt;
Is by writing it down, may it be Digital or physical&lt;/p&gt;

&lt;p&gt;Somehow it just transfers once you put it down. The beauty of writing down.&lt;/p&gt;

&lt;p&gt;For me, the best ideas show ups when I'm trying to sleep&lt;/p&gt;

&lt;p&gt;That's why I bring always a notebook, The Notebook of Ideas&lt;br&gt;
If it's not there I have my smartphone with a note-taking app.&lt;/p&gt;

&lt;p&gt;But it doesn't happen during sleeping only&lt;/p&gt;

&lt;p&gt;It can happen in the shower, while you're walking, while you're commuting&lt;/p&gt;

&lt;p&gt;But what's common of all situations, most ideas come when you are in a silent place&lt;/p&gt;

&lt;p&gt;Where you can talk to yourself&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;think, think, think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sad thing is this ideas come and go, once you get distracted or even think of something else, your idea is gone&lt;/p&gt;

&lt;p&gt;Lucky you if ever you'll get to have the chance to grasp that idea again&lt;/p&gt;

&lt;p&gt;Again a reason why you should write it down&lt;/p&gt;

&lt;p&gt;‚ÄúLike Yow right down now not later nor tomorrow‚Äù&lt;/p&gt;

&lt;p&gt;Now is the best time before it's gone&lt;/p&gt;

&lt;p&gt;You won't want to waste a wonderful idea&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#every-idea-is-important"&gt;
  &lt;/a&gt;
  Every Idea is important
&lt;/h2&gt;

&lt;p&gt;No matter how small the solution you came up with can solve.&lt;/p&gt;

&lt;p&gt;No matter what your race, your gender, your sexuality, or your educational background.&lt;/p&gt;

&lt;p&gt;Its a solution to a problem&lt;/p&gt;

&lt;p&gt;And that's helpful&lt;/p&gt;

&lt;p&gt;It may even be incomplete&lt;/p&gt;

&lt;p&gt;Allowing you to branch out and research more to better up your idea&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ideas-from-others"&gt;
  &lt;/a&gt;
  Ideas from others
&lt;/h2&gt;

&lt;p&gt;Talking to other people. Fitting their shoes.&lt;/p&gt;

&lt;p&gt;Helps you practice thinking. Helps you and your friend or whoever you are talking to unrivaled wonderful ideas&lt;/p&gt;

&lt;p&gt;The power of having different brains!&lt;/p&gt;

&lt;p&gt;Ideas are like a jigsaw puzzle, Sometimes they fit, sometimes they don't.&lt;br&gt;
But when it does fit, it forms a beautiful image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You'll never know you'll have that one idea that can change people's lives, or even change your idea.&lt;/p&gt;

&lt;p&gt;And you'll never know when you'll form it. And you'll never know when you'll forget about it&lt;/p&gt;

&lt;p&gt;So keep a notebook, make it as small as possible that it fits your back pocket with that pen of yours&lt;/p&gt;

&lt;p&gt;Because I know you're a thinker because we are all thinkers.&lt;/p&gt;

&lt;p&gt;And all these problems we face can only be solved by sharing and contributing our ideas to the world, and collaborating with others!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Analog Clock Using HTML,CSS &amp; JS ‚ö°</title>
      <author>Rohan Kulkarni</author>
      <pubDate>Sun, 18 Jul 2021 04:36:16 +0000</pubDate>
      <link>https://dev.to/rohank_2502/analog-clock-using-html-css-js-ah2</link>
      <guid>https://dev.to/rohank_2502/analog-clock-using-html-css-js-ah2</guid>
      <description>&lt;p&gt;Hello Everyone !! In this article, I will try to explain the code of the Analog clock which I made recently !! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rohan-kulkarni-25/front-end-templates"&gt;Code ( GitHub Repository )&lt;/a&gt;  &lt;a href="https://rohan-kulkarni-25.github.io/front-end-templates/analog-clock/index.html"&gt;Website Preview&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aim-to-develop-an-analog-clock-like"&gt;
  &lt;/a&gt;
  Aim: To Develop an Analog Clock Like üëáüèª
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JaiY3zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626580726489/L3Viwpgsiz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JaiY3zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626580726489/L3Viwpgsiz.gif" alt="ezgif.com-gif-maker(2).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  HTML CODE
&lt;/h3&gt;

&lt;p&gt;In this section, we are having simple code which consists of a div that has a title.&lt;br&gt;
Below that, there is one section in which the whole clock div is located and inside the clock div, there is a separate div for each hand!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;div class="heading"&amp;gt; 
        &amp;lt;p&amp;gt;ANALOG CLOCK&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;section class="page--section"&amp;gt; 
        &amp;lt;div id="clock--box"&amp;gt; 
            &amp;lt;div id="hour--hand"&amp;gt;&amp;lt;/div&amp;gt; 
            &amp;lt;div id="min--hand"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div id="sec--hand"&amp;gt;
                &amp;lt;div class="round--dot"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS CODE
&lt;/h3&gt;

&lt;p&gt;Let's see the design code part by part &lt;/p&gt;

&lt;p&gt;This is CSS code for the body. This has given a flex display to the body so we can align the div to the center of the page. I have selected the background gradient from  &lt;a href="https://uigradients.com/"&gt;uigradients.com&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  display: flex;
  justify-content: space-around;
  flex-direction: column;
  background: #7f7fd5;
  background: -webkit-linear-gradient(to right, #91eae4, #86a8e7, #7f7fd5);
  background: linear-gradient(to right, #91eae4, #86a8e7, #7f7fd5);
}
p {
  margin: 0;
  padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the code block for the heading and page section. I have added width and given display flex to the page section because I can align the clock div to center by flex methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.heading {
  text-align: center;
  font-size: 4vmax;
  font-weight: 900;
  color: white;
  text-shadow: 4px 4px black;
}

.page--section {
  width: 98vw;
  height: fit-content;
  margin-top: 5em;
  display: flex;
  justify-content: center;
  align-items: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is code for the clock box which has a border-radius of 50% which makes the div box rounded. I have added an image in the background which is a normal image of a clock.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jy9K4CQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626581320738/szO-YJxZv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jy9K4CQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626581320738/szO-YJxZv.png" alt="circle-cropped.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this code, position relative plays the most important role this will help us to align the hands in relative to this div box. I have also added an animation effect that changes box-shadow you can have fun by changing the color and size of the shadow üòÅ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#clock--box {
  height: 30vw;
  width: 30vw;
  background-image: url(../images/circle-cropped.png);
  background-size: contain;
  background-repeat: no-repeat;
  position: relative;
  border-radius: 50%;
  box-shadow: 4px 4px 32px 32px yellow;
  animation: box 4s infinite;
}

@keyframes box {
  0% {
    box-shadow: 2px 2px 10px 10px #fceabb;
  }
  25% {
    box-shadow: 3px 3px 16px 16px #f8b500;
  }
  50% {
    box-shadow: 4px 4px 32px 32px #f87000;
  }
  75% {
    box-shadow: 3px 3px 16px 16px #f8b500;
  }
  100% {
    box-shadow: 2px 2px 10px 10px #fceabb;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code, I have made the position of the hour hand absolute so we can align them with respect to the top, bottom, left, the right position of the clock div. &lt;br&gt;
We have to align all hands to the center with the help of these properties.&lt;br&gt;
In this code, the transform-origin is set to the bottom that will help our clock hand to rotate from the bottom. By default, this property is set to center.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#hour--hand,
#min--hand,
#sec--hand {
  position: absolute;
  background-color: black;
  border-radius: 12px;
  transform-origin: bottom;
}

#hour--hand {
  height: 23%;
  width: 1.5%;
  left: 50%;
  top: 26%;
  border-radius: 75%;
}

#min--hand {
  height: 30%;
  width: 1%;
  left: 50.3%;
  top: 20%;
  border-radius: 200%;
}

#sec--hand {
  height: 30%;
  background-color: black;
  width: 0.2%;
  left: 50.5%;
  top: 20%;
  position: relative;
}

.round--dot {
  background-color: red;
  height: 1vmax;
  width: 1vmax;
  left: 50%;
  top: 20%;
  border-radius: 50%;
  display: block;
  opacity: 1;
  position: absolute;
  top: 0vmax;
  left: -0.4vmax;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is CSS code for Small devices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media only screen and (max-width: 800px) {
  .page--section {
    padding: 0;
  }
  #clock--box {
    height: 60vw;
    width: 60vw;
    background-image: url(../images/circle-cropped.png);
    background-size: contain;
    background-repeat: no-repeat;
    position: relative;
    border-radius: 50%;
    box-shadow: 4px 4px 32px 32px yellow;
    animation: box 4s infinite;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#js-code"&gt;
  &lt;/a&gt;
  JS CODE
&lt;/h3&gt;

&lt;p&gt;This is Javascript code in which we have Set Interval function which will repeat itself after every 1000 milliseconds ( 1 sec ). In the variable current date, we are storing the current date with help of the Date Object. By using methods on date object we will be taking current time in hours, minutes &amp;amp; seconds. Then we have defined rotation for each hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hour hand rotation 
Total Hours 12 Rotation of 360 deg So in 1 hour 
It will rotate 30 deg but the minute hand also impact the rotation of the hour hand so if in 60 min it rotates 30 deg then in 1 min it will rotate half deg so we will add this to the total turn 

Minute hand rotation 
Total Min in Hour is 60 with rotation of 360 deg so per min will rotate 6 deg 

Second-Hand rotation 
Total sec in Min is 60 with rotation of 360 deg so per sec will rotate 6 deg 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the style transform property we will rotate the hand as per time and will update it every sec.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(() =&amp;gt; {
    let currentDate = new Date();
    let timeInHour = currentDate.getHours();
    let timeInMinutes = currentDate.getMinutes();
    let timeInSeconds = currentDate.getSeconds();
    let hourHandTurn = (30 * timeInHour + timeInMinutes / 2);
    let minuteHandTurn = 6 * timeInMinutes;
    let secondHandTurn = 6 * timeInSeconds;
    document.getElementById('sec--hand').style.transform = `rotate(${secondHandTurn}deg)`;
    document.getElementById('min--hand').style.transform = `rotate(${minuteHandTurn}deg)`;
    document.getElementById('hour--hand').style.transform = `rotate(${hourHandTurn}deg)`;
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#great-we-have-created-our-own-analog-clock-i-hope-you-enjoyed-developing-with-me-do-tag-me-if-this-article-helped-you-in-creating-your-own-analog-clock-and-do-share-on-socials-"&gt;
  &lt;/a&gt;
  Great we have created our own analog clock. I hope you enjoyed developing with me. Do tag me if this article helped you in creating your own analog clock and do share on socials !!
&lt;/h3&gt;

&lt;p&gt;Wanna get connected with me üòÑ&lt;br&gt;
&lt;a href="https://twitter.com/rohan_2502"&gt;Twitter&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/rohan-k-2502/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started with Regular Expressions</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Sun, 18 Jul 2021 04:17:00 +0000</pubDate>
      <link>https://dev.to/nickytonline/getting-started-with-regular-expressions-11dg</link>
      <guid>https://dev.to/nickytonline/getting-started-with-regular-expressions-11dg</guid>
      <description>&lt;p&gt;Regular expressions (regex) are one of those things that folks seem to make fun of most of the time because they don't understand them, or partially understand them.&lt;/p&gt;

&lt;p&gt;I decided to write this post after Ben Hong Tweeted out asking for good regex resources.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOtStrIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305674805757333504/-4nFHMCK_normal.jpg" alt="Ben Hong profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ben Hong
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/bencodezen"&gt;@bencodezen&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I've finally taken the plunge to gain better mastery of regex, but I'm a little surprised at the limited selection of learning resources available for it.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:18 PM - 17 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1416417046150193152" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1416417046150193152" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1416417046150193152" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Is this post going to make you a regex guru? No, but it will teach some of the pitfalls that developers succumb to. The example code shown in the post will be for regular expression in JavaScript, but you should be able to use them in your language of choice or at least the concepts if the syntax is slighlty different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-specific"&gt;
  &lt;/a&gt;
  Be Specific
&lt;/h2&gt;

&lt;p&gt;Know what you're trying to look for. This may sound obvious on the surface, but it's not always the case. Let's say I want to find instances of &lt;code&gt;three&lt;/code&gt; in a text file because we need to replace all instances of &lt;code&gt;three&lt;/code&gt; with the number &lt;code&gt;3&lt;/code&gt;. You've done a bit of Googling and or checked out &lt;a href="https://regex101.com"&gt;regex101.com&lt;/a&gt;. You're feeling pretty good so you write out this regular expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/three/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you're new to regular expressions, everything between the starting &lt;code&gt;/&lt;/code&gt; and the ending &lt;code&gt;/&lt;/code&gt; is the regular expression. The &lt;code&gt;g&lt;/code&gt; after the last &lt;code&gt;/&lt;/code&gt; means global, as in find all instances.&lt;/p&gt;

&lt;p&gt;You run the regular expression to match all instances of &lt;code&gt;three&lt;/code&gt; so it can be replaced with &lt;code&gt;3&lt;/code&gt;. You look at what got replaced in the text and you're a little perplexed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- There were three little pigs that live in their own houses to keep safe from the big bad wolf who is thirty-three years old.
&lt;/span&gt;&lt;span class="gi"&gt;+ There were 3 little pigs that live in their own houses to keep safe from the big bad wolf who is thirty-3 years old.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;three&lt;/code&gt; got replaced by &lt;code&gt;3&lt;/code&gt; everywhere in the file, but why was thirty-three replaced? You only wanted &lt;code&gt;three&lt;/code&gt;s replaced. And here we have our first lesson. Be specific. We only want to match when it's only the word &lt;code&gt;three&lt;/code&gt;. So we need to beef up this regex a little. We only want to find the &lt;code&gt;three&lt;/code&gt; when it's the first word in a sentence, has white space before and after it, or if it's the last word in a sentence. With that criteria, the regex might look like this now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?:\s&lt;/span&gt;&lt;span class="sr"&gt;|^&lt;/span&gt;&lt;span class="se"&gt;)(&lt;/span&gt;&lt;span class="sr"&gt;three&lt;/span&gt;&lt;span class="se"&gt;)(?:\s&lt;/span&gt;&lt;span class="sr"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\|&lt;/span&gt;&lt;span class="sr"&gt;.|,|;|:|'|"|!|"|'|$&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Don't worry if you're not familiar with all the syntax. The &lt;code&gt;^&lt;/code&gt; character means the beginning of a line of text. The &lt;code&gt;$&lt;/code&gt; character means the end of a line of text. For more information about &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;, see &lt;a href="https://www.regular-expressions.info/anchors.html"&gt;Start of String and End of String Anchors&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;When parts of a regex are contained by parentheses, it means a group, and what's in that group will return as a group as part of the match. If partos of a regex are contained by &lt;code&gt;(?:&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;, it means a non-capturing group as in, it won't show up in the matching regex object.&lt;/p&gt;

&lt;p&gt;Other things to note ar that &lt;code&gt;.&lt;/code&gt; means match anything. In our case, we're looking for a period in text, so we need to escape it with a backslash, &lt;code&gt;\.&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The grouped sections of the regex contain the &lt;code&gt;|&lt;/code&gt; character. In regex, that means or. For example &lt;code&gt;(?:\s|^)&lt;/code&gt; means find white space, &lt;code&gt;\s&lt;/code&gt; or the start of the text, &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another special regexe character that you may have noticed in the first group is &lt;code&gt;\s&lt;/code&gt;. This means a whitespace character. It can be a space or tab.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-too-greedy"&gt;
  &lt;/a&gt;
  Don't Be Too Greedy
&lt;/h2&gt;

&lt;p&gt;Greed is usually not a good thing and greed in regex is no exception. Let's say you're tasked with finding all the text snippets between double quotes. If you remember from the previous section, I mentioned that &lt;code&gt;.&lt;/code&gt; means any character. Another special character is  &lt;code&gt;+&lt;/code&gt;. It means at least one character. With this knowledge, you set out to build your regex. Also, for the sake of this example, we are going to assume the happy path, i.e. no double quoted strings withing double quoted strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchBetweenDoubleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/"&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;"/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're feeling good and you run this regex over the file you need to extract the texts from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hi there "this text is in double quotes". As well, "this text is in double quotes too".
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results come in and here are the texts that the regex matched for texts within double quotes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this text is in double quotes". As well, "this text is in double quotes too&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait a minute!? That's not what you were expecting. There are clearly two sets of text within double quotes, so what went wrong? Lesson number two. Don't be greedy.&lt;/p&gt;

&lt;p&gt;If we look again at the regex you created, it contains &lt;code&gt;.+&lt;/code&gt; which means literally match any character as many times as possible which is why we end up matching only &lt;code&gt;this text is in double quotes". As well, "this text is in double quotes too&lt;/code&gt; because &lt;code&gt;"&lt;/code&gt; is considered any character.&lt;/p&gt;

&lt;p&gt;There are two ways to approach this in our simplified scenario. We can use the non-greedy version of &lt;code&gt;+&lt;/code&gt;, by repalcing it with &lt;code&gt;+?&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchBetweenDoubleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/"&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.+&lt;/span&gt;&lt;span class="se"&gt;?)&lt;/span&gt;&lt;span class="sr"&gt;"/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which means find a &lt;code&gt;"&lt;/code&gt;, start a capturing group then find as many characters as possible before you hit a &lt;code&gt;"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another approach, which I prefer is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reMatchBetweenDoubleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/"&lt;/span&gt;&lt;span class="se"&gt;([^&lt;/span&gt;&lt;span class="sr"&gt;"&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;"/g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which means find a &lt;code&gt;"&lt;/code&gt;, start a capturing group then find as many characters as possible that aren't &lt;code&gt;"&lt;/code&gt; before you hit a &lt;code&gt;"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: Some new syntax. &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; are a way to say match any of the following things. In our case though, we're using it with &lt;code&gt;^&lt;/code&gt;, i.e. &lt;code&gt;[^&lt;/code&gt;, to say do not match any of the following things. I our case, we're saying to not match the &lt;code&gt;"&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;That's all for now! If you have questions about regexes, drop a comment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://regex101.com"&gt;regex101.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.regular-expressions.info"&gt;regular-expressions.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/mastering-regular-expressions/0596528124/"&gt;Matering Regular Expression 3rd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;Regular Expressions | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>regularexpressions</category>
      <category>regex</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Managing concurrency in Django using select_for_update</title>
      <author>CH S Sankalp jonna</author>
      <pubDate>Sun, 18 Jul 2021 02:37:39 +0000</pubDate>
      <link>https://dev.to/sankalpjonna/managing-concurrency-in-django-using-selectforupdate-1cg9</link>
      <guid>https://dev.to/sankalpjonna/managing-concurrency-in-django-using-selectforupdate-1cg9</guid>
      <description>&lt;p&gt;If you ever plan to run multiple processes for the same server code, it is inevitable that you have to deal with the age-old problem of managing concurrency.¬†&lt;/p&gt;

&lt;p&gt;The Django ORM is no different. If you call the save() method on an object, there is a good chance that two different instances of your server call this method on the same object at the same time causing your data to get corrupted.&lt;/p&gt;

&lt;p&gt;Consider the example of an account model that is responsible for storing how much bank balance somebody has in their account:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models

from django.contrib.auth.models import User
from django.db import models, transaction

class Account(models.Model):
    balance = models.IntegerField(default=0)
    user = models.ForeignKey(User)

    def deposit(self, amount):
        self.balance += amount
        self.save()

    def withdraw(self, amount):
        if amount &amp;gt; self.balance:
            raise errors.InsufficientFunds()
        self.balance -= amount
        self.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As you can see, there are two methods included in this model to deposit and withdraw money into the account.¬†&lt;/p&gt;

&lt;p&gt;Seems straightforward enough right? Nothing could go wrong here right? Its basic addition and subtraction right? WRONG!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-classic-concurrency-problem"&gt;
  &lt;/a&gt;
  The classic concurrency problem
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say there is an account with a Balance of $1000 in it which is accessible by 2 different users. Think of it as a joint account.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs say User1 is the earner and User2 is the spender. User1 deposited 100$ into the account and therefore the server invoked &lt;strong&gt;account.deposit(100)&lt;/strong&gt; but at the exact same time, User2 withdrew $100 thus invoking &lt;strong&gt;account.withdraw(100)&lt;/strong&gt;.¬†&lt;/p&gt;

&lt;p&gt;What should happen in this case? Ideally the balance at the end of these two transactions should remain 1000$ right? If you are running a single instance of your server, this would indeed be the case because these two transactions would always run one after another.&lt;/p&gt;

&lt;p&gt;But if these transactions are run by different instances of your server in parallel, there is a good chance that the balance at the end of it would be $900. Why does this happen?¬†&lt;/p&gt;

&lt;p&gt;Here are the steps that occur in these transactions&lt;/p&gt;

&lt;p&gt;Step 1: User1 retrieves the account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: User2 retrieves the account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000¬†&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 3: User1 deposits $100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000 + $100 = $1100&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 4: User2 withdraws $100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Balance is $1000 - $100 = $900&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In step 4, the balance that the server has loaded into memory is stale because it was already updated to $1100 in step 3 which the other server instance was not aware of and hence it thinks that the current balance is still $1000.¬†&lt;/p&gt;

&lt;p&gt;This is the classic concurrency problem and thankfully this age-old problem has an age-old solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-to-the-concurrency-problem"&gt;
  &lt;/a&gt;
  Solution to the concurrency problem
&lt;/h2&gt;

&lt;p&gt;The solution is quite simple. When a database operation is in progress, the object or the set of objects that are being updated must be locked until the operation is complete so that no other process can access this object/objects.&lt;/p&gt;

&lt;p&gt;This will prevent multiple instances of a server from loading stale data into memory and corrupting the database.¬†&lt;/p&gt;

&lt;p&gt;The best place to lock an object is to do it at the database level as opposed to the application level. This will protect your data from getting corrupted by other processes such as cron jobs as well.¬†&lt;/p&gt;

&lt;p&gt;Besides, when you run multiple workers of your Django application, it can be a pain to maintain locks at the application level because you would need to use some other 3rd party tool that stays in sync across all your workers to achieve a global lock.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-selectforupdate-in-django"&gt;
  &lt;/a&gt;
  What is select_for_update in Django?
&lt;/h2&gt;

&lt;p&gt;The select_for_update method offered by the Django ORM solves the problem of concurrency by returning a queryset that locks all the rows that belong to this queryset until the outermost transaction it is inside gets committed thus preventing data corruption.&lt;/p&gt;

&lt;p&gt;Here is how you can modify the Account model to use select_for_update and lock the account object:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models

from django.contrib.auth.models import User
from django.db import models, transaction

class Account(models.Model):
    balance = models.IntegerField(default=0)
    user = models.ForeignKey(User)

    def get_queryset(self):
        return self.__class__.objects.filter(id=self.id)

    @transaction.atomic()
    def deposit(self, amount):
        obj = self.get_queryset().select_for_update().get()
        obj.balance += amount
        obj.save()

    @transaction.atomic()
    def withdraw(self, amount):
        obj = self.get_queryset().select_for_update().get()
        if amount &amp;gt; obj.balance:
            raise errors.InsufficientFunds()
        obj.balance -= amount
        obj.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To acquire a lock, we need to fetch the object from the database using select_for_update. Operating on the &lt;strong&gt;self&lt;/strong&gt; object will not work since it has already been fetched. This is why the above code has a method defined called &lt;strong&gt;get_queryset&lt;/strong&gt; where we fetch the object that is being operated on at the time of withdrawal/deposit.&lt;/p&gt;

&lt;p&gt;Do keep in mind that for this to work, the database that you are using must support transactions and locks. If you are using SQLite, select_for_update is pretty much useless. My personal recommendation would be to use PostgreSQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-operations-after-introducing-selectforupdate"&gt;
  &lt;/a&gt;
  Database operations after introducing select_for_update
&lt;/h2&gt;

&lt;p&gt;The steps that have been defined in the concurrency problem above will now change to this:&lt;/p&gt;

&lt;p&gt;Step 1: User1 raises request to deposit $100¬†&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;User1 acquires a lock on the account&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Balance is $1000&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: User2 raises request to withdraw $100&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;User2 attempts to acquire a lock which fails because the account has already been locked by User1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User2 waits for the lock to be released&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 3: User1 deposits $100 into the account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Balance is $1000 + $100 = $1100&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lock on the account by User1 is released&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User2 acquires the lock on the account soon after.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 4: User2 withdraws $100 from the account&lt;/p&gt;

&lt;p&gt;- Balance is $1100 - $100 = $1000&lt;/p&gt;

&lt;p&gt;- Lock on the account by User2 is released.&lt;/p&gt;

&lt;p&gt;Step 5: Balance is $1000 and the data is free of corruption.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When you run multiple workers of your Django application, you will run into concurrency issues when the same queryset is updated by different processes at the same time.&lt;/p&gt;

&lt;p&gt;To prevent this, use select_for_update inside a transaction block to fetch your queryset so that it is locked until the transaction is completed.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sankalpjonna.com/learn-django/managing-concurrency-in-django-using-select-for-update"&gt;Originally posted on my blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
    </item>
    <item>
      <title>The Frontend Hitchhiker's Guide: 3rd Party Code</title>
      <author>Nicholas Mendez</author>
      <pubDate>Sun, 18 Jul 2021 02:27:35 +0000</pubDate>
      <link>https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-3rd-party-code-4fka</link>
      <guid>https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-3rd-party-code-4fka</guid>
      <description>&lt;h1&gt;
  &lt;a href="#theres-a-package-for-that"&gt;
  &lt;/a&gt;
  There's a package for that
&lt;/h1&gt;

&lt;p&gt;You don't need to build your entire web app from scratch. There are many libraries, tools, APIs and SDKs to help you along the way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3rd-party-resources"&gt;
  &lt;/a&gt;
  3rd Party Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Libraries

&lt;ul&gt;
&lt;li&gt;&lt;a href="#visualization-libraries"&gt;Visualization Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utility-libraries"&gt;Utility Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#graphics-frameworks"&gt;Graphics Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-systems"&gt;Template Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Tooling

&lt;ul&gt;
&lt;li&gt;&lt;a href="#static-site-generators"&gt;Static Site Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#task-runners"&gt;Task Runners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integrations

&lt;ul&gt;
&lt;li&gt;&lt;a href="#rest-apis"&gt;REST APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sdks"&gt;SDKs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h2&gt;

&lt;p&gt;The first stop of this series looked at UI libraries however there are other types of libraries out there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visualization-libraries"&gt;
  &lt;/a&gt;
  Visualization Libraries
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DqH5r9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r97afibuuhwudt0bnq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DqH5r9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r97afibuuhwudt0bnq2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While tables are cool, data visualizations like maps, or charts can often provide more insight and bring more visibility to latent trends. &lt;a href="https://www.highcharts.com/"&gt;Highcharts&lt;/a&gt; and &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; are often the gotos for charts but a newer library like &lt;a href="https://nivo.rocks/"&gt;nvio&lt;/a&gt; can somewhat offer a more stylized look to your charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#utility-libraries"&gt;
  &lt;/a&gt;
  Utility Libraries
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6si1Fvkj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ydw4ji4clmn24sgp846.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6si1Fvkj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ydw4ji4clmn24sgp846.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are libraries that are small and focused on making a specific problem easier for the developer. &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt; can make displaying time based data and perform various operations with it. &lt;a href="https://underscorejs.org/"&gt;Underscore&lt;/a&gt; adds a collection of functional programming primitives to JavaScript if that's your cup of tea. &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt; is similar in providing functions to make working with arrays, numbers objects easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphics-frameworks"&gt;
  &lt;/a&gt;
  Graphics Frameworks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nS8BhwTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5bzdyyx6d2yf85b6j5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nS8BhwTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5bzdyyx6d2yf85b6j5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These technologies allow you render beautiful experiences on the web. Whether it be AR/VR with &lt;a href="https://aframe.io/"&gt;AFrame&lt;/a&gt;, exciting browser games with &lt;a href="https://phaser.io/"&gt;phaser&lt;/a&gt; or everything else with the likes of &lt;a href="https://threejs.org/"&gt;three.js&lt;/a&gt; and &lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt;. These technologies let you tap into the power of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;canvas&lt;/a&gt; and &lt;a href="https://get.webgl.org/"&gt;webGL&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#template-systems"&gt;
  &lt;/a&gt;
  Template Systems
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJ91L-Ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bkidswnehuqrsua5ieh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJ91L-Ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bkidswnehuqrsua5ieh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the days of the earlier UI Libraries &lt;a href="https://en.wikipedia.org/wiki/Web_template_system#Client-side_systems"&gt;template systems&lt;/a&gt; were a often a popular companion. These libraries focused solely on adding data-binding and templating syntax that newer libraries like react offer out of the box. Some popular examples are &lt;a href="https://github.com/janl/mustache.js"&gt;mustache&lt;/a&gt; and &lt;a href="https://handlebarsjs.com/"&gt;handlebars&lt;/a&gt;, though they are more used on the server side in nodejs projects these days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;p&gt;This category is similar to the Build Tools stop in this series. They are command line software that deal how the project is built and deployed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-runners"&gt;
  &lt;/a&gt;
  Task Runners
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgwEc4wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exaa52e5t3qr1uchhzvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgwEc4wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exaa52e5t3qr1uchhzvp.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One can say task runners were the precursor to build tools which was explored in the 4th stop in this series. Task runners let you automate tasks like minification, transpilations, deployment and using other CLI tools. The two most popular task runners are &lt;a href="https://gruntjs.com/"&gt;grunt&lt;/a&gt; and &lt;a href="https://gulpjs.com/"&gt;gulp&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-site-generators"&gt;
  &lt;/a&gt;
  Static Site Generators
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SlVbj0oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh3lxw3m8is041j31370.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SlVbj0oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wh3lxw3m8is041j31370.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Static Site Generators (SSGs) are CLI tools which let you focus on writing content of static websites such as blogs. Typically they turn formatted markdown files to fully functional websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; is a modern static site generator written in react. Gatsby is different from other SSGs in that it offers features usually seen in frameworks, like components and integration with rest APIs. &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; is another popular SSG and &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt; sites boast really good performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrations"&gt;
  &lt;/a&gt;
  Integrations
&lt;/h2&gt;

&lt;p&gt;Integrations let you incorporate 3rd party products and services into you app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rest-apis"&gt;
  &lt;/a&gt;
  REST APIs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDny5-iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0no4xcq54kqgpj7l8cwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDny5-iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0no4xcq54kqgpj7l8cwt.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;REST Application Programming Interfaces are web services that your web app can use to provide features. For example the &lt;a href="https://pokeapi.co/"&gt;PokeAPI&lt;/a&gt; let's you create your own pokedex! There are many &lt;a href="https://github.com/public-apis/public-apis"&gt;public APIs&lt;/a&gt; available to power &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sdks"&gt;
  &lt;/a&gt;
  SDKs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmJBRkN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzren79ikfd9460vfc90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmJBRkN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzren79ikfd9460vfc90.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software Development Kits, are a collection of libraries and tooling that let you integrate your code with a service. You can use the &lt;a href="https://developer.twitter.com/en/docs"&gt;Twitter API&lt;/a&gt; to retrieve tweets or use the Firebase SDK to add &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; features to your application.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With that The Frontend Hitchhickers Guide is finally completed. It's my hope that this series helped you better understand the overwhelming frontend ecosystem. &lt;/p&gt;

&lt;p&gt;I would like to offer my heartfelt gratitude to everyone who shared, read and engaged with this series. &lt;br&gt;
The positive feedback went a long way to keep me writing for 8 weeks.&lt;/p&gt;

&lt;p&gt;You can find me on &lt;a href="https://twitter.com/snickdx"&gt;twitter&lt;/a&gt; to find out what I'm writing on next and I intend to share more web tech there from time to time as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9xpqJL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hxthv57v5gtuly9j71s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9xpqJL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hxthv57v5gtuly9j71s.png" alt="hitchhikers (6)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo in Image by &lt;a href="https://pixabay.com/photos/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=691581"&gt;Free-Photos&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=691581"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/dmnsgn/76878ba6903cf15789b712464875cfdc"&gt;Collection of WEB GL Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/node-js-task-runners-are-they-right-for-you-bb29ea30b7fa/"&gt;Task Runners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>React Project Folder Structure</title>
      <author>Kumar Nitesh</author>
      <pubDate>Sun, 18 Jul 2021 01:55:56 +0000</pubDate>
      <link>https://dev.to/knitesh/react-project-folder-structure-30cm</link>
      <guid>https://dev.to/knitesh/react-project-folder-structure-30cm</guid>
      <description>&lt;p&gt;Just throwing out the my current preference for a React project folder structure. I think this gives a good view and segregation of files for my react based projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1w8U5VGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh6xsqkofptez9fbxl5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1w8U5VGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh6xsqkofptez9fbxl5g.png" alt="image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Let's go through each folder inside the src folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. api-config&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;api-config&lt;/code&gt; consist of file containing the api endpoints. This folder doesn't have any logic. This helps having a single place for all api url end points and not to be scattered around in components, mostly inside useEffects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. assest&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;assets&lt;/code&gt; folder mostly consist of images(&lt;em&gt;.png,&lt;/em&gt;.svg..) and any other static files that might be needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. common&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;common&lt;/code&gt; folder is divided into more react specific folders.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Plb0PIpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9tjurqqpmy01h1tu8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Plb0PIpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9tjurqqpmy01h1tu8q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;components&lt;/code&gt; folder consists of individual components, which are atomic in nature and doesn't compose any other components.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hooks&lt;/code&gt; as the name suggest consists of custom hooks, that you might develop for your project &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. constants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;constants&lt;/code&gt; as the name suggest consist of constants used across project&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. modules&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;modules&lt;/code&gt; folder contains react components which are composed of smaller components defined under &lt;code&gt;common/components&lt;/code&gt;. For e.g. a &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; component which may look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Title&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Image&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;Menu&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pages&lt;/code&gt; are one to one map of the router routes. This is similar to the concept that &lt;code&gt;NextJS&lt;/code&gt; or &lt;code&gt;GatsbyJs&lt;/code&gt; takes.&lt;br&gt;
This is the bigger react component which presents a whole page. It might contains additional routing, so more nested pages. An example of this page will be dashboard page which might look like (in it's simples form)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageHeader&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageTopMenu&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageLeftNavigation&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;VisitorBlockChart&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;VistorLineChart&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;SomeOtherAwesomeComponent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;PageFooter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7. store or Global context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;store&lt;/code&gt; folder contains global store or global context that are getting used across product.&lt;/p&gt;

&lt;p&gt;On side note, if you have not used &lt;code&gt;Zustand&lt;/code&gt; as react-redux replacement, give it a try. Very simple and easy to use state management system and you don't have to wrap your component inside a &lt;code&gt;Provider&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://github.com/pmndrs/zustand"&gt;Zustand&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;strong&gt;test&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Test&lt;/code&gt; folder. And please don't give it just a lip service. It's fun to write and really helps you out during refactoring(more than TypeScript.. :P)&lt;br&gt;
&lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React-testing-library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. utils&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everything else to dump into(..not really, please don't do this). &lt;br&gt;
Store common utility functions inside this folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10.routes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A folder to contains all root level routes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;End Note&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This folder structure has evolved in last one year and really helping me out in couple of my current big project.It doesn't mean that It will not change again, but at least for my next project, I will continue to use this structure. &lt;/p&gt;

&lt;p&gt;Let me know what your preferences are these days?&lt;/p&gt;

&lt;p&gt;Till Next Time&lt;br&gt;
Kumar Nitesh&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/knitesh"&gt;@knitesh&lt;/a&gt;
 &lt;br&gt;
Twitter: @imknitesh&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>AWS Managed Airflow for your complex workflows</title>
      <author>Mohamed Fayaz</author>
      <pubDate>Sun, 18 Jul 2021 01:43:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-managed-airflow-for-your-complex-workflows-16d</link>
      <guid>https://dev.to/aws-builders/aws-managed-airflow-for-your-complex-workflows-16d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Airflow&lt;/strong&gt; is a tool to orchestrate complex workflow which was created at Airbnb in 2014. Airflow gained significant traction across several organizations in recent days due to the ability to create complex data pipelines with ease. The Airflow user interface (UI) serves as an operational dashboard to schedule, monitor and control any scripts or applications. &lt;/p&gt;

&lt;p&gt;Despite Airflow has been adopted by several organizations, deploying and managing the infrastructure has always been challenging and introduces operational overhead. To combat this problem many companies came up with the idea of introducing managed Airflow Infrastructure such as MWAA from Amazon Web Services (AWS). AWS takes the responsibility for keeping your infrastructure with almost no downtime and up-to-date security patches in place along with the latest version readily available to use. &lt;/p&gt;

&lt;p&gt;Besides, the other key benefits of using AWS MWAA is its elasticity, the ability to scale up and down based on the workload, and the easiness of building and deploying production-grade secure infrastructure with seamless integration with other AWS Services. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#airflow-basics"&gt;
  &lt;/a&gt;
  Airflow Basics
&lt;/h2&gt;

&lt;p&gt;Let's dive into some key concepts of Airflow :)&lt;/p&gt;

&lt;p&gt;In Airflow, workflows are defined in a Python file which is also referred to as DAG. You can imagine a DAG as a single job that can have multiple tasks in general. There are three common parts in every DAG those are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DAG Initialization &lt;/li&gt;
&lt;li&gt;Tasks &lt;/li&gt;
&lt;li&gt;Tasks Dependencies &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dag-directed-acyclic-graphs"&gt;
  &lt;/a&gt;
  DAG (Directed Acyclic Graphs)
&lt;/h3&gt;

&lt;p&gt;DAGs are written in Python and are often identified by their unique &lt;code&gt;dag_id&lt;/code&gt;. During the initialization, we specify when to start, scheduled time and so forth. Here is a simple DAG below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DAG&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.utils.dates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;days_ago&lt;/span&gt;

&lt;span class="n"&gt;dag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;dag_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sample_dag"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;days_ago&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Sample DAG"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;schedule_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'@daily'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Tasks perform different actions from executing a piece of Shell script to triggering EMR jobs. It is necessary to have a DAG before we create any task. Also, every task in a DAG is defined by an operator and similar to &lt;code&gt;dag_id&lt;/code&gt;, the &lt;code&gt;task_id&lt;/code&gt; would need to be unique within the DAG.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def function_a (**kwargs):
        name = kwargs['name']
        return f'hello {name} !!'

first_task = PythonOperator(
        task_id="first_task", 
        python_callable= function_a,
        op_kwargs= {'name': 'Fayaz'}, 
        dag= dag)

second_task = DummyOperator(task_id="second_task", dag=dag)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#task-dependencies"&gt;
  &lt;/a&gt;
  Task Dependencies
&lt;/h3&gt;

&lt;p&gt;Now the last part of the DAG is to create dependencies among the tasks. In this case, we are going to trigger the &lt;code&gt;first_task&lt;/code&gt; first and then trigger the &lt;code&gt;second_task&lt;/code&gt; as soon as the first_task completes. So it will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first_task &amp;gt;&amp;gt; second_task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we understood what is Airflow and how to create a simple DAG so let's spin up the AWS MWAA to run this DAG. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You need to use your AWS Account to perform the next few steps which may incur some charges.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-managed-airflow-instance-in-aws"&gt;
  &lt;/a&gt;
  Setting up the Managed Airflow Instance in AWS
&lt;/h2&gt;

&lt;p&gt;Before we create a new MWAA environment, we would need to create an &lt;code&gt;S3 bucket&lt;/code&gt; which must have versions enabled. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Go to &lt;a href="https://console.aws.amazon.com/mwaa/home?#create/environment"&gt;Managed Airflow Console&lt;/a&gt; and click Create Environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMFwYB_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fbj7j107m94ou85l42c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMFwYB_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fbj7j107m94ou85l42c.PNG" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Enter a &lt;strong&gt;name&lt;/strong&gt; and choose the Airflow version as &lt;strong&gt;2.0.2(Latest)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zExn4Jyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pu7o86x8vpu1v8pv7j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zExn4Jyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pu7o86x8vpu1v8pv7j.PNG" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Choose the S3 bucket - the one you have created &lt;br&gt;
&lt;strong&gt;Step 4.&lt;/strong&gt; For Dags folder type &lt;strong&gt;s3://{your-bucket-name}/dags&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Step 5.&lt;/strong&gt; Click &lt;strong&gt;Next&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vvheDJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76re3ydkbtxsudtf2a64.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vvheDJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76re3ydkbtxsudtf2a64.PNG" alt="5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6.&lt;/strong&gt; Click on &lt;strong&gt;Create MWAA VPC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vk3Q4iJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykk0gfszywk1h6ff5k1k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vk3Q4iJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykk0gfszywk1h6ff5k1k.PNG" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7.&lt;/strong&gt; It will take you to a page with a bunch of VPC, Subnets details. Click &lt;strong&gt;Create Stack&lt;/strong&gt; which may take a few mins to complete&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMwds58D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzmx0kyzz6vtuk3uadrn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMwds58D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzmx0kyzz6vtuk3uadrn.PNG" alt="7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 8.&lt;/strong&gt; Choose the VPC you just created and scroll down to enter environment class and other configurations&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAKokPCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dkbp4p132qou378blun.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAKokPCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dkbp4p132qou378blun.PNG" alt="8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 9.&lt;/strong&gt;  Choose &lt;strong&gt;Create a new role&lt;/strong&gt; and click Next&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UIGmy7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n7owa5xiwjdx17n45gm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UIGmy7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n7owa5xiwjdx17n45gm.PNG" alt="9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 10.&lt;/strong&gt; Verify all the details and click &lt;strong&gt;Create environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DkBJSKtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me0syi4hg0zj5oq7ki0n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DkBJSKtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me0syi4hg0zj5oq7ki0n.PNG" alt="10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generally, it takes 10-20 mins to spin up the Airflow Infrastructure so this is the time to get your coffee ‚òï before we deploy our very first DAG ü§£üòÇ &lt;/p&gt;

&lt;p&gt;üéâüéâüéâ When you refresh in a few minutes, you will see the environment status as &lt;code&gt;Available&lt;/code&gt; so click &lt;strong&gt;Open Airflow UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PbVWHtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8gcisbyxxd99qqtlkg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PbVWHtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8gcisbyxxd99qqtlkg.PNG" alt="11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBs9xyZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kuual4eq4zd8h990kwm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBs9xyZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kuual4eq4zd8h990kwm.PNG" alt="12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay!! Now we got our environment up and ready to go. So let's deploy our first DAG. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deploying-dags-in-the-aws-mwaa"&gt;
  &lt;/a&gt;
  Deploying DAGs in the AWS MWAA
&lt;/h2&gt;

&lt;p&gt;Step 1: To deploy the DAG, we would need to copy the &lt;code&gt;.py&lt;/code&gt; file to our &lt;code&gt;s3/dags&lt;/code&gt; location. Copy the below code and put that in a &lt;code&gt;.py&lt;/code&gt; file and save it as demo_dag.py in your local.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
Importing necessary modules
"""
from airflow.models import DAG
from airflow.utils.dates import days_ago
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator


"""
Initializing DAGs
"""
dag = DAG(
          dag_id="grepy_sample_dag",
          start_date=days_ago(2), 
          description="DAG which orchestrates a simple ML workflow",
          schedule_interval='@daily')

"""
Creating Tasks
"""
def function_a (**kwargs):
        name = kwargs['name']
        return f'hello {name} !!'

first_task = PythonOperator(
        task_id="first_task", 
        python_callable= function_a,
        op_kwargs= {'name': 'Fayaz'}, 
        dag= dag)

second_task = DummyOperator(task_id="second_task", dag=dag)

"""
Dependencies
"""
first_task &amp;gt;&amp;gt; second_task

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: Upload the &lt;code&gt;demo_dag.py&lt;/code&gt; file to your s3/dags folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3F7Lnp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crq0xbza1gw42khorhk0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3F7Lnp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crq0xbza1gw42khorhk0.PNG" alt="13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3: That's it!! Now again it may take a few minutes when you deploy a DAG for the first time, but it will look like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g15ZVb5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1w73kw017364fr44n2e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g15ZVb5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1w73kw017364fr44n2e.PNG" alt="14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you toggle on for the first time, the DAG will automatically be triggered so click on the DAG name which will take you to the tree view where you see the job status and task dependencies. &lt;/p&gt;

&lt;p&gt;One of the best parts is you can see all the logs when you go to the Graph view which is also available in CloudWatch so you can ingest that to your Splunk or ELK for further analysis. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--smxCLv2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuw34qgavjfd1rcfwl4g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--smxCLv2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuw34qgavjfd1rcfwl4g.PNG" alt="15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, we took a high-level look at Airflow basics and we dived into AWS Managed Airflow along with a sample DAG deployment which runs a simple Python function. Similarly, you can orchestrate any type of task using various operators which is available on any Airflow infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-further-reading"&gt;
  &lt;/a&gt;
  For further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://aws.amazon.com/managed-workflows-for-apache-airflow/getting-started/"&gt;https://aws.amazon.com/managed-workflows-for-apache-airflow/getting-started/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for your time and happy learning !! üòä &lt;/p&gt;

</description>
      <category>aws</category>
      <category>airflow</category>
      <category>python</category>
      <category>mlops</category>
    </item>
    <item>
      <title>Resources to master 5 popular react libraries</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 18 Jul 2021 00:26:31 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/resources-to-master-5-popular-react-libraries-2n81</link>
      <guid>https://dev.to/ayabouchiha/resources-to-master-5-popular-react-libraries-2n81</guid>
      <description>&lt;p&gt;Hello everybody, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt; today, I'm going to share with you useful resources to learn 5 libraries that you will use at least one of them in your next react project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactrouter"&gt;
  &lt;/a&gt;
  react-router
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React Router&lt;/strong&gt; is used for developing Single Page Web Applications. It is used to define multiple routes in the application. When a user types a specific URL into the browser, and if this URL path matches any 'route' inside the router file, the user will be redirected to that particular route.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.javatpoint.com/react-router"&gt;more details&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-reactrouter"&gt;
  &lt;/a&gt;
  Resources to learn react-router
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/react-router-cheatsheet/"&gt;react-router-cheatsheet&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Law7wfdg_ls"&gt;react-router by Dev Ed (30 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Jppuj6M1sJ4"&gt;react router crash course (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#material-ui"&gt;
  &lt;/a&gt;
  Material UI
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Material UI&lt;/strong&gt; is the world's most popular  UI framework, additionally, it is based on Google Material Design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-material-ui"&gt;
  &lt;/a&gt;
  Resources to learn material UI
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://material-ui.com/t"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=vyJU9efvUtQ"&gt;Material UI React tutorial (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xoz31I1FuiY"&gt;Material UI React crash course (50min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=0KEpWHtG10M&amp;amp;list=PL4cUxeGkcC9gjxLvV4VEkZ6H6H4yWuS58"&gt;Material UI Tutorials By The Net Ninja (playlist: 18 videos)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  Redux
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt; is a predictable state container designed to help you write JavaScript apps that behave consistently across client, server, and native environments and are easy to test. &lt;a href="https://blog.logrocket.com/why-use-redux-reasons-with-clear-examples-d21bffd5835/"&gt;more details&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-lean-redux"&gt;
  &lt;/a&gt;
  Resources to lean Redux
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://redux.js.org/"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=CVpUuw9XSjY"&gt;Redux for begginers by Dev Ed (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=93p3LxR9xfM"&gt;Redux crash course by Travesy Media (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=9boMnm5X9ak&amp;amp;list=PLC3y8-rFHvwheJHvseC3I0HuYI2f46oAK"&gt;Redux tutorial by Codevolution (playlist: 30 vidoes)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-icons"&gt;
  &lt;/a&gt;
  React Icons
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;React Icons&lt;/strong&gt; is a library that provides popular icons as React components for your React applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-lean-react-icons"&gt;
  &lt;/a&gt;
  Resources to lean React Icons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://react-icons.github.io/react-icons/"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=aor9hlcODUE"&gt;Tutorial by Eric (7 min) &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4l0nsK4ezNc"&gt;React icons by Codevolution  (7 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#styled-components"&gt;
  &lt;/a&gt;
  Styled Components
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;styled-components&lt;/strong&gt; is a library that lets you write CSS code in your Javascript &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-styled-components"&gt;
  &lt;/a&gt;
  Resources to learn Styled components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://styled-components.com/"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/eQkkoUEVY-Q"&gt;Styled Components React Tutorial by Adrian (10 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=syqw5UJrfoc"&gt;React styled-components tutorial by Ben Awad (15 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=-FZzPHSLauc"&gt;styled component tutorial by Pedrotech (25 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;React router&lt;/strong&gt; is used to define multiple routes in a single page application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Material UI&lt;/strong&gt; is a UI framework based on Google Material Design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt; is a predictable state container &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;React Icons&lt;/strong&gt; provides you popular icons as React components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Styled-components&lt;/strong&gt; lets you write CSS in your Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is House Of Iot?</title>
      <author>Ronald Colyar</author>
      <pubDate>Sun, 18 Jul 2021 00:22:44 +0000</pubDate>
      <link>https://dev.to/ronaldthenerdsuperuser/what-is-house-of-iot-4jm4</link>
      <guid>https://dev.to/ronaldthenerdsuperuser/what-is-house-of-iot-4jm4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/House-of-IoT"&gt;"House of Iot"&lt;/a&gt; is a community and software collection that I started to encourage/assist autodidacts with home/property automation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-house-of-iot-provide-other-than-a-community-of-people"&gt;
  &lt;/a&gt;
  What does House Of Iot provide other than a community of people?
&lt;/h2&gt;

&lt;p&gt;House Of Iot provides a tutorials for common/non-common smart devices that aims to be extremely simplified , along with the matching sustainable software. &lt;/p&gt;

&lt;p&gt;The simple tutorials adds a nice layer of abstraction for those who don't consider themselves "tech savvy" to come and learn how to build home automation/security. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation-for-starting-this-project"&gt;
  &lt;/a&gt;
  Motivation for starting this project?
&lt;/h2&gt;

&lt;p&gt;Not too long ago I began trying to build small smart devices for my home that will make things easier to accomplish and more accessible.While doing the research regarding circuitry, I found that there was a large barrier to entry to learn about safe micro-electronics/embedded systems. This motivated me to make an attempt to make things easier for new comers in the I.O.T(Internet Of Things) realm.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack?
&lt;/h1&gt;

&lt;p&gt;House of Iot will use what ever is best for the job and will continue to evolve. Currently for software that is performance dependent(CPU Bound) we choose to use Rust due to the safe nature and speed, for things that aren't performance dependent(IO Bound) we like using python for simplicity.The web client is written currently using React(typescript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-costs"&gt;
  &lt;/a&gt;
  Software costs?
&lt;/h2&gt;

&lt;p&gt;House of Iot is 100% free and will always be free!! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visibility"&gt;
  &lt;/a&gt;
  Visibility?
&lt;/h2&gt;

&lt;p&gt;House of Iot is open-source and will always be open source!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-take-a-look-at-the-software"&gt;
  &lt;/a&gt;
  Want to take a look at the software?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/House-of-IoT"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iot</category>
      <category>rust</category>
      <category>python</category>
      <category>embeddedsystems</category>
    </item>
    <item>
      <title>Getting Started with Lodash in JavaScript</title>
      <author>Rahul Banerjee</author>
      <pubDate>Sat, 17 Jul 2021 23:52:12 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/getting-started-with-lodash-in-javascript-2ghl</link>
      <guid>https://dev.to/rahulbanerjee99/getting-started-with-lodash-in-javascript-2ghl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#why-use-lodash"&gt;
  &lt;/a&gt;
  Why use lodash
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It reduces the lines of code significantly &lt;/li&gt;
&lt;li&gt;Supports common operations done on Objects and Arrays&lt;/li&gt;
&lt;li&gt;Supports common operations on strings&lt;/li&gt;
&lt;li&gt;Supports generic functions&lt;/li&gt;
&lt;li&gt;Trusted by other developers. It has &lt;a href="https://github.com/lodash/lodash"&gt;50k+ ‚≠êÔ∏è&lt;/a&gt; on GitHub&lt;/li&gt;
&lt;li&gt;Well Documented&lt;/li&gt;
&lt;li&gt;You don't need to learn any new syntax or concepts or anything. It uses plain old JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#install-lodash"&gt;
  &lt;/a&gt;
  Install lodash
&lt;/h3&gt;



&lt;p&gt;&lt;code&gt;npm install lodash&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-values-in-deeply-nested-objects"&gt;
  &lt;/a&gt;
  Accessing values in deeply nested objects
&lt;/h3&gt;

&lt;p&gt;When dealing with API responses, more often than not, the data you'd like to access will be deeply nested.&lt;/p&gt;

&lt;p&gt;Consider the following example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zig1tYbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5h0iu0kfn082es9pdca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zig1tYbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5h0iu0kfn082es9pdca.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a sample response from the &lt;a href="https://jsonapi.org/examples/"&gt;JSON API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to access the title, we could do something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-REXw4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlnieteziumsvbk2mjs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-REXw4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlnieteziumsvbk2mjs0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works fine but we made a big assumption: &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;'deepObject' , 'data' , 'attributes' ,'title' are all defined&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;However, it is possible that any of them might be undefined. This would throw an error. If &lt;strong&gt;'attributes'&lt;/strong&gt; is empty or undefined, then &lt;strong&gt;'attributes.title'&lt;/strong&gt; would not exist.&lt;/p&gt;

&lt;p&gt;Lodash's get function can be used to handle the error gracefully. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIQS4i_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfl7rqwj1h7i4ubst2dj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIQS4i_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfl7rqwj1h7i4ubst2dj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the second console statement, we try to access the element at index 3 in data but this doesn't exist. Therefore 'Value doesn't exist' is printed in the console.&lt;/p&gt;

&lt;p&gt;In the third console statement, we try to print the value for &lt;strong&gt;'title'&lt;/strong&gt; in &lt;strong&gt;'data[0]'&lt;/strong&gt; but &lt;strong&gt;'data[0]'&lt;/strong&gt; doesn't have any attribute called &lt;strong&gt;'title'&lt;/strong&gt;. Similar to the above case, 'Value doesn't exist' is printed in the console. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-attributes-to-deeply-nested-objects"&gt;
  &lt;/a&gt;
  Adding attributes to deeply nested Objects
&lt;/h3&gt;

&lt;p&gt;We will work with the same object we were working with earlier.&lt;/p&gt;

&lt;p&gt;If we want to add a new key-value pair for subtitle inside 'attributes', we could do something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ddR8GrZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeyvzigs5kwci1qhf2gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ddR8GrZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeyvzigs5kwci1qhf2gy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, we made a similar assumption that the entire path is defined. However, if any part of the path is undefined, it will throw an error. &lt;/p&gt;

&lt;p&gt;We can use Lodash's set function to handle this error gracefully. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the path doesn't exist, it will create the path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiHu5abk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jklalchrdnpac2szwyjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiHu5abk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jklalchrdnpac2szwyjg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;set is an in-place function, i.e it updates the input object. Our new object is below &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zuHt-LG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4dvny9ipbtzqptizadr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuHt-LG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4dvny9ipbtzqptizadr.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The second set operation added 3 elements (2 empty elements) to the &lt;strong&gt;'data'&lt;/strong&gt; array while the third set operation added an attribute &lt;strong&gt;'subtitle'&lt;/strong&gt; to &lt;strong&gt;'data[0]'&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-if-a-path-exists"&gt;
  &lt;/a&gt;
  Check if a path exists
&lt;/h3&gt;

&lt;p&gt;We can use the has function to check if a path exists in an object. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5QUOMDFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xjox667vk9mi35r9nfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QUOMDFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xjox667vk9mi35r9nfi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invert-keys-an-values-of-an-object"&gt;
  &lt;/a&gt;
  Invert Keys an Values of an object
&lt;/h3&gt;

&lt;p&gt;Lodash's invert function will invert the keys and values. Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWD0drNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd63fm6zazlk9is0bi4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWD0drNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd63fm6zazlk9is0bi4r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-object-from-another-object"&gt;
  &lt;/a&gt;
  Create an object from another object
&lt;/h3&gt;

&lt;p&gt;If you have a object and want to create an object with some of the keys from the original object, you can use Lodash's pick function. It doesn't add the key and value directly, if the path provided is nested, it will recreate the path as well. If you are confused, refer to the example below&lt;/p&gt;

&lt;p&gt;Below is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's work with the &lt;a href="https://jsonapi.org/examples/"&gt;JSON API&lt;/a&gt; response again. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBeie9x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cbhbcrxnlocvva7ogaa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBeie9x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cbhbcrxnlocvva7ogaa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of directly adding title directly, it recreate the path 'data[0].attributes.title'. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deep-copy-of-an-object"&gt;
  &lt;/a&gt;
  Deep Copy of an Object
&lt;/h3&gt;

&lt;p&gt;The cloneDeep function creates a deep copy of an object&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvLoDD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7897r48pq10vwc8ktfcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvLoDD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7897r48pq10vwc8ktfcp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the original object remains unchanged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compare-object-irrespective-of-the-order-of-the-keys"&gt;
  &lt;/a&gt;
  Compare Object irrespective of the order of the keys
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NSoA2Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51vgjpwt4rr8b96d58x3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NSoA2Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51vgjpwt4rr8b96d58x3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-set-operations-on-arrays"&gt;
  &lt;/a&gt;
  Some Set operations on Arrays
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#find-the-elements-in-array1-but-not-in-array2"&gt;
  &lt;/a&gt;
  Find the elements in array1 but not in array2
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ke_6oRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jcdba8yzawt89dkdphy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ke_6oRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jcdba8yzawt89dkdphy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find-common-elements-in-two-arrays"&gt;
  &lt;/a&gt;
  Find Common elements in two arrays
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6AvhxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mauomlp8uk4b377oorai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6AvhxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mauomlp8uk4b377oorai.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find-the-difference-between-two-arrays"&gt;
  &lt;/a&gt;
  Find the difference between two arrays
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aHVeeLAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoislpnfyj879hlznccu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aHVeeLAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoislpnfyj879hlznccu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zip"&gt;
  &lt;/a&gt;
  Zip
&lt;/h3&gt;

&lt;p&gt;This is similar to the zip function in Python.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0y8E9JdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4b3yzqesg4vmnvt4uny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0y8E9JdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4b3yzqesg4vmnvt4uny.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-unique-elements-of-an-array"&gt;
  &lt;/a&gt;
  Get unique elements of an array
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xO9-nwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgs3a1zeozf007iq2kx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xO9-nwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgs3a1zeozf007iq2kx4.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Lodash has a bunch of other useful functions, refer to their &lt;a href="https://lodash.com/docs/4.17.15"&gt;documentation&lt;/a&gt; for more &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>JavaScript Inside Story : More about Prototypes and Inheritance</title>
      <author>mayankav</author>
      <pubDate>Sat, 17 Jul 2021 23:39:10 +0000</pubDate>
      <link>https://dev.to/mayankav/javascript-inside-story-more-about-prototypes-and-inheritance-3a9l</link>
      <guid>https://dev.to/mayankav/javascript-inside-story-more-about-prototypes-and-inheritance-3a9l</guid>
      <description>&lt;p&gt;I almost picked the title "&lt;strong&gt;&lt;em&gt;JavaScript's Factory for Everything&lt;/em&gt;&lt;/strong&gt;", but then I changed my mind after reading my older post. Just trying to push my &lt;a href="https://dev.to/mayankav/is-everything-in-javascript-an-object-1alg"&gt;last post&lt;/a&gt; here. I don't feel very comfortable writing this, not because I don't understand the stuff but because its something that pretends to be something it really is not. Protesting that prototypal inheritance is not inheritance at all does not change anything. Perhaps if it were not for the comfort of OOPers, it could have been better called &lt;strong&gt;&lt;em&gt;prototypal wiring&lt;/em&gt;&lt;/strong&gt; or maybe &lt;strong&gt;&lt;em&gt;prototypal delegation&lt;/em&gt;&lt;/strong&gt;. If you're coming from Java, how would you answer the question, "&lt;strong&gt;&lt;em&gt;Why does Java not suppport multiple class inheritance?&lt;/em&gt;&lt;/strong&gt;". Well, you'd point out &lt;a href="https://www.cs.cornell.edu/courses/JavaAndDS/abstractInterface/05diamond.pdf"&gt;the Diamond Problem&lt;/a&gt;, won't you? Given that JavaScript doesn't know this problem how would you explain it not being able to support such a thing? PS: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model#no_multiple_inheritance"&gt;It can be done but it has its own issues&lt;/a&gt;. Despite its appearance resembling to that of classical inheritance, JavaScript has its own reasons for (not) being able to do certain things. Not asking you to unlearn the classical inheritance take but then to understand JavaScript's way of handling prototypal inheritance you need to drop those intuitive assumptions atleast for the time being. ‚Äç‚Äç&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3BHn5ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka1pqwg2tobrjion2enk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3BHn5ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka1pqwg2tobrjion2enk.png" alt="Just forget it"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
I dont want to recall the time when I started logging objects in the console only to check what's really inside of them. I mean I knew objects had their properties but I also found stuff like __proto__, constructor, prototype, __proto__ again. It would not stop. I kept on digging and it kept on throwing more and then I realized I was willingly stuck in a loop of references. Let me take help of an analogy to explain this to you. Lets assume that any function you create in JavaScript is a House to be put on rent. The House then comes with a bunch of keys ( &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; ). The bunch of keys has another bunch of small master keys ( &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt;¬†) inside it and has a label ( &lt;strong&gt;&lt;em&gt;constructor&lt;/em&gt;&lt;/strong&gt; ) with the name of the house on it. This bunch of keys is given to the tenants ( &lt;strong&gt;&lt;em&gt;objects created from the function&lt;/em&gt;&lt;/strong&gt; )¬†and the tenants then keep it with them and they like to call it guess what ? &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt;. Heck! confusing. Its not that easy to build analogies here. Just take a look at the diagram I came up with.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzRw9Srf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b8b48mhm1v6ap0qa21u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzRw9Srf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b8b48mhm1v6ap0qa21u.gif" alt="Prototypes in JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;&lt;a href="https://www.slideshare.net/Mayankav1/javascript-function-prototype"&gt;Check out the Ppt&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;What you see is what I am going to pen down now. Consider a class &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; or simply a function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;. The function when created, gets two properties by default namely &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; is a property that is available on everything in JS be it a primitive or an object. Go ahead! try that in your console. It contains some information from the function that was responsible for creating the primitive/object in the first place. Since a function is nothing more than a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#:~:text=Every%20JavaScript%20function%20is%20actually%20a%20Function%20object.%20This%20can%20be%20seen%20with%20the%20code%20(function()%7B%7D).constructor%20%3D%3D%3D%20Function%2C%20which%20returns%20true."&gt;Function object&lt;/a&gt;, the &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property on each and every function takes its value from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#instance_methods"&gt;Function.prototype&lt;/a&gt;. What about the &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; property? In contrast with &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; which is available on anything and everything in JS, &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; is only available on JavaScript functions. The &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; property is an object ( only exception being Function.prototype which is a native function ) with two default properties namely &lt;strong&gt;&lt;em&gt;constructor&lt;/em&gt;&lt;/strong&gt; ( refers to the Function/Class itself to which prototype belongs ) and &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; . The purpose of &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; on &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt; is nothing different from that on the function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; itself. &lt;strong&gt;&lt;em&gt;A.prototype.__proto__&lt;/em&gt;&lt;/strong&gt; contains information about the function that was responsible for the creation of &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt;. Since this object (A.prototype) was automatically created, the function/class responsible for its creation was &lt;strong&gt;&lt;em&gt;Object&lt;/em&gt;&lt;/strong&gt;. No wonder why every &lt;strong&gt;&lt;em&gt;SomeFunction.prototype.__proto__&lt;/em&gt;&lt;/strong&gt; gets a default value of &lt;strong&gt;&lt;em&gt;Object.prototype&lt;/em&gt;&lt;/strong&gt;. To verify this, try creating an object using the object lietral syntax like so. ‚Äç&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/VwbpMVY"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;&lt;br&gt;

&lt;br&gt;
Moving on to instantiating the constructor function, lets do &lt;strong&gt;&lt;em&gt;let objA = new A();&lt;/em&gt;&lt;/strong&gt; to create an object from the function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;objA&lt;/em&gt;&lt;/strong&gt; gets a &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; . We just discussed how everything in JS gets this default property with a value of &lt;strong&gt;&lt;em&gt;SomeFunction.prototype&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;SomeFunction&lt;/em&gt;&lt;/strong&gt; being the function/class responsible for its creation. No points for guessing its value in this case. Its &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt;. ‚Äç&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;center&gt;&lt;h6&gt;.prototype only exists on functions. &lt;a href="https://codepen.io/mayankav/pen/VwbpMVY"&gt;Try on Codepen&lt;/a&gt;.&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;



&lt;h2&gt;
  &lt;a href="#prototypal-inheritance%E2%80%8D"&gt;
  &lt;/a&gt;
  Prototypal Inheritance‚Äç
&lt;/h2&gt;

&lt;p&gt;All this while what I've been trying to tell you is that &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; is just the pen name of &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt;. A &lt;strong&gt;&lt;em&gt;constructor's prototype&lt;/em&gt;&lt;/strong&gt; becomes it's &lt;strong&gt;&lt;em&gt;object's __proto__&lt;/em&gt;&lt;/strong&gt; . How does this help? Well since its not the copy but the reference to a function's &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; which is shared amongst objects created using the function, any new function/property on the &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; of a function is readily available on the object's &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; as well. Though its not a good practice to monkey patch properties on the &lt;strong&gt;&lt;em&gt;protoype&lt;/em&gt;&lt;/strong&gt; of a constructor function. &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes#:~:text=You%20will%20rarely%20see%20properties%20defined%20on%20the%20prototype%20property%2C%20because%20they%20are%20not%20very%20flexible%20when%20defined%20like%20this.%20For%20example%20you%20could%20add%20a%20property%20like%20so%3A"&gt;Read more about that here&lt;/a&gt;. Interestingly you dont even need to access the patched property via &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; . You just access it on the object like &lt;strong&gt;&lt;em&gt;objA.somePatchedFunction()&lt;/em&gt;&lt;/strong&gt; and it gets resolved from &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; in the chain. This sounds fun but can very quickly get on the nerves when some object starts patching functions/properties on its &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property causing a &lt;strong&gt;&lt;em&gt;prototype namespace pollution&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Anyway, did you think of this? What happens when you manually alter the &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property on &lt;strong&gt;&lt;em&gt;objA&lt;/em&gt;&lt;/strong&gt; like &lt;strong&gt;&lt;em&gt;objA.__proto__ = { random : 10 }&lt;/em&gt;&lt;/strong&gt; ? Apparently, the link from the function &lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt; breaks and you can no more access the functions patched on &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt; and then you get access to properties of the newly set object (&lt;strong&gt;&lt;em&gt;{ random : 10 }&lt;/em&gt;&lt;/strong&gt;) like &lt;strong&gt;&lt;em&gt;objA.random&lt;/em&gt;&lt;/strong&gt;. Apart of assigning a value directly to &lt;strong&gt;&lt;em&gt;objA.__proto__&lt;/em&gt;&lt;/strong&gt; there exist lawful functions (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"&gt;Object.setPrototypeOf&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"&gt;Object.create&lt;/a&gt;) in JavaScript to help you do this some of which are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#:~:text=Ill-performing.%20Should%20be%20deprecated."&gt;on the verge of being deprecated&lt;/a&gt; but that's not my concern for this blog post. This does not even seem very helpful. Why don't we try altering the &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; property on &lt;strong&gt;&lt;em&gt;A.prototype&lt;/em&gt;&lt;/strong&gt;? Well, that sounds like a plan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patchedP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//  Object.create sets (Child.prototype).__proto__ = Parent.prototype&lt;/span&gt;
&lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Resetting the child constructor may/may not be needed&lt;/span&gt;
&lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patchedC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 50  //undefined if no Parent.call(this)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;patchedP&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/qBmRzzj"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;For the ease of understanding lets try to alter &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt;. Let me tell you what am I trying to do. When I create a new object using the Child constructor function, I can say something like &lt;strong&gt;&lt;em&gt;new Child().c&lt;/em&gt;&lt;/strong&gt; and get the expected value i.e. &lt;strong&gt;&lt;em&gt;200&lt;/em&gt;&lt;/strong&gt;. What I want is to get a valid value on doing so &lt;strong&gt;&lt;em&gt;new Child().patchedP&lt;/em&gt;&lt;/strong&gt; ie. &lt;strong&gt;&lt;em&gt;100&lt;/em&gt;&lt;/strong&gt;. Do you think I should simply make an assignment like so &lt;strong&gt;&lt;em&gt;Child.prototype = Parent.prototype&lt;/em&gt;&lt;/strong&gt;¬†? Well , no because then when you want to patch some functions on &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt;, you will end up patching the orignal &lt;strong&gt;&lt;em&gt;Parent.prototype&lt;/em&gt;&lt;/strong&gt;. Changes on Child should not impact Parent or you can't call it inheritance. I better use an &lt;strong&gt;&lt;em&gt;intermediary object&lt;/em&gt;&lt;/strong&gt; to set the &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt; of child. That's why we do this &lt;strong&gt;&lt;em&gt;Child.prototype = Object.create(Parent.prototype)&lt;/em&gt;&lt;/strong&gt;. Now when you patch the Child's &lt;strong&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/strong&gt;, it won't impact the Parent (you only patch the intermediary object). &lt;/p&gt;

&lt;p&gt;Did you notice the call to Parent function within the Child function (kind of super if you're coming from Java) ? Try commenting it out in the &lt;a href="https://codepen.io/mayankav/pen/qBmRzzj"&gt;pen&lt;/a&gt;. That shall leave you with no access to Parent's instance properties i.e. &lt;strong&gt;&lt;em&gt;p&lt;/em&gt;&lt;/strong&gt; here. When you call the Parent with '&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;' (&lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; refers to the newly created object when you say &lt;strong&gt;&lt;em&gt;new Child()&lt;/em&gt;&lt;/strong&gt;), the Parent function executes to add the property &lt;strong&gt;&lt;em&gt;p&lt;/em&gt;&lt;/strong&gt; on &lt;strong&gt;&lt;em&gt;new Child()&lt;/em&gt;&lt;/strong&gt;. Now in every new instance you create from the Child function, you get access to instance properties of Parent &amp;amp; Child both along with patched properties of both &lt;strong&gt;&lt;em&gt;Parent.prototype&lt;/em&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt;. Additionally, now patching &lt;strong&gt;&lt;em&gt;Child.prototype&lt;/em&gt;&lt;/strong&gt; will not impact Parent. Now that's something we can kind of call inheritance. Just to touch upon the concept of &lt;strong&gt;&lt;em&gt;prototype chaining&lt;/em&gt;&lt;/strong&gt;, it goes without saying that if you try to access &lt;strong&gt;&lt;em&gt;aChild.randomProperty&lt;/em&gt;&lt;/strong&gt; given &lt;strong&gt;&lt;em&gt;aChild = new Child();&lt;/em&gt;&lt;/strong&gt; , it shall be first looked up in the property list of &lt;strong&gt;&lt;em&gt;aChild&lt;/em&gt;&lt;/strong&gt; itself, if not found it should be searched for in &lt;strong&gt;&lt;em&gt;aChild.__proto__&lt;/em&gt;&lt;/strong&gt; (the intermediary object we discussed earlier), next in &lt;strong&gt;&lt;em&gt;aChild.__proto__.__proto__&lt;/em&gt;&lt;/strong&gt; until the search reaches &lt;strong&gt;&lt;em&gt;Object.prototype&lt;/em&gt;&lt;/strong&gt; which is the last man standing in the prototype chain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bt6sZHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qmf4qp1wssxc3iu5jjc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bt6sZHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qmf4qp1wssxc3iu5jjc.PNG" alt="A look at new Child()‚Äç"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;A look at new Child()‚Äç&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;



&lt;h2&gt;
  &lt;a href="#take-away"&gt;
  &lt;/a&gt;
  Take Away
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Every¬†function's¬†&lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt;¬†property¬†is¬†of¬†type¬†-¬†object¬†except¬†function¬†Function.¬†(It's¬†&lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt;¬†property¬†is¬†of¬†type¬†-¬†function)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every¬†function's¬†&lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt;¬†property¬†is¬†always¬†equal¬†to¬†&lt;strong&gt;&lt;em&gt;Function.prototype&lt;/em&gt;&lt;/strong&gt;¬†and¬†hence¬†of¬†the¬†type¬†-¬†Function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Objects¬†don't¬†have¬†&lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt;¬†property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every¬†object's¬†&lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt;¬†property¬†is¬†of¬†type¬†object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An¬†object's¬†&lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt;¬†property¬†takes¬†its¬†value¬†from¬†the¬†&lt;strong&gt;&lt;em&gt;.prototype&lt;/em&gt;&lt;/strong&gt;¬†property¬†of¬†the¬†Function¬†from¬†which¬†it¬†was¬†created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If¬†an¬†object¬†was¬†not¬†created¬†using¬†any¬†particular¬†function¬†(created¬†using¬†object¬†literal¬†or¬†using¬†Object.create(Object.prototype)),¬†the¬†value¬†of¬†it's¬†&lt;strong&gt;&lt;em&gt;.__proto__&lt;/em&gt;&lt;/strong&gt;¬†property¬†will¬†be¬†&lt;strong&gt;&lt;em&gt;Object.prototype&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create¬†an¬†object¬†from¬†a¬†class¬†&lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;¬†or¬†a¬†function¬†&lt;strong&gt;&lt;em&gt;A&lt;/em&gt;&lt;/strong&gt;¬†:¬†let¬†&lt;strong&gt;&lt;em&gt;objA¬†=¬†Object.create(A.prototype);&lt;/em&gt;&lt;/strong&gt;¬†or¬†&lt;strong&gt;&lt;em&gt;let¬†objA¬†=¬†new¬†A();&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In ES5, inheritance¬†looks like so¬†:¬†&lt;strong&gt;&lt;em&gt;let¬†anObjectFromParent¬†=¬†Object.create(Parent.prototype);&lt;/em&gt;&lt;/strong&gt;¬†&lt;strong&gt;&lt;em&gt;Child.prototype¬†=¬†anObjectFromParent;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In ES6, the &lt;strong&gt;&lt;em&gt;extends&lt;/em&gt;&lt;/strong&gt; keyword plays the role of &lt;strong&gt;&lt;em&gt;Object.create(Parent.prototype)&lt;/em&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;super&lt;/em&gt;&lt;/strong&gt; keyword invokes the constructor of the parent.‚Äç‚Äç&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accessing &lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; directly on an object is not as optimal as using the &lt;strong&gt;&lt;em&gt;new&lt;/em&gt;&lt;/strong&gt; keyword, &lt;strong&gt;&lt;em&gt;Object.create&lt;/em&gt;&lt;/strong&gt; (to set) and &lt;strong&gt;&lt;em&gt;Object.getPrototypeOf&lt;/em&gt;&lt;/strong&gt; (to get).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;__proto__&lt;/em&gt;&lt;/strong&gt; is just a way to programmatically access an object's &lt;strong&gt;&lt;em&gt;[[Prototype]]&lt;/em&gt;&lt;/strong&gt; internal slot which is otherwise not accessible in code.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#originally-posted-here-"&gt;
  &lt;/a&gt;
  Originally Posted Here -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/javascript-prototypal-inheritance"&gt;https://mayankav.webflow.io/blog/javascript-prototypal-inheritance&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>How can we integrate Flutter with .Net core web API | Part-1: Building Back-end Web service using .Net core.</title>
      <author>Yared Solomon</author>
      <pubDate>Sat, 17 Jul 2021 22:58:01 +0000</pubDate>
      <link>https://dev.to/yared123yared/how-can-we-integrate-flutter-with-net-core-web-api-part-1-building-back-end-web-service-using-net-core-4mff</link>
      <guid>https://dev.to/yared123yared/how-can-we-integrate-flutter-with-net-core-web-api-part-1-building-back-end-web-service-using-net-core-4mff</guid>
      <description>&lt;h1&gt;
  &lt;a href="#part-1configure-the-database"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 1:Configure the database&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The database managment system we will use for this particular project is &lt;strong&gt;Sql Server&lt;/strong&gt; and &lt;strong&gt;Micrsoft Sql Server Managment Studio&lt;/strong&gt; for using sql server in &lt;strong&gt;GUI&lt;/strong&gt;. so if you haven't installed it yet. go to the following &lt;strong&gt;Microsoft Documentation&lt;/strong&gt; and install. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 1: &lt;a href="https://docs.microsoft.com/en-us/sql/database-engine/install-windows/install-sql-server?view=sql-server-ver15"&gt;Install SqlServer&lt;/a&gt;&lt;/em&gt;,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 2: &lt;a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15"&gt;Install Microsoft Sql Server Managment Studio&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#part-2-configuring-the-net-web-api-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 2: configuring the .Net web API project&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create a new .Net web API project&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;we can simply create new project by using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new  webapi -n &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we will get the template for a web API. remove the default controller from the controller package. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Install the necessary packages&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;to install package we have especial extension called &lt;strong&gt;NuGet Package Manager&lt;/strong&gt; from the visual studio code go to the extension tab and search for &lt;strong&gt;NuGet Package Manager&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZlCgJHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt9y22e7prvkxf6frjvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZlCgJHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt9y22e7prvkxf6frjvr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then install it. &lt;/p&gt;

&lt;p&gt;then after that hit on &lt;strong&gt;ctrl + shift + p&lt;/strong&gt; and you will see a drop-down option from the above. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LmNYNHJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfjf41e2tu0tmnng4rb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LmNYNHJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfjf41e2tu0tmnng4rb9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the above choice which says that &lt;strong&gt;Nuget Package Manager: Add Package&lt;/strong&gt; it will prompt you to enter the package name so enter the package name in this case the package we want to install is &lt;strong&gt;Microsoft.EntityFrameworkCore&lt;/strong&gt; which used to connect to SQL server.&lt;/p&gt;

&lt;p&gt;then choose the version number that can work fine with the  .Net version of your computer. after some seconds it will automatically install it and put it on the &lt;strong&gt;.csproj&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;do the same for the rest of the packages too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"AutoMapper.Extensions.Microsoft.DependencyInjection"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"8.1.0"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"3.1.12"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.SqlServer"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"3.1.12"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the whole code of our &lt;strong&gt;.csproj&lt;/strong&gt; file will look like the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="n"&gt;Sdk&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk.Web"&lt;/span&gt; &lt;span class="n"&gt;ToolsVersion&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Current"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PropertyGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFramework&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;netcoreapp3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFramework&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OldToolsVersion&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;OldToolsVersion&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GenerateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;GenerateAssemblyInfo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;PropertyGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"AutoMapper.Extensions.Microsoft.DependencyInjection"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"8.1.0"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"3.1.12"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.SqlServer"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"3.1.12"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: Add a model called Service.cs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, create a folder called &lt;strong&gt;Model&lt;/strong&gt; and in that folder create &lt;strong&gt;Service.cs&lt;/strong&gt; model.&lt;/p&gt;

&lt;p&gt;This model should be the same as the database column we have created before. so our &lt;strong&gt;Service.cs&lt;/strong&gt; code will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.ComponentModel.DataAnnotations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.ComponentModel.DataAnnotations.Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;fixit.DTO&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceDto&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ServiceId&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ServiceName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;InitialPrice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;IntermediatePrice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AdvancedPrice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;AddedTime&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;




    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4: add a DTO called &lt;em&gt;ServiceDto.cs&lt;/em&gt;.&lt;/strong&gt;&lt;br&gt;
First, create a folder called &lt;strong&gt;DTO&lt;/strong&gt; and in this folder create a file called &lt;strong&gt;ServiceDto.cs&lt;/strong&gt; and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.ComponentModel.DataAnnotations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.ComponentModel.DataAnnotations.Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;fixit.DTO&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceDto&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ServiceId&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ServiceName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;InitialPrice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;IntermediatePrice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AdvancedPrice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;AddedTime&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;





    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The purpose of adding this file to the project is in order to map the data that come from the database to some format we want. which will be stored on the Dto file called &lt;strong&gt;ServiceDto.cs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Add a Profile called &lt;em&gt;ServiceProfile.cs&lt;/em&gt;.&lt;/strong&gt;&lt;br&gt;
create a folder called &lt;em&gt;Profile&lt;/em&gt; and in this folder create a file called &lt;strong&gt;ServiceProfile.cs&lt;/strong&gt; and in this file add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;AutoMapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.DTO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;fixit.Profiles&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceProfile&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ServiceProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;CreateMap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fixit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ServiceDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitialPrice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitialPrice&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntermediatePrice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntermediatePrice&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AdvancedPrice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AdvancedPrice&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddedTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddedTime&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
           &lt;span class="n"&gt;CreateMap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceDto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fixit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;




 &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this code will do is mapping from the model to Dto using a special package called &lt;strong&gt;AutoMapper&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Create an interface called  IRepository.cs&lt;br&gt;
create a folder called **Data&lt;/strong&gt; and in that folder create a file called &lt;strong&gt;IRepository.cs&lt;/strong&gt; and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.DTO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;fixit.Data&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetDataById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;InsertData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;UpdateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DeleteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This interface act as a &lt;strong&gt;mediator&lt;/strong&gt; between the controller and repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:  Add a DataContext for the Service model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;from the &lt;strong&gt;Data&lt;/strong&gt; folder, we have created before, create a new file called &lt;strong&gt;DataContext.cs&lt;/strong&gt; and add the following code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;MySql.Data.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;fixit.Data&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContextOptions&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 8: Add ServiceRepsitory.cs&lt;/strong&gt;&lt;br&gt;
From the &lt;strong&gt;Data&lt;/strong&gt; folder again create a file called &lt;strong&gt;ServiceRepositiry.cs&lt;/strong&gt; this file will contain all the CRUD operations that will be performed on the Service object. the code of all the CRUD operations is like this just copy and paste it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;fixit.Data&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ServiceRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Delete Service objects&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DeleteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Delete method invoked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChangesAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


        &lt;span class="c1"&gt;// Get all service objects&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//    Getting database data here&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToListAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Get Service by  id&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetDataById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefaultAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceId&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Update and create new service objects&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;InsertData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Create data  method invoked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChangesAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;UpdateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;




            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Update method  invoked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



            &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;IsModified&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 9: Add ServiceController.cs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By default when the project created it will contain a folder called &lt;em&gt;Controller&lt;/em&gt;. if it does not exist create it. then in that folder create a file called &lt;strong&gt;ServiceController.cs&lt;/strong&gt; and add the following code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;AutoMapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.DTO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Authorization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Controllers&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api/services"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_repo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IMapper&lt;/span&gt; &lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ServiceController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMapper&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_repo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;_mapper&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;



        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetServices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is the get All service method"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{id}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetServiceById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is the comming id "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetDataById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


        &lt;span class="c1"&gt;//  Service Post method&lt;/span&gt;

         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;CreateService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServiceDto&lt;/span&gt; &lt;span class="n"&gt;serviceDto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Crate Service Method Invoked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceDto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UpdateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceDto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Service Delete method&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{id}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DeleteServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetDataById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// var service = _mapper.Map&amp;lt;Service&amp;gt;(serviceDto);&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DeleteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_mapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;


        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The purpose of this controller is to receive requests from the client , get information from the repository through the mediator interface,returning  the data back to the client.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#part-3-connect-our-code-to-the-database"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 3: Connect our code  to the database&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The database information will be store on the connection string, later on, to connect it to the data context on the startup method.&lt;/p&gt;

&lt;p&gt;In this case, we need to give information about the database that is running.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Start Sql Server and copy the connection string&lt;/strong&gt;&lt;br&gt;
Open or launch &lt;strong&gt;Microsoft Sql Server Managment Studio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f1sF_rws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68j9d32g1dz2jmlf44fn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1sF_rws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68j9d32g1dz2jmlf44fn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A dialog box will come witht the window together. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZW6KRZax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p151jdd9pbkzewpd87jn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZW6KRZax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p151jdd9pbkzewpd87jn.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 Select &lt;strong&gt;Database Engine&lt;/strong&gt; on the server type. &lt;br&gt;
 It will give you the server name by default.&lt;br&gt;
and make the &lt;strong&gt;Authentication&lt;/strong&gt; to be &lt;strong&gt;Window Authentication&lt;/strong&gt; like it is  on the displayed image.&lt;/p&gt;

&lt;p&gt;Then click on the &lt;strong&gt;connect&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;if the connection is successful you will get an explorer page like this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQIyUOR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gibhnoa7fln162ns6kn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQIyUOR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gibhnoa7fln162ns6kn2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so the connection string will be the one that we put on the server name when we connect to the database. you may find different ways to copy this server name after connecting to the database. but what i prefer is to &lt;strong&gt;disconnnect&lt;/strong&gt; the database and try to &lt;strong&gt;connect&lt;/strong&gt; again then I will copy the server name from the dialog box. &lt;/p&gt;

&lt;p&gt;To disconnect click on the icon on the left top corner of the explorer. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HSmwTViE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsv4vl10yly6i8ajievi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HSmwTViE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsv4vl10yly6i8ajievi.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then clcik on the icon next to the disconnect icon in order to connect again. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S4LoeCdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pikqjocx479790j8jc9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S4LoeCdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pikqjocx479790j8jc9s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dialog box will appear again. and this time copy the server name option. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJSydCOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvty8wof0nidkzgcbm17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJSydCOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvty8wof0nidkzgcbm17.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So now we have got our connection string value.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Put the connection string on the appSettings.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;put this to the &lt;strong&gt;ConnectionStrings&lt;/strong&gt; object by assigning to a variable that used to access this information from some other file. for my case it is &lt;strong&gt;fixItConnection&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"ConnectionStrings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"fixItConnection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Server=DESKTOP-BEKSKMU&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;SQLEXPRESS;Database=FixItDb;Trusted_Connection=True;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the whole &lt;strong&gt;appSettings.json&lt;/strong&gt; code will be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"AppSettings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Logging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"LogLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Microsoft"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Warning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Microsoft.Hosting.Lifetime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Information"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"AllowedHosts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="nl"&gt;"ConnectionStrings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"fixItConnection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Server=DESKTOP-BEKSKMU&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;SQLEXPRESS;Database=FixItDb;Trusted_Connection=True;"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: Updating the startUp.cs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;update the &lt;em&gt;startUp.cs&lt;/em&gt; file of the project in order to connect to Sql Server. &lt;/p&gt;

&lt;p&gt;from the &lt;strong&gt;ConfigureService&lt;/strong&gt; method add the following line of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fixItConnection"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here the &lt;strong&gt;UseSqlServer&lt;/strong&gt; method will be imported from the package we have installed before.&lt;strong&gt;Microsoft.EntityFrameworkCore;&lt;/strong&gt; and used to inter connect the database information stored on the &lt;strong&gt;fixItConnection&lt;/strong&gt; to our &lt;strong&gt;DataContext&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;down to this, we should insert a code for &lt;strong&gt;CORS&lt;/strong&gt; this gives permission to our back-end server in order to be accessible by any front-end running on the same machine. unless otherwise, we will get a cors error whenever we try to access this server from the same machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddCors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddPolicy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"allowedOrigin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AllowAnyOrigin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;AllowAnyMethod&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;AllowAnyHeader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to register our &lt;strong&gt;Controller&lt;/strong&gt; and &lt;strong&gt;Repository&lt;/strong&gt; we have created before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;  &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;ServiceRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the whole startUp.cs file looks like the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;AutoMapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;fixit.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.Configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// using Pomelo.EntityFrameworkCore.MySql;&lt;/span&gt;
&lt;span class="c1"&gt;// using fixit.Service;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;fixit&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;   
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Startup&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;   
             &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;AllowedOrigin&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"allowedOrigin"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fixItConnection"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAutoMapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentDomain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetAssemblies&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

           &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddCors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddPolicy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"allowedOrigin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AllowAnyOrigin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;AllowAnyMethod&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;AllowAnyHeader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;ServiceRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;





        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IWebHostEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsDevelopment&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseCors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllowedOrigin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#part-4-migrating-the-model-to-sql-server-database"&gt;
  &lt;/a&gt;
  Part 4: Migrating the model to sql server database.
&lt;/h1&gt;

&lt;p&gt;In this part of the article we will see on how can we set up our database objects from the code. &lt;/p&gt;

&lt;p&gt;the traditionall way of doing this is to create the objects directly form the database. but that will be tiresome and not efficient.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:Create your first migration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You're now ready to add your first migration! Instruct EF Core to create a migration named InitialCreate:&lt;/p&gt;

&lt;p&gt;excute the folllwong from command line with in the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet ef migrations add InitialCreate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vRWpy56Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sjs6bysc59o0frfggnx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRWpy56Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sjs6bysc59o0frfggnx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EF Core will create a directory called Migrations in your project, and generate some files. It's a good idea to inspect what exactly EF Core generated - and possibly amend it - but we'll skip over that for now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step2:Create your database and schema&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point you can have EF create your database and create your schema from the migration. This can be done via the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet ef database update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all there is to it - your application is ready to run on your new database, and you didn't need to write a single line of SQL. Note that this way of applying migrations is ideal for local development, but is less suitable for production environments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;check out this &lt;a href="https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli"&gt;link&lt;/a&gt; to understand more about migration in .Net core Entity Frame work&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finally-running-the-code-and-check-the-result"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Finally: Running the Code and Check the result&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Almost Done&lt;/strong&gt;. now we have done with the implementation staffs.&lt;br&gt;
 the next thing will be running the code and check its functionality. in order to run any dotnet project what we need to do is to execute the following command from the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will get a page that looks like this. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r92lImsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tp0ebnpqrmb9erk1eso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r92lImsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tp0ebnpqrmb9erk1eso.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
copy the IP address from the page running and test it using postman. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://localhost:5000/api/services/"&gt;http://localhost:5000/api/services/&lt;/a&gt;&lt;/strong&gt; this is the URL for the controller Service let us try the Get method from the postman. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znV3cVVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5so7mxmtvzr4g4aante.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znV3cVVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5so7mxmtvzr4g4aante.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we got the data that has been stored in the Sql server.&lt;br&gt;
You can get the full Github code &lt;a href="https://github.com/yared123yared/Flutter-With-Asp.Net_Core_Web_Api-1/tree/master/.Net"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This will be the end of this article.&lt;/p&gt;

&lt;p&gt;Next we will look in to how to integrate this web api with the flutter application. check out the part2 of this article &lt;a href="https://dev.to/yared123yared/how-can-we-integrate-flutter-with-net-core-web-api-flutter-bloc-state-management-2ak3"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you! &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
