<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Programming For Hours- 5 Tips To Stay Productive</title>
      <author>Jaskirat Singh</author>
      <pubDate>Mon, 06 Sep 2021 10:24:33 +0000</pubDate>
      <link>https://dev.to/jaskirat1325/programming-for-hours-5-tips-to-stay-productive-2cfk</link>
      <guid>https://dev.to/jaskirat1325/programming-for-hours-5-tips-to-stay-productive-2cfk</guid>
      <description>&lt;p&gt;There are times when you have to code like straight for hours. But is it actually practically possible to work effectively on something on which you need both Mental focus and Thought process. If you ask me I would say yes it is possible to do so. But, You do need to involve some hacks and tricks to stay productive. Here are a few very common ways to stay focused and attentive while your hands are on keyboard for a code.&lt;br&gt;&lt;br&gt;
    ## Table Of Contents&lt;br&gt;
        * &lt;a href="#Music"&gt;Use of music&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#drink"&gt;Always Have Something To Drink&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#desk"&gt;Have Everything On Desk&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#Time"&gt;No Time Peeking&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#sanitizer"&gt;carry hand sanitizer&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-music"&gt;
  &lt;/a&gt;
  1) Music&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Generally speaking this is one of the most effective methods to stay focused in long hours of continuous programming. I have seen and tried this method myself. Even if your code is not running &lt;a href="https://goscreen.in/benefits-of-music/"&gt;Music&lt;/a&gt; will make you stay calm and not lose your cool. You won't get frustrated quickly and you will just keep on trying. Every time I use to code, I carried one earpiece along with me always.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-always-have-something-to-drink"&gt;
  &lt;/a&gt;
  2) Always Have Something To Drink&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-JtspMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbpjoggfhjyvuyquusgs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-JtspMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbpjoggfhjyvuyquusgs.jpg" alt="A drink while we work"&gt;&lt;/a&gt;&lt;br&gt;
   Many might be thinking that If we indulge in drinking something. Eventually we need to go to the bathroom. Well the thing is I am not saying you to drink a whole bottle or soft drink or something. But, Drink when you start feeling exhausted. This will give you a sense of relaxation and freshness. Again one thing I must make clear here these are not something scientifically proven facts. They just work for me as well as many others I know. That is why I am suggesting this to you.When I code I always have my water bottle along with me. This is just how I stick with my work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-have-everything-on-desk"&gt;
  &lt;/a&gt;
  3) Have Everything On Desk&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is something which is not just applicable to those who write programs, But is for everyone around who have long sitting hours. You want to study whole sunday for test? this is how we do it. Having everything on your desk is just not good but a great practice. Because if you have to stand up from your seat after every few minutes it will eventually break the momentum you created for hours of sitting. I don't think anyone want to do that right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-no-time-peeking"&gt;
  &lt;/a&gt;
  4) No Time Peeking&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xabES1fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://goscreen.in/wp-content/uploads/2021/08/Confused-e1630254124717.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xabES1fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://goscreen.in/wp-content/uploads/2021/08/Confused-e1630254124717.png" alt="girl confused"&gt;&lt;/a&gt;&lt;br&gt;
    You probably might be thinking that what do I mean with this time peeking think. It actually means that when you are Programming, Don't look at the time any way. What you should do is buy a watch in which you can set it to beep after every one hour. This will surely be very efficient way of stay up with the time. You just need to remember that with every beep that hear time is passing. You also have to do other stuff right so wind it up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-carry-a-hand-sanitizer-or-wet-wipes"&gt;
  &lt;/a&gt;
  5) carry a Hand sanitizer or wet wipes&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now you know this already that you need to use the bathroom before you start your programming or study. But you should carry a hand sanitizer too. Sometimes you just need your hands clean for any reason. This is when hand sanitizer comes to play. Also it is suggested to have wet wipes with you. Why let's suppose you got some glue on your hands and sanitizer can't do much but wipes can.&lt;/p&gt;

&lt;p&gt;Which one of these interest you. I can't wait to see your response in the comment section. Make sure to ask questions which you have. I will love to answer them all. Or maybe you just want to share an experience that is also welcomed. With that said see you later CODERS!&lt;br&gt;
Image credits - &lt;a href="https://Goscreen.in"&gt;GoScreen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Angular reusable resolvers</title>
      <author>Igor Filippov</author>
      <pubDate>Mon, 06 Sep 2021 10:16:33 +0000</pubDate>
      <link>https://dev.to/igorfilippov3/angular-reusable-resolvers-3i94</link>
      <guid>https://dev.to/igorfilippov3/angular-reusable-resolvers-3i94</guid>
      <description>&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;At the moment, I am working at my new project - &lt;a href="https://pagehealth.me/about"&gt;Page Health&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;It is a SaaS platform which provides a page performance monitoring on the long run. &lt;/p&gt;

&lt;p&gt;In this application I had a lot of cases, where I had to duplicate the code of my resolvers to make very, very similar things.&lt;/p&gt;

&lt;p&gt;That's why I took thought about how to implement the DRY coding principle in my app.&lt;/p&gt;

&lt;p&gt;First, I take a glance at official angular &lt;a href="https://angular.io/api/router/Resolve"&gt;documentation&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;And here I found an interesting way to implement resolvers with in-line functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myHero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;RouterModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;detail/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeroComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heroResolver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heroResolver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterStateSnapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myHero&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, I decided to create a function which will return a reusable provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPageResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pageResolver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NotificationsService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PagesApiService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotificationsService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PagesApiService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PageResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain it step by step:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;provide&lt;/em&gt; - it is the name of my provider.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;deps&lt;/em&gt; - is shorten for the word - dependencies. In my case I need some services to do my stuff and Router from &lt;strong&gt;@angular/router&lt;/strong&gt; to redirect user if condition in resolve function is not match.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;useFactory&lt;/em&gt; - unlike the example in the official docs, I need it, because in my case I need to return a new instance of resolver, not a simple value.&lt;/p&gt;

&lt;p&gt;And actually code of my resolver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;imports&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PageResolver&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PageDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;notificationsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NotificationsService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;pagesApiService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PagesApiService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;router&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redirectRoute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="na"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PageDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notificationsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid page id.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pagesApiService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notificationsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to get this page.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectRoute&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, the code can be extended with custom error message, depending on situation, but in my case a static message is completely enough.&lt;/p&gt;

&lt;p&gt;Also, please note, that I did not add an &lt;strong&gt;@Injecable()&lt;/strong&gt; decorator for my resolver class, because, injection happens in useFactory method.&lt;/p&gt;

&lt;p&gt;If you do not fully understand how to use it, here is an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;imports&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PageSpeedComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PageSpeedMetricsComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chrome User Experience Report&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pageResolver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RouterModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
  &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RouterModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;createPageResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user-experience&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PageSpeedRoutingModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope, this small technick will be useful for somebody :)&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Implement traditional auth system in Symfony with less code than ever</title>
      <author>Goran Hrženjak</author>
      <pubDate>Mon, 06 Sep 2021 10:16:16 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/implement-traditional-auth-system-in-symfony-with-less-code-than-ever-5h25</link>
      <guid>https://dev.to/bornfightcompany/implement-traditional-auth-system-in-symfony-with-less-code-than-ever-5h25</guid>
      <description>&lt;p&gt;PHP 8 introduced some new concepts and really helpful syntax features. &lt;br&gt;
To significantly reduce the boilerplate code, whenever possible, we can use &lt;a href="https://stitcher.io/blog/constructor-promotion-in-php-8"&gt;Constructor property promotion&lt;/a&gt;. Another thing I'll focus on in this guide is replacing annotations with &lt;a href="https://stitcher.io/blog/attributes-in-php-8"&gt;PHP attributes&lt;/a&gt;. This will also reduce the number of lines of code in our classes every now and then.&lt;br&gt;
As of version &lt;a href="https://www.doctrine-project.org/2021/05/24/orm2.9.html"&gt;2.9&lt;/a&gt;, Doctrine supports using PHP 8 Attributes as a new driver for mapping entities. &lt;/p&gt;

&lt;p&gt;Not only will we need fewer lines of code than ever for this project, but also we will need to write less of that code ourselves than ever. I’m emphasizing this because we’ll heavily rely on the &lt;a href="https://symfony.com/bundles/SymfonyMakerBundle/current/index.html"&gt;Maker bundle&lt;/a&gt; which will generate the majority of files and actual app logic for the project.&lt;br&gt;
At the time of writing this post, Maker bundle still didn’t fully adopt all new PHP possibilities and some adjustments will be done manually. &lt;/p&gt;

&lt;p&gt;The goal of the app is to provide a basic traditional authentication system with registration and login features and email verification.&lt;br&gt;
App will have 3 sections: &lt;em&gt;public&lt;/em&gt; section accessible by everyone, &lt;em&gt;profile&lt;/em&gt; section available to all logged in users, and &lt;em&gt;content&lt;/em&gt; section available only to verified users.&lt;br&gt;
Account verification will be done by simply clicking a link in the verification email. &lt;/p&gt;

&lt;p&gt;Create a new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;composer create-project symfony/website-skeleton my_new_app
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(or use Symfony CLI). I’m using Symfony 5.3.7.&lt;br&gt;
Make sure to update required PHP version in &lt;code&gt;composer.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    "require": {
&lt;span class="gd"&gt;-       "php": "&amp;gt;=7.2.5",
&lt;/span&gt;&lt;span class="gi"&gt;+       "php": "^8.0",
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update Doctrine configuration - use attributes instead of annotations! Without this, generation migrations will not work. &lt;br&gt;
&lt;code&gt;config/packages/doctrine.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;doctrine:
&lt;/span&gt;    orm:
        mappings:
            App:
&lt;span class="gd"&gt;-               type: annotation
&lt;/span&gt;&lt;span class="gi"&gt;+               type: attribute
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make initial &lt;code&gt;User&lt;/code&gt; entity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:user
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer &lt;code&gt;[yes]&lt;/code&gt; or select defaults for all questions in the wizard.&lt;br&gt;
This should create &lt;code&gt;src/Entity/User.php&lt;/code&gt; and &lt;code&gt;src/Repository/UserRepository.php&lt;/code&gt; and update &lt;code&gt;config/packages/security.yaml&lt;/code&gt; files. &lt;/p&gt;

&lt;p&gt;Symfony Maker bundle still doesn’t support attributes, but generated entities will still save us a lot of time. We can replace annotations with attributes ourselves.&lt;br&gt;
Use attributes and property types to reduce the amount of code. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/Entity/User.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- /**
-  * @ORM\Entity(repositoryClass=UserRepository::class)
-  */
&lt;/span&gt;&lt;span class="gi"&gt;+ #[ORM\Entity(repositoryClass: UserRepository::class)]
&lt;/span&gt;&lt;span class="p"&gt;class User implements UserInterface, PasswordAuthenticatedUserInterface
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   /**
-    * @ORM\Id
-    * @ORM\GeneratedValue
-    * @ORM\Column(type="integer")
-    */
-   private $id;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Id, ORM\GeneratedValue, ORM\Column]
+   private int $id;
&lt;/span&gt;&lt;span class="gd"&gt;-   /**
-    * @ORM\Column(type="string", length=180, unique=true)
-    */
-   private $email;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column(length: 180, unique: true)]
+   private string $email;
&lt;/span&gt;&lt;span class="gd"&gt;-   /**
-    * @ORM\Column(type="json")
-    */
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column(type: 'json)]
&lt;/span&gt;    private $roles = [];
&lt;span class="gd"&gt;-   /**
-    * @var string The hashed password
-    * @ORM\Column(type="string")
-    */
-   private $password;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column]
+   private string $password;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make migration and execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:migration
php bin/console doctrine:migration:migrate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate simple controllers: &lt;code&gt;PublicController&lt;/code&gt;, &lt;code&gt;ProfileController&lt;/code&gt;, &lt;code&gt;ContentController&lt;/code&gt;. This will add routes &lt;code&gt;/public&lt;/code&gt;, &lt;code&gt;/profile&lt;/code&gt; and &lt;code&gt;/content&lt;/code&gt;. You can do this with Maker as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:controller
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rename route names for consistency by prefixing them with: &lt;code&gt;app_&lt;/code&gt;.&lt;br&gt;
All 3 routes should be available to anyone at this stage. &lt;/p&gt;

&lt;p&gt;Add role hierarchy and access rules to &lt;code&gt;config/packages/security.yaml&lt;/code&gt; to achieve what's explained above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;security:
&lt;/span&gt;&lt;span class="gi"&gt;+   role_hierarchy:
+       ROLE_VERIFIED_USER: [ ROLE_USER ]
&lt;/span&gt;    access_control:
&lt;span class="gi"&gt;+       - { path: ^/content, roles: ROLE_VERIFIED_USER }
+       - { path: ^/profile, roles: ROLE_USER }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be getting &lt;em&gt;401 Unauthorized&lt;/em&gt; error if you try to access &lt;code&gt;/profile&lt;/code&gt; or &lt;code&gt;/content&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Make the login authentication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:auth
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select &lt;code&gt;[1] Login form authenticator&lt;/code&gt;, call it &lt;code&gt;LoginFormAuthenticator&lt;/code&gt;, confirm the controller name: &lt;code&gt;SecurityController&lt;/code&gt; and accept adding the logout route. &lt;/p&gt;

&lt;p&gt;This will update the &lt;code&gt;config/packages/security.yaml&lt;/code&gt; file by adding a logout route and create authenticator, controller and login form files.&lt;/p&gt;

&lt;p&gt;First of all, in login form Twig template, replace deprecated &lt;code&gt;user.username&lt;/code&gt; with &lt;code&gt;user.userIdentifier&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- You are logged in as {{ app.user.username }}, &amp;lt;a href="{{ path('app_logout') }}"&amp;gt;Logout&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+ You are logged in as {{ app.user.userIdentifier }}, &amp;lt;a href="{{ path('app_logout') }}"&amp;gt;Logout&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/Controller/SecurityController.php&lt;/code&gt; we can replace routes defined by annotations with those defined by attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class SecurityController extends AbstractController
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   /**
-    * @Route("/login", name="app_login")
-    */
&lt;/span&gt;&lt;span class="gi"&gt;+   #[Route('/login', name: 'app_login')]
&lt;/span&gt;    public function login(AuthenticationUtils $authenticationUtils): Response
&lt;span class="gd"&gt;-   /**
-    * @Route("/logout", name="app_logout")
-    */
&lt;/span&gt;&lt;span class="gi"&gt;+   #[Route('/logout', name: 'app_logout')]
&lt;/span&gt;    public function logout()
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to constructor property promotion in PHP 8, we can rewrite the constructor in &lt;code&gt;src/Security/LoginFormAuthenticator.php&lt;/code&gt;. While at it, add proper response in &lt;code&gt;onAuthenticationSuccess&lt;/code&gt; method:&lt;br&gt;
after successful login, redirect to &lt;code&gt;app_profile&lt;/code&gt; route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class LoginFormAuthenticator extends AbstractLoginFormAuthenticator
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   private UrlGeneratorInterface $urlGenerator;
-
-   public function __construct(UrlGeneratorInterface $urlGenerator)
-   {
-       $this-&amp;gt;urlGenerator = $urlGenerator;
-   }
&lt;/span&gt;&lt;span class="gi"&gt;+   public function __construct(private UrlGeneratorInterface $urlGenerator)
+   {
+   }
&lt;/span&gt;
    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
&lt;span class="gd"&gt;-       throw new \Exception('TODO: provide a valid redirect inside '.__FILE__);
&lt;/span&gt;&lt;span class="gi"&gt;+       return new RedirectResponse($this-&amp;gt;urlGenerator-&amp;gt;generate('app_profile'));
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you're using a Symfony plugin in your code editor and it's complaining it can't find the route with the given name, make sure you've prefixed those routes in controllers as suggested above.&lt;/p&gt;

&lt;p&gt;Notice how slim this authenticator became in comparison to what it used to look in older versions of Symfony. &lt;/p&gt;

&lt;p&gt;Let’s implement registration logic.&lt;br&gt;
Should we write all of this ourselves? Nope. Maker bundle to the rescue again. &lt;br&gt;
First of all, let’s require another bundle, one for handling email verification logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;composer require symfonycasts/verify-email-bundle
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:registration-form
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select defaults except the one for including user ID in the link - answer &lt;code&gt;yes&lt;/code&gt; on that prompt; and select &lt;code&gt;app_profile&lt;/code&gt; as a route to redirect to after registration. &lt;br&gt;
It's possible that Maker will warn you no Guard authenticators were found and users won't be automatically authenticated after registering. Ignore this for now, we'll implement a solution for this at the end.&lt;br&gt;
The command will change &lt;code&gt;User&lt;/code&gt; entity and create confirmation email and registration form Twig templates as well as create a &lt;code&gt;RegistrationController&lt;/code&gt;, &lt;code&gt;RegistrationFormType&lt;/code&gt; and &lt;code&gt;EmailVerifier&lt;/code&gt; helper.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;src/Entity/User.php&lt;/code&gt; first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- /**
-  * @UniqueEntity(fields={"email"}, message="There is already an account with this email")
-  */
&lt;/span&gt;&lt;span class="gi"&gt;+ #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]
&lt;/span&gt;&lt;span class="p"&gt;class User implements UserInterface, PasswordAuthenticatedUserInterface
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   /**
-    * @ORM\Column(type="boolean")
-    */
-   private $isVerified = false;
&lt;/span&gt;&lt;span class="gi"&gt;+   #[ORM\Column(options: ['default' =&amp;gt; false])]
+   private bool $isVerified = false;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate a migration for adding this new flag and execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;php bin/console make:migration
php bin/console doctrine:migration:migrate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Symfony recommends putting as little logic as possible in controllers. That’s why complex forms will be moved to dedicated classes instead of defining them in controller actions. Maker did that for us. &lt;br&gt;
There are few things to change in &lt;code&gt;RegistrationController&lt;/code&gt; - use constructor property promotion and replace deprecated &lt;code&gt;UserPasswordEncoderInterface&lt;/code&gt; with &lt;code&gt;UserPasswordHasherInterface&lt;/code&gt;. &lt;br&gt;
At the end of the verification process, redirect to the content page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+ use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
&lt;/span&gt;&lt;span class="gd"&gt;- use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
&lt;/span&gt;
class RegistrationController extends AbstractController
&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   private $emailVerifier;
-
-   public function __construct(EmailVerifier $emailVerifier)
-   {
-       $this-&amp;gt;emailVerifier = $emailVerifier;
-   }
&lt;/span&gt;&lt;span class="gi"&gt;+   public function __construct(private EmailVerifier $emailVerifier)
+   {
+   } 
&lt;/span&gt;&lt;span class="gd"&gt;-   public function register(Request $request, UserPasswordEncoderInterface $passwordEncoder): Response
&lt;/span&gt;&lt;span class="gi"&gt;+   public function register(Request $request, UserPasswordHasherInterface $passwordHasher): Response
&lt;/span&gt;    {
        $user-&amp;gt;setPassword(
&lt;span class="gd"&gt;-           $passwordEncoder-&amp;gt;encodePassword(
-               $user,
-               $form-&amp;gt;get('plainPassword')-&amp;gt;getData()
-           )
&lt;/span&gt;&lt;span class="gi"&gt;+           $passwordHasher-&amp;gt;hashPassword($user, $form-&amp;gt;get('plainPassword')-&amp;gt;getData())
&lt;/span&gt;        );
    }

    public function verifyUserEmail(Request $request, UserRepository $userRepository): Response
    {
&lt;span class="gd"&gt;-       return $this-&amp;gt;redirectToRoute('app_register');
&lt;/span&gt;&lt;span class="gi"&gt;+       return $this-&amp;gt;redirectToRoute('app_content');
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to shorten that constructor in the EmailVerifier class and also add proper user roles after email verification:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class EmailVerifier
&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   private $verifyEmailHelper;
-   private $mailer;
-   private $entityManager;
-
-   public function __construct(VerifyEmailHelperInterface $helper, MailerInterface $mailer, EntityManagerInterface $manager)
-   {
-       $this-&amp;gt;verifyEmailHelper = $helper;
-       $this-&amp;gt;mailer = $mailer;
-       $this-&amp;gt;entityManager = $manager;
-   }
&lt;/span&gt;&lt;span class="gi"&gt;+   public function __construct(
+       private VerifyEmailHelperInterface $verifyEmailHelper,
+       private MailerInterface $mailer,
+       private EntityManagerInterface $entityManager
+   ) {
+   }
&lt;/span&gt;
    public function handleEmailConfirmation(Request $request, UserInterface $user): void
    { 
        $user-&amp;gt;setIsVerified(true);
&lt;span class="gi"&gt;+       $user-&amp;gt;setRoles(['ROLE_VERIFIED_USER']);
&lt;/span&gt;    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In later versions of Maker bundle where dependency to Guards will be dropped, this might be resolved, but for now we have to implement logging user in after registration manually.&lt;br&gt;
Not a huge deal really. Just inject the &lt;code&gt;UserAuthenticatorInterface&lt;/code&gt; and our authenticator in the &lt;code&gt;register&lt;/code&gt; method and authenticate the user before returning the redirect response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+ use App\Security\LoginFormAuthenticator;
+ use Symfony\Component\Security\Http\Authentication\UserAuthenticatorInterface;
&lt;/span&gt;
class RegistrationController extends AbstractController
&lt;span class="err"&gt;{&lt;/span&gt; 
&lt;span class="gd"&gt;-   public function register(Request $request, UserPasswordHasherInterface $passwordHasher): Response
-   {
&lt;/span&gt;&lt;span class="gi"&gt;+   public function register(
+       Request $request,
+       UserPasswordHasherInterface $passwordHasher,
+       UserAuthenticatorInterface $authenticator,
+       LoginFormAuthenticator $formAuthenticator
+   ): Response {
&lt;/span&gt;        if ($form-&amp;gt;isSubmitted() &amp;amp;&amp;amp; $form-&amp;gt;isValid()) {
            // ...
&lt;span class="gi"&gt;+           $authenticator-&amp;gt;authenticateUser($user, $formAuthenticator, $request);
&lt;/span&gt;
            return $this-&amp;gt;redirectToRoute('app_profile');
        }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's basically it for the scope of this guide 🤓  &lt;/p&gt;

&lt;p&gt;Try accessing &lt;code&gt;/profile&lt;/code&gt; or &lt;code&gt;/content&lt;/code&gt; route. You should be redirected to the login page. If you still haven't, it's time to register as a new user.&lt;br&gt;
Go to &lt;code&gt;/register&lt;/code&gt; and enter the desired email and password. You should be logged in automatically and redirected to &lt;code&gt;/profile&lt;/code&gt;. Accessing &lt;code&gt;/content&lt;/code&gt; is still not possible.&lt;br&gt;
You should have received a verification email. For this to work out of the box, you only need to set up the &lt;code&gt;MAILER_DSN&lt;/code&gt; environmental variable according to your mailing server. &lt;br&gt;
After clicking the confirmation link, flag &lt;code&gt;is_verified&lt;/code&gt; will be set, user role &lt;code&gt;ROLE_VERIFIED_USER&lt;/code&gt; added and you'll be able to access &lt;code&gt;/content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can render flash messages or add password reset feature (by including another great bundle: &lt;code&gt;symfonycasts/reset-password-bundle&lt;/code&gt;) or maybe implement social logins as the next step.&lt;/p&gt;

&lt;p&gt;Let me know in the comments if code snippets with diffs weren't clear enough or if you have any other questions.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>symfony</category>
      <category>php</category>
      <category>doctrine</category>
    </item>
    <item>
      <title>Data Structures: Bidirectional Map</title>
      <author>Maksim</author>
      <pubDate>Mon, 06 Sep 2021 10:13:14 +0000</pubDate>
      <link>https://dev.to/pretaporter/data-structures-bidirectional-map-3f73</link>
      <guid>https://dev.to/pretaporter/data-structures-bidirectional-map-3f73</guid>
      <description>&lt;p&gt;In computer science, a bidirectional map is an associative data structure in which the &lt;em&gt;(key,value)&lt;/em&gt; pairs form a one-to-one correspondence. Also known as bijective map. &lt;a href="https://en.wikipedia.org/wiki/Bidirectional_map"&gt;Article on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is not widely used data structure in web development, but in some cases really quite useful, for instance in encryption.&lt;/p&gt;

&lt;p&gt;Let's describe our goal. Implement data structure, where following operations are performed in constant time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get value by key&lt;/li&gt;
&lt;li&gt;Get key by value&lt;/li&gt;
&lt;li&gt;Remove record by key&lt;/li&gt;
&lt;li&gt;Remove record by value&lt;/li&gt;
&lt;li&gt;Check for the existence of key&lt;/li&gt;
&lt;li&gt;Check for the existence of value&lt;/li&gt;
&lt;li&gt;Get the size of the map&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implementation below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BidirectionalMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IterableIterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hasKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hasValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IterableIterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IterableIterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverseMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically we can consider this data structure as extending of Map class. Current implementation could be improved by adding &lt;code&gt;forEach&lt;/code&gt; method and iterable protocol, which will allow to define iteration behavior of Bidirectional Map. Let me know in comments if your interesting to know, how to do it exactly.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>100 blog topic ideas for your next article - No more writers block</title>
      <author>Andrew Baisden</author>
      <pubDate>Mon, 06 Sep 2021 09:42:59 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/100-blog-topic-ideas-for-your-next-article-no-more-writers-block-2e0j</link>
      <guid>https://dev.to/andrewbaisden/100-blog-topic-ideas-for-your-next-article-no-more-writers-block-2e0j</guid>
      <description>&lt;p&gt;A stumbling block for almost all aspiring writers is what should I write about? Writers block prevents a lot of writers from creating articles because they just can't think of something good to write about. I have put together a list of 100 blog topics that you could write about. You can use this list as inspiration to come up with ideas for your own articles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are 100 blog topics to inspire you to write!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-framework-x-vs-framework-y"&gt;
  &lt;/a&gt;
  1. Framework X vs Framework Y
&lt;/h3&gt;

&lt;p&gt;You could compare the differences between React and Vue for example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-why-i-decided-to-become-a-developer"&gt;
  &lt;/a&gt;
  2. Why I decided to become a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your transition into the tech world&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-frontend-vs-backend"&gt;
  &lt;/a&gt;
  3. Front-End vs Back-End
&lt;/h3&gt;

&lt;p&gt;The difference between the two&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-why-you-should-become-a-writer"&gt;
  &lt;/a&gt;
  4. Why you should become a writer
&lt;/h3&gt;

&lt;p&gt;Reasons for becoming a blogger/writer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-what-i-learned-from-looking-for-a-developer-job"&gt;
  &lt;/a&gt;
  5. What I learned from looking for a developer job
&lt;/h3&gt;

&lt;p&gt;Talk about your personal experience when you were looking for work&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-how-to-grow-fast-on-twitter"&gt;
  &lt;/a&gt;
  6. How to grow fast on Twitter
&lt;/h3&gt;

&lt;p&gt;Talk about your recent fast growth and what you learned about marketing&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-how-to-build-mobile-apps-using-language-x"&gt;
  &lt;/a&gt;
  7. How to build mobile apps using language X
&lt;/h3&gt;

&lt;p&gt;Building mobile apps using flutter/react native/swift/kotlin/java etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-how-to-deal-with-imposter-syndrome"&gt;
  &lt;/a&gt;
  8. How to deal with imposter syndrome
&lt;/h3&gt;

&lt;p&gt;Tips on dealing with imposter syndrome&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-tips-for-building-a-strong-brand"&gt;
  &lt;/a&gt;
  9. Tips for building a strong brand
&lt;/h3&gt;

&lt;p&gt;Examples and personal experience on building a brand&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-why-you-should-join-a-bootcamp"&gt;
  &lt;/a&gt;
  10. Why you should join a bootcamp
&lt;/h3&gt;

&lt;p&gt;Personal experiences on how it worked out for you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-top-x-ways-to-become-a-self-taught-developer"&gt;
  &lt;/a&gt;
  11. Top X ways to become a self taught developer
&lt;/h3&gt;

&lt;p&gt;A list of items on how to learn and become a developer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-how-to-build-an-api-using-language-x"&gt;
  &lt;/a&gt;
  12. How to build an API using language X
&lt;/h3&gt;

&lt;p&gt;You could write a guide for creating an API using Node.js&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-a-beginners-guide-to-building-an-app-using-framework-x"&gt;
  &lt;/a&gt;
  13. A beginners guide to building an app using framework X
&lt;/h3&gt;

&lt;p&gt;A guide for building apps using a framework like Next.js, Gatsby, React, Vue etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-here-are-x-courses-for-learning-language-y"&gt;
  &lt;/a&gt;
  14. Here are X courses for learning language Y
&lt;/h3&gt;

&lt;p&gt;For example 10 courses for learning Python&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-x-best-approaches-for-learning-a-programming-language"&gt;
  &lt;/a&gt;
  15. X best approaches for learning a programming language
&lt;/h3&gt;

&lt;p&gt;For example 5 best approaches for learning JavaScript&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-why-you-should-be-using-database-x"&gt;
  &lt;/a&gt;
  16. Why you should be using database X
&lt;/h3&gt;

&lt;p&gt;A detailed article on why you should be using MongoDB for storage for example etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-what-i-learned-after-failing-x-interviews"&gt;
  &lt;/a&gt;
  17. What I learned after failing X interviews
&lt;/h3&gt;

&lt;p&gt;Talk about what you learned after failing 15 interviews for example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-what-i-plan-on-learning-and-who-i-am"&gt;
  &lt;/a&gt;
  18. What I plan on learning and who I am
&lt;/h3&gt;

&lt;p&gt;An introduction on who you are and what you are learning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-fundamentals-all-developers-should-know-about-language-x"&gt;
  &lt;/a&gt;
  19. Fundamentals all developers should know about language X
&lt;/h3&gt;

&lt;p&gt;Talk about JavaScript, Python or another language and the fundamentals&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-what-i-realised-after-learning-language-x-language-y-and-language-z"&gt;
  &lt;/a&gt;
  20. What I realised after learning language X, language Y and language Z
&lt;/h3&gt;

&lt;p&gt;For example JavaScript, Python and C# talk about your findings after you played around with them for the first time &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-x-good-traits-top-developers-have-and-how-to-be-like-them"&gt;
  &lt;/a&gt;
  21. X good traits top developers have and how to be like them
&lt;/h3&gt;

&lt;p&gt;For example you could talk about 10 good traits and how to use them to your advantage&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-what-i-learned-from-hackathons"&gt;
  &lt;/a&gt;
  22. What I learned from hackathons
&lt;/h3&gt;

&lt;p&gt;Talk about your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-how-to-use-x-css-framework-with-y-javascript-framework"&gt;
  &lt;/a&gt;
  23. How to use X CSS framework with Y JavaScript framework
&lt;/h3&gt;

&lt;p&gt;In this example you could talk about using Tailwind CSS with React&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-how-to-make-a-passive-income-on-gumroad"&gt;
  &lt;/a&gt;
  24. How to make a passive income on GumRoad
&lt;/h3&gt;

&lt;p&gt;Talk about your success and experience on GumRoad&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-how-to-make-a-passive-income-on-producthunt"&gt;
  &lt;/a&gt;
  25. How to make a passive income on ProductHunt
&lt;/h3&gt;

&lt;p&gt;Talk about your success and experience on ProductHunt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-freelancing-vs-full-time-employment"&gt;
  &lt;/a&gt;
  26. Freelancing vs Full Time employment
&lt;/h3&gt;

&lt;p&gt;The difference between the two&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#27-the-difference-between-static-site-generators-and-which-one-to-use"&gt;
  &lt;/a&gt;
  27. The difference between static site generators and which one to use
&lt;/h3&gt;

&lt;p&gt;Talk about the differences &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#28-a-day-in-the-life-of-a-software-developer"&gt;
  &lt;/a&gt;
  28. A day in the life of a software developer
&lt;/h3&gt;

&lt;p&gt;Talk about what its really like to work in the industry&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#29-how-to-become-productive-as-a-developer"&gt;
  &lt;/a&gt;
  29. How to become productive as a developer
&lt;/h3&gt;

&lt;p&gt;Tips, tricks and tools that you use day to day&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-x-time-management-strategies-to-become-more-productive"&gt;
  &lt;/a&gt;
  30. X time management strategies to become more productive
&lt;/h3&gt;

&lt;p&gt;For example 20 time management strategies&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-remote-vs-office-work"&gt;
  &lt;/a&gt;
  31. Remote vs Office Work
&lt;/h3&gt;

&lt;p&gt;The difference between the two from your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-how-to-persist-your-data"&gt;
  &lt;/a&gt;
  32. How to persist your data
&lt;/h3&gt;

&lt;p&gt;Talk about using databases, local storage, session state etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-what-you-love-about-working-as-a-developer"&gt;
  &lt;/a&gt;
  33. What you love about working as a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-what-you-dont-love-about-working-as-a-developer"&gt;
  &lt;/a&gt;
  34. What you don't love about working as a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-the-best-soft-skills-to-have-as-a-developer"&gt;
  &lt;/a&gt;
  35. The best soft skills to have as a developer
&lt;/h3&gt;

&lt;p&gt;Use examples to back up what you are saying&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-how-to-deal-with-burnout"&gt;
  &lt;/a&gt;
  36. How to deal with burnout
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#37-why-you-should-be-active-on-social-media"&gt;
  &lt;/a&gt;
  37. Why you should be active on social media
&lt;/h3&gt;

&lt;p&gt;Talk about your personal experiences and reasoning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#38-where-you-see-yourself-in-the-next-x-years"&gt;
  &lt;/a&gt;
  38. Where you see yourself in the next X years
&lt;/h3&gt;

&lt;p&gt;Talk about your career growth&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#39-how-to-monetise-your-products"&gt;
  &lt;/a&gt;
  39. How to monetise your products
&lt;/h3&gt;

&lt;p&gt;Talk about strategies that worked for you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#40-strategies-for-getting-good-at-data-structures"&gt;
  &lt;/a&gt;
  40. Strategies for getting good at data structures
&lt;/h3&gt;

&lt;p&gt;Give examples and maybe link to articles or courses etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-how-you-deal-with-indecisive-clients"&gt;
  &lt;/a&gt;
  41. How you deal with indecisive clients
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-how-to-go-from-unemployed-to-employed-as-a-developer"&gt;
  &lt;/a&gt;
  42. How to go from unemployed to employed as a developer
&lt;/h3&gt;

&lt;p&gt;Strategies to get employed and into the tech industry&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-how-i-stay-up-to-date-in-the-industry"&gt;
  &lt;/a&gt;
  43. How I stay up to date in the industry
&lt;/h3&gt;

&lt;p&gt;Stories from your life&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#44-people-that-inspire-me-in-the-industry"&gt;
  &lt;/a&gt;
  44. People that inspire me in the industry
&lt;/h3&gt;

&lt;p&gt;You could do some case studies on other successful developers and how they inspired you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#45-why-you-dont-do-overtime-work"&gt;
  &lt;/a&gt;
  45. Why you don't do overtime work
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#46-comparing-web-development-to-wix-and-squarespace"&gt;
  &lt;/a&gt;
  46. Comparing web development to Wix and Squarespace
&lt;/h3&gt;

&lt;p&gt;Talk about the differences between them&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#47-x-npm-packages-that-you-should-be-using"&gt;
  &lt;/a&gt;
  47. X NPM packages that you should be using
&lt;/h3&gt;

&lt;p&gt;For example 12 useful packages&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#48-netlifyvercel-serverless-functions"&gt;
  &lt;/a&gt;
  48. Netlify/Vercel serverless functions
&lt;/h3&gt;

&lt;p&gt;A guide on how to use them&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#49-how-to-setup-a-cicd-workflow-with-testing"&gt;
  &lt;/a&gt;
  49. How to setup a CI/CD workflow with testing
&lt;/h3&gt;

&lt;p&gt;A tutorial on how to set it all up&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#50-getting-into-open-source-and-how-to-be-a-good-contributor"&gt;
  &lt;/a&gt;
  50. Getting into open source and how to be a good contributor
&lt;/h3&gt;

&lt;p&gt;A guide on how you did it and what you learned from it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-best-design-resources-for-aspiring-designers"&gt;
  &lt;/a&gt;
  51. Best design resources for aspiring designers
&lt;/h3&gt;

&lt;p&gt;A list of great resources to use&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-best-developer-resources-for-aspiring-developers"&gt;
  &lt;/a&gt;
  52. Best developer resources for aspiring developers
&lt;/h3&gt;

&lt;p&gt;A list of great resources to use&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-how-to-deal-with-difficult-interview-questions"&gt;
  &lt;/a&gt;
  53. How to deal with difficult interview questions
&lt;/h3&gt;

&lt;p&gt;Give examples on how to do well&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-x-tools-every-developer-should-use"&gt;
  &lt;/a&gt;
  54. X tools every developer should use
&lt;/h3&gt;

&lt;p&gt;For example 10 tools&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-x-github-repos-that-you-should-know-about"&gt;
  &lt;/a&gt;
  55. X GitHub repos that you should know about
&lt;/h3&gt;

&lt;p&gt;Do some research on GitHub repos and evaluate them&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#56-i-have-x-years-working-as-a-developer-what-i-have-learned-so-far"&gt;
  &lt;/a&gt;
  56. I have X years working as a developer what I have learned so far
&lt;/h3&gt;

&lt;p&gt;Talk about your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#57-how-to-improve-your-apps-performance-using-database-x"&gt;
  &lt;/a&gt;
  57. How to improve your apps performance using database X
&lt;/h3&gt;

&lt;p&gt;A detailed review on how to boost performance using PostgreSQL for example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#58-best-developers-to-follow-if-you-are-a-x-developer"&gt;
  &lt;/a&gt;
  58. Best developers to follow if you are a X developer
&lt;/h3&gt;

&lt;p&gt;If you are a JavaScript, Python, PHP, C# etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#59-what-are-code-reviews-and-why-you-should-get-better-at-them"&gt;
  &lt;/a&gt;
  59. What are code reviews and why you should get better at them
&lt;/h3&gt;

&lt;p&gt;Talk about your experiences and how you improved&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#60-what-is-the-best-laptop-for-a-developer"&gt;
  &lt;/a&gt;
  60. What is the best laptop for a developer
&lt;/h3&gt;

&lt;p&gt;Do a detailed deep dive on different laptops and how they compare&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#61-macos-vs-windows-vs-linux"&gt;
  &lt;/a&gt;
  61. macOs vs Windows vs Linux
&lt;/h3&gt;

&lt;p&gt;How all 3 compare for developers and your preference&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#62-how-to-boost-your-memory"&gt;
  &lt;/a&gt;
  62. How to boost your memory
&lt;/h3&gt;

&lt;p&gt;Personal experiences from learning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#63-how-to-build-2d-games-using-language-x"&gt;
  &lt;/a&gt;
  63. How to build 2D games using language X
&lt;/h3&gt;

&lt;p&gt;Building games using JavaScript, Python, C# etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#64-building-pwa-apps-using-framework-x"&gt;
  &lt;/a&gt;
  64. Building PWA apps using framework X
&lt;/h3&gt;

&lt;p&gt;How to build games using Flutter, React etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#65-static-vs-dynamically-typed-languages"&gt;
  &lt;/a&gt;
  65. Static vs Dynamically typed languages
&lt;/h3&gt;

&lt;p&gt;Comparing JavaScript to Dart for example&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#66-standing-desk-vs-normal-desk"&gt;
  &lt;/a&gt;
  66. Standing desk vs normal desk
&lt;/h3&gt;

&lt;p&gt;The difference between the two and your experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#67-why-you-chose-to-use-database-x-instead-of-database-y-for-a-project"&gt;
  &lt;/a&gt;
  67. Why you chose to use database X instead of database Y for a project
&lt;/h3&gt;

&lt;p&gt;Comparing a Sql and noSQL database for usage in a project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#68-the-best-social-media-platforms-for-developers"&gt;
  &lt;/a&gt;
  68. The best social media platforms for developers
&lt;/h3&gt;

&lt;p&gt;Talk about the platforms that you think are great&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#69-how-i-created-my-personal-brand"&gt;
  &lt;/a&gt;
  69. How I created my personal brand
&lt;/h3&gt;

&lt;p&gt;Talk about your success and experience&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#69-how-i-made-x-amount-of-money-with-a-product-i-made"&gt;
  &lt;/a&gt;
  69. How I made X amount of money with a product I made
&lt;/h3&gt;

&lt;p&gt;Talk about your success and how you did it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#70-how-i-became-successful-on-platform-x"&gt;
  &lt;/a&gt;
  70. How I became successful on platform X
&lt;/h3&gt;

&lt;p&gt;Your experience on gaining a huge following on twitter, YouTube, Hashnode, DEV etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#71-learning-how-to-do-web-scraping-using-python"&gt;
  &lt;/a&gt;
  71. Learning how to do web scraping using Python
&lt;/h3&gt;

&lt;p&gt;A tutorial on how to do it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#72-how-to-build-a-chatbot-using-language-x"&gt;
  &lt;/a&gt;
  72. How to build a chatbot using language X
&lt;/h3&gt;

&lt;p&gt;A  guide on making a chatbot using JavaScript, Python etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#73-how-to-get-into-freelancing"&gt;
  &lt;/a&gt;
  73. How to get into freelancing
&lt;/h3&gt;

&lt;p&gt;Talk about how you did it and how others can do the same&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#74-a-tutorial-on-how-to-use-aws-for-cloud-storage"&gt;
  &lt;/a&gt;
  74. A tutorial on how to use AWS for cloud storage
&lt;/h3&gt;

&lt;p&gt;Creating a tutorial about AWS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#75-how-to-create-css-art-from-scratch"&gt;
  &lt;/a&gt;
  75. How to create CSS Art from scratch
&lt;/h3&gt;

&lt;p&gt;A detailed guide on how to make CSS Art&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#76-the-best-developer-browser-extensions-to-use"&gt;
  &lt;/a&gt;
  76. The best developer browser extensions to use
&lt;/h3&gt;

&lt;p&gt;A list of browser extensions for chrome or Firefox&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#77-how-you-debug-your-applications"&gt;
  &lt;/a&gt;
  77. How you debug your applications
&lt;/h3&gt;

&lt;p&gt;A guide for doing debugging&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#78-how-to-create-cool-buttons-using-css"&gt;
  &lt;/a&gt;
  78. How to create cool buttons using CSS
&lt;/h3&gt;

&lt;p&gt;A guide for creating cool styled buttons&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#79-the-difference-between-promises-and-async-await"&gt;
  &lt;/a&gt;
  79. The difference between promises and async await
&lt;/h3&gt;

&lt;p&gt;Your thoughts on the subject&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#80-a-roadmap-for-learning-a-technical-stack-and-getting-hired"&gt;
  &lt;/a&gt;
  80. A roadmap for learning a technical stack and getting hired
&lt;/h3&gt;

&lt;p&gt;An roadmap article for learning programming languages&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#81-your-progress-on-doing-the-100-days-of-code-challenge-so-far"&gt;
  &lt;/a&gt;
  81. Your progress on doing the 100 days of code challenge so far
&lt;/h3&gt;

&lt;p&gt;A progress update on what you have accomplished so far&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#82-how-to-build-an-ecommerce-website-using-framework-x"&gt;
  &lt;/a&gt;
  82. How to build an e-commerce website using framework X
&lt;/h3&gt;

&lt;p&gt;A tutorial for building a website using the MERN stack&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#83-the-top-x-visual-studio-code-extensions-you-use"&gt;
  &lt;/a&gt;
  83. The top X Visual Studio Code Extensions you use
&lt;/h3&gt;

&lt;p&gt;The top 10 extensions etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#84-how-to-network-when-you-dont-have-a-big-social-circle"&gt;
  &lt;/a&gt;
  84. How to network when you don't have a big social circle
&lt;/h3&gt;

&lt;p&gt;Tips for connecting with new people&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#85-what-you-learned-from-a-failed-product-launch"&gt;
  &lt;/a&gt;
  85. What you learned from a failed product launch
&lt;/h3&gt;

&lt;p&gt;A story about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#86-what-you-learned-from-a-successful-product-launch"&gt;
  &lt;/a&gt;
  86. What you learned from a successful product launch
&lt;/h3&gt;

&lt;p&gt;A story about your experiences&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#87-x-steps-to-succeeding-in-a-new-job-role"&gt;
  &lt;/a&gt;
  87. X steps to succeeding in a new job role
&lt;/h3&gt;

&lt;p&gt;Talk about your experience from past jobs&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#88-the-best-company-you-have-ever-worked-for-and-what-you-learned"&gt;
  &lt;/a&gt;
  88. The best company you have ever worked for and what you learned
&lt;/h3&gt;

&lt;p&gt;Talk about a previous/current job you had&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#89-the-worst-company-you-have-ever-worked-for-and-what-you-learned"&gt;
  &lt;/a&gt;
  89. The worst company you have ever worked for and what you learned
&lt;/h3&gt;

&lt;p&gt;Talk about a previous/current job you had&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#90-what-you-learned-after-using-github-copilot"&gt;
  &lt;/a&gt;
  90. What you learned after using GitHub Copilot
&lt;/h3&gt;

&lt;p&gt;Talk about your experience using it in a project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#91-what-it-was-like-when-you-first-started-bloggingyoutube-as-an-introvert"&gt;
  &lt;/a&gt;
  91. What it was like when you first started blogging/YouTube as an introvert
&lt;/h3&gt;

&lt;p&gt;What your personal experience was like on the subject&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#92-how-to-add-a-cms-to-your-website"&gt;
  &lt;/a&gt;
  92. How to add a CMS to your website
&lt;/h3&gt;

&lt;p&gt;A tutorial for using a CMS like Strapi, Gatsby or Sanity.io.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#93-a-cheatsheet-for-language-x"&gt;
  &lt;/a&gt;
  93. A cheatsheet for language X
&lt;/h3&gt;

&lt;p&gt;A detailed cheatsheet for using flex box, css grid, JavaScript, Python etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#94-how-to-negotiate-when-getting-a-job-offer"&gt;
  &lt;/a&gt;
  94. How to negotiate when getting a job offer
&lt;/h3&gt;

&lt;p&gt;A guide for managing job offers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#95-how-to-collaborate-with-other-developers"&gt;
  &lt;/a&gt;
  95. How to collaborate with other developers
&lt;/h3&gt;

&lt;p&gt;A strategy for collaborating with other developers on projects&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#96-how-to-explain-a-technical-subject-to-a-non-tech-person"&gt;
  &lt;/a&gt;
  96. How to explain a technical subject to a non tech person
&lt;/h3&gt;

&lt;p&gt;Talk about an experience you had and how to apply it to other scenarios&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#97-how-to-setup-a-development-environment"&gt;
  &lt;/a&gt;
  97. How to setup a development environment
&lt;/h3&gt;

&lt;p&gt;A guide for setting up a development environment&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#98-how-you-stay-fit-as-a-developer"&gt;
  &lt;/a&gt;
  98. How you stay fit as a developer
&lt;/h3&gt;

&lt;p&gt;Talk about your work out routine and how you schedule it in-between coding sessions&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#99-tips-for-staying-consistent-as-a-writer"&gt;
  &lt;/a&gt;
  99. Tips for staying consistent as a writer
&lt;/h3&gt;

&lt;p&gt;Tips on how you stay consistent&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#100-how-to-use-social-media-to-find-work"&gt;
  &lt;/a&gt;
  100. How to use social media to find work
&lt;/h3&gt;

&lt;p&gt;How you can utilise Twitter and LinkedIn to get your next job role&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. As a content creator and technical writer I am passionate about sharing my knowledge and helping other people reach their goals. Let's connect across social media you can find all of my social media profiles and blogs on &lt;a href="https://linktr.ee/andrewbaisden"&gt;linktree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting Started With Hackerrank Using Python | For Absolute Beginners</title>
      <author>Chinmaya Bisoi</author>
      <pubDate>Mon, 06 Sep 2021 09:09:16 +0000</pubDate>
      <link>https://dev.to/chinmayabisoi/getting-started-with-hackerrank-using-python-for-absolute-beginners-347h</link>
      <guid>https://dev.to/chinmayabisoi/getting-started-with-hackerrank-using-python-for-absolute-beginners-347h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-intro"&gt;
  &lt;/a&gt;
  The Intro
&lt;/h2&gt;

&lt;p&gt;Data Structures and Algorithms(DSA) are a necessity to land a Good ass Technical job. And when it comes to DSA, people turn to popular websites like &lt;code&gt;Leetcode&lt;/code&gt;, &lt;code&gt;Hackerrank&lt;/code&gt;, &lt;code&gt;Hackerearth&lt;/code&gt; and many more. &lt;/p&gt;

&lt;p&gt;That being said, Starting anew can be difficult and sometimes overwhelming and newbies can find it difficult to figure out the ins and outs of the platform they use (How to take Input(s), how to produce the proper Output(s)  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hackerrank-with-python"&gt;
  &lt;/a&gt;
  Hackerrank with Python
&lt;/h2&gt;

&lt;p&gt;Let's say you come across &lt;a href="https://www.hackerrank.com/challenges/list-comprehensions/problem"&gt;this&lt;/a&gt; kind of question, where you have input &lt;br&gt;
and output like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKUjJQEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8foqxdr0vsx8chqwn7w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKUjJQEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8foqxdr0vsx8chqwn7w.PNG" alt="SampleInput"&gt;&lt;/a&gt;&lt;br&gt;
Then the output would be given using &lt;code&gt;print&lt;/code&gt; and one way to take in inputs would be individually take all four inputs like x,y,z,n as given below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    print ([[a,b,c] for a in range(0,x+1) for b in range(0,y+1) for c in range(0,z+1) if a + b + c != n ])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other way to take in four inputs would be to use a for loop to store the inputs in a list.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's see another&lt;/strong&gt; &lt;a href="https://www.hackerrank.com/challenges/find-second-maximum-number-in-a-list/problem"&gt;example&lt;/a&gt; &lt;br&gt;
Consider the given inputs and the following code: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDqjpp_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0249k2wtgbzugi95ac2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDqjpp_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0249k2wtgbzugi95ac2.PNG" alt="Case2SampleInput"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the above code does is it assigns 5 to n ; then checks the second line to find &lt;code&gt;2 3 6 6 5&lt;/code&gt; where the input().split() splits the string &lt;code&gt;2 3 6 6 5&lt;/code&gt; to a list with the following items :&lt;br&gt;
&lt;code&gt;2&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; &lt;code&gt;6&lt;/code&gt; &lt;code&gt;6&lt;/code&gt; &lt;code&gt;5&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;The map function then converts the items to integer type and we get a list arr = [2,3,6,6,5] where each item is an integer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hope-this-was-helpful"&gt;
  &lt;/a&gt;
  Hope this was helpful~
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#thats-all-for-now-until-next-time-bros"&gt;
  &lt;/a&gt;
  Thats all for now, Until Next Time Bros
&lt;/h4&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Laravel Website Development Services Helps Organizations To Grow In 2021</title>
      <author>Aditya Goswami</author>
      <pubDate>Mon, 06 Sep 2021 08:45:42 +0000</pubDate>
      <link>https://dev.to/aditya_g_2212/how-laravel-website-development-services-helps-organizations-to-grow-in-2021-326h</link>
      <guid>https://dev.to/aditya_g_2212/how-laravel-website-development-services-helps-organizations-to-grow-in-2021-326h</guid>
      <description>&lt;p&gt;We all know how popular the PHP web framework is for developing web applications. Just like that, With its Model-view-controller architectural pattern. Laravel app development is equally important for web development. Laravel develops websites around the world, organizations like to &lt;em&gt;Hire php Laravel developer&lt;/em&gt; or &lt;em&gt;Laravel experts&lt;/em&gt; for Laravel app development. You will get flawless syntax coding experience with Laravel development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#many-uses-for-laravel-web-development"&gt;
  &lt;/a&gt;
  Many Uses for Laravel Web Development
&lt;/h3&gt;

&lt;p&gt;Being a website development company, if you are offering quality Laravel website development services, then you surely end up meeting lots of web development projects based on Laravel development. Being a Laravel app development company, you delivered specific requirements for partners.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-emerge-as-best-php-web-framework"&gt;
  &lt;/a&gt;
  Laravel emerge as Best PHP Web Framework
&lt;/h3&gt;

&lt;p&gt;Being one of the leading PHP development frameworks, Laravel has the potential to deliver well in the website development field. Laravel development is gaining popularity in the community of Laravel web development for its conciseness and simplicity. Community continuously improves the work and quality of Laravel development.&lt;/p&gt;

&lt;p&gt;Being a Laravel development company, the company has experience and understanding of how complexity of code makes a negative impact on the performance of a website. Even sometimes, websites with complex code take lots of time in loading and users leave the platform in frustration. Here I must want to thank MVC architecture for lessened code complexity in Laravel.&lt;/p&gt;

&lt;p&gt;Moreover, one you have crafted the website with Laravel development: you will get the perfect code, quicker development and even code that is cleaner and more efficient. You will get versatility and quality with &lt;a href="https://www.bacancytechnology.com/laravel-development"&gt;Laravel website development services&lt;/a&gt;. hire Laravel programmers and do wonders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-insight-into-laravel"&gt;
  &lt;/a&gt;
  Technical Insight into Laravel
&lt;/h3&gt;

&lt;p&gt;Caching systems in Laravel are one of the reasons behind the high performance of Laravel development. It can store the numerous caches in the file system and because of that, you can develop the application promptly.&lt;/p&gt;

&lt;p&gt;We all know how competitive the world is right at the moment, you need to be quick in the development process with all the implementation, otherwise anyone can take over your services with high quality services. Laravel website development services offer the most simplified process of user verification to the consumers.&lt;/p&gt;

&lt;p&gt;What if you can do the authentication process with more quality output and lesser complexity and that's exactly what Laravel is offering. Laravel even prevents unauthorized users from accessing your services.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-is-top-priority-for-laravel"&gt;
  &lt;/a&gt;
  Security is Top Priority for Laravel
&lt;/h3&gt;

&lt;p&gt;Being Laravel developer, you must know what security matters to business and users. If you have an ecommerce business, security must be your top priority and you must protect the client’s details. &lt;/p&gt;

&lt;p&gt;While developing your dream business, you must choose the platform that offers extensive security. You will get lots of code based benefits in Laravel development with almost zero threats. You must hire expert Laravel developer for your Laravel application development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-laravel"&gt;
  &lt;/a&gt;
  Future of Laravel
&lt;/h3&gt;

&lt;p&gt;Laravel is at top right now and will keep itself at top and be the most famous and useful PHP frameworks. One of the main reasons behind the demand of the Laravel website development services is its functionality, features, clarity and simplicity. Even the Laravel developers community continuously focus on improving the development that secure the quality of future Laravel development.&lt;/p&gt;

&lt;p&gt;You can use Laravel for any kind of web development, small or bigger, complex or simple, any industries, organizations or startups. Laravel is the perfect choice for your development work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-remarks"&gt;
  &lt;/a&gt;
  Final Remarks
&lt;/h2&gt;

&lt;p&gt;One of the reasons behind the unlimited success of Laravel is - flawless architecture of Laravel. Laravel can do the overall operations of the project without any interruption with accuracy and efficiency. If you want to put your idea into implementation, it's time for you to connect a &lt;strong&gt;Laravel development company&lt;/strong&gt; or &lt;a href="https://www.bacancytechnology.com/hire-laravel-developer"&gt;Hire Laravel expert&lt;/a&gt; with expert-level capabilities in the domain.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>devops</category>
      <category>php</category>
    </item>
    <item>
      <title>How and when to override Android Activity's Lifecycle methods?</title>
      <author>Gourav Khunger</author>
      <pubDate>Mon, 06 Sep 2021 08:23:50 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/how-and-when-to-override-android-activity-s-lifecycle-methods-28b</link>
      <guid>https://dev.to/gouravkhunger/how-and-when-to-override-android-activity-s-lifecycle-methods-28b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Read this article on &lt;a href="https://genicsblog.com/how-and-when-to-override-android-activity-lifecycle-methods"&gt;my blog&lt;/a&gt; for a better experience :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yesterday, I came across a &lt;a href="https://stackoverflow.com/questions/69064102/how-can-i-stop-the-progressdialog-after-returning-to-the-activity"&gt;StackOverflow question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The OP(original poster) of the article had a scenario like this:&lt;/p&gt;

&lt;p&gt;He made a &lt;code&gt;ProgressDialog&lt;/code&gt; in an activity. After pressing a &lt;code&gt;CardView&lt;/code&gt; in that activity corresponding to a meditation session, a &lt;code&gt;ProgressDialog&lt;/code&gt; should appear for 3 seconds, and then the other activity would open - the &lt;code&gt;m1&lt;/code&gt; activity. &lt;/p&gt;

&lt;p&gt;The problem he faced was - After returning to &lt;code&gt;MeditationActivity&lt;/code&gt;, the &lt;code&gt;ProgressDialog&lt;/code&gt; continued to show up and never stopped.&lt;/p&gt;

&lt;p&gt;He wanted that the progress dialog is closed once the user comes back from the &lt;code&gt;m1&lt;/code&gt; activity to the &lt;code&gt;MeditationActivity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just after reading the question, it should strike to the mind that one can override the default methods present in an Activity's Lifecycle and dismiss the dialog from there!&lt;/p&gt;

&lt;p&gt;Here's how the lifecycle of an Android Activity looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxje01ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915330208/6F9zSmseW2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxje01ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915330208/6F9zSmseW2.png" alt="activity_lifecycle.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is an image from the official &lt;a href="https://developer.android.com/guide/components/activities/activity-lifecycle"&gt;android documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the flowchart, we can see that it is the &lt;code&gt;onResume()&lt;/code&gt; method that is called whenever a person comes back to the activity from another screen. So it seems to be the place where we should place the logic for dismissing the dialog!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0zdsn9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915509631/Eq9kO4b_9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0zdsn9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630915509631/Eq9kO4b_9.png" alt="activity_lifecycle.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how we can do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;progressDialog&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;progressDialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dismiss&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The null check is placed because the &lt;code&gt;progressDialog&lt;/code&gt; was initialized only when the person presses the &lt;code&gt;CardView&lt;/code&gt;. And if it is initialized earlier, then there would be redundant dismissals of the &lt;code&gt;progressDialog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was a perfect example where we could override the default lifecycle methods provided by an Android &lt;code&gt;Activity&lt;/code&gt; to perform actions pertaining to lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/69064294/9819031"&gt;Here's my answer&lt;/a&gt; to the original question on StackOverflow! I'll be writing more explanations to StackOverflow Questions, so consider following me on hashnode.&lt;/p&gt;

&lt;p&gt;I hope you find this article helpful :)&lt;/p&gt;

</description>
      <category>android</category>
    </item>
    <item>
      <title>Solve merge conflicts with PHPStorm</title>
      <author>Eelco Verbrugge</author>
      <pubDate>Mon, 06 Sep 2021 08:03:30 +0000</pubDate>
      <link>https://dev.to/veelco/solve-merge-conflicts-with-phpstorm-4165</link>
      <guid>https://dev.to/veelco/solve-merge-conflicts-with-phpstorm-4165</guid>
      <description>&lt;p&gt;Once in a while a merge conflict popups. This happens when you've created your branch and in the meantime your colleague pushed changes just before you did. Git (or your colleague) will let you know if it can be solved automatically and if not, it's up to you how to fix it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1kMRCUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/cFkiFMDg3iFoI/giphy.gif%3Fcid%3Decf05e475nr1w7qk4fbrntcra9zcmsfan9cj5pj1d6x06dyi%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1kMRCUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/cFkiFMDg3iFoI/giphy.gif%3Fcid%3Decf05e475nr1w7qk4fbrntcra9zcmsfan9cj5pj1d6x06dyi%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fix-merge-conflicts-with-phpstorm"&gt;
  &lt;/a&gt;
  How to fix merge conflicts with PHPStorm?
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-checkout-the-branch-where-you-want-to-merge-to-for-example-the-raw-master-endraw-branch"&gt;
  &lt;/a&gt;
  1. Checkout the branch where you want to merge to. For example the &lt;code&gt;master&lt;/code&gt; branch.
&lt;/h4&gt;

&lt;p&gt;PHPStorm-&amp;gt;Git-&amp;gt;Branches...-&amp;gt;master&lt;br&gt;
or &lt;code&gt;Ctrl+Shift+&lt;/code&gt;`&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-pull-the-latest-changes-to-your-local-machine"&gt;
  &lt;/a&gt;
  2. Pull the latest changes to your local machine
&lt;/h4&gt;

&lt;p&gt;PHPStorm-&amp;gt;Git-&amp;gt;Pull...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-checkout-endraw-yourfeaturebranch-raw-where-youve-made-your-changes"&gt;
  &lt;/a&gt;
  3. Checkout &lt;code&gt;your_feature_branch&lt;/code&gt; where you've made your changes
&lt;/h4&gt;

&lt;p&gt;PHPStorm-&amp;gt;Git-&amp;gt;Branches...-&amp;gt;your_feature_branch&lt;br&gt;
or &lt;code&gt;Ctrl+Shift+&lt;/code&gt;`&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-merge-endraw-master-raw-into-endraw-yourfeaturebranch-raw-"&gt;
  &lt;/a&gt;
  4. Merge &lt;code&gt;master&lt;/code&gt; into &lt;code&gt;your_feature_branch&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;PHPStorm-&amp;gt;Git-&amp;gt;Merge...-&amp;gt;master&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-resolve-conflicts"&gt;
  &lt;/a&gt;
  5. Resolve Conflicts
&lt;/h4&gt;

&lt;p&gt;PHPStorm-&amp;gt;Git-&amp;gt;Resolve Conflicts&lt;/p&gt;

&lt;p&gt;Choose Merge.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VWFUTxQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjsvqaca0xy75grtnh53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWFUTxQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjsvqaca0xy75grtnh53.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accept or refuse solutions on the right or left.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uoKMemjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6sxybm0ah73nru4yzyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uoKMemjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6sxybm0ah73nru4yzyy.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apply if done.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-git-commit-your-changes"&gt;
  &lt;/a&gt;
  6. Git commit your changes
&lt;/h4&gt;

&lt;p&gt;PHPStorm-&amp;gt;Git-&amp;gt;Commit-&amp;gt;your_file-&amp;gt;Commit&lt;br&gt;
or &lt;code&gt;Ctrl+K&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-git-push-and-celebrate-life"&gt;
  &lt;/a&gt;
  7. Git push and celebrate life!
&lt;/h4&gt;

&lt;p&gt;PHPStorm-&amp;gt;Git-&amp;gt;Push...&lt;br&gt;
or &lt;code&gt;Ctrl+Shift+K&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git will generate a comment for your commit such as "Merge branch 'master' into your_feature_branche"&lt;/p&gt;

&lt;p&gt;Thats all folks~&lt;/p&gt;

&lt;p&gt;Source:&lt;br&gt;
&lt;a href="https://www.jetbrains.com/help/phpstorm/resolving-conflicts.html"&gt;jetbrains.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>phpstorm</category>
      <category>merge</category>
      <category>conflict</category>
    </item>
    <item>
      <title>Introducing Medusa: Your building blocks for amazing digital commerce experiences</title>
      <author>Sebastian Rindom</author>
      <pubDate>Mon, 06 Sep 2021 08:02:18 +0000</pubDate>
      <link>https://dev.to/medusajs/introducing-medusa-your-building-blocks-for-amazing-digital-commerce-experiences-4nhp</link>
      <guid>https://dev.to/medusajs/introducing-medusa-your-building-blocks-for-amazing-digital-commerce-experiences-4nhp</guid>
      <description>&lt;p&gt;Over the past couple of years we have developed Medusa in close collaboration with customers that needed a headless solution that could support their growth for years to come. We are so excited to finally open up about what it is we have built, why we have built it, and how you can succeed with Medusa. Medusa is an open-source headless commerce engine that can power amazing digital commerce experiences and it is a great choice for any new headless ecommerce project out there.&lt;/p&gt;

&lt;p&gt;Headless ecommere has gained plenty of interest recently and more and more businesses are looking towards making the shift to a headless solution to leverage a more modular setup and all the benefits it brings, such as: better page performance, greater flexibility, better support for unique customer experiences, support for best-in-breed tech stacks, etc. When we first started working on Medusa we had no idea what headless ecommerce meant, and initially, we set out to build a fully-fledged platform, but more on this later!&lt;/p&gt;

&lt;p&gt;This is the first blog post we are publishing and it will stand as an important milestone for our work going forward. We have found that through modularity and simplicity our merchants end up being able to do much more with much less, which is why we will keep pursuing this approach when building out our product further. We want to provide a foundational set of building blocks that can be used to create unique, interesting, and powerful digital commerce experiences and we are so excited to see what amazing work we can help create.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-we-built%C2%A0medusa"&gt;
  &lt;/a&gt;
  Why we built Medusa
&lt;/h3&gt;

&lt;p&gt;We didn’t wake up one morning thinking to ourselves that we wanted to build a headless commerce engine, but rather we got to build Medusa through experience with the limitations of existing platforms. Before transitioning to working full-time on Medusa, we operated as an agency, building all kinds of tools for our customers. We built everything from portfolio websites to custom integrations to ecommerce websites, but quickly started specializing in the latter; as we found new customers we also experienced that many of them were hitting limitations with the platforms available at the time.&lt;/p&gt;

&lt;p&gt;This became evident when a client of ours expressed interest in switching platforms. We started looking for good alternatives but it quickly became clear that none of them would support the expansion across markets and brand ownership that they required so we decided with them that we should try to build a bespoke solution that would cater to their exact needs and so we began building a fully-fledged ecommerce platform with a CMS system, fulfilment system, etc. It was not soon after that we realized that we couldn’t do everything well at once so we started removing parts of what we’d built and replacing them with integrations to better tools. In the end, we were left with a core that was capable of processing and managing orders, ensuring payments were going through, and handling basic product and customer data. What was even more important was that this core was extremely good at integrating other tools and as such able to function as the glue between all the tools and services in your ecommerce stack. Essentially we had built a headless ecommerce engine, simply by following what was easiest for us as developers and most cost-efficient and scalable for our customers.&lt;/p&gt;

&lt;p&gt;Our customers were really happy with the solution as they were able to expand to multiple markets while picking and choosing from any services they found interesting without having to worry about the cost of integration. Furthermore, our customers got a high degree of ownership when using our custom-built solution, as they could ask us to build features that they needed and have them released typically within a couple of days. When contemplating how we could ensure the same level of ownership going forward it became clear that we had to open-source the solution so that no central organization would ever be in control of what was possible for the merchant. Open-sourcing Medusa would also bring a bunch of other benefits such as leveraging the community for feedback and contributions which further strengthens the product.&lt;/p&gt;

&lt;p&gt;After experiencing the issues with the existing platforms we were confident that our product would be a good alternative for many new ecommerce projects and shortly after we decided to open-source the product we started pulling out the generic parts of the implementations we had done, gave it the name Medusa and made it available through GitHub. &lt;a href="https://github.com/medusajs/medusa"&gt;Go to Github to view the open source project&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#headless-the-next-generation-of%C2%A0commerce"&gt;
  &lt;/a&gt;
  Headless: The next generation of commerce
&lt;/h3&gt;

&lt;p&gt;In the early days of the internet operating ecommerce required big budgets and with customers still being new to the digital purchasing experience, only a small group of large enterprises set up online commerce channels by either building them from scratch or using solutions like Hybris. As more customers moved online, new platforms as Magento, Shopify, and WooCommerce emerged — these were easy to use and enabled merchants to make digital commerce available as a secondary sales channel.&lt;/p&gt;

&lt;p&gt;In recent years, ecommerce has become a primary channel for many businesses leading to fierce competition in the space, increasing the need for custom solutions to give unique buying experiences. In the quest for customization, many businesses have been left frustrated with the lack of flexibility that existing platforms provide. While optimizing for ease of use, most traditional platforms is putting their focus on templated “out-of-the-box” solutions neglecting the constraints this inevitably put on the development flexibility. In many cases, businesses have been forced to converge towards compromised solutions, or even make entire platform shifts, as their needs grow beyond what a templated solution can offer. Simultaneously, a much wider variety of businesses (e.g. service providers, B2B companies etc.) requiring fully custom solutions from the beginning have started moving online.&lt;/p&gt;

&lt;p&gt;The increasing demand for customization and flexibility has spurred an interest in headless commerce among performance-focused merchants that want differentiated and fully optimized customer experiences. Yet, many of them are still to make the move. One of the main reasons, why headless has yet to become the dominant type of ecommerce is that it can be expensive to operate a headless ecommerce stack as you need developers that can maintain the infrastructure that powers the integrations between systems in your stack and a high up-front investment for making the initial setup. This is something we are solving with Medusa by providing infrastructure that is preconfigured and optimized to run your projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-the-developer-first-in-your-commerce%C2%A0setup"&gt;
  &lt;/a&gt;
  Putting the developer first in your commerce setup
&lt;/h3&gt;

&lt;p&gt;The modularity and ownership that Medusa can offer is capable of powering incredibly diverse applications ranging from ecommerce websites to more niche cases like in-restaurant experiences and will with high probability be suitable for whatever digital commerce experience you can think of. Many businesses postpone the transition to headless as it can seem daunting and complex when you need developers to maintain your infrastructure and operations; we will make it possible to take out these concerns completely by providing the infrastructure that is configured and optimized to run Medusa projects, thereby making it much cheaper and more accessible for businesses to make the transition to headless early on.&lt;/p&gt;

&lt;p&gt;In more general terms we will be focusing on enabling the developer to do much more with less; this is in line with making sure that merchants can take ownership of their commerce setup as developers can help steer the direction and roadmap for your project without relying on us to create the features you need. By creating powerful tools for the developer we enable them to be more efficient and focused in their work. Examples of tools that we are building are; an infrastructure platform so developers don’t have to configure servers and databases, a powerful CLI that automates the redundant tasks developers face, a React component library to make it easy to build storefronts for Medusa, rich documentation that makes it easy to find what you are looking for and much more.&lt;/p&gt;

&lt;p&gt;With the core project being open-source we will also be open for contributions from the community making sure that we always have a product that is loved by developers so that they can do more!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What’s next?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We are working hard on completing our infrastructure product so that projects can easily be deployed to the cloud. In the meantime, if you are a developer we encourage you to try out Medusa, you can get up and running within 5 minutes and get a quick overview of what features our platform will bring. &lt;a href="https://docs.medusa-commerce.com/tutorial/set-up-your-development-environment"&gt;Check out the tutorial to get started now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are a merchant looking for a new solution we would love to get in touch and discuss what challenges we can help solve and guide you through our process.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>🤷‍♂️ 🤷‍♀️ Vue 3 error with using TypeScript: property X does not exist on type 'EventTarget'</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 06 Sep 2021 07:45:45 +0000</pubDate>
      <link>https://dev.to/koddr/vue-3-error-with-using-typescript-property-x-does-not-exist-on-type-eventtarget-5cpl</link>
      <guid>https://dev.to/koddr/vue-3-error-with-using-typescript-property-x-does-not-exist-on-type-eventtarget-5cpl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, DEV people! 👋 It's time to continue the &lt;strong&gt;Simple Errors&lt;/strong&gt; series with an article about the &lt;strong&gt;TypeScript&lt;/strong&gt; error I encountered when I first decided to convert my &lt;a href="https://v3.vuejs.org/guide/introduction.html"&gt;Vue.js&lt;/a&gt; &lt;code&gt;v3.x&lt;/code&gt; project from regular &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As always, don't judge too harshly, write what you think of such articles, suggest your own topics for parsing in the comments... Here we go! 🚀&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#explanation-of-the-error"&gt;Explanation of the error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#input-data-when-an-error-occurs"&gt;Input data when an error occurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resolving-the-error"&gt;Resolving the error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation-of-the-error"&gt;
  &lt;/a&gt;
  Explanation of the error
&lt;/h2&gt;

&lt;p&gt;When I run &lt;code&gt;vue-tsc --noEmit&lt;/code&gt; to check TypeScript, I get errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;src/components/forms/Input.vue:4:40 - error TS2531: 
Object is possibly 'null'.

&lt;/span&gt;&lt;span class="gp"&gt;4     @input="$&lt;/span&gt;emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'update:modelValue'&lt;/span&gt;, &lt;span class="nv"&gt;$event&lt;/span&gt;.target.value&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"
&lt;/span&gt;&lt;span class="go"&gt;                                         ~~~~~~~~~~~~~

src/components/forms/Input.vue:4:54 - error TS2339: 
Property 'value' does not exist on type 'EventTarget'.

&lt;/span&gt;&lt;span class="gp"&gt;4     @input="$&lt;/span&gt;emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'update:modelValue'&lt;/span&gt;, &lt;span class="nv"&gt;$event&lt;/span&gt;.target.value&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"
&lt;/span&gt;&lt;span class="go"&gt;                                                       ~~~~~

Found 2 errors.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While I knew what was wrong with error &lt;code&gt;Object is possibly 'null'&lt;/code&gt;, I had to dig deep into the documentation to find the reason for error &lt;code&gt;Property 'value' does not exist on type 'EventTarget'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-data-when-an-error-occurs"&gt;
  &lt;/a&gt;
  Input data when an error occurs
&lt;/h2&gt;

&lt;p&gt;My Vue component (&lt;code&gt;src/components/forms/Input.vue&lt;/code&gt;) looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-3 py-2 border-2 rounded-lg"&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;input=&lt;/span&gt;&lt;span class="s"&gt;"$emit('update:modelValue', $event.target.value)"&lt;/span&gt;
    &lt;span class="na"&gt;:type=&lt;/span&gt;&lt;span class="s"&gt;"inputType"&lt;/span&gt;
    &lt;span class="na"&gt;:tabindex=&lt;/span&gt;&lt;span class="s"&gt;"tabIndex"&lt;/span&gt;
    &lt;span class="na"&gt;:placeholder=&lt;/span&gt;&lt;span class="s"&gt;"placeholder"&lt;/span&gt;
    &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;"modelValue"&lt;/span&gt;
    &lt;span class="na"&gt;:required=&lt;/span&gt;&lt;span class="s"&gt;"isRequired"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;inputType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;modelValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you've already noticed, in the &lt;code&gt;@input&lt;/code&gt; attribute of the template, I refer to &lt;code&gt;$event.target.value&lt;/code&gt; as I would do in regular JavaScript. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🤔 &lt;strong&gt;Note:&lt;/strong&gt; Even if &lt;code&gt;$event.target&lt;/code&gt; return &lt;code&gt;null&lt;/code&gt;, which has no &lt;code&gt;value&lt;/code&gt; property, this is not &lt;em&gt;a big problem&lt;/em&gt; for regular JavaScript! It will give a run-time error on the client and this web application will crash. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that's not how TypeScript works. It checks all possible problematic places in the code at the time of building the project and points them out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's why we love and use it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_Ue6BQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z11642wyh1kar7n8vtfy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_Ue6BQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z11642wyh1kar7n8vtfy.jpg" alt="solve the problem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resolving-the-error"&gt;
  &lt;/a&gt;
  Resolving the error
&lt;/h2&gt;

&lt;p&gt;First, write a new method called &lt;code&gt;handleInputChange(event)&lt;/code&gt; in &lt;a href="https://v3.vuejs.org/guide/composition-api-setup.html"&gt;setup&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;// ...

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Define event handler for input changes in TypeScript.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleInputChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleInputChange&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In TypeScript, we need to explicitly point to the object we want to work with. In this case, it is the &lt;code&gt;input&lt;/code&gt; field, so its object will be called &lt;code&gt;HTMLInputElement&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ &lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement"&gt;HTMLInputElement&lt;/a&gt; interface provides special properties and methods for manipulating the options, layout, and presentation of &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let's add this method to the &lt;code&gt;@input&lt;/code&gt; in our template, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-3 py-2 border-2 rounded-lg"&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;input=&lt;/span&gt;&lt;span class="s"&gt;"$emit('update:modelValue', handleInputChange($event))"&lt;/span&gt;
    &lt;span class="na"&gt;:type=&lt;/span&gt;&lt;span class="s"&gt;"inputType"&lt;/span&gt;
    &lt;span class="na"&gt;:tabindex=&lt;/span&gt;&lt;span class="s"&gt;"tabIndex"&lt;/span&gt;
    &lt;span class="na"&gt;:placeholder=&lt;/span&gt;&lt;span class="s"&gt;"placeholder"&lt;/span&gt;
    &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;"modelValue"&lt;/span&gt;
    &lt;span class="na"&gt;:required=&lt;/span&gt;&lt;span class="s"&gt;"isRequired"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;vue-tsc&lt;/code&gt; once again... and boom! 💥 All errors disappeared.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;I know how difficult it is to retrain to a new paradigm of interaction with the same objects and properties! But this simple error showed me just how powerful and useful &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; is in the real world.&lt;/p&gt;

&lt;p&gt;Have a successful work and let simple errors &lt;strong&gt;never stop you&lt;/strong&gt; on the way to realizing your projects! 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sascha Bosshard &lt;a href="https://unsplash.com/photos/qhhp1LwvPSI"&gt;https://unsplash.com/photos/qhhp1LwvPSI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Lucrezia Carnelos &lt;a href="https://unsplash.com/photos/yGv-pvgRuiI"&gt;https://unsplash.com/photos/yGv-pvgRuiI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>vue</category>
      <category>typescript</category>
      <category>showdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Dev tool: A project built to boost your Skills and Productivity 💫</title>
      <author>Anthony Lagrede</author>
      <pubDate>Mon, 06 Sep 2021 07:45:11 +0000</pubDate>
      <link>https://dev.to/alagrede/dev-tool-a-project-built-to-boost-your-skills-and-productivity-29j8</link>
      <guid>https://dev.to/alagrede/dev-tool-a-project-built-to-boost-your-skills-and-productivity-29j8</guid>
      <description>&lt;p&gt;Today I'm pleased to announce the Znote 1.0 💫, a super versatile Markdown code editor! 🎉🎉&lt;/p&gt;

&lt;p&gt;Shared with the Dev.to community in 2020, 🥰 the positive  &lt;a href="https://dev.to/alagrede/dev-tool-a-markdown-editor-for-developers-1j13"&gt;feedback&lt;/a&gt; I received since then motivates me to push forward (many thanks again 🙏). I'm coming after months of HARD WORK, with a robust version dedicated to all your daily code usage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reminder-what-is-znote"&gt;
  &lt;/a&gt;
  Reminder: What is Znote
&lt;/h2&gt;

&lt;p&gt;Znote is a Markdown editor, designed to be your best companion 🫂 for prototyping and making scripts. The missing piece for JS developers in data exploration, offering a solid alternative to &lt;strong&gt;Jupyter&lt;/strong&gt; in the Python ecosystem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-approach"&gt;
  &lt;/a&gt;
  The approach
&lt;/h2&gt;

&lt;p&gt;Promulgate an innovative and empirical approach that consists to &lt;strong&gt;write code and documentation in the same place&lt;/strong&gt;. In this app, you can quickly play code block, exploiting results, and put around all the necessary information in Markdown.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Easier to read and share than a raw code script, you will take pleasure to organize and share your work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oE5pTQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa6hlrr49870ebclplb0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oE5pTQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa6hlrr49870ebclplb0.gif" alt="Znote demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I honestly love to use it.&lt;/em&gt; 🤗&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new?
&lt;/h2&gt;

&lt;p&gt;For this new version, I come with advanced features to cover intensive and professional usages. I use Znote advantageously as a replacement for various software such as SQL client, Postman or Notepad++, but also as a main tool to create and test Node scripts.&lt;/p&gt;

&lt;p&gt;To correctly achieve this:&lt;/p&gt;

&lt;p&gt;✓ I entirely &lt;strong&gt;reviewed the backend code and the UI&lt;/strong&gt; to be more cleaner, usable and robust&lt;br&gt;
✓ Add a dynamic customizable &lt;strong&gt;code completion&lt;/strong&gt;&lt;br&gt;
✓ Also, add &lt;strong&gt;Markdown shortcuts&lt;/strong&gt; and completion&lt;br&gt;
✓ A new &lt;strong&gt;Right context menu&lt;/strong&gt; with commands to transform selected text &lt;em&gt;(will be dynamic in the future)&lt;/em&gt;&lt;br&gt;
✓ A builder to create &lt;strong&gt;shortcut functions&lt;/strong&gt; callable in code&lt;br&gt;
✓ Add the possibility to add and use external &lt;strong&gt;NPM packages&lt;/strong&gt;&lt;br&gt;
✓ Run code with an &lt;strong&gt;external Node installation&lt;/strong&gt;&lt;br&gt;
✓ &lt;strong&gt;Export code&lt;/strong&gt; as scripts and Diagram as SVG&lt;br&gt;
✓ Export the entire note as &lt;strong&gt;PDF, HTML&lt;/strong&gt;...&lt;br&gt;
✓ Add various &lt;em&gt;Magic comments&lt;/em&gt;&lt;br&gt;
✓ A new horizontal layout for the preview (useful for some code use cases like SQL)&lt;br&gt;
✓ More &lt;strong&gt;themes&lt;/strong&gt; to customize the app&lt;br&gt;
✓ A more &lt;strong&gt;performant search&lt;/strong&gt; box&lt;br&gt;
✓ An internal database to &lt;strong&gt;optimize memory&lt;/strong&gt;&lt;br&gt;
And so many things...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ &lt;em&gt;I am also including in this list some features developed in the very latest preview versions&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#and-its-really-powerful"&gt;
  &lt;/a&gt;
  And it's really powerful...
&lt;/h2&gt;

&lt;p&gt;Create easily an SQL client, Postman... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OrWigAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1d3a90t569r9z7jui8w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OrWigAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1d3a90t569r9z7jui8w.gif" alt="SQL functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add your NPM packages and create shortcut functions to create your perfect dedicated tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cr6DEFmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je1f5dkwalvjw8t86c4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cr6DEFmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je1f5dkwalvjw8t86c4m.png" alt="NPM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More themes are available to enhance the experience&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAMysySM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h34w5ox8o2g20w0nv4dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAMysySM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h34w5ox8o2g20w0nv4dw.png" alt="theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-now"&gt;
  &lt;/a&gt;
  And Now?
&lt;/h2&gt;

&lt;p&gt;I now plan to integrate &lt;strong&gt;recipes&lt;/strong&gt; to load via an open marketplace, to safely add useful functions and commands to Znote. I'm also investigating to add automatic Jobs, tabs, a valid EV certificate... &lt;/p&gt;

&lt;p&gt;Because a software is never finished 😅, I also finally decided to introduce some paid features, like NPM packages &lt;em&gt;(mainly to cover advanced use cases)&lt;/em&gt; to help me to push Znote even further. But it's still free for general use cases!&lt;/p&gt;

&lt;p&gt;Thanks to this, I can offer you a more consistent Cloud space to save and share your works between all your devices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-have-any-idea-for-me"&gt;
  &lt;/a&gt;
  Do you have any idea for me?
&lt;/h2&gt;

&lt;p&gt;Leave me a comment below or contact me via the Github &lt;a href="https://github.com/alagrede/znote-app/discussions"&gt;Discussions&lt;/a&gt;&lt;br&gt;
Discover all features on the &lt;a href="https://znote.io/checkout.html"&gt;Znote website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❤️ I really enjoy sharing this app with you from the start, hope to see you soon in my &lt;a href="https://znote.io#newsletter"&gt;newsletter&lt;/a&gt; to share tips and tutorials.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hope you will continue enjoy using my app and it will make your job a little more fun.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>datascience</category>
    </item>
  </channel>
</rss>
