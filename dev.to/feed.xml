<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What‚Äôs Docker? And how to start with it</title>
      <author>Wojtek Krzywiec</author>
      <pubDate>Sat, 28 Nov 2020 15:41:45 +0000</pubDate>
      <link>https://dev.to/wkrzywiec/what-s-docker-and-how-to-start-with-it-2eai</link>
      <guid>https://dev.to/wkrzywiec/what-s-docker-and-how-to-start-with-it-2eai</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@timeasley"&gt;Tim Easley&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;During the last couple of years Docker has became a thing in software developer world. With this post I would like to explain what problem does it solve, how to install it and test on a simple examples. Apart from the technical topics I also would like to elaborate a little bit on the containerization concept of a software.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#container-technology-what-problem-does-it-solve" class="anchor"&gt;
  &lt;/a&gt;
  Container technology. What problem does it solve?
&lt;/h3&gt;

&lt;p&gt;Imagine this scenario. You, as a developer, has finished a new amazing app. Everything was tested and it could be a next big thing. Now your boss is asking you to move it from your development machine (usually local PC) to company‚Äôs server (production).&lt;/p&gt;

&lt;p&gt;Would it be a simple copy-pasting task? In some cases it might, but what if on this server runs couple of other applications? It might be some conflicts when for instance, a new software you need to have the 8 Java version, but other applications are using older versions. And number of such conflicts may skyrocket with a complexity of installed application on a server. So instead of quickly moving new solution to a production we would need to consume a lot of time to make sure that our new application would run and also make sure that old ones won‚Äôt crash after these changes. So here we have &lt;strong&gt;the old problem ‚Äîsome software works only on my machine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6wcva5sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aureg0w9ISlitYSrgym5uhQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wcva5sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aureg0w9ISlitYSrgym5uhQ.jpeg" alt="Source [quick meme](http://www.quickmeme.com/p/3vuukg)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source &lt;a href="http://www.quickmeme.com/p/3vuukg"&gt;quick meme&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luckily the containers concept was introduced! Instead of moving a finished app from one environment to another we need first to wrap it in a container that handle for us all required dependencies and libraries, so it runs reliably on every machine (Windows, Linux, Mac, cloud, and others)!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But is a the only benefit of the container?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not at all! Apart from that now every software is portable, their development could be more faster than it was. Especially when we develop a microservices , where each service is a separate part of a bigger solution. With this approach we can split large software into smaller parts and each of it could be written in a different technology (Java, Python, R‚Ä¶), so we are able to choose the best tool for a particular problem.&lt;/p&gt;

&lt;p&gt;Moreover the microservice architecture helps with agile approach. For instance if we have an e-commerce website and one of payment method is PayPal, but suddenly customers wants to replace it with another method. Using this approach you won‚Äôt need to create a new version of entire app, just the tiny part responsible for payments, which is far less time-consuming.&lt;/p&gt;

&lt;p&gt;And finally, containers technology enables some of the cloud features (like scalability, self-healing), it reduce solution‚Äôs time to market, reduce IT infrastructure or issue time resolving.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-role-of-docker" class="anchor"&gt;
  &lt;/a&gt;
  What is a role of Docker?
&lt;/h3&gt;

&lt;p&gt;Ok, so now, what is a role of the Docker in container technology? Basically it‚Äôs a tool that allows us to develop, deploy and run software in a container. With Docker we can package up the application with all libraries and dependencies, and unlike virtual machine they don‚Äôt require so much resources, so they are faster and more easy to use.&lt;/p&gt;

&lt;p&gt;Let‚Äôs move on to show you how Docker really works, but first we must install it on your local machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-docker" class="anchor"&gt;
  &lt;/a&gt;
  How to install Docker?
&lt;/h3&gt;

&lt;p&gt;Depending on the system you have the installation might be a slightly different. If you‚Äôre using a Linux, you‚Äôll be able to install Docker in a terminal, but if you‚Äôre using Windows or MacOS you will need to install a Docker Desktop app which is a lightweight Linux virtual machine.&lt;/p&gt;

&lt;p&gt;Here are the instructions how to install Docker on &lt;a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/"&gt;Ubuntu (Linux)&lt;/a&gt;, &lt;a href="https://docs.docker.com/docker-for-windows/install/"&gt;Windows&lt;/a&gt; and &lt;a href="https://docs.docker.com/docker-for-mac/install/"&gt;MacOS.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-first-helloworld-docker-container" class="anchor"&gt;
  &lt;/a&gt;
  Running first, hello-world, Docker container
&lt;/h3&gt;

&lt;p&gt;Everything is set up, so open a terminal (on Windows and Macs, first make sure that Docker is up and running) and type following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker &lt;span class="nt"&gt;--version&lt;/span&gt;

Docker version 18.09.2, build 6247962
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you get similar output as I have it‚Äôs installed correctly üí™.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs try with a first container, to do that run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run hello-world

Unable to find image &lt;span class="s1"&gt;'hello-world:latest'&lt;/span&gt; locally
latest: Pulling from library/hello-world
1b930d010525: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
Status: Downloaded newer image &lt;span class="k"&gt;for &lt;/span&gt;hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
    1. The Docker client contacted the Docker daemon.
    2. The Docker daemon pulled the &lt;span class="s2"&gt;"hello-world"&lt;/span&gt; image from the Docker Hub.&lt;span class="o"&gt;(&lt;/span&gt;amd64&lt;span class="o"&gt;)&lt;/span&gt;
    3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading.
    4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
     &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; ubuntu bash

    Share images, automate workflows, and more with a free Docker ID:
     &lt;span class="o"&gt;[&lt;/span&gt;https://hub.docker.com/]&lt;span class="o"&gt;(&lt;/span&gt;https://hub.docker.com/&lt;span class="o"&gt;)&lt;/span&gt;

    For more examples and ideas, visit:
     &lt;span class="o"&gt;[&lt;/span&gt;https://docs.docker.com/get-started/]&lt;span class="o"&gt;(&lt;/span&gt;https://docs.docker.com/get-started/&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what happens here? First of all, we‚Äôve pulled a &lt;a href="https://hub.docker.com/_/hello-world"&gt;‚Äúhello-world‚Äù image&lt;/a&gt; from an official Docker image repository ‚Äî &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;. A Docker image can be compared to a recipe for a container, it‚Äôs an executable file that has all information needed to run an application. &lt;em&gt;Docker Hub&lt;/em&gt; is a an official repository, where some of the images are stored and are available for us.&lt;/p&gt;

&lt;p&gt;In above print out you could found two other terms ‚Äî &lt;em&gt;Docker client&lt;/em&gt; and &lt;em&gt;Docker daemon&lt;/em&gt;. First one is a terminal, command line application that we‚Äôre using to communicate with &lt;em&gt;Docker daemon&lt;/em&gt;, which is a local background service which is responsible for managing the containers.&lt;/p&gt;

&lt;p&gt;Now, after typing &lt;code&gt;docker info&lt;/code&gt; we should get some info about current status of container and images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker info

Containers: 1
Running: 0
Paused: 0
Stopped: 1
Images: 1
....
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another command would be &lt;strong&gt;docker images&lt;/strong&gt; which print for us list of locally saved images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker images

REPOSITORY    TAG        IMAGE ID        CREATED             SIZE
hello-world   latest    fce289e99eb9    2 months ago         1.84kB
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let‚Äôs try something different and run another container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run busybox &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Docker funs!"&lt;/span&gt;

Hello Docker funs!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What happened here? A first part is very similar to what we already had ‚Äî docker run busybox command pulled an image from Ducker Hub and build it to the container. The second part echo "hello Docker funs!" is a command that was ran inside the container!&lt;/p&gt;

&lt;p&gt;Now let‚Äôs check out if containers are running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker ps &lt;span class="nt"&gt;-a&lt;/span&gt;

CONTAINER ID  IMAGE      COMMAND          CREATED        STATUS               
5411cd0e5873  busybox    &lt;span class="s2"&gt;"echo 'Hello ‚Ä¶"&lt;/span&gt; 3 minutes ago Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;... 
abac886c2a2d  busybox    &lt;span class="s2"&gt;"sh"&lt;/span&gt;            4 minutes ago Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;...                      
9a1437750643  hello-world &lt;span class="s2"&gt;"/hello"&lt;/span&gt;       40 minutes ago Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Column STATUS is showing that all our images are stopped.&lt;/p&gt;

&lt;p&gt;But what if we want to run multiple commands? Just add -i flag to run method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run &lt;span class="nt"&gt;-i&lt;/span&gt; busybox

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# ls&lt;/span&gt;
    bin   dev   etc   home  proc  root  sys   tmp   usr   var

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# cd home&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  /home &lt;span class="c"&gt;# echo "Hello World!"&lt;/span&gt;
    Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally let‚Äôs do something more complex and run a &lt;a href="https://hub.docker.com/_/tomcat"&gt;container with a Tomcat server.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; tomcat-server &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8888:8080 tomcat:8.0

Status: Downloaded newer image &lt;span class="k"&gt;for &lt;/span&gt;tomcat:8.0
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /docker-java-home/jre
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;

19-Mar-2019 05:40:43.322 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"http-apr-8080"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
19-Mar-2019 05:40:43.336 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ajp-apr-8009"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
19-Mar-2019 05:40:43.348 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.catalina.startup.Catalina.start Server startup &lt;span class="k"&gt;in &lt;/span&gt;974 ms

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using above command with parameters we did certain task:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; ‚Äî it keeps the container up and running,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--name tomcat-server&lt;/code&gt; ‚Äî in this way we specify the alias (&lt;em&gt;tomcat-server&lt;/em&gt;) of the container,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; ‚Äî it tells Docker to automatically remove container when it exits&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-p 8888:8080&lt;/code&gt; ‚Äî it maps the inside port of the container (8080) to the host (outside) port, so when you type &lt;a href="http://localhost:8888/"&gt;*http://localhost:8888/&lt;/a&gt; *on your local you should get something like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nC64yUr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2062/1%2Aaor983vFrTJr4S1Xwoc_1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nC64yUr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2062/1%2Aaor983vFrTJr4S1Xwoc_1g.png" alt="Tomact GUI ‚Äî so it confirms that you‚Äôve got a running application server on your machine without even installing a thing!"&gt;&lt;/a&gt;&lt;em&gt;Tomact GUI ‚Äî so it confirms that you‚Äôve got a running application server on your machine without even installing a thing!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before we end our work with Docker for today, it‚Äôs a good practice to check whether none of the containers is running on the background. To check it use one of already introduces command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker ps &lt;span class="nt"&gt;-a&lt;/span&gt;

CONTAINER ID    IMAGE        CREATED             STATUS              
91b2db85e50d  tomcat:8.0   8 minutes ago       Up 8 minutes        
e00541868e30  busybox      16 minutes ago      Up 16 minutes  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see on the STATUS print out two containers are still up and running. To stop both of them use following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker stop &lt;span class="si"&gt;$(&lt;/span&gt;docker ps &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-q&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

91b2db85e50d
e00541868e30
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now when you check again none of them are running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker ps -

CONTAINER ID   IMAGE      CREATED                STATUS                      
e00541868e30  busybox  21 minutes ago    Exited &lt;span class="o"&gt;(&lt;/span&gt;137&lt;span class="o"&gt;)&lt;/span&gt; 6 seconds ago    
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You may wonder why you don‚Äôt see the tomcat-server container. It‚Äôs because we‚Äôve added a -rm option when it was ran, so it automatically deletes the container to free space.&lt;/p&gt;

&lt;p&gt;And it‚Äôs everything for today! If you‚Äôre want more information about the Docker, please be patient. New stories are coming really soon üôÇ!&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in Docker topic you can check my other blog posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/@wkrzywiec/database-in-a-docker-container-how-to-start-and-whats-it-about-5e3ceea77e50?source=post_page---------------------------"&gt;Database in a Docker container ‚Äî how to start and what‚Äôs it about&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/@wkrzywiec/how-to-put-your-java-application-into-docker-container-5e0a02acdd6b?source=post_page---------------------------"&gt;How to put your Java application into Docker container&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/@wkrzywiec/build-and-run-angular-application-in-a-docker-container-b65dbbc50be8"&gt;Build and run Angular application in a Docker container&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-started/"&gt;&lt;strong&gt;Get Started, Part 1: Orientation and setup&lt;/strong&gt;
on docs.docker.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/resources/what-container"&gt;&lt;strong&gt;What is a Container? | Docker&lt;/strong&gt; on docker.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-b7ba70caeb4b"&gt;&lt;strong&gt;Learn Enough Docker to be Useful&lt;/strong&gt; on towardsdatascience.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/why-docker"&gt;&lt;strong&gt;Why Docker? | Docker&lt;/strong&gt; on docker.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>microservices</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Collapsing Page Effect</title>
      <author>Johnny Fekete</author>
      <pubDate>Sat, 28 Nov 2020 14:18:13 +0000</pubDate>
      <link>https://dev.to/johnnyfekete/collapsing-page-effect-332a</link>
      <guid>https://dev.to/johnnyfekete/collapsing-page-effect-332a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#fun-with-the-logout-animation" class="anchor"&gt;
  &lt;/a&gt;
  Fun with the Logout Animation
&lt;/h2&gt;

&lt;p&gt;The other day I was working on my startup, and wanted to spice things up&lt;br&gt;
a bit so I created a collapsing page animation for the logout functionality.&lt;br&gt;
Nothing fancy, some CSS transition animation. But when I &lt;a href="https://twitter.com/FullStackMaker/status/1280413902610796544?s=20"&gt;posted it on Twitter&lt;/a&gt;,&lt;br&gt;
it got viral, especially after it was retweeted by Smashing Magazine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76THAgJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.bonboarding.com/gifs/collapsing-page-effect/collapse.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76THAgJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.bonboarding.com/gifs/collapsing-page-effect/collapse.gif" alt="Collapsing page effect animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was totally mind-blown by the engagement, and all the positive feedback&lt;br&gt;
(this was my first viral content). Many of the people asked me to share the code,&lt;br&gt;
but instead of just publishing it on github (which I did, and you can access it as&lt;br&gt;
a &lt;a href="https://www.npmjs.com/package/collapsing-page"&gt;NPM package here&lt;/a&gt; - available both for React or plain JavaScript) I decided to write a brief article about it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-notsocomplicated-code" class="anchor"&gt;
  &lt;/a&gt;
  The Not-So-Complicated Code
&lt;/h2&gt;

&lt;p&gt;As a start, I wanted body's &lt;em&gt;all&lt;/em&gt; child elements to collapse, and also all &lt;code&gt;div&lt;/code&gt;'s.&lt;br&gt;
I didn't want to put animation on all elements (eg. headers, links, buttons etc)&lt;br&gt;
because I felt it would make the animation too fractured.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body &amp;gt; *, body div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make sure that the page doesn't get scrolled, I set the position to &lt;code&gt;fixed&lt;/code&gt;.&lt;br&gt;
I also disabled pointer events, so no clicks or other events get triggered&lt;br&gt;
during the animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, before dealing with the actual, I had to measure the total height&lt;br&gt;
of the page (to know, how much should the items "fall" to ensure that all items&lt;br&gt;
will be out of the screen at the end):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So the animation is actually super simple: just loop through the selected&lt;br&gt;
elements and generate some semi-random values, then add them as CSS attributes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// wait between 0 and 3 seconds&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// speed between 2 and 5 seconds&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// rotate with max 15 degrees to either direction&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moveX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// move with 80px to either direction&lt;/span&gt;

  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`transform &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms ease-out`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transitionDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`translateY(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) translateX(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;moveX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This loop just goes through every element and assigns random values for them.&lt;/p&gt;

&lt;p&gt;All of the elements will be transitioned downward with the height of the screen,&lt;br&gt;
therefore even the ones at the top of your page will end up out of the screen at the end.&lt;/p&gt;

&lt;p&gt;Finally, I wanted to keep one item that stayed on the screen behind the collapsing page:&lt;/p&gt;

&lt;p&gt;There are a few important things with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it should be a child of the body, so it's parent element is not collapsing&lt;/li&gt;
&lt;li&gt;it should have &lt;code&gt;fixed&lt;/code&gt; position&lt;/li&gt;
&lt;li&gt;to achieve the effect that it's in the background behind everything else, you can adjust the &lt;code&gt;z-index&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then just ignore it and it's children elements in the forEach loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Identify the logout screen that should stay in place&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#logout-screen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Function that tells if an element is a&lt;/span&gt;
&lt;span class="c1"&gt;// descendant (children, grandchildren etc) of another element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// And the updated forEach loop:&lt;/span&gt;
&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logoutEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this element should detect clicks&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// don't continue adding the animation&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// ... add the animation for the other items&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is the basic logic, it's quite simple and all animations are handled by CSS transitions.&lt;/p&gt;

&lt;p&gt;Here's the final code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;collapsePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body &amp;gt; *, body div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#logout-screen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logoutEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// wait between 0 and 3 seconds&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// speed between 2 and 5 seconds&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// rotate with max 10 degrees&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moveX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// move with 50px to either direction&lt;/span&gt;

    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`transform &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms ease-out`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transitionDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`translateY(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
      &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) translateX(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;moveX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#things-to-consider" class="anchor"&gt;
  &lt;/a&gt;
  Things to Consider
&lt;/h2&gt;

&lt;p&gt;After the animation is done, all your elements will still be available in the DOM,&lt;br&gt;
just transitioned out of the screen. It is not a problem if you will navigate to&lt;br&gt;
another page after, but it might cause unexpected behavior if you use some&lt;br&gt;
libraries that handle the navigation for you (eg. react-router-dom).&lt;/p&gt;

&lt;p&gt;To solve this issue, I added a reset function to the component, that is triggered&lt;br&gt;
on unmounting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;br&gt;
You can grab the whole code as an &lt;a href="https://www.npmjs.com/package/collapsing-page"&gt;NPM package&lt;/a&gt; - it can be used both as a React component or as a standalone JavaScript function.&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While this animation can bring some unexpected delight to your users, be careful with it.&lt;br&gt;
Don't overuse, as the animation takes a few seconds each time. I recommend only using it for logouts,&lt;br&gt;
or when the user deletes something in your web-app (eg. a large project, or even the user's profile).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>animation</category>
      <category>ux</category>
      <category>react</category>
    </item>
    <item>
      <title>Ode to Semantic HTML</title>
      <author>Eevis (she/her)</author>
      <pubDate>Sat, 28 Nov 2020 13:54:18 +0000</pubDate>
      <link>https://dev.to/eevajonnapanula/ode-to-semantic-html-38c3</link>
      <guid>https://dev.to/eevajonnapanula/ode-to-semantic-html-38c3</guid>
      <description>&lt;p&gt;Have you ever created a button out of a div? Added that &lt;code&gt;onClick&lt;/code&gt;-event there, and styled the div to look like a button? Yup, me too. And I'm not proud of it. &lt;/p&gt;

&lt;p&gt;If you wonder why I'm saying I'm not proud of it, here's the reason: It is purely exclusive. If you don't add the correct roles, the tab index, keyboard events, and all that, there are plenty of users who just can't use that button. Heck, some users don't even know that there is a button.&lt;/p&gt;

&lt;p&gt;In this blog post, I will explain what semantic HTML is and what are the benefits of using it. A spoiler alert: They help to communicate that there actually is a button. üòÑ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  What is Semantic HTML?
&lt;/h2&gt;

&lt;p&gt;Semantic HTML, or semantic markup, describes its meaning to browser and developer in human- and machine-readable way. So, with semantic elements, a human will know what that element is (for example, a button), and a browser knows how to display and interact with them. An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am a button!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;vs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  I try to be a button!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a reader of the code, you probably can assume that the first one is a button from the &lt;code&gt;button&lt;/code&gt;-element. That is a semantic tag. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; however, is not a semantic element, and without that id on the div, you wouldn't be able to say that it is a button (well, it says "I try to be a button!" but the text could be anything). &lt;/p&gt;

&lt;p&gt;From the browser's (or eventually, screen reader's) perspective, that first one is definitely a button, as the semantic tag tells. The latter, however, is just text, so no possibilities of interaction - screen reader users don't know that there is a button at all. Sighted keyboard users see that it is a button (assuming it has been styled as one) but can't interact with it as it does not get focus. &lt;/p&gt;

&lt;p&gt;A note here - not all native elements are semantic elements. Elements like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; don't carry any semantic meaning, and thus are not semantic elements. The elements and features I'm discussing in the next section, are only the ones with semantic meaning. For all the curious ones, every HTML element is explained in the &lt;a href="https://html.spec.whatwg.org/#semantics"&gt;WHATWG HTML Living Standard&lt;/a&gt;. I like the note about the div-element: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Semantics can be communicated through two things - native semantics and semantics added with &lt;a href="https://www.w3.org/TR/wai-aria/"&gt;ARIA (Accessible Rich Internet Applications)&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#native-semantics" class="anchor"&gt;
  &lt;/a&gt;
  Native Semantics
&lt;/h3&gt;

&lt;p&gt;Native semantics come from the HTML elements. The HTML element itself conveys meaning - eg. that it is a button - and does not need any extra (like &lt;code&gt;role="button"&lt;/code&gt;) to be added to the mix. This is maybe even clearer with the &lt;code&gt;code&lt;/code&gt;-element. When the browser encounters a code-block that has been declared with the &lt;code&gt;code&lt;/code&gt;-tag, it knows that there is no need to try to run that code. It is purely for reading and happens to be code. &lt;/p&gt;

&lt;p&gt;Semantic HTML-elements also carry lots of other good things - they are focusable and keyboard usable by default to the extent that particular element should be. There is no need to implement these features. So, in the example of the button, it can be activated with enter and spaceBar, and our code doesn't need to listen to the spacebar or enter key events.&lt;/p&gt;

&lt;p&gt;Other examples of (natively) semantic HTML elements are headings, paragraphs, and landmarks such as &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, and &lt;code&gt;footer&lt;/code&gt;. They can be grouped into several categories such as document metadata, text-level semantics, grouping content, etc. See the &lt;a href="https://html.spec.whatwg.org/#semantics"&gt;WHATWG HTML Living Standard&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;One note about using semantic elements: use them for their semantics, not for their looks. A good example of misuse is using &lt;code&gt;blockquote&lt;/code&gt;-element for the indentation AMD not for implicating a quote. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#semantics-with-aria" class="anchor"&gt;
  &lt;/a&gt;
  Semantics with ARIA
&lt;/h3&gt;

&lt;p&gt;There is another way to add semantics to the elements, and that is with ARIA. For example, a span with the following properties is not understood as a heading by a screen reader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;I want to be a heading!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But when the semantics are added with ARIA, it becomes a heading from the screen reader's point of view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt; &lt;span class="na"&gt;aria-level=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yay I'm a heading!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note, however, that the semantic heading tags are the recommended way to communicate headings! And this goes to anything - native semantic HTML elements are preferred over adding semantics with ARIA. The reason for this is that when using ARIA, there are so many things to remember to implement and add compared to the native semantic elements. &lt;/p&gt;

&lt;p&gt;So, when the ARIA would be an appropriate solution compared to semantic HTML? There are several occasions, and a common nominator is that when the semantic elements aren't enough, ARIA should be used. For example, there is no semantic element for a modal dialog. To make it accessible, it would need a few aria-attributes and roles added. If you are curious about what those things are, check out the &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex"&gt;WAI-ARIA Authoring Practices&lt;/a&gt; - they have listed design patterns for different widgets containing the expected keyboard interaction and needed aria-attributes, and have the information for dialogs as well.&lt;/p&gt;

&lt;p&gt;There is a warning to be given when speaking about ARIA. No ARIA is better than bad ARIA - this means that having the wrong aria-attributes in the code can create a really confusing experience for users with assistive technology. Also, when using, for example, roles, be sure to implement all the functionality that is expected from that role - it is frustrating if a screen reader tells that the element is a button, but the keyboard functionality is not implemented. &lt;/p&gt;

&lt;p&gt;So, I want to stress this: adding ARIA adds just &lt;em&gt;information&lt;/em&gt;, not the functionality. When using aria-attributes, be sure to implement all the expected functionality!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-use-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  Why You Should Use Semantic HTML
&lt;/h2&gt;

&lt;p&gt;The HTML tags we use should describe and convey the meaning of the underlying content. This is helpful in many ways, but the three most important things are 1) making the site accessible, 2) helping with SEO, and 3) making the code easier to read and understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessibility" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h3&gt;

&lt;p&gt;The first point, making the site accessible, should be every front end developer's goal. I mean, I imagine no one wants to exclude any users, right? Making the site fully accessible to different kinds of users requires a lot of work. Using (native) semantic elements helps you, as you don't have to implement every single interaction by yourself, as the semantic tags provide most of the required functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo" class="anchor"&gt;
  &lt;/a&gt;
  SEO
&lt;/h3&gt;

&lt;p&gt;Semantics also helps with SEO. Search engines crawl through the websites and can only "see" the textual context and DOM, and they index the content they come across. This means that everything that is in textual format counts. For example, giving images descriptive alt-texts, using semantic headings, and so on, help make your DOM machine-readable for crawlers, yielding a better SEO score. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readable-code" class="anchor"&gt;
  &lt;/a&gt;
  Readable Code
&lt;/h3&gt;

&lt;p&gt;Using semantic elements also helps to make the code more readable. An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Home
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      About
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Contacts
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title of the blogpost&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Cat ipsum dolor sit amet, chase 
    ball of string or try to hold own 
    back foot to clean it
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;vs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/contacts"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Contacts&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title of the blogpost&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Cat ipsum dolor sit amet, chase 
      ball of string or try to hold own 
      back foot to clean it
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which one is easier to read and understand what's going on? I'd say the second.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summingup" class="anchor"&gt;
  &lt;/a&gt;
  Summing-up
&lt;/h2&gt;

&lt;p&gt;So, using semantic HTML is the thing to do for several reasons; It helps to build accessible sites, to get better SEO-scores, and make the code more readable. You can add semantics by using the native elements or with ARIA. If you use ARIA, be sure to use the correct aria-attributes and implement the functionality that is required (so, for example, don't communicate that "this is a button" with &lt;code&gt;role="button"&lt;/code&gt; but then neglect to create the keyboard shortcuts).&lt;/p&gt;

&lt;p&gt;I'm planning to write several blog posts that dive deeper into the design patterns and widgets in &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex"&gt;WAI-ARIA Authoring Practices&lt;/a&gt; and implementing them with React. So stay tuned if you want to know more!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>a11y</category>
      <category>react</category>
    </item>
    <item>
      <title>The Time I Wrote a White Noise Generator To Improve Loading Times</title>
      <author>Miki Stanger</author>
      <pubDate>Sat, 28 Nov 2020 13:10:00 +0000</pubDate>
      <link>https://dev.to/mimafogeus2/the-time-i-wrote-a-white-noise-generator-to-improve-loading-times-j0k</link>
      <guid>https://dev.to/mimafogeus2/the-time-i-wrote-a-white-noise-generator-to-improve-loading-times-j0k</guid>
      <description>&lt;p&gt;The year was 2011. I was a young, &lt;del&gt;aspiring&lt;/del&gt; software developer working in my first position in the industry.&lt;br&gt;
In our app we had a web view, which we could use to display dynamic content. As mobile connections were at 2011 speeds, we had a hard limit on the size of each web view page - including all assets and code. That was usually not a problem, until one day I had to implement a design where the background was a just-slightly-grainy grey.&lt;/p&gt;

&lt;p&gt;Grainy = white noise.&lt;/p&gt;

&lt;p&gt;That was a problem. To understand why, let's talk about image compression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-compression-in-a-nutshell" class="anchor"&gt;
  &lt;/a&gt;
  Image Compression in a Nutshell
&lt;/h2&gt;

&lt;p&gt;The images you see on the web are usually compressed; they can use many different methods in order to save space, but all of them can be categorised into two groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lose some of the data (This is called &lt;strong&gt;lossy compression&lt;/strong&gt;, and includes &lt;a href="https://en.wikipedia.org/wiki/JPEG#JPEG_compression"&gt;JPEG&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/GIF#Compression_example"&gt;GIF&lt;/a&gt;, among others)&lt;/li&gt;
&lt;li&gt;Represent the data in a way that takes less space (this is called &lt;em&gt;lossless&lt;/em&gt; compression, and you might best know it through the &lt;a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics#Compression"&gt;PNG&lt;/a&gt; format)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lossy compression of images is commonly visible. &lt;a href="https://commons.wikimedia.org/wiki/File:Asterisk_with_jpg-artefacts.png"&gt;JPEG artifacts&lt;/a&gt; are a known side effect of JPEG compression, and in GIFs you could recognise "rounding up" of colors, as it's limited to 256 colors. these methods could work fine for many things (e.g. photography in JPEG), but might be too much where small, clean lines/details are needed. Our white-noise-textured background fell in the second category.&lt;/p&gt;

&lt;p&gt;If not JPEG or GIF, I tried to save the background as PNG. The file was BIG.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-cant-losslessly-compress-white-noise" class="anchor"&gt;
  &lt;/a&gt;
  You Can't (Losslessly) Compress White Noise
&lt;/h2&gt;

&lt;p&gt;The main method I know for lossless compression involves finding repeating patterns, replacing them with a shorter representation and keeping the replacement in a dictionary. For example, in the string &lt;code&gt;aaabaaacaaad&lt;/code&gt;, we have the substring &lt;code&gt;aaa&lt;/code&gt; appearing a few times.&lt;br&gt;
We can shorten it by replacing it with a single character; let's call it 1. We now have a compressed string - &lt;code&gt;1b1c1d&lt;/code&gt;, and a dictionary - &lt;code&gt;1:aaa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When displaying the string, we use the dictionary to replace the shorter substring back to the original one, and get &lt;code&gt;aaabaaacaaad&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Different formats differ in the way they find what to replace, how many times they return the process, and what of many other optimisations they use. However, these basics are commonly used.&lt;/p&gt;

&lt;p&gt;Back to our noisy image - white noise is, by definition, random; it is a noise generated by receiving different values in a range with equal probability. Being random, the chance for repeating patterns is very low, and lossless compression in the way we described is not very effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-we-wont-load-this-at-all" class="anchor"&gt;
  &lt;/a&gt;
  What If We Won't Load This At All?
&lt;/h2&gt;

&lt;p&gt;We'll still have noise, don't worry, but we'll have to deal with it differently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load the page, with a background color or image, but without the noise.&lt;/li&gt;
&lt;li&gt;Use a canvas to generate white noise&lt;/li&gt;
&lt;li&gt;Give the canvas a very low opacity&lt;/li&gt;
&lt;li&gt;Position it above the background&lt;/li&gt;
&lt;li&gt;Mission accomplished!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;White noise, being simply a uniform random grey value on each pixel, is very easy to generate. You iterate over the canvas' width and height, and color each pixel in a random shade of grey.&lt;/p&gt;

&lt;p&gt;It worked! The total page size was now small enough to fit our hard size limit. However, my state of the art iPhone 4, and all other mobile devices we've tested, took a noticeable time to run this code. This wasn't a good user experience, so we've had to find another solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiles" class="anchor"&gt;
  &lt;/a&gt;
  Tiles
&lt;/h2&gt;

&lt;p&gt;The next plan was to use the existing generator to generate a much smaller area of white noise, and use it as a tile, a repeating background. As it has a low opacity and was used as a texture, people wouldn't easily see it repeats, and we'd have a nice, elegant background texture that is quick to generate.&lt;br&gt;
This also meant that I couldn't simply use the canvas above the background, as I'd then have to fill it. Instead, I used an invisible canvas to generate the white noise tile, then used that tile, in the format of a &lt;a href="https://css-tricks.com/data-uris/"&gt;data URI&lt;/a&gt;, as a background to a different element.&lt;br&gt;
Thankfully, canvases have long provided this functionality &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL"&gt;natively&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the process we ended up with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load the page, with a background color or image, but without the noise.&lt;/li&gt;
&lt;li&gt;Use an invisible canvas to generate a low-opacity white noise tile.&lt;/li&gt;
&lt;li&gt;Get the canvas image as a &lt;a href="https://css-tricks.com/data-uris/"&gt;data URI&lt;/a&gt;, and use that as a &lt;a href="https://caniuse.com/?search=multiple%20backgrounds"&gt;second &lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; for the container element (together with the untextured image), or as a background-image over a color background.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the texture was very subtle, we could get away with texture repetition without it being noticed - as long as the tile wasn't very small. A few attempts to balance tile size (repetition vs. loading speed) and how visible the repetition was, and we've had a working feature :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-we-take-from-this" class="anchor"&gt;
  &lt;/a&gt;
  What Should We Take From This?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It's good to know how things work, even if you only work with them indirectly. By knowing some basics about image compression and white noise, for example, I could find the source of a non-trivial front-end problem, and solve it.&lt;/li&gt;
&lt;li&gt;Beware of focusing too much on the things you directly need for work. Learning a bit about things outside of your daily line of work, in addition to being interesting, could help you out later.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>üë®‚Äçüíª Basics of Views and Routing in Django ( Part 8 ) - Django For Beginners</title>
      <author>KetanIP</author>
      <pubDate>Sat, 28 Nov 2020 08:43:43 +0000</pubDate>
      <link>https://dev.to/ketanip/basics-of-views-and-routing-in-django-part-8-django-for-beginners-842</link>
      <guid>https://dev.to/ketanip/basics-of-views-and-routing-in-django-part-8-django-for-beginners-842</guid>
      <description>&lt;p&gt;This is part of the series &lt;a href="https://www.ketaniralepatil.com/series/django-for-beginners/"&gt;Django For Beginners&lt;/a&gt; we are going to see about apps in app and we will see about models in django in this part.&lt;/p&gt;

&lt;p&gt;You can this read complete post &lt;a href="https://www.ketaniralepatil.com/python/django/urls-and-views-in-django/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we are going to understand the idea of views and routing from scratch and see some types of responses and then we will learn about basic routing and to separate &lt;code&gt;urls.py&lt;/code&gt; in separate files files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-views-" class="anchor"&gt;
  &lt;/a&gt;
  what are views ?
&lt;/h2&gt;

&lt;p&gt;Views are like middle man between request and response on your server they contain all you logic for a route, we will talk about route later in this post. They essentially process get the data needed for the request and process it and the return it as a response. This response can be of a variety of types, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; , &lt;code&gt;json&lt;/code&gt; , &lt;code&gt;xml&lt;/code&gt; to name a few. &lt;/p&gt;

&lt;p&gt;Now let's see a example of a view,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World üòä."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I tried to make is as basic as possible. What is happening above is when we receive a request and we call this &lt;code&gt;view function&lt;/code&gt; it will return an simple text response, that is &lt;code&gt;Hello World üòä.&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;You may have noticed about &lt;code&gt;request&lt;/code&gt; argument in the &lt;code&gt;home_response&lt;/code&gt; view above it is compulsory argument it is a &lt;code&gt;dictionary&lt;/code&gt; object and contains lot, by lot, I mean really a lot of information about the request of which most of the times you are not going to use directly.  With &lt;code&gt;request&lt;/code&gt; object we can access headers, user agent, ip, cookies to name a few.&lt;/p&gt;

&lt;p&gt;In above example we returned &lt;code&gt;text&lt;/code&gt; response but it is not what happens in real world, right ü§î ? In real world scenarios we need to either prove a html response or a &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;xml&lt;/code&gt;  as a response.  So let us see how to pass &lt;code&gt;html&lt;/code&gt; as response for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;h1&amp;gt;Hello World üòä.&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#returning-html-pages-in-response" class="anchor"&gt;
  &lt;/a&gt;
  Returning HTML Pages in Response
&lt;/h3&gt;

&lt;p&gt;I am lazy so I copied above code and just added &lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; tags around our plane text response and wallah, it is now a &lt;code&gt;html&lt;/code&gt; response but don't you think it would be bad for long  html responses with which we have to deal most of the times, so for that we keep &lt;code&gt;html&lt;/code&gt; away from &lt;code&gt;views&lt;/code&gt; all together so to keep code clean and follow the &lt;code&gt;DRY&lt;/code&gt; principle .  &lt;/p&gt;

&lt;p&gt;Sorry to interrupt you but I want to tell you one thing that I have started a small blog you may continue reading it &lt;a href="https://www.ketaniralepatil.com/python/django/urls-and-views-in-django/"&gt;here&lt;/a&gt; it will help me a lot.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PWA / SPA / AMP</title>
      <author>Swapnil Sagar</author>
      <pubDate>Sat, 28 Nov 2020 05:23:03 +0000</pubDate>
      <link>https://dev.to/swapnil09/pwa-spa-amp-55pk</link>
      <guid>https://dev.to/swapnil09/pwa-spa-amp-55pk</guid>
      <description>&lt;p&gt;If you are into Web Development in 2020 and working in latest technologies like React, Gatsby, Etc. then you must be familiar with SPA, PWA and AMP. These are some new abbreviations which every dev should be familiar with. These technologies gave a step-up to the community in terms of Web functionalities. Lets have a look in them one-by-one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pwa" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;PWA&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;PWA&lt;/strong&gt;&lt;/em&gt; stands for PROGRESSIVE WEB APP. This is an app built from the web technologies we all know and love, like HTML, CSS, and JavaScript, but with a feel and functionality that rivals an actual native app. Thanks to a couple of smart additions, you can turn almost any website into a progressive web app. This means that you can build a PWA rather quickly, in regards to a native app that‚Äôs pretty difficult to develop. Plus, you can offer all the features of native apps, like push notifications, offline support, and much more.&lt;/p&gt;

&lt;p&gt;Progressive Web Apps are web apps that use emerging web browser APIs and features along with traditional progressive enhancement strategy to bring a native app-like user experience to cross-platform web applications.&lt;/p&gt;

&lt;p&gt;Many sites you find online are actually a progressive web app. Take twitter.com, for instance. If you visit that site on your smartphone, you can install it to your home screen. Now, on opening the saved Twitter site, you‚Äôll notice that it looks and performs just like a native app. There‚Äôs no browser window or nothing. There‚Äôs no difference in running it from an iPhone or an Android smartphone. Simply log in and you‚Äôre good to go. That‚Äôs a major benefit of building your web app with a PWA in mind.&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NTLGl8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/swQ5x2J/pwa-app.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NTLGl8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/swQ5x2J/pwa-app.jpg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;In order to call a Web App a PWA, technically speaking it should have the following features: &lt;strong&gt;Secure contexts (HTTPS), one or more Service Workers, and a manifest file&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Secure contexts (HTTPS)&lt;br&gt;
The web application must be served over a secure network. Being a secure site is not only a best practice, but it also establishes your web application as a trusted site especially if users need to make secure transactions. Most of the features related to a PWA such as geolocation and even service workers are available only once the app has been loaded using HTTPS.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Service workers&lt;br&gt;
A service worker is a script that allows intercepting and control of how a web browser handles its network requests and asset caching. With service workers, web developers can create reliably fast web pages and offline experiences.&lt;br&gt;
Manifest file&lt;/p&gt;

&lt;p&gt;-&amp;gt; A JSON file that controls how your app appears to the user and ensures that progressive web apps are discoverable. It describes the name of the app, the start URL, icons, and all of the other details necessary to transform the website into an app-like format.&lt;/p&gt;

&lt;p&gt;You can check PWA availablity on a site by accessing &lt;strong&gt;lighout&lt;/strong&gt; through inspect element.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrRYPQ9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yWVptWc/pwa-web.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrRYPQ9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yWVptWc/pwa-web.jpg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;PWAs are gaining popularity. Many big sites are PWAs, like Starbucks.com, Pinterest.com, Washingtonpost.com and Uber.com are actually installable on your home screen and offer a comparable experience to their native apps.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#spa" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SPA&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;single-page application (SPA)&lt;/strong&gt; is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of the browser loading entire new pages. The goal is faster transitions that make the website feel more like a native app.&lt;/p&gt;

&lt;p&gt;A (SPA) is a web app or site that fits into one single page. SPA provides a more flexible, desktop-like user-experience and gives better performance.&lt;/p&gt;

&lt;p&gt;It allows the development of a smoother and more controlled UX, hiding web complexity (requests, responses, etc.) SPA swaps only the content that is requested by the user, loading HTML data in chunks.&lt;/p&gt;

&lt;p&gt;There are two types of SPA: one embeds the content of multiple pages into one ‚Äòshell‚Äô page; with the other, one single app uses Ajax to retrieve content whenever a user clicks a link, so only the content that changes will be updated on the page, while the rest of the page remains with no reloads.&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yG6W8toX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.aalpha.net/wp-content/uploads/2019/11/single-page-app-india.gif" class="article-body-image-wrapper"&gt;&lt;img width="80%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yG6W8toX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.aalpha.net/wp-content/uploads/2019/11/single-page-app-india.gif"&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#why-you-need-a-single-page-web-app" class="anchor"&gt;
  &lt;/a&gt;
  Why You Need a Single Page Web App
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It‚Äôs perfect if you have a large-scale app with a complex user interface and hundreds of content pages, and you need to satisfy a large and diverse audience (thousands of users) that uses multiple devices&lt;/li&gt;
&lt;/ol&gt;

&lt;ol&gt;
&lt;li&gt;If you need a super rapid site with dynamic data loading and improved UX&lt;/li&gt;
&lt;/ol&gt;




&lt;h4&gt;
  &lt;a href="#advantages-of-single-page-apps" class="anchor"&gt;
  &lt;/a&gt;
  Advantages of Single Page Apps
&lt;/h4&gt;

&lt;p&gt;‚û§ Faster and snappier user experience&lt;/p&gt;

&lt;p&gt;‚û§ Decrease in page-load time&lt;/p&gt;

&lt;p&gt;‚û§ No reload or execution with each new page request&lt;/p&gt;

&lt;p&gt;‚û§ Dynamic loading of page or part of page‚Äôs content&lt;/p&gt;

&lt;p&gt;‚û§ Simpler interaction for end-user with a single page&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#when-to-use-a-spa" class="anchor"&gt;
  &lt;/a&gt;
  WHEN TO USE A SPA
&lt;/h4&gt;

&lt;p&gt;You might be asking, ‚ÄúWhen should I use a single page application?‚Äù When you have a business or a personal website that needs a dynamic platform and small data volume, the single-page application is a good idea. It is also a great option if you are planning to develop a mobile app in the future, since, as we mentioned above, the backend API can be used for both the web and mobile apps.&lt;/p&gt;

&lt;p&gt;The main drawback is the SEO, but the architecture is suitable for Software-as-a-Service (SaaS) platforms, closed communities, and social networks (which is why Facebook uses it). The reason for this is that these sites don‚Äôt need optimization for search on Google.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#amp" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AMP&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;AMP&lt;/strong&gt;&lt;/em&gt; (originally an acronym for &lt;strong&gt;Accelerated Mobile Pages&lt;/strong&gt;) is an open source HTML framework developed by the AMP Open Source Project It was originally created by Google as a competitor to Facebook Instant Articles and Apple News.&lt;/p&gt;

&lt;p&gt;AMP provides a straightforward way to create web pages that are fast, smooth-loading and prioritize the user-experience above all else.&lt;br&gt;
AMP is a simple and robust format to ensure your website is fast, user-first, and makes money. AMP provides long-term success for your web strategy with distribution across popular platforms and reduced operating and development costs.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#in-simpler-words" class="anchor"&gt;
  &lt;/a&gt;
  In Simpler Words
&lt;/h4&gt;

&lt;p&gt;Technically speaking, AMP removes cumbersome HTML, CSS and JavaScript elements, resulting in a stripped-down page that only includes the most vital content (text, images, videos, and of course, site ads). This makes AMP lightning speed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To experience AMP Webiste yourself &lt;a href="https://amp-article.herokuapp.com/"&gt;Click Here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#what-makes-amp-pages-load-so-quickly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What makes AMP pages load so quickly?&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Google has a strict set of optimisations that significantly improve page loading times:&lt;/p&gt;

&lt;p&gt;‚û• Allow only asynchronous scripts&lt;/p&gt;

&lt;p&gt;‚û• Size all resources statically&lt;/p&gt;

&lt;p&gt;‚û• Don‚Äôt let extension mechanisms block rendering&lt;/p&gt;

&lt;p&gt;‚û• Keep all third-party JavaScript out of the critical path&lt;/p&gt;

&lt;p&gt;‚û• All CSS must be inline and size-bound&lt;/p&gt;

&lt;p&gt;‚û• Font triggering must be efficient&lt;/p&gt;

&lt;p&gt;‚û• Minimise style recalculations&lt;/p&gt;

&lt;p&gt;‚û• Only run GPU-accelerated animations&lt;/p&gt;

&lt;p&gt;‚û• Prioritise resource loading&lt;/p&gt;

&lt;p&gt;‚û• Load pages in an instant&lt;/p&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html amp lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;script async src="https://cdn.ampproject.org/v0.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;Hello, AMPs&amp;lt;/title&amp;gt;
    &amp;lt;link rel="canonical" href="https://amp.dev/documentation/guides-and-tutorials/start/create/basic_markup/"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1"&amp;gt;
    &amp;lt;script type="application/ld+json"&amp;gt;
      {
        "@context": "http://schema.org",
        "@type": "NewsArticle",
        "headline": "Open-source framework for publishing content",
        "datePublished": "2015-10-07T12:02:41Z",
        "image": [
          "logo.jpg"
        ]
      }
    &amp;lt;/script&amp;gt;
    &amp;lt;style amp-boilerplate&amp;gt;body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}&amp;lt;/style&amp;gt;&amp;lt;noscript&amp;gt;&amp;lt;style amp-boilerplate&amp;gt;body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}&amp;lt;/style&amp;gt;&amp;lt;/noscript&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Welcome to the mobile web&amp;lt;/h1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Read the official AMP Documentation &lt;a href="https://amp.dev/documentation/?format=websites"&gt;HERE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>ux</category>
    </item>
    <item>
      <title>Bayes' Theorem: Concepts and Code</title>
      <author>Paul Apivat Hanvongse</author>
      <pubDate>Sat, 28 Nov 2020 03:51:54 +0000</pubDate>
      <link>https://dev.to/paulapivat/bayes-theorem-concepts-and-code-1pkg</link>
      <guid>https://dev.to/paulapivat/bayes-theorem-concepts-and-code-1pkg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;This post is a in continuation of my coverage of &lt;a href="https://joelgrus.com/2019/05/13/data-science-from-scratch-second-edition/"&gt;Data Science from Scratch by Joel Grus&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It picks up from the &lt;a href="https://dev.to/paulapivat/conditional-probability-with-python-concepts-tables-code-3e4k"&gt;previous post&lt;/a&gt;, so be sure to check that out for proper context.&lt;/p&gt;

&lt;p&gt;Building on our understanding of conditional probability we'll get into Bayes' Theorem. We'll spend some time understanding the concept before we implement an example in code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bayes-theorem" class="anchor"&gt;
  &lt;/a&gt;
  Bayes Theorem
&lt;/h2&gt;

&lt;p&gt;Previously, we established an understanding of &lt;strong&gt;conditional&lt;/strong&gt; probability, but building up with &lt;strong&gt;marginal&lt;/strong&gt; and &lt;strong&gt;joint&lt;/strong&gt; probabilities. We explored the conditional probabilities of two outcomes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Outcome 1: What is the probability of the event "both children are girls" (B) conditional on the event "the older child is a girl" (G)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The probability for outcome one is roughly 50% or (1/2).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Outcome 2: What is the probability of the event "both children are girls" (B) conditional on the event "at least one of the children is a girl" (L)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The probability for outcome two is roughly 33% or (1/3).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bayes' Theorem&lt;/strong&gt; is simply &lt;em&gt;an alternate&lt;/em&gt; way of calculating conditional probability.&lt;/p&gt;

&lt;p&gt;Previously, we used the &lt;strong&gt;joint&lt;/strong&gt; probability to calculate the &lt;strong&gt;conditional&lt;/strong&gt; probability. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outcome-1" class="anchor"&gt;
  &lt;/a&gt;
  Outcome 1
&lt;/h3&gt;

&lt;p&gt;Here's the conditional probability for outcome 1, using a joint probability:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(G) = 'Probability that first child is a girl' (1/2)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P(B) = 'Probability that both children are girls' (1/4)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P(B|G) = P(B,G) / P(G) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P(B|G) =  (1/4) / (1/2) = &lt;strong&gt;1/2&lt;/strong&gt; or roughly &lt;strong&gt;50%&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technically, we &lt;em&gt;can't&lt;/em&gt; use joint probability because the two events are &lt;em&gt;not independent&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;To clarify, the probability of the older child being a certain gender and the probability of the younger child being a certain gender &lt;em&gt;is&lt;/em&gt; independent, but &lt;code&gt;P(B|G)&lt;/code&gt; the 'probability of &lt;em&gt;both&lt;/em&gt; child being a girl' and 'the probability of the older child being a girl' are &lt;em&gt;not independent&lt;/em&gt;; and hence we express it as a &lt;em&gt;conditional&lt;/em&gt; probability.&lt;/p&gt;

&lt;p&gt;So, the joint probability of &lt;code&gt;P(B,G)&lt;/code&gt; is just event B,&lt;code&gt;P(B)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here's an alternate way to calculate the conditional probability (&lt;strong&gt;without&lt;/strong&gt; joint probability):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;P(B|G) = P(G|B) * P(B) / P(G)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;P(B|G) = 1 * (1/4) / (1/2)&lt;/li&gt;
&lt;li&gt;P(B|G) = (1/4) * (2/1) &lt;/li&gt;
&lt;li&gt;P(B|G) = 1/2 = &lt;strong&gt;50%&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: P(G|B) is 'the probability that the first child is a girl, given that &lt;strong&gt;both&lt;/strong&gt; children are girls is a certainty (1.0)'&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;reverse&lt;/strong&gt; conditional probability, can also be calculated, without joint probability:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the probability of the older child being a girl, given that both children are girls? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;P(G|B) = P(B|G) * P(G) / P(B)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem (reverse case)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;P(G|B) = (1/2) * (1/2) / (1/4)&lt;/li&gt;
&lt;li&gt;P(G|B) = (1/4) / (1/4)&lt;/li&gt;
&lt;li&gt;P(G|B) = 1 = &lt;strong&gt;100%&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is consistent with what we already derived above, namely that P(G|B) is a &lt;strong&gt;certainty&lt;/strong&gt; (probability = 1.0), that the older child is a girl, &lt;strong&gt;given that&lt;/strong&gt; both children are girls. &lt;/p&gt;

&lt;p&gt;We can point out two additional observations / rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;While, joint probabilities are &lt;strong&gt;symmetrical&lt;/strong&gt;: P(B,G) == P(G,B),&lt;/li&gt;
&lt;li&gt;Conditional probabilities are &lt;strong&gt;not symmetrical&lt;/strong&gt;: P(B|G) != P(G|B)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#bayes-theorem-alternative-expression" class="anchor"&gt;
  &lt;/a&gt;
  Bayes' Theorem: Alternative Expression
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bayes Theorem&lt;/strong&gt; is a way of calculating conditional probability &lt;em&gt;without&lt;/em&gt; the joint probability, summarized here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;P(B|G) = P(G|B) * P(B) / P(G)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;P(G|B) = P(B|G) * P(G) / P(B)&lt;/code&gt;  &lt;strong&gt;This is Bayes Theorem (reverse case)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll note that &lt;code&gt;P(G)&lt;/code&gt; is the denominator in the former, and &lt;code&gt;P(B)&lt;/code&gt; is the denominator in the latter. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What if, for some reasons, we don't have access to the denominator? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could derive both &lt;code&gt;P(G)&lt;/code&gt; and &lt;code&gt;P(B)&lt;/code&gt; in another way using the &lt;code&gt;NOT&lt;/code&gt; operator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(G) = P(G,B) + P(G,not B) = P(G|B) * P(B) + P(G|not B) * P(not B)&lt;/li&gt;
&lt;li&gt;P(B) = P(B,G) + P(B,not G) = P(B|G) * P(G) + P(B|not G) * P(not G)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the alternative expression of Bayes Theorem for the probability of &lt;em&gt;both&lt;/em&gt; children being girls, given that the first child is a girl ( P(B|G) ) is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(B|G) = P(G|B) * P(B) / ( P(G|B) * P(B) + P(G|not B) * P(not B) )&lt;/li&gt;
&lt;li&gt;P(B|G) =     1 * 1/4 / (1 * 1/4 + 1/3 * 3/4)&lt;/li&gt;
&lt;li&gt;P(B|G) =  1/4  /  (1/4 + 3/12)&lt;/li&gt;
&lt;li&gt;P(B|G) =  1/4  /  2/4  =  1/4 * 4/2&lt;/li&gt;
&lt;li&gt;P(B|G) =  1/2 or roughly &lt;strong&gt;50%&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can check the result in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bayes_theorem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_g_given_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_g_given_not_b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# calculate P(not B)
&lt;/span&gt;   &lt;span class="n"&gt;not_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;p_b&lt;/span&gt;
   &lt;span class="c1"&gt;# calculate P(G)
&lt;/span&gt;   &lt;span class="n"&gt;p_g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p_g_given_b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p_b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p_g_given_not_b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;not_b&lt;/span&gt;
   &lt;span class="c1"&gt;# calculate P(B|G)
&lt;/span&gt;   &lt;span class="n"&gt;p_b_given_g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_g_given_b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;p_g&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p_b_given_g&lt;/span&gt;

&lt;span class="c1"&gt;#P(B)
&lt;/span&gt;&lt;span class="n"&gt;p_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="c1"&gt;# P(G|B)
&lt;/span&gt;&lt;span class="n"&gt;p_g_given_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# P(G|notB)
&lt;/span&gt;&lt;span class="n"&gt;p_g_given_not_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="c1"&gt;# calculate P(B|G)
&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bayes_theorem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_g_given_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_g_given_not_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# print result
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'P(B|G) = %.2f%%'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the probability that the first child is a girl, given that &lt;em&gt;both&lt;/em&gt; children are girls ( P(G|B) ) is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(G|B) = P(B|G) * P(G) / ( P(G|B) * P(G) + P(B|not G) * P(not G) )&lt;/li&gt;
&lt;li&gt;P(G|B) =   1/2 * 1/2  / ((1/2 * 1/2) + (0 * 1/2))&lt;/li&gt;
&lt;li&gt;P(G|B) =  1/4  /  1/4&lt;/li&gt;
&lt;li&gt;P(G|B) = 1 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's unpack Outcome 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outcome-2" class="anchor"&gt;
  &lt;/a&gt;
  Outcome 2
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Outcome 2: What is the probability of the event "both children are girls" (B) conditional on the event "at least one of the children is a girl" (L)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The probability for outcome two is roughly 33% or (1/3).&lt;/p&gt;

&lt;p&gt;We'll go through the same process as above. &lt;/p&gt;

&lt;p&gt;We could use &lt;strong&gt;joint&lt;/strong&gt; probability to calculate the &lt;strong&gt;conditional&lt;/strong&gt; probability. As with the previous outcome, the joint probability of &lt;code&gt;P(B,G)&lt;/code&gt; is just event B,&lt;code&gt;P(B)&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(B|L) = P(B,L) / P(L) = 1/3 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, we could use Bayes' Theorem to figure out the &lt;strong&gt;conditional&lt;/strong&gt; probability &lt;strong&gt;without joint&lt;/strong&gt; probability:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(B|L) = P(L|B) * P(B) / P(L) &lt;/li&gt;
&lt;li&gt;P(B|L) =  (1 * 1/4) / (3/4)&lt;/li&gt;
&lt;li&gt;P(B|L) = 1/3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, if there's no &lt;code&gt;P(L)&lt;/code&gt;, we can calculate that indirectly, also using Bayes' Theorem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(L) = P(L|B) * P(B) + P(L|not B) * P(not B)&lt;/li&gt;
&lt;li&gt;P(L) =  1 * (1/4) + (2/3) * (3/4)&lt;/li&gt;
&lt;li&gt;P(L) =  (1/4) + (2/4)&lt;/li&gt;
&lt;li&gt;P(L) = 3/4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, we can use &lt;code&gt;P(L)&lt;/code&gt; in the way Bayes' Theorem is commonly expressed, when we don't have the denominator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;P(B|L) = P(L|B) * P(B) / ( P(L|B) * P(B) + P(L|not B) * P(not B) )&lt;/li&gt;
&lt;li&gt;P(B|L) =  1 * (1/4) / (3/4)&lt;/li&gt;
&lt;li&gt;P(B|L) = 1/3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we've gone through the calculation for two conditional probabilities, &lt;code&gt;P(B|G)&lt;/code&gt; and &lt;code&gt;P(B|L)&lt;/code&gt;, using Bayes Theorem, and implemented code for one of the scenarios, let's take a step back and assess what this &lt;em&gt;means&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bayesian-terminology" class="anchor"&gt;
  &lt;/a&gt;
  Bayesian Terminology
&lt;/h3&gt;

&lt;p&gt;I think its useful to understand that probability in general shines when we want to describe uncertainty and that Bayes' Theorem allows us to quantify how much the data we observe, should change our beliefs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sand6I_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8sxipbvhkbaxilc616wx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sand6I_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8sxipbvhkbaxilc616wx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have two &lt;strong&gt;posteriors&lt;/strong&gt;, &lt;code&gt;P(B|G)&lt;/code&gt; and &lt;code&gt;P(B|L)&lt;/code&gt;, both with equal &lt;strong&gt;priors&lt;/strong&gt; and &lt;strong&gt;likelihood&lt;/strong&gt;, but with &lt;em&gt;different&lt;/em&gt; &lt;strong&gt;evidence&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Said differently, we want to know the 'probability that both children are girls`, given &lt;em&gt;different&lt;/em&gt; conditions. &lt;/p&gt;

&lt;p&gt;In the first case, our condition is 'the first child is a girl' and in the second case, our condition is '&lt;em&gt;at least one&lt;/em&gt; of the child is a girl'. The question is which condition will increase the probability that &lt;strong&gt;both&lt;/strong&gt; children are girls? &lt;/p&gt;

&lt;p&gt;Bayes' Theorem allows us to update our belief about the probability in these two cases, as we incorporate varied data into our framework.&lt;/p&gt;

&lt;p&gt;What the calculations tell us is that the &lt;strong&gt;evidence&lt;/strong&gt; that 'one child is a girl' increases the probability that &lt;strong&gt;both&lt;/strong&gt; children are girls &lt;em&gt;more than&lt;/em&gt; the other piece of &lt;strong&gt;evidence&lt;/strong&gt; that 'at least one child is a girl' increases that probability. &lt;/p&gt;

&lt;p&gt;And our beliefs should be updated accordingly. &lt;/p&gt;

&lt;p&gt;At the end of the day, understanding conditional probability (and Bayes Theorem) comes down to &lt;strong&gt;counting&lt;/strong&gt;. For our hypothetical scenarios, we only need one hand:&lt;/p&gt;

&lt;p&gt;When we look at the probability table for outcome one, &lt;code&gt;P(B|G)&lt;/code&gt;, we can see how the posterior probability comes out to 1/2:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mt1KrfaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ojz4p6fw0o28qf9o6uo4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mt1KrfaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ojz4p6fw0o28qf9o6uo4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we look at the probability table for outcome two, &lt;code&gt;P(B|L)&lt;/code&gt;, we can see how the posterior probability comes out to 1/3:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxsYalZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cs0bzsld7gwxggxh5z1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxsYalZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cs0bzsld7gwxggxh5z1s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is part of an ongoing series documenting my progress through Data Science from Scratch by Joel Grus:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqbqCZ9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8wwrjbt82uu7ljv6zs84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqbqCZ9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8wwrjbt82uu7ljv6zs84.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more content on data science, machine learning, R, Python, SQL and more, &lt;a href="https://twitter.com/paulapivat"&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Basics Of Natural Language Processing in 10 Minutes</title>
      <author>Abhay Parashar</author>
      <pubDate>Sat, 28 Nov 2020 03:40:38 +0000</pubDate>
      <link>https://dev.to/abhayparashar31/basics-of-natural-language-processing-in-10-minutes-5fmg</link>
      <guid>https://dev.to/abhayparashar31/basics-of-natural-language-processing-in-10-minutes-5fmg</guid>
      <description>&lt;p&gt;Hello, there&lt;br&gt;
You are here because you also want to learn natural language processing as quickly as possible, like me.&lt;br&gt;
Let‚Äôs start&lt;br&gt;
The first thing we need is to install some dependency&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python &amp;gt;3.7&lt;br&gt;
&lt;a href="https://www.python.org/downloads/"&gt;Download From Here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download an IDE or install Jupyter notebook&lt;br&gt;
To install Jupyter notebook, just open your cmd(terminal) and type pip install &lt;code&gt;jupyter-notebook&lt;/code&gt; after that type &lt;code&gt;jupyter notebook&lt;/code&gt; to run it then you can see that your notebook is open at &lt;code&gt;http://127.0.0.1:8888/token&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install packages&lt;br&gt;
&lt;code&gt;pip install nltk&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;NLTK: It is a python library that can we used to perform all the NLP tasks(stemming, lemmatization, etc..)&lt;br&gt;
In this blog, we are going to learn about&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tokenization&lt;/li&gt;
&lt;li&gt;Stopwords&lt;/li&gt;
&lt;li&gt;Stemming&lt;/li&gt;
&lt;li&gt;Lemmatizer&lt;/li&gt;
&lt;li&gt;WordNet&lt;/li&gt;
&lt;li&gt;Part of speech tagging&lt;/li&gt;
&lt;li&gt;Bag of Words
Before learning anything let‚Äôs first understand NLP.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Natural Language refers to the way we humans communicate with each other and processing is basically proceeding the data in an understandable form. so we can say that NLP (Natural Language Processing) is a way that helps computers to communicate with humans in their own language.&lt;br&gt;
It is one of the broadest fields in research because there is a huge amount of data out there and from that data, a big amount of data is text data. So when there is so much data available so we need some technique threw which we can process the data and retrieve some useful information from it.&lt;br&gt;
Now, we have an understanding of what is NLP, let‚Äôs start understanding each topic one by one.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-tokenization" class="anchor"&gt;
  &lt;/a&gt;
  1. Tokenization
&lt;/h3&gt;

&lt;p&gt;Tokenization is the process of dividing the whole text into tokens.&lt;br&gt;
It is mainly of two types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Word Tokenizer (separated by words)&lt;/li&gt;
&lt;li&gt;Sentence Tokenizer (separated by sentence)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import nltk
from nltk.tokenize import sent_tokenize,word_tokenize
example_text = "Hello there, how are you doing today? The weather is great today. The sky is blue. python is awsome"
print(sent_tokenize(example_text))
print(word_tokenize(example_text))
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In the above code&lt;br&gt;
First, we are importing nltk , in the second line, we are importing our tokenizers &lt;code&gt;sent_tokenize,word_tokenize&lt;/code&gt; from library &lt;code&gt;nltk.tokenize&lt;/code&gt; , then to use the tokenizer on a text we just need to pass the text as a parameter in the tokenizer.&lt;br&gt;
The output will look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;##sent_tokenize (Separated by sentence)
['Hello there, how are you doing today?', 'The weather is great today.', 'The sky is blue.', 'python is awsome']

##word_tokenize (Separated by words)
['Hello', 'there', ',', 'how', 'are', 'you', 'doing', 'today', '?', 'The', 'weather', 'is', 'great', 'today', '.', 'The', 'sky', 'is', 'blue', '.', 'python', 'is', 'awsome']
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-stopwords" class="anchor"&gt;
  &lt;/a&gt;
  2. Stopwords
&lt;/h3&gt;

&lt;p&gt;In general stopwords are the words in any language which does not add much meaning to a sentence. In NLP stopwords are those words which are not important in analyzing the data.&lt;br&gt;
Example : he,she,hi,and etc.&lt;/p&gt;

&lt;p&gt;Our main task is to remove all the stopwords for the text to do any further processing.&lt;br&gt;
There are a total of 179 stopwords in English, using NLTK we can see all the stopwords in English.&lt;/p&gt;

&lt;p&gt;We Just need to import stopwords from the library &lt;code&gt;nltk.corpus&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from nltk.corpus import stopwords
print(stopwords.words('english'))
######################
######OUTPUT##########
######################
['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To remove Stopwords for a particular text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from nltk.corpus import stopwords
text = 'he is a good boy. he is very good in coding'
text = word_tokenize(text)
text_with_no_stopwords = [word for word in text if word not in stopwords.words('english')]
text_with_no_stopwords
##########OUTPUT##########
['good', 'boy', '.', 'good', 'coding']
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-stemming" class="anchor"&gt;
  &lt;/a&gt;
  3. Stemming
&lt;/h3&gt;

&lt;p&gt;Stemming is the process of reducing a word to its word stem that affixes to suffixes and prefixes or to the roots of words known as a lemma.&lt;br&gt;
In simple words, we can say that stemming is the process of removing plural and adjectives from the word.&lt;br&gt;
Example :&lt;br&gt;
loved ‚Üí love, learning ‚Üílearn&lt;br&gt;
In python, we can implement stemming by using&lt;code&gt;PorterStemmer&lt;/code&gt; . we can import it from the library &lt;code&gt;nltk.stem&lt;/code&gt; .&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#one-thing-to-remember-from-stemming-is-that-it-works-best-with-single-words" class="anchor"&gt;
  &lt;/a&gt;
  One thing to remember from Stemming is that it works best with single words.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from nltk.stem import PorterStemmer
ps = PorterStemmer()    ## Creating an object for porterstemmer
example_words = ['earn',"earning","earned","earns"]  ##Example words
for w in example_words:
    print(ps.stem(w))    ##Using ps object stemming the word
##########OUTPUT##########
earn
earn
earn
earn
Here we can see that earning,earned and earns are stem to there lemma or root word earn.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-lemmatizing" class="anchor"&gt;
  &lt;/a&gt;
  4. Lemmatizing
&lt;/h3&gt;

&lt;p&gt;Lemmatization usually refers to doing things properly with the use of vocabulary and morphological analysis of words, normally aiming to remove inflectional endings only and to return the base or dictionary form of a word, which is known as the lemma.&lt;br&gt;
In simple words lemmatization does the same work as stemming, the difference is that lemmatization returns a meaningful word.&lt;br&gt;
Example:&lt;br&gt;
Stemming&lt;br&gt;
history ‚Üí histori&lt;br&gt;
Lemmatizing&lt;br&gt;
history ‚Üí history&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#it-is-mostly-used-when-designing-chatbots-qampa-bots-text-prediction-etc" class="anchor"&gt;
  &lt;/a&gt;
  It is Mostly used when designing chatbots, Q&amp;amp;A bots, text prediction, etc.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer() ## Create object for lemmatizer
example_words = ['history','formality','changes']
for w in example_words:
    print(lemmatizer.lemmatize(w))

#########OUTPUT############
----Lemmatizer-----
history
formality
change
-----Stemming------
histori
formal
chang
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#5-wordnet" class="anchor"&gt;
  &lt;/a&gt;
  5. WordNet
&lt;/h3&gt;

&lt;p&gt;WordNet is the lexical database i.e. dictionary for the English language, specifically designed for natural language processing.&lt;br&gt;
We can use wordnet for finding synonyms and antonyms.&lt;br&gt;
In python, we can import wordnet from &lt;code&gt;nltk.corpus&lt;/code&gt; .&lt;br&gt;
Code For Finding Synonym and antonym for a given word&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from nltk.corpus import wordnet
synonyms = []   ## Creaing an empty list for all the synonyms
antonyms =[]    ## Creaing an empty list for all the antonyms
for syn in wordnet.synsets("happy"): ## Giving word 
    for i in syn.lemmas():        ## Finding the lemma,matching 
        synonyms.append(i.name())  ## appending all the synonyms       
        if i.antonyms():
            antonyms.append(i.antonyms()[0].name()) ## antonyms
print(set(synonyms)) ## Converting them into set for unique values
print(set(antonyms))
#########OUTPUT##########
{'felicitous', 'well-chosen', 'happy', 'glad'}
{'unhappy'}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-part-of-speech-tagging" class="anchor"&gt;
  &lt;/a&gt;
  6. Part of Speech Tagging
&lt;/h3&gt;

&lt;p&gt;It is a process of converting a sentence to forms ‚Äî a list of words, a list of tuples (where each tuple is having a form (word, tag)). The tag in the case is a part-of-speech tag and signifies whether the word is a noun, adjective, verb, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part of Speech Tag List&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; CC coordinating conjunction
 CD cardinal digit
 DT determiner
 EX existential there (like: ‚Äúthere is‚Äù ‚Ä¶ think of it like ‚Äúthere‚Äù)
 FW foreign word
 IN preposition/subordinating conjunction
 JJ adjective ‚Äòbig‚Äô
 JJR adjective, comparative ‚Äòbigger‚Äô
 JJS adjective, superlative ‚Äòbiggest‚Äô
 LS list marker 1)
 MD modal could, will
 NN noun, singular ‚Äòdesk‚Äô
 NNS noun plural ‚Äòdesks‚Äô
 NNP proper noun, singular ‚ÄòHarrison‚Äô
 NNPS proper noun, plural ‚ÄòAmericans‚Äô
 PDT predeterminer ‚Äòall the kids‚Äô
 POS possessive ending parent‚Äôs
 PRP personal pronoun I, he, she
 PRP possessive pronoun my, his, hers
 RB adverb very, silently,
 RBR adverb, comparative better
 RBS adverb, superlative best
 RP particle give up
 TO to go ‚Äòto‚Äô the store.
 UH interjection errrrrrrrm
 VB verb, base form take
 VBD verb, past tense took
 VBG verb, gerund/present participle taking
 VBN verb, past participle taken
 VBP verb, sing. present, non-3d take
 VBZ verb, 3rd person sing. present takes
 WDT wh-determiner which
 WP wh-pronoun who, what
 WP possessive wh-pronoun whose
 WRB wh-abverb where, when
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In python, we can do pos tagging using &lt;code&gt;nltk.pos_tag&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import nltk
nltk.download('averaged_perceptron_tagger')
sample_text = '''
An sincerity so extremity he additions. Her yet there truth merit. Mrs all projecting favourable now unpleasing. Son law garden chatty temper. Oh children provided to mr elegance marriage strongly. Off can admiration prosperous now devonshire diminution law.
'''
from nltk.tokenize import word_tokenize
words = word_tokenize(sample_text)
print(nltk.pos_tag(words))
################OUTPUT############
[('An', 'DT'), ('sincerity', 'NN'), ('so', 'RB'), ('extremity', 'NN'), ('he', 'PRP'), ('additions', 'VBZ'), ('.', '.'), ('Her', 'PRP$'), ('yet', 'RB'), ('there', 'EX'), ('truth', 'NN'), ('merit', 'NN'), ('.', '.'), ('Mrs', 'NNP'), ('all', 'DT'), ('projecting', 'VBG'), ('favourable', 'JJ'), ('now', 'RB'), ('unpleasing', 'VBG'), ('.', '.'), ('Son', 'NNP'), ('law', 'NN'), ('garden', 'NN'), ('chatty', 'JJ'), ('temper', 'NN'), ('.', '.'), ('Oh', 'UH'), ('children', 'NNS'), ('provided', 'VBD'), ('to', 'TO'), ('mr', 'VB'), ('elegance', 'NN'), ('marriage', 'NN'), ('strongly', 'RB'), ('.', '.'), ('Off', 'CC'), ('can', 'MD'), ('admiration', 'VB'), ('prosperous', 'JJ'), ('now', 'RB'), ('devonshire', 'VBP'), ('diminution', 'NN'), ('law', 'NN'), ('.', '.')]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-bag-of-words" class="anchor"&gt;
  &lt;/a&gt;
  7. Bag Of Words
&lt;/h3&gt;

&lt;p&gt;Till now we have understood about tokenizing, stemming, and lemmatizing. all of these are the part of the text cleaning, now after cleaning the text we need to convert the text into some kind of numerical representation called vectors so that we can feed the data to a machine learning model for further processing.&lt;/p&gt;

&lt;p&gt;For converting the data into vectors we make use of some predefined libraries in python.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how vector representation works&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sent1 = he is a good boy
sent2 = she is a good girl
sent3 = boy and girl are good 
        |
        |
  After removal of stopwords , lematization or stemming
sent1 = good boy
sent2 = good girl
sent3 = boy girl good  
        | ### Now we will calculate the frequency for each word by
        |     calculating the occurrence of each word
word  frequency
good     3
boy      2
girl     2
         | ## Then according to their occurrence we assign o or 1 
         |    according to their occurrence in the sentence
         | ## 1 for present and 0 fot not present
         f1  f2   f3
        girl good boy   
sent1    0    1    1     
sent2    1    0    1
sent3    1    1    1
### After this we pass the vector form to machine learning model
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above process can be done using a CountVectorizer in python, we can import the same from sklearn.feature_extraction.text .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-to-implement-raw-countvectorizer-endraw-in-python" class="anchor"&gt;
  &lt;/a&gt;
  CODE to implement &lt;code&gt;CountVectorizer&lt;/code&gt; In python
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd
sent = pd.DataFrame(['he is a good boy', 'she is a good girl', 'boy and girl are good'],columns=['text'])
corpus = []
for i in range(0,3):
    words = sent['text'][i]
    words  = word_tokenize(words)
    texts = [lemmatizer.lemmatize(word) for word in words if word not in set(stopwords.words('english'))]
    text = ' '.join(texts)
    corpus.append(text)
print(corpus)   #### Cleaned Data
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer() ## Creating Object for CountVectorizer
X = cv.fit_transform(corpus).toarray()
X  ## Vectorize Form 
############OUTPUT##############
['good boy', 'good girl', 'boy girl good']
array([[1, 0, 1],
       [0, 1, 1],
       [1, 1, 1]], dtype=int64)

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Congratulations üëç, Now you know the basics of NLP&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>A powerful backend ready for your next app üöÄ</title>
      <author>Hatem Hosny</author>
      <pubDate>Sat, 28 Nov 2020 01:05:35 +0000</pubDate>
      <link>https://dev.to/hatemhosny/a-powerful-backend-ready-for-your-next-app-55a</link>
      <guid>https://dev.to/hatemhosny/a-powerful-backend-ready-for-your-next-app-55a</guid>
      <description>&lt;p&gt;I am a primarily frontend developer. &lt;/p&gt;

&lt;p&gt;Whenever I start a new project I keep going into the dilemma of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which backend?&lt;/li&gt;
&lt;li&gt;Which database?&lt;/li&gt;
&lt;li&gt;Which hosting provider? &lt;/li&gt;
&lt;li&gt;Which complexity for the cloud service provider will I have to go through this time?&lt;/li&gt;
&lt;li&gt;What if I need later on to move to another provider?&lt;/li&gt;
&lt;li&gt;Should I go serverless?&lt;/li&gt;
&lt;li&gt;Do I need authentication? should I use a 3rd party service for that?&lt;/li&gt;
&lt;li&gt;How to handle HTTPS certificates issuing and renewal?&lt;/li&gt;
&lt;li&gt;How about the CI/CD setup?&lt;/li&gt;
&lt;li&gt;How to get a convenient local development environment that also matches production deployment?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Services like Firebase and AWS Amplify, have always been appealing. However, I felt uncomfortable with having marked restrictions on the database design (with lots of de-normalization) because of pay-per-read model. I know, I know, this is how NoSQL works, but still I was not happy. In addition, I do not want to &lt;a href="https://hackernoon.com/how-we-spent-30k-usd-in-firebase-in-less-than-72-hours-307490bd24d"&gt;pay $30K in 72 hours because of a coding mistake&lt;/a&gt;. And then &lt;a href="https://firebase.google.com/docs/firestore/solutions/search"&gt;not be able to do a basic full-text search&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Serverless can be very cost-effective on small scale but can be quite expensive on large scales. I want to have a predictable budget.&lt;/p&gt;

&lt;p&gt;In addition, the ease of local development with a cloud backend was concerning. There are many good solutions or workarounds for all of these questions, but none felt as easy and flexible for the requirements of different projects.&lt;/p&gt;

&lt;p&gt;All of that, and we have not even started talking about what I care about most, my app!&lt;/p&gt;

&lt;p&gt;Frontend development has become complex enough to also get distracted by all of these questions.&lt;/p&gt;

&lt;p&gt;Recently, I have come across &lt;a href="https://github.com/parse-community/parse-server"&gt;Parse server&lt;/a&gt;. It is a project that was acquired by Facebook (parse.com) and was later open-sourced when they decided to stop providing the cloud service. It is such a nice project that ticks nearly all my boxes.&lt;/p&gt;

&lt;p&gt;So, I created a monorepo starter project that is managed by &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; which runs the feature-rich ready-to-use setup that works out of the box for local development and can be easily deployed.&lt;/p&gt;

&lt;p&gt;You can find it on github: &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hatemhosny"&gt;
        hatemhosny
      &lt;/a&gt; / &lt;a href="https://github.com/hatemhosny/parse-starter"&gt;
        parse-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A powerful backend ready for your next app üöÄ
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#feature-summary" class="anchor"&gt;
  &lt;/a&gt;
  Feature Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/parse-community/parse-server"&gt;Parse server&lt;/a&gt;&lt;/strong&gt;: Backend-as-a-Service (BaaS) that features:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://parseplatform.org/#sdks"&gt;SDKs&lt;/a&gt; for popular platforms&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/rest/guide/"&gt;REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/graphql/guide/"&gt;Graphql API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.parseplatform.org/parse-server/guide/#live-queries"&gt;LiveQuery&lt;/a&gt; for realtime apps&lt;/li&gt;
&lt;li&gt;Security features including authentication, &lt;a href="https://docs.parseplatform.org/js/guide/#users"&gt;users&lt;/a&gt;, &lt;a href="https://docs.parseplatform.org/js/guide/#roles"&gt;roles&lt;/a&gt;, &lt;a href="https://docs.parseplatform.org/rest/guide/#object-level-access-control"&gt;access control lists (ACL)&lt;/a&gt; and &lt;a href="https://docs.parseplatform.org/rest/guide/#class-level-permissions"&gt;class-level permissions (CLP)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication"&gt;3rd party authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/parse-server/guide/#push-notifications"&gt;Push notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adapters for &lt;a href="https://docs.parseplatform.org/parse-server/guide/#configuring-file-adapters"&gt;file storage&lt;/a&gt; and &lt;a href="https://docs.parseplatform.org/parse-server/guide/#configuring-cache-adapters"&gt;caching&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/rest/guide/#analytics"&gt;Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.parseplatform.org/rest/guide/#cloud-code"&gt;Cloud code&lt;/a&gt; for custom server-side logic&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.parseplatform.org/rest/guide/#hooks"&gt;Web hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Runs on top of &lt;a href="https://expressjs.com"&gt;Express&lt;/a&gt; allowing the use of Express middleware&lt;/li&gt;
&lt;li&gt;Comprehensive &lt;a href="https://docs.parseplatform.org/"&gt;documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Large &lt;a href="https://github.com/parse-community"&gt;community&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.mongodb.com"&gt;MongoDB&lt;/a&gt;&lt;/strong&gt; database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/parse-community/parse-dashboard"&gt;Parse dashboard&lt;/a&gt;&lt;/strong&gt; (optional): a powerful dashboard for managing the parse server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API-First Headless CMS&lt;/strong&gt; (optional): using &lt;a href="https://chiselcms.com"&gt;chisel-cms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A sample realtime &lt;strong&gt;frontend app&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automatic HTTPS&lt;/strong&gt; for the frontend and backend using &lt;a href="https://caddyserver.com"&gt;Caddy server&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reproducible setup using &lt;strong&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/strong&gt; containers managed by a single &lt;strong&gt;&lt;a href="https://docs.docker.com/compose"&gt;Docker Compose&lt;/a&gt;&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Local development workflow&lt;/strong&gt; with hot reload for frontend and backend.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy deployment&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CI/CD&lt;/strong&gt; (&lt;a href="https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment"&gt;continuous integration and deployment&lt;/a&gt;): using &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions"&gt;github actions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Optional &lt;strong&gt;deployment to multiple environments&lt;/strong&gt; (e.g. development, staging and production).&lt;/li&gt;
&lt;li&gt;Highly &lt;strong&gt;configurable&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The whole stack is &lt;strong&gt;open source&lt;/strong&gt; with no vendor lock-in or pay-per-request restrictions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Run the shell command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By default, the following will be served:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;parse server backend: &lt;span&gt;https:&lt;/span&gt;//localhost:1337/api&lt;/li&gt;
&lt;li&gt;parse graphql API: &lt;span&gt;https:&lt;/span&gt;//localhost:1337/graphql&lt;/li&gt;
&lt;li&gt;parse dashboard: &lt;span&gt;https:&lt;/span&gt;//localhost:1337/dashboard&lt;/li&gt;
&lt;li&gt;frontend local dev server (with HMR): &lt;span&gt;https:&lt;/span&gt;//localhost:1234&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After &lt;a href="https://github.com/hatemhosny/parse-starter#production-build"&gt;production build&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;frontend app: &lt;span&gt;https:&lt;/span&gt;//localhost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When &lt;a href="https://github.com/hatemhosny/parse-starter#headless-cms"&gt;CMS is enabled&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chisel CMS: &lt;span&gt;https:&lt;/span&gt;//localhost:1337&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can edit/replace the app in the &lt;code&gt;frontend&lt;/code&gt; directory and start building your own app making use of the feature-rich backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment" class="anchor"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h2&gt;

&lt;p&gt;Docker and Docker Compose significantly simplify deployment. All the setup and dependencies are already taken care of in the docker images.&lt;/p&gt;

&lt;p&gt;So, in principle, the steps required for deployment are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defining the variables for the deployment environment.&lt;/li&gt;
&lt;li&gt;Building the docker images and verifying them.&lt;/li&gt;
&lt;li&gt;Running the containers on the host server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although this can be done manually, it is greatly simplified using the included automated CI/CD setup that uses github actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-start" class="anchor"&gt;
  &lt;/a&gt;
  Quick Start
&lt;/h3&gt;

&lt;p&gt;Assuming you can connect using SSH to your server which has Docker and Docker Compose installed (see &lt;a href="https://github.com/hatemhosny/parse-starter#server-setup"&gt;Server Setup&lt;/a&gt;), and that you have a github personal access token (see &lt;a href="https://github.com/hatemhosny/parse-starter#container-registry"&gt;Container Registry&lt;/a&gt;), add the following &lt;a href="https://github.com/hatemhosny/parse-starter#github-secrets"&gt;Github Secrets&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PROD_DOCKER_REGISTRY_TOKEN: your personal github access token&lt;/li&gt;
&lt;li&gt;PROD_SSH_HOST: your server IP address&lt;/li&gt;
&lt;li&gt;PROD_SSH_KEY: your server SSH private key&lt;/li&gt;
&lt;li&gt;PROD_ENV_VARS: edit the following example with your values
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  HOST_NAME=mywebsite.com
  APP_ID=myappid
  MASTER_KEY=mymasterkey
  PARSE_DASHBOARD_USER_ID=user
  PARSE_DASHBOARD_USER_PASSWORD=pass
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note: The environment variable &lt;code&gt;HOST_NAME&lt;/code&gt; is required for remote deployment.&lt;/p&gt;

&lt;p&gt;Now pushing code to main/master branch should trigger build and deploy to your server. Note that you can follow the progress and read logs of CI/CD workflows on the "Actions" tab in the gihub repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;You have launched your powerful backend locally and deployed it within a few minutes.&lt;/p&gt;

&lt;p&gt;You can find the documentation and configuration details in the github repo: &lt;a href="https://github.com/hatemhosny/parse-starter"&gt;https://github.com/hatemhosny/parse-starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is clearly not the magic bullet that solves all the problems of the world, but it has made my life easier, and I hope it makes yours too.&lt;/p&gt;

&lt;p&gt;Please let me know your suggestions/advices/comments, and I would be very grateful for contributions.&lt;/p&gt;

&lt;p&gt;Happy coding, go build some great apps!&lt;/p&gt;

</description>
      <category>backend</category>
      <category>docker</category>
      <category>javascript</category>
      <category>cloud</category>
    </item>
    <item>
      <title>GitSheet - my git cheatsheet</title>
      <author>Myrtle</author>
      <pubDate>Sat, 28 Nov 2020 00:35:44 +0000</pubDate>
      <link>https://dev.to/myrtle/gitsheet-my-git-cheatsheet-4o18</link>
      <guid>https://dev.to/myrtle/gitsheet-my-git-cheatsheet-4o18</guid>
      <description>&lt;h2&gt;
  &lt;a href="#gitsheet" class="anchor"&gt;
  &lt;/a&gt;
  GitSheet
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;a cheatsheet that's lived in my notepad for too long&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-existing-local-project-to-github" class="anchor"&gt;
  &lt;/a&gt;
  Add existing local project to GitHub
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ git init&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git add .&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git commit -m &amp;lt;message&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git remote add origin &amp;lt;github-repo-url&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git remote -v&lt;/code&gt; &lt;em&gt;//sanity check&lt;/em&gt;&lt;br&gt;
&lt;code&gt;$ git push -u origin &amp;lt;master&amp;gt;&lt;/code&gt;  &lt;em&gt;//or other branch&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Add a file afterwards&lt;br&gt;
&lt;code&gt;$ git add .&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git status&lt;/code&gt; &lt;em&gt;//sanity check&lt;/em&gt;&lt;br&gt;
&lt;code&gt;$ git commit -m &amp;lt;message&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git push origin branch-name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you accidentally initialise a git repo in a folder that shouldn't be under version control&lt;br&gt;
Revert the change by removing the hidden .git folder&lt;br&gt;
&lt;code&gt;$ rm -rf .git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Updating file&lt;br&gt;
Use &lt;code&gt;$ git add &amp;lt;file&amp;gt;&lt;/code&gt; to update what will be committed&lt;br&gt;
If you don't want these changes and just want to go back to the version of this file at the time of the last commit&lt;br&gt;
Use &lt;code&gt;$ git checkout --&amp;lt;file&amp;gt;&lt;/code&gt; to discard changes in working directory&lt;/p&gt;

&lt;p&gt;Sanity checks: run¬†&lt;code&gt;$ git status&lt;/code&gt;¬†before you commit, to confirm that the repo is in the state you expect it to be.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#on-remotes" class="anchor"&gt;
  &lt;/a&gt;
  On remotes
&lt;/h3&gt;

&lt;p&gt;Create new branch with switch&lt;br&gt;
&lt;code&gt;$ git switch -c branch name&lt;/code&gt; &lt;br&gt;
(is the same as &lt;code&gt;$ git checkout -b &amp;lt;branchname&amp;gt;&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Push a new branch up to remote &lt;br&gt;
&lt;code&gt;$ git push -u origin &amp;lt;branchname&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Set a new remote&lt;br&gt;
&lt;code&gt;$ git remote add origin https://github.com/user/repo.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Verify new remote&lt;br&gt;
&lt;code&gt;$ git remote -v&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#navigating-the-log" class="anchor"&gt;
  &lt;/a&gt;
  Navigating The Log
&lt;/h3&gt;

&lt;p&gt;To view all of the commits we've made, we run:&lt;br&gt;
&lt;code&gt;$ git log&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git log --oneline&lt;/code&gt; &lt;em&gt;//keep things simpler&lt;/em&gt;&lt;br&gt;
(TLDR use ‚Üì or enter/return key to move further down, &lt;code&gt;$ q&lt;/code&gt; to quit)&lt;/p&gt;

&lt;p&gt;If you're not used to a pager on the command line, navigating in¬†Less¬†can be a bit odd. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to scroll¬†down, press

&lt;ul&gt;
&lt;li&gt;j¬†or¬†‚Üì¬†to move¬†down¬†one line at a time&lt;/li&gt;
&lt;li&gt;d¬†to move by half the page screen&lt;/li&gt;
&lt;li&gt;f¬†to move by a whole page screen&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;to scroll¬†up, press

&lt;ul&gt;
&lt;li&gt;k¬†or¬†‚Üë¬†to move &lt;em&gt;up&lt;/em&gt; one line at a time&lt;/li&gt;
&lt;li&gt;u¬†to move by half the page screen&lt;/li&gt;
&lt;li&gt;b¬†to move by a whole page screen&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;press¬†q¬†to¬†quit¬†out of the log (returns to the regular command prompt)&lt;/li&gt;
&lt;/ul&gt;


 
&lt;h3&gt;
  &lt;a href="#more-sanity-checks" class="anchor"&gt;
  &lt;/a&gt;
  More Sanity checks
&lt;/h3&gt;

&lt;p&gt;Stats&lt;br&gt;
&lt;code&gt;$ git log --stat&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;displays the file(s) that have been modified&lt;/li&gt;
&lt;li&gt;displays the number of lines that have been added/removed&lt;/li&gt;
&lt;li&gt;displays a summary line with the total number of modified files and lines that have been added/removed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ git log -p&lt;/code&gt; &lt;em&gt;(or patch)&lt;/em&gt;&lt;br&gt;
Shows the diff between files changed&lt;br&gt;
This command adds the following to the default output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;displays the files that have been modified&lt;/li&gt;
&lt;li&gt;displays the location of the lines that have been added/removed&lt;/li&gt;
&lt;li&gt;displays the actual changes that have been made&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can "log" information with:&lt;br&gt;
&lt;code&gt;$ git log&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git log --oneline&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git log --stat&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ git log -p&lt;/code&gt;&lt;br&gt;
You can supply the SHA of a commit as the final argument &lt;br&gt;
ie. &lt;code&gt;$ git log -p fdf5493&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git log -p&lt;/code&gt;¬†command will¬†start at that commit &amp;amp; show all commits made¬†prior¬†to the supplied SHA&lt;br&gt;
The¬†git show¬†command will show¬†only one commit.¬†&lt;/p&gt;

&lt;p&gt;To unstage: &lt;code&gt;$ git rm ‚Äîcashed &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git diff&lt;/code&gt; displays:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the files that have been modified&lt;/li&gt;
&lt;li&gt;the location of the lines that have been added/removed&lt;/li&gt;
&lt;li&gt;the actual changes that have been made&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#on-gitignore" class="anchor"&gt;
  &lt;/a&gt;
  On gitignore
&lt;/h3&gt;

&lt;p&gt;Add the file inside the¬†.gitignore¬†file: ie. info.md&lt;/p&gt;

&lt;p&gt;In the¬†.gitignore¬†file, you can use the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blank lines can be used for spacing&lt;/li&gt;
&lt;li&gt;#¬†- marks line as a comment&lt;/li&gt;
&lt;li&gt;*¬†- matches 0 or more characters&lt;/li&gt;
&lt;li&gt;?¬†- matches 1 character&lt;/li&gt;
&lt;li&gt;[abc]¬†- matches a, b, &lt;em&gt;or&lt;/em&gt; c&lt;/li&gt;
&lt;li&gt;*&lt;em&gt;¬†- matches nested directories -¬†a/&lt;/em&gt;*/z¬†matches

&lt;ul&gt;
&lt;li&gt;a/z&lt;/li&gt;
&lt;li&gt;a/b/z&lt;/li&gt;
&lt;li&gt;a/b/c/z
So if all of the 50 images are JPEG images in the "samples" folder, we could add &lt;code&gt;samples/*.jpg&lt;/code&gt; to¬†.gitignore¬†to have Git ignore all images.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#on-git-tag" class="anchor"&gt;
  &lt;/a&gt;
  On git tag
&lt;/h3&gt;

&lt;p&gt;Git tag&lt;br&gt;
$ git tag -a beta&lt;br&gt;
This command will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a tag to the most recent commit&lt;/li&gt;
&lt;li&gt;add a tag to a specific commit¬†if a SHA is passed
$ git tag -a v1.0
git log --decorate
A Git tag can be deleted with the¬†-d¬†flag (for¬†delete!) and the name of the tag:
$ git tag -d v1.0
¬†But what if you wanted to tag a commit that occurred farther back in the repo's history?
All you have to do is provide the SHA of the commit you want to tag!
$ git tag -a v1.0 a87984&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#on-branches" class="anchor"&gt;
  &lt;/a&gt;
  On branches
&lt;/h3&gt;

&lt;p&gt;git branch can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list all branch names in the repository&lt;/li&gt;
&lt;li&gt;create new branches&lt;/li&gt;
&lt;li&gt;delete branches
if we type out just¬†&lt;code&gt;$ git branch&lt;/code&gt;¬†it will list out the branches in a repository
if you want a branch called "something", you'd run this command:
&lt;code&gt;$ git branch something&lt;/code&gt;
to switch between branches:
&lt;code&gt;$ git checkout something&lt;/code&gt;
this command will:&lt;/li&gt;
&lt;li&gt;remove all files and directories from the Working Directory that Git is tracking (files that Git tracks are stored in the repository, so nothing is lost)&lt;/li&gt;
&lt;li&gt;go into the repository and pull out all of the files and directories of the commit that the branch points to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DELETE a branch&lt;br&gt;
&lt;code&gt;$ git branch -d something&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to list all branches:&lt;br&gt;
&lt;code&gt;$ git branch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to create a new "footer-fix" branch:&lt;br&gt;
&lt;code&gt;$ git branch footer-fix&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to delete the "footer-fix" branch:&lt;br&gt;
&lt;code&gt;$ git branch -d footer-fix&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See All Branches At Once&lt;br&gt;
&lt;code&gt;$ git log --oneline --decorate --graph --all&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#on-merging" class="anchor"&gt;
  &lt;/a&gt;
  On merging
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ git merge &amp;lt;name-of-branch-to-merge-in&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;look at the branches that it's going to merge&lt;/li&gt;
&lt;li&gt;look back along the branch's history to find a single commit that¬†both¬†branches have in their commit history&lt;/li&gt;
&lt;li&gt;combine the lines of code that were changed on the separate branches together&lt;/li&gt;
&lt;li&gt;makes a commit to record the merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#there-are-two-types-of-merges" class="anchor"&gt;
  &lt;/a&gt;
  There are two types of merges:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;fast-forward merge&lt;/strong&gt; ‚Äì the branch being merged in must be¬†ahead¬†of the checked out branch. The checked out branch's pointer will just be moved forward to point to the same commit as the other branch.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;regular merge&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;two divergent branches are combined&lt;/li&gt;
&lt;li&gt;a merge commit is created&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#on-merge-fails-merge-conflics" class="anchor"&gt;
  &lt;/a&gt;
  On merge fails / merge conflics:
&lt;/h4&gt;

&lt;p&gt;A merge conflict will happen when¬†the exact same line(s)¬†are changed in separate branches&lt;br&gt;
The¬†git status¬†output tells us to that the merge conflict is inside¬†index.html. So check out that file in your code editor!&lt;br&gt;
Merge Conflict Indicators Explanation&lt;br&gt;
The editor has the following merge conflict indicators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD¬†everything below this line (until the next indicator) shows you what's on the current branch&lt;/li&gt;
&lt;li&gt;||||||| merged common ancestors¬†everything below this line (until the next indicator) shows you what the original lines were&lt;/li&gt;
&lt;li&gt;=======¬†is the end of the original lines, everything that follows (until the next indicator) is what's on the branch that's being merged in&lt;/li&gt;
&lt;li&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; heading-update¬†is the ending indicator of what's on the branch that's being merged in (in this case, the¬†heading-update¬†branch)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;choose which line(s) to keep&lt;/li&gt;
&lt;li&gt;remove all lines with indicators
¬†To resolve the conflict in a file:&lt;/li&gt;
&lt;li&gt;locate and remove all lines with merge conflict indicators&lt;/li&gt;
&lt;li&gt;determine what to keep&lt;/li&gt;
&lt;li&gt;save the file(s)&lt;/li&gt;
&lt;li&gt;stage the file(s)&lt;/li&gt;
&lt;li&gt;make a commit&lt;/li&gt;
&lt;/ol&gt;



&lt;h3&gt;
  &lt;a href="#commit-amend" class="anchor"&gt;
  &lt;/a&gt;
  commit amend
&lt;/h3&gt;

&lt;p&gt;Now with the¬†--amend¬†flag, you can alter the¬†most-recent¬†commit.&lt;br&gt;
&lt;code&gt;$ git commit --amend -m 'your text'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If your Working Directory is clean (meaning there aren't any uncommitted changes in the repository) running¬†&lt;code&gt;$ ‚Ä®git commit --amend&lt;/code&gt;¬†will let you provide a new commit message.&lt;/p&gt;

&lt;p&gt;Add Forgotten Files To Commit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;edit the file(s)&lt;/li&gt;
&lt;li&gt;save the file(s)&lt;/li&gt;
&lt;li&gt;stage the file(s)&lt;/li&gt;
&lt;li&gt;and run¬†git commit --amend&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-the-oh-no-moments" class="anchor"&gt;
  &lt;/a&gt;
  for the 'OH NO' moments
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Resetting Is Dangerous ‚ö†Ô∏è&lt;br&gt;
Resetting erases¬†commits!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ancestry-references" class="anchor"&gt;
  &lt;/a&gt;
  Ancestry References
&lt;/h4&gt;

&lt;p&gt;that we can use to tell Git about relative references&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;^¬†‚Äì indicates the parent commit&lt;/li&gt;
&lt;li&gt;~¬†‚Äì indicates the¬†first¬†parent commit
Here's how we can refer to previous commits:&lt;/li&gt;
&lt;li&gt;the parent commit ‚Äì the following indicate the parent commit of the current commit

&lt;ul&gt;
&lt;li&gt;HEAD^&lt;/li&gt;
&lt;li&gt;HEAD~&lt;/li&gt;
&lt;li&gt;HEAD~1&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;the grandparent commit ‚Äì the following indicate the grandparent commit of the current commit

&lt;ul&gt;
&lt;li&gt;HEAD^^&lt;/li&gt;
&lt;li&gt;HEAD~2&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;the great-grandparent commit ‚Äì the following indicate the great-grandparent commit of the current commit

&lt;ul&gt;
&lt;li&gt;HEAD^^^&lt;/li&gt;
&lt;li&gt;HEAD~3&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#commit-revert" class="anchor"&gt;
  &lt;/a&gt;
  commit revert
&lt;/h3&gt;

&lt;p&gt;When you tell Git to¬†revert¬†a specific commit, Git takes the changes that were made in commit and does the exact opposite of them&lt;br&gt;
Git will make a new commit&lt;br&gt;
&lt;code&gt;$ git revert &amp;lt;SHA-of-commit-to-revert&amp;gt;&lt;/code&gt;&lt;br&gt;
This command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;will undo the changes that were made by the provided commit&lt;/li&gt;
&lt;li&gt;creates a new commit to record the change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ git reset &amp;lt;reference-to-commit&amp;gt;&lt;/code&gt;&lt;br&gt;
OR use the ancestry refs&lt;/p&gt;

&lt;p&gt;For example if you made a merge on the wrong branch, use this command to undo the merge:&lt;br&gt;
&lt;code&gt;$ git reset --hard HEAD^&lt;/code&gt;&lt;br&gt;
Make sure to include the¬†^¬†character, the "Relative Commit Reference" indicates "the parent commit".&lt;/p&gt;

&lt;p&gt;It can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;move the HEAD and current branch pointer to the referenced commit&lt;/li&gt;
&lt;li&gt;erase commits&lt;/li&gt;
&lt;li&gt;move committed changes to the staging index&lt;/li&gt;
&lt;li&gt;unstage committed changes
The way that Git determines if it erases, stages previously committed changes, or unstages previously committed changes is by the flag that's used. The flags are:&lt;/li&gt;
&lt;li&gt;--mixed (the default, places changes back in the working dir)&lt;/li&gt;
&lt;li&gt;--soft (will put them into the staging are)&lt;/li&gt;
&lt;li&gt;--hard (will throw out all changes)
*** Good idea: a backup branch, in case u mess up 
&lt;code&gt;$ git branch backup&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reset Recap&lt;br&gt;
To recap, the¬†git reset¬†command is used erase commits:&lt;br&gt;
$ git reset &lt;br&gt;
It can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;move the HEAD and current branch pointer to the referenced commit&lt;/li&gt;
&lt;li&gt;erase commits with the¬†--hard¬†flag&lt;/li&gt;
&lt;li&gt;moves committed changes to the staging index with the¬†--soft¬†flag&lt;/li&gt;
&lt;li&gt;unstages committed changes¬†--mixed¬†flag
Typically, ancestry references are used to indicate previous commits. The ancestry references are:&lt;/li&gt;
&lt;li&gt;^¬†‚Äì indicates the parent commit&lt;/li&gt;
&lt;li&gt;~¬†‚Äì indicates the first parent commit&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;This cheatsheet has lived in my notepad for some time. &lt;br&gt;
Of course all this info is out there on the wild web, certainly better written &amp;amp; explained. And there's a lot more to git and life-saving commands.&lt;br&gt;
I'd love to know them &amp;amp; list them all but I prefer to know what I need to know at every moment, so this is where I'm at right now. I like my quick ref cheatsheets &amp;amp; so I am sharing it. &lt;br&gt;
Regrettably I do not have refs of where all these snippets came from. Some are c/p, some are mine, many are from the official Atlassian guides.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-up-then-make-your-own-cheatsheet-" class="anchor"&gt;
  &lt;/a&gt;
  Read up, then make your own cheatsheet :)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials"&gt;Atlassian git tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ohshitgit.com/"&gt;Oh Shit, Git!&lt;/a&gt; &lt;em&gt;I love this one&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;br&gt;&lt;br&gt;
&lt;em&gt;next:&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;rebasing &amp;amp; squashing cheatsheet in the making&lt;/em&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>cheatsheet</category>
    </item>
    <item>
      <title>Motivation to Blog</title>
      <author>Ana Vela</author>
      <pubDate>Fri, 27 Nov 2020 22:32:44 +0000</pubDate>
      <link>https://dev.to/anaveecodes/motivation-to-blog-b0e</link>
      <guid>https://dev.to/anaveecodes/motivation-to-blog-b0e</guid>
      <description>&lt;p&gt;Maybe you started like me - you were excited to start a blog, got it set up, and began publishing a few posts. Once the initial excitement wore off, you wondered where you'd get ideas for posts and if anyone would actually read your blog. &lt;/p&gt;

&lt;p&gt;With these thoughts, I started to ask myself why I wanted to start a blog in the first place. Here are some thoughts about why I blog:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-commitment" class="anchor"&gt;
  &lt;/a&gt;
  Personal Commitment
&lt;/h2&gt;

&lt;p&gt;I enjoy writing, so I thought writing about tech topics would be a great way to merge these two interests. I am working on how to create better routines to make blogging a part of my schedule. With a plan, I can maintain this blog at a consistent pace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-part-of-a-community" class="anchor"&gt;
  &lt;/a&gt;
  Being Part of a Community
&lt;/h2&gt;

&lt;p&gt;With so many great topics to write about, I'd like to share my ideas with other developers. Blogging gives me opportunities to share ideas, spark a discussion with others, and extend an idea or concept to continue a conversation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenge-myself" class="anchor"&gt;
  &lt;/a&gt;
  Challenge Myself
&lt;/h2&gt;

&lt;p&gt;While I am learning programming concepts, I can share my knowledge through blog posts. Writing these posts requires me to review what I know and clarify my thinking. This is a way to get a little uncomfortable, but it is a challenge worth trying. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Thinking about my why helps me make a stronger commitment to blogging. It also helps me overcome writer's block whenever I am not sure what to write about next. I'd love to hear your thoughts. Why do you blog? Leave a comment to let me know!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@laurenmancke?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lauren Mancke&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/laptop?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introduction to algorithm and the big O notation</title>
      <author>Fakorede Damilola</author>
      <pubDate>Fri, 27 Nov 2020 20:50:29 +0000</pubDate>
      <link>https://dev.to/fakorededamilola/introduction-to-algorithm-and-the-big-o-notation-533</link>
      <guid>https://dev.to/fakorededamilola/introduction-to-algorithm-and-the-big-o-notation-533</guid>
      <description>&lt;p&gt;Algorithms are very important in programming, every programmer will definitely end up writing an algorithm one way or another. In this article, I am going to explain &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#con-1"&gt;The term algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#con-2"&gt;The best possible solution for an algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#con-3"&gt;The big-O notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#con-4"&gt;Measuring performance (asymoptoic function)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-term-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;The term algorithm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;An algorithm is a sequence of steps (instructions) used to solve a clearly defined problem. There are two things you should note here, &lt;strong&gt;a sequence of steps&lt;/strong&gt; and a &lt;strong&gt;clearly defined problem&lt;/strong&gt;. So basically, an algorithm is any piece of code that you write (a line, 20 lines etc), that solves a problem. In as much has the problem follows the same pattern, that program you write should be able to solve it. &lt;br&gt;
Let's look at an example.&lt;br&gt;
write a program that sums up all the numbers from 1 to 10.&lt;br&gt;
This can be easily done with a &lt;strong&gt;for loop&lt;/strong&gt;. I will use JavaScript to solve this question&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sumNumber(){
let sum=0 
for (let i=0;i&amp;lt;=10;i++){ 
sum =sum+i 
} 
return sum 
}
console.log(sumNumber())
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function above &lt;strong&gt;sumNumber&lt;/strong&gt; should be an algorithm. Why, because it solves a clearly defined problem (i.e it summed all the number from 1 to 10) which is what I asked for. But notice I said &lt;strong&gt;should be an algorithm&lt;/strong&gt; and not &lt;strong&gt;it is an algorithm&lt;/strong&gt;. This is not because it is a five line code and the bosses in programming write a single line, or because it is a simple for loop and real nerds with use reduce to solve it. But this is not an algorithm simply because this function is solving an exact question. In the definition above, I said it is a sequence of step that solves a clearly defined problem. We got the sequence of steps part (our five liner was awesome and we did not have to move through the whole planet or write 500 lines to get it done), but our algorithm solved the question for a clearly defined and exact problem. As programmers, we solve problems. We write code that helps solve the difficulties our users might have. So imagine a user wants to sum up all the numbers from one to 100 and comes to our code. Luckily our code won't break up, but it will give a devastating result which we don't want. So how can we write this so that it can solve a clearly defined but not exact problem, which is what all algorithms should do. What if instead of assuming that every number a user wants to add up will always be 10, why don't we take the longer route and assume it is unknown and only becomes known when our user inputs that number. That way our function will always loop to the number the user inputs and not &lt;strong&gt;10&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sumNumber(n){ 
let sum=0 
for (let i=0;i&amp;lt;=n;i++){ 
sum =sum+i 
} 
return sum 
}
console.log(sumNumber(100))
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So by changing the number in the parenthesis, we can change the value of n, and therefore change our result. Therefore adhering to the definition altogether i.e &lt;strong&gt;sequence of steps&lt;/strong&gt; (This five line is awesome) and &lt;strong&gt;clearly defined&lt;/strong&gt; (no matter the number inputted, has long as the problem is to add up all the numbers from 1 to that number, our algorithm is more than able to solve it.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-best-possible-solution-for-an-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;The best possible solution for an algorithm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There is a popular saying in programming that you can solve one thing in 1000 different ways. A developer could decide to use the reduce higher order array or even a math formula etc. The fact is different people solve the same problem different ways. But then one method of solving a problem should to an extent be considered better than another (i.e the best possible solution). So the question now is what is the criteria for picking the best possible solution. Is it the&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimum amount of code (whoa one-liner, this is the best algorithm programmer :) )&lt;/li&gt;
&lt;li&gt;Best performance (the algorithm that takes the least amount of time to finish)&lt;/li&gt;
&lt;li&gt;Least amount of memory (the algorithm that does not take a lot of resources on the computer) or&lt;/li&gt;
&lt;li&gt;Personal preference (you like code A over code B)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oftentimes, the best solution is the best performance (takes the least amount of time). So with the problem above, let's try to measure the best performance. In the browser, there is a performance object on which we can call the now method and this gives the current time stamp. So, we can easily get the timestamp before and after our program runs and also their differences to see how long the program ran.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sumNumber(n){ 
let sum=0 for (let i=0;i&amp;lt;=n;i++){
 sum =sum+i 
} 
return sum 
} 
let start,end 
start =performance.now() 
sumNumber(3) 
end =performance.now() 
console.log(end-start) //1.0576668876
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I am guessing your result is not the same has mine, and that is OK. The problem with getting the performance this way is that it depends on a lot of factors such has the speed of your laptop, the amount of programs running in the background etc. There are too many variables that can affect your result and this can definitely lead to errors if performance was judged this way. But for now let's stick with this. If you try increasing the number to 5, then 10 you will see that the result is literally the same thing. Same thing goes with 100 and even 1000. But If you try 100000, 1000000 and 10000000 (try not to go too large), you will begin to notice a trend&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start =performance.now() 
sumNumber(100000) 
end =performance.now() 
console.log(end-start) //20.1 
start =performance.now() 
sumNumber(1000000) 
end =performance.now() 
console.log(end-start) //20.8 
start =performance.now() 
sumNumber(10000000) 
end =performance.now() 
console.log(end-start) //198.2 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It tends to take a longer time for bigger numbers and that is the way it should be, but it is at the rate of &lt;strong&gt;√ó10&lt;/strong&gt; of the previous number when we add an additional &lt;strong&gt;zero&lt;/strong&gt; to that number. E.g if we double the number, the performance is also doubled and if we multiply the number by 10, the performance is also multiplied by 10. &lt;br&gt;
But for performance, we should not really care about the values gotten, cause like I said earlier, this values depends on a number of factors. But the general trend should be observed, especially for larger numbers.&lt;br&gt;
Considering this on a graph, we would draw a linear graph i.e has the values get larger so does the time and with the same factor. The varying values is generally due to other factors and that is how you judge algorithms, not with numbers but with the general trend. So with this trend, we can write a statement about the performance of an algorithm based on the time it take in relation to the input. This is called time complexity. The function above can be said to have a &lt;strong&gt;linear time complexity&lt;/strong&gt;( has the value increases, the time increases at the same rate i.e linearly). &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-big-o-notation" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;The big O Notation&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;From above, we have seen that has our performance (time) increases by the same factor which our value increases which we called &lt;strong&gt;linear time complexity&lt;/strong&gt;. But that is not the only time complexity we have. There is also the constant time complexity. Can you think of a way the algorithm above can have a constant time complexity?? &lt;br&gt;
What if instead of looping everytime we want to get the sum of numbers we use a simple math formula. So basically instead of our algorithm stopping at the for loop and running that same line for e.g 10,000 times which might take 5s, it just simply uses our formula and run once i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sumNumber(n){
return (n/2)*(n+1) 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now when you try this for all n and calculate the performance with &lt;strong&gt;performance.now()&lt;/strong&gt;, you will get almost the same values and remember, we don't really care about the values because they are polluted by other activities running on our conputer, but instead we care about the general trend which is has the values (n) increases, the time remains the same. No matter the value of n i.e constant time complexity. So from this two algorithms, which one do you feel is the best method to use and solve this problem i.e Is it the linear time complexity (has the value increases the time increases by the same value) or the constant time complexity (has the value increases the time remains the same). I feel it is the constant time complexity. But the issue is, it is not for every algorithm you can find a math formula or a way to get the trend to be a constant time complexity. Sometimes you just have to stick With the linear time complexity. But there are other time complexity such as &lt;strong&gt;quadratic Time complexity&lt;/strong&gt; (has the value increases, the time doubles by that factor), the &lt;strong&gt;cubic Time complexity&lt;/strong&gt; etc. &lt;br&gt;
But when talking to other people, developers especially, there is a way to describe this time complexity using the &lt;strong&gt;big O notation&lt;/strong&gt;. For example, the &lt;strong&gt;linear time complexity&lt;/strong&gt; can be written has o(n) pronounced has (o of n). This is written in terms of the performance that is has n values increase, the time increases by the same value (n). Can you guess constant time complexity :). This will be o(1) has the value increases, the performance remains constant i.e 1. &lt;strong&gt;quadratic Time complexity&lt;/strong&gt; o(n^2), &lt;strong&gt;cubic Time complexity&lt;/strong&gt; o(n^3), logarithmic time complexity o(log n) (i.e has the values increase, the performance increases by a value of log of that number).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#measuring-performance-asymoptoic-function" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;Measuring performance (asymoptoic function)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now that we understand big O Notation and how to get the performance, the next question is how can we know the time complexity of a given algorithm. We could follow the route above and calculate for specific values and take note of the general trend (but that will take a while and some trends are not so straight forward e.g logarithmic trend ), or we could try to memorize it for each algorithm (that sounds fine but then we will have to start cramming and look for all possible algorithm etc). &lt;br&gt;
But there is a way we can get the big O via &lt;strong&gt;asymoptoic analysis&lt;/strong&gt;. We can do this through three steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define the function (not the algorithm function but the math function. I Will explain this)&lt;/li&gt;
&lt;li&gt;Find the fastest growing term&lt;/li&gt;
&lt;li&gt;Remove the coefficients&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take for example the &lt;strong&gt;sumNumber&lt;/strong&gt; algorithm above and talk about this three things in details.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#define-the-function" class="anchor"&gt;
  &lt;/a&gt;
  Define the function
&lt;/h4&gt;

&lt;p&gt;From above, I said the function I am talking about is not the algorithm sumNumber but the mathematical time complexity function. Now how do we get the mathematical time complexity function?  In this case, that of function sumNumber. We need to find the number of expression execution i.e each expression. Basically, each line of code and we will count how many times it takes that line to run. So let's test for n=1 and n=n.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sumNumber(n){
let sum=0 
for (let i=0;i&amp;lt;=n;i++){ 
sum =sum+i 
} 
return sum 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So for n=1,&lt;br&gt;
The first line &lt;strong&gt;let sum=0&lt;/strong&gt; runs once. That is this algorithm defines that line just once and that is all.&lt;br&gt;
The second line &lt;strong&gt;for (let i=0;i&amp;lt;=n;i++){&lt;/strong&gt; also runs once. This defines the condition for the loop.&lt;br&gt;
The third line &lt;strong&gt;sum =sum+i&lt;/strong&gt; is inside the loops and this will keep on running based on the value of &lt;strong&gt;n&lt;/strong&gt;, i.e it runs from &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;n&lt;/strong&gt; which in our case is one, so it runs once.&lt;br&gt;
The fifth line &lt;strong&gt;return sum&lt;/strong&gt; also run once. It returns the answer once.&lt;br&gt;
For n=n,&lt;br&gt;
This is quite similar to n=1 above, the first and second line run once each like above.&lt;br&gt;
The third line &lt;strong&gt;sum =sum+i&lt;/strong&gt; will run from i=1 all through n, and in this case the n is actually n, so it will run n times.&lt;br&gt;
Now, we will add all the values together. &lt;br&gt;
For n=1&lt;br&gt;
That is &lt;strong&gt;1+1+1+1 = 4&lt;/strong&gt;.&lt;br&gt;
For n=n&lt;br&gt;
The sum will be 1+1+n+1 =3+n.&lt;br&gt;
Now remember, since in algorithm we are not solving for an exact problem but for unknown values, it will only make sense to use the result gotten from &lt;strong&gt;n=n&lt;/strong&gt;. I used &lt;strong&gt;n=1&lt;/strong&gt; just to help you understand.&lt;br&gt;
For n values, the math function = &lt;strong&gt;3+n&lt;/strong&gt;. We can rewrite this has &lt;strong&gt;1*n + 3&lt;/strong&gt; (remember 1*n is still n). Like I said earlier, we don't really care about numbers but trends because number tends to be polluted. So we could easily turn that math function into a trend &lt;strong&gt;T =a*n + b&lt;/strong&gt;, i.e the performance(T) for n no of values is this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fastest-growing-term" class="anchor"&gt;
  &lt;/a&gt;
  Fastest growing term
&lt;/h4&gt;

&lt;p&gt;So from above, we already have this function T =a*n + b , now the next thing is to find the fastest growing term.&lt;br&gt;
From the function, it is pretty obvious that &lt;strong&gt;b&lt;/strong&gt; will remain the same no matter the value of n, it is a constant. But not a. As the value of n increases so those the value of a. Therefore a is the fastest growing term and we can reduce our function to &lt;strong&gt;T= a*n&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#remove-the-coefficients" class="anchor"&gt;
  &lt;/a&gt;
  Remove the coefficients
&lt;/h4&gt;

&lt;p&gt;We are left with T=a*n, removing the coefficients (a), &lt;strong&gt;T=n&lt;/strong&gt;. Which is our finally statement i.e T increases has n increases with the same factor &lt;strong&gt;o(n)&lt;/strong&gt;.&lt;br&gt;
Now can you try this method for the constant time complexity. Let me know your answer in the comment section below.&lt;/p&gt;

&lt;p&gt;Thank you for reading to this point, you can follow me on twitter &lt;a href="https://twitter.com/fakoredeDami"&gt;@fakoredeDami&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
