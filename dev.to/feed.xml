<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Typing Effect with JS</title>
      <author>Jatin Sharma</author>
      <pubDate>Thu, 09 Dec 2021 04:26:24 +0000</pubDate>
      <link>https://dev.to/j471n/typing-effect-with-js-34b8</link>
      <guid>https://dev.to/j471n/typing-effect-with-js-34b8</guid>
      <description>&lt;p&gt;As you may have already seen some website which has some kind of typing animation. It looks cool right but what if I tell you it is very easy to do. &lt;/p&gt;

&lt;p&gt;I have already made an article about how you can make this type of effect with CSS but today we will build something different than that. In this effect, you can give multiple strings and it will display one by one. &lt;/p&gt;

&lt;p&gt;First of all, let's visualize what I am talking about - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6q6iGbVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0vwGdE4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6q6iGbVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0vwGdE4.gif" alt="preview" width="582" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make this work we need to use a library called &lt;a href="https://mattboldt.github.io/typed.js/"&gt;typed.js&lt;/a&gt; So firstly add the following script to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/typed.js@2.0.12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's look at the rest of code, how this is cooking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hi, I am &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HTML is very simple we just need to use only one element in order to make this work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jatin Sharma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React Developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Python Developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;typeSpeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;backSpeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;typed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Typed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/qBPdXdm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/qBPdXdm"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It is as simple as that, now you can use this in your projects wherever you want. To learn how you can make typing effect in CSS visit the given link.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUX4imFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2QWo3cm.png" alt="buymecoffee" width="374" height="88"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/curved-css-timeline-5ab3"&gt;Curved Timeline in CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/how-to-use-web-storage-api-3o28"&gt;How to use Web Storage API?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/typing-effect-by-using-css-50p"&gt;Typing Effect by using CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Vocabulary Building Day 23</title>
      <author>vindhya Hegde </author>
      <pubDate>Thu, 09 Dec 2021 03:48:12 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-23-3pdd</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-23-3pdd</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;boon&lt;/strong&gt;(noun): a thing that is helpful or beneficial.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rdDCStSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/FBVU511LAys/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rdDCStSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/FBVU511LAys/maxresdefault.jpg" alt="alt text" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=boon+meaning&amp;amp;oq=boon+&amp;amp;aqs=chrome.1.69i57j0i433i512j0i512l2j0i433i512j0i512l3j46i175i199i512j46i199i465i512.4364j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;travail&lt;/strong&gt;(noun): painful or laborious effort.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2e9FF3j0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EITZeFwXUAIGXyc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2e9FF3j0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EITZeFwXUAIGXyc.jpg" alt="alt text" width="880" height="460"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=travail+meaning&amp;amp;oq=travail&amp;amp;aqs=chrome.0.69i59j69i57j0i271.3875j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;atavism&lt;/strong&gt;(noun): a reappearance of an earlier characteristic; throwback.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KMI5NfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/atavism-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KMI5NfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.wordinfo.info/words/images/atavism-1.jpg" alt="alt text" width="255" height="443"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=atavism&amp;amp;oq=atavism&amp;amp;aqs=chrome..69i57j35i39l2j0i512l7.5994j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;peruse&lt;/strong&gt;(verb): read (something), typically in a thorough or careful way.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoZBniL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://merriam-webster.com/assets/mw/images/article/art-global-footer-recirc/woman-reading-a-book-and-looking-mighty-perplexed-1775-5d4e1591b0e98b4e8ae253fa61e8eab2%401x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoZBniL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://merriam-webster.com/assets/mw/images/article/art-global-footer-recirc/woman-reading-a-book-and-looking-mighty-perplexed-1775-5d4e1591b0e98b4e8ae253fa61e8eab2%401x.jpg" alt="alt text" width="261" height="174"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=peruse&amp;amp;oq=peruse&amp;amp;aqs=chrome..69i57j0i433i512j0i512l8.5393j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;clumsy&lt;/strong&gt;(adjective): awkward and without skill.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGsT_Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.spinfold.com/wp-content/uploads/2020/09/synonyms_of_clumsy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGsT_Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.spinfold.com/wp-content/uploads/2020/09/synonyms_of_clumsy.jpg" alt="alt text" width="510" height="570"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=awkward+meaning&amp;amp;oq=awkward&amp;amp;aqs=chrome.0.0i67i433j46i67i433j0i67i433j0i20i263i512j0i67l2j0i131i433j0i512j0i67.7276j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title> Complete Guide to Building Games in the Browser </title>
      <author>Deon Rich</author>
      <pubDate>Thu, 09 Dec 2021 03:47:51 +0000</pubDate>
      <link>https://dev.to/zippcodder/complete-guide-to-building-games-in-the-browser-kp6</link>
      <guid>https://dev.to/zippcodder/complete-guide-to-building-games-in-the-browser-kp6</guid>
      <description>&lt;p&gt;Back in the early days when I first started out in web development, I eventually stumbled across &lt;strong&gt;HTML Canvas&lt;/strong&gt;, and I was immediately &lt;em&gt;hooked&lt;/em&gt;. This discovery would prompt me to create many projects, from things like art programs to photo applications, and eventually even &lt;em&gt;games&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Often I've been revisiting HTML Canvas, and combining it with some of my newer skills like Node.js. Using the two, I've been able to create full blown online games, and honestly have impressed myself with how much I've improved since I first came across the technology, becoming a kind of "canvas connoisseur" if I do say so myself! 😌&lt;/p&gt;

&lt;p&gt;I thought it was about time I shared some of the knowledge I've gained over the years, and figured this was a good way to do it. So, today Im going to share with you my process and methods for &lt;strong&gt;creating games from scratch using HTML Canvas&lt;/strong&gt;, showing you everything you need to know to get started building and designing your own!&lt;/p&gt;

&lt;p&gt;Since this post will be a little lengthy, heres an overview of all of the topics I'll be covering:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#chapter-1"&gt;What is HTML Canvas?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-11"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-12"&gt;Drawing Graphics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#chapter-2"&gt;Sizing the Game Area&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-21"&gt;Applying a Static Fit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-22"&gt;Applying a Theator Fit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-23"&gt;Applying a Fullscreen Fit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;Creating a Rendering Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#chapter-4"&gt;Building Sprites&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-41"&gt;Background Sprites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-42"&gt;Object Sprites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-43"&gt;Character Sprites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#chapter-5"&gt;Movement and Controls&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-51"&gt;Implementing Joysticks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-52"&gt;Joystick Movement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-53"&gt;Keyboard Controls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-54"&gt;Character Rotation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-55"&gt;Static vs Dynamic Movement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#chapter-6"&gt;Collision Detection&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-61"&gt;Squares and Rectangles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-62"&gt;Circles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-7"&gt;Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-8"&gt;Putting it All Together&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just as a heads up, Im going to assume you have somewhat strong knowledge of Javascript and the DOM as I go through this guide, so I wont be explaining any syntax or basic concepts, only concepts related to HTML Canvas. Throughout this post I'll be explaining the key concepts used in my personal process, and then lastly in the final chapter I'll show a simple game I've created to showcase those concepts. But with that out of the way, lets get into it! 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-canvas"&gt;
  &lt;/a&gt;
  What is HTML Canvas? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The HTML &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element, or &lt;strong&gt;Canvas API&lt;/strong&gt; as it's also called, is a special HTML Element used for creating graphics, similar to its counterpart &lt;strong&gt;SVG&lt;/strong&gt; which is also used for creating graphics on the web. Unlike SVG however, HTML Canvas is built for &lt;em&gt;speed&lt;/em&gt; and the rendering of graphics programmatically on the fly.&lt;/p&gt;

&lt;p&gt;The API consists of the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element, which is used as a container for our graphics, and contains a whole plethora of properties and methods used for drawing things like shapes, images, text, 3d models and more onto it, as well as applying transformation on said elements.&lt;/p&gt;

&lt;p&gt;Because its so simple, fast and versatile its applied in a wide range of web applications like games (2D and 3D), video chat, animations, art programs and everything in between. But before we start applying it for &lt;em&gt;our&lt;/em&gt; game, let's get into how it works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To get started with HTML Canvas, we'll need to first add it into our HTML. The &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element has no children, but text can be added between its tags to serve as the text to be shown to a user in the case that their browser dosen't support Canvas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;canvas&amp;gt;&lt;/span&gt;Sorry, your browser dosen't support HTML Canvas!&lt;span class="nt"&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the dimensions of the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element are &lt;strong&gt;300x150&lt;/strong&gt;(px), but it can be resized in CSS. Note that this may alter the aspect ratio of the canvas's content, and it may be stretched as a result of resizing, but I'll get more into that later.&lt;/p&gt;

&lt;p&gt;To breifly give you an introduction to the use of HTML Canvas (before we jump into the good stuff), I'll quickly go over each of the most important methods and properties you need to know to get started. Before we can render anything however, we first need to get a reference to the canvas's &lt;strong&gt;context&lt;/strong&gt; using the &lt;code&gt;canvasElement.getContext()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// get a reference to our canvas's context&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;canvasElement.getContext()&lt;/code&gt; method takes 2 parameters. One is the &lt;strong&gt;context type&lt;/strong&gt;, and another is the &lt;strong&gt;context attributes&lt;/strong&gt;, however context attributes are irrelevant in our case, and can be ommited. The main two values for the context type are &lt;code&gt;"2d"&lt;/code&gt; and &lt;code&gt;"webgl"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Passing it a &lt;code&gt;"2d"&lt;/code&gt; context specifies that we want a 2D rendering context, and &lt;code&gt;canvasElement.getContext()&lt;/code&gt; will return a &lt;code&gt;CanvasRenderingContext2D&lt;/code&gt; object, containing properties and methods for rendering 2D graphics onto our canvas. Passing &lt;code&gt;"webgl"&lt;/code&gt;, will return a &lt;code&gt;WebGLRenderingContext&lt;/code&gt; object, which contains properties and methods for rendering 3D graphics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webglfundamentals.org/"&gt;WebGL&lt;/a&gt; as you may have heard of before, is a Javascript API for rendering 3D graphics, and is a very popular choice for creating 3D games on the web. The API however is very complex, which is why people usually opt to use libraries like &lt;a href="https://threejsfundamentals.org/threejs/lessons/threejs-fundamentals.html"&gt;Three.js&lt;/a&gt; to interact with it. &lt;/p&gt;

&lt;p&gt;In this guide, we'll be using a 2D rendering context which is much simpler, but if you're interested in either Three.js or WebGL, you can check out some of the resources linked at the end of this article.&lt;/p&gt;

&lt;p&gt;Anyway, let's take a look at some properties and rendering methods..👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawing-graphics"&gt;
  &lt;/a&gt;
  Drawing Graphics &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Quickly, lets go over the main rendering methods and properties we'll be using to create our game. If any of these properties or methods dont seem clear, they'll become clearer as we apply them later in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;beginPath()&lt;/code&gt;: Starts a new "path", which means ties with previous renderings are cut. The path is all of the drawing commands that have been called up untill the current point. If you were to stroke a rectangle using &lt;code&gt;rect()&lt;/code&gt; and &lt;code&gt;stroke()&lt;/code&gt;, and then fill a rectangle using &lt;code&gt;rect()&lt;/code&gt; and &lt;code&gt;fill()&lt;/code&gt;, the stroked rectangle would get filled as well because both rectangles are part of the same path. Thus when &lt;code&gt;fill()&lt;/code&gt; is called both rectangles are filled. This method prevents this from ocurring by starting a new path. Later you'll see this in action. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stroke()&lt;/code&gt;: Used to stroke (or line) the current path. Lines and shapes wont be stroked by default, so this should always be called explicitly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fill()&lt;/code&gt;: Used to fill the current path. Lines and shapes wont be filled by default, so this should be always called explicitly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;moveTo(x,y)&lt;/code&gt;: Moves the pen (the current coordinates from which to start drawing from) to &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lineTo(x,y)&lt;/code&gt;: Draws a line form the current pen coordinates to &lt;code&gt;x&lt;/code&gt;and &lt;code&gt;y&lt;/code&gt; coordinates. Line wont show unless &lt;code&gt;stroke()&lt;/code&gt; is used after.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rect(x,y,width,height)&lt;/code&gt;: Draws a rectangle whose top left corner is located at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and whose dimensions are &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. Wont show unless &lt;code&gt;stroke()&lt;/code&gt; or &lt;code&gt;fill()&lt;/code&gt; are explicitly called after.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;strokeRect(x,y,width,height)&lt;/code&gt;: Same as &lt;code&gt;rect()&lt;/code&gt; but strokes (lines) the rectangle in the same function call (no need to call &lt;code&gt;stroke()&lt;/code&gt; afterwards).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fillRect(x,y,width,height)&lt;/code&gt;: Same as &lt;code&gt;strokeRect()&lt;/code&gt;, but fills the rectangle in the same function call instead of stroking it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;clearRect(x,y,width,height)&lt;/code&gt;: Same as &lt;code&gt;fillRect()&lt;/code&gt;, but fill clear out (erase) the area of space specified. This is often used to clear the canvas for the next frame, as you'll see later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;drawImage(image,x,y,width,height)&lt;/code&gt;: Renders a given image (&lt;code&gt;image&lt;/code&gt;) onto the canvas located at x and y width the given &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. Usually an &lt;code&gt;HTMLImageElement&lt;/code&gt; created through the &lt;code&gt;Image()&lt;/code&gt; constructor is used as the &lt;code&gt;image&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fillText(text,x,y)&lt;/code&gt;: Creates text specified by &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Settings such as font and text alignment can be set using additional properties, which i wont go over here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;arc(x,y,radius,startAngle,endAngle,direction)&lt;/code&gt;: Draws an arc centered at &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates, which has a radius of &lt;code&gt;radius&lt;/code&gt;, starts at the angle &lt;code&gt;startAngle&lt;/code&gt; and ends at the angle &lt;code&gt;endAngle&lt;/code&gt; (both given in radians).&lt;strong&gt;To create a circle, set &lt;code&gt;startAngle&lt;/code&gt; to 0 and &lt;code&gt;endAngle&lt;/code&gt; to &lt;code&gt;2*Math.PI&lt;/code&gt;&lt;/strong&gt;. &lt;code&gt;direction&lt;/code&gt; specifies weather the arc is drawn counter clockwise, the default being clockwise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;strokeStyle&lt;/code&gt;: This property sets the color which will be used in strokes (lines). Can be any valid CSS color value. The new stroke color will be applied to everything drawn after its been set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fillStyle&lt;/code&gt;: Sets the fill color. The new fill color will be applied to everything drawn after its been set.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;globalAlpha&lt;/code&gt;: Sets the opacity. The new opacity will be applied to everything drawn after its been set.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the principle methods and properties that we'll be using to render our game onto the canvas, and draw each element from backgrounds, to characters and even on-screen controls for mobile users.&lt;/p&gt;

&lt;p&gt;To keep this section as short as possible, i've only gone over the essencials. But, theres a &lt;em&gt;ton&lt;/em&gt; of additional useful properties and methods you can use to acheive all kinds of stuff (some of which we will see later on). You can explore them &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"&gt;here&lt;/a&gt; if you're interested. &lt;/p&gt;

&lt;p&gt;Don't worry about it if it's hard to visualize any of these, as you'll see them in action further along. Any tips or other relevant information will be explained as this guide progresses. But now that we understand &lt;em&gt;what&lt;/em&gt; we're using to create our game and a little about how to use it, let's look at the first step in implementing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sizing-the-game-area"&gt;
  &lt;/a&gt;
  Sizing the Game Area &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The first step we need to take before drawing any game elements onto our canvas is to determine what kind of sizing we'll use, and how we want the game area to behave on different screen sizes. Before I show the methods I have for doing so, it's important we go over the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes of the canvas.&lt;/p&gt;

&lt;p&gt;As before mentioned, the default dimensions of the canvas are &lt;strong&gt;300x150&lt;/strong&gt;, but this also serves as the default dimensions of the canvas's &lt;em&gt;content&lt;/em&gt;. Using the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes we can change these inner content dimensions, and control how many units the canvas uses for rendering on it's &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; axis. Below is a further example and explination of how this works:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/RwZJQLB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The canvas dimensions and it's content dimensions can also be set in one go, using it's &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes in HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- canvas itself and its content is 300x250 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sorry, your browser dosen't support HTML Canvas!&lt;span class="nt"&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What option you choose for sizing will determine how or weather or not you'll use these two attributes. But now that this concept is understood, let me show you what I think are the three best and most common methods for sizing your game. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-a-static-fit"&gt;
  &lt;/a&gt;
  Applying a Static Fit &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;"Static Fit"&lt;/strong&gt; (for the lack of a better term) is when you apply permanent default dimensions to your canvas, and then simply position it somewhere on your webpage. Generally, this is used for larger screens and desktops where you want other content to be visible without maximizing the game area, or you want to maintain the aspect ratio of the game area and dont care about maximizing it.&lt;/p&gt;

&lt;p&gt;For some games, aspect ratio is important because if it's altered, the content of the game could squish or stretch. A good example of a static fit is the online game &lt;a href="https://tanktrouble.com/"&gt;Tank Trouble&lt;/a&gt; (one i used to play quite a bit 😊). You can see they've simply positioned their game area onto the page, maintain it's aspect ratio, and keep it minimized as to keep the rest of the webpage content visible.&lt;/p&gt;

&lt;p&gt;When applying this type of fit, you'll want to set the default &lt;strong&gt;content dimensions&lt;/strong&gt; of the canvas &lt;strong&gt;once&lt;/strong&gt; and never change them. They should have the same aspect ratio as the &lt;strong&gt;physical canvas dimensions&lt;/strong&gt; in CSS, and whenever you want to scale the canvas, always keep it's aspect ratio and inner dimensions the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-a-theator-fit"&gt;
  &lt;/a&gt;
  Applying a Theator Fit &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;"theator fit"&lt;/strong&gt; or &lt;strong&gt;"theator mode"&lt;/strong&gt; method, is one of the most common ways used to maximize the size of content which must maintain its aspect ratio. This is when you stretch the height of the content to the full height of the device, and keep the width proporcionate, optionally filling in any gaps with black (or vice-versa, based on the client device dimenisons).&lt;/p&gt;

&lt;p&gt;This method is usually applied when the game area has to maintain a certain aspect ratio and you want to maximize it as much as possible without cutting off any of the canvas. I could'nt find a good example in a game, but the Youtube video player serves as a good example. As seen when you try to fullscreen the video, black bars may cover the top or bottom of the video player in order to cover gaps not filled my the video itself.&lt;/p&gt;

&lt;p&gt;Below, I show an example and full explination on how you can apply this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/ZEJMxyB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice how the canvas adapts to the viewport changing, that way our game content wont end up stretching or being altered if a user resizes, and always provides the most optimum presentation possible. Similar to a static fit, you should set the content dimensions once and never change them, only changing the canvas's CSS dimensions to scale it, and maintain aspect ratio. It would also be smart to encourage your users to flip their device (if possible) to get as close to the aspect ratio of the game area as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-a-fullscreen-fit"&gt;
  &lt;/a&gt;
  Applying a Fullscreen Fit &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;fullscreen&lt;/strong&gt; fit is can be simple, or a tad more complicated. It's when you stretch the canvas dimension's (&lt;strong&gt;and it's content dimensions&lt;/strong&gt;) to the exact dimensions of the user's device, as to leave no gaps. &lt;strong&gt;When using a fullscreen and theator fit, I would recommend fullscreening the canvas on touchscreen devices via the &lt;code&gt;HTMLElement.requestFullscreen()&lt;/code&gt; method to lock it in place, because the browser may scroll and move as the player interacts with the screen to play the game&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A fullscreen fit should usually only be applied when the dimensions of your game area dont matter, and or the full game area within the canvas dosen't have to be visible. A good example of this is the online game &lt;a href="http://narwhale.io/"&gt;Narwhale.io&lt;/a&gt;, where the character is centered and the map moves into view naturally.&lt;/p&gt;

&lt;p&gt;A small pitfall if this is that the sizing of your game may vary slightly in terms of how much of the map certain clients will see. If your game is drawn on a phone with smaller dimensions than a tablet, the content is drawn using the same amount of units for each rendering (meaning a 2x2 square on the phone is also 2x2 on the tablet), except the tablet uses more units since the canvas's content dimensions will adapt to its larger screen size. &lt;strong&gt;This means that users on larger screens will end up seeing significantly more of the map than users with smaller screens&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Depending on your game, this may not matter to you, but if it's somthing you care about, I have a solution. I found to get around this was not to use pixels (the default units) as units when sizing renderings, but instead inventing my own &lt;em&gt;"viewport unit"&lt;/em&gt; based on the dimensions of the device. &lt;strong&gt;Think of it as using "%" units instead of "px" units in CSS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When applying this in an online game I had started a while back which used a &lt;em&gt;fullscreen fit&lt;/em&gt;, it proved very effective at maintaining consistent proporcionality between devices. Below, you can see two screenshots I took, comparing the the size of the game area relative to the screen of my phone, and my tablet.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#phone-game-area-720x1520"&gt;
  &lt;/a&gt;
  Phone game area (720x1520):
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lr12XDzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsyt7omtfkiidma9owsv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lr12XDzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsyt7omtfkiidma9owsv.jpg" alt="phone game area" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tablet-game-area-1920x1200"&gt;
  &lt;/a&gt;
  Tablet game area (1920x1200):
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRSQ5Xwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5oewfys49cqwvq6qada.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRSQ5Xwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5oewfys49cqwvq6qada.png" alt="tablet game area" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how the elements of the game dont seem smaller on the tablet screen, and the distance between the benches from the edge of the screen is almost the same. Of course, some devices will inevadablely see slightly more or less of the map than others, because of slight differences in aspect ratio, but it's nothing to worry about.&lt;/p&gt;

&lt;p&gt;In short, if you use pixel units (the default units) with a fullscreen fit you'll probably see large changes in the sizing of the map between devices (which isn't a problem, if you dont care), but if you use "viewport" units, the sizing of your game will stay consistent. &lt;a href="https://codepen.io/ZippCodder/pen/yLoRGab"&gt;Here&lt;/a&gt; I show an example and explination of how to apply these percentage units if you're interested.&lt;/p&gt;

&lt;p&gt;On another note, if you're on a touch screen device and you're interested in checking out the unfinished multiplayer game where I took the screenshots from, you can check that out &lt;a href="https://zippcodder.github.io/runners/pages/index.html"&gt;here&lt;/a&gt;. You can also dig through the &lt;a href="https://github.com/ZippCodder/runners/blob/master/src/index.ts"&gt;code&lt;/a&gt; if you'd like to see how I apply some of the techniques I talk about here.&lt;/p&gt;

&lt;p&gt;But with all that out of the way, lets finally start building our game, shall we? 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-rendering-pipeline"&gt;
  &lt;/a&gt;
  Creating a Rendering Pipeline &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before creating any characters, objects or backgrounds, we first need to define an order and structure through which each of these entities will be rendered and managed. Since we're building our game from scratch and HTML Canvas provides no kind of framework, we'll have to define ourselves a structure. I call this my &lt;strong&gt;rendering pipeline&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Generally it'll look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// get canvas 2D context object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// object for storing globally accessable states&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GLOBALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="c1"&gt;// Array where all props will be stored&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PROPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// Array where all characters will be stored&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CHARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// function for applying any initial settings&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// function for rendering background elements&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderBackground&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// function for rendering prop objects in PROPS&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// function for rendering character objects in CHARS&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderCharacters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// function for rendering onscreen controls &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderControls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// main function to be run for rendering frames&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startFrames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// erase entire canvas&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// render each type of entity in order, relative to layers&lt;/span&gt;
&lt;span class="nx"&gt;renderBackground&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderProps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderCharacters&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderControls&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// rerun function (call next frame)&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startFrames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// initialize game settings&lt;/span&gt;
&lt;span class="nx"&gt;startFrames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// start running frames&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This provides us with an orderly process we can use to draw all of the elements of our game. The process goes as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We create a container for any states that we want to be accessable globally. For example, if we wanted to create a "pet" that follows our character around, we could store the character's coordinates in our global container, for the pet object to access and use as a relative point to follow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two arrays are defined, one which will store all objects for props (objects that move or can be interacted with by the user), and another that will store all objects for characters (objects controlled by the user). Objects for props and characters will be created using classes, as we'll see later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An initialization function is defined, which will set any initial states, like setting the canvas's dimensions, colors, fonts, etc. This is typically where you'd put the logic for your initial canvas sizing, like discussed in the previous section, or perhaps register an event listener for adjusting the game area on resize (depending on your prefered sizing method).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A function for rendering the backdrop is defined. Here we can either render an image, or separate background elements (more on that later).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a function which will render each prop in the &lt;code&gt;PROPS&lt;/code&gt; array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a function which will render each character in the &lt;code&gt;CHARS&lt;/code&gt; array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a function which will render onscreen controls (for mobile devices) line buttons and joysticks, as well as any other displays like showing the number of lives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The main function is created. This function when called will begin running frames. It starts by erasing the canvas using &lt;code&gt;clearRect()&lt;/code&gt;, then calls the render function for each type of entity. If somthing is drawn onto the canvas, and then we draw somthing directly ontop of it, the first rendering will be covered, meaning we'll have to think in layers. Thus, the render function for each type of entity is called in a logical order (background-&amp;gt; objects-&amp;gt; characters-&amp;gt; controls), with the background being on the bottom layer, and the onscreen controls being on the top. The last thing this function dose is run a special method &lt;code&gt;requestAnimationFrame&lt;/code&gt;. This method takes in a function, which it will run as soon as the browser is ready to render new content, so we pass it &lt;code&gt;startFrames&lt;/code&gt;. We call it in a loop, so that our frames run indefinitly (note that &lt;code&gt;requestAnimationFrame&lt;/code&gt; isn't blocking, like if you were to run a &lt;code&gt;for&lt;/code&gt; loop indefinitely, making the page unresponsive).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We call &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;startFrames&lt;/code&gt;, to initialize our game, and begin running frames.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, you can personalize this process however you please if you're actively following along, as this is just my personal process and none of this is set in stone (though I'd recommed still using &lt;code&gt;requestAnimationFrame&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;The purpose of this section was to explain that you should have some kind of structure for rendering your game, and managing states, animations and user interactions. This is the most important part, as it'll prevent our game from becoming a confusing, clunky mess in the long run.&lt;/p&gt;

&lt;p&gt;Hopefully by now the fundamentals have more or less stuck, but now that the scafolding for our game is all set up, we can finally start filling our rendering pipeline with actual backgrounds, objects and characters (etc) to render!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-sprites"&gt;
  &lt;/a&gt;
  Building Sprites &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;"sprite"&lt;/strong&gt; refers to any rendered object or character that can be moved around, interected with, or hold some type of state or animation. Some can be represented as objects, and others with functions, both of which should typically be stored in a separate file, to keep the file where your rendering pipeline lives clean. Usually I split these into three categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Background Sprites&lt;/li&gt;
&lt;li&gt;Object Sprites&lt;/li&gt;
&lt;li&gt;Character Sprites&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As implied, they function as a tangible rendered elements of the game, each of which serves a different purpose. Below, I explain exactly the application of these, and how to create each of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background-sprites"&gt;
  &lt;/a&gt;
  Background Sprites &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When creating a background for your game (as we'll dive deeper into later) there are generally two options. The background can be rendered as a single pre-created image, or, it can be rendered as a collection of &lt;strong&gt;"background sprites"&lt;/strong&gt;. This can be multiple renderings, or a collection of multiple images. &lt;/p&gt;

&lt;p&gt;Because background elements cant be interected with and hold no state, usually these are created as functions which do nothing but render the sprite, rather than objects with render methods and properties as used in character and object sprites (more on that later). These functions will take in an &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinate as parameters (optionally any other parameters regarding display as well), and will simply be called inside the &lt;code&gt;renderBackground()&lt;/code&gt; function of our rendering pipeline.&lt;/p&gt;

&lt;p&gt;Heres an example of a simple flower pot sprite ive created:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/bGryQeE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here I draw each flower from scratch using rendering methods. If you do this its important that you draw each peice of the sprite relative to the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; parameters that are passed into the function. I wouldn't recommend doing this however, as its tedious and using a prepared image generally will look alot better. I'm just using rendering methods to examplify their use.&lt;/p&gt;

&lt;p&gt;Again, you can just as easily skip all of the building of the flower yourself, and simply use the &lt;code&gt;drawImage(x,y)&lt;/code&gt; method to draw a pre-build image or PNG (one that hopefully looks better than my flowers) onto the canvas for a single background sprite, or even skip everything all together and render a single image for the entire background in the &lt;code&gt;renderBackground()&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object-sprites"&gt;
  &lt;/a&gt;
  Object Sprites &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Object sprites are like background sprites, except they usually hold some kind of state (for user interactions), movement or have an animation, and may have access to certain global states in &lt;code&gt;GLOBALS&lt;/code&gt;, like a ceiling fan, or a door that opens and closes when the user touches it. Usually these are made with classes and objects, which are stored in the &lt;code&gt;PROPS&lt;/code&gt; array, which is later iterated through to render each object in it, inside the &lt;code&gt;renderProps()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Classes for object sprites will always carry a &lt;code&gt;render()&lt;/code&gt; method containing the commands to render the sprite, which will be accessed and called in &lt;code&gt;renderProps&lt;/code&gt;. Of course you dont have to call it that, but you should have some kind of standard method for rendering each prop. Inside the &lt;code&gt;render()&lt;/code&gt; method, state can be used to influence how the sprite is displayed. Similar to background sprites, these can also accept an &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; parameter, and any other additional parameters regarding interaction or display. Below I create animated spikes as an example of a simple object sprite:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/eYEabvX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The movement works because we're constantly changing the coordinates (our state) where the rendering is drawn, and because frames are running indefinitely, any changes we apply to the rendering will be immediately reflected since the sprite is being redrawn with new state repeatedly, which means it's up to us to control timing in animations. Again, my spikes are fairly ugly, and I'm just using render methods to demonstrate their use and prove the concept. You can make your sprites as pretty as you'd like.&lt;/p&gt;

&lt;p&gt;This is a good example of the types of elements you should render as object sprites, such as obstacles or things a character can interact with or be affected by. As shown, typically you should make these as a class in which you'll specify its default functionality and give it a &lt;code&gt;render&lt;/code&gt; method, then simply envoke it whenever you need to place a new object sprite of the same type, keeping our code nice and DRY.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#character-sprites"&gt;
  &lt;/a&gt;
  Character Sprites &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Character sprites function essencially the same as object sprites, accept they usually have state thats controlled by outside factors like keyboard controls or a joystick, and are rendered on a higher layer than objects. Character sprites are created as objects from a standard class which have state and a &lt;code&gt;render&lt;/code&gt; method, and are added to the &lt;code&gt;CHARS&lt;/code&gt; array which will be iterated through in &lt;code&gt;renderCharacters()&lt;/code&gt; to call the render method of each existing character. This can include the player's character as well as other players, like in an online game. &lt;/p&gt;

&lt;p&gt;Though they're similar, it's best to keep them separated, because usually you'll want your characters to be rendered on a higher layer than the objects and background.&lt;/p&gt;

&lt;p&gt;In the next section I'll show how you can implement controls with a character sprite, and explain how to create different types of movements in your game like having the character look towards the mouse, making joysticks and using keyboard controls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#movement-and-controls"&gt;
  &lt;/a&gt;
  Movement and Controls &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this section I'll explain and demonstrate how to implement common controls and character movements that you'll typically apply in a 2D game, many of the methods I use to implement which can be used to create other types of controls and movements. Below I explain each one by one, and provide code and an example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementing-joysticks"&gt;
  &lt;/a&gt;
  Implementing Joysticks &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Joysticks are a common type of control used for mobile games and typically have two applications in regards to character actions: 1) &lt;strong&gt;Controlling a character's angle&lt;/strong&gt; 2) &lt;strong&gt;Controlling a character's movement direction&lt;/strong&gt;. Apart from display, a joystick's primary purpose is to keep track of each of these, so that we can apply them to whatever entity(s) it's controling. Typically it'll keep it's angle and &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; direction in &lt;code&gt;GLOBALS&lt;/code&gt; so that they're accessible to every sprite that needs it.&lt;/p&gt;

&lt;p&gt;These properties will allow us to specify certain directions in which sprites will travel on the game area, and the angle at which they're facing. Usually these are applied as character controls, and &lt;em&gt;dual-joysticks&lt;/em&gt; are used, &lt;strong&gt;one for the character's angle and one for the character's direction&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Below I show an example and full explination on how to create a joystick. I've made this example so that you can interact using a mouse or a touchscreen device. Try not to resize to much, as it could break the example:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/NWvQMmy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see iv'e created a class for creating joysticks just like I would've made an object sprite, then &lt;strong&gt;instanciate and render it inside &lt;code&gt;renderControls()&lt;/code&gt;&lt;/strong&gt;. They technically aren't sprites however, because the joystick isn't an element of the game itself. I've rendered it simply as two circles, one serving as the &lt;strong&gt;thumbstick&lt;/strong&gt; and one as the &lt;strong&gt;base&lt;/strong&gt; (again, you can make these peices look however you want).&lt;/p&gt;

&lt;p&gt;Within it's &lt;code&gt;render&lt;/code&gt; method I added logic to draw the thumbstick towards the user's finger, while keeping it inside of the base (the &lt;code&gt;distance()&lt;/code&gt; helper function, which measures the distance between two points, aids in this). Using one of the helper functions I've added to &lt;code&gt;GLOBALS&lt;/code&gt; (&lt;code&gt;angle()&lt;/code&gt;), the center coordinates of the base and the center coordinates of the thumbstick, Im also able to determine the angle between the two coordinates, and the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; offset the thumbstick is from the base (the formula for which will be covered later), which is the information shown above the joystick. &lt;strong&gt;The formula used by &lt;code&gt;angle()&lt;/code&gt; and &lt;code&gt;distance()&lt;/code&gt; can be found commented in the above pen.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The formula I've used to calculate the angle will output radians, because that's the unit used by the &lt;code&gt;rotate()&lt;/code&gt; method of the canvas's context. This will be used later to rotate our character.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This information can be kept in &lt;code&gt;GLOBALS&lt;/code&gt; to later be accessed by our main character sprite, to control it's movements. Another important note to mention is how im giving the joystick class access to the mouse actions through &lt;code&gt;GLOBALS&lt;/code&gt;, and then implementing it's logic within it's own class instead of inside the event listeners for mouse/touch events. This keeps things much more orderly, rather than cramming the logic of each sprite who needs mouse events inside the same event listeners. This is why inside &lt;code&gt;init()&lt;/code&gt; I've registered mouse/touch event listeners which when fired just add that information to &lt;code&gt;GLOBALS&lt;/code&gt; to be globally accessible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#joystick-movement"&gt;
  &lt;/a&gt;
  Joystick Movement &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Below is an example of integrating a joystick with a character sprite to allow movement. Our character sprite is the red circle in the top left corner. Simply use the joystick to move it across the screen with your finger or mouse. Again, try not to resize the window:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/ExwYpVg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here our character sprite is accessing the &lt;code&gt;charX&lt;/code&gt; and &lt;code&gt;charY&lt;/code&gt; properties on &lt;code&gt;GLOBALS&lt;/code&gt;, which are being continuously updated by and based on our joystick's state. Again, this is better than directly updating our character sprite's coordinates inside of the joystick's class, because if we we're to add more sprites for the joystick to control, we would have to cram a ton of code inside it. Instead, any sprite can simply access the information via &lt;code&gt;GLOBALS&lt;/code&gt; and keep its implementation within it's own class.&lt;/p&gt;

&lt;p&gt;The way this movement works is a bit different than implementing keyboard controls, because our character sprite is moving in very smooth angles rather than simply &lt;em&gt;up&lt;/em&gt; or &lt;em&gt;left&lt;/em&gt;. &lt;strong&gt;Here's how it works&lt;/strong&gt;: First we declare &lt;code&gt;charX&lt;/code&gt; and &lt;code&gt;charY&lt;/code&gt; onto &lt;code&gt;GLOBALS&lt;/code&gt;, which serve as the &lt;em&gt;horizontal&lt;/em&gt; and &lt;em&gt;vertical&lt;/em&gt; amount of units a character will move over time. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The way the joystick determines both of these values is by mesuring the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; offset of the thumbstick of the joystick from the center of it's base. These are determined by subtracting the base's &lt;code&gt;x&lt;/code&gt; coordinate from the thumbstick's &lt;code&gt;x&lt;/code&gt; coordinate to get &lt;code&gt;charX&lt;/code&gt;, and then subtracting the base's &lt;code&gt;y&lt;/code&gt; coordinate from the thumbstick's &lt;code&gt;y&lt;/code&gt; coordinate to get &lt;code&gt;charY&lt;/code&gt;. You might want to only use a fraction of the result of both of these calculations, like a &lt;strong&gt;10%&lt;/strong&gt;, because if the result of calculating &lt;code&gt;charX&lt;/code&gt; for exmaple is -56.09, your character will be moving alot of units to the left very quickly. You can fraction each of these however (as long as you fraction both the same). It's all about the ratio between the amount of units our character sprite is moving in one direction vs the other overtime, to apply movement at dynamic angles.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If a user had the joystick positioned at the bottom right (as far as it could go in each direction), this would mean our character would move diagonally downwards to the right. Why? Because since &lt;code&gt;charX&lt;/code&gt; and &lt;code&gt;charY&lt;/code&gt; are the same value (&lt;strong&gt;because the width and height of the joystick are equal and thus if the thumbstick is at the bottom right it has equal &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; offset&lt;/strong&gt;) &lt;code&gt;charX&lt;/code&gt; and &lt;code&gt;charY&lt;/code&gt; would be set the same, and the character would move &lt;em&gt;down&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; at the same rate, causing our character to move &lt;strong&gt;diagonally downwards towards the right&lt;/strong&gt;. Hopefully that made sense, but lucky for you implementing keyboard controls is 10x simpler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-controls"&gt;
  &lt;/a&gt;
  Keyboard Controls &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Unlike joystick controls keyboard movements are much simpler to implement. It's as simple as registering a &lt;code&gt;keydown&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt; event inside &lt;code&gt;init()&lt;/code&gt;, and then keeping track of weather or not the &lt;strong&gt;keycodes&lt;/strong&gt; you're listening for are pressed down or released. That information is kept inside &lt;code&gt;GLOBALS&lt;/code&gt;, where our character sprite has easy access, and depending on weather a key is currently being pressed, the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates of the character sprite will be incremented or decremented by a certain amount (the character sprite's &lt;code&gt;speed&lt;/code&gt; property).&lt;/p&gt;

&lt;p&gt;Below is an example of a character sprite (the red circle) which you can control using the arrow keys:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/VwMwvjM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Simple right? As it's name implies, the &lt;code&gt;speed&lt;/code&gt; property of the character sprite controls how many units our character will move when it dose, allowing us to control how much ground it covers in each movement. The same can be done with joystick controls by either multiplying &lt;code&gt;charX&lt;/code&gt; and &lt;code&gt;charY&lt;/code&gt; to go faster, or dividing them to go slower (&lt;strong&gt;as long as they're multiplied or divided by the same factor&lt;/strong&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#character-rotation"&gt;
  &lt;/a&gt;
  Character Rotation &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In the below example I've made a small rocketship character sprite using the &lt;code&gt;drawImage()&lt;/code&gt; method. Not only dose it &lt;em&gt;move&lt;/em&gt; in the direction of the joystick, but also mimics the &lt;em&gt;angle&lt;/em&gt; of the joystick. The joystick's angle is kept in &lt;code&gt;GLOBALS.roation&lt;/code&gt;, which our character sprite has easy access to for it to rotate that amount.&lt;/p&gt;

&lt;p&gt;Below is an example and explination of how to apply rotation to a character sprite:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/jOGOBxB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The key part here is the &lt;code&gt;angle()&lt;/code&gt; method on &lt;code&gt;GLOBALS&lt;/code&gt;, which takes in two sets of coordinates and returns the angle between them (in &lt;strong&gt;radians&lt;/strong&gt;). &lt;strong&gt;The formula for which is &lt;code&gt;atan2(y2 - y1, x2 - x1)&lt;/code&gt;&lt;/strong&gt;. We use &lt;code&gt;angle()&lt;/code&gt; to measure the angle between the center of the joystick's thumbstick, and the center of the joystick's base, and then put the result into &lt;code&gt;GLOBALS.rotation&lt;/code&gt;. This formula (and every other I cover in this post) has a ton of applications when building a game, and you can use it to control rotation with the mouse as well, by mesuring the angle between the mouse coordinates and the center of the screen.&lt;/p&gt;

&lt;p&gt;The second primary part which allows this to work is the &lt;code&gt;rotate()&lt;/code&gt; method of the canvas's context, which is what's used to apply the rotation to the character sprite. &lt;strong&gt;The way this method works is by rotating the canvas from its top left corner by the specified amount of radians&lt;/strong&gt;. The rotation only applies to everything drawn &lt;strong&gt;after&lt;/strong&gt; the method is called. Of course this works alot differently than you would expect, but we can normalize it by doing the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We want to rotate the canvas by the center of the thing we want to rotate (our character sprite) rather then the top left corner. The way to do this is by using the &lt;code&gt;translate(x,y)&lt;/code&gt; method to move the canvas's top left corner to the center coordinates of the thing we want to rotate, rotate our desired amount using &lt;code&gt;rotate(radians)&lt;/code&gt;, undo the translation (&lt;code&gt;translate(-x,-y)&lt;/code&gt;), redraw our sprite with the applied canvas rotation, and then call the &lt;code&gt;resetTransform()&lt;/code&gt; method to &lt;strong&gt;reset the canvas transformations we just did, so that everything drawn after the thing we wanted to rotate dosen't become part of the rotation or translation&lt;/strong&gt;. This process can be seen in the render method of our character sprite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can read more on the &lt;code&gt;rotate()&lt;/code&gt; and &lt;code&gt;translate()&lt;/code&gt; methods &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-vs-dynamic-movement"&gt;
  &lt;/a&gt;
  Static vs Dynamic Movement &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In 2D games typically there exists two major types of character movement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Static Movement&lt;/strong&gt;: This is when the map is fixed on the game area, and the character moves relative to the map. Like in &lt;a href="https://tanktrouble.com/"&gt;Tank Trouble&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dynamic Movement&lt;/strong&gt;: This is when the character is fixed to the center of the screen, and the &lt;em&gt;map&lt;/em&gt; moves relative to the &lt;em&gt;character&lt;/em&gt;. Like in &lt;a href="http://narwhale.io/"&gt;Narwhale.io&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far the type of movement I've examplified has all been &lt;strong&gt;static movement&lt;/strong&gt;, but in this section I'll give an example and explination on how to apply &lt;strong&gt;dynamic movement&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/oNGXZMy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See how the "camera" follows our character as the map moves relative to it. The way we do this is by applying the joystick's &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; offset to coordinates which will serve as a &lt;strong&gt;map anchor&lt;/strong&gt;, which our background sprites will be drawn relative to (and of course remove the &lt;code&gt;charX&lt;/code&gt; and &lt;code&gt;charY&lt;/code&gt; implementation from our main character sprite).&lt;/p&gt;

&lt;p&gt;First what I do is store the joystick's &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; offset in &lt;code&gt;GLOBALS.anchorX&lt;/code&gt;and &lt;code&gt;GLOBALS.anchorY&lt;/code&gt;, and then declare &lt;code&gt;GLOBALS.mapAnchor&lt;/code&gt; to store the "map anchor" coordinates. Inside &lt;code&gt;renderBackground()&lt;/code&gt; before rendering each sprite, I update &lt;code&gt;GLOBALS.mapAnchor.x&lt;/code&gt; and &lt;code&gt;GLOBALS.mapAnchor.y&lt;/code&gt; by &lt;em&gt;subtracting&lt;/em&gt; &lt;code&gt;GLOBALS.anchorX&lt;/code&gt; from &lt;code&gt;GLOBALS.mapAnchor.x&lt;/code&gt;, and &lt;em&gt;subtracting&lt;/em&gt; &lt;code&gt;GLOBALS.anchorY&lt;/code&gt; from &lt;code&gt;GLOBALS.mapAnchor.y&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here we subtract instead of add like we did in static movement, because the map has to flow the opposite direction from where the character is moving towards.&lt;/strong&gt; Then finally, inside our &lt;code&gt;Pot()&lt;/code&gt; sprite, I add &lt;code&gt;GLOBALS.mapAnchor.x&lt;/code&gt; and &lt;code&gt;GLOBALS.mapAnchor.y&lt;/code&gt; to it's &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinate, to draw the sprite relative to the current map anchor coordinates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collision-detection"&gt;
  &lt;/a&gt;
  Collision Detection &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Collision detection is typically an essencial when it comes to games, weather it's stopping a character from walking through a wall, or killing a character when a bullet hits them.&lt;/p&gt;

&lt;p&gt;In this section I'll touch base on basic collision detection, and explain how to detect collision between &lt;strong&gt;squares&lt;/strong&gt;, &lt;strong&gt;circles&lt;/strong&gt; and &lt;strong&gt;rectangles&lt;/strong&gt; as well as give examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#squares-and-rectangles"&gt;
  &lt;/a&gt;
  Squares and Rectangles &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Collision detection is all about &lt;strong&gt;using the dimensions and coordinates of two shapes, to mathematically determine weather or not both are in contact&lt;/strong&gt;. Depending on the shapes themselves (square, circle, etc.), the way you'll determine this will vary.&lt;/p&gt;

&lt;p&gt;Below I give an example and explination on how to apply collision detection with squares (same exact method can be used with rectangles of any size). Simply drag the pink square into the blue square, and the blue square will turn red when the pink square comes into contact in the following example:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/poWJprJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;The first thing I did was implement some logic for dragging the pink square. That isn't as relevant but if your interested in how I implemented it just take a look at the code. Next, onto the base class for our squares (which is the one the &lt;em&gt;blue&lt;/em&gt; square instanciates) I attach an object inside the constructor called &lt;code&gt;collisions&lt;/code&gt;. On this object, we'll keep a sub object for every sprite we want to detect collision for, thus, I add &lt;code&gt;pinkSquare&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;pinksquare&lt;/code&gt; (and every other collision object in &lt;code&gt;collisions&lt;/code&gt;) there exists a &lt;code&gt;conditions&lt;/code&gt; property which holds &lt;strong&gt;the boolean for mathematically determining contact with the pink square&lt;/strong&gt; (which we're about to dig into), and then an &lt;code&gt;inContact&lt;/code&gt; property which specifies weather not the sprite is in contact, though here we aren't using this property. This is a good standard to use when implementing collision detection, since its simple and keeps things orderly. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;collisions.pinkSquare.conditions&lt;/code&gt; is a &lt;em&gt;string&lt;/em&gt; rather than a boolean, so that we can revaluate it constantly with &lt;code&gt;eval()&lt;/code&gt;, and we dont have to hard code it into &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the pseudo-code for determining collision between two rectangles/squares, exactly the same structures as the boolean in &lt;code&gt;collisions.pinkSquare.conditions&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A = {x: ... y: ..., width: ..., height: ...}
B = {x: ..., y: ..., width: ..., height: ...}

if (A.x + A.width) &amp;gt; B.x 
 and A.x &amp;lt; (B.x + B.width)
 and (A.y + A.height) &amp;gt; B.y
 and A.y &amp;lt; (B.y + B.height) 
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try visualizing this boolean in action as you read through it, and eventually you'll get the gist.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#circles"&gt;
  &lt;/a&gt;
  Circles &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Determining contact between two circles (&lt;em&gt;not&lt;/em&gt; ovals, we'll get to that) is very straight forward and simple to understand. Because Im lazy, just imagine the shapes in the above example I showed are now two circles. The pseudo code for &lt;code&gt;collisions.pinkCircle.conditions&lt;/code&gt; would be the following, to determine weather the two circles are in contact:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A = {x: ..., y: ..., radius: ...}
B = {x: ..., y: ..., radius: ...}

if
 distance between A and B &amp;lt; (A.radius + B.radius) 

...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, "distance between A and B" refers to the distance between the two points where each circle is centered. If you remember, you determine this with the handy-dandy formula: &lt;code&gt;√(x2 − x1)^2 + (y2 − y1)^2&lt;/code&gt;. Simple right? &lt;/p&gt;

&lt;p&gt;These two examples are pretty simple, but collision detection with more complex and irregular shapes can require much more advanced methods of determining collisions. Of course here I've only gone over the basics, but if you do plan on implementing collision detection for complex shapes, I highly recommend you check out these resources: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gamedeveloper.com/programming/advanced-collision-detection-techniques"&gt;https://www.gamedeveloper.com/programming/advanced-collision-detection-techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/game/video-game-physics-part-ii-collision-detection-for-solid-objects"&gt;https://www.toptal.com/game/video-game-physics-part-ii-collision-detection-for-solid-objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Keeping track of certain events, such as when a door is opened or when the character is hit in a game is important. This allows us to globally listen for (and trigger) when certain things happen our game no matter what sprite we're in.&lt;/p&gt;

&lt;p&gt;Below I've edited the previous example to use events to run two &lt;code&gt;alert()&lt;/code&gt;s every time the squares are in contact:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/mdBVLqp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Basically the way I've implemented events is exactly how DOM events are implemented, by adding an &lt;code&gt;addEventListener()&lt;/code&gt; and &lt;code&gt;dispatchEvent()&lt;/code&gt; method to &lt;code&gt;GLOBALS&lt;/code&gt;. That way both methods are globally accessible.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GLOBALS&lt;/code&gt; also includes an &lt;code&gt;events&lt;/code&gt; property, and each of its sub properties are the name of an existing event which points to an array where callbacks for that event will be stored. I simply call &lt;code&gt;GLOBALS.addEventListener(name,callback)&lt;/code&gt; to add a callback to the array for the specified event, and then call &lt;code&gt;dispatchEvent(name)&lt;/code&gt; to call each callback inside the array of the specified event name. And of course we can all new events by adding a new property to &lt;code&gt;GLOBALS.events&lt;/code&gt;. Easy-peasy! 🍋&lt;/p&gt;

&lt;p&gt;Despite how simple it is, I just wanted to clarify that its important that you implement some kind of event system within your game, otherwise you'll be hardcoding alot of stuff, which isn't good practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it All Together &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Finally let me go down the list of each integral concept that makes this process possible. If any of what I explained previously seemed unclear, I recommend you try to examine where and how each concept is implemented within the code to gain a better understanding of how this all functions. Let us first again go down the list of each of the steps of the process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose a sizing for the game area (apply it in &lt;code&gt;init()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create your rendering pipeline&lt;/li&gt;
&lt;li&gt;Fill your rendering pipeline with sprites (in their respective locations depending on the sprite)&lt;/li&gt;
&lt;li&gt;Apply movement and controls&lt;/li&gt;
&lt;li&gt;Apply collision detection&lt;/li&gt;
&lt;li&gt;Integrate events&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of these concepts can be seen applied in this simple game I've created, named "Drift". The objective is to last as long as possible without being hit by a barrier or leaving the map, steering a car by tapping the left or right half of the game area or using arrow keys. I found it about as frustrating as playing Flappy Bird, my highest score being 33. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/PoJNzQz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This game greatly examlifies the process and methods I've explained throughout, and hopefully with this guide and example to throw it all together, you'll be equiped with the knowledge to build your own games using HTML Canvas, and the techniques I've gone over in this post. &lt;/p&gt;

&lt;p&gt;I hope you've managed to gain somthing from this article, and if you're still thirsty for more related to game development, definitely checkout the resources below.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy coding! 👍&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML Canvas API - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Advanced Collision Detection - &lt;a href="https://www.gamedeveloper.com/programming/advanced-collision-detection-techniques"&gt;https://www.gamedeveloper.com/programming/advanced-collision-detection-techniques&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2015/march/game-development-a-web-game-in-an-hour"&gt;https://docs.microsoft.com/en-us/archive/msdn-magazine/2015/march/game-development-a-web-game-in-an-hour&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>I did this logo</title>
      <author>Christopher</author>
      <pubDate>Thu, 09 Dec 2021 03:47:23 +0000</pubDate>
      <link>https://dev.to/pinkalex2004/i-did-this-logo-236o</link>
      <guid>https://dev.to/pinkalex2004/i-did-this-logo-236o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u8Ob7oa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x87zb9cj8axnkxl3a68c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8Ob7oa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x87zb9cj8axnkxl3a68c.png" alt="Image description" width="535" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
    </item>
    <item>
      <title>Check Changed Files Helper ✔️  | GitHub Actions </title>
      <author>Fum</author>
      <pubDate>Thu, 09 Dec 2021 03:11:06 +0000</pubDate>
      <link>https://dev.to/funbeedev/check-changed-files-helper-github-actions-4dao</link>
      <guid>https://dev.to/funbeedev/check-changed-files-helper-github-actions-4dao</guid>
      <description>&lt;p&gt;&lt;strong&gt;Need a way to automate checks on files pushed to your repository?&lt;/strong&gt; This handy action provides a starting template for open source maintainers to get creative and perform customised checks on individual or multiple files changed on the repository. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;Refer to repository README for full details.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/funbeedev"&gt;
        funbeedev
      &lt;/a&gt; / &lt;a href="https://github.com/funbeedev/CheckChangedFilesHelper"&gt;
        CheckChangedFilesHelper
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GitHub Action to detect all changed files pushed to repo and perform a check. Copy and configure to your needs.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Check Changed Files Helper ✔️
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3828c310205efd11c144e38b43c0a81933341f56c13b2ff7c527170d0e8462f0/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f70726163746963616c6465762f696d6167652f66657463682f732d2d4e4e5a6a6d3275632d2d2f635f696d616767615f7363616c652c665f6175746f2c666c5f70726f67726573736976652c685f3432302c715f6175746f2c775f313030302f68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f713534383379357361647967336e7166336775382e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/3828c310205efd11c144e38b43c0a81933341f56c13b2ff7c527170d0e8462f0/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f70726163746963616c6465762f696d6167652f66657463682f732d2d4e4e5a6a6d3275632d2d2f635f696d616767615f7363616c652c665f6175746f2c666c5f70726f67726573736976652c685f3432302c715f6175746f2c775f313030302f68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f713534383379357361647967336e7166336775382e706e67" alt="Check Changed Files Helper"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
📜 About 📜
&lt;/h2&gt;
&lt;p&gt;Submitted for the GitHub Actions Hackathon on DEV. &lt;a href="https://dev.to/funbeedev/check-changed-files-helper-github-actions-4dao" rel="nofollow"&gt;View the DEV post submission&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; are a feature provided by GitHub as a way to automate workflows useful for managing repositories.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Check Changed Files Helper&lt;/code&gt; is a GitHub Action workflow that performs a check on changes made to source files pushed to a repository. Customise this workflow to suit your own repository needs.&lt;/p&gt;
&lt;p&gt;This repo shows an example of how GitHub Action workflows can be used to automate checks on files changed in the repo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This project relies on the &lt;a href="https://github.com/marketplace/actions/get-changed-files"&gt;&lt;code&gt;Get Changed Files&lt;/code&gt;&lt;/a&gt; Action available on the GitHub marketplace&lt;/strong&gt;.&lt;br&gt;
This Action provides all added, renamed and modified files as a JSON file within the runner filesystem. When a file or multiple files are changed on the repo, it will identify and list each in the JSON file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Check Changed Files&lt;/code&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/funbeedev/CheckChangedFilesHelper"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;This project relies on the &lt;a href="https://github.com/marketplace/actions/get-changed-files"&gt;&lt;code&gt;Get Changed Files&lt;/code&gt;&lt;/a&gt; Action available on the GitHub marketplace&lt;/strong&gt;.&lt;br&gt;
This Action provides all added, renamed and modified files as a JSON file within the runner filesystem. When a file or multiple files are changed on the repo, it will identify and list each in the JSON file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Check Changed Files Helper&lt;/code&gt; provides a means to add powerful checks for files changed on a repo by providing a bash script called by the Workflow. This script scans each changed file and performs a desired check according to the file extension type. In the examples provided in the repo, the checks are to ensure the following file types are executable: &lt;code&gt;.c .py .js .sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The power of bash provides numerous possibilities on how to perform checks. A handy way to automate checks of files submitted to your repository!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-code-to-run-workflow"&gt;
  &lt;/a&gt;
  Yaml File - Code to run Workflow
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What you need to use this Workflow&lt;/strong&gt;&lt;br&gt;
The files needed to run this workflow are placed under the repo path &lt;a href="https://github.com/funbeedev/CheckChangedFilesHelper/tree/main/.github/workflows"&gt;&lt;code&gt;.github/workflows&lt;/code&gt;&lt;/a&gt;. Fork this repo or copy these files to start customising for your own use.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auto-check-changed-files.yml&lt;/code&gt;: YAML file containing the GitHub Actions workflow. This will setup any necessary dependencies and use the &lt;a href="https://github.com/marketplace/actions/get-changed-files"&gt;&lt;code&gt;Get Changed Files&lt;/code&gt;&lt;/a&gt; Action to generate a JSON containing all files changed on the repository with every push to the &lt;code&gt;main&lt;/code&gt; branch. Following this, the &lt;code&gt;auto-check-changed-files.sh&lt;/code&gt; bash script is executed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auto-check-changed-files.sh&lt;/code&gt;: Bash script containing custom check instructions. It scans through each changed file pushed to the repository and performs a basic execution check on each file. Edit this script to extend the recognised file types and checks to be performed.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sample workflow checks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All checks successful:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Run echo "job: running script to check changed files:"
job: running script to check changed files:
run-sh: Inside auto-check-changed-files.sh
Content of files.json: [
    "hello-world.c",
    "hello-world.js",
    "hello-world.py",
    "hello-world.sh"
]
number of files to check = 4
checking file: hello-world.c
This is a .c file, executing
Hi from hello-world.c!
checking file: hello-world.js
This is a .js file, executing
Hi from hello-world.js!
checking file: hello-world.py
This is a .py file, executing
Hi from hello-world.py!
checking file: hello-world.sh
This is a .sh file, executing
Hi from hello-world.sh!
job: Done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some failed checks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Run echo "job: running script to check changed files:"
job: running script to check changed files:
run-sh: Inside auto-check-changed-files.sh
Content of files.json: [
    "hello-world.c",
    "hello-world.js"
]
number of files to check = 2
checking file: hello-world.c
This is a .c file, executing
hello-world.c: In function ‘main’:
hello-world.c:14:39: error: expected ‘;’ before ‘}’ token
   14 |     printf("Hi from hello-world.c!\n")
      |                                       ^
      |                                       ;
   15 | }
      | ~                                      
checking file: hello-world.js
This is a .js file, executing
/home/runner/work/CheckChangedFilesHelper/CheckChangedFilesHelper/hello-world.js:8
console.logg("Hi from hello-world.js!");
        ^

TypeError: console.logg is not a function
    at Object.&amp;lt;anonymous&amp;gt; (/home/runner/work/CheckChangedFilesHelper/CheckChangedFilesHelper/hello-world.js:8:9)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47
Error: Process completed with exit code 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Questions, suggestions and comments are welcome!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>opensource</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>#1 GIT Tutorial for Beginners</title>
      <author>Stack Developers for Laravel</author>
      <pubDate>Thu, 09 Dec 2021 02:05:29 +0000</pubDate>
      <link>https://dev.to/stackdevelopers/1-git-tutorial-for-beginners-135</link>
      <guid>https://dev.to/stackdevelopers/1-git-tutorial-for-beginners-135</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/baZTyYo3yXU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you are looking for the Git Tutorial then you are at the right place.&lt;/p&gt;

&lt;p&gt;Git and GitHub have commonly used terms these days and every developer must have complete knowledge of them. &lt;/p&gt;

&lt;p&gt;If you are a student and want to join some Web development company then Interviewer may surely ask you about Git.&lt;/p&gt;

&lt;p&gt;If you are a developer then your company or client may ask you to use Git to handle the projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Git?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git is a version-control system for tracking changes in computer files and coordinating work on those files among multiple people.” So that means that the most basic and important function of Git is to allow teams to add (and merge) code at the same time to the same project.&lt;/p&gt;

&lt;p&gt;Git is a free and open-source distributed version control system designed to handle small to very large projects with speed and efficiency. It maintains a history of all changes made to the code. The changes are stored in a special database called “repository”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git vs GitHub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git is a version control system that lets you manage and keep track of your source code history. &lt;br&gt;
GitHub is a cloud-based hosting service that lets you manage Git repositories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Git is Required?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before Git, many of us used to arrange folders like ecom1, ecom2, ecom 3 etc.&lt;br&gt;
After that, we have started date wise like ecom_1jan2021, ecom_5jan2021 etc.&lt;br&gt;
But it's really tough to manage and we are never able to track the changes but Git helps to overcome all this and we are able to track our all changes easily and can able to comment with every change pushed to Git.&lt;/p&gt;

&lt;p&gt;Also, there are other drawbacks in the traditional way to arrange files like if our project size is 1 GB and we keep copying the full project with every change done then we are short of space very soon.&lt;/p&gt;

&lt;p&gt;We require a version control system to overcome all these issues that's why Git comes into play.&lt;/p&gt;

&lt;p&gt;A version Control system, as the name suggests, is the system that controls the project versions means that help in saving every version of the project and we can keep track of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages/Benefits of Git:-&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Track changes in your code&lt;/li&gt;
&lt;li&gt;Easily recover files&lt;/li&gt;
&lt;li&gt;Undo Mistakes / Rollback changes to previously working state&lt;/li&gt;
&lt;li&gt;Save Time&lt;/li&gt;
&lt;li&gt;Track Who creates Issues &lt;/li&gt;
&lt;li&gt;Work Offline&lt;/li&gt;
&lt;li&gt;Free and Open Source&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Next video:- #2 GIT Tutorial for Beginners&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bL8ur_TgJdk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>githunt</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Using GitHub Actions to turn contributors into heroes of an open source game</title>
      <author>Paula Santamaría</author>
      <pubDate>Thu, 09 Dec 2021 01:05:34 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/using-github-actions-to-turn-contributors-into-heroes-of-an-open-source-game-4cei</link>
      <guid>https://dev.to/paulasantamaria/using-github-actions-to-turn-contributors-into-heroes-of-an-open-source-game-4cei</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;We already know open source contributors are the heroes of the tech industry. They make our lives easier with their libraries, frameworks, and more. I wanted to use this opportunity to make them into a more literal type of hero inside a game. &lt;/p&gt;

&lt;p&gt;So, here's how it works:&lt;/p&gt;

&lt;p&gt;My &lt;strong&gt;GitHub Actions&lt;/strong&gt; workflow &lt;em&gt;extracts information from the contributor's PR&lt;/em&gt; and uses it to dynamically generate a file that the game will use after being deployed. &lt;br&gt;
To obtain this information from the PR the workflow uses &lt;strong&gt;GitHub's API&lt;/strong&gt; through &lt;code&gt;octokit/request-action@v2.x&lt;/code&gt; and saves the relevant data using environment variables that are then used to generate a &lt;code&gt;Contributor.ts&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then the workflow builds the whole project, including the generated file, and deploys it to &lt;strong&gt;GitHub Pages&lt;/strong&gt;. So the latest deployment includes the latest PR and contributor information!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibS2WWoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/AsrJRKQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibS2WWoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/AsrJRKQ.png" alt="Screenshot showing how the info is used in the game's main menu. The avatar and username are presented as &amp;quot;the explorer&amp;quot;. The commit hash is the &amp;quot;experiment number&amp;quot; and the PR title is the &amp;quot;log entry&amp;quot;" width="440" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, the workflow also generates a copy of each contribution and stores it in an "archive" folder that can be accessed from the deployed website, so contributors can access their contributions live even after another merged PR overrode them.&lt;/p&gt;

&lt;p&gt;So, if you contributed, you can always access the deployment from your contribution in &lt;code&gt;https://pawap90.github.io/space-commit/archive/{your-username}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The game is called "Space commit". It's a simple, side-scroller, open-source game I developed especially for this submission. For the development I used Phaser with TypeScript, ESLint, and Snowpack. I decided to make our heroes astronauts because I thought it captured the essence of open source contributors: They are explorers and science lovers; They get themselves in unexplored territories and enjoy learning.&lt;/p&gt;

&lt;p&gt;Here's a quick demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcFQ4Sdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ke2Ht2o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcFQ4Sdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ke2Ht2o.gif" alt="A gif showing the game's main menu with the info from the latest PR and then the gameplay, which is an astronaut floating over a planet and dodging spikey things" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CICD&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

      &lt;span class="c1"&gt;# Retrieve contribution data from GitHub API&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;octokit/request-action@v2.x&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Retrieve contribution data&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get_contribution_data&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls&lt;/span&gt;
          &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pawap90&lt;/span&gt;
          &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;space-commit&lt;/span&gt;
          &lt;span class="na"&gt;commit_sha&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.sha }}&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;

      &lt;span class="c1"&gt;# Generate env variables to easily access the contribution data&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Store contribution data in env vars&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt; 
          &lt;span class="s"&gt;echo "username=${{ fromJson(steps.get_contribution_data.outputs.data)[0].user.login }}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;echo "avatar_url=${{ fromJson(steps.get_contribution_data.outputs.data)[0].user.avatar_url }}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;echo "commit_sha=${{ github.sha }}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;echo "message=${{ fromJson(steps.get_contribution_data.outputs.data)[0].title }}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;


      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Print collected data&lt;/span&gt; 
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt; 
          &lt;span class="s"&gt;echo "data collected &lt;/span&gt;
                &lt;span class="s"&gt;username ${{ env.username }}&lt;/span&gt;
                &lt;span class="s"&gt;avatar ${{ env.avatar_url }}&lt;/span&gt;
                &lt;span class="s"&gt;commit sha ${{ env.commit_sha }}&lt;/span&gt;
                &lt;span class="s"&gt;message ${{ env.message }}"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;
          &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate contributor file&lt;/span&gt; 
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "export const Contributor = {&lt;/span&gt;
              &lt;span class="s"&gt;username: '${{ env.username }}',&lt;/span&gt;
              &lt;span class="s"&gt;avatar_url: '${{ env.avatar_url }}',&lt;/span&gt;
              &lt;span class="s"&gt;commit: '${{ env.commit_sha }}',&lt;/span&gt;
              &lt;span class="s"&gt;message: '${{ env.message }}'&lt;/span&gt;
          &lt;span class="s"&gt;};" &amp;gt; src/Contributor.ts&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build project 🔧&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt; 
          &lt;span class="s"&gt;npm install&lt;/span&gt;
          &lt;span class="s"&gt;npm run build&lt;/span&gt;

      &lt;span class="c1"&gt;# Deploy latest contribution to GitHub pages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy 🚀&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@4.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt;
          &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;_build&lt;/span&gt;
          &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;clean-exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;archive&lt;/span&gt;

      &lt;span class="c1"&gt;# Store build permanently in archive folder so everyone can check previous contributions by username&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Send to archive 📁&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@4.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt; 
          &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;_build&lt;/span&gt;
          &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;clean-exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;archive&lt;/span&gt;
          &lt;span class="na"&gt;target-folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;archive/${{ env.username }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Here's the game repo where this workflow is used: &lt;a href="https://github.com/pawap90/space-commit"&gt;github.com/pawap90/space-commit&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And you can play the latest version here: &lt;a href="https://pawap90.github.io/space-commit"&gt;pawap90.github.io/space-commit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I built most of this game &lt;strong&gt;live on Twitch&lt;/strong&gt;. You can check it our here: &lt;a href="https://twitch.tv/paulasantamaria"&gt;twitch.tv/paulasantamaria&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>[GitHub Actions] Complete CI-CD Javascript Workflow</title>
      <author>Gérôme Grignon</author>
      <pubDate>Thu, 09 Dec 2021 00:59:51 +0000</pubDate>
      <link>https://dev.to/geromegrignon/github-actions-full-ci-cd-javascript-workflow-39om</link>
      <guid>https://dev.to/geromegrignon/github-actions-full-ci-cd-javascript-workflow-39om</guid>
      <description>&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;This workflow includes common &lt;strong&gt;continuous integration/deployment&lt;/strong&gt; tasks you can easily reuse for any web javascript project.&lt;/p&gt;

&lt;p&gt;It includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;collaboration comments&lt;/li&gt;
&lt;li&gt;quality tests&lt;/li&gt;
&lt;li&gt;deployment on &lt;strong&gt;Netlify&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;audit with &lt;strong&gt;Lighthouse&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works on push and pull request situations.&lt;/p&gt;




&lt;p&gt;To showcase this workflow, i chose the &lt;a href="https://github.com/gothinkster/dojo-realworld-example-app"&gt;Dojo RealWorld&lt;/a&gt; implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFMPIUgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey0bk932mqxvjz9s4kl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFMPIUgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey0bk932mqxvjz9s4kl3.png" alt="RealWorld Dojo banner" width="828" height="129"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/gothinkster/dojo-realworld-example-app/tree/main/.github/workflows"&gt;Repository workflows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcsx-DPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qsh60x2ahchzi8de1b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcsx-DPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qsh60x2ahchzi8de1b2.png" alt="Workflow" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#collaboration-first"&gt;
  &lt;/a&gt;
  Collaboration first!
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Alone we can do so little; together we can do so much.&lt;br&gt;
&lt;em&gt;Helen Keller&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDEgNFll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci4fj4rb2n3cbp7eefph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDEgNFll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci4fj4rb2n3cbp7eefph.png" alt="Communication workflow" width="282" height="144"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open source contributions are not just about code.&lt;br&gt;
&lt;strong&gt;That's all about people&lt;/strong&gt; collaborating to move a project forward.&lt;/p&gt;

&lt;p&gt;If the contributor is making their first pull request to the project, &lt;strong&gt;welcome them&lt;/strong&gt; accordingly. First open source contributions can be overwhelming as there so many considerations: code of conduct, license, guidelines...&lt;/p&gt;

&lt;p&gt;Even if GitHub makes it easy by onboarding new contributors when they land on a project, don't hesitate to provide additional context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;first_interaction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name == 'pull_request'&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;first&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;interaction'&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/first-interaction@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;repo-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;pr-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;Thanks for your first pull request on this project!&lt;/span&gt;
            &lt;span class="s"&gt;This is a kindly reminder to read the following resources:&lt;/span&gt;
            &lt;span class="s"&gt;- [code of conduct]()&lt;/span&gt;
            &lt;span class="s"&gt;- [contribution guidelines]()&lt;/span&gt;
            &lt;span class="s"&gt;It'll help us to review your contribution and to ensure it's aligned with our standards.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;I'm not a new contributor! Who cares?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not being a new contributor doesn't mean you should be ignored. As a review can be delayed, provide an instant comment to welcome new contributions. Even an automated one shows &lt;strong&gt;how much you care&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;greetings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name == 'pull_request'&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/saved-replies@v1.0.0&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.GITHUB_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
          &lt;span class="na"&gt;reply&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;Hi @${{ github.event.pull_request.user.login }}, thanks for being part of the community :heart:&lt;/span&gt;
            &lt;span class="s"&gt;We'll review your contribution as soon as possible!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#reusable-workflows"&gt;
  &lt;/a&gt;
  Reusable workflows
&lt;/h4&gt;

&lt;p&gt;When i started this workflow, i used &lt;code&gt;actions/cache&lt;/code&gt; to cache dependencies and speed up the workflows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache node modules&lt;/span&gt;
        &lt;span class="s"&gt;uses&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="s"&gt;env&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;cache-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cache-node-modules&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.npm&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-build-${{ env.cache-name }}-&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-build-&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meanwhile i discovered some changes happened to &lt;code&gt;actions/setup-node&lt;/code&gt; in July, removing the need of the previous boilerplate&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwPD1JR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw6z5495upo5lcduzaqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwPD1JR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw6z5495upo5lcduzaqz.png" alt="GitHub Actions: Setup-node now supports dependency caching" width="822" height="451"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Time to refactor? Not so much!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Such change didn't affect my workflow as such implementation detail was already hidden in a dedicated and reusable job by using the GitHub new feature: &lt;a href="https://docs.github.com/en/actions/learn-github-actions/reusing-workflows"&gt;Reusable Workflows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This reusable workflow is isolated in a &lt;a href="https://github.com/kerhub/reusable-workflows"&gt;dedicated repository&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;node_job&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;node&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;job'&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2.4.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;
          &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.command}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#automate-quality-checks"&gt;
  &lt;/a&gt;
  Automate quality checks
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXCGzX9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rbzu5nr6o55mubu59x5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXCGzX9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rbzu5nr6o55mubu59x5.png" alt="Quality checks" width="284" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The quality checks use the previous reusable workflow&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Make your code &lt;strong&gt;Prettier&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; is a famous code formatter.&lt;br&gt;
It removes all original styling* and ensures that all outputted code conforms to a consistent style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;prettier&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/reusable-workflows/.github/workflows/node-job.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run prettier --check \"**\"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Ensure maintainability with a &lt;strong&gt;linter&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;linter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/reusable-workflows/.github/workflows/node-job.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npx eslint --fix src/**/*.ts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Quality means doing it right even when no one is looking.&lt;br&gt;
&lt;em&gt;Henry Ford&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The future yourself will thank you for being able to push code with confidence thanks to tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;unit_tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;unit&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tests'&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/reusable-workflows/.github/workflows/node-job.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab_2mhp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqezqatpwtlwzb1o3seq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab_2mhp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqezqatpwtlwzb1o3seq.png" alt="Deployment workflow" width="266" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don't want to manually deploy anymore.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Review changes before they go live!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You want to preview changes due to a pull request.&lt;br&gt;
Netlify provides a &lt;strong&gt;preview feature&lt;/strong&gt; for such a need!&lt;br&gt;
By running this job on a pull request, a preview url will be created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;deploy_preview&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;preview'&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name == 'pull_request'&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;prettier&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;linter&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;unit_tests&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/workflows/.github/workflows/netlify-preview-deploy.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;build_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;./output/dist'&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;netlifyAuthToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.NETLIFY_AUTH_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
      &lt;span class="na"&gt;netlifySiteId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.NETLIFY_SITE_ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
      &lt;span class="na"&gt;repoToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.GITHUB_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It uses a &lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/netlify-preview-deploy.yml"&gt;reusable workflow&lt;/a&gt; once again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;build_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;build_command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;build'&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;repoToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;netlifyAuthToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;netlifySiteId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;netlify&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2.4.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;
          &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.build_command}}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to Netlify&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nwtgck/actions-netlify@v1.2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;publish-dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;./output/dist'&lt;/span&gt;
          &lt;span class="na"&gt;github-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.repoToken }}&lt;/span&gt;
          &lt;span class="na"&gt;deploy-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;from&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GitHub&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Actions"&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NETLIFY_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.netlifyAuthToken }}&lt;/span&gt;
          &lt;span class="na"&gt;NETLIFY_SITE_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.netlifySiteId }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Push to production!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By pushing code directly or by merging a pull request, this job will deploy a &lt;strong&gt;new version of your web app&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;deploy_live&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;live'&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event_name == 'push'&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;prettier&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;linter&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;unit_tests&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/workflows/.github/workflows/netlify-live-deploy.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;build_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;./output/dist'&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;netlifyAuthToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.NETLIFY_AUTH_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
      &lt;span class="na"&gt;netlifySiteId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.NETLIFY_SITE_ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It uses a &lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/netlify-live-deploy.yml"&gt;reusable workflow&lt;/a&gt; once again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;build_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;build_command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;build'&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;netlifyAuthToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;netlifySiteId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;netlify&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2.4.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;
          &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.build_command}}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy to Netlify&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nwtgck/actions-netlify@v1.2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;publish-dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;./output/dist'&lt;/span&gt;
          &lt;span class="na"&gt;production-deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NETLIFY_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.netlifyAuthToken }}&lt;/span&gt;
          &lt;span class="na"&gt;NETLIFY_SITE_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.netlifySiteId }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#audit"&gt;
  &lt;/a&gt;
  Audit
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bk4YH7Tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpmn5rxhxs120a0gblji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bk4YH7Tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpmn5rxhxs120a0gblji.png" alt="Audit workflow" width="259" height="155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/GoogleChrome/lighthouse"&gt;Lighthouse&lt;/a&gt; analyzes web apps and web pages, collecting modern performance metrics and insights on developer best practices.&lt;/p&gt;

&lt;p&gt;By pushing changes to your repository, it shouldn't affect performance and common best practices.&lt;/p&gt;

&lt;p&gt;The workflow includes 2 jobs for such a need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a preview one for the custom preview url (&lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/lighthouse-preview.yml"&gt;related reusable workflow&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;a live one using the production url (&lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/lighthouse-live.yml"&gt;related reusable workflow&lt;/a&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;lighthouse_preview&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;lighthouse&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;preview'&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy_preview&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/reusable-workflows/.github/workflows/lighthouse-preview.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;siteName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dojo-realworld'&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;netlifyAuthToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.NETLIFY_AUTH_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;lighthouse_live&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;lighthouse&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;live'&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy_live&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/reusable-workflows/.github/workflows/lighthouse-live.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;siteUrl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://dojo-realworld.netlify.app/'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Are we really done yet?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open source contribution requires to spend significant time on it as you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understand its goal to ensure your contribution will match&lt;/li&gt;
&lt;li&gt;to read all guidelines&lt;/li&gt;
&lt;li&gt;to wait for a review before your contribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Such dedication on a project worths to greet the contributor, not to just merge their work.&lt;/p&gt;

&lt;p&gt;But...there is no pull_request merged event.&lt;br&gt;
To identify a merged content, you need &lt;strong&gt;2 informations&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the event (push)&lt;/li&gt;
&lt;li&gt;the merged status of the pull request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the solution i used in a dedicated workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;closed&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;contribution-greetings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.event.pull_request.merged&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;greet the contributor&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kerhub/saved-replies@v1.0.0&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;reply&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;Thanks @${{ github.event.pull_request.user.login }}!&lt;/span&gt;
            &lt;span class="s"&gt;Your contribution is now fully part of this project :rocket:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;Workflow YAML Files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gothinkster/dojo-realworld-example-app/blob/main/.github/workflows/ci-cd.yml"&gt;CI - CD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gothinkster/dojo-realworld-example-app/blob/main/.github/workflows/merge-greetings.yml"&gt;Merge Greetings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;GitHub Actions used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/setup-node"&gt;actions/setup-node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/first-interaction"&gt;actions/first-interaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kerhub/saved-replies"&gt;kerhub/saved-replies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/treosh/lighthouse-ci-action"&gt;treosh/lighthouse-ci-action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kamranayub/wait-for-netlify-action"&gt;kamranayub/wait-for-netlify-action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nwtgck/actions-netlify"&gt;nwtgck/actions-netlify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub Reusable Workflows created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/node-job.yml"&gt;node-job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/netlify-preview-deploy.yml"&gt;netlify-preview-deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/netlify-live-deploy.yml"&gt;netlify-live-deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/lighthouse-preview.yml"&gt;lighthouse-preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kerhub/reusable-workflows/blob/main/.github/workflows/lighthouse-live.yml"&gt;lighthouse-live&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>netlify</category>
      <category>github</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I Review Pull Requests</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 09 Dec 2021 00:57:44 +0000</pubDate>
      <link>https://dev.to/nickytonline/how-i-review-pull-requests-44nl</link>
      <guid>https://dev.to/nickytonline/how-i-review-pull-requests-44nl</guid>
      <description>&lt;p&gt;Someone in my &lt;a href="https://virtualcoffee.io"&gt;Virtual Coffee&lt;/a&gt; community asked about getting better at reviewing pull requests (PR) today, which prompted this post. Hopefully, you find something helpful here. I'd love to hear from you if you do! And if you don't, that's OK too.  Suggestions to improve my process are welcome.&lt;/p&gt;

&lt;p&gt;First, I read the title and description to see what this is all about. If there are issues or other PRs referenced, I check those out if I need more context. If there are user interface (UI) changes, I look for before and after screenshots. If there are no screenshots and UI changes are present, I ask the reviewer to include some. It makes it a lot easier to assess changes from a high-level glance.&lt;/p&gt;

&lt;p&gt;Alright, let's run the code to test this! Woah, not quite yet.&lt;/p&gt;

&lt;p&gt;Next, I start skimming through all the changed files. Before doing that, I check how many file changes there are. If there are many changes to files, the PR review can become intimidating and unwieldy.&lt;/p&gt;

&lt;p&gt;In general, PRs should be small for a couple of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's easier to review&lt;/li&gt;
&lt;li&gt;fewer changes to code, fewer potential for bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I say potential because even a one-liner can cause bugs.&lt;/p&gt;

&lt;p&gt;Sometimes there is no choice but to have a significantly large PR. I've seen this mainly in UI work, but it can also apply to backend work, typically an all-or-nothing scenario that happens to span many files.&lt;/p&gt;

&lt;p&gt;If the above does not hold, these are the reasons I see PRs get bloated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someone spots refactorings they can do, but they're not related to the PR. Ask the person to put these refactorings into a separate PR and keep the PR to the task at hand.&lt;/li&gt;
&lt;li&gt;Sometimes the work is not broken down properly, so the PR becomes quite large. Do work that moves the more extensive work forward. For example, a utility function used throughout the feature can be in a separate PR. Is the person building out a new UI? They can build the components independently and put up a different PR, potentially using a tool like &lt;a href="https://virtualcoffee.io"&gt;Storybook&lt;/a&gt; to build them out. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember that an issue or feature does not need to map to one PR.&lt;/p&gt;

&lt;p&gt;We're finally looking at some code! I'm searching for issues that stand out to me without pulling down the PR and running the code on my local. I'm not talking about formatting/coding style issues because nowadays, many projects have toolings like linters or code formatters.&lt;/p&gt;

&lt;p&gt;Here are some of the things I look for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;logic errors&lt;/li&gt;
&lt;li&gt;a language feature the person wasn't aware of&lt;/li&gt;
&lt;li&gt;leveraging existing utility functions in the codebase&lt;/li&gt;
&lt;li&gt;tests&lt;/li&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;accessibility issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In some cases, coding style might come up, for example, returning early when a condition fails in a function or method. Side note: If changes come up during a review that can be changed automatically, automated away! Do that in a separate PR, though. 😎&lt;/p&gt;

&lt;p&gt;After the first sweep of the code, I'll send the PR back to the reviewee if there are any change requests. Wait a second? Haven't you even run the code yet? As a reviewer, I have my work to do as well, so I'll hold off on taking the PR for a test drive.&lt;/p&gt;

&lt;p&gt;After the initial review, I'll review the changes and potentially request additional changes. Once no changes are left (for the time being), I pull down the code and run it locally. Depending on your setup, maybe your work has preview deploys on a host like Netlify or Vercel or some containerized environment to test. Regardless, now is the time to verify the PR's intentions.&lt;/p&gt;

&lt;p&gt;At this point, there will most likely be review feedback still, so continue the cycle of reviewing the changes and ensuring the PR's intentions. I'll pause to mention that this review process can take some time, depending on the work; time zone differences can exacerbate the review time. It's critical to become great at async communication, especially now that a lot of the tech industry is moving/has moved to a remote culture.&lt;/p&gt;

&lt;p&gt;The last thing I'll mention is the tone of a review in a PR because words matter. I've grown accustomed to using a framework for commenting called Conventional Comments. I won't go into it in detail, but check out a &lt;a href="https://www.iamdeveloper.com/pages/talks/#heading-words-matter:-conventional-comments"&gt;lightning talk I gave on Conventional Comments&lt;/a&gt;. Netlify uses a similar system called Feedback Ladders.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QXDhmoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/900378068367228928/ZhG3yywl_normal.jpg" alt="Leslie Cohn-Wein profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Leslie Cohn-Wein
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lesliecdubs"&gt;@lesliecdubs&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/tiberriver256"&gt;@tiberriver256&lt;/a&gt; Big fan!!&lt;br&gt;&lt;br&gt;Not sure if &lt;a href="https://t.co/7jJuXRoWfA"&gt;conventionalcomments.org&lt;/a&gt; existed in early 2019 or not, but if it did, I didn't know about it. So we came up with our own (very similar) approach which we shared publicly last year.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/fgrCS9yNw7"&gt;netlify.com/blog/2020/03/0…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:03 AM - 28 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1420188172726771714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1420188172726771714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1420188172726771714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Thanks and until next time!&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Winkler&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/review?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Beginners Guide to GitHub Actions, Django and Docker</title>
      <author>Zoo Codes</author>
      <pubDate>Thu, 09 Dec 2021 00:55:08 +0000</pubDate>
      <link>https://dev.to/ken_mwaura1/beginners-guide-to-github-actions-django-and-docker-2om6</link>
      <guid>https://dev.to/ken_mwaura1/beginners-guide-to-github-actions-django-and-docker-2om6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow-rocket-rocket"&gt;
  &lt;/a&gt;
  My Workflow 🚀 🚀
&lt;/h3&gt;

&lt;p&gt;I have recently been working on several Django projects some for school, some as side projects and others as par of freelance work.&lt;/p&gt;

&lt;p&gt;Overtime, I realized the importance of having a basic Devops workflow in place. This enables to tweak according to the project needs and to have a clear and consistent workflow.&lt;br&gt;
This workflow can be thought of as a set of steps that are executed in order to ensure a project is built and deployed successfully. &lt;/p&gt;

&lt;p&gt;I have also included alternative steps for docker and docker-compose files, however these are optional and can be removed if not needed. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/KenMwaura1"&gt;
        KenMwaura1
      &lt;/a&gt; / &lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions"&gt;
        zoo_Django_Actions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sampple django Web App for GitHub Actions 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions/graphs/contributors"&gt;&lt;img src="https://camo.githubusercontent.com/b1beb9f091dd2e38db1e27e4f08db4de5f85eaffc77aa56bbd4bf2dc7958aaca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f4b656e4d7761757261312f7a6f6f5f446a616e676f5f416374696f6e732e7376673f7374796c653d666f722d7468652d6261646765" alt="Contributors"&gt;&lt;/a&gt;
&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions/network/members"&gt;&lt;img src="https://camo.githubusercontent.com/c0c1ced554c5906031b4624c0e3a5dba75b580a808c5b6ea5287a560925a67f0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f4b656e4d7761757261312f7a6f6f5f446a616e676f5f416374696f6e732e7376673f7374796c653d666f722d7468652d6261646765" alt="Forks"&gt;&lt;/a&gt;
&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/c3405e957213c0b94e2868120185008d264cec1f7115a866fe2288d66458dcf8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f4b656e4d7761757261312f7a6f6f5f446a616e676f5f416374696f6e732e7376673f7374796c653d666f722d7468652d6261646765" alt="Stargazers"&gt;&lt;/a&gt;
&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions/issues"&gt;&lt;img src="https://camo.githubusercontent.com/5b1cec72b9bfa72fa976c918738203a6bff4e2ebf0cb4d7ce2fc9f7252514db7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4b656e4d7761757261312f7a6f6f5f446a616e676f5f416374696f6e732e7376673f7374796c653d666f722d7468652d6261646765" alt="Issues"&gt;&lt;/a&gt;
&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions/blob/master/LICENSE.txt"&gt;&lt;img src="https://camo.githubusercontent.com/e1d010909c721735b60d97a75060eac42c8a646a743e4cb6b08cfc7b03b82ae0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4b656e4d7761757261312f7a6f6f5f446a616e676f5f416374696f6e732e7376673f7374796c653d666f722d7468652d6261646765" alt="MIT License"&gt;&lt;/a&gt;
&lt;a href="https://linkedin.com/in/kennedy-mwaura/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1ffde4ea8d2869a62cdf80282516c524e1109befc83d6339aae7a55d94ff4ae5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4c696e6b6564496e2d626c61636b2e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6c696e6b6564696e26636f6c6f72423d353535" alt="LinkedIn"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Zoo django Actions&lt;/h3&gt;
  &lt;p&gt;
    Sample Django App uilizing Github Actions and Docker for deployment and testing
    &lt;br&gt;
    &lt;br&gt;
  &lt;/p&gt;


  Table of Contents
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#about-the-project"&gt;About The Project&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#built-with"&gt;Built With&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#getting-started"&gt;Getting Started&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#license"&gt;License&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#acknowledgments"&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;


&lt;h2&gt;
About The Project&lt;/h2&gt;

&lt;p&gt;(&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#top"&gt;back to top&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;
Built With&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/downloads/" rel="nofollow"&gt;Python 3.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/download/" rel="nofollow"&gt;Django 3.2.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions"&gt;Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/" rel="nofollow"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/" rel="nofollow"&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;a href="https://github.com/KenMwaura1/zoo_Django_Actions#top"&gt;back to top&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;To get started, you'll need to install the following:&lt;/p&gt;
&lt;h3&gt;
Prerequisites&lt;/h3&gt;
&lt;p&gt;This is an example of how to list things you need to use the software and how to install them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/downloads/" rel="nofollow"&gt;Python 3.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repo
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/KenMwaura1/zoo_Django_Actions.git&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Create a virtual environment
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;python -m venv venv&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Activate the virtual environment
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;source&lt;/span&gt; venv/bin/activate&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Install the dependencies
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;pip install -r requirements.txt&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Add your credentials to a .env file
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;POSTGRESQL_HOST=localhost&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .env
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;POSTGRESQL_PORT=5432&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .env
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;POSTGRESQL_USER=postgres&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .env
&lt;span class="pl-c1"&gt;echo&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;POSTGRESQL_PASSWORD=postgres&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .env
&lt;/pre&gt;…
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/KenMwaura1/zoo_Django_Actions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This repository contains a skeleton Django App that can be used as a starting point for a Django project, Dockerfile, Docker compose file and workflow file.&lt;br&gt;
Installation instructions can be found in the README.md file. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DIY Deployments&lt;/strong&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code-trophy"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code 🏆
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#overview-of-workflow-clipboard"&gt;
  &lt;/a&gt;
  Overview of workflow 📋
&lt;/h4&gt;

&lt;p&gt;Let's start with a quick overview of the workflow. Our workflow is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once code is pushed to the main branch of the repository, we run 4 parallel jobs against 4 different python versions.

&lt;ul&gt;
&lt;li&gt;Python 3.7, 3.8, 3.9, 3.10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We then install the requirements using pip3.&lt;/li&gt;
&lt;li&gt;We run black to format the code.&lt;/li&gt;
&lt;li&gt;We  run flake8 to check for errors and warnings.&lt;/li&gt;
&lt;li&gt;We run isort to sort the imports.&lt;/li&gt;
&lt;li&gt;We set up a PostgreSQL database. &lt;/li&gt;
&lt;li&gt;We run the migrations.&lt;/li&gt;
&lt;li&gt;We run the tests(if any).&lt;/li&gt;
&lt;li&gt;Finally, we run the docker-compose file to ensure no errors in container creation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#enough-words-show-me-the-yaml-computer"&gt;
  &lt;/a&gt;
  Enough Words Show Me the YAML 💻
&lt;/h4&gt;

&lt;p&gt;Let's take a look at the YAML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Zoo Django Actions&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;max-parallel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;3.6&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.7&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.9&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;database-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;zoo_django_actions&lt;/span&gt;
        &lt;span class="na"&gt;database-password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
        &lt;span class="na"&gt;database-user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
        &lt;span class="na"&gt;database-host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
        &lt;span class="na"&gt;database-port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;5432&lt;/span&gt;

    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;postgres&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:latest&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-name }}&lt;/span&gt;
          &lt;span class="na"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-user }}&lt;/span&gt;
          &lt;span class="na"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-password }}&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
        &lt;span class="c1"&gt;# Set health checks to wait until postgres has started&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="s"&gt;--health-cmd pg_isready&lt;/span&gt;
          &lt;span class="s"&gt;--health-interval 10s&lt;/span&gt;
          &lt;span class="s"&gt;--health-timeout 5s&lt;/span&gt;
          &lt;span class="s"&gt;--health-retries &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;


    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.4.0&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python ${{ matrix.python-version }}&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2.3.1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.python-version }}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;python -m pip install --upgrade pip&lt;/span&gt;
        &lt;span class="s"&gt;pip install -r requirements.txt&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Format with black&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;pip install black&lt;/span&gt;
        &lt;span class="s"&gt;# format the files with black&lt;/span&gt;
        &lt;span class="s"&gt;black .&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lint with flake8&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;pip install flake8&lt;/span&gt;
        &lt;span class="s"&gt;# stop the build if there are Python syntax errors or undefined names&lt;/span&gt;
        &lt;span class="s"&gt;flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics&lt;/span&gt;
        &lt;span class="s"&gt;# exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide&lt;/span&gt;
        &lt;span class="s"&gt;flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sort imports&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;pip install isort&lt;/span&gt;
        &lt;span class="s"&gt;# stop the build if there are Python syntax errors or undefined names&lt;/span&gt;
        &lt;span class="s"&gt;isort .&lt;/span&gt;
        &lt;span class="s"&gt;isort --check --diff .&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup test database&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;POSTGRES_DB_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-name }}&lt;/span&gt;
        &lt;span class="na"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-user }}&lt;/span&gt;
        &lt;span class="na"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-password }}&lt;/span&gt;
        &lt;span class="na"&gt;POSTGRES_DB_HOST&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-host }}&lt;/span&gt;
        &lt;span class="na"&gt;POSTGRES_DB_PORT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-port }}&lt;/span&gt;
        &lt;span class="na"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.database-name }}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;export DATABASE_URL=postgres://${{ matrix.database-user }}:${{ matrix.database-password }}@${{ matrix.database-host }}:${{ matrix.database-port }}/${{ matrix.database-name }}&lt;/span&gt;
        &lt;span class="s"&gt;export SECRET_KEY=test-secret-key&lt;/span&gt;
        &lt;span class="s"&gt;export DEBUG=1&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run migrations&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;export DATABASE_URL=postgres://${{ matrix.database-user }}:${{ matrix.database-password }}@${{ matrix.database-host }}:${{ matrix.database-port }}/${{ matrix.database-name }}&lt;/span&gt;
        &lt;span class="s"&gt;export SECRET_KEY=test-secret-key&lt;/span&gt;
        &lt;span class="s"&gt;export DEBUG=1&lt;/span&gt;
        &lt;span class="s"&gt;export ALLOWED_HOSTS=localhost&lt;/span&gt;
        &lt;span class="s"&gt;export GITHUB_WORKFLOW=True&lt;/span&gt;
        &lt;span class="s"&gt;export MODE=workflow&lt;/span&gt;
        &lt;span class="s"&gt;python manage.py makemigrations&lt;/span&gt;
        &lt;span class="s"&gt;python manage.py migrate&lt;/span&gt;
        &lt;span class="s"&gt;python manage.py migrate --run-syncdb&lt;/span&gt;
        &lt;span class="s"&gt;python manage.py check&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;python manage.py test&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres://${{ matrix.database-user }}:${{ matrix.database-password }}@${{ matrix.database-host }}:${{ matrix.database-port }}/${{ matrix.database-name }}&lt;/span&gt;
        &lt;span class="na"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test-secret-key&lt;/span&gt;
        &lt;span class="na"&gt;DEBUG&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="na"&gt;ALLOWED_HOSTS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
        &lt;span class="na"&gt;GITHUB_WORKFLOW&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
        &lt;span class="na"&gt;MODE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workflow&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.4.0&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the images and start the containers&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;export GITHUB_WORKFLOW=True&lt;/span&gt;
        &lt;span class="s"&gt;export MODE="Test"&lt;/span&gt;
        &lt;span class="s"&gt;docker-compose -f docker-compose.yml build&lt;/span&gt;
        &lt;span class="s"&gt;docker-compose -f docker-compose.yml up -d&lt;/span&gt;
        &lt;span class="s"&gt;# run: docker-compose up -d --build&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Stop containers&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always()&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-compose -f "docker-compose.yml" down&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each step is labelled with a name and a run block. The name is used to identify the step in the output. Also provides context for the step. It might seem daunting to understand all of this, but it's really simple. I recommend the &lt;a href="https://docs.github.com/en/actions"&gt;GiHub Action documentation&lt;/a&gt; to get started.&lt;/p&gt;

&lt;p&gt;First thing to note is workflow files are written in YAML. This is a simple way to structure your workflow. The YAML syntax is very similar to JSON. It's beyond the scope of this guide to explain the YAML syntax. However, to get started you can use the &lt;a href="https://yaml-cheat-sheet.readthedocs.io/en/latest/"&gt;YAML Cheatsheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let's do a walk-through on adding this workflow to your project/repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory called &lt;code&gt;.github/&lt;/code&gt;. Note the &lt;code&gt;.&lt;/code&gt; in the beginning.&lt;/li&gt;
&lt;li&gt;Create a new directory called &lt;code&gt;workflows&lt;/code&gt; inside the &lt;code&gt;.github/&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Create a new file called &lt;code&gt;main.yml&lt;/code&gt; inside the &lt;code&gt;workflows&lt;/code&gt; directory. This is the main workflow file. However, you can name it anything you want.&lt;/li&gt;
&lt;li&gt;Copy the above code into the &lt;code&gt;main.yml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add and commit the &lt;code&gt;.github/workflows/main.yml&lt;/code&gt; file to your project. This will allow you to run the workflow from the GitHub UI.&lt;br&gt;
*&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add .github/workflows/main.yml
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add workflow"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can view your workflow on GitHub. You can also run the workflow from the GitHub UI.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example workflow runs from the GitHub UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BEE6pcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etoruh6mkhvbsedn514v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BEE6pcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etoruh6mkhvbsedn514v.png" alt="Actions screenshot" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-points"&gt;
  &lt;/a&gt;
  Bonus Points
&lt;/h3&gt;

&lt;p&gt;GitHub Actions have a great feature, badges - which are small images that show up on your GitHub repository. You can use badges to show the status of your workflow.&lt;br&gt;
To add a badge to your README file: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to your repository. &lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Actions&lt;/strong&gt; tab. &lt;/li&gt;
&lt;li&gt;Select the specific workflow you want to add a badge to. &lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Create status badge&lt;/strong&gt; button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RMYXXkoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66p01jejcr9c31xn6a4n.png" alt="Action screenshot" width="880" height="321"&gt;
&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Copy status badge Markdown&lt;/strong&gt; button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMYfRegU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn7k2sh4f8k882f6udfd.png" alt="Badge screenshot" width="842" height="561"&gt;
&lt;/li&gt;
&lt;li&gt;Paste the markdown into your README file. &lt;/li&gt;
&lt;li&gt;Commit your changes. &lt;/li&gt;
&lt;li&gt;Push your changes to GitHub. &lt;/li&gt;
&lt;li&gt;View your badge on GitHub.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info-label"&gt;
  &lt;/a&gt;
  Additional Resources / Info 🏷️
&lt;/h3&gt;

&lt;p&gt;Tools and resources I used to create this workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/overview/"&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/blog/docker-compose-cheat-sheet/"&gt;Docker Compose Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/checkout"&gt;Actions Checkout V2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/setup-python"&gt;Setup Python V2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up-heavycheckmark-heavycheckmark"&gt;
  &lt;/a&gt;
  Wrap Up ✔️ ✔️
&lt;/h3&gt;

&lt;p&gt;You've now have simple workflow that can be used to run tests, build images, run migrations, and run tests.&lt;br&gt;
This is a great way to get started with GitHub Actions. Allows for so much extensibility. Go forth and automate your workflows!&lt;/p&gt;

&lt;p&gt;This is the end of the guide. If you have any questions or comments, please feel free to reach out to me on Twitter &lt;a href="https://twitter.com/Ken_Mwaura1"&gt;@Ken_Mwaura1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! ✨&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>django</category>
      <category>docker</category>
      <category>github</category>
    </item>
    <item>
      <title>Listen to the S7E5 of DevDiscuss: "How to Be a Successful Whistleblower"</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 09 Dec 2021 00:27:58 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-s7e5-of-devdiscuss-how-to-be-a-successful-whistleblower-34jc</link>
      <guid>https://dev.to/devteam/listen-to-the-s7e5-of-devdiscuss-how-to-be-a-successful-whistleblower-34jc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#on-this-weeks-episode-of-devdiscuss-we-talk-about-how-you-can-effect-change-as-a-developer-and-protect-yourself-along-the-way"&gt;
  &lt;/a&gt;
  On this week's episode of DevDiscuss, we talk about how you can effect change as a developer — &lt;em&gt;and&lt;/em&gt; protect yourself along the way.
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s7-e5-how-to-be-a-successful-whistleblower"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E5 - How To Be a Successful Whistleblower&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e5-how-to-be-a-successful-whistleblower" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e5-how-to-be-a-successful-whistleblower" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e5-how-to-be-a-successful-whistleblower" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e5-how-to-be-a-successful-whistleblower" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e5-how-to-be-a-successful-whistleblower"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s7-e5-how-to-be-a-successful-whistleblower"&gt;
      &lt;img id="episode-profile-image" alt="S7:E5 - How To Be a Successful Whistleblower" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Quick refresher — DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Episode Info&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In S7E5, we explore the important topic of whistleblowing in tech and how you can do it when necessary in a way that doesn't compromise your safety. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 — Developer Advocate at Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://twitter.com/@arsteinhorn"&gt;Ariella Steinhorn&lt;/a&gt;&lt;/strong&gt; is the founder of Lioness, a new media company that pokes at power. She has guided hundreds of people through sharing their story with the media and public, and believes in the power of storytelling to shift culture.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://twitter.com/@amberscorah"&gt;Amber Scorah&lt;/a&gt;&lt;/strong&gt; is a writer, speaker, author of the memoir Leaving the Witness. She is president and partner at Lioness and a Dean’s fellow at Harvard. She has helped hundreds of people put their own thoughts to paper and bring their stories to the world via the media.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us know your thoughts on this show in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" alt="Speakers" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e5-how-to-be-a-successful-whistleblower/id1513053883?i=1000544343461"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/1mql0B0IKy49bmqQoufW73"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzU0?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjogbj_udX0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss-dev-xtQvoDylAUg/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=168303417"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devdiscuss_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devdiscuss/episodes/235"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season seven sponsors: &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevDiscussPodcast_o7nllI4cp4Vg&amp;amp;ocid=aid3038582"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://developer.newrelic.com/"&gt;New Relic&lt;/a&gt;, &amp;amp; &lt;a href="https://dev.toource=devdiscuss&amp;amp;utm_medium=syndication&amp;amp;utm_campaign=october21"&gt;Vultr&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Creating Desktop, Web and Even Mobile Apps With Python</title>
      <author>Thuwarakesh Murallie</author>
      <pubDate>Wed, 08 Dec 2021 23:54:42 +0000</pubDate>
      <link>https://dev.to/thuwarakesh/creating-desktop-web-and-even-mobile-apps-with-python-3jdi</link>
      <guid>https://dev.to/thuwarakesh/creating-desktop-web-and-even-mobile-apps-with-python-3jdi</guid>
      <description>&lt;p&gt;Python had incredible success in the last couple of years.&lt;/p&gt;

&lt;p&gt;It had become the language of choice for data scientists and programmers in many other disciplines. But still, for tasks such as mobile development and building GUI's in general, we rely on different technologies.&lt;/p&gt;

&lt;p&gt;But Python has evolved to help us in almost any task. We have GUI libraries as standard python packages, or we can pick one from the vast Python ecosystem.&lt;/p&gt;

&lt;p&gt;This post is about five such tools. You'd also find getting started instructions to them and ways to expand your wisdom further. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://towardsdatascience.com/5-python-gui-frameworks-to-create-desktop-web-and-even-mobile-apps-c25f1bcfb561?sk=dbc57973ed10f8932a06ad8a9c33a1a2"&gt;5 Python GUI Frameworks to Create Desktop, Web, and Even Mobile Apps.&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Say Hi to me on &lt;a href="https://www.linkedin.com/in/thuwarakesh/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/Thuwarakesh"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://thuwarakesh.medium.com/"&gt;Medium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not a Medium member yet? Please use this link to &lt;a href="https://thuwarakesh.medium.com/membership"&gt;&lt;strong&gt;&lt;em&gt;become a member&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; because, at no extra cost for you, I earn a small commission for referring you.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
