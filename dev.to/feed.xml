<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to interpret machine learning models with SHAP values</title>
      <author>Mage</author>
      <pubDate>Tue, 23 Nov 2021 21:44:23 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-to-interpret-machine-learning-models-with-shap-values-54jf</link>
      <guid>https://dev.to/mage_ai/how-to-interpret-machine-learning-models-with-shap-values-54jf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;What are SHAP values?&lt;/li&gt;
&lt;li&gt;Walkthrough example&lt;/li&gt;
&lt;li&gt;How does Mage explain models?&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Machine learning models are usually seen as a “black box.” It takes some features as input and produces some predictions as output. The common questions after model training are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do different features affect the prediction results?&lt;/li&gt;
&lt;li&gt;What are the top features that influence the prediction results?&lt;/li&gt;
&lt;li&gt;The model performance metrics look great, but should I trust the results?&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuSkzTR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nakwk4vxzgj23o9kdqq5.gif" alt="Image description" width="410" height="170"&gt;&lt;em&gt;Whatever you say Prince Ali (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Thus, model explainability plays an important role in the machine learning world. Model insights are useful for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;li&gt;Informing feature engineering&lt;/li&gt;
&lt;li&gt;Directing future data collection&lt;/li&gt;
&lt;li&gt;Informing human decision-making&lt;/li&gt;
&lt;li&gt;Building trust&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWHDi1IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tnzmo0aiz414986okf2.gif" alt="Image description" width="382" height="347"&gt;&lt;em&gt;Model insights doing its part! (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We talked about the metrics used for model evaluation in a previous article “&lt;a href="https://m.mage.ai/the-definitive-guide-to-accuracy-precision-and-recall-for-product-developers-71e4887d0da7"&gt;The definitive guide to Accuracy, Precision, and Recall for product developers.&lt;/a&gt;” Those metrics help you understand the overall performance of a model. However, we need more insights into how different features impact the model’s prediction.&lt;/p&gt;

&lt;p&gt;There are multiple techniques to explain the models. In this article, we’ll introduce SHAP values, which is one of the most popular model explanation techniques. We’ll also walk through an example to show how to use SHAP values to get insights.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-shap-values"&gt;
  &lt;/a&gt;
  What are SHAP values?
&lt;/h2&gt;

&lt;p&gt;SHAP stands for “SHapley Additive exPlanations.” &lt;a href="https://en.wikipedia.org/wiki/Shapley_value"&gt;Shapley values&lt;/a&gt; are a widely used approach from cooperative game theory. The essence of Shapley value is to measure the contributions to the final outcome from each player separately among the coalition, while preserving the sum of contributions being equal to the final outcome.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nf8YXV1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u62df7y4ecc2cs212x6.gif" alt="Image description" width="480" height="270"&gt;&lt;em&gt;Oh SHAP! (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;When using SHAP values in model explanation, we can measure the input features’ contribution to individual predictions. We won’t be covering the complex formulas to calculate SHAP values in this article, but we’ll show how to use the &lt;a href="https://github.com/slundberg/shap"&gt;SHAP&lt;/a&gt; Python library to easily calculate SHAP values.&lt;/p&gt;

&lt;p&gt;There are some other techniques used to explain models like &lt;a href="https://scikit-learn.org/stable/modules/permutation_importance.html"&gt;permutation importance&lt;/a&gt; and &lt;a href="https://scikit-learn.org/stable/modules/partial_dependence.html"&gt;partial dependence plots&lt;/a&gt;. Here are some benefits of using SHAP values over other techniques:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Global interpretability: SHAP values not only show feature importance but also show whether the feature has a positive or negative impact on predictions.&lt;/li&gt;
&lt;li&gt;Local interpretability: We can calculate SHAP values for each individual prediction and know how the features contribute to that single prediction. Other techniques only show aggregated results over the whole dataset.&lt;/li&gt;
&lt;li&gt;SHAP values can be used to explain a large variety of models including &lt;a href="https://en.wikipedia.org/wiki/Linear_model"&gt;linear models&lt;/a&gt; (e.g. &lt;a href="https://en.wikipedia.org/wiki/Linear_regression"&gt;linear regression&lt;/a&gt;), &lt;a href="https://sdcastillo.github.io/PA-R-Study-Manual/tree-based-models.html"&gt;tree-based models&lt;/a&gt; (e.g. &lt;a href="https://en.wikipedia.org/wiki/XGBoost"&gt;XGBoost&lt;/a&gt;) and &lt;a href="https://en.wikipedia.org/wiki/Neural_network"&gt;neural networks&lt;/a&gt;, while other techniques can only be used to explain limited model types.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#walkthrough-example"&gt;
  &lt;/a&gt;
  Walkthrough example
&lt;/h2&gt;

&lt;p&gt;We’ll walk through an example to explain how SHAP values work in practice. If you’ve followed Mage’s blog articles, you might’ve already read “&lt;a href="https://m.mage.ai/how-to-get-started-with-ai-ml-8630fecfd776"&gt;Build your first machine learning model&lt;/a&gt;.” We’ll use the same dataset &lt;a href="https://app.box.com/s/zrpzj8zw35zbs8njcij40gy45gcgwsyl"&gt;titanic_survival&lt;/a&gt; to demonstrate how SHAP values work.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RaVc89Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0nae8qf81w7pbdde0gk.gif" alt="Image description" width="410" height="172"&gt;&lt;em&gt;The SHAP has sailed (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We use XGBoost to train the model to predict survival. “Sex”, “Pclass”, “Fare”, and “Age” features are used in the model training. “Survived” is the label feature with values 0 and 1.&lt;/p&gt;

&lt;p&gt;We use this &lt;a href="https://github.com/slundberg/shap"&gt;SHAP&lt;/a&gt; Python library to calculate SHAP values and plot charts. We select TreeExplainer here since XGBoost is a tree-based model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import shap
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;shap_values&lt;/code&gt; is a 2D array. Each row belongs to a single prediction made by the model. Each column represents a feature used in the model. Each SHAP value represents how much this feature contributes to the output of this row’s prediction.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7OgdGHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dsg9mtlq3czbhvs7epz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7OgdGHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dsg9mtlq3czbhvs7epz.png" alt="Image description" width="477" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Positive SHAP value means positive impact on prediction, leading the model to predict 1(e.g. Passenger survived the Titanic). Negative SHAP value means negative impact, leading the model to predict 0 (e.g. passenger didn’t survive the Titanic).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#feature-importance"&gt;
  &lt;/a&gt;
  Feature importance
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;strong&gt;summary_plot&lt;/strong&gt; method with plot_type “bar” to plot the feature importance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shap.summary_plot(shap_values, X, plot_type='bar')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MkEETpZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g96ki40y9eqihiyulj2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkEETpZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g96ki40y9eqihiyulj2w.png" alt="Image description" width="574" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The features are ordered by how much they influenced the model’s prediction. The x-axis stands for the average of the absolute SHAP value of each feature. For this example, “Sex” is the most important feature, followed by “Pclass”, “Fare”, and “Age”.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DD2_CK6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmegnbfkey7lm7l3t92v.gif" alt="Image description" width="410" height="246"&gt;&lt;em&gt;(Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#directionality-impact"&gt;
  &lt;/a&gt;
  Directionality impact
&lt;/h3&gt;

&lt;p&gt;With the same &lt;strong&gt;summary_plot&lt;/strong&gt; method, we can plot dot charts to visualize the directionality impact of the features.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shap.summary_plot(shap_values, X)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJxpH02z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hgqh3jvm3a29q4kgmla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJxpH02z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hgqh3jvm3a29q4kgmla.png" alt="Image description" width="574" height="195"&gt;&lt;/a&gt;&lt;br&gt;
In this chart, the x-axis stands for SHAP value, and the y-axis has all the features. Each point on the chart is one SHAP value for a prediction and feature. Red color means higher value of a feature. Blue means lower value of a feature. We can get the general sense of features’ directionality impact based on the distribution of the red and blue dots.&lt;/p&gt;

&lt;p&gt;In the chart above, we can conclude the following insights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Higher value of “Sex” (male) leads to lower chance of survive.  * Lower value of “Sex” (female) leads to higher chance of survival.&lt;/li&gt;
&lt;li&gt;Higher value of “Pclass” leads to lower chance to survive as well. 
Lower value of “Pclass” leads to higher chance of survival.&lt;/li&gt;
&lt;li&gt;Lower value of “Fare” leads to lower chance to survive.&lt;/li&gt;
&lt;li&gt;Higher value of “Age” leads to lower chance to survive.&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYNUznVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae4ul7l03xtm3folasal.png" alt="Image description" width="574" height="298"&gt;&lt;em&gt;Well, you get the point (Source: Titanic)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;By comparing these insights with general understanding of the problem, we can trust that the model is intuitive and making the right decisions. For example, the model will more likely predict survival if the passenger had a Sex of female. This is intuitive because women and children were put on lifeboats before men were allowed.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzbGh3hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbsxfpvvec6rriv9hiud.gif" alt="Image description" width="410" height="178"&gt;&lt;em&gt;When it sinks in (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#individual-predictions"&gt;
  &lt;/a&gt;
  Individual predictions
&lt;/h3&gt;

&lt;p&gt;Besides seeing the overall trend of feature impact, we can call the &lt;strong&gt;force_plot&lt;/strong&gt; method to visualize how features contribute to individual predictions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shap.force_plot(
    explainer.expected_value,
    shap_values[idx, :],
    X.iloc[idx, :],
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JRP7wry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsz6vhl6plkxvtbfp3ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JRP7wry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsz6vhl6plkxvtbfp3ag.png" alt="Image description" width="574" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, feature “Fare” and “Sex” have a positive impact on the prediction, while “Pclass” and “Age” have a negative impact on the prediction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-mage-explain-models"&gt;
  &lt;/a&gt;
  How does Mage explain models?
&lt;/h2&gt;

&lt;p&gt;After the model is trained, Mage provides an Analyzer page to show the model performance and insights. In addition to model performance metrics (precision, recall, accuracy, etc), we leverage SHAP values to show features that have the most impact on model output and how those features impact the model output.&lt;/p&gt;

&lt;p&gt;“Top Influencers” chart is similar to the summary bar chart from the &lt;code&gt;shap&lt;/code&gt; library. We calculate the average of the absolute SHAP values for each feature and use it to show which features were the most important when making a prediction.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vy3aTc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4f2s4xlkvre0fy00jvc.png" alt="Image description" width="574" height="296"&gt;&lt;em&gt;Mage Analyzer page: top features&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We also translate SHAP values to this “Directionality” chart to show how features impact the output in a more intuitive way. Green plus icon means higher feature value and red minus icon means lower feature value. Horizontally, the right side means positive impact on the prediction and the left side means negative impact. We also summarize all the insights into text to make it easier to understand.&lt;/p&gt;

&lt;p&gt;For the Titanic example, we can easily see when sex is female, pclass is smaller, fare is higher, or younger age, there is a higher chance to survive. These insights align with our understanding of what actually happened during the Titanic incident in real life.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBCFx3eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61cfnpp6t2phore84ojk.png" alt="Image description" width="574" height="545"&gt;&lt;em&gt;Mage Analyzer page: SHAP values&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Model explainability is an important topic in machine learning. SHAP values help you understand the model at row and feature level. The &lt;a href="https://github.com/slundberg/shap"&gt;SHAP&lt;/a&gt; Python package is a useful library to calculate SHAP values, visualize the feature importance, and directionality impact using multiple charts.&lt;/p&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmvkiiCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpe611ir1oom877ubuyq.png" alt="Image description" width="508" height="349"&gt;&lt;em&gt;(Source: Titanic)&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Original paper for SHAP: &lt;a href="https://arxiv.org/pdf/1705.07874.pdf"&gt;https://arxiv.org/pdf/1705.07874.pdf&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Documentation for 'shap' library : &lt;a href="https://shap.readthedocs.io/en/latest/index.html"&gt;https://shap.readthedocs.io/en/latest/index.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>modelexplantion</category>
      <category>shapvalues</category>
      <category>modeling</category>
    </item>
    <item>
      <title>The Sacred Steps to Achieving Good Documentation</title>
      <author>homemmakako</author>
      <pubDate>Tue, 23 Nov 2021 21:16:43 +0000</pubDate>
      <link>https://dev.to/homemmakako/the-sacred-steps-to-achieving-good-documentation-1hc0</link>
      <guid>https://dev.to/homemmakako/the-sacred-steps-to-achieving-good-documentation-1hc0</guid>
      <description>&lt;p&gt;So, you've spent hours, weeks, or even months on a project you believe in, and you are damn proud of it. It is capable of solving problems every developer faces, the test coverage is about 110%, and the code itself is just shy of a work of art. But then, as you push your last commit, you remember that, lurking in the shadows of your IDE, was a holdup most developers underestimate: documentation.&lt;/p&gt;

&lt;p&gt;Ok, maybe it is not as scary as I make it sound, but still &lt;strong&gt;something you should respect&lt;/strong&gt;, after all, every programmer has, at some point in their life, come across a poorly documented library or package, spent a few minutes of guesswork trying to make it work, maybe even tried reading a bit of the source code, just to finally give up on using it. Turns out, most of the time, an undocumented application is a barely usable application. Be it an API, a smartphone or a car, nobody wants to learn how to assemble an engine in order to drive back home.&lt;/p&gt;

&lt;p&gt;That being said, the importance of documenting your application is no breaking news. What might be surprising, however, is how difficult and time consuming the process of creating such documentation can be. While writing the documentation on my open-source software &lt;a href="https://mapikit.github.io/meta-system-docs/"&gt;Meta-System&lt;/a&gt;, I came across a few difficulties that I would like to share, so that maybe you can avoid them yourself. But where do you start?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picking-the-right-tools"&gt;
  &lt;/a&gt;
  Picking the Right Tools
&lt;/h2&gt;

&lt;p&gt;The first big challenge you might face is which platform to use for your docs. Some simple projects just use the github wiki as a way to serve the documentation, which works well for simpler things, but the reality is that, for medium to large projects, such tools are far from being enough, so you'll probably have to resort to some other options such as &lt;a href="https://apiary.io"&gt;Apiary&lt;/a&gt;, &lt;a href="https://readthedocs.org"&gt;Read the Docs&lt;/a&gt; or even a combination of tools, such as &lt;a href="https://pages.github.com"&gt;Github Pages&lt;/a&gt; and &lt;a href="https://docusaurus.io"&gt;Docussaurus&lt;/a&gt;, which was what we used for Meta-System.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-which-one-should-you-choose"&gt;
  &lt;/a&gt;
  But Which One Should You Choose?
&lt;/h3&gt;

&lt;p&gt;Of course, &lt;strong&gt;the correct tool, as usual, depends on the requirements of your project&lt;/strong&gt;. For an API, Apiary might be your best choice, if you want a more generalized documentation you Read the Docs might give you a quick and free way to have your documentation up and running, however if you really want a lot more control over styling and such, docussaurus can really help. There is also a last option which is quite rare though: just make a static website from the ground up. You can use &lt;a href="//reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;, or really anything you want to build a documentation site. It's a lot more work than any of the previous options, but if you truly believe you need to control every single aspect  of your documentation it is still a possibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-final-advice"&gt;
  &lt;/a&gt;
  A Final Advice
&lt;/h3&gt;

&lt;p&gt;In the end it is very much a decision about how much you want/need to customize your docs. The more "pre-made" it is, the easier it will be to start writing your docs. The more "customizable" it is, the more you'll need to do in order to get everything up and running. To summarize, my final advice would be: &lt;strong&gt;choose the tool that fits your necessities without being a production barrier.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After all is set, you can start typing away! Though, that might be as much fun as you expect...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-a-great-netflix-series"&gt;
  &lt;/a&gt;
  Not a Great Netflix Series
&lt;/h2&gt;

&lt;p&gt;You might be a gamer, or maybe a tv shows aficionado, or you just love the musical expression of Bach; either way, there is something you find deeply entertaining, that could have you enjoying it for hours unnoticed; &lt;strong&gt;writing documentation certainly is not one of those things.&lt;/strong&gt; To put it simply, &lt;strong&gt;writing a documentation can be quite boring.&lt;/strong&gt; Not only is it a very repetitive task, but it is often quite time consuming and, although there is no way around that specifically, there are ways to make it less disheartening.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organize-your-workflow"&gt;
  &lt;/a&gt;
  Organize Your Workflow
&lt;/h3&gt;

&lt;p&gt;The first thing I found out truly helped me was organization:  &lt;strong&gt;separate all the docs you'll be writing into related groups&lt;/strong&gt;, not only does this make it easier to manage the files involved, but you can also keep your train of thought: instead of constantly jumping between the multiple subjects your documentation approaches, you can focus on one at a time, making it easier to write the individual entries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettify-it"&gt;
  &lt;/a&gt;
  Prettify It
&lt;/h3&gt;

&lt;p&gt;You should also try making your docs section more interesting: add tables, text formatting, syntax highlighting, maybe even a few images. There is a good chance that &lt;strong&gt;if writing your documentation is boring, so will be the reading.&lt;/strong&gt; However, there is no need to overdo it as well, after all we are trying to write a technical documentation, just make sure it is not a long text wall.&lt;/p&gt;

&lt;p&gt;If you follow all that, you'll have an infallible documentation, though you might still stumble across a very special type of &lt;a href="https://whatis.techtarget.com/definition/PEBCAK-problem-exists-between-chair-and-keyboard"&gt;PEBCAK&lt;/a&gt;, one I usually call...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-teachers-paradox"&gt;
  &lt;/a&gt;
  The Teacher's Paradox
&lt;/h2&gt;

&lt;p&gt;In my opinion writing docs is quite akin to teaching, and therefore it also holds a similar problem: whenever you are trying to teach someone, you will need to know two things: the topic you are about to teach and what the student doesn't know, and the last one is quite a challenge. After all, &lt;strong&gt;how do you know what you don't know?&lt;/strong&gt;... Now, let's not get too Socratic about it; the point is: it's difficult to put yourself in the place of someone who does not know about the topic since you already do, and that makes the process of teaching (or documenting in this case) slightly troublesome. In order to minimize such problems, I'd recommend keeping a few things in mind:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-cant-know-what-they-dont"&gt;
  &lt;/a&gt;
  You Can't Know What They Don't
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Do not expect the reader to have any previous knowledge.&lt;/strong&gt; There is no way to know if your user got to a section following your docs topics, if they are coming from one of your tutorials or from an external link. Therefore you can't be certain they already know something they should. The best way to solve this is to simply &lt;a href="https://mapikit.github.io/meta-system-docs/docs/api-docs/architecture/extending-functionality"&gt;&lt;strong&gt;make sure to provide every link possible&lt;/strong&gt;&lt;/a&gt;. If there is an inhouse term you use to specify something, make sure to link to a section explaining it whenever it appears. A concept required for further understanding of the docs? Link it. A program or lib required for your software to work? Link it. &lt;strong&gt;There is no way to know what your reader doesn't, but there is a way to make sure they are not lost when that inevitably happens.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-more-generalist-the-better"&gt;
  &lt;/a&gt;
  The More Generalist the Better
&lt;/h3&gt;

&lt;p&gt;Always try to &lt;strong&gt;provide multiple approaches for learning about your software.&lt;/strong&gt; Some people will be more pleased to see a text describing the intrinsics of the code or how it is expected to work; others just want a few quick examples to understand the basics of what to expect from a certain situation. Whether you are one or the other, &lt;strong&gt;make sure to provide both a good text as well as good examples&lt;/strong&gt;. Examples are always a nice way to solve misunderstandings that might have arised in the text, while plain text is really the only good way to explain something in a completely generic way.&lt;/p&gt;

&lt;p&gt;After all that you probably have a full documentation page that contains all your software info in an intelligible way, without being too overwhelming or boring. Maybe you achieved all that without using some of the techniques mentioned here. So tell us, what was your experience writing your documentation? Which tools did you use that you regret and which ones saved your life and sanity?&lt;/p&gt;

</description>
      <category>writing</category>
      <category>opensource</category>
      <category>discuss</category>
      <category>documentation</category>
    </item>
    <item>
      <title>JS Features - Why JS will be the future? :)</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 23 Nov 2021 21:03:35 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/js-features-why-js-will-be-the-future--53j3</link>
      <guid>https://dev.to/whitehatdevv/js-features-why-js-will-be-the-future--53j3</guid>
      <description>&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;, I am sure you have been heart about it, it one of the most commented programming language, for instance, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JS looks really easy to learn. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All this staff is the main reason why JS acceptance is growing exponentially, I should say you, &lt;em&gt;you must learn JS 🤩&lt;/em&gt;, however, why?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JS is really easy to learn: Yes 😏, easier than other programming language, normally, you will be able to learn it in one or two weeks, his sintaxis looks petty sugar, it's such &lt;strong&gt;jam&lt;/strong&gt; 😜&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clbWTQV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517300143/IKJfXRL2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clbWTQV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517300143/IKJfXRL2o.png" alt="Javascript syntax.png" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;computeDNILetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dni&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// separamos las partes del dni&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dniParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dni&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// comprobarmos el valor&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;99999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//obtenemos el indice de la letra&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theoricalLetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// obtenermos la letra&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;letrasDNI&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theoricalLetter&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//comprobamos las letras&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;dniParts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DNI y letra correctos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error, su letra no es correcta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;El dni introducido no es correcto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am sure you have not understood anything, but do not worry, only you have to focus in JS sugar sintaxis 🧐.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can use JS to interact with DOM. &lt;strong&gt;Yes&lt;/strong&gt;, you will be able to create HTML structures from JS and create listeners to act for different user actions, like click on a button. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycoj6XOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517311455/sF1B6ArTR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycoj6XOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637517311455/sF1B6ArTR.png" alt="Js DOM.png" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//crear evento&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keyup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Estamos cambiando el evento&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//TODO: REFACTORIZAR&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, Javascript allows you to work from a server or client side, as I explained you in &lt;strong&gt;past posts&lt;/strong&gt;, it makes JS really versatile, you only need to learn one programming language to be a &lt;em&gt;Full Stack web developer&lt;/em&gt;, yes *&lt;em&gt;you should start learning JS right now. *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's not all, it also is compatible with all &lt;strong&gt;CMS&lt;/strong&gt; such &lt;em&gt;Wordpress, Prestashop, Magento, Shopify&lt;/em&gt;, you can use JS wherever you want, only you will have to apply different programming paradigms to accomplish the different goals you can have. I recommend you start learning JS after reading this Post, the time does not stop and you do not know JS yet 😤.&lt;/p&gt;

&lt;p&gt;I am thinking to start a JS course for everyone who want to learn JS without any &lt;strong&gt;programming experience&lt;/strong&gt;, we need to create a group of five people to start coding and learning right now 🥰. I will open 5 seats in my JS school, if you are interested in being one of these people who will code with JS like seniors please leave a comment in this post, I will reach you out with more details about it. &lt;/p&gt;

&lt;p&gt;I hope you have been &lt;strong&gt;enjoyed&lt;/strong&gt; reading this post 😜. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>functional</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 23 Nov 2021 21:01:38 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3nkk</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3nkk</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seeing-the-forest-for-the-abstract-syntax-trees"&gt;
  &lt;/a&gt;
  Seeing the forest for the (Abstract Syntax) Trees
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aruna"&gt;@aruna&lt;/a&gt;
 helps us get beyond a cursory understanding of Abstract Syntax Trees (AST) in this post&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aruna" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2Uujvez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6Ln-mF0r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/744146/9920abb3-d96c-4003-918f-382230018c7d.jpg" alt="aruna"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aruna/abstract-syntax-trees-theyre-used-everywhere-but-what-are-they-jh6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Abstract Syntax Trees: They're Actually Used Everywhere -- But What Are They?&lt;/h2&gt;
      &lt;h3&gt;aruna-x ・ Nov 17 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-benefits-and-risks-of-contract-development"&gt;
  &lt;/a&gt;
  The benefits and risks of contract development
&lt;/h2&gt;

&lt;p&gt;If you're interested in working as a contract developer &lt;a class="mentioned-user" href="https://dev.to/hrishio"&gt;@hrishio&lt;/a&gt;
 has made a pretty strong case for it.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hrishio/why-should-you-become-a-contractor-the-3-big-benefits-of-contracting-11o9" class="video-image"&gt;
    &lt;span class="video-timestamp"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl4ssD2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/video-camera-9a2eda0979fd9ce3933037481ee8828557b6c7f5533e1de458b8c2648a60b097.svg" alt="video camera" width="491" height="491"&gt;
      37:07&lt;/span&gt;
  &lt;/a&gt;
  &lt;a href="/hrishio" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-s0Ws01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Dyni76k3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/27240/06c84b8c-a38d-4f6f-a2ff-64d8ab1345b7.jpg" alt="hrishio"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hrishio/why-should-you-become-a-contractor-the-3-big-benefits-of-contracting-11o9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why should you become a contractor? - The 3 big benefits of contracting&lt;/h2&gt;
      &lt;h3&gt;Hrishi Mittal ・ Nov 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#worklifebalance&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#freelancing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#resume&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#shedding-some-light-on-developer-relations-engineering"&gt;
  &lt;/a&gt;
  Shedding some light on developer relations engineering
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/josefine"&gt;@josefine&lt;/a&gt;
 asked the questions we've all had about DevRel in this interview. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/s2engineers" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbQ0yEJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jcJ1yWF7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2029/7ed5faf1-5170-46b9-8906-316c8ffabffe.png" alt="SinnerSchrader Engineers" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ieDxR7-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0vXjIZbl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346852/7f60ac10-beec-4ac9-804c-ce508de15d09.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/s2engineers/what-does-a-developer-relations-engineer-do-4pep" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What does a Developer Relations Engineer do?&lt;/h2&gt;
      &lt;h3&gt;Josefine Schfr for SinnerSchrader Engineers ・ Nov 17 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developerrelation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codeiscolorful&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#rebuilding-a-blog"&gt;
  &lt;/a&gt;
  Rebuilding a blog
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/abbeyperini"&gt;@abbeyperini&lt;/a&gt;
 is back with a new installment of their series about accessibility auditing their portfolio site. In this post, they explore their blog page. Don't miss the final installment, coming up soon!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abbeyperini" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UuobrI1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iDg9T8Gp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/564890/f7a591dc-af18-49d4-af2f-62898415ea67.jpeg" alt="abbeyperini"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abbeyperini/blog-page-accessibility-deep-dive-1hbl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Blog Page Accessibility Deep Dive&lt;/h2&gt;
      &lt;h3&gt;Abbey Perini ・ Nov 20 ・ 22 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-most-welcome-brain-massage"&gt;
  &lt;/a&gt;
  A most welcome brain massage
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/mustapha"&gt;@mustapha&lt;/a&gt;
 created a stunningly relaxing animation that I guarantee you won't regret taking a peek at. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/mesmerizing-animation-using-only-css-rotations-229l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Mesmerizing animation using only CSS rotations 🧘‍♀️&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Nov 18 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#kickstart-your-next-personal-project"&gt;
  &lt;/a&gt;
  Kickstart your next personal project
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/unclebigbay"&gt;@unclebigbay&lt;/a&gt;
 walks us through setting up a Node.js backend project, connecting it to a database, writing your backend CRUD logic, and testing it using Hoppscotch. This thorough tutorial will help you kickstart your personal project &lt;em&gt;and&lt;/em&gt; apply it in any backend project.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/unclebigbay" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4spKPsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5t_SGSho--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/381721/2f2a6766-6596-4883-9d5f-6df92f2e0182.jpg" alt="unclebigbay"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/unclebigbay/creating-your-first-crud-restful-api-with-nodejs-and-hoppscotch-4lc7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating your First CRUD Restful API with Node.JS and Hoppscotch&lt;/h2&gt;
      &lt;h3&gt;Unclebigbay ・ Nov 20 ・ 16 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#backend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#express&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#you-are-not-alone-and-you-are-loved"&gt;
  &lt;/a&gt;
  "You are not alone, and you are loved"
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"We are not alone, not in the greatest chaos, nor in the most thorough systems of order we could imagine. Alone we will fail, but together we can achieve so much more, and that's a lesson I wish I had learned much earlier in my life."&lt;/em&gt;&lt;br&gt;
-&lt;a class="mentioned-user" href="https://dev.to/baweaver"&gt;@baweaver&lt;/a&gt;
 ❤️ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/baweaver" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNigK_I7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rrim98LT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129384/bc4c54aa-bacc-4804-8de6-edc3ff7a173b.png" alt="baweaver"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/baweaver/tales-of-the-autistic-developer-order-and-chaos-2o0p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Tales of the Autistic Developer – Order and Chaos&lt;/h2&gt;
      &lt;h3&gt;Brandon Weaver ・ Nov 19 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#autism&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#adhd&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Html And The Mystery Of The Skeletons</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 23 Nov 2021 21:01:02 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/html-and-the-mystery-of-the-skeletons-1ef8</link>
      <guid>https://dev.to/whitehatdevv/html-and-the-mystery-of-the-skeletons-1ef8</guid>
      <description>&lt;p&gt;Ready? Round 2! ❤️&lt;/p&gt;

&lt;p&gt;Hi! Remember when in the previous post I told you what HTML was, what it looked like and what the attributes were? well, it's time to start playing with it. So grab paper and pencil and let's get started! &lt;/p&gt;

&lt;p&gt;Ok, we know that the tags look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; ....... some content .....&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we must take into account the following points&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is not the same &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;lt;H1&amp;gt;&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Tags are generally always lowercase. &lt;/li&gt;
&lt;li&gt;We must close the tags so that they always work.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#but-how-do-you-compose-them-to-create-an-html-document"&gt;
  &lt;/a&gt;
  But how do you compose them to create an HTML document?
&lt;/h1&gt;

&lt;p&gt;Well this is the basic structure :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
         &lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                       &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;    
                  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
                        &lt;span class="c"&gt;&amp;lt;!-- All the content here --&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kmyO0Jnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637066189926/SHr7gG2g_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kmyO0Jnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637066189926/SHr7gG2g_.png" alt="htmlSimpleStructure.png" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if at the beginning you don't understand too, it's normal, later I will explain you how each tag works.&lt;br&gt;
Trying to compare HTML basic structure with a body, with head, body and limbs, and HTML works as if they were the bones, in which the rest of the document, photos, videos, etc.. is supported.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#everything-that-appears-in-the-body-section-what-will-be-displayed-on-the-page-are"&gt;
  &lt;/a&gt;
  Everything that appears in the body section what will be displayed on the page are.
&lt;/h2&gt;

&lt;p&gt;Well, and as they say: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will not learn how to code keeping you ass in your sofa 😃.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I advise you to use this playground to practice what you have just learnt today&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/"&gt;Code pen &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the section that says HTML you are going to paste the code that I proposed you in basic structure, and inside where it says body you are going to write the following tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;     &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go, you are creating a HTML code like any good programmer who respects himself! 😉&lt;/p&gt;

&lt;p&gt;But I do not want you to stay with the desire for more so I pass a series of tags and their functionalities for you to play a while and go testing little by little.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; =&amp;gt; Create a title

&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src =&lt;/span&gt;&lt;span class="s"&gt;" URL "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; =&amp;gt; Insert an image in the document.  

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; =&amp;gt; Insert a paragraph in the document

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt; =&amp;gt; create a list of points 
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;  
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt; =&amp;gt; you fill that list with this tag
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; 


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well I leave you with the task:&lt;/p&gt;

&lt;p&gt;Create a document which you put a picture of a puppy and a description in, also, you should try to include a few items inside a list.&lt;/p&gt;

&lt;p&gt;In the next post we will learn how to improve this so stay tuned! &lt;br&gt;
Well friends!! That's all for the moment, you have for a while, and remember: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do what you love every day and try to be the best version of you! &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>HTML5  and the myth of the markups language</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 23 Nov 2021 20:57:48 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/html5-and-the-myth-of-the-markups-language-4cfk</link>
      <guid>https://dev.to/whitehatdevv/html5-and-the-myth-of-the-markups-language-4cfk</guid>
      <description>&lt;p&gt;Have you ever googled something, no matter what it is, a recipe, a meme or even a school assignment, and prayed that the answer would show up on a web page? I have too, and that's why on more than one occasion I've wondered how it worked that got me out of troubles.&lt;br&gt;
And that's the reason for this course, to explain from the basics to the most advanced HTML and how websites are organized, how to give them color with CSS3 and life with JavaScript.&lt;/p&gt;

&lt;p&gt;Okay! to start with this:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-html-and-what-does-it-do-you-can-ask-me-or-not"&gt;
  &lt;/a&gt;
  WHAT IS HTML and WHAT DOES IT DO? (you can ask me or not...)
&lt;/h2&gt;

&lt;p&gt;HTML stands for (hypertext markup language) that although many call it "programming language" should insist to stop considering it as such, because it is something even more magical is a "markup language" because it organizes how a document will be, what elements compose it, in short it is like making a Word document for the Internet.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-it-look-like"&gt;
  &lt;/a&gt;
  WHAT DOES IT LOOK LIKE?
&lt;/h2&gt;

&lt;p&gt;As I have said so far, HTML is a markup language and not a scripting language, but what does this mean? It means that it is enclosed between tags (angle brackets), so it would look like this a :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;content&lt;span class="nt"&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However this is not always the case, there are tags that do not need the enclosing tag, for example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that's not all... we can... add... ATTRIBUTES! YES! just as you read ATTRIBUTES! but what are they? they are like "upgrades" of the tags that allow them to get superpowers to improve their capabilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tag&lt;/span&gt; &lt;span class="na"&gt;attribute=&lt;/span&gt;&lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;content&lt;span class="nt"&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems interesting, doesn't it? Well, don't worry, in the next posts I'll be telling you a little more so you won't be left wanting. See you in the next one ! and remember to do what you love every day.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploy a MySQL database server in Kubernetes - Static</title>
      <author>Musole Masu</author>
      <pubDate>Tue, 23 Nov 2021 20:39:47 +0000</pubDate>
      <link>https://dev.to/musolemasu/deploy-a-mysql-database-server-in-kubernetes-static-dpc</link>
      <guid>https://dev.to/musolemasu/deploy-a-mysql-database-server-in-kubernetes-static-dpc</guid>
      <description>&lt;p&gt;In this tutorial, you are going to learn how to deploy a MySQL database server in a Kubernetes Cluster set up in a local machine, this is one of many ways to persist data in Kubernetes.&lt;/p&gt;

&lt;p&gt;Kubernetes is a tool for automating deployment, scaling, and management of containerized applications.&lt;/p&gt;

&lt;p&gt;Get familiar with some terminologies and kubernetes objects that will be used through this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Docker Image&lt;/code&gt;: A collection of files that packs together all the necessities needed to set up a completely functional container,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Container&lt;/code&gt;: An instance of an image, a running image,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Node&lt;/code&gt;: A Kubernetes Object, a virtual machine that runs a container and provide resources,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Kubernetes Cluster&lt;/code&gt;: A collection of nodes and configurations to manage them,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Pod&lt;/code&gt;: A Kubernetes object, a running container, the smallest deployable units of computing that can be created and managed in kubernetes,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Deployment&lt;/code&gt;: A Kubernetes Object, that monitors set of pods, it make sure that those pods are running and make sure to restart pods if they are down,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Service&lt;/code&gt;: A Kubernetes Object that provides a way to access a running container(pod),&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Persistent Volume&lt;/code&gt;: A Kubernete object, is a piece of storage in the cluster,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Persistent Volume Claim&lt;/code&gt;: A request for the Persistent Volume storage,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Kubernetes Config file&lt;/code&gt;: A file that tells Kubernetes about the different Objects to be created. It's written in YAML syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technically, you will create a &lt;code&gt;Deployment&lt;/code&gt; that will manage a &lt;code&gt;Pod&lt;/code&gt; running a container of a MySQL docker image, then you will create a &lt;code&gt;Service&lt;/code&gt; that will permit access to the pod. This pod will request for storage (using &lt;code&gt;Persistent Volume Claim&lt;/code&gt;) to a storage resource (&lt;code&gt;Persistent Volume&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A Persistent Volume can be created statically or dynamically. In the next phase of this tutorial, you learn how to do it statically.&lt;/p&gt;

&lt;p&gt;For this tutorial to go smooth, you will need to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker in your machine, click &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04"&gt;HERE&lt;/a&gt; to install;&lt;/li&gt;
&lt;li&gt;Local Kubernetes Cluster via &lt;code&gt;Minikube&lt;/code&gt;, click &lt;a href="https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/"&gt;HERE&lt;/a&gt; to install minikube,&lt;/li&gt;
&lt;li&gt;Optionally, you can create a Docker Hub account &lt;a href="https://hub.docker.com/"&gt;HERE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-build-a-persistent-volume-pv"&gt;
  &lt;/a&gt;
  1. Build a Persistent Volume (PV)
&lt;/h2&gt;

&lt;p&gt;First, create a working directory and navigate in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir mysql-kube
$ cd mysql-kube/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a yaml file named &lt;code&gt;mysql-pv.yaml&lt;/code&gt;, put in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and close the file.&lt;/p&gt;

&lt;p&gt;This yaml file once applied in kubernetes, will provision a &lt;code&gt;Persistent Volume&lt;/code&gt;, for the MySQL database server &lt;code&gt;Pod&lt;/code&gt;. The persistent volume will not depend on the pod's lifecycle. This means that anytime the pod restarts due to a crash or a malfunction, the provisioned storage will survive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-build-a-persistent-volume-claim-pvc"&gt;
  &lt;/a&gt;
  2. Build a Persistent Volume Claim (PVC)
&lt;/h2&gt;

&lt;p&gt;In the working directory &lt;code&gt;mysql-kube/&lt;/code&gt;, create a file named &lt;code&gt;mysql-pvc.yaml&lt;/code&gt;, put the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Up there, you created the file that will provision a storage when applied, this file on the other hand will create a &lt;code&gt;Persistent Volume Claim&lt;/code&gt; that will be used by the MySQL Pod to request for that provisioned storage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-mysql-pods-deployment"&gt;
  &lt;/a&gt;
  3. MySQL pod's deployment
&lt;/h2&gt;

&lt;p&gt;Here you are going to create a file named &lt;code&gt;mysql-deployment.yaml&lt;/code&gt; in the same directory, &lt;code&gt;mysql-kube/&lt;/code&gt;. Create the file and put the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:8.0
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will create a deployment object to manage a Pod running a container of MySQL docker image and in its specifications, there is a reference to the &lt;code&gt;Persistent Volume Claim&lt;/code&gt; that the pod will use to request for the &lt;code&gt;Persistent Volume&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UwY2oKrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txo13brtj1ie9ngoskk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UwY2oKrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txo13brtj1ie9ngoskk9.png" alt="Mysql docker image" width="880" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before applying this deployment file, create a service object that will permit other pods to access the MySQL database pod that will be created.&lt;br&gt;
Still in the &lt;code&gt;mysql-kube/&lt;/code&gt; directory, create a yaml file named &lt;code&gt;mysql-service.yaml&lt;/code&gt; and put the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file, make sure that your Kubernetes cluster is up and running. Open the terminal and navigate to &lt;code&gt;mysql-kube/&lt;/code&gt; run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ minikube start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5y7PvsU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0svp3518gzy6m4oxbst7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5y7PvsU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0svp3518gzy6m4oxbst7.png" alt="Minikube start" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Minikube quickly sets up a local Kubernetes cluster on macOS, Linux, and Windows.&lt;br&gt;
Now, let's tell Kubernetes that we want to use all config files created. Run these commands in the &lt;code&gt;mysql-kube/&lt;/code&gt; in the sequential order below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step 1&lt;/strong&gt;: Create the Persistent Volume
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl apply -f mysql-pv.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQcUoQjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqp416n0ee3cdt0td23g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQcUoQjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqp416n0ee3cdt0td23g.png" alt="Persistent Volume" width="782" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step 2&lt;/strong&gt;: Create the Persistent Volume Claim
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl apply -f mysql-pvc.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PG9__nq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rz3f3st95fjpczbwo00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PG9__nq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rz3f3st95fjpczbwo00.png" alt="Persistent Volume Claim" width="787" height="80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step 3&lt;/strong&gt;: Create the Deployment
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl apply -f mysql-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plnfS9dC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysr6h2ix2jvwaw82crf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plnfS9dC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysr6h2ix2jvwaw82crf6.png" alt="Deployment" width="790" height="88"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step 4&lt;/strong&gt;: Create the Service
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl apply -f mysql-service.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6l6xui55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhwaz0nlhkmehyc6y1td.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6l6xui55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhwaz0nlhkmehyc6y1td.png" alt="Service" width="793" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This sequence of commands created a &lt;code&gt;Persistent Volume&lt;/code&gt;, a &lt;code&gt;Persistent Volume Claim&lt;/code&gt;, a &lt;code&gt;Deployment&lt;/code&gt; that manages a &lt;code&gt;Pod&lt;/code&gt; running a &lt;code&gt;container&lt;/code&gt; of a mysql docker image and a &lt;code&gt;Service&lt;/code&gt; that permits access to that Pod.&lt;/p&gt;

&lt;p&gt;Check if your kubernetes objects were successfully created with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deployment&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get deployments
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2wvgXfdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi76xgwwusbp8rn42ml6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2wvgXfdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi76xgwwusbp8rn42ml6.png" alt="Kubectl Depl" width="703" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pod&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MlkxsWCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmjxwauwbr7mzfdd4c4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MlkxsWCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmjxwauwbr7mzfdd4c4m.png" alt="get-pods" width="705" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Service&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get services
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GodsXs-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wybzhaspafrxoxu8upzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GodsXs-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wybzhaspafrxoxu8upzj.png" alt="Pod service" width="709" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You did great so far, now run a test to create a Pod running a MySQL container that connects to the MySQL database server Pod as a client;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl run -it --rm --image=mysql:8.0 --restart=Never mysql-client -- mysql -h mysql -password="password"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command runs the MySQL container in an interactive mode, which allows you to execute commands at the time of running the container.&lt;br&gt;
A MySQL  shell will open and you could create new databases, new tables, insert data to tables and do more SQL commands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UimnQ3mN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhd5rizi2uyd24prbcgh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UimnQ3mN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhd5rizi2uyd24prbcgh.png" alt="sql SHELL" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-conclusion"&gt;
  &lt;/a&gt;
  4. Conclusion
&lt;/h2&gt;

&lt;p&gt;With this, you learnt through kubernetes Objects how to deploy a MySQL database server in a Kubernetes Cluster using a static method of provisioning storage.&lt;/p&gt;

&lt;p&gt;Also you tested how to connect a client to that deployed server, by executing SQL commands when running the container in interactive mode. &lt;/p&gt;

&lt;p&gt;If you have questions, comments, please feel free to reach out here or on my &lt;a href="https://twitter.com/MusoleMasu"&gt;Twitter&lt;/a&gt;; I will be more than happy to answer.&lt;/p&gt;

&lt;p&gt;See you soon..&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>kubernetes</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Reusing SVG elements in HTML without copy-pasting it
</title>
      <author>Bartłomiej Stefański</author>
      <pubDate>Tue, 23 Nov 2021 20:30:05 +0000</pubDate>
      <link>https://dev.to/bmstefanski/reusing-svg-elements-in-html-without-copy-pasting-it-3hfo</link>
      <guid>https://dev.to/bmstefanski/reusing-svg-elements-in-html-without-copy-pasting-it-3hfo</guid>
      <description>&lt;p&gt;Sometimes you might encounter the case where you want to use the same SVGs multiple times across one page. The first example that comes to my mind is the use of social media icons both in the navbar and footer. This is how I would approach this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="c1"&gt;// Invisible symbol  &lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2.0"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;defs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;symbol&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"linkedin-badge"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
          /* This is where you would put the contents of the SVG 
          (everything that is inside SVG tag except the tag itself)  */
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;defs&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;use&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#linkedin-badge"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   


    &lt;span class="c1"&gt;// And this is how you would use it  &lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;  
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt;  
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt;  
      &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 32 32"&lt;/span&gt;  
      &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2.0"&lt;/span&gt;  
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;use&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#linkedin-badge"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;  
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
  &lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you can just copy-paste it, but it will make the size of your HTML document bigger and delay the FCP.&lt;br&gt;
You could also export it to a file, and load it through the image element, but it would cause flicks, which you probably don't want to have, especially when the element is above the fold.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>svg</category>
      <category>performance</category>
    </item>
    <item>
      <title>Up-to-date Docker Images</title>
      <author>Jauder Ho</author>
      <pubDate>Tue, 23 Nov 2021 20:26:16 +0000</pubDate>
      <link>https://dev.to/jauderho/update-docker-images-13lj</link>
      <guid>https://dev.to/jauderho/update-docker-images-13lj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;Monitor upstream repos, update to the latest tagged version and commits the changes. This then trigger downstream yml files to start a new build. This runs hourly and hence new upstream releases are picked up quickly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jauderho/dockerfiles/blob/main/.github/workflows/update.yml"&gt;https://github.com/jauderho/dockerfiles/blob/main/.github/workflows/update.yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jauderho/dockerfiles/blob/main/scripts/updateDockerImages.sh"&gt;https://github.com/jauderho/dockerfiles/blob/main/scripts/updateDockerImages.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>How Javascript Code is Executed?</title>
      <author>Magnus</author>
      <pubDate>Tue, 23 Nov 2021 20:08:18 +0000</pubDate>
      <link>https://dev.to/magnus0045/how-javascript-code-is-executed-3664</link>
      <guid>https://dev.to/magnus0045/how-javascript-code-is-executed-3664</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mU9Kl3Nn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ainkdfnlg2piwhf9ayj7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mU9Kl3Nn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ainkdfnlg2piwhf9ayj7.PNG" alt="JS Code Eg" width="265" height="155"&gt;&lt;/a&gt;&lt;br&gt;
When the above javascript code is run, a global execution context is created. If you want to know about &lt;a href="https://dev.to/magnus0045/how-javascript-works-and-execution-context-98h"&gt;execution context&lt;/a&gt; refer to my earlier post.&lt;/p&gt;

&lt;p&gt;Execution Context is created in two phases.&lt;br&gt;
1st Phase: Memory Creation Phase   2nd Phase: Code Execution phase&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Memory Creation Phase&lt;/strong&gt; which is first phase when we run the code Javascript will run through the whole code from top to bottom line by line and allocate memory to all the variable and functions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9uK4mBO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi3zh8ou08iemb7co89q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9uK4mBO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi3zh8ou08iemb7co89q.PNG" alt="Execution Step1" width="639" height="369"&gt;&lt;/a&gt;&lt;br&gt;
the variables i.e &lt;strong&gt;n&lt;/strong&gt; and &lt;strong&gt;squareNum&lt;/strong&gt; stores a special value called undefined in memory space in this phase and in case of &lt;strong&gt;function&lt;/strong&gt; it stores whole code of the function in memory space.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Code Execution Phase&lt;/strong&gt; which is the second phase the javascript will again run through the code from top to bottom line by line. In this phase all calculation and functions are done&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d41rxI4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g584jv7r85wzq3zdneui.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d41rxI4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g584jv7r85wzq3zdneui.PNG" alt="Execution Step 2" width="737" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in this phase, first line of code is executed and value of n is changed to &lt;strong&gt;2&lt;/strong&gt; from &lt;strong&gt;undefined&lt;/strong&gt;&lt;br&gt;
In &lt;strong&gt;line number 2-6&lt;/strong&gt; of the code in the above image there is nothing to execute. So,it goes to &lt;strong&gt;line number 7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In line number 7&lt;/strong&gt; ,it is a function invocation code i.e &lt;strong&gt;var squareNum=square(n);&lt;/strong&gt;.So, everytime a function is invoked a &lt;strong&gt;new execution context&lt;/strong&gt; is created. The reason is that the functions are like mini programs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L7UF4qta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbhxbfb2kxf9hb6bvtmm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7UF4qta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbhxbfb2kxf9hb6bvtmm.PNG" alt="Execution Step3" width="691" height="422"&gt;&lt;/a&gt;&lt;br&gt;
In the similar manner there is memory creation phase and code execution phase in this &lt;strong&gt;new execution context&lt;/strong&gt; which is created because of function invocation.&lt;br&gt;
&lt;strong&gt;Memory Execution Phase&lt;/strong&gt; of new execution context&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZL7uz51g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcmh2iszfieyaug99do9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZL7uz51g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcmh2iszfieyaug99do9.PNG" alt="Execution Step 4" width="822" height="456"&gt;&lt;/a&gt;&lt;br&gt;
In &lt;strong&gt;Code Excecution Phase&lt;/strong&gt; of new execution context the value of num is changed to 2 from undefined.I.e n=2 is passed to num in &lt;strong&gt;line number 2&lt;/strong&gt; of the code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhyXGDsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usybgdxzv39ljp9br6h3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhyXGDsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usybgdxzv39ljp9br6h3.PNG" alt="Execution Step 5" width="786" height="412"&gt;&lt;/a&gt;&lt;br&gt;
In code execution phase then the calcution i.e &lt;strong&gt;num*num&lt;/strong&gt; is done in &lt;strong&gt;line number 4&lt;/strong&gt; and the value is placed into &lt;strong&gt;ans&lt;/strong&gt; variable&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nRIea7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwgamvlelbeopxtssti7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nRIea7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwgamvlelbeopxtssti7.PNG" alt="Execution Step 6" width="773" height="404"&gt;&lt;/a&gt;&lt;br&gt;
Now in &lt;strong&gt;line number 5&lt;/strong&gt; return statement is there this &lt;strong&gt;return ans;&lt;/strong&gt; means return the control of the program where the function was invoked i.e to &lt;strong&gt;line number 7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gei-3AJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i4oawbr9jgs70z0h5wq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gei-3AJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i4oawbr9jgs70z0h5wq.PNG" alt="Execution Step 7" width="793" height="422"&gt;&lt;/a&gt;&lt;br&gt;
Now as the execution is over so, the &lt;strong&gt;new execution context&lt;/strong&gt; which was created while function invocation will be deleted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dj6jupyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgngcvslhun0byunxy6j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dj6jupyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgngcvslhun0byunxy6j.PNG" alt="Execution Step 8" width="676" height="418"&gt;&lt;/a&gt;&lt;br&gt;
After all execution is over then then the &lt;strong&gt;global execution context&lt;/strong&gt; also gets deleted.&lt;/p&gt;

&lt;p&gt;So,this is how the Javascript code is executed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Few extra points to keep in mind.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note:every execution context in put inside a stack which is called as call stack so that it executes in a sequential order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Call Stack Maintains the order of execution of Execution Context”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNUQt1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5o6rksokgdgcu811wpag.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNUQt1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5o6rksokgdgcu811wpag.PNG" alt="Call Stack" width="880" height="390"&gt;&lt;/a&gt;&lt;br&gt;
Once the execution is over. The execution context is popped out i.e remove from the stack.&lt;/p&gt;

&lt;p&gt;Call Stack also known as&lt;br&gt;
1)Execution context stack&lt;br&gt;
2)Program  Stack&lt;br&gt;
3)Control Stack&lt;br&gt;
4)Runtime Stack&lt;br&gt;
5)Machine Stack&lt;/p&gt;

&lt;p&gt;Reference:&lt;a class="mentioned-user" href="https://dev.to/akshaymarch7"&gt;@akshaymarch7&lt;/a&gt;
 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Get Started With ThreeJS</title>
      <author>Shubham Patil</author>
      <pubDate>Tue, 23 Nov 2021 19:33:25 +0000</pubDate>
      <link>https://dev.to/shubhampatilsd/get-started-with-threejs-36mo</link>
      <guid>https://dev.to/shubhampatilsd/get-started-with-threejs-36mo</guid>
      <description>&lt;p&gt;Recently, I used ThreeJS and it was really fun. Today, I'll teach you how to get started with it, with a fun (and simple) tutorial.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://en.wikipedia.org/wiki/Three.js"&gt;stated by Wikipedia&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Three.js is a cross-browser JavaScript library and application programming interface (API) used to create and display animated 3D computer graphics in a web browser using WebGL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's is the finished product:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zYeo33zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59oimfog3q4k2q5u26kh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYeo33zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59oimfog3q4k2q5u26kh.gif" alt="rotating plane" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also made a &lt;a href="https://threejs-tutorial-demo.vercel.app/"&gt;demo&lt;/a&gt; of the finished product.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#react"&gt;React Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#threejs"&gt;ThreeJS Setup&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm going to do this in React, but most of this stuff should apply for plain HTML CSS and JS. The ThreeJS docs have a really nice &lt;a href="https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene"&gt;starter guide&lt;/a&gt; to get you up and running with vanilla JS, so do check it out. If you haven't done React before, I would suggest watching [this video[(&lt;a href="https://www.youtube.com/watch?v=MRIMT0xPXFI"&gt;https://www.youtube.com/watch?v=MRIMT0xPXFI&lt;/a&gt;) by Aaron Jack to get you started as fast as possible.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-setup"&gt;
  &lt;/a&gt;
  React Setup &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Anyways, let's initialize a React project. If you want, you could also use something like &lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt;, but I'm sticking to &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; for now.&lt;/p&gt;

&lt;p&gt;I'm using &lt;code&gt;yarn&lt;/code&gt; to initialize my project, so here are the two commands (one with &lt;code&gt;npm&lt;/code&gt; and the other with &lt;code&gt;yarn&lt;/code&gt;) to create a React project.&lt;/p&gt;

&lt;p&gt;npm: &lt;code&gt;npx create-react-app threejs-learning&lt;/code&gt;&lt;br&gt;
yarn &lt;code&gt;yarn create react-app threejs-learning&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And yes, as &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;explained by the React docs&lt;/a&gt;, &lt;code&gt;npx&lt;/code&gt; is not a typo (it's something to run scripts that comes with &lt;code&gt;npm&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;When you initialize the project, you'll see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvGcL1cz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1emx3llnvhxvcbwgngng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvGcL1cz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1emx3llnvhxvcbwgngng.png" alt="New Project Structure" width="169" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Disregard this for now (we'll deal with the unnecessary files later). What you should do is start the server so you can see what the boilerplate looks like.&lt;/p&gt;

&lt;p&gt;To do that, run the command that corresponds to what you initalized the project with:&lt;br&gt;
yarn: &lt;code&gt;yarn start&lt;/code&gt;&lt;br&gt;
npm: &lt;code&gt;npm run start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will open up a browser tab at &lt;code&gt;http://localhost:3000&lt;/code&gt; and you'll see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4WYZ6_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w5cfnwhumgjikmn9wut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4WYZ6_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w5cfnwhumgjikmn9wut.png" alt="Starter template" width="686" height="696"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great job you now have a React project set up!&lt;/p&gt;

&lt;p&gt;Back to your editor now. In the &lt;code&gt;src&lt;/code&gt; folder, you'll see these files: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UkWaaob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmqo9omlo6fi2z21xevg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UkWaaob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmqo9omlo6fi2z21xevg.png" alt="src folder structure" width="164" height="199"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, you can delete &lt;code&gt;App.css&lt;/code&gt;, &lt;code&gt;App.test.js&lt;/code&gt;, &lt;code&gt;index.css&lt;/code&gt;, &lt;code&gt;logo.svg&lt;/code&gt;, &lt;code&gt;reportWebVitals.js&lt;/code&gt;, and &lt;code&gt;setupTests.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Shoot! If you look back at the browser tab, we encounter an error:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynsD6KIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn5xiujkvkl02ssjhs7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynsD6KIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn5xiujkvkl02ssjhs7d.png" alt="Files not found error" width="880" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you take a look back at the &lt;code&gt;App.js&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt; files in your editor, you'll see that they are importing some of the files we deleted, thus resulting in an error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;App.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./reportWebVitals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The solution is simple and requires only a couple keys. Just delete those lines from each file 🤪.&lt;/p&gt;

&lt;p&gt;But some further works still needs to be done. Our code is still using the stuff we imported.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt;, after deleting the imports, your file should look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// If you want to start measuring performance in your app, pass a function&lt;/span&gt;
&lt;span class="c1"&gt;// to log results (for example: reportWebVitals(console.log))&lt;/span&gt;
&lt;span class="c1"&gt;// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals&lt;/span&gt;
&lt;span class="nx"&gt;reportWebVitals&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We need to delete the &lt;code&gt;reportWebVitals();&lt;/code&gt; and the &lt;code&gt;&amp;lt;React.StrictMode&amp;gt;&lt;/code&gt; since we removed the imports for that.&lt;/p&gt;

&lt;p&gt;This is &lt;code&gt;index.js&lt;/code&gt; after those changes:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, let's fix &lt;code&gt;App.js&lt;/code&gt;. This is how it should look like right now:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Edit &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;src/App.js&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; and save to reload.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-link"&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://reactjs.org"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Learn React
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Just delete everything in the &lt;code&gt;return();&lt;/code&gt; function and replace it with a simple &lt;code&gt;&amp;lt;h1&amp;gt;I love React!&amp;lt;/h1&amp;gt;&lt;/code&gt;. This is how it should look:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I love React!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Ok great, now we have all the bloat out of our way. Note that this stuff we deleted &lt;em&gt;can&lt;/em&gt; be important if you have a big project, but for now it can be discarded since this a learning project.&lt;/p&gt;

&lt;p&gt;Now, if you save it, you should see this in the browser: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZXCqQiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rsifm8wwbpv7cfa43xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZXCqQiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rsifm8wwbpv7cfa43xa.png" alt="Result after deleting files" width="242" height="98"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#threejs-setup"&gt;
  &lt;/a&gt;
  ThreeJS Setup &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So now we get to interact with ThreeJS. To get started, install it:&lt;/p&gt;

&lt;p&gt;yarn: &lt;code&gt;yarn add three&lt;/code&gt;&lt;br&gt;
npm: &lt;code&gt;npm install three&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Okay, now go into your &lt;code&gt;App.js&lt;/code&gt; file and import ThreeJS like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, change your &lt;code&gt;&amp;lt;h1&amp;gt;I love React!&amp;lt;/h1&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;canvas id="bg"&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt; in the &lt;code&gt;return&lt;/code&gt; function of the component. This is so that ThreeJS has something to attach itself on and do its work.&lt;/p&gt;

&lt;p&gt;At this point, we're going to have to do a clever "hack" if you'll call it that. Since the JavaScript loads before the JSX (JSX is the code that looks like HTML), our code is unable to reference the &lt;code&gt;canvas&lt;/code&gt; element if placed before the return statement.&lt;/p&gt;

&lt;p&gt;We're going to have to use something called &lt;code&gt;useEffect&lt;/code&gt; so that ThreeJS runs after the first render and we can access the canvas element.&lt;/p&gt;

&lt;p&gt;Import &lt;code&gt;useEffect&lt;/code&gt; with&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and insert&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;above the &lt;code&gt;return&lt;/code&gt; statement. Here, the empty array as the second argument indicates for the &lt;code&gt;useEffect&lt;/code&gt; hook to only run on the first render, not repeatedly after each one. Traditionally, you would put variable name(s) there so that &lt;code&gt;useEffect&lt;/code&gt; would run after those variable(s) changed, but we only want it to run after the first render.&lt;/p&gt;

&lt;p&gt;Now, in the &lt;code&gt;useEffect&lt;/code&gt;, create a new ThreeJS scene (this scene is where everything will show up):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we have to create a camera. Add a camera with&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1000&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This might be a bit overwhelming, but let me break it down. The first parameter (the &lt;code&gt;75&lt;/code&gt;) is the FOV of the camera. FOV (aka Field of View) is basically how much the camera can see.&lt;/p&gt;

&lt;p&gt;Think of it like this pizza:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgZqIx2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqkde1axh3m3ze7mju79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgZqIx2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqkde1axh3m3ze7mju79.png" alt="Pizza without slice" width="703" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The angle of the missing slice is how much the camera can see. The higher the angle, the more it can see. However, if it's too high, you can get results that don't look right.&lt;/p&gt;

&lt;p&gt;The second parameter is for the aspect ratio of the view. This is basically the ratio of the width : height, and I've done so with the space of the page using the &lt;code&gt;window&lt;/code&gt; object. The next two parameters are how near and far the camera can view objects.&lt;/p&gt;

&lt;p&gt;Next, we have to create a renderer. Below the camera, create a renderer and set the background of the scene:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1000&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGL1Renderer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#bg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x4e9fe5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;canvas&lt;/code&gt; option allows ThreeJS to latch itself on an element in the DOM. The &lt;code&gt;scene.background&lt;/code&gt; enables us to create a color with the &lt;code&gt;#4e9fe5&lt;/code&gt; hex code (which will be our sky).&lt;/p&gt;

&lt;p&gt;Next, add the following code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPixelRatio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;devicePixelRatio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first line sets the pixel ratio, while the second sets the dimensions for the renderer. The third line sets the position for the camera (with the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes, respectively). The last line renders the scene with the camera we made above.&lt;/p&gt;

&lt;p&gt;Now, let's make some lights:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hemiLight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HemisphereLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x444444&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hemiLight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hemiLight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dirLight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DirectionalLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dirLight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirLight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ambientLight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AmbientLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ambientLight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ambientLight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first chunk of code creates a new light, creates a gradient (from colors white to grey) of light from the top to the bottom of the scene. To wrap your head around this concept, I would suggest &lt;a href="https://threejsfundamentals.org/threejs/threejs-lights-hemisphere.html"&gt;this interactive playground&lt;/a&gt; online) We then set the position of the light (with the &lt;code&gt;xyz&lt;/code&gt; axes) and add it to the scene.&lt;/p&gt;

&lt;p&gt;The second chunk sets up a directional light, which is like a traditional light source (it illuminates from a point). We set its color to white, set its position, and add it to the scene.&lt;/p&gt;

&lt;p&gt;The ambient light is basically a light that is illuminating from everywhere in your scene. Think of your scene being put in a ball, which is then illuminated from the inside. We then set it's position to the center of the scene and add it.&lt;/p&gt;

&lt;p&gt;Ok so now we have a basic scene set up. It should look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6ZMdWHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifdpckuxeiysm9nd5qdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6ZMdWHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifdpckuxeiysm9nd5qdg.png" alt="Scene without anything" width="714" height="679"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to get a model in the scene now, to make it interesting. I would suggest going to &lt;a href="https://poly.pizza/"&gt;poly.pizza&lt;/a&gt; and getting a model. I am using &lt;a href="https://poly.pizza/m/7cvx6ex-xfL"&gt;this airplane&lt;/a&gt;, (Attribution for model: Small Airplane by Vojtěch Balák &lt;a href="https://creativecommons.org/licenses/by/3.0/"&gt;CC-BY&lt;/a&gt; via &lt;a href="https://poly.pizza/m/7cvx6ex-xfL"&gt;Poly Pizza&lt;/a&gt;) but I highly recommend you to use any model you want. Download the &lt;code&gt;.glb&lt;/code&gt; format of the object with this button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20b-xEms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kqej6rokvn9avwt2oxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20b-xEms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kqej6rokvn9avwt2oxq.png" alt="Download Button with .obj and .glb files" width="320" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once downloaded, at this &lt;code&gt;.glb&lt;/code&gt; file to the &lt;code&gt;public/&lt;/code&gt; folder in the root of your project.&lt;/p&gt;

&lt;p&gt;At the top of your code, add this to import the &lt;code&gt;GLTFLoader&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GLTFLoader&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three/examples/jsm/loaders/GLTFLoader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, add this code under the ambient light code to import the model:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GLTFLoader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/NAME_OF_FILE.glb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gltf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;gltf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gltf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first line creates a new loader object, so we can load the file. The &lt;code&gt;loader.load&lt;/code&gt; part loads the actual model. The first argument is the &lt;code&gt;.glb&lt;/code&gt; file. The &lt;code&gt;/NAME_OF_FILE.glb&lt;/code&gt; accesses it from the &lt;code&gt;public/&lt;/code&gt; folder, which is replaced by the name of your &lt;code&gt;.glb&lt;/code&gt; file. The second argument is a function that has the resulted model as a varible. We can access the proper model with &lt;code&gt;gltf.scene&lt;/code&gt;, hence why we are adding &lt;em&gt;that&lt;/em&gt; to our scene instead of just &lt;code&gt;gltf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside the function, I am scaling the model down to 80% of its original size since it was way too big for the viewport. Note that this is optional based on how good your model looks. It might even be small, so you can scale it up in that case.&lt;/p&gt;

&lt;p&gt;Next, we have to add an &lt;code&gt;animate()&lt;/code&gt; function. This basically just re-renders our ThreeJS scene constantly. To do that, just create a function like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first line inside of the function acts like a loop (the actual term is recursion). It calls the animate function again inside of itself, so it keeps re-rendering. The next line renders the scene and the camera again. We call the function outside of itself so it can start.&lt;/p&gt;

&lt;p&gt;But wait a minute, nothing shows up in the browser! It's just a blue background! That's because we didn't add controls for the scene. ThreeJS doesn't work without these controls, hence why they are necessary.&lt;/p&gt;

&lt;p&gt;To put them in the scene, import:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three/examples/jsm/controls/OrbitControls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and add this above the &lt;code&gt;function animate()&lt;/code&gt; stuff:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This creates a new object called &lt;code&gt;controls&lt;/code&gt;, which is made from the &lt;code&gt;OrbitControls&lt;/code&gt; class. The constructor of the &lt;code&gt;OrbitControls&lt;/code&gt; has a &lt;code&gt;camera&lt;/code&gt; (which we previously defined), and the domElement to put the controls in (which we set in the creation of the renderer with &lt;code&gt;canvas: document.querySelector("#bg");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, you should see this in the browser!:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xlSwGC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyw4j4uq6q312iuzo6gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xlSwGC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyw4j4uq6q312iuzo6gm.png" alt="Plane in the scene" width="770" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even interact with it by dragging using your left mouse button, scrolling to zoom in, and using right click to move the camera.&lt;/p&gt;

&lt;p&gt;The only problem with this is that when you resize the window, it becomes really, &lt;em&gt;REALLY&lt;/em&gt; distorted:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gz8-eMJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lyixu21310j27g9r7p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gz8-eMJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lyixu21310j27g9r7p2.png" alt="distorted plane" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is definitely not what we want, so let's change that. Above the place where you defined your &lt;code&gt;animate&lt;/code&gt; function, create a function like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resizeWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPixelRatio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;devicePixelRatio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aspect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we are updating the renderer dimension data. First, we set the new width and height. Then we set the new pixel ratio (this probably will not change but we're setting it just in case). Next, we change the aspect ratio of the camera to the new width and height. We then update the camera's view and re-render the scene.&lt;/p&gt;

&lt;p&gt;If you check the browser again and resize it, you'll see that now this happens:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQ09Nf5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoazpku9qh7rti319o9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQ09Nf5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoazpku9qh7rti319o9p.png" alt="width and height not changing after function creation" width="871" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is happening because we haven't added called the function at all yet. To do so, add this after your &lt;code&gt;resizeWindow&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resizeWindow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This line of code adds an event listener to the window object, and calls the &lt;code&gt;resizeWindow&lt;/code&gt; function whenever the window is resized.&lt;/p&gt;

&lt;p&gt;Now the plane is not distorted anymore!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OzxzJMzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwbu69388twsp3g0ufm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OzxzJMzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwbu69388twsp3g0ufm0.png" alt="Undistorted plane" width="762" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have the model loaded, but we should add some auto-rotation to make it look cool. To do that, add this in the function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;autoRotate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;autoRotateSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This essentially enables auto rotation, multiplies the speed by 4, and updates the controls to make it spin. If you want a laugh, change the &lt;code&gt;autoRotateSpeed&lt;/code&gt; to something like &lt;code&gt;1000.0&lt;/code&gt; and watch it go crazy 🤣.&lt;/p&gt;

&lt;p&gt;In the end, your &lt;code&gt;App.js&lt;/code&gt; should look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three/examples/jsm/controls/OrbitControls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GLTFLoader&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three/examples/jsm/loaders/GLTFLoader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGL1Renderer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#bg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x4e9fe5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPixelRatio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;devicePixelRatio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hemiLight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HemisphereLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x444444&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;hemiLight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hemiLight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dirLight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DirectionalLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dirLight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirLight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ambientLight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AmbientLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ambientLight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ambientLight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GLTFLoader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/small-airplane-v3.glb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gltf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;gltf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gltf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resizeWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPixelRatio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;devicePixelRatio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aspect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resizeWindow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;autoRotate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;autoRotateSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it! Now you're up and running with ThreeJS. This is a beginner tutorial and there is a bunch of stuff I didn't cover, so check out the &lt;a href="https://threejs.org/docs/"&gt;ThreeJS docs and examples&lt;/a&gt;. If you've followed along with this tutorial, choose another model and send a picture in the comments section so you can share your work!&lt;/p&gt;

&lt;p&gt;The full code is in a repository on GitHub: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ShubhamPatilsd"&gt;
        ShubhamPatilsd
      &lt;/a&gt; / &lt;a href="https://github.com/ShubhamPatilsd/threejs-learning"&gt;
        threejs-learning
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Code for the tutorial for ThreeJS!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you liked this post, the three shiny buttons on the left are waiting to be clicked, and if you didn't like the post, they still are open to clicking.&lt;/p&gt;

&lt;p&gt;Oh yeah, and I also have a Twitter now (very exciting stuff). If you enjoy my blogs, do follow me as I share my thoughts about programming there as well (but more frequently). Follow me at: &lt;a href="https://twitter.com/ShubhamPatilsd"&gt;https://twitter.com/ShubhamPatilsd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>threejs</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Quick HTML/CSS hack for prettier Japanese titles</title>
      <author>Claire Froelich</author>
      <pubDate>Tue, 23 Nov 2021 18:43:37 +0000</pubDate>
      <link>https://dev.to/clairefro/quick-htmlcss-hack-for-prettier-japanese-titles-3bnb</link>
      <guid>https://dev.to/clairefro/quick-htmlcss-hack-for-prettier-japanese-titles-3bnb</guid>
      <description>&lt;p&gt;As you read this article in English, look at the end of each line of text. You can thank the &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; character for cleanly separating words into unbreakable chunks that aren't interrupted by newlines. &lt;strong&gt;English: words trump newlines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Japanese does not use spaces, in general. Humans that read Japanese just have a 'spidey sense' of where words start and stop based on grammar and context.&lt;/p&gt;

&lt;p&gt;For large blocks of text like the body of articles, it is common for multi-character "words" to be split at newlines. This is OK:  characters are mono-spaced and paragraphs keep an aesthetically pleasing blockiness. &lt;strong&gt;Japanese: newlines trump words&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fy87FpF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y196s8ad8mhvbej0vjva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fy87FpF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y196s8ad8mhvbej0vjva.png" alt="Image description" width="800" height="712"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;From Asahi Shimbun (text in bottom section is read top-to-bottom, right-to-left).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note above how each newline breaks in the same spot, regardless of position in the word. No hyphens necessary in Japanese! &lt;/p&gt;

&lt;p&gt;While “newlines trump words” looks nice in large blocks of text, it looks awkward on lonely one-line text like titles.&lt;/p&gt;

&lt;p&gt;For example, this text "Learn body parts":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;体の部分を学ぶ&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJuOiN0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfnqz2ebmi113lk1xha9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJuOiN0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfnqz2ebmi113lk1xha9.gif" alt="Image description" width="800" height="519"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Default "PEZ dispenser" behavior&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without a space character or hyphen telling the browser where to delimit words, the default behavior is to just pop characters off one-by-one like PEZ candies in a PEZ dispenser.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the English equivalent of what's happening on resize:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Learn body part
s
Learn body par
ts
Learn body pa
rts
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can we agree this is ugly and unreadable?&lt;/p&gt;

&lt;p&gt;To prevent PEZ dispensing and force compound characters to stick together in this Japanese title, you'll want to wrap the desired chunks in display: &lt;code&gt;inline-block&lt;/code&gt; style.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;体の&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;部分を&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;学ぶ&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- 

CSS style:

.w {
  display: inline-block;
}

--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXBXG2as--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8f4vdtcc6o4zynj69bhf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXBXG2as--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8f4vdtcc6o4zynj69bhf.gif" alt="Image description" width="880" height="589"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Not PEZ dispensing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Much better!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automate-it"&gt;
  &lt;/a&gt;
  Automate it!
&lt;/h2&gt;

&lt;p&gt;This solution is fine quick fix for the occasional eye-catching title, but requires knowledge of Japanese grammar to know where to put the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;Fortunately there is a cool tool called &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fgoogle%2Fbudou"&gt;Budou&lt;/a&gt; that automates this formatting. You don't even have to know Japanese - it uses AI to semantically parse text into words and insert the spans for you (it works for Chinese and Korean too!).&lt;/p&gt;

&lt;p&gt;This has been the first of what will probably be many articles on "things I overlooked when translating my website into Japanese".&lt;/p&gt;




&lt;p&gt;See the pretty Japanese line-wrapping in action on my children's book website: &lt;a href="https://www.power-of-vegetables.com/ja"&gt;The Power of Vegetables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Deer illustrations in GIFs by &lt;a href="https://www.instagram.com/Fbarbara.fomina"&gt;Varvara Fomina&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://medium.com/@clairefroelich/quick-html-css-hack-for-prettier-japanese-titles-fb4ce3d41309"&gt;Medium&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>typography</category>
      <category>japanese</category>
    </item>
  </channel>
</rss>
