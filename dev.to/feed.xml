<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Debugging a Rails App in Vim With Vimspector</title>
      <author>Igor Irianto</author>
      <pubDate>Sat, 14 Aug 2021 15:08:11 +0000</pubDate>
      <link>https://dev.to/iggredible/debugging-a-rails-app-in-vim-with-vimspector-pi</link>
      <guid>https://dev.to/iggredible/debugging-a-rails-app-in-vim-with-vimspector-pi</guid>
      <description>&lt;p&gt;&lt;em&gt;Follow &lt;a href="https://twitter.com/learnvim"&gt;@learnvim&lt;/a&gt; for more Vim tips and tricks!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I recently published an article on Vimspector (&lt;a href="https://dev.to/iggredible/debugging-in-vim-with-vimspector-4n0m"&gt;Debugging in Vim with Vimspector&lt;/a&gt;). There I covered different ways to run Vimspector for various Javascript environments. If you're a Rails developer like me, you may ask, "I'm sold on Vimspector, but how can I run it in Rails?"&lt;/p&gt;

&lt;p&gt;To be frank, there are not a lot of resources online on how to accomplish this. After tinkering for a few days, I found a few setups that work on a basic Rails application.&lt;/p&gt;

&lt;p&gt;I am not claiming that this is the foolproof way to debug any Rails application. There are rooms for improvement and exploration. But for starting out, this is sufficient.&lt;/p&gt;

&lt;p&gt;This article assumes that you have had some experience with Vimspector. At minimum, you need to know how to step into, step over, and step out of breakpoints. You also need to know how to launch and restart Vimspector. If you don't, please read my previous article first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-basic-rails-app"&gt;
  &lt;/a&gt;
  Create a Basic Rails App
&lt;/h2&gt;

&lt;p&gt;I am a huge fan of practical learning. I believe you'll get far more mileage if you actually do the steps as you are reading this article. So for the sake of hands-on approach, let's create a brand new Rails app. Don't worry, it should take less than 5 min.&lt;/p&gt;

&lt;p&gt;Create a new Rails app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails generate controller Says hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go to the controller and write up some codes. Inside &lt;code&gt;./app/controllers/says_controller.rb&lt;/code&gt;, modify the &lt;code&gt;hello&lt;/code&gt; action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class SaysController &amp;lt; ApplicationController
  def hello
    @time = DateTime.now
    @greetings = "Greetings"
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modify the &lt;code&gt;hello.html.erb&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Says#hello&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;%= @greetings %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;It is now &amp;lt;%= @time %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Excellent! Let's quickly test if the Rails app is running properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;a href="http://localhost:3000/says/hello"&gt;http://localhost:3000/says/hello&lt;/a&gt;. You should also see the values of the &lt;code&gt;@greetings&lt;/code&gt; and &lt;code&gt;@time&lt;/code&gt; instance variables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-important-gems"&gt;
  &lt;/a&gt;
  Adding Important Gems
&lt;/h3&gt;

&lt;p&gt;Vimspector isn't a debugger. It's a "middle-man" that talks to a debugger. Vimspector provides a standard protocol to communicate with different debuggers. With Vimspector, you can communicate the same way with a Node debugger, Python debugger, Go debugger, etc.&lt;/p&gt;

&lt;p&gt;For Vimspector to work with Ruby, you need to install a Ruby debugger. We will use &lt;a href="https://github.com/ruby-debug/ruby-debug-ide"&gt;ruby-debug-ide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, you also need to install &lt;code&gt;debase&lt;/code&gt; (&lt;a href="https://github.com/rubyide/vscode-ruby/blob/main/docs/debugger.md"&gt;source&lt;/a&gt;). Add these two in your gemfile (in a real project, you probably want to put them inside the &lt;code&gt;group :development, :test do ...&lt;/code&gt; block)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem 'ruby-debug-ide'
gem 'debase'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vimspector-json"&gt;
  &lt;/a&gt;
  Vimspector JSON
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;.vimspector.json&lt;/code&gt; at the Rails project root. Inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "rails": {
      "adapter": "cust_vscode-ruby",
      "default": true,
      "configuration": {
          "name": "Debug Rails server",
          "type": "Ruby",
          "request": "launch",
          "cwd": "${workspaceRoot}",
          "pathToBundler": "/Users/iggy/.rbenv/shims/bundle",
          "pathToRDebugIDE": "/Users/iggy/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.7.2",
          "program": "${workspaceRoot}/bin/rails",
          "args": [
              "server"
          ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you have to update &lt;code&gt;pathToRDebugIDE&lt;/code&gt; and &lt;code&gt;pathToBundler&lt;/code&gt; with your own paths. I'll explain below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bundler-debugger-and-adapter"&gt;
  &lt;/a&gt;
  Bundler, Debugger, and Adapter
&lt;/h3&gt;

&lt;p&gt;There are three things that you need to provide Vimspector with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The path to bundler.&lt;/li&gt;
&lt;li&gt;The path to the debugger.&lt;/li&gt;
&lt;li&gt;Which adapter to use.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To get the path for &lt;code&gt;pathToBundler&lt;/code&gt;, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;which bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, it returns &lt;code&gt;/User/iggy/.rbenv/shims/bundle&lt;/code&gt;. Use whatever path your machine uses.&lt;/p&gt;

&lt;p&gt;Assuming you have installed the ruby-debug-ide gem via your Rails' Gemfile, to get the &lt;code&gt;pathToRDebugIDE&lt;/code&gt; path, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle show ruby-debug-ide
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, it returns &lt;code&gt;/Users/iggy/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.7.2&lt;/code&gt;. Use whatever path you see.&lt;/p&gt;

&lt;p&gt;Finally, recall that Vimspector requires a special adapter for each language / environment you use (in my previous article, I installed  adapters - also known as "gadgets" - for node and chrome). Since we're debugging a Ruby framework, we need a Ruby adapter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-ruby-adapter"&gt;
  &lt;/a&gt;
  Adding a Ruby Adapter
&lt;/h3&gt;

&lt;p&gt;If you look at the Vimspector config file above, you'll see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"adapter": "cust_vscode-ruby",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, Ruby is not in one of the &lt;a href="https://github.com/puremourning/vimspector#supported-languages"&gt;supported languages in the Vimspector page&lt;/a&gt; (&lt;em&gt;darn it!&lt;/em&gt;). Don't worry, if you dig the Vimspector repo deep enough, you will find instructions on how to "install" a Ruby gadget there.&lt;/p&gt;

&lt;p&gt;Here's &lt;a href="https://github.com/puremourning/vimspector/wiki/languages#ruby-gadget-installer-file"&gt;the page&lt;/a&gt; with information for languages not officially mentioned in the README. If you scroll down, you'll find an instruction for Ruby. &lt;/p&gt;

&lt;p&gt;Follow the instruction on the &lt;a href="https://github.com/puremourning/vimspector/wiki/languages#introduction"&gt;introduction section&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inside the Vimspector &lt;em&gt;directory&lt;/em&gt; (in my case, it is in &lt;code&gt;~/.vim/plugged/vimspector/gadgets/custom/cust_vscode-ruby.json&lt;/code&gt; - yours could be in a different directory depending on what plugin manager you use), add a custom  json file for your language.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./install_gadget.py --upgrade&lt;/code&gt;. Vimspector should install some files from &lt;code&gt;vscode-ruby&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Phew! We are done with the preliminary setup.&lt;/p&gt;

&lt;p&gt;If you're still curious what just happened, here are a few pages to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/puremourning/vimspector/wiki/languages#ruby-gadget-installer-file"&gt;Ruby gadget installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rubyide/vscode-ruby/blob/main/docs/debugger.md"&gt;VSCode-Ruby Debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#program-and-args"&gt;
  &lt;/a&gt;
  Program and Args
&lt;/h3&gt;

&lt;p&gt;Let's take another look at a section inside the Vimspector config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"program": "${workspaceRoot}/bin/rails",
"args": [
  "server"
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recall from the previous article, &lt;code&gt;program&lt;/code&gt; is the program that Vimspector will run when you tell it to launch something and &lt;code&gt;args&lt;/code&gt; is the argument that gets passed to &lt;code&gt;program&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When running a rails app, you would (usually) run &lt;code&gt;bin/rails server&lt;/code&gt;. The config does exactly that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-vimspector"&gt;
  &lt;/a&gt;
  Running the Vimspector
&lt;/h2&gt;

&lt;p&gt;Now we are ready to run Vimspector. Our config is set to &lt;code&gt;launch&lt;/code&gt;, so do not run &lt;code&gt;rails s&lt;/code&gt; from the terminal. We will run it from the debugger.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;says_controller.rb&lt;/code&gt; and add a breakpoint on &lt;code&gt;@time&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class SaysController &amp;lt; ApplicationController
  def hello
    @time = DateTime.now # add a breakpoint here
    @greetings = "Greetings"
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Excellent. Now here comes the moment of truth - let's launch Vimspector!&lt;/p&gt;

&lt;p&gt;Wait a few seconds, you should see on the &lt;code&gt;Console&lt;/code&gt; window that Vimspector is launching a Rails app.&lt;/p&gt;

&lt;p&gt;Now, visit &lt;a href="http://localhost:3000/says/hello"&gt;http://localhost:3000/says/hello&lt;/a&gt;. The app should pause.&lt;/p&gt;

&lt;p&gt;Check your Vimspector. You should see it paused at the breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GCMydpQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h9k7qgp4wzm6kf59202.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GCMydpQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h9k7qgp4wzm6kf59202.png" alt="Rails Vimspector Launch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this is what you see, congratulations! You've successfully launched a Rails debugger - from Vim!&lt;/p&gt;

&lt;p&gt;From there, you can step into, step over, and step out of different lines of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#attach-vs-launch"&gt;
  &lt;/a&gt;
  Attach Vs Launch
&lt;/h2&gt;

&lt;p&gt;There are two ways you can run Vimspector: attach and launch. The former attaches the debugger into an already running process. The latter launches a process from the debugger.&lt;/p&gt;

&lt;p&gt;The Rails example above is an example of launch, as it launches a Rails process directly from the debugger. Theoretically, you should be able to perform either attach or launch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attaching-a-debugger-to-a-rails-server"&gt;
  &lt;/a&gt;
  Attaching a Debugger to a Rails Server
&lt;/h3&gt;

&lt;p&gt;You've seen how to launch a Rails app from Vimspector. Let's see how you can attach Vimspector to a Rails process.&lt;/p&gt;

&lt;p&gt;First, modify our &lt;code&gt;.vimspector.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "configurations": {
    "rails": {
      "adapter": "cust_vscode-ruby",
      "default": true,
      "configuration": {
          "name": "Debug Rails server",
          "type": "Ruby",
          "request": "attach",
          "cwd": "${workspaceRoot}",
          "remoteHost": "0.0.0.0",
          "remotePort": "1234",
          "pathToBundler": "/Users/iggy/.rbenv/shims/bundle",
          "pathToRDebugIDE": "/Users/iggy/.rbenv/versions/2.6.6/lib/ruby/gems/2.6.0/gems/ruby-debug-ide-0.7.2"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are the changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;request&lt;/code&gt; is now &lt;code&gt;attach&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We added &lt;code&gt;remoteHost&lt;/code&gt; and &lt;code&gt;remotePort&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We removed &lt;code&gt;"programs"&lt;/code&gt; and &lt;code&gt;"args"&lt;/code&gt; (they are unnecessary for attach).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;remoteHost&lt;/code&gt; and &lt;code&gt;remotePort&lt;/code&gt; are the IP address and port number that we will be running the debugger on. The host is set to &lt;code&gt;0.0.0.0&lt;/code&gt; and the port is set to &lt;code&gt;1234&lt;/code&gt;. These numbers will make sense in a little bit.&lt;/p&gt;

&lt;p&gt;Once your &lt;code&gt;vimspector.json&lt;/code&gt; file is configured, let's run the app. Instead of running the regular &lt;code&gt;bin/rails s&lt;/code&gt;, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rdebug-ide --host 0.0.0.0 --port 1234 --dispatcher-port 1234 -- bin/rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will launch the &lt;code&gt;ruby-debug-ide&lt;/code&gt; program installed earlier. Note the host and port numbers: we are running the debugger on host &lt;code&gt;0.0.0.0&lt;/code&gt; and port &lt;code&gt;1234&lt;/code&gt; in addition to running the rails server.&lt;/p&gt;

&lt;p&gt;Next, add the breakpoints inside the &lt;code&gt;says_controller.rb&lt;/code&gt; file, then launch Vimspector. Since we are running Vimspector on attach mode, it won't launch a Rails server this time. Head to the page related to this controller: &lt;a href="http://localhost:3000/says/hello"&gt;http://localhost:3000/says/hello&lt;/a&gt;. Watch your Vimspector pauses at the breakpoint(s). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0xbtwVR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc1gtnt8hxs19brnu45k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0xbtwVR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc1gtnt8hxs19brnu45k.png" alt="Rails Vimspector Attach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sweet chocolate pancake! Super cool, isn't it? Well, this also concludes this article.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Congratulations! You've successfully debugged a Rails app. You are one step closer from becoming a supreme master developer.&lt;/p&gt;

&lt;p&gt;There is still much to explore about Vimspector and Rails applications. There are different settings, environments, and configs that I don't mention in this article. Experiment. Share this article. Let me know how you do things differently.&lt;/p&gt;

&lt;p&gt;In the end, I hope that this article has given you a good place to start. Happy Vimming!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Recover your deleted files quickly and easily</title>
      <author>Balaji</author>
      <pubDate>Sat, 14 Aug 2021 13:34:35 +0000</pubDate>
      <link>https://dev.to/babzbalaji/recover-your-deleted-files-quickly-and-easily-5g35</link>
      <guid>https://dev.to/babzbalaji/recover-your-deleted-files-quickly-and-easily-5g35</guid>
      <description>&lt;p&gt;In this website you can recover your deleted files.&lt;/p&gt;

&lt;p&gt;For more about this click this link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tamizhtechie.com/readingpage/techietalks/17/"&gt;https://www.tamizhtechie.com/readingpage/techietalks/17/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a desktop application using Electron and Create React App</title>
      <author>Matteo Mazzarolo</author>
      <pubDate>Sat, 14 Aug 2021 12:50:00 +0000</pubDate>
      <link>https://dev.to/mmazzarolo/building-a-desktop-application-using-electron-and-create-react-app-4k45</link>
      <guid>https://dev.to/mmazzarolo/building-a-desktop-application-using-electron-and-create-react-app-4k45</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A step-by-step tutorial explaining how to create a desktop application using Create React App (CRA) and Electron. You can find the source code of the project &lt;a href="https://github.com/mmazzarolo/create-react-app-electron-boilerplate"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://mmazzarolo.com/blog/2021-08-12-building-an-electron-application-using-create-react-app/"&gt;mmazzarolo.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I recently needed to wrap a React app generated with &lt;a href="https://github.com/facebook/create-react-app"&gt;Create React App (CRA)&lt;/a&gt; with &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; (well, &lt;a href="https://github.com/mmazzarolo/ordinary-puzzles-app/pull/49"&gt;the app itself uses React Native for Web&lt;/a&gt;, but it doesn’t matter).&lt;br&gt;&lt;br&gt;
My goal was to stay within the Create React App limits as much as possible (without ejecting).&lt;br&gt;&lt;br&gt;
There’s no shortage of guides on how to do it online. Still, I couldn’t find one that fully follows the Electron security guidelines and provides a distribution setup &lt;a href="https://www.electron.build/"&gt;using Electron-builder&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
So, here’s yet another tutorial on how to wrap an app built with Create React App in Electron — from the initial scaffolding up to the distribution workflow.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-app-scaffolding"&gt;
  &lt;/a&gt;
  React app scaffolding
&lt;/h2&gt;

&lt;p&gt;Let’s start from an “empty” React app generated with &lt;a href="https://github.com/facebook/create-react-app"&gt;Create React App&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Using npx (https://www.npmjs.com/package/npx) to run create-react-app.&lt;/span&gt;
npx create-react-app my-electron-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the following dependencies (most of them are here only to simplify the development flow):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-electron-app
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; concurrently cross-env electron electron-builder electronmon wait-on
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/open-cli-tools/concurrently"&gt;&lt;code&gt;concurrently&lt;/code&gt;&lt;/a&gt;: Run multiple commands concurrently. We’ll use it to run both the Electron process and the react app in watch mode.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kentcdodds/cross-env"&gt;&lt;code&gt;cross-env&lt;/code&gt;&lt;/a&gt;: Run scripts that set and use environment variables across different platforms. We’ll use it to make our scripts compatible with both Unix and Windows OSes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.electronjs.org/"&gt;&lt;code&gt;electron&lt;/code&gt;&lt;/a&gt;: The core framework for creating the app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.electron.build/"&gt;&lt;code&gt;electron-builder&lt;/code&gt;&lt;/a&gt;: A complete solution to package and build a ready for distribution Electron app for macOS, Windows, and Linux.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/catdad/electronmon"&gt;&lt;code&gt;electronmon&lt;/code&gt;&lt;/a&gt;: Like &lt;a href="https://github.com/remy/nodemon"&gt;&lt;code&gt;nodemon&lt;/code&gt;&lt;/a&gt;, but for the Electron process. Allows watching and reloading our Electron app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jeffbski/wait-on"&gt;&lt;code&gt;wait-on&lt;/code&gt;&lt;/a&gt;: Utility to wait for files, ports, sockets, etc. We’ll use it to wait for the react app to be built before we open the Electron app (while developing).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#electrons-main-script"&gt;
  &lt;/a&gt;
  Electron’s main script
&lt;/h2&gt;

&lt;p&gt;The next step is creating Electron’s main script. This script controls the main process, which runs in a full Node.js environment and is responsible for managing your app’s lifecycle, displaying native interfaces, performing privileged operations, and managing renderer processes.&lt;/p&gt;

&lt;p&gt;Electron’s main script is often named &lt;code&gt;main.js&lt;/code&gt; and stored in &lt;code&gt;&amp;lt;project-root&amp;gt;/electron/main.js&lt;/code&gt;, but in our case, we’ll name it &lt;code&gt;electron.js&lt;/code&gt; (to disambiguate it) and store it in &lt;code&gt;&amp;lt;project-root&amp;gt;/public/electron.js&lt;/code&gt; (so that Create React App will automatically copy it in the build directory).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// public/electron.js&lt;/span&gt;

&lt;span class="c1"&gt;// Module to control the application lifecycle and the native browser window.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create the native browser window.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mainWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Set the path of an additional "preload" script that can be used to&lt;/span&gt;
    &lt;span class="c1"&gt;// communicate between node-land and browser-land.&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preload.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// In production, set the initial browser path to the local bundle generated&lt;/span&gt;
  &lt;span class="c1"&gt;// by the Create React App build process.&lt;/span&gt;
  &lt;span class="c1"&gt;// In development, set it to localhost to allow live/hot-reloading.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPackaged&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;slashes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appURL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Automatically open Chrome's DevTools in development mode.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPackaged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webContents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openDevTools&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Setup a local proxy to adjust the paths of requested files when loading&lt;/span&gt;
&lt;span class="c1"&gt;// them from the local production bundle (e.g.: local fonts, etc...).&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setupLocalFilesNormalizerProxy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerHttpProtocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to register protocol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This method will be called when Electron has finished its initialization and&lt;/span&gt;
&lt;span class="c1"&gt;// is ready to create the browser windows.&lt;/span&gt;
&lt;span class="c1"&gt;// Some APIs can only be used after this event occurs.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whenReady&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;setupLocalFilesNormalizerProxy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// On macOS it's common to re-create a window in the app when the&lt;/span&gt;
    &lt;span class="c1"&gt;// dock icon is clicked and there are no other windows open.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllWindows&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Quit when all windows are closed, except on macOS.&lt;/span&gt;
&lt;span class="c1"&gt;// There, it's common for applications and their menu bar to stay active until&lt;/span&gt;
&lt;span class="c1"&gt;// the user quits explicitly with Cmd + Q.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;darwin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// If your app has no need to navigate or only needs to navigate to known pages,&lt;/span&gt;
&lt;span class="c1"&gt;// it is a good idea to limit navigation outright to that known scope,&lt;/span&gt;
&lt;span class="c1"&gt;// disallowing any other kinds of navigation.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allowedNavigationDestinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-electron-app.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;web-contents-created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;will-navigate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;navigationUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsedUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;navigationUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;allowedNavigationDestinations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedUrl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// In this file you can include the rest of your app's specific main process&lt;/span&gt;
&lt;span class="c1"&gt;// code. You can also put them in separate files and require them here.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yeah, this is not a "minimal" &lt;code&gt;electron.js&lt;/code&gt; setup, but I wanted some nice defaults and made sure we're following &lt;a href="https://www.electronjs.org/docs/tutorial/security"&gt;Electron's security guidelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During execution, Electron will look for this script in the &lt;code&gt;main&lt;/code&gt; field of the app’s &lt;code&gt;package.json&lt;/code&gt; config, so let’s update it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  "name": "my-electron-app",
  "version": "0.1.0",
  "private": true,
&lt;span class="gi"&gt;+ "main": "./public/electron.js",
&lt;/span&gt;  "dependencies": {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#electrons-preload-script"&gt;
  &lt;/a&gt;
  Electron’s preload script
&lt;/h3&gt;

&lt;p&gt;By default, the process running in your browser won’t be able to communicate with the Node.js process. Electron solves this problem by allowing the use of a preload script: a script that runs before the renderer process is loaded and has access to both renderer globals (e.g., &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt;) and a Node.js environment.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;electron.js&lt;/code&gt; script, we already specified that we expect a preload script to be loaded from &lt;code&gt;&amp;lt;project-root&amp;gt;/public/preload.js&lt;/code&gt;. So, let’s create it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// public/preload.js&lt;/span&gt;

&lt;span class="c1"&gt;// All of the Node.js APIs are available in the preload process.&lt;/span&gt;
&lt;span class="c1"&gt;// It has the same sandbox as a Chrome extension.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;contextBridge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// As an example, here we use the exposeInMainWorld API to expose the browsers&lt;/span&gt;
&lt;span class="c1"&gt;// and node versions to the main window.&lt;/span&gt;
&lt;span class="c1"&gt;// They'll be accessible at "window.versions".&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;contextBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exposeInMainWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;versions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code accesses the Node.js &lt;code&gt;process.versions&lt;/code&gt; object and exposes it in the react app, making it accessible at &lt;code&gt;window.versions&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-create-react-app-compatible-with-electron"&gt;
  &lt;/a&gt;
  Making Create React App compatible with Electron
&lt;/h2&gt;

&lt;p&gt;Our goal is to stay within the Create React App ecosystem without ejecting and use Electron only to render the React app.&lt;br&gt;&lt;br&gt;
To do so, a few tweaks are needed.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#update-the-raw-homepage-endraw-property"&gt;
  &lt;/a&gt;
  Update the &lt;code&gt;homepage&lt;/code&gt; property
&lt;/h3&gt;

&lt;p&gt;We need to enforce Create React App to infer a relative root path in the generated HTML file. This is a requirement because we’re not going to serve the HTML file; it will be loaded directly by Electron. To do so, we can set the &lt;code&gt;homepage&lt;/code&gt; property of the &lt;code&gt;package.json&lt;/code&gt; to &lt;code&gt;./&lt;/code&gt; (see &lt;a href="https://create-react-app.dev/docs/deployment/#building-for-relative-paths"&gt;Building For Relative Paths&lt;/a&gt; in the Create React App documentation for more details).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  "name": "my-electron-app",
  "version": "0.1.0",
  "private": true,
&lt;span class="gi"&gt;+ "homepage": "./",
&lt;/span&gt;  "main": "./public/electron.js",
  "dependencies": {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-raw-browserslist-endraw-s-targets"&gt;
  &lt;/a&gt;
  Update &lt;code&gt;browserslist&lt;/code&gt;’s targets
&lt;/h3&gt;

&lt;p&gt;Update the &lt;code&gt;browserslist&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; to support only the latest Electron version. This ensures Webpack/Babel will only add the polyfills and features we strictly need, keeping the bundle size to the minimum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  "browserslist": {
    "production": [
&lt;span class="gi"&gt;+     "last 1 electron version",
&lt;/span&gt;&lt;span class="gd"&gt;-      "&amp;gt;0.2%",
-     "not dead",
-     "not op_mini all"
&lt;/span&gt;    ],
    "development": [
&lt;span class="gi"&gt;+     "last 1 electron version",
&lt;/span&gt;&lt;span class="gd"&gt;-     "last 1 chrome version",
-     "last 1 firefox version",
-     "last 1 safari version"
&lt;/span&gt;    ]
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#define-a-content-security-policy"&gt;
  &lt;/a&gt;
  Define a Content Security Policy
&lt;/h3&gt;

&lt;p&gt;A &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;Content Security Policy (CSP)&lt;/a&gt; is an additional layer of protection against cross-site scripting attacks and data injection attacks. So I highly recommend to enable it in &lt;code&gt;&amp;lt;project-root&amp;gt;/public/index.html&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The following CSP will allow Electron to run only inline scripts (the ones injected in the HTML file by Create React App’s build process).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;    &amp;lt;meta name="theme-color" content="#000000" /&amp;gt;
    &amp;lt;meta
      name="description"
      content="Web site created using create-react-app"
    /&amp;gt;
&lt;span class="gi"&gt;+   &amp;lt;meta
+     http-equiv="Content-Security-Policy"
+     content="script-src 'self' 'unsafe-inline';"
+   /&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Please keep in mind this is just a minimal CSP example. You can tweak it further to allow-list only specific websites, and you can make it even stricter by generating a nonce to load only the inline scripts you generated in the build process. See &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;Content Security Policy (CSP)&lt;/a&gt; on MDN Web Docs for more info.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#define-the-startdevelopment-script"&gt;
  &lt;/a&gt;
  Define the start/development script
&lt;/h3&gt;

&lt;p&gt;In your &lt;code&gt;package.json&lt;/code&gt;, define a script to build the Create React App and start the Electron process in watch mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
&lt;span class="gi"&gt;+   "electron:start": "concurrently -k \"cross-env BROWSER=none yarn start\" \"wait-on http://localhost:3000 &amp;amp;&amp;amp; electronmon .\""
&lt;/span&gt;  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s a breakdown of what it does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;concurrently -k&lt;/code&gt; invokes the subsequent commands in parallel, and kill both of them when the process is stopped.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cross-env BROWSER=none yarn start&lt;/code&gt; sets the &lt;code&gt;BROWSER=none&lt;/code&gt; environment variables (using &lt;code&gt;cross-env&lt;/code&gt; for Windows compatibility) to disable the automatic opening of the browser and invokes the &lt;code&gt;start&lt;/code&gt; script, which runs the Create React App build in watch-mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wait-on http://localhost:3000 &amp;amp;&amp;amp; electronmon .&lt;/code&gt; waits for the Create React App dev-server to serve the app on localhost:3000, and then invokes &lt;code&gt;electronmon .&lt;/code&gt; to start the Electron add in watch-mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now run &lt;code&gt;yarn electron:start&lt;/code&gt; to run your React app within Electron instead of the browser window.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-the-the-electron-app-for-distribution"&gt;
  &lt;/a&gt;
  Package the the Electron app for distribution
&lt;/h2&gt;

&lt;p&gt;Finally, we need to make a few minor changes to the Create React App setup to generate platform-specific distributables so that our app can be installed. We’ll use Electron-builder, a configuration-based solution to package and build ready for distribution Electron apps for macOS, Windows, and Linux.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Electron-builder offers &lt;a href="https://www.electron.build/"&gt;a ton of configuration options&lt;/a&gt;, but for the sake of simplicity in this guide we’ll add just the bare minimum settings to create working distributable files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-the-app-author-and-description"&gt;
  &lt;/a&gt;
  Set the app author and description
&lt;/h3&gt;

&lt;p&gt;Electron-builder infers a few default info required to bundle the distributable file (app name, author, and description) from the &lt;code&gt;package.json&lt;/code&gt;, so let’s specify them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  "name": "my-electron-app",
  "version": "0.1.0",
  "private": true,
&lt;span class="gi"&gt;+ "author": "John Doe",
+ "description": "My fantastic Electron app",
&lt;/span&gt;  "homepage": "./",
  "main": "./public/electron.js",
  "dependencies": {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#set-the-build-configuration"&gt;
  &lt;/a&gt;
  Set the build configuration
&lt;/h3&gt;

&lt;p&gt;Let’s add a minimal &lt;a href="https://www.electron.build/configuration/configuration#configuration"&gt;Electron-builder configuration&lt;/a&gt; in the &lt;code&gt;package.json&lt;/code&gt; using the &lt;code&gt;build&lt;/code&gt; key on top level:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+ "build": {
+   "appId": "com.electron.myapp",
+   "productName": "My Electron App",
+   "files": ["build/ **/*", "node_modules/** /*"],
+   "directories": {
+     "buildResources": "public"
+   },
+   "mac": {
+     "target": "dmg"
+   },
+   "win": {
+     "target": "nsis"
+   },
+   "linux": {
+     "target": "deb"
+   }
+ }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;appId&lt;/code&gt;: The application ID used to identify the app in the macOS (as &lt;a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070"&gt;CFBundleIdentifier&lt;/a&gt;) and Windows (as &lt;a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx"&gt;App User Model ID&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;productName&lt;/code&gt;: The name of the app, as shown in the app executable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;directories.buildResources&lt;/code&gt;: Path of the root dir that holds resources not packed into the app.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;files&lt;/code&gt;: Global of additional files (outside of &lt;code&gt;directories.buildResources&lt;/code&gt;) required by the app to run.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mac&lt;/code&gt;, &lt;code&gt;win&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt;: Platform-specific configurations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-an-app-icon"&gt;
  &lt;/a&gt;
  Add an app icon
&lt;/h3&gt;

&lt;p&gt;By default, Electron-builder will look for an app icon in &lt;code&gt;&amp;lt;root-project&amp;gt;/build/icon.png&lt;/code&gt; — so you should be good to go as long as you put it in the &lt;code&gt;public&lt;/code&gt; directory (Create React App build process will take care of moving it to the &lt;code&gt;build&lt;/code&gt; directory).&lt;/p&gt;

&lt;p&gt;For more info, see the &lt;a href="https://www.electron.build/icons.html"&gt;Electron-builder icons documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-the-packaging-scripts"&gt;
  &lt;/a&gt;
  Add the packaging scripts
&lt;/h3&gt;

&lt;p&gt;Finally, to make Electron-builder package our app we can add a packaging script for each destination platform in the &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "electron:start": "concurrently -k \"cross-env BROWSER=none yarn start\" \"wait-on http://localhost:3000 &amp;amp;&amp;amp; electronmon .\"",
&lt;span class="gi"&gt;+   "electron:package:mac": "yarn build &amp;amp;&amp;amp; electron-builder -m -c.extraMetadata.main=build/electron.js",
+   "electron:package:win": "yarn build &amp;amp;&amp;amp; electron-builder -w -c.extraMetadata.main=build/electron.js",
+   "electron:package:linux": "yarn build &amp;amp;&amp;amp; electron-builder -l -c.extraMetadata.main=build/electron.js"
&lt;/span&gt;  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands will build a React app production bundle and package it into distributables for Windows, macOS, and Linux respectively. By default, the distributables will be in NSIS (Windows), dmg (macOS), and deb (Linux) form.&lt;/p&gt;

&lt;p&gt;The generated distributable files will be place in &lt;code&gt;&amp;lt;project-root&amp;gt;/dist&lt;/code&gt;, so make sure to add this directory to &lt;code&gt;.gitignore&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+ /dist
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;That’s it.&lt;br&gt;&lt;br&gt;
You can now run &lt;code&gt;yarn electron:start&lt;/code&gt; to kickstart your development flow, and &lt;code&gt;yarn electron:package:&amp;lt;platform&amp;gt;&lt;/code&gt; to generate a distributable bundle.&lt;/p&gt;

&lt;p&gt;Please keep in mind that the project created with this tutorial represents what I consider the bare minimum to requirements to wrap a React app with Electron. I highly recommend taking some time to read the &lt;a href="https://www.electronjs.org/docs/latest/"&gt;Electron&lt;/a&gt; and &lt;a href="https://www.electron.build/"&gt;Electron-builder&lt;/a&gt; official documentation to tweak your setup.&lt;/p&gt;

&lt;p&gt;You can find the complete code for this blog post &lt;a href="https://github.com/mmazzarolo/create-react-app-electron-boilerplate"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>electron</category>
    </item>
    <item>
      <title>JavaScript 'this' illustrated: Learn it once and for all!</title>
      <author>kapeel kokane</author>
      <pubDate>Sat, 14 Aug 2021 12:48:39 +0000</pubDate>
      <link>https://dev.to/comscience/javascript-this-illustrated-learn-it-once-and-for-all-i06</link>
      <guid>https://dev.to/comscience/javascript-this-illustrated-learn-it-once-and-for-all-i06</guid>
      <description>&lt;p&gt;Hey There 👋🏾&lt;/p&gt;

&lt;p&gt;In today's post I wanted to ask you all a question. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How many of you really understand the &lt;code&gt;this&lt;/code&gt; keyword in &lt;strong&gt;JavaScript&lt;/strong&gt;? 🤔&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I myself have conducted several &lt;strong&gt;JavaScript interviews&lt;/strong&gt; so far and sometimes I ask this question as a way to get things started and the kind of answers that I get are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It points to the &lt;code&gt;Object&lt;/code&gt; (what object?)&lt;/li&gt;
&lt;li&gt;It points to the &lt;code&gt;function&lt;/code&gt; (which function?)&lt;/li&gt;
&lt;li&gt;It points to itself (consciousness?)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Although there is a trend growing up which considers the need to use &lt;code&gt;this&lt;/code&gt; is JavaScript as a &lt;em&gt;bad practice&lt;/em&gt; and suggests to &lt;em&gt;move away&lt;/em&gt; from it. &lt;/p&gt;

&lt;p&gt;That might be correct, but knowing about how something works is always good, whether we decide to use it or not!&lt;/p&gt;

&lt;p&gt;So let's do it today! 🙌🏾&lt;/p&gt;

&lt;p&gt;Let us see how the &lt;code&gt;this&lt;/code&gt; keyword in JavaScript really functions. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-actual-answer"&gt;
  &lt;/a&gt;
  The actual answer
&lt;/h3&gt;

&lt;p&gt;Well, most of the times the answer that we provide to that question is wrong, because the way the &lt;code&gt;this&lt;/code&gt; keyword works, differs based on where the &lt;code&gt;this&lt;/code&gt; keyword is being used. &lt;/p&gt;

&lt;p&gt;And that is the key to understanding it. Break it down into scenarios and look at it from a &lt;em&gt;per scenario&lt;/em&gt; basis. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inside-a-function"&gt;
  &lt;/a&gt;
  Inside a function
&lt;/h4&gt;

&lt;p&gt;Inside any function in the &lt;code&gt;global&lt;/code&gt; scope, the &lt;code&gt;this&lt;/code&gt; keyword points to the &lt;code&gt;global&lt;/code&gt; object in &lt;em&gt;non-strict&lt;/em&gt; mode and is &lt;code&gt;undefined&lt;/code&gt; in &lt;em&gt;strict&lt;/em&gt; mode.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#as-a-method-on-an-object"&gt;
  &lt;/a&gt;
  As a method on an object
&lt;/h4&gt;

&lt;p&gt;When invoked as a method on an object, like &lt;code&gt;person.getName()&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; keyword refers to the object on which the method is being invoked. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-invoking-with-call"&gt;
  &lt;/a&gt;
  When invoking with call
&lt;/h4&gt;

&lt;p&gt;When the function is invoked using call, like &lt;code&gt;getName.call(animal)&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; keyword refers to the object that is being passed to the call function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-invoked-with-the-raw-new-endraw-keyword"&gt;
  &lt;/a&gt;
  When invoked with the &lt;code&gt;new&lt;/code&gt; keyword
&lt;/h4&gt;

&lt;p&gt;In this case, when we are in the process of creating a new object by invoking a function with the &lt;code&gt;new&lt;/code&gt; keyword in front of it, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bruno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then inside the &lt;code&gt;Dog&lt;/code&gt; function, all the &lt;code&gt;this&lt;/code&gt; keywords would point to the object that gets newly allocated and returned.&lt;/p&gt;

&lt;p&gt;Here's the same explanation in an illustrated format for the &lt;strong&gt;visual learners&lt;/strong&gt; reading this post:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsquAJ8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz1nvbaq897rmhp46b2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsquAJ8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz1nvbaq897rmhp46b2b.png" alt="this is JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it. Those are the cases that would cover more than 95 percent of the scenarios. &lt;/p&gt;

&lt;p&gt;Now you know how to answer that tricky question. &lt;/p&gt;

&lt;p&gt;See you in the next one, Cheers! 🙌🏾&lt;/p&gt;

&lt;p&gt;PS:&lt;br&gt;
If you liked the illustration above, you might like my 🎊&lt;strong&gt;FREE&lt;/strong&gt;🎊 ebook that I recently released which covers several other JavaScript concepts. Feel free to get a copy by clicking on the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.co/93o0KigRmv?amp=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AttvHkqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykn1m9yp1414bowbd3hd.png" alt="js illustrated book"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Building your own private Kubernetes cluster on a Raspberry PI 4 with K3S</title>
      <author>Sahan</author>
      <pubDate>Sat, 14 Aug 2021 12:25:00 +0000</pubDate>
      <link>https://dev.to/sahan/building-your-own-private-kubernetes-cluster-on-a-raspberry-pi-4-with-k3s-4nfp</link>
      <guid>https://dev.to/sahan/building-your-own-private-kubernetes-cluster-on-a-raspberry-pi-4-with-k3s-4nfp</guid>
      <description>&lt;p&gt;In this article, we will look at setting up your own private Kubernetes cluster on a Raspberry Pi using K3S in your home Wi-Fi network! Our setup will be pretty simple - single master and a single worker node. You can always add more nodes if you like.&lt;/p&gt;

&lt;p&gt;Here’s a diagram to give you an idea of what we will be building today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nExrNQpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/d23110ad26edbca2213e84fadd59f2d2/5a190/building-your-own-private-kubernetes-cluster-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nExrNQpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/d23110ad26edbca2213e84fadd59f2d2/5a190/building-your-own-private-kubernetes-cluster-1.png" alt="building-your-own-private-kubernetes-cluster-1" title="building-your-own-private-kubernetes-cluster-1"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;Topology of what we'll be building today&lt;/center&gt;

&lt;p&gt;Basically, we’ll be tying two Raspberry Pis together with K3S and connecting them to a local WLAN. We can then deploy our workloads using a client (your laptop) which will be talking to the Kubernetes API just as you’d normally with any other K8S cluster.&lt;/p&gt;

&lt;p&gt;Note that the local addresses shown in this post might be different what you have got in your home network.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-0-the-initial-setup"&gt;
  &lt;/a&gt;
  Step 0 - The initial setup
&lt;/h3&gt;

&lt;p&gt;First, we need to set up the Raspberry Pis to have an OS, enable SSH, little bit of configuration to be able to use K3S.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 If you haven’t done a setup on Raspberry Pi in headless mode before, I have a post describing just that. &lt;em&gt;Note that this is for Desktop version if you want it for other stuff.&lt;/em&gt; That post can be found here: &lt;a href="https://sahansera.dev/setting-up-raspberry-pi-4-headless-mode/"&gt;https://sahansera.dev/setting-up-raspberry-pi-4-headless-mode/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have listed down the specs and the OS versions I used for my kit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 x Raspberry Pi 4 Model B - 4GB RAM&lt;/li&gt;
&lt;li&gt;2 x 128GB Micro SD Cards&lt;/li&gt;
&lt;li&gt;Raspbian OS Lite edition (based on Debian Buster)&lt;/li&gt;
&lt;li&gt;Stackable case&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a sneak peek of my build ✌️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4JoM3Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/2c6712e6ebb99649b71f1bc60dc2a24b/4b190/building-your-own-private-kubernetes-cluster-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4JoM3Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/2c6712e6ebb99649b71f1bc60dc2a24b/4b190/building-your-own-private-kubernetes-cluster-2.jpg" alt="building-your-own-private-kubernetes-cluster-2.jpg" title="building-your-own-private-kubernetes-cluster-2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now use &lt;a href="https://www.raspberrypi.org/software/"&gt;Raspberry Pi Imager&lt;/a&gt; without using Balena Etcher to flash the micro SD card. This will make selecting the OS version and flashing process easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGEkic2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7def6e44cf7ff3124d15cba8d059fd18/5a190/building-your-own-private-kubernetes-cluster-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGEkic2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7def6e44cf7ff3124d15cba8d059fd18/5a190/building-your-own-private-kubernetes-cluster-3.png" alt="building-your-own-private-kubernetes-cluster-3.png" title="building-your-own-private-kubernetes-cluster-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In summary, we will be looking at doing the following steps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 You need to do the following configs to both (or more) of your Raspberry PIs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Enable &lt;code&gt;ssh&lt;/code&gt; on both RPIs&lt;/li&gt;
&lt;li&gt;Enable cgroups&lt;/li&gt;
&lt;li&gt;Set up wireless&lt;/li&gt;
&lt;li&gt;Enable 64-bit mode at the kernel level&lt;/li&gt;
&lt;li&gt;Booting up&lt;/li&gt;
&lt;li&gt;Set up IP tables&lt;/li&gt;
&lt;li&gt;Assign static IPs&lt;/li&gt;
&lt;li&gt;Change the hostnames&lt;/li&gt;
&lt;li&gt;Install K3S Server on Master&lt;/li&gt;
&lt;li&gt;Install K3S Agent on Worker&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before booting up, we need to do a couple of configurations as mentioned below.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-enable-ssh"&gt;
  &lt;/a&gt;
  Step 1 - Enable SSH
&lt;/h3&gt;

&lt;p&gt;Open up the root of the micro SD card (this would be mounted as &lt;code&gt;boot&lt;/code&gt;) you just flashed. Create a blank file named &lt;code&gt;ssh&lt;/code&gt; at the root of that folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-enable-cgroups"&gt;
  &lt;/a&gt;
  Step 2 - Enable cgroups
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cgroups&lt;/code&gt; is an essential kernel level feature which underpins the containerisation technology. This allows the processes to run in isolation with a specific set of resource assigned to it.&lt;/p&gt;

&lt;p&gt;Let’s open up the root of the micro SD volume (this would be mounted as &lt;code&gt;boot&lt;/code&gt;) you just flashed and edit the &lt;code&gt;cmdline.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kvk4e6Gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/22d67657bbe7132b9a8c238b100c418e/9a86a/building-your-own-private-kubernetes-cluster-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kvk4e6Gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/22d67657bbe7132b9a8c238b100c418e/9a86a/building-your-own-private-kubernetes-cluster-4.png" alt="building-your-own-private-kubernetes-cluster-4.png" title="building-your-own-private-kubernetes-cluster-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following line to the end of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cgroup_memory=1 cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be wondering why are we doing this. Here’s an excerpt from the K3S &lt;a href="https://rancher.com/docs/k3s/latest/en/advanced/"&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 From the docs: Standard Raspbian Buster installations do not start with &lt;code&gt;cgroups&lt;/code&gt; enabled. K3S needs &lt;code&gt;cgroups&lt;/code&gt; to start the &lt;code&gt;systemd&lt;/code&gt; service. &lt;code&gt;cgroups&lt;/code&gt; can be enabled by appending &lt;code&gt;cgroup_memory=1 cgroup_enable=memory&lt;/code&gt; to &lt;code&gt;/boot/cmdline.txt&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-3-setting-up-wireless-mode"&gt;
  &lt;/a&gt;
  Step 3 - Setting up wireless mode
&lt;/h3&gt;

&lt;p&gt;I don’t carry around my Raspberry Pi setup 😆, so I opted in to use my home Wi-Fi network instead of ethernet. Here’s how I did it.&lt;/p&gt;

&lt;p&gt;While at the root of the &lt;code&gt;/boot/&lt;/code&gt; volume, create a new file called &lt;code&gt;wpa_supplicant.conf&lt;/code&gt; file and add the following lines to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;country=AU
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
    ssid="your-networks-SSID"
    psk="your-networks-password"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a note of the &lt;code&gt;country&lt;/code&gt; field (you can find them in &lt;a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements"&gt;here&lt;/a&gt;), and make sure to replace that with the corresponding country code that suits you. &lt;code&gt;ssid&lt;/code&gt; and &lt;code&gt;psk&lt;/code&gt; would be the name of your wireless network and the password, respectively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-run-the-kernel-in-64bit-mode"&gt;
  &lt;/a&gt;
  Step 4 - Run the kernel in 64-bit mode
&lt;/h3&gt;

&lt;p&gt;Next up, we will tell the Raspbian OS to run the kernel in 64-bit mode. This is required for K3S.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;config.txt&lt;/code&gt; file and add the following line to the bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;arm_64bit=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8eCnOxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/5ef2c1635a4fdedf317a65171fcf3b2f/5a190/building-your-own-private-kubernetes-cluster-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8eCnOxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/5ef2c1635a4fdedf317a65171fcf3b2f/5a190/building-your-own-private-kubernetes-cluster-5.png" alt="building-your-own-private-kubernetes-cluster-5.png" title="building-your-own-private-kubernetes-cluster-5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Now insert the micro SD card to the Raspberry PI and boot it up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-booting-up"&gt;
  &lt;/a&gt;
  Step 5 - Booting up
&lt;/h3&gt;

&lt;p&gt;When you boot up the RPIs for the first time it will take a couple of minutes to appear on your home network.&lt;/p&gt;

&lt;p&gt;If you log in to the router dashboard, you’ll be able to see the RPIs with their IP addresses.&lt;/p&gt;

&lt;p&gt;You can log in to them via &lt;code&gt;ssh&lt;/code&gt; like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh pi@10.0.0.100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;pi&lt;/code&gt; is the default user and &lt;code&gt;raspberry&lt;/code&gt; would be the default password.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Make sure to change the default password with &lt;code&gt;passwd&lt;/code&gt; command when you log in for the first time to both nodes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-6-enabling-staticip-configuration"&gt;
  &lt;/a&gt;
  Step 6 - Enabling static-IP configuration
&lt;/h3&gt;

&lt;p&gt;When we boot up the RPIs K3S connects to the worker nodes by using their IPs. Since we will be using WLAN, if we restart our nodes, the IPs would be different and this setup would not work. So we need to add a piece of config to assign static IPs to them.&lt;/p&gt;

&lt;p&gt;There are a couple of ways you can do this. Best option would be to use your router’s DHCP server capabilities and make an address reservation. You’d need the device name and MAC address of the RPIs.&lt;/p&gt;

&lt;p&gt;If not, you can edit the &lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt; file and let the RPI know which IP to assign itself. I would recommend to add this just below “Example static IP configuration” section so that it’d be easier to find it in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface wlan0
static ip_address=10.0.0.100
static routers=10.0.0.1
static domain_name_servers=8.8.8.8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, it would look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uA1ALvUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bdb8c5ee5dcd6e06e9c8416e31ef2e21/5a190/building-your-own-private-kubernetes-cluster-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uA1ALvUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bdb8c5ee5dcd6e06e9c8416e31ef2e21/5a190/building-your-own-private-kubernetes-cluster-6.png" alt="building-your-own-private-kubernetes-cluster-6.png" title="building-your-own-private-kubernetes-cluster-6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to update the IP addresses for each RPI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-setup-ip-tables"&gt;
  &lt;/a&gt;
  Step 7 - Setup IP Tables
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;iptables &lt;span class="nt"&gt;-F&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;update-alternatives &lt;span class="nt"&gt;--set&lt;/span&gt; ip6tables /usr/sbin/ip6tables-legacy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-8-change-the-hostname-to-something-sensible"&gt;
  &lt;/a&gt;
  Step 8 - Change the hostname to something sensible
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;vi /etc/hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will only contain a single line, so you can name it something that makes sense to you. I renamed mine as &lt;code&gt;controlplane&lt;/code&gt; for the master node and &lt;code&gt;node01&lt;/code&gt; for the worker node.&lt;/p&gt;

&lt;p&gt;Next, change the /etc/hosts file where it says &lt;code&gt;raspberrypi&lt;/code&gt; to the name of your node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;vi /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s an example for the &lt;code&gt;node01&lt;/code&gt; node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1uojLlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bbdf3a59de66ddfe51cd33798ea37db1/0ad97/building-your-own-private-kubernetes-cluster-7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1uojLlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bbdf3a59de66ddfe51cd33798ea37db1/0ad97/building-your-own-private-kubernetes-cluster-7.png" alt="building-your-own-private-kubernetes-cluster-7.png" title="building-your-own-private-kubernetes-cluster-7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Make sure to reboot the RPIs once you have done all these changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-9-installing-k3s-on-the-master-node"&gt;
  &lt;/a&gt;
  Step 9 - Installing K3S on the Master node
&lt;/h3&gt;

&lt;p&gt;To install K3S on your master node, run the following command. It will do all the bootstrapping it needs to do under the hood.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-sfL&lt;/span&gt; https://get.k3s.io | sh -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a side note, I always run a &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;/code&gt; before installing anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-10-the-worker-node-setup-amp-agent-registration"&gt;
  &lt;/a&gt;
  Step 10 - The worker node setup &amp;amp; agent registration
&lt;/h3&gt;

&lt;p&gt;Before set up the worker node, we need to take the token from the server. You need to run the following commands on the master node in order to get this token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo cat&lt;/span&gt; /var/lib/rancher/k3s/server/token
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need run the following command on the worker node. Make sure to update them according to your environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-sfL&lt;/span&gt; https://get.k3s.io | &lt;span class="nv"&gt;K3S_NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"node01"&lt;/span&gt; &lt;span class="nv"&gt;K3S_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://10.0.0.100:6443"&lt;/span&gt; &lt;span class="nv"&gt;K3S_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"token from above step"&lt;/span&gt; sh -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation of the variables:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;K3S_NODE_NAME&lt;/code&gt; - name of the worker node you are configuring. Remember that we set up the hostnames in step 7.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;K3S_URL&lt;/code&gt; - the IP address of your master node. The default K3S server port is 6443, so keep it unchanged.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;K3S_TOKEN&lt;/code&gt; - Token that we received from the from the K3S server. Eg: &lt;code&gt;K10141483xxxxxxxxxx::server:xxxxxxxxxxxx&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’d see &lt;code&gt;[INFO] systemd: Starting k3s-agent&lt;/code&gt; message and it’s ready to go!&lt;/p&gt;

&lt;p&gt;That’s it! you can now run commands and see it in action. You will need to &lt;code&gt;sudo su&lt;/code&gt; in order to run commands on the master node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NNlNbHoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/cab5fd69fe625b104f91bc499ef952fb/5a190/building-your-own-private-kubernetes-cluster-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NNlNbHoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/cab5fd69fe625b104f91bc499ef952fb/5a190/building-your-own-private-kubernetes-cluster-8.png" alt="building-your-own-private-kubernetes-cluster-8.png" title="building-your-own-private-kubernetes-cluster-8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;By the end of this article, I hope you have your k8s cluster up and running. If you ran into issues, let me know in the comments below. In the next article, we will look at deploying a sample application and see the cluster in action.&lt;/p&gt;

&lt;p&gt;I’m hoping to publish a script to automate most if not all of these steps pretty soon. Until next time 👋&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tomshardware.com/how-to/fix-cannot-currently-show-desktop-error-raspberry-pi"&gt;https://www.tomshardware.com/how-to/fix-cannot-currently-show-desktop-error-raspberry-pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/"&gt;https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rancher.com/docs/k3s/latest/en/installation/install-options/agent-config/"&gt;https://rancher.com/docs/k3s/latest/en/installation/install-options/agent-config/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.electrondust.com/2017/11/25/setting-raspberry-pi-wifi-static-ip-raspbian-stretch-lite/"&gt;https://www.electrondust.com/2017/11/25/setting-raspberry-pi-wifi-static-ip-raspbian-stretch-lite/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thepihut.com/blogs/raspberry-pi-tutorials/19668676-renaming-your-raspberry-pi-the-hostname"&gt;https://thepihut.com/blogs/raspberry-pi-tutorials/19668676-renaming-your-raspberry-pi-the-hostname&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>tutorial</category>
      <category>iot</category>
    </item>
    <item>
      <title>How To Read and Use A RESTful Web API With JavaScript: A Studio Ghibli Example</title>
      <author>Ismaili Simba</author>
      <pubDate>Sat, 14 Aug 2021 11:19:18 +0000</pubDate>
      <link>https://dev.to/ismailisimba/how-to-read-and-use-a-restful-web-api-with-javascript-a-studio-ghibli-example-58co</link>
      <guid>https://dev.to/ismailisimba/how-to-read-and-use-a-restful-web-api-with-javascript-a-studio-ghibli-example-58co</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-a-web-api"&gt;
  &lt;/a&gt;
  What is A Web API?
&lt;/h3&gt;

&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/API"&gt;API&lt;/a&gt; - Application Programming Interface - is simply a way for other people to use apps you make without actually having access as you do. For example, if you developed an app that could immediately tell where anyone in the world is. You probably wouldn't want people to know how it works, but you'd still want to be able to allow them to use it, say for a fee. The set of instructions and codes given out so people can access your app, that is an API.&lt;br&gt;
A Web API is simply an API setup to work over the web.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-a-restful-web-api"&gt;
  &lt;/a&gt;
  What is A RESTful Web API?
&lt;/h3&gt;

&lt;p&gt;Simply put, A RESTful Web API follows &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTful Web standards&lt;/a&gt;. These are meant to make information sharing across the web a uniform activity. Some of the RESTful standards are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A client-server architecture that is made up of clients, servers, and resources, with requests managed through HTTP.&lt;/li&gt;
&lt;li&gt;Stateless client-server communication, meaning no client information is stored between GET requests, and each request is separate and unconnected.
You can read the rest here at &lt;a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api"&gt;Redhat&lt;/a&gt;. But we are going to focus on these for now.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-studio-ghibli-web-api"&gt;
  &lt;/a&gt;
  The Studio Ghibli Web API
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://ghibliapi.herokuapp.com/"&gt;Studio Ghibli Web API&lt;/a&gt; contains a database of characters (species), places, and vehicles for all films produced by Studio Ghibli. Through its endpoints - links where you access the API functionality - you can get data from the API in stringified &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; format. The huge advantage of this format is, you can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON"&gt;parse&lt;/a&gt; the data and manipulate it with code. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  HTML Code
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"titlebox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;日本語タイトル&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"movietit"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"movietit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"movietit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"load"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Loading ...&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"movie1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I am a Movie Title...&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"detailscontainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"descriptioncontainer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"deets"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS Code
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Roboto Condensed"&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.titlebox&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;669px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;55%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;128px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-evenly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.titlebox&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.69px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Kiwi Maru"&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;margin-block-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.titlebox&lt;/span&gt; &lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt; &lt;span class="s1"&gt;"Roboto Condensed"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.69px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;85%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.detailscontainer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;28px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;469px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;669px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;55%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;128px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;overflow-y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.descriptioncontainer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;669px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-evenly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.descriptioncontainer&lt;/span&gt; &lt;span class="nc"&gt;.items&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.69px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#javascript-code-client-side"&gt;
  &lt;/a&gt;
  JavaScript Code - Client Side
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;detailsContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchInfoWithFilter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ghibliApiObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//console.log(ghibliApiObject);&lt;/span&gt;
        &lt;span class="nx"&gt;localVar&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cloudObj&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ghibliApiObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;readStudioGhibliObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ghibliApiObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;




&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchInfoWithFilter&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://ghibliapi.herokuapp.com/films?limit=250&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;returnVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;omit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;follow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;referrerPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-referrer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

              &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HTTP error, status = &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myBlob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cloudObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myBlob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cloudObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.descriptioncontainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.descriptioncontainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;returnVal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;readStudioGhibliObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ghibliApiObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ghibliFilms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ghibliApiObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;ghibliFilms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;movietit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;itemsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="c1"&gt;// console.log(ghibliFilms);&lt;/span&gt;
      &lt;span class="c1"&gt;//console.log(objectSize);&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;objectSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;optionEle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;optionEle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ghibliFilms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;optionEle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ghibliFilms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;itemsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optionEle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="nx"&gt;upDateDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;itemsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;upDateDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;


  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;upDateDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;detailsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;myKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objectEntries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localVar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objectKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localVar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
          &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localVar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;original_title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


          &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;objectEntries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
              &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;copyKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="nx"&gt;copyKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;objectKeys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;objectEntries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
              &lt;span class="nx"&gt;detailsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;thisFilmObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchForFilm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;movietit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;myKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objectEntries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thisFilmObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objectKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thisFilmObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;thisFilmObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;original_title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


          &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;objectEntries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
              &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;copyKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="nx"&gt;copyKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;objectKeys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;objectEntries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
              &lt;span class="nx"&gt;detailsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchForFilm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;localVar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;localVar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
              &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localVar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloudObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How Does It Work?
&lt;/h2&gt;

&lt;p&gt;You can preview the setup &lt;a href="https://ismailisimba.github.io/studioghibli/index"&gt;here&lt;/a&gt;.&lt;br&gt;
In our HTML, we have two containers, one for the film title in Japanese and the dropdown you can pick names from to view details. And the other is where we'll display film details. &lt;/p&gt;

&lt;p&gt;Next, we have to find out how the Studio Ghibli API works. You can view full documentation &lt;a href="https://ghibliapi.herokuapp.com/"&gt;here&lt;/a&gt; but in summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are five main endpoints - access links - one each for films, people, locations, species, and vehicles.&lt;/li&gt;
&lt;li&gt;Through the endpoints, you can search things by id, set response limits - how big the JSON you get should be - and more. But for our purposes, we are simply accessing the film endpoint and setting a limit of 250 so we can get all films - they have 21 films in the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our JavaScript, we have one important constant called localVar. We create this as a global variable so later we can update it with data from the Studio Ghibli JSON we'll receive from the endpoint. The rest of the functionality is spread out over the functions as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;window.onload&lt;/strong&gt; delays our JavaScript from running until all HTML files and CSS files have been loaded, this is especially important as we have to provide support for Japanese characters via special fonts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fetchInfoWithFilter&lt;/strong&gt; is based on JavaScript's fetch. It allows us to send and receive HTTP requests, the primary method of communications for Web APIS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;readStudioGhibliObject&lt;/strong&gt; fills our dropdown with the names of all the films and it adds an input event listener to the dropdown so every time you change the movie name, the details will be updated.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;updateDescription&lt;/strong&gt; is run in two contexts. First, when the data is received for the first time. It'll set the first entry of data as the default film on our dropdown, and it'll update the description. Secondly, every time you change the name in the dropdown, it'll run to update the description and the title of the film in Japanese.
Enjoy playing around!&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ismailisimba"&gt;
        ismailisimba
      &lt;/a&gt; / &lt;a href="https://github.com/ismailisimba/studioghibli"&gt;
        studioghibli
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An example of how to use a RESTful WEB API using the Studio Ghibli API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Photo credit: &lt;a href="https://visualhunt.co/a7/d4a24280"&gt;BrickinNick&lt;/a&gt;on &lt;a href="https://visualhunt.com/re9/a5768a54"&gt;Visualhunt.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Must have tools for bloggers.</title>
      <author>Kedar.K</author>
      <pubDate>Sat, 14 Aug 2021 11:10:06 +0000</pubDate>
      <link>https://dev.to/kedark/must-have-tools-for-bloggers-1jd1</link>
      <guid>https://dev.to/kedark/must-have-tools-for-bloggers-1jd1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;No promotions included; this is genuinely for helping dev bloggers like me. Some tools below are purely related to technical bloggers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#code-screenshot"&gt;
  &lt;/a&gt;
  Code Screenshot
&lt;/h2&gt;

&lt;p&gt;Sharing code on social media can be hectic, but it's an effective way to engage the audience. And most of the time, screenshots may not look pretty enough to gain attention. Here are the tools that can help you create beautiful screenshots of code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-codeimgio"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://codeimg.io/"&gt;codeimg.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the best options which will give you the most granularity to create the screenshots, ex - choose macOS/Windows-style window, etc. And it will also give you the option to customize screenshots according to social media platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jSZGlnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bwvtbxz8u1fs8yol9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jSZGlnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bwvtbxz8u1fs8yol9j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqiKOjEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0189k2kooj8xjh76sw15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqiKOjEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0189k2kooj8xjh76sw15.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-carbon"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://carbon.now.sh/"&gt;carbon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you don't want granular level customization and find it overwhelming, no worries, we have &lt;em&gt;Carbon&lt;/em&gt;. Simple, easy to use, and different &lt;em&gt;solid&lt;/em&gt; color backgrounds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOjyzPrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e811ggzavztf5zfcm6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOjyzPrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e811ggzavztf5zfcm6e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-rayso"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://ray.so/"&gt;ray.so&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Well, if you are the one who absolutely loves gradient colors, then this will provide you with &lt;em&gt;gradient&lt;/em&gt; backgrounds. But keep in mind, it doesn't have a lot of customization options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3DPfcRAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55zvj5i4p2wp22sylii4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3DPfcRAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55zvj5i4p2wp22sylii4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-codesnap-vs-code"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap"&gt;codesnap (VS Code)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Do copying and pasting code from the editor to this website feel like a lot of work to you? Check this out; you can take beautiful screenshots straight from VS Code (editor).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--my9uAqdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yod690cr3340i8ebt3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--my9uAqdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yod690cr3340i8ebt3c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#diagrams"&gt;
  &lt;/a&gt;
  Diagrams
&lt;/h2&gt;

&lt;p&gt;Including Diagrams in your blog can be effective as they will allow the audience to grasp the concept visually and within little time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-lucidchart"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.lucidchart.com/pages/examples/diagram-maker"&gt;LucidChart&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the best tools for diagrams/flowcharts out there. It also has the paid version, but free should be sufficient for creating small flows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jf_acqq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzs5ewzr9fdwjvefh52t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jf_acqq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzs5ewzr9fdwjvefh52t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-diagramsnet"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://app.diagrams.net/"&gt;diagrams.net&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here is another one. This is relatively simple from the previous one, and the good thing is it's free forever.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OseoRAWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k7u2kui6us1j7yxxv30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OseoRAWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k7u2kui6us1j7yxxv30.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sharing-code-snippets"&gt;
  &lt;/a&gt;
  Sharing code snippets
&lt;/h2&gt;

&lt;p&gt;If you have some code to share that cannot be shared/fitted in screenshots, here is the list of things you can use. Also, this will provide additional functionality like inbuilt code execution, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-gists"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://gist.github.com/discover"&gt;Gists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This gets my highest recommendation, the most straightforward way to share code right from your GitHub. If you write on dev, I recommend this as embed it in your dev articles. If you are wondering the difference between gist and GitHub, check out this &lt;a href="https://stackoverflow.com/questions/6767518/what-is-the-difference-between-github-and-gist"&gt;stackoverflow&lt;/a&gt; question.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYfpvbGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmd65xj2m0t8njk49udz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYfpvbGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmd65xj2m0t8njk49udz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pastebin"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://pastebin.com/"&gt;pastebin&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It's the oldest one out there. It might get some advertisement on the webpage, but it's a perfect tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_0gr6J7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2w4rmgmon2wp3q9nlt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_0gr6J7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2w4rmgmon2wp3q9nlt1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-codepilenet"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.codepile.net/pile/"&gt;codepile.net&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is similar to the previous one but with fewer ads. And it's free as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Knm_FoTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5hk0kfkjn7mibh87qtp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Knm_FoTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5hk0kfkjn7mibh87qtp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blog-media-cover-image-banner-etc"&gt;
  &lt;/a&gt;
  Blog media - cover Image, banner, etc.
&lt;/h2&gt;

&lt;p&gt;Cover image for the blog is essential because it can attract users to click on your blog. Here are the two best resources to create the same&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-canva"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.canva.com/"&gt;canva&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qf09GrbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmxcl1scdybmughoa50q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qf09GrbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmxcl1scdybmughoa50q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
CANVA is the most popular online tool for creating headers, posters, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-crello"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://crello.com/"&gt;crello&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--in6EDk-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfkva0mdl1krgmi4b8pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--in6EDk-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfkva0mdl1krgmi4b8pf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is similar to the above, but it has more templates to use from.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#writing-aids"&gt;
  &lt;/a&gt;
  Writing aids
&lt;/h2&gt;

&lt;p&gt;Are you worried about your grammar, punctuation, etc., in your writing? Well, don't worry, these tools will help you write with confidence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-grammarly"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RmlKgwsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eym8ulgtiyenfv1sfn6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RmlKgwsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eym8ulgtiyenfv1sfn6x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the most popular tool in the pool of writing aids. The free version should be sufficient for most of the time but paid is also worth it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-hemingwayapp"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://hemingwayapp.com/"&gt;hemingwayapp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBr-i4qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah0kw9f2ryao64f6u7eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBr-i4qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah0kw9f2ryao64f6u7eu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't want to spend money and go with a free tool, well, the search ends here. This is a free alternative for the resource mentioned above. Thanks to &lt;a href="https://dev.to/atapas"&gt;Tapas Adhikary&lt;/a&gt; for the suggestion.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#emojis"&gt;
  &lt;/a&gt;
  Emojis
&lt;/h2&gt;

&lt;p&gt;Well, this is no new. As we know, these are the best way to show expressions via text. We can use emoji codes, so our browser renders it. But wait, why write codes when you can just copy and paste them. I know you will excel at it since you might be a copy and paste expert 😉.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-emojihomepage"&gt;
  &lt;/a&gt;
  1. &lt;a href="http://emojihomepage.com/"&gt;emojihomepage&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yw-TFer1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd16ynztyvvi8y6lm151.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yw-TFer1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd16ynztyvvi8y6lm151.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the best and easy-to-use tool; just click to copy and paste.&lt;/p&gt;




&lt;p&gt;That's all for this post, guys,&lt;br&gt;
if you enjoyed it, don't forget to ❤ or 🔖.&lt;/p&gt;

&lt;p&gt;Happy Blogging 😀&lt;/p&gt;

</description>
      <category>writing</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Interview Experience at Media.net</title>
      <author>Jaydeep Dave</author>
      <pubDate>Sat, 14 Aug 2021 11:08:49 +0000</pubDate>
      <link>https://dev.to/dave3130/my-interview-experience-at-media-net-emh</link>
      <guid>https://dev.to/dave3130/my-interview-experience-at-media-net-emh</guid>
      <description>&lt;p&gt;Media.net came to our campus in late June 2021 to interview for the position of Associate Web Application Developer. There were three rounds in total. Approximately 60 students filled the form, and only two of them got the offer letter.&lt;/p&gt;

&lt;p&gt;The entire process was online and took approximately 2-3 weeks. I’m going to share my interview experience here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVt_5VY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3a68ecpyqf3y62l4z6v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVt_5VY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3a68ecpyqf3y62l4z6v.jpg" alt="alt-text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Round 1(Online MCQ Round):&lt;/strong&gt; This round was an online Assessment on the Interviewbit Platform for 1 hr and there were a total of 50 MCQ questions. So we have to solve 50 questions in 60 mins.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#it-was-basically-a-mixture-of-various-topics"&gt;
  &lt;/a&gt;
  It was basically a mixture of various topics.
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;There were questions from Quants, Logical Reasoning, DSA, Time complexity, Guessing the o/p, Memory, OS, CN, DBMS.&lt;/li&gt;
&lt;li&gt;I was able to answer 40-42 questions in the given timeframe, and the questions were mostly Easy-Medium Level.&lt;/li&gt;
&lt;li&gt;On the next day, we got the result, and out of 60 students, 8 of them cleared this round.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Round 2(Technical Interview 1)&lt;/strong&gt;: This round lasted about an hour and was held on Google Meet. In this round, we were given three DSA questions (generally easy, medium, and hard) and we had to explain the entire solution approach and write the pseudocode in google docs shared with us.&lt;/p&gt;

&lt;p&gt;We first started with a basic introduction.&lt;/p&gt;

&lt;p&gt;Arrange given numbers to form the biggest number.&lt;br&gt;
Eg: Input: { 66, 56, 9, 7, 10, 660 }&lt;br&gt;
    Output: 97666605610&lt;br&gt;
Link: &lt;a href="https://www.geeksforgeeks.org/given-an-array-of-numbers-arrange-the-numbers-to-form-the-biggest-number/"&gt;https://www.geeksforgeeks.org/given-an-array-of-numbers-arrange-the-numbers-to-form-the-biggest-number/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given an array of n elements return the count of elements which has a count of set bits to be 1.&lt;br&gt;
Eg: Input: {2, 6, 8, 10, 12}&lt;br&gt;
    Output: 2 &lt;br&gt;
Create a deep copy of LinkedList with random pointers.&lt;br&gt;
Link: &lt;a href="https://www.geeksforgeeks.org/clone-linked-list-next-arbit-pointer-set-2/"&gt;https://www.geeksforgeeks.org/clone-linked-list-next-arbit-pointer-set-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later we had some discussion about work culture and Tech Stack that I will get to work on. &lt;/p&gt;

&lt;p&gt;After a week, I got the call from HR that I had cleared this round. (Only 2 out of 8 cleared this round)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Round 3 (Technical Interview 2)&lt;/strong&gt;: This round was also conducted on google meet and lasted for an hour. The interviewer gave his intro and we started with the coding problem.&lt;/p&gt;

&lt;p&gt;Given the seating arrangement of a compartment, complete the below functions:&lt;/p&gt;

&lt;p&gt;//static boolean isWindowSeat( int seatNo){&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// return whether the given seat no. is window seat or not
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
static int seatRowNo( int seatNo){&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// return the row no. (starting from 1,2,3,…..) to which seat belongs 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;static int nearestWindowSeat( int seatNo){&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// return the nearest window seat of the given seat no.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Design a Database System for URL Shortener, with the following constraints:&lt;br&gt;
Only authorized users can use the service.&lt;br&gt;
URL link should be expired after 48 hours.&lt;br&gt;
Users can edit the URL link.&lt;br&gt;
After that, I was asked: &lt;/p&gt;

&lt;p&gt;Write an SQL query for searching the existing URL in the table.&lt;br&gt;
How can we search faster in the table ? (Ans: Indexing)&lt;br&gt;
What is Indexing in DBMS and its working?&lt;br&gt;
Since, I mentioned Javascript and Reactjs in my resume. So, the next question was:&lt;br&gt;
Using Javascript, write a filter function that will filter the odd no.&lt;/p&gt;

&lt;p&gt;Eg: Input: {1, 2, 3, 4, 5}&lt;/p&gt;

&lt;p&gt;Output: {2, 4} &lt;/p&gt;

&lt;p&gt;Later we had a discussion about the job role and the difference between SDE and the current job profile and so on. The next day, I was informed by HR that I was selected and discussed further process. &lt;/p&gt;

&lt;p&gt;All the interviewers were very polite and supportive. They will guide you but you should be very attentive during the interview and ask out if you have any queries or you are stuck in between.  Also, clarify the problem statement and constraints well. &lt;/p&gt;

</description>
      <category>career</category>
      <category>interview</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Open VSCODE in browser from github cool trick</title>
      <author>CoderZ90</author>
      <pubDate>Sat, 14 Aug 2021 10:58:25 +0000</pubDate>
      <link>https://dev.to/official_fire/open-vscode-in-browser-from-github-cool-trick-5a89</link>
      <guid>https://dev.to/official_fire/open-vscode-in-browser-from-github-cool-trick-5a89</guid>
      <description>&lt;p&gt;There is a very cool trick to open vscode on browser with a simple shortcut key &lt;/p&gt;

&lt;p&gt;Step 01: Go to your github repository&lt;/p&gt;

&lt;p&gt;Step 02: Press "windows icon" + "." key on your keyboard&lt;/p&gt;

&lt;p&gt;Boom! You are done vs code is launching&lt;/p&gt;

&lt;p&gt;if you found this post useful subscribe to my channel for more videos and coding tutorials&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/c/codingfire?sub_confirmation=1"&gt;https://youtube.com/c/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankyou! Stay safe. Stay Happy :)&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Base64 Explained</title>
      <author>Hargunbeer Singh</author>
      <pubDate>Sat, 14 Aug 2021 10:08:30 +0000</pubDate>
      <link>https://dev.to/hamiecod/base64-explained-1il4</link>
      <guid>https://dev.to/hamiecod/base64-explained-1il4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Base64 is a binary to text encoding algorithm. It converts ASCII to a base64 representation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-of-conversion"&gt;
  &lt;/a&gt;
  Process of conversion
&lt;/h2&gt;

&lt;p&gt;We know that a UTF-8 letter consists of 8 bits. Base64 converts the provided string into binary representation and then it removes the last two binary digits from the binary representation of each UTF-8 letter from the provided string. After that, each letter is represented with 6 bits. Remember, the total number of the bits of the whole string should stay the same, like if a string contains 6 ASCII values, corresponding to 8*6 = 48 bits, base64 will convert the binary values into 8 groups of 6 bits.&lt;br&gt;&lt;br&gt;
Then the base64 conversion chart is used to convert the 6-bit groups into utf-8 characters, then another chart is used to convert the corresponding ascii value into the original ascii value.&lt;br&gt;&lt;br&gt;
Also, when using base64 on images, we need to use Buffer to convert the base64 string into binary representation of the image.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string =&amp;gt; binary =&amp;gt; binary in the groups of 6 bits =&amp;gt; base64 ascii string =&amp;gt; original string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-is-it-used"&gt;
  &lt;/a&gt;
  Where is it used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is used to store and transfer content on media which only support ASCII.&lt;/li&gt;
&lt;li&gt;It is used to ensure that the data remains intact without any modification in the transfer.&lt;/li&gt;
&lt;li&gt;It is also used in sending emails.&lt;/li&gt;
&lt;li&gt;It is used to encode binary data so it can be included in a url&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Suppose you want to send an image over a medium that only supports ASCII, you will have to convert it to ASCII using base64 and then send it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#encoded-size-increase"&gt;
  &lt;/a&gt;
  Encoded size increase
&lt;/h3&gt;

&lt;p&gt;When you encrypt a string using base64, the encoded string would be larger than the actual string. This is because a base64 character is represented by 6 bits, whereas a normal character is represented by 8 bits, thus increasing the number of letters in the base64 string, hence increasing the size of the string. When you use base64 on a string, the size of the string is AT LEAST increased by 133%&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unicode-problem"&gt;
  &lt;/a&gt;
  Unicode Problem
&lt;/h3&gt;

&lt;p&gt;The DOM strings are 16-bit(UTF-16) encoded strings, which pose a problem for base64 as it only supports 8-bit strings(UTF-8). You can solve this problem by converting the string to UTF-8 and there are other methods to do the same.&lt;br&gt;The code for overcoming this problem by converting the string to UTF-8 is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;utf16_To_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;utf8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;btoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utf16_To_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#demonstration"&gt;
  &lt;/a&gt;
  Demonstration
&lt;/h3&gt;

&lt;p&gt;A working demonstration of base64 algorithm in a real life scenario in which we transfer an image from a source to its destination by using base64 because we can only transfer ascii data over the medium of transfer. The below demonstration is used is of converting a &lt;code&gt;.jpg&lt;/code&gt; file to &lt;code&gt;.png&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;base64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./original.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base64&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// convert the binary text in the image file to a base64 string&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base64&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// generate a base64 buffer of the base64 string, a buffer of the base64 string is required to convert the string back to graphics&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// write the buffer into a file&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// you can even convert a jpg into png using this technique&lt;/span&gt;

&lt;span class="c1"&gt;// the process&lt;/span&gt;
&lt;span class="c1"&gt;// image =&amp;gt; binary =&amp;gt; base64 string =&amp;gt; buffer =&amp;gt; image&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Authentication with magic link in React</title>
      <author>Gogulaanand</author>
      <pubDate>Sat, 14 Aug 2021 10:07:54 +0000</pubDate>
      <link>https://dev.to/gogulaanand/authentication-with-magic-link-in-next-js-2k5p</link>
      <guid>https://dev.to/gogulaanand/authentication-with-magic-link-in-next-js-2k5p</guid>
      <description>&lt;p&gt;Authenticating users via magic link is on the rise recently (for a good reason). Magic link is the way of sending users a unique link to their mail, using which they can signup / login. It removes the need for username, password, activation email, forgot password scenarios etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://magic.link"&gt;magic.link&lt;/a&gt; offers an npm package which we can plug into our app and have an auth system setup in few minutes.&lt;/p&gt;

&lt;p&gt;Lets begin 🚀&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;sdk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#import-and-initialise-magic"&gt;
  &lt;/a&gt;
  Import and initialise magic
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Magic&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;magic-sdk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_MAGIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;NEXT_PUBLIC_MAGIC_API_KEY&lt;/code&gt; is the api key provided by magic.link, stored in local environment.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#user-login"&gt;
  &lt;/a&gt;
  User login
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginWithMagicLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email login failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-verify-user-session"&gt;
  &lt;/a&gt;
  To verify user session:
&lt;/h4&gt;

&lt;p&gt;Once a user has clicked the magic link received in his mail and completed the authentication, magic would automatically store the user meta data in your site's localstorage/cookies. We simply need to use the inbuilt function to fetch the stored session token and user's data which is email here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkUserLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMetadata&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User is not logged in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIdToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Authenticate current session failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Invoke &lt;code&gt;checkUserLoggedIn()&lt;/code&gt; inside useEffect hook.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#user-logout"&gt;
  &lt;/a&gt;
  User logout:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logoutUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User logout failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#oauth-login"&gt;
  &lt;/a&gt;
  Oauth login:
&lt;/h2&gt;

&lt;p&gt;You can follow the quick setup &lt;a href="https://magic.link/docs/social-login/google--gmail"&gt;guide&lt;/a&gt; for social login under your magic account. (Trust me, it is not a long guide. It just takes couple of minutes 😄) Once done, we can setup oauth login in our app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;oauth&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A minor change to our magic initialisation to support oauth.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;OAuthExtension&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@magic-ext/oauth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_MAGIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OAuthExtension&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oauthLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Start the Google OAuth 2.0 flow!&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oauth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loginWithRedirect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;google&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;redirectURI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/oauth`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Invoke above method when the user clicks on the 'Sign in with Google' button. Here, i have provided &lt;code&gt;redirectURI&lt;/code&gt; as &lt;code&gt;/oauth&lt;/code&gt;. Once the google login is complete, magic will redirect to this endpoint of our website. We can have a success page under that endpoint or just redirect to hompage simply using &lt;code&gt;/&lt;/code&gt; instead &lt;code&gt;/oauth&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some additional logic to add to our useEffect hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_MAGIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OAuthExtension&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/oauth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oauth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRedirectResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oauth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oauth login failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;checkUserLoggedIn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only new thing here is the &lt;code&gt;render()&lt;/code&gt; method inside useEffect. It checks if current url is &lt;code&gt;/oauth&lt;/code&gt;, then fetches the user details obtained via oauth login. The &lt;code&gt;profile&lt;/code&gt; varibable contains many details, but for simplicity, here we are using only the email.&lt;/p&gt;

&lt;p&gt;And...&lt;br&gt;
That's it. 🎉&lt;br&gt;
We have an email and google login setup for our app/website.&lt;br&gt;
Without the worries of the problems that passwords bring in. 😌 &lt;/p&gt;

&lt;p&gt;Credits: Cover Photo by &lt;a href="https://unsplash.com/@franckinjapan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Franck&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/security?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📌 magic.link provides 10000 free logins currently which supports hobby/pet projects suffciently. If you are interested and want to checkout magic, &lt;a href="https://magic.link/invite/r/y23Yr92Fo9mq8joV"&gt;signup here&lt;/a&gt; 😉&lt;/p&gt;

</description>
      <category>react</category>
      <category>authentication</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Async VS Defer - Understand The JavaScript Execution</title>
      <author>Ranjeet Singh</author>
      <pubDate>Sat, 14 Aug 2021 09:32:03 +0000</pubDate>
      <link>https://dev.to/jeetsdev/async-vs-defer-understand-the-javascript-execution-228g</link>
      <guid>https://dev.to/jeetsdev/async-vs-defer-understand-the-javascript-execution-228g</guid>
      <description>&lt;p&gt;As a web developer, how many times you have written this line in your code?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably too many times to count, but do you really understand how the browser handles this simple line of code? We have always been advised to put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, but again why is that so...? Is there any other place where we can put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag? What if we put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside the &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag of our HTML document like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- inside the head tag --&amp;gt;
&amp;lt;head&amp;gt;
    ...
    &amp;lt;title&amp;gt; .... &amp;lt;/title&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/bN4Gf6GEs9OtW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bN4Gf6GEs9OtW/giphy.gif" alt="Gif here"&gt;&lt;/a&gt;&lt;br&gt;
Aahhh, enough of these questions. Now it's time to understand all of them.&lt;/p&gt;

&lt;p&gt;First and foremost, Yes we can put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag wherever we want, but remember one thing that it can affect your page performance. &lt;/p&gt;

&lt;p&gt;So now let's understand exactly how &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag loading works and most importantly how we can use &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; to speed up our Javascript loading and improve our page performance. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-browser-parse-html"&gt;
  &lt;/a&gt;
  How Browser Parse HTML
&lt;/h2&gt;

&lt;p&gt;Before understanding how &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is loading, we first need to understand how the browser parses HTML. Luckily, it's pretty straightforward. The browser will parse HTML from the top of the document to the bottom, and when it hits a resource, like an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag it will send out a request for that resource and continue parsing. The important thing to note is that the browser does not stop parsing the HTML to get the &lt;code&gt;img src&lt;/code&gt;. This is why when you load a web page you may notice the page jumps around as the images pop in since they are loaded in the background and may finish downloading after the HTML is parsed.&lt;/p&gt;

&lt;p&gt;But that's not the case with the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. When the browser comes across a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag when loading HTML, the browser is forced to download and parse the entire &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and evaluate it first, before it can continue with reading the rest of the HTML to build the DOM. This is why we are advised to put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the bottom of our HTML body so they don't delay the parsing of the HTML.&lt;/p&gt;

&lt;p&gt;Now you can just think that putting the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the bottom of the HTML body is ideal, but what if the HTML is too large and it takes some time to get downloaded and parsed then the JavaScript will not start downloading until all of the HTML is parsed which could delay your &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; download and affect your page performance. This is why the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes were created.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#async-and-defer"&gt;
  &lt;/a&gt;
  Async and Defer
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes load the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; without blocking the DOM and make the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag work like as a &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag to the parser as described above. This means that the script will be fetched in the background and continue parsing as normal without waiting. Okay, that seems fair but what's the difference between them...? Here we go then.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#async-vs-defer"&gt;
  &lt;/a&gt;
  Async vs Defer
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; look like they do the same thing at the first glance, but that's not the case, there is a subtle difference between the two.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defer-waits-for-the-dom-but-async-doesnt-"&gt;
  &lt;/a&gt;
  Defer waits for the DOM but Async doesn't -
&lt;/h3&gt;

&lt;p&gt;The first and most important difference Is &lt;code&gt;async&lt;/code&gt; doesn't care whether DOM is fully loaded or not, on the other side &lt;code&gt;defer&lt;/code&gt; waits for the DOM to get loaded first and after that, it starts execution of the scripts.&lt;/p&gt;

&lt;p&gt;For example, let's say you have 25000 buttons in your HTML document and now select every button of the DOM using both of the scripts and get the length of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;script src="defer.js" defer&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src="async.js" async&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class="container"&amp;gt;
  &amp;lt;!-- 25000 buttons --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are our script codes...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//! Async script code here
let asyncButton = document.querySelectorAll('button');
console.log(`Async script button count: ${asyncButton.length}`);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Defer script code here
let deferButton = document.querySelectorAll('button');
console.log(`Defer script button count: ${deferButton.length}`);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the console output...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2jVAKBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628732144264/ogBB9E8iI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2jVAKBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628732144264/ogBB9E8iI.png" alt="temp1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see now, &lt;code&gt;async&lt;/code&gt; is not waiting for the DOM to get loaded fully and selecting all the buttons loaded at the time of execution of the script and on the other hand, &lt;code&gt;defer&lt;/code&gt; is waiting for the DOM elements to get loaded first and that's why it's selecting every button presented at the DOM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your script is dependent on the DOM, then never ever use the &lt;code&gt;async&lt;/code&gt; attribute, there's the possibility that the element you need get undefined and this is a potential source of bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#defer-maintain-the-order-of-js-files-async-doesnt-"&gt;
  &lt;/a&gt;
  Defer maintain the order of JS files Async doesn't -
&lt;/h3&gt;

&lt;p&gt;What does it mean though, take another example to understand it? Let's say you will have four scripts. Each script logs the number of that script. Now if we gonna use the &lt;code&gt;async&lt;/code&gt; attribute in the scripts, the order of executing scripts become unpredictable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script src="one.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="two.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="three.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="four.js" async&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The console output will be something like this...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Qi0LwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628733846390/0AUL0x1t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Qi0LwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628733846390/0AUL0x1t4.png" alt="temp2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what if we use the &lt;code&gt;defer&lt;/code&gt; attribute in every script?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script src="one.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="two.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="three.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="four.js" defer&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the output...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2fNXD-KZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628736741526/pdhVcVeJS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2fNXD-KZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628736741526/pdhVcVeJS.png" alt="temp3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now you can see clearly that &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; always maintain the order of the script so if you have scripts that depend on each other then always consider using &lt;code&gt;defer&lt;/code&gt; rather than &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adding the &lt;code&gt;defer&lt;/code&gt; attribute will make sure DOM gets loaded first and then the scripts get executes in the given order.&lt;/li&gt;
&lt;li&gt;Adding the &lt;code&gt;async&lt;/code&gt; attribute will execute the script as soon as it gets loaded and this will not follow any order. So avoid using it if your script is dependent on each other or DOM.&lt;/li&gt;
&lt;li&gt;So practically, &lt;code&gt;defer&lt;/code&gt; is more useful than &lt;code&gt;async&lt;/code&gt;, and most of the time you would want &lt;code&gt;defer&lt;/code&gt; instead of &lt;code&gt;async&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt; is great when you want to load the script in the middle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all about &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; and script loading in JavaScript. If you enjoyed this article, please tell a friend about it or share it on your social media handles and make sure you comment below and share your thoughts about it. Thank you.🙏&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jeetsdev"&gt;Follow me on Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
