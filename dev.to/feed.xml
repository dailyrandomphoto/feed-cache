<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Greeting contributors automatically on Jarvis with Github Actions</title>
      <author>Aniket Bhattacharjee</author>
      <pubDate>Wed, 24 Nov 2021 04:19:50 +0000</pubDate>
      <link>https://dev.to/devmike123/greeting-contributors-automatically-on-jarvis-with-github-actions-2b1i</link>
      <guid>https://dev.to/devmike123/greeting-contributors-automatically-on-jarvis-with-github-actions-2b1i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/DevMike123/Jarvis/tree/main/.github%2Fworkflows"&gt;https://github.com/DevMike123/Jarvis/tree/main/.github%2Fworkflows&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-info-and-resources-about-the-workflow"&gt;
  &lt;/a&gt;
  Additional info and resources about the workflow:
&lt;/h2&gt;

&lt;p&gt;I am using Greetings action as it automatically says thanks for the hardwork to the users to create pull request or issues! This removes a lot of hard work of mine as I needn't need to write thanks to all the contributors one by one. As soon as the user makes a pull request or issue, the workflow starts working and comments thanks to the contributors for their contribution! Thank You!&lt;/p&gt;

&lt;p&gt;The given banner image at the top is the auto generated comment created by the workflow! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DevMike123/Jarvis/pull/1#pullrequestreview-814406855"&gt;Example Comment&lt;/a&gt; is also given here!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creators"&gt;
  &lt;/a&gt;
  Creators:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/DevMike123"&gt;DevMike123&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>python</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Library of Babel PR</title>
      <author>Jack</author>
      <pubDate>Wed, 24 Nov 2021 03:54:52 +0000</pubDate>
      <link>https://dev.to/realsaddy/library-of-babel-pr-3of9</link>
      <guid>https://dev.to/realsaddy/library-of-babel-pr-3of9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/library-of-babel-pr"&gt;Library of Babel PR&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/realSaddy"&gt;
        realSaddy
      &lt;/a&gt; / &lt;a href="https://github.com/realSaddy/library-of-babel"&gt;
        library-of-babel
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Github action which posts the location in the Great Library of Babel.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
library-of-babel&lt;/h1&gt;
&lt;p&gt;Github action which posts the location of a pull request in the &lt;a href="https://libraryofbabel.info/" rel="nofollow"&gt;Library of Babel&lt;/a&gt;!&lt;/p&gt;
&lt;h3&gt;
What is the Library of Babel?&lt;/h3&gt;
&lt;p&gt;You can read more on &lt;a href="https://libraryofbabel.info/About.html" rel="nofollow"&gt;their website&lt;/a&gt;. In a nutshell, it contains every single permutation of 3200 characters in a lookup. Wow!&lt;/p&gt;
&lt;h3&gt;
How to use this in your repo!&lt;/h3&gt;
&lt;p&gt;Now that you're ready to 100x your productivity, you can use this action by including it in a workflow like so:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;name: 'Library of Babel'
on: pull_request

jobs:
  library-of-babel:
    runs-on: ubuntu-latest
    steps:
      - uses: realSaddy/library-of-babel@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever a brave soul creates a pull request, it will reply with a link to where the librarians at the library already wrote it... should you really merge such unoriginal code?!?&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/realSaddy/library-of-babel"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Hey everyone! This is my first real Github action project, and I'm quite happy with it :)! &lt;/p&gt;

&lt;p&gt;The action automatically runs when a new pull request is created, and responds with the location of the pull request's diff in the &lt;a href="https://libraryofbabel.info/About.html"&gt;Library of Babel&lt;/a&gt;, a mathematical vault of every permutation of 3200 characters!&lt;/p&gt;

&lt;p&gt;I did this in a long code session I just finished, so there's no big projects using this groundbreaking action --- yet! But, I've included it in &lt;a href="https://github.com/TexasTorque/TorqueLearn"&gt;one of my open source projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;GLHF!!&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Introduction to Storage with AWS</title>
      <author>Adit Modi</author>
      <pubDate>Wed, 24 Nov 2021 02:58:02 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-storage-with-aws-2jh3</link>
      <guid>https://dev.to/aws-builders/introduction-to-storage-with-aws-2jh3</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Although legacy storage players are tired of talking about cloud’s impact on their business, the reality cannot be ignored. Cloud has been the most disruptive force in storage over the past 10 years. But drilling down into the cloud, AWS has been the most significant factor. S3 came out in 2006 as the very first AWS service. From there on the storage business as we know it has changed forever.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Millions of customers use AWS storage services to transform their business, increase agility, reduce costs, and accelerate innovation. AWS supports broad portfolio of storage solutions with deep functionality for storing, accessing, protecting, and analyzing your data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this blog post, we will discuss some of the most important AWS Storage services and How to provide reliable, scalable, and secure storage for your data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vmg91b2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f7g4mu83ib72blfrkv4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vmg91b2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f7g4mu83ib72blfrkv4.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Introduction to AWS&lt;/strong&gt; is a Series containing different articles that provide a basic introduction to different aws topics/categories. Each article covers the detailed guide on how to work with particular topic/category . This series aims at providing "A Getting Started Guide on Different aws topics / categories ."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#aws-storage-services"&gt;
  &lt;/a&gt;
  AWS Storage Services
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;AWS storage services are low-cost data storage with high durability and high availability. You also get the option to backing up information, archiving, and disaster recovery. These Storage services are widely used for migrating applications, building data lakes and modernizing application development among other use-cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-elastic-block-store"&gt;
  &lt;/a&gt;
  Amazon Elastic Block Store
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnzYwj3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqmiofexk5ku4cnijqch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnzYwj3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqmiofexk5ku4cnijqch.png" alt="Image description" width="132" height="136"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Elastic Block Store (Amazon EBS) provides persistent block storage volumes for use with Amazon EC2 instances in the AWS Cloud. Each Amazon EBS volume is automatically replicated within its Availability Zone to protect you from component failure, offering high availability and durability. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EBS volumes offer the consistent and low-latency performance needed to run your workloads. With Amazon EBS, you can scale your usage up or down within minutes—all while paying a low price for only what you provision.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-elastic-file-system"&gt;
  &lt;/a&gt;
  Amazon Elastic File System
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ah-fT5Zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wzim2ebkl4lyczztuux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ah-fT5Zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wzim2ebkl4lyczztuux.png" alt="Image description" width="130" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Elastic File System (Amazon EFS) provides a simple, scalable, elastic file system for Linux-based workloads for use with AWS Cloud services and on-premises resources. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is built to scale on demand to petabytes without disrupting applications, growing and shrinking automatically as you add and remove files, so your applications have the storage they need – when they need it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is designed to provide massively parallel shared access to thousands of Amazon EC2 instances, enabling your applications to achieve high levels of aggregate throughput and IOPS with consistent low latencies. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EFS is a fully managed service that requires no changes to your existing applications and tools, providing access through a standard file system interface for seamless integration. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EFS is a regional service storing data within and across multiple Availability Zones (AZs) for high availability and durability. You can access your file systems across AZs and AWS Regions and share files between thousands of Amazon EC2 instances and on-premises servers via AWS Direct Connect or AWS VPN.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EFS is well suited to support a broad spectrum of use cases from highly parallelized, scale-out workloads that require the highest possible throughput to single-threaded, latency-sensitive workloads. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use cases such as lift-and-shift enterprise applications, big data analytics, web serving and content management, application development and testing, media and entertainment workflows, database backups, and container storage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-fsx-for-lustre"&gt;
  &lt;/a&gt;
  Amazon FSx for Lustre
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpwKC4_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lh1ul6uoa0neqmwee2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpwKC4_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lh1ul6uoa0neqmwee2f.png" alt="Image description" width="130" height="138"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon FSx for Lustre is a fully managed file system that is optimized for compute-intensive workloads, such as high performance computing, machine learning, and media data processing workflows. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many of these applications require the high-performance and low latencies of scale-out, parallel file systems. Operating these file systems typically requires specialized expertise and administrative overhead, requiring you to provision storage servers and tune complex performance parameters. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon FSx, you can launch and run a Lustre file system that can process massive data sets at up to hundreds of gigabytes per second of throughput, millions of IOPS, and sub-millisecond latencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon FSx for Lustre is seamlessly integrated with Amazon S3, making it easy to link your long-term data sets with your high performance file systems to run compute-intensive workloads. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can automatically copy data from S3 to FSx for Lustre, run your workloads, and then write results back to S3. FSx for Lustre also enables you to burst your compute-intensive workloads from on-premises to AWS by allowing you to access your FSx file system over Amazon Direct Connect or VPN. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FSx for Lustre helps you cost-optimize your storage for compute-intensive workloads: It provides cheap and performant non-replicated storage for processing data, with your long-term data stored durably in Amazon S3 or other low-cost data stores. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon FSx, you pay for only the resources you use. There are no minimum commitments, upfront hardware or software costs, or additional fees.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-fsx-for-windows-file-server"&gt;
  &lt;/a&gt;
  Amazon FSx for Windows File Server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hubb-uIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf2bcs3da5htlul1lmz7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hubb-uIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf2bcs3da5htlul1lmz7.png" alt="Image description" width="130" height="138"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon FSx for Windows File Server provides a fully managed native Microsoft Windows file system so you can easily move your Windows-based applications that require file storage to AWS. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Built on Windows Server, Amazon FSx provides shared file storage with the compatibility and features that your Windows-based applications rely on, including full support for the SMB protocol and Windows NTFS, Active Directory (AD) integration, and Distributed File System (DFS). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon FSx uses SSD storage to provide the fast performance your Windows applications and users expect, with high levels of throughput and IOPS, and consistent sub-millisecond latencies. This compatibility and performance is particularly important when moving workloads that require Windows shared file storage, like CRM, ERP, and .NET applications, as well as home directories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon FSx, you can launch highly durable and available Windows file systems that can be accessed from up to thousands of compute instances using the industry-standard SMB protocol. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon FSx eliminates the typical administrative overhead of managing Windows file servers. You pay for only the resources used, with no upfront costs, minimum commitments, or additional fees.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-simple-storage-service"&gt;
  &lt;/a&gt;
  Amazon Simple Storage Service
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohW1csX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvsx56eox994dqgplg52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohW1csX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvsx56eox994dqgplg52.png" alt="Image description" width="130" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means customers of all sizes and industries can use it to store and protect any amount of data for a range of use cases, such as websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon S3 provides easy-to-use management features so you can organize your data and configure finely-tuned access controls to meet your specific business, organizational, and compliance requirements. Amazon S3 is designed for 99.999999999% (11 9's) of durability, and stores data for millions of applications for companies all around the world.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-glacier"&gt;
  &lt;/a&gt;
  Amazon S3 Glacier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y8sdbIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y12m1s2fy7w6yvxb77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y8sdbIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y12m1s2fy7w6yvxb77.png" alt="Image description" width="130" height="138"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon S3 Glacier is a secure, durable, and extremely low-cost storage service for data archiving and long-term backup. It is designed to deliver 99.999999999% durability, and provides comprehensive security and compliance capabilities that can help meet even the most stringent regulatory requirements. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon S3 Glacier provides query-in-place functionality, allowing you to run powerful analytics directly on your archive data at rest. You can store data for as little as $1 per terabyte per month, a significant savings compared to on-premises solutions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To keep costs low yet suitable for varying retrieval needs, Amazon S3 Glacier provides three options for access to archives, from a few minutes to several hours, and S3 Glacier Deep Archive provides two access options ranging from 12 to 48 hours.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-backup"&gt;
  &lt;/a&gt;
  AWS Backup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKBIcSX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiznfyip03krgncrcgaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKBIcSX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiznfyip03krgncrcgaj.png" alt="Image description" width="130" height="138"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS Backup enables you to centralize and automate data protection across AWS services. AWS Backup offers a cost-effective, fully managed, policy-based service that further simplifies data protection at scale. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Backup also helps you support your regulatory compliance or business policies for data protection. Together with AWS Organizations, AWS Backup enables you to centrally deploy data protection policies to configure, manage, and govern your backup activity across your organization’s AWS accounts and resources, including Amazon Elastic Compute Cloud (Amazon EC2) instances, Amazon Elastic Block Store (Amazon EBS) volumes, Amazon Relational Database Service (Amazon RDS) databases (including Amazon Aurora clusters), Amazon DynamoDB tables, Amazon Elastic File System (Amazon EFS) file systems, Amazon FSx for Lustre file systems, Amazon FSx for Windows File Server file systems, and AWS Storage Gateway volumes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#storage-gateway"&gt;
  &lt;/a&gt;
  Storage Gateway
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkLcAurA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqz6qcoe09db9sdjql42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkLcAurA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqz6qcoe09db9sdjql42.png" alt="Image description" width="130" height="138"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Storage Gateway is a hybrid storage service that enables your on-premises applications to seamlessly use AWS cloud storage. You can use the service for backup and archiving, disaster recovery, cloud data processing, storage tiering, and migration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your applications connect to the service through a virtual machine or hardware gateway appliance using standard storage protocols, such as NFS, SMB and iSCSI. The gateway connects to AWS storage services, such as Amazon S3, S3 Glacier, and Amazon EBS, providing storage for files, volumes, and virtual tapes in AWS. The service includes a highly-optimized data transfer mechanism, with bandwidth management, automated network resilience, and efficient data transfer, along with a local cache for low-latency on-premises access to your most active data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHv1ynxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82sllpcwzet8mzebhf51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHv1ynxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82sllpcwzet8mzebhf51.png" alt="Image description" width="663" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS storage services help companies extend secondary storage targets to the cloud to address exponential data growth. Meet long-term retention requirements with AWS storage services. Optimizing their storage costs based on how frequently and quickly they need to access their data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;these services also provide security, reliability, unlimited scalability and durability. AWS supports security standards and compliance certifications for these services to help customers satisfy requirements for virtually every regulatory agency around the globe.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this guide helps you with the Introduction to Storage with AWS.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section 👇&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;👋 &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🤓 &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🐱‍💻 &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
✍️ &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me 🚀 for more content.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Writing Clean JavaScript — ES6 Edition</title>
      <author>All About Ishaan</author>
      <pubDate>Wed, 24 Nov 2021 01:17:20 +0000</pubDate>
      <link>https://dev.to/allaboutishaan/writing-clean-javascript-es6-edition-5eci</link>
      <guid>https://dev.to/allaboutishaan/writing-clean-javascript-es6-edition-5eci</guid>
      <description>&lt;p&gt;Clean code is not just code that works, but rather code that can be easily read, reused, and refactored by others. Writing clean code is important because, in a typical work environment, you are not writing for yourself or for the machine. In reality, you are writing for a group of developers who will need to understand, edit and build over your work.&lt;/p&gt;

&lt;p&gt;This article focuses on writing clean &lt;a href="https://262.ecma-international.org/6.0/"&gt;JavaScript ES6&lt;/a&gt; code which is &lt;em&gt;not framework-specific&lt;/em&gt;, nonetheless, most of the mentioned examples can apply to &lt;em&gt;almost any other programming language&lt;/em&gt;. In general, the following concepts are recommendations mostly adopted from Robert C. Martin's book &lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;,and they are not meant to be strictly followed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-variables"&gt;
  &lt;/a&gt;
  1. Variables
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#use-meaningful-names"&gt;
  &lt;/a&gt;
  Use meaningful names
&lt;/h2&gt;

&lt;p&gt;Names of variables should be descriptive. The rule of thumb is that most JavaScript variables are in Camel Case (&lt;em&gt;camelCase&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
const foo = "JDoe@example.com";
const bar = "John";
const age = 23;
const qux = true;

// Do ✅
const email = "John@example.com";
const firstName = "John";
const age = 23;
const isActive = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that boolean names usually answer specific questions, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;isActive
didSubscribe
hasLinkedAccount
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#avoid-adding-unnecessary-contexts"&gt;
  &lt;/a&gt;
  Avoid adding unnecessary contexts
&lt;/h2&gt;

&lt;p&gt;Do not add redundant context to variable names when the context is already provided by the containing object or class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// Don't ❌
const user = {
  userId: "296e2589-7b33-400a-b762-007b730c8e6d",
  userEmail: "JDoe@example.com",
  userFirstName: "John",
  userLastName: "Doe",
  userAge: 23,
};

user.userId;

// Do ✅
const user = {
  id: "296e2589-7b33-400a-b762-007b730c8e6d",
  email: "JDoe@example.com",
  firstName: "John",
  lastName: "Doe",
  age: 23,
};

user.id;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#avoid-hardcoded-values"&gt;
  &lt;/a&gt;
  Avoid hardcoded values
&lt;/h2&gt;

&lt;p&gt;Instead of plugging in constant values, make sure to declare meaningful and searchable constants. Notice that global constants can be stylized in Screaming Snake Case (&lt;em&gt;SCREAMING_SNAKE_CASE&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
setTimeout(clearSessionData, 900000);

// Do ✅
const SESSION_DURATION_MS = 15 * 60 * 1000;

setTimeout(clearSessionData, SESSION_DURATION_MS);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-functions"&gt;
  &lt;/a&gt;
  2. Functions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#use-descriptive-names"&gt;
  &lt;/a&gt;
  Use descriptive names
&lt;/h2&gt;

&lt;p&gt;Function names can be lengthy, as long as they portray what the function actually does. Function names usually have the form of action verbs, with the possible exception of functions that return booleans --- which can have the form of a "&lt;em&gt;Yes or No&lt;/em&gt;" question. Function names should also be in Camel Case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function toggle() {
  // ...
}

function agreed(user) {
  // ...
}

// Do ✅
function toggleThemeSwitcher() {
  // ...
}

function didAgreeToAllTerms(user) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-default-arguments"&gt;
  &lt;/a&gt;
  Use default arguments
&lt;/h2&gt;

&lt;p&gt;Default arguments are cleaner than short-circuiting or using extra conditional statements inside the function body. Though, it is important here to remember that short-circuiting works for all values that are considered "&lt;em&gt;falsy&lt;/em&gt;" such as &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, while default arguments only replace &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function printAllFilesInDirectory(dir) {
  const directory = dir || "./";
  //   ...
}

// Do ✅
function printAllFilesInDirectory(dir = "./") {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#limit-the-number-of-arguments"&gt;
  &lt;/a&gt;
  Limit the number of arguments
&lt;/h2&gt;

&lt;p&gt;As controversial as this rule might be, functions should have 0, 1, or 2 arguments. Having three arguments is already excessive, and beyond that implies either of two cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The function is already doing a lot and should be divided.&lt;/li&gt;
&lt;li&gt;  The data passed to the function is somehow related and can be passed as a dedicated data structure.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function sendPushNotification(title, message, image, isSilent, delayMs) {
  // ...
}

sendPushNotification("New Message", "...", "http://...", false, 1000);

// Do ✅
function sendPushNotification({ title, message, image, isSilent, delayMs }) {
  // ...
}

const notificationConfig = {
  title: "New Message",
  message: "...",
  image: "http://...",
  isSilent: false,
  delayMs: 1000,
};

sendPushNotification(notificationConfig);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#avoid-executing-multiple-actions-in-a-function"&gt;
  &lt;/a&gt;
  Avoid executing multiple actions in a function
&lt;/h2&gt;

&lt;p&gt;A function should do one thing at a time. This rule helps reduce the function's size and complexity, which results in easier testing, debugging, and refactoring. The number of lines in a function is a strong indicator that should raise a flag on whether the function is doing many actions. Generally, try aiming for something less than 20--30 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function pingUsers(users) {
  users.forEach((user) =&amp;gt; {
    const userRecord = database.lookup(user);
    if (!userRecord.isActive()) {
      ping(user);
    }
  });
}

// Do ✅
function pingInactiveUsers(users) {
  users.filter(!isUserActive).forEach(ping);
}

function isUserActive(user) {
  const userRecord = database.lookup(user);
  return userRecord.isActive();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#avoid-using-flags-as-arguments"&gt;
  &lt;/a&gt;
  Avoid using flags as arguments
&lt;/h2&gt;

&lt;p&gt;A flag in one of the arguments effectively means the function can still be simplified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function createFile(name, isPublic) {
  if (isPublic) {
    fs.create(`./public/${name}`);
  } else {
    fs.create(name);
  }
}

// Do ✅
function createFile(name) {
  fs.create(name);
}

function createPublicFile(name) {
  createFile(`./public/${name}`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#do-not-repeat-yourself-dry"&gt;
  &lt;/a&gt;
  Do not repeat yourself (DRY)
&lt;/h2&gt;

&lt;p&gt;Duplicate code is never a good sign. If you repeat yourself you will have to update multiple places whenever there is a change in logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function renderCarsList(cars) {
  cars.forEach((car) =&amp;gt; {
    const price = car.getPrice();
    const make = car.getMake();
    const brand = car.getBrand();
    const nbOfDoors = car.getNbOfDoors();

    render({ price, make, brand, nbOfDoors });
  });
}

function renderMotorcyclesList(motorcycles) {
  motorcycles.forEach((motorcycle) =&amp;gt; {
    const price = motorcycle.getPrice();
    const make = motorcycle.getMake();
    const brand = motorcycle.getBrand();
    const seatHeight = motorcycle.getSeatHeight();

    render({ price, make, brand, seatHeight });
  });
}

// Do ✅
function renderVehiclesList(vehicles) {
  vehicles.forEach((vehicle) =&amp;gt; {
    const price = vehicle.getPrice();
    const make = vehicle.getMake();
    const brand = vehicle.getBrand();

    const data = { price, make, brand };

    switch (vehicle.type) {
      case "car":
        data.nbOfDoors = vehicle.getNbOfDoors();
        break;
      case "motorcycle":
        data.seatHeight = vehicle.getSeatHeight();
        break;
    }

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#avoid-side-effects"&gt;
  &lt;/a&gt;
  Avoid side effects
&lt;/h2&gt;

&lt;p&gt;In JavaScript, you should favor functional over imperative patterns. In other words, keep functions pure unless needed otherwise. Side effects can modify shared states and resources, resulting in undesired behaviors. All side effects should be centralized; if you need to mutate a global value or modify a file, dedicate one and only one service for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
let date = "21-8-2021";

function splitIntoDayMonthYear() {
  date = date.split("-");
}

splitIntoDayMonthYear();

// Another function could be expecting date as a string
console.log(date); // ['21', '8', '2021'];

// Do ✅
function splitIntoDayMonthYear(date) {
  return date.split("-");
}

const date = "21-8-2021";
const newDate = splitIntoDayMonthYear(date);

// Original vlaue is intact
console.log(date); // '21-8-2021';
console.log(newDate); // ['21', '8', '2021'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, if a mutable value is passed to a function, you should return a new mutated clone of the value rather than mutating the value directly and returning it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// Don't ❌
function enrollStudentInCourse(course, student) {
  course.push({ student, enrollmentDate: Date.now() });
}

// Do ✅
function enrollStudentInCourse(course, student) {
  return [...course, { student, enrollmentDate: Date.now() }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-conditionals"&gt;
  &lt;/a&gt;
  3. Conditionals
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#use-nonnegative-conditionals"&gt;
  &lt;/a&gt;
  Use non-negative conditionals
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function isUserNotVerified(user) {
  // ...
}

if (!isUserNotVerified(user)) {
  // ...
}

// Do ✅
function isUserVerified(user) {
  // ...
}

if (isUserVerified(user)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-shorthands-whenever-possible"&gt;
  &lt;/a&gt;
  Use shorthands whenever possible
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
if (isActive === true) {
  // ...
}

if (firstName !== "" &amp;amp;&amp;amp; firstName !== null &amp;amp;&amp;amp; firstName !== undefined) {
  // ...
}

const isUserEligible = user.isVerified() &amp;amp;&amp;amp; user.didSubscribe() ? true : false;

// Do ✅
if (isActive) {
  // ...
}

if (!!firstName) {
  // ...
}

const isUserEligible = user.isVerified() &amp;amp;&amp;amp; user.didSubscribe();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#avoid-branching-and-return-soon"&gt;
  &lt;/a&gt;
  Avoid branching and return soon
&lt;/h2&gt;

&lt;p&gt;Returning early will make your code linear, more readable, and less complex.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function addUserService(db, user) {
  if (!db) {
    if (!db.isConnected()) {
      if (!user) {
        return db.insert("users", user);
      } else {
        throw new Error("No user");
      }
    } else {
      throw new Error("No database connection");
    }
  } else {
    throw new Error("No database");
  }
}

// Do ✅
function addUserService(db, user) {
  if (!db) throw new Error("No database");
  if (!db.isConnected()) throw new Error("No database connection");
  if (!user) throw new Error("No user");

  return db.insert("users", user);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#favor-object-literals-or-maps-over-switch-statements"&gt;
  &lt;/a&gt;
  Favor object literals or maps over switch statements
&lt;/h2&gt;

&lt;p&gt;Whenever this applies, indexing using objects or maps will reduce code and improve performance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
const getColorByStatus = (status) =&amp;gt; {
  switch (status) {
    case "success":
      return "green";
    case "failure":
      return "red";
    case "warning":
      return "yellow";
    case "loading":
    default:
      return "blue";
  }
};

// Do ✅
const statusColors = {
  success: "green",
  failure: "red",
  warning: "yellow",
  loading: "blue",
};

const getColorByStatus = (status) =&amp;gt; statusColors[status] || "blue";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-optional-chaining-and-nullish-coalescing"&gt;
  &lt;/a&gt;
  Use optional chaining and nullish coalescing
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  email: "JDoe@example.com",
  billing: {
    iban: "...",
    swift: "...",
    address: {
      street: "Some Street Name",
      state: "CA",
    },
  },
};

// Don't ❌
const email = (user &amp;amp;&amp;amp; user.email) || "N/A";
const street =
  (user &amp;amp;&amp;amp;
    user.billing &amp;amp;&amp;amp;
    user.billing.address &amp;amp;&amp;amp;
    user.billing.address.street) ||
  "N/A";
const state =
  (user &amp;amp;&amp;amp;
    user.billing &amp;amp;&amp;amp;
    user.billing.address &amp;amp;&amp;amp;
    user.billing.address.state) ||
  "N/A";

// Do ✅
const email = user?.email ?? "N/A";
const street = user?.billing?.address?.street ?? "N/A";
const state = user?.billing?.address?.state ?? "N/A";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-concurrency"&gt;
  &lt;/a&gt;
  4. Concurrency
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#avoid-callbacks"&gt;
  &lt;/a&gt;
  Avoid callbacks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function"&gt;Callbacks&lt;/a&gt; are messy and result in nested code. ES6 offers &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promises&lt;/a&gt; which allow for chaining callbacks and thus result in cleaner code. Yet, ES6 also provides the "&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;Async/Await&lt;/a&gt;" syntax as an arguably cleaner solution that imposes further linearity to code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
getUser(function (err, user) {
  getProfile(user, function (err, profile) {
    getAccount(profile, function (err, account) {
      getReports(account, function (err, reports) {
        sendStatistics(reports, function (err) {
          console.error(err);
        });
      });
    });
  });
});

// Do ✅
getUser()
  .then(getProfile)
  .then(getAccount)
  .then(getReports)
  .then(sendStatistics)
  .catch((err) =&amp;gt; console.error(err));

// or using Async/Await ✅✅

async function sendUserStatistics() {
  try {
    const user = await getUser();
    const profile = await getProfile(user);
    const account = await getAccount(profile);
    const reports = await getReports(account);
    return sendStatistics(reports);
  } catch (e) {
    console.error(err);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-error-handling"&gt;
  &lt;/a&gt;
  5. Error Handling
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#handle-thrown-errors-and-rejected-promises"&gt;
  &lt;/a&gt;
  Handle thrown errors and rejected promises
&lt;/h2&gt;

&lt;p&gt;No need to mention why this is an extremely important rule. Spending time now on handling errors correctly will reduce the likelihood of having to hunt down bugs later, especially when your code reaches production.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// Don't ❌
try {
  // Possible erronous code
} catch (e) {
  console.log(e);
}

// Do ✅
try {
  // Possible erronous code
} catch (e) {
  // Follow the most applicable (or all):
  // 1- More suitable than console.log
  console.error(e);

  // 2- Notify user if applicable
  alertUserOfError(e);

  // 3- Report to server
  reportErrorToServer(e);

  // 4- Use a custom error handler
  throw new CustomError(e);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#6-comments"&gt;
  &lt;/a&gt;
  6. Comments
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#only-comment-business-logic"&gt;
  &lt;/a&gt;
  Only comment business logic
&lt;/h2&gt;

&lt;p&gt;Readable code saves you from over-commenting your code. Hence, you should only comment on complex logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
function generateHash(str) {
  // Hash variable
  let hash = 0;

  // Get the length of the string
  let length = str.length;

  // If the string is empty return
  if (!length) {
    return hash;
  }

  // Loop through every character in the string
  for (let i = 0; i &amp;lt; length; i++) {
    // Get character code.
    const char = str.charCodeAt(i);

    // Make the hash
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;

    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}

// Do ✅
function generateHash(str) {
  let hash = 0;
  let length = str.length;
  if (!length) {
    return hash;
  }

  for (let i = 0; i &amp;lt; length; i++) {
    const char = str.charCodeAt(i);
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;
    hash = hash &amp;amp; hash; // Convert to 32bit integer
  }
  return hash;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#make-use-of-version-control"&gt;
  &lt;/a&gt;
  Make use of version control
&lt;/h2&gt;

&lt;p&gt;There is absolutely no reason to keep commented code or journal comments, version control is already there to handle this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't ❌
/**
 * 2021-7-21: Fixed corner case
 * 2021-7-15: Improved performance
 * 2021-7-10: Handled mutliple user types
 */
function generateCanonicalLink(user) {
  // const session = getUserSession(user)
  const session = user.getSession();
  // ...
}

// Do ✅
function generateCanonicalLink(user) {
  const session = user.getSession();
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#document-when-possible"&gt;
  &lt;/a&gt;
  Document when possible
&lt;/h2&gt;

&lt;p&gt;Documentation helps increase code quality and reliability. It serves as a user manual for your codebase in which anyone understands all the aspects of your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**  
 * Returns x raised to the n-th power.  
 *  
 * @param {number} x The number to raise.  
 * @param {number} n The power, should be a natural number.  
 * @return {number} x raised to the n-th power.  
 */ 
function pow(x, n) {   
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This article discussed briefly some important steps that can be taken to increase your JavaScript code using the latest &lt;a href="https://262.ecma-international.org/6.0/"&gt;ECMA2015/ES6&lt;/a&gt; syntax. Again, most of these concepts can be generalized and applied to different programming languages. Adopting these practices can take some time especially for larger codebases, but will guarantee that --- for the long run --- your code becomes readable, scalable, and easy to refactor.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Two mutables don’t make a right</title>
      <author>Zach Klippenstein</author>
      <pubDate>Wed, 24 Nov 2021 00:08:56 +0000</pubDate>
      <link>https://dev.to/zachklipp/two-mutables-dont-make-a-right-2kgp</link>
      <guid>https://dev.to/zachklipp/two-mutables-dont-make-a-right-2kgp</guid>
      <description>&lt;p&gt;We’ve all done it: put some data in a list, changed the data around a little, and rendered the list in some UI. Unfortunately, sometimes the UI doesn’t update when you change the data. This post isn’t going to try to cover all the reasons why that’s possible, but the most common one which I’ve seen come up at least a couple times a week.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is largely applicable to any reactive programming library, although it does focus a little extra on Compose in spots. It also focuses on collections, but applies to any data structures you're using to hold state.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;If someone sent you a link to this post as a reply to a question on Slack or somewhere, and you just want a quick answer, here you go:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don't put mutable collections inside mutable state holders.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;State holders like &lt;code&gt;BehaviorRelay&lt;/code&gt;, &lt;code&gt;MutableStateFlow&lt;/code&gt;, and &lt;code&gt;MutableState&lt;/code&gt; only send change notifications when the old and new state values are not equal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They &lt;strong&gt;will not&lt;/strong&gt; send change notifications if you simply change some properties of the object they're holding.&lt;/li&gt;
&lt;li&gt;They &lt;strong&gt;will not&lt;/strong&gt; send change notifications if you mutate the object they're holding, then set that same object as the new state. Because the old and new state objects are actually the same object, they will always be considered equal (this is part of the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html"&gt;contract&lt;/a&gt; of the &lt;code&gt;equals&lt;/code&gt; method in Kotlin and Java).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The correct thing to do is to either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Store an immutable collection in the state holder, and update the collection by creating a new copy. The easiest way to do this is to use the standard Kotlin read-only collections, like &lt;code&gt;listOf()&lt;/code&gt;, and the standard operators on those collections, like &lt;code&gt;plus&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use a special collection type that can send its own change notifications when you mutate it. This only works if you're using Compose's state system, because RxJava, LiveData, Flow, etc. can't provide such collection types. Compose provides two collection types for this: &lt;code&gt;mutableStateListOf&amp;lt;T&amp;gt;(): SnapshotStateList&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;mutableStateMapOf&amp;lt;K, V&amp;gt;(): SnapshotStateMap&amp;lt;K, V&amp;gt;&lt;/code&gt;. If you really want to use one of these but need a &lt;code&gt;Set&lt;/code&gt;, you can just use a &lt;code&gt;SnapshotStateMap&lt;/code&gt; with a value type of &lt;code&gt;Unit&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#dont-do"&gt;
  &lt;/a&gt;
  DON'T DO
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just as useless:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="n"&gt;tempList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;because list and tempList refer to the same object, so &lt;code&gt;list = tempList&lt;/code&gt; is a no-op. That's the same as doing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#do"&gt;
  &lt;/a&gt;
  DO
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableStateListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully that helps, but if you'd like to know &lt;em&gt;why&lt;/em&gt; this is the case, please read on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#degrees-of-mutability"&gt;
  &lt;/a&gt;
  Degrees of mutability
&lt;/h2&gt;

&lt;p&gt;When writing stateful code, I find it helpful to think about the number of ways a single value can be changed. I'm not sure if there's a standard term for this concept, so I'll just call it the "degree of mutability". That number should never be more than one. Consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you found this in a codebase, and you had to update this value, how would you do it? You've got three options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;By re-assigning &lt;code&gt;data&lt;/code&gt; to point to a different &lt;code&gt;MutableState&lt;/code&gt;: &lt;code&gt;data = otherMutableState&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;By changing the value of the &lt;code&gt;MutableState&lt;/code&gt;: &lt;code&gt;data.value = otherList&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;By changing the list itself: &lt;code&gt;data.value.add("b")&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is bad for multiple reasons: it's not clear to readers of the code how they &lt;em&gt;should&lt;/em&gt; change the value, and it means it's not safe to pass any of the nested values around because some other code might decide to just re-assign &lt;code&gt;data&lt;/code&gt;. In this example, the only "correct" place to mutate is the value of the &lt;code&gt;MutableState&lt;/code&gt;, since that's the only one that will actually cause change notifications to be sent.&lt;/p&gt;

&lt;p&gt;Let's dig into the two main concepts at play here: mutable data structures and observing state changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifying-collections"&gt;
  &lt;/a&gt;
  Modifying collections
&lt;/h2&gt;

&lt;p&gt;The Kotlin standard library has two list types: &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;MutableList&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For brevity I’ll limit the discussion in this section to lists, although the same principles apply to other data structures like maps and sets.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MutableList&lt;/code&gt;, as the name implies, is a list that has operations to mutate, or change, its contents: add, remove, and replace items. It’s easy to come to the conclusion that the &lt;code&gt;List&lt;/code&gt; type must therefore be &lt;em&gt;immutable&lt;/em&gt;. That’s not the case. &lt;code&gt;List&lt;/code&gt;s are ‘read-only’, but they may or may not be mutable. Given a reference to a &lt;code&gt;List&lt;/code&gt;, you can’t change its contents yourself, but some other code might be able to. The &lt;code&gt;MutableList&lt;/code&gt; interface extends the &lt;code&gt;List&lt;/code&gt; interface, so it’s very easy to create a list that you can change, but pass it around to other code so that code can only read it, even as you’re still making changes. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mutableData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MutableList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;readOnlyData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mutableData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That said, Kotlin still provides operators like &lt;code&gt;plus&lt;/code&gt; and &lt;code&gt;minus&lt;/code&gt; for &lt;code&gt;Lists&lt;/code&gt; – even though they’re read-only! It can do this because these operators actually copy the list and return a new instance of the list, instead of mutating the list object in-place. This code demonstrates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// Read-only Lists&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Must be a var since we'll assign a new instance.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;longerList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="n"&gt;longerList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;longerList&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;

&lt;span class="c1"&gt;// The !== operator compares references.&lt;/span&gt;
&lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;!==&lt;/span&gt; &lt;span class="n"&gt;longerList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;longerList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longerList&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;/// Mutable Lists&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mutableList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Can be a val since we'll modify in-place.&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;longerMutableList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mutableList&lt;/span&gt;
&lt;span class="n"&gt;longerMutableList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutableList&lt;/span&gt; &lt;span class="p"&gt;===&lt;/span&gt; &lt;span class="n"&gt;longerMutableList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Both lists point to the same object, so they're equal.&lt;/span&gt;
&lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutableList&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;longerMutableList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutableList&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we've reviewed how collection mutation and comparison interact, let's review how common libraries manage state changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observing-state-changes"&gt;
  &lt;/a&gt;
  Observing state changes
&lt;/h2&gt;

&lt;p&gt;In order for a UI to update when data changes, it needs to be notified when changes happen. Some common tools for doing this on Android are libraries like RxJava and LiveData, as well as Kotlin's Flows and, more recently, Compose’s snapshot state system. All these options actually have very similar APIs for this particular task and they all look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;StateHolder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ValueType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;StateHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library provides some type that holds a reference to some value that represents a piece of “state” in your program. That holder type lets you do two things: (1) change the value, and (2) subscribe to be notified when the value changes. Two key concepts here are “state” and “change”. If you look at a state value at two different times, and it’s the same value, then from your perspective the state hasn’t changed. Even if, in the meantime, a whole bunch of work has happened behind the scenes to recalculate what the state value is and determined that it should be… the same value. This concept is often referred to in a number of ways, with terms like "idempotency", "conflation", or "de-duping". In all of the aforementioned libraries, setting the state to the current value won't actually send any change notifications.&lt;/p&gt;

&lt;p&gt;In practice, this is actually a performance optimization because when the UI is derived from some state, then given two equivalent state values, the same UI should be derived. If the state value hasn't changed, there's no need to update anything in the UI, because nothing would actually change.&lt;/p&gt;

&lt;p&gt;Given the pseudo-types from the above code, and the behavior of the libraries mentioned above, this code would send a change notification:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;StateHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Change state to a new value&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but this code would not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;StateHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// "Change" the state to the same value…&lt;/span&gt;
&lt;span class="c1"&gt;// that is, don't change it at all.&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which implies that this code would &lt;em&gt;also&lt;/em&gt; not send change notifications:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;StateHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempModel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="c1"&gt;// The name property is a var, so we can just change it.&lt;/span&gt;
&lt;span class="c1"&gt;// However, StateHolder has no way of knowing when&lt;/span&gt;
&lt;span class="c1"&gt;// properties of objects it's holding change.&lt;/span&gt;
&lt;span class="n"&gt;tempModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;

&lt;span class="c1"&gt;// model.value === tempModel, which implies that&lt;/span&gt;
&lt;span class="c1"&gt;// model.value == tempModel, so this is also a no-op.&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempModel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That code is effectively the same as this, which makes the issue more obvious:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;StateHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you change the properties inside the &lt;code&gt;Model&lt;/code&gt;, you're mutating the same object that the holder already knows about. So when it does its internal comparison of the current value to the new one, it's comparing the same object to itself, and the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html"&gt;contract of Kotlin's &lt;code&gt;equals&lt;/code&gt; method&lt;/a&gt; requires that an object is always "equal" to itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collections-as-state"&gt;
  &lt;/a&gt;
  Collections as state
&lt;/h2&gt;

&lt;p&gt;The above &lt;code&gt;Model&lt;/code&gt; type was a thinly-veiled placeholder for &lt;code&gt;MutableList&lt;/code&gt;, &lt;code&gt;MutableMap&lt;/code&gt;, or any other standard mutable collection type. Substitute &lt;code&gt;MutableList&lt;/code&gt; for &lt;code&gt;Model&lt;/code&gt; and you'll get the bad example code at the top of this post. Storing a mutable object inside a state holder, then mutating the object, will not send change notifications unless the mutable object sends its own change notifications.&lt;/p&gt;

&lt;p&gt;There are two alternatives, as described near the top of this post, and they each have their own benefits and trade-offs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immutable-collections"&gt;
  &lt;/a&gt;
  Immutable collections
&lt;/h3&gt;

&lt;p&gt;Immutable collections are, generally, easier to reason about in concurrent code because given an instance of a collection, you can assume that collection will never change until the heat-death of the universe. When using reactive libraries like RxJava or LiveData, using immutable collections is your only real option. And while it might sound expensive, in many cases copying small collections is actually very fast and not worth worrying about.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snapshotaware-collections"&gt;
  &lt;/a&gt;
  Snapshot-aware collections
&lt;/h3&gt;

&lt;p&gt;Compose provides an alternative to immutable collections: collections which actually send their own change notifications. These collections implement the standard Kotlin &lt;code&gt;Mutable*&lt;/code&gt; interfaces, and can be changed in-place. When modified, they tell the snapshot state system that anything that read the collections should be invalidated and recalculated. This is possible because Compose's snapshot state system doesn't require state holders to have any explicit API for observing changes. For example, this is perfectly acceptable code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MutableList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableStateListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;list&lt;/code&gt; is a &lt;code&gt;val&lt;/code&gt;, not a &lt;code&gt;var&lt;/code&gt;, because we only want to mutate the list &lt;em&gt;itself&lt;/em&gt;, and not change the instance of the list to which the name &lt;code&gt;list&lt;/code&gt; refers. Any code reading &lt;code&gt;list&lt;/code&gt; in a Composable (or any other snapshot-aware context) will automatically be notified when the list is changed. Also note that &lt;code&gt;list&lt;/code&gt; has type &lt;code&gt;MutableList&lt;/code&gt; – aside from how the list is created, the &lt;code&gt;mutableStateListOf()&lt;/code&gt; function, it's just a standard Kotlin list. For more information about how Compose's snapshot state system works, see &lt;a href="https://dev.to/zachklipp/introduction-to-the-compose-snapshot-system-19cn"&gt;this blog post&lt;/a&gt;, as well as the &lt;a href="https://dev.to/zachklipp/series/12895"&gt;other posts in this series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Under the hood, the mechanism by which these "snapshot state collections" work is actually simpler than you might suspect. They use immutable collections! &lt;code&gt;mutableStateListOf&lt;/code&gt; returns a &lt;code&gt;MutableList&lt;/code&gt; that effectively stores a private reference to a special &lt;em&gt;immutable&lt;/em&gt; list inside a &lt;code&gt;MutableState&lt;/code&gt;. When you modify the list, it creates a copy of the private immutable list with the change and stores it in a &lt;code&gt;MutableState&lt;/code&gt;. The trick here is that the immutable list isn't just a regular &lt;code&gt;ArrayList&lt;/code&gt;, but an special implementation that is "persistent" – that's a fancy term from the world of functional programming that means that when the list is copied to be modified, only a small part of the list is actually &lt;em&gt;copied&lt;/em&gt;, and most of the list ends up just being a reference to the old list. This means that even large collections can be copied and mutated without wasting space or time. Persistent data structures are a fun topic but too big to get into more here, so check out the &lt;a href="https://en.wikipedia.org/wiki/Persistent_data_structure"&gt;Wikipedia page&lt;/a&gt; for more information. Kotlin doesn't include any persistent lists in its standard library, but does provide a separate kotlinx library, &lt;a href="https://github.com/Kotlin/kotlinx.collections.immutable"&gt;&lt;code&gt;kotlinx.collections.immutable&lt;/code&gt;&lt;/a&gt;, which is actually what Compose uses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you came here wondering why your UI wasn't updating when you changed a list, I hope this post has not only answered your question, but also explained how to think about stateful data flow. Always think carefully about which parts of your data are mutable and immutable.&lt;/p&gt;

&lt;p&gt;Please let me know if anything was unclear or if you have any further questions in the comments!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>android</category>
      <category>compose</category>
    </item>
    <item>
      <title>Controlled vs Uncontrolled Components</title>
      <author>Katelyn</author>
      <pubDate>Tue, 23 Nov 2021 23:49:22 +0000</pubDate>
      <link>https://dev.to/katelynjewel/controlled-vs-uncontrolled-components-44e0</link>
      <guid>https://dev.to/katelynjewel/controlled-vs-uncontrolled-components-44e0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-controlled-and-uncontrolled-components-in-react"&gt;
  &lt;/a&gt;
  What is the difference between controlled and uncontrolled components in react?
&lt;/h2&gt;

&lt;p&gt;To put simply, controlled components have their data being handled with a react component whereas an uncontrolled component's data is being handled with the DOM itself. Let's dig into this answer a bit more though starting at the basics and including a few visual examples. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-controlled-and-uncontrolled-components"&gt;
  &lt;/a&gt;
  What are controlled and uncontrolled components?
&lt;/h3&gt;

&lt;p&gt;Form elements are rendered with HTML within React components where data is being accessed and manipulate. &lt;em&gt;When we are discussing uncontrolled and controlled components these are terms that are specifically discussing the way in which the form created is handling and accessing that said data.&lt;/em&gt; The data handling can be done a few different ways but is commonly seen using typed elements like, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; or selected elements such as: &lt;code&gt;&amp;lt;checkbox&amp;gt;, &amp;lt;select&amp;gt;, &amp;lt;radiobutton&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzSwhnMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xp30fh9v4sjfj1kv45w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzSwhnMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xp30fh9v4sjfj1kv45w.png" alt="Visual chart with differences between controlled and uncontrolled components" width="745" height="216"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controlled-components"&gt;
  &lt;/a&gt;
  Controlled Components
&lt;/h3&gt;

&lt;p&gt;As we stated earlier controlled components handle their updated data using use state. This would look like setting the value for the input form element to &lt;code&gt;this.state.value&lt;/code&gt; or to a use state. When setting these element's value to use state, we have wrapped up the control for both the rendering of the form as well as future input of the form into the same React component. Another way to think of is is that the React state will always act as "the source of truth". As users interact with the form, handleChange will run on every keystroke or interaction - which then updates the React state. &lt;/p&gt;

&lt;p&gt;The React documentation acknowledges that writing out controlled components can feel banal since you do need to create an event handler for each way the data can change while also containing that in the React component use state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5y8UeyGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2sxyth0k3icozju567j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5y8UeyGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2sxyth0k3icozju567j.jpeg" alt="controlled vs uncontrolled forms" width="460" height="710"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uncontrolled-components"&gt;
  &lt;/a&gt;
  Uncontrolled Components
&lt;/h3&gt;

&lt;p&gt;A helpful tidbit to remember about uncontrolled components is that the part of the reason it's uncontrolled is because the value is set by the user and not by the program. With this in mind the input: &lt;code&gt;&amp;lt;input type="file" /&amp;gt;&lt;/code&gt; will always be uncontrolled without the value being set. This will render the for element's, where the form element's data is handled by the DOM. In this way it functions similarly to traditional HTML code. &lt;/p&gt;

&lt;p&gt;Due to uncontrolled components keeping their "source of truth" in the DOM, it is sometimes easier to integrate React and non-React code when using uncontrolled components. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tdJTigw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et4eofywmwcdzb1k0d5o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tdJTigw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et4eofywmwcdzb1k0d5o.jpeg" alt="controll vs uncontroll" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWptUHTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj5gv0ed3xiylid1yblr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWptUHTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj5gv0ed3xiylid1yblr.png" alt="kyle's version" width="836" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The primary difference between a controlled component vs an uncontrolled component is related to how they handle their value. Uncontrolled components pass down the value through props. In contrast, controlled components use state to handle the value internally. For most use cases, controlled components are the best option in code. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>forms</category>
    </item>
    <item>
      <title>Build an Image Classification API Using Django Rest Framework.</title>
      <author>paulsaul621</author>
      <pubDate>Tue, 23 Nov 2021 23:43:26 +0000</pubDate>
      <link>https://dev.to/paulwababu/build-an-image-classification-api-using-django-rest-framework-4ned</link>
      <guid>https://dev.to/paulwababu/build-an-image-classification-api-using-django-rest-framework-4ned</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview:
&lt;/h1&gt;

&lt;p&gt;Machine Learning (ML) and data science applications are in high demand. When ML algorithms offer information before it is known, the benefits for business are significant. Integrating machine learning algorithms for inference into production systems is a technological barrier hence the need for deploying ML models as API'S. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this short article, we implement AI based models to detect COVID-19 in Chest X-rays and CT Scans using four Deep Learning Algorithms: VGG16, ResNet50, InceptionV3 and Xception. Note, we shall focus mainly on implementing the api and not the model creation. &lt;/p&gt;

&lt;p&gt;To test my live endpoint, send a POST request to the following URL with an x-ray image appended to the body of the request. You will get the following sample output if request was successful:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://alienx.tech/api/v1/xray # for the x-ray images
https://alienx.tech/api/v1/ct # for CT scans
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "status": "success",
    "data": {
        "asset_id": "3e978ba830fb266978af20f2bf816f5e",
        "public_id": "vacpxfywfohgfprwhrso",
        "version": 1637699139,
        "version_id": "c9017c7d3b28ce797edefec0b0d72796",
        "signature": "e9c632b832e773cbbcb8906f93aba1d9e859d4bf",
        "width": 1205,
        "height": 1395,
        "format": "png",
        "resource_type": "image",
        "created_at": "2021-11-23T20:25:39Z",
        "tags": [],
        "bytes": 1325222,
        "type": "upload",
        "etag": "86005d3c34202b10949db5569570cd16",
        "placeholder": false,
        "url": "http://res.cloudinary.com/prometheusapi/image/upload/v1637699139/vacpxfywfohgfprwhrso.png",
        "secure_url": "https://res.cloudinary.com/prometheusapi/image/upload/v1637699139/vacpxfywfohgfprwhrso.png",
        "original_filename": "covid-19-pneumonia-22",
        "api_key": "138196782467569"
    },
    "url": "http://res.cloudinary.com/prometheusapi/image/upload/v1637699139/vacpxfywfohgfprwhrso.png",
    "xception_chest_pred": "100.00% COVID",
    "inception_chest_pred": "100.00% COVID",
    "vgg_chest_pred": "100.00% COVID",
    "resnet_chest_pred": "100.00% COVID"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ml-model-building"&gt;
  &lt;/a&gt;
  ML Model Building
&lt;/h2&gt;

&lt;p&gt;The dataset for the project was gathered from two open source Github repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chest X-ray images (1000 images) were obtained from: &lt;a href="https://github.com/ieee8023/covid-chestxray-dataset"&gt;https://github.com/ieee8023/covid-chestxray-dataset&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CT Scan images (750 images) were obtained from: &lt;a href="https://github.com/UCSD-AI4H/COVID-CT/tree/master/Data-split"&gt;https://github.com/UCSD-AI4H/COVID-CT/tree/master/Data-split&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Four algorithms: VGG16, ResNet50, InceptionV3 and Xception were trained separately on Chest X-rays and CT Scans, giving us a total of 8 deep learning models. 80% of the images were used for training the models and the remaining 20% for testing the accuracy of the models.&lt;/p&gt;

&lt;p&gt;The code for training the 8 models is available on my github &lt;a href="https://github.com/paulwababu/Django-Covid-19-Detector-API"&gt;repository&lt;/a&gt;. The model for the project can be found on the following google &lt;a href="https://drive.google.com/file/d/1dA-rdmDmCGa3xxW5KpfLJdo7M54lPcQq/view"&gt;drive&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turning-the-model-into-an-restful-api"&gt;
  &lt;/a&gt;
  Turning the Model into an RESTFUL API
&lt;/h2&gt;

&lt;p&gt;Following Python best practices, we will create a virtual environment for our project, and install the required packages.&lt;/p&gt;

&lt;p&gt;First, create the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir djangoapp
$ cd djangoapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create a virtual environment and install the required packages.&lt;/p&gt;

&lt;p&gt;For macOS and Unix systems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ source myenv/bin/activate
(myenv) $ pip install django requests djangorestframework tensorflow cloudinary opencv-python

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ myenv\Scripts\activate
(myenv) $ pip install django requests djangorestframework tensorflow cloudinary opencv-python
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-your-django-application"&gt;
  &lt;/a&gt;
  Setting Up Your Django Application
&lt;/h2&gt;

&lt;p&gt;First, navigate to the directory djangoapp we created and establish a Django project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ django-admin startproject mainapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will auto-generate some files for your project skeleton:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mainapp/
    manage.py
    mainapp/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, navigate to the directory you just created (make sure you are in the same directory as manage.py) and create your app directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ python manage.py startapp monitor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the mainapp/settings.py file, look for the following line and add the app we just created above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',#new line
    'monitor', #new line
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you are in the monitor directory then create a new directory called templates and a new file called urls.py. Your directory structure of monitor application should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
    templates/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure your mainapp/urls.py file, add our monitor app URL to include the URLs we shall create next on the monitor app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    #path('admin/', admin.site.urls),
    path('', include('monitor.urls')),#monitor app url
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, on the monitor/urls.py file, add our website there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path
from .views import *

urlpatterns = [
    path('api/upload/xray', UploadView.as_view(), name = 'prediction'),
    path('api/upload/ct', CTUploadView.as_view(), name = 'ct_prediction'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s create another directory to store our machine learning model. I’ll also add the dataset to the project for those who want to achieve the whole dataset. (It is not compulsory to create a data folder.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(venv)$ mkdir ml
(venv)$ mkdir ml/models
(venv)$ mkdir ml/data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to tell Django where our machine learning model is located and also add our cloudinary configuration there. Add these lines to settings.py file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import cloudinary

cloudinary.config( 
  cloud_name = "prometheusapi", 
  api_key = "GETYOURAPIKEY", 
  api_secret = "GETYOURAPIKEY" 
)

MODELS = os.path.join(BASE_DIR, 'ml/models')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#load-keras-model-through-appspy"&gt;
  &lt;/a&gt;
  Load Keras Model through apps.py
&lt;/h2&gt;

&lt;p&gt;Load your machine learning models in apps.py so that when the application starts, the trained model is loaded only once. Otherwise, the trained model is loaded each time an endpoint is called, and then the response time will be slower. &lt;/p&gt;

&lt;p&gt;Let’s update apps.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
from django.apps import AppConfig
from django.conf import settings
from tensorflow.keras.models import load_model
from tensorflow import keras


class ResNetModelConfig(AppConfig):
    name = 'resnetAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "resnet_chest.h5")
    model = keras.models.load_model(MODEL_FILE)

class ResNetCTModelConfig(AppConfig):
    name = 'resnetCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "resnet_ct.h5")
    model = keras.models.load_model(MODEL_FILE)

class VGGModelConfig(AppConfig):
    name = 'vggAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "vgg_chest.h5")
    model = keras.models.load_model(MODEL_FILE)

class VGGCTModelConfig(AppConfig):
    name = 'vggCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "vgg_ct.h5")
    model = keras.models.load_model(MODEL_FILE)    

class InceptionModelConfig(AppConfig):
    name = 'inceptionv3_chestAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "inceptionv3_chest.h5")    
    model = keras.models.load_model(MODEL_FILE)

class InceptionCTModelConfig(AppConfig):
    name = 'inceptionv3_chestCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "inception_ct.h5")    
    model = keras.models.load_model(MODEL_FILE)    

class ExceptionModelConfig(AppConfig):
    name = 'xception_chestAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "xception_chest.h5")    
    model = keras.models.load_model(MODEL_FILE)

class ExceptionCTModelConfig(AppConfig):
    name = 'xception_chestCTAPI'
    MODEL_FILE = os.path.join(settings.MODELS, "xception_ct.h5")    
    model = keras.models.load_model(MODEL_FILE)    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edit-viewspy"&gt;
  &lt;/a&gt;
  Edit views.py
&lt;/h2&gt;

&lt;p&gt;The last step is to update views.py. The views will be mainly responsible for two tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process incoming POST requests.&lt;/li&gt;
&lt;li&gt;Make a prediction with the incoming data and give the result as a Response.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import urllib
from django.shortcuts import render
import numpy as np
from .apps import *
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, JSONParser
import cloudinary.uploader
import matplotlib.pyplot as plt
import cv2

# Create your views here.
class UploadView(APIView):
    parser_classes = (
        MultiPartParser,
        JSONParser,
    )

    @staticmethod
    def post(request):
        file = request.data.get('picture')
        upload_data = cloudinary.uploader.upload(file)
        #print(upload_data)
        img = upload_data['url']


        #load models
        resnet_chest = ResNetModelConfig.model
        vgg_chest = VGGModelConfig.model
        inception_chest = InceptionModelConfig.model
        xception_chest = ExceptionModelConfig.model

        req = urllib.request.urlopen(img)
        arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
        image = cv2.imdecode(arr, -1) # 'Load it as it is'
        #image = cv2.imread('upload_chest.jpg') # read file 
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # arrange format as per keras
        image = cv2.resize(image,(224,224))
        image = np.array(image) / 255
        image = np.expand_dims(image, axis=0)

        resnet_pred = resnet_chest.predict(image)
        probability = resnet_pred[0]
        #print("Resnet Predictions:")
        if probability[0] &amp;gt; 0.5:
            resnet_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            resnet_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(resnet_chest_pred)

        vgg_pred = vgg_chest.predict(image)
        probability = vgg_pred[0]
        #print("VGG Predictions:")
        if probability[0] &amp;gt; 0.5:
            vgg_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            vgg_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(vgg_chest_pred)

        inception_pred = inception_chest.predict(image)
        probability = inception_pred[0]
        #print("Inception Predictions:")
        if probability[0] &amp;gt; 0.5:
            inception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            inception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(inception_chest_pred)

        xception_pred = xception_chest.predict(image)
        probability = xception_pred[0]
        #print("Xception Predictions:")
        if probability[0] &amp;gt; 0.5:
            xception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            xception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(xception_chest_pred)
        return Response({
            'status': 'success',
            'data': upload_data,
            'url':img,
            'xception_chest_pred':xception_chest_pred,
            'inception_chest_pred':inception_chest_pred,
            'vgg_chest_pred':vgg_chest_pred,
            'resnet_chest_pred':resnet_chest_pred,
        }, status=201)


class CTUploadView(APIView):
    parser_classes = (
        MultiPartParser,
        JSONParser,
    )

    @staticmethod
    def post(request):
        file = request.data.get('picture')
        upload_data = cloudinary.uploader.upload(file)
        #print(upload_data)
        img = upload_data['url']


        #load models
        resnet_chest = ResNetCTModelConfig.model
        vgg_chest = VGGCTModelConfig.model
        inception_chest = InceptionCTModelConfig.model
        xception_chest = ExceptionCTModelConfig.model

        req = urllib.request.urlopen(img)
        arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
        image = cv2.imdecode(arr, -1) # 'Load it as it is'
        #image = cv2.imread('upload_chest.jpg') # read file 
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # arrange format as per keras
        image = cv2.resize(image,(224,224))
        image = np.array(image) / 255
        image = np.expand_dims(image, axis=0)

        resnet_pred = resnet_chest.predict(image)
        probability = resnet_pred[0]
        #print("Resnet Predictions:")
        if probability[0] &amp;gt; 0.5:
            resnet_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            resnet_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(resnet_chest_pred)

        vgg_pred = vgg_chest.predict(image)
        probability = vgg_pred[0]
        #print("VGG Predictions:")
        if probability[0] &amp;gt; 0.5:
            vgg_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            vgg_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(vgg_chest_pred)

        inception_pred = inception_chest.predict(image)
        probability = inception_pred[0]
        #print("Inception Predictions:")
        if probability[0] &amp;gt; 0.5:
            inception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            inception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(inception_chest_pred)

        xception_pred = xception_chest.predict(image)
        probability = xception_pred[0]
        #print("Xception Predictions:")
        if probability[0] &amp;gt; 0.5:
            xception_chest_pred = str('%.2f' % (probability[0]*100) + '% COVID') 
        else:
            xception_chest_pred = str('%.2f' % ((1-probability[0])*100) + '% NonCOVID')
        #print(xception_chest_pred)
        return Response({
            'status': 'success',
            'data': upload_data,
            'url':img,
            'xceptionCT_chest_pred':xception_chest_pred,
            'inceptionCT_chest_pred':inception_chest_pred,
            'vggCT_chest_pred':vgg_chest_pred,
            'resnetCT_chest_pred':resnet_chest_pred,
        }, status=201)


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-api"&gt;
  &lt;/a&gt;
  Testing our API
&lt;/h2&gt;

&lt;p&gt;Create the necessary migrations then run the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ python manage.py makemigrations
(myenv) $ python manage.py migrate
(myenv) $ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fire up Postman and make a POST request with an image appended to the body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YvOpOfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637710271371/fsrLdJHEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YvOpOfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637710271371/fsrLdJHEA.png" alt="polo.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-staying-tuned"&gt;
  &lt;/a&gt;
  Thanks for staying tuned!
&lt;/h3&gt;

</description>
      <category>machinelearning</category>
      <category>api</category>
      <category>django</category>
      <category>ai</category>
    </item>
    <item>
      <title>Escaping Tutorial Hell</title>
      <author>Chris Benjamin</author>
      <pubDate>Tue, 23 Nov 2021 23:01:11 +0000</pubDate>
      <link>https://dev.to/chrisbenjamin/escaping-tutorial-hell-ncd</link>
      <guid>https://dev.to/chrisbenjamin/escaping-tutorial-hell-ncd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-i-escaped-tutorial-hell"&gt;
  &lt;/a&gt;
  How I escaped tutorial hell
&lt;/h2&gt;

&lt;p&gt;When you are first learning to code, you discover a place in your journey that is referred to as tutorial hell. You may not realize you are in this place until you get out of it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tutorial-hell"&gt;
  &lt;/a&gt;
  What is tutorial hell?
&lt;/h2&gt;

&lt;p&gt;Tutorial hell is referred to as a time in your new developer journey where you are watching tutorials, able to follow along, and replicate what the instructor is doing and it works. Sweet, so now I want to make my own variation of this so I break out a fresh project &lt;code&gt;npm create-react-app awesome-app&lt;/code&gt; and try to pull from an API just like in the tutorial and it just won’t work. &lt;/p&gt;

&lt;p&gt;The reason why is because the instructor planned their lesson, tested it ahead of time, knew which libraries to use, knew which functions needed to be made, new which abstractions would be used, and they tested it before they built it again and recorded it. The catch here is that the instructor went through the debugging and troubleshooting Part that you are stuck in right now the first time and they figured it out, but they only show you the working version. &lt;/p&gt;

&lt;p&gt;This is similar to taking a driving test in the US, you’ve at least driven the car before and know how to operate it before you have to do it with someone watching who will determine if you performed well enough to be a licensed citizen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-escape"&gt;
  &lt;/a&gt;
  The Escape
&lt;/h2&gt;

&lt;p&gt;To escape Tutorial Hell, one must first realize they seem to be stuck in a loop. &lt;br&gt;
&lt;code&gt;If (editedTutotialCode !== success) return “watch another tutorial”&lt;/code&gt;&lt;br&gt;
For your escape to be successful, you have to realize one thing, you have to realize &lt;strong&gt;what you don’t know&lt;/strong&gt;. You watch the tutorial and it works, but if you think deeper you’ll realize you don’t know the libraries being used or aren’t familiar with a specific function or hook that was used. For example, if you followed a tutorial on fetching data from an API and the tutorial used a new library called Axios And this is your first time working with it. You then branch off from this tutorial and try to fetch data from another API Using Axios and your not getting the desired result. The problem is either in your knowledge of the library or the API being used and you must accept knowing that you don’t know how to use this library. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;It’s important to understand that reading the documentation is actually really important. Take a moment and read that line again. The problem you are having is not unique to you, almost every developer goes through this at some point in their young developer career. The issue you are experiencing is simply not understanding the language, library, or feature before trying to use it. You must dedicate time to learn why a piece of code works before you can attempt to use it in your own product. The same would be if you copied code from StackOverflow and it worked, but why would you put that into production code if you don’t understand what it’s doing or why it’s working. &lt;/p&gt;

&lt;p&gt;In the above example regarding Axios, let’s imagine you have never used this library before. You have two choices, watch another tutorial where the instructor uses Axios to fetch data from another API or reading the library documentation. If you read the library documentation your amplitude for success just increased exponentially because you are now learning how to properly use this library and can apply this knowledge to any future project where you have to pull information from an API.  &lt;/p&gt;

&lt;p&gt;One example from personal experience. I was trying to understand React Hooks after seeing it in a tutorial. I tried to use what I learned from a tutorial on the useEffect() hook. The problem I ran into was that it wouldn’t function how I wanted or though it would. I figured I must have understood this hook wrong and watched more tutorials on useEffect hooks and I still couldn’t make it work in my application. I did this several times and still was running into issues trying to apply what I saw in the tutorial in my own application. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-worked"&gt;
  &lt;/a&gt;
  What worked?
&lt;/h4&gt;

&lt;p&gt;Going to &lt;a href="https://dev.toReact%20Learn"&gt;https://react.org/learn&lt;/a&gt; and reading their documentation on hooks, and the useEffect hook itself and then I began to understand how to use the hook properly. There are three different uses of the useEffect hook and they have major differences on their affect in your code. I can now effectively use the useEffect() hook in any project confidently. This was a growth moment for me where I learned to read documentation and stop watching Tutorials and escaped tutorial hell. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;You can have all the tools in your garage for building a house but that doesn’t mean you know how to build a house -Chris Benjamin&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;This is to say that anyone can possess the tools but this doesn’t mean you possess the knowledge. Take the time to educate yourself and level up your own skills, your future self will thank you! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#takeways"&gt;
  &lt;/a&gt;
  Takeways
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Stop watching tutorials and following along&lt;/li&gt;
&lt;li&gt;Start reading official documentation &lt;/li&gt;
&lt;li&gt;Start understanding why it works and how it works &lt;/li&gt;
&lt;li&gt;Know how to use the tools in your toolbox &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>A Guide to Stacks and Stages on AWS</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 23 Nov 2021 22:25:53 +0000</pubDate>
      <link>https://dev.to/tinystacks/a-guide-to-stacks-and-stages-on-aws-44fh</link>
      <guid>https://dev.to/tinystacks/a-guide-to-stacks-and-stages-on-aws-44fh</guid>
      <description>&lt;p&gt;Article by Jay Allen&lt;/p&gt;

&lt;p&gt;Learning AWS is complicated enough. But learning AWS is made more challenging when you're also still grappling with some of the major concepts of DevOps software deployments. In this article, I discuss two key concepts: stacks and stages. I also address how you can manage stacks and stages in AWS, along with other factors you need to consider when managing them in practice. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks"&gt;
  &lt;/a&gt;
  Stacks
&lt;/h2&gt;

&lt;p&gt;In simplest terms, a &lt;strong&gt;stack&lt;/strong&gt; is a unit of application deployment. Using stacks, developers can organize all of the resources required by an application or an application component as a single unit. This enables devs to deploy, tear down, and re-deploy their applications at will. &lt;/p&gt;

&lt;p&gt;Stacks can be stood up manually. However, it's better on cloud platforms to program the creation of your stack - e.g., using a scripting language such as Python. The ability to script stack deployments is known as Infrastructure as Code and is a hallmark of cloud computing platforms. Scripting your application deployments and bundling them into stacks reaps multiple benefits: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once your stack code is fully debugged, you can deploy your application repeatably and reliably. Scripting stack deployments eliminates the errors that inevitably occur in manual deployments. &lt;/li&gt;
&lt;li&gt;You can tear down stacks that aren't being used with a single script or command. This saves your team and company money. &lt;/li&gt;
&lt;li&gt;You can parameterize stacks to deploy different resources or use different configuration values. This lets you deploy multiple versions of your application. (Remember this - it'll be important soon!) &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stages"&gt;
  &lt;/a&gt;
  Stages
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;stage&lt;/strong&gt;, by contrast, is a deployment of your application for a particular purpose. With stages, you can deploy your application multiple times to vet its functionality with an increasingly larger number of users. Typical stages can include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dev for developer coding and experimentation (only available to your dev team)&lt;/li&gt;
&lt;li&gt;Test for running unit tests (available to dev, test, and internal stakeholders)&lt;/li&gt;
&lt;li&gt;Stage for user acceptance testing (available to external alpha/beta testers) &lt;/li&gt;
&lt;li&gt;Prod for your publicly facing application (available to all customers) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stages are part of  &lt;a href="https://blog.tinystacks.com/using-codebuild-and-codepipeline-to-deploy-aws-applications-easily"&gt;CI/CD pipelines, which I've discussed in detail before&lt;/a&gt;. By constructing your application as a pipeline, you can "flow" app changes from one stage to the next as you test them in each environment. This lets you vet changes multiple times in limited, controlled environments before releasing them to your users. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks-and-stages-better-together"&gt;
  &lt;/a&gt;
  Stacks and Stages: Better Together
&lt;/h2&gt;

&lt;p&gt;Stacks and stages are a powerful one-two combination. With a properly parameterized stack, you can create whatever stages your application needs. Because you create each stage using the same source code, each stage's stack will contain the same resources and perform the same way as every other stage. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks-on-aws"&gt;
  &lt;/a&gt;
  Stacks on AWS
&lt;/h2&gt;

&lt;p&gt;AWS fully embraces Infrastructure as Code. Nearly anything you can accomplish manually with the AWS Management Console can also be created programmatically. &lt;/p&gt;

&lt;p&gt;On AWS, you have several options for creating stacks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-cloudformation"&gt;
  &lt;/a&gt;
  AWS CloudFormation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloudformation/"&gt;AWS CloudFormation&lt;/a&gt;  is the official "AWS way" of creating stacks. Using CloudFormation, you can write templates using either JSON or YAML that specify which AWS resources your stack contains. &lt;/p&gt;

&lt;p&gt;CloudFormation isn't an imperative programming language like Python. Instead, it uses a declarative format for creating resources. This simplifies creating your infrastructure, as you don't need to be an expert in a particular programming language to stand up resources. Many CloudFormation templates can be constructed by making small tweaks to publicly available templates. ( &lt;a href="https://aws.amazon.com/cloudformation/resources/templates/"&gt;AWS itself hosts many such sample templates and snippets&lt;/a&gt; .)&lt;/p&gt;

&lt;p&gt;A key feature of CloudFormation is its support for parameters. Rather than hard-code values, you can declare them as parameters and supply them at run time when you create the stack in AWS. For example, the template snippet below (taken from  &lt;a href="https://s3.us-west-2.amazonaws.com/cloudformation-templates-us-west-2/EC2InstanceWithSecurityGroupSample.template"&gt;AWS's sample template for deploying Amazon EC2 instances&lt;/a&gt;) defines the parameters &lt;strong&gt;KeyPair&lt;/strong&gt;, &lt;strong&gt;InstanceType&lt;/strong&gt;, and &lt;strong&gt;SSHLocation&lt;/strong&gt;. By parameterizing these values, the same template can be used multiple times to create different EC2 instances of different sizes, in different networks, and with different security credentials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-6wGHKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637595094509/dlsM-KV5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-6wGHKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637595094509/dlsM-KV5d.png" alt="image.png" width="654" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The great thing about CloudFormation templates is that they make stacks both easy to turn on and easy to turn off. Deleting an instance of a CloudFormation template automatically cleans up the entire stack and deactivates all of its resources. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-favorite-programming-language"&gt;
  &lt;/a&gt;
  Your Favorite Programming Language
&lt;/h3&gt;

&lt;p&gt;Not everyone wants to learn a new declarative language to create stacks. And some stacks might require the fine-grained control that an  &lt;a href="https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin"&gt;imperative programming language&lt;/a&gt; offers. &lt;/p&gt;

&lt;p&gt;Fortunately,  &lt;a href="https://aws.amazon.com/tools/"&gt;AWS also produces software development kits (SDKs)&lt;/a&gt; for a variety of languages. Developers can use Python Go, Node.js, .NET, and a variety of other languages to automate the creation and deletion of their stack. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-is-better"&gt;
  &lt;/a&gt;
  Which is Better?
&lt;/h3&gt;

&lt;p&gt;CloudFormation's major advantage is simplicity. Particularly, CloudFormation makes deleting stacks a breeze. By contrast, with a programming language, you need to program the deletion of every resource. &lt;/p&gt;

&lt;p&gt;However, using a programming language for stack management offers much greater control than CloudFormation. For example, let's say that a resource fails to create. This can happen sometimes, not because you did anything wrong, but due to an underlying error in AWS, or a lack of available resources in your target region. &lt;/p&gt;

&lt;p&gt;Using CloudFormation, a failed resource will result in the stack stopping and everything you've created rolling back. Using a programming language, however, you could detect the failure and handle it more gracefully. For example, you may decide to retry the operation multiple times &lt;a href="https://aws.amazon.com/builders-library/timeouts-retries-and-backoff-with-jitter/"&gt;using incremental backoff&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Your choice between CloudFormation and programming language may also be affected by feature parity. In the past, some AWS teams have released features with SDK support but no initial CloudFormation support. &lt;/p&gt;

&lt;p&gt;Many of these issues with CloudFormation can be addressed using a hybrid CloudFormation/code approach.  &lt;a href="https://www.alexdebrie.com/posts/cloudformation-custom-resources/"&gt;Using CloudFormation custom resources&lt;/a&gt;, you can run code in AWS Lambda that orchestrates the creation of both AWS and non-AWS resources. You can also perform other programming-related tasks that might be required for your stack, such as database migration. &lt;/p&gt;

&lt;p&gt;In the end, both approaches work fine. My personal recommendation would be to use AWS CloudFormation in conjunction with custom resources when needed. CloudFormation is well-supported and can easily be leveraged by other AWS features (as we will see shortly). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stages-on-aws"&gt;
  &lt;/a&gt;
  Stages on AWS
&lt;/h2&gt;

&lt;p&gt;The easiest way to manage stages on AWS is by using  &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;CodePipeline performs two major services. First, it orchestrates multiple AWS services to automate every critical part of your application deployment process. Using CodePipeline, you can ingest code from your code repository (such as GitHub), compile it using AWS CodeBuild, and deploy your application's resources using (you guessed it) AWS CloudFormation. &lt;/p&gt;

&lt;p&gt;Second (and most important for today's discussion), CodePipeline supports defining separate stages for your application. When you create a CodePipeline, you create stages that handle importing your source code from source control and building the code. From there, you can add additional deployment stages for dev, test, stage, prod, etc. &lt;/p&gt;

&lt;p&gt;In the screenshot below, you can see a minimal deployment pipeline. The third step after the CodeBuild project is a dev stage, intended for developer vetting of new changes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9MHQVVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637599555799/ftVSkJfMY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9MHQVVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637599555799/ftVSkJfMY.png" alt="image.png" width="543" height="791"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could easily add a new stage to our pipeline by clicking &lt;strong&gt;Edit&lt;/strong&gt; and then clicking the &lt;strong&gt;Add Stage&lt;/strong&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W79QYF0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637600416975/g3kGGs5RT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W79QYF0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637600416975/g3kGGs5RT.png" alt="image.png" width="724" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you add a stage, you can add one or more &lt;strong&gt;action groups&lt;/strong&gt;. Action groups support a large number of AWS services, including AWS CloudFormation. For our test group, for example, we could add two action groups: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A manual approval. This would stop changes from the dev branch from flowing to test automatically until someone approved the change in the AWS Management Console (e.g., after performing a code review). &lt;/li&gt;
&lt;li&gt;An AWS CloudFormation template to deploy our infrastructure stack for the test stage. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using a CloudFormation script with CodePipeline,  &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html"&gt;you can specify a configuration file&lt;/a&gt; that passes in the parameters the CloudFormation script needs to build that stage properly. This might be as simple as prefixing created resources with the name "test" instead of "dev", or as complicated as specifying a data set to load into your database for testing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-stacks-and-stages-in-practice"&gt;
  &lt;/a&gt;
  Managing Stacks and Stages in Practice
&lt;/h2&gt;

&lt;p&gt;In theory, stacks and stages are pretty simple concepts. In practice, however, it takes a lot of work and fine-tuning to get your CI/CD pipeline to the point where you can deploy your application reliably across multiple stages. Your team also needs to make some up-front decisions about how it's going to manage its source code and work product. &lt;/p&gt;

&lt;p&gt;Below are just a few factors to consider when devising your approach to stacks and stages on AWS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code-branching"&gt;
  &lt;/a&gt;
  Source Code Branching
&lt;/h3&gt;

&lt;p&gt;A key up-front decision with stacks and stages is how your team will flow changes from development into production. A big part of this decision is how you manage branches in source control. &lt;/p&gt;

&lt;p&gt;There are multiple possible branching patterns. On his Web site,  &lt;a href="https://martinfowler.com/articles/branching-patterns.html"&gt;programming patterns guru Martin Fowler has documented the key strategies&lt;/a&gt; in excruciating detail. On their Web site,  &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops"&gt;Microsoft offers a simpler, more prescriptive approach&lt;/a&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define &lt;strong&gt;feature branches&lt;/strong&gt; that represent a single feature per branch. &lt;/li&gt;
&lt;li&gt;Use pull requests in source control to merge feature branches into your main branch for deployment. &lt;/li&gt;
&lt;li&gt;Keep your main branch clean and up to date. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is, of course, only one way to do things. The important thing is that your branching strategy is clean, simple, and easy to manage. Complex branching strategies that require multiple merges and resolution of merging conflicts end up becoming a nightmare for development teams and slow down deployment velocity. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unit-of-deployment"&gt;
  &lt;/a&gt;
  Unit of Deployment
&lt;/h3&gt;

&lt;p&gt;Another fundamental consideration is the unit of deployment - i.e., how much of your application do you deploy at a time? &lt;/p&gt;

&lt;p&gt;Many legacy applications deploy an application's entire stack with every deployment. This so-called &lt;strong&gt;monolithic&lt;/strong&gt; architecture is easy to implement. However, it lacks flexibility and tends to result in hard-to-maintain systems. &lt;/p&gt;

&lt;p&gt;The popular alternative to monoliths is &lt;strong&gt;microservices&lt;/strong&gt;. In a microservices architecture, you break your application into a set of loosely-coupled services that your application calls. You can get incredible deployment flexibility with microservices, as you can bundle each service as its own stack. However,  &lt;a href="https://blog.tinystacks.com/service-discovery-with-aws-cloud-map"&gt;managing versions and service discovery&lt;/a&gt; in a complex Web of microservices can be daunting. &lt;/p&gt;

&lt;p&gt;You can also take an in-between approach. Some teams divide their apps up into so-called "macroservices" or "miniservices" - logical groupings of services and apps that can each be deployed as a single unit. Such deployments avoid the downsides of monolithic deployment while also steering clear of the complexity of microservices. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-management"&gt;
  &lt;/a&gt;
  Data Management
&lt;/h3&gt;

&lt;p&gt;Next, there's how you'll manage data. At a minimum, your team needs to consider how to handle: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading data into a dev/test/staging system for testing purposes. &lt;/li&gt;
&lt;li&gt;Managing schema changes to your data store (e.g., adding new tables/fields to relational database tables with a new release). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some development frameworks, such as Django, use an Object Data Model (ODM) or Object Relational Model (ORM) that automates database migrations. In these cases, your application simply needs a way to trigger a migration using the relevant scripts. The AWS Database Blog has some detailed tips for &lt;a href="https://aws.amazon.com/blogs/database/building-a-cross-account-continuous-delivery-pipeline-for-database-migrations/"&gt;incorporating database migrations into a pipeline&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-secrets"&gt;
  &lt;/a&gt;
  Managing Secrets
&lt;/h3&gt;

&lt;p&gt;While automation is great, it introduces a devilish problem: managing secrets. Your application can access most AWS services using an AWS Identity and Access Management (IAM) role. However, it will likely also need to connect to other resources - databases, source control systems, dependent services - that require some sort of authentication information, such as access and secret keys. &lt;/p&gt;

&lt;p&gt;It can't be said clearly enough:  &lt;a href="https://blog.gitguardian.com/secrets-credentials-api-git/"&gt;storing secrets in source code is a huge no-no&lt;/a&gt;. And storing them in plain text somewhere (like an Amazon S3 bucket) isn't any better. &lt;/p&gt;

&lt;p&gt;Fortunately, AWS created the  &lt;a href="https://aws.amazon.com/secrets-manager/"&gt;AWS Secrets Manager&lt;/a&gt; for just this purpose. Using Secrets Manager, you can authorize your application via IAM to read sensitive key/value pairs over a secure connection. You can even use CloudFormation to store secrets for resources such as databases into Secrets Manager as part of building a stack. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Stacks and stages are cornerstone concepts of DevOps deployments. Once you can deploy your application as a single unit or collection of units, you can spin up any environment you need at any time. The payoff? Faster deployments and more reliable applications - and, as a consequence, happy customers! &lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🎄 Render in Vue, 16+ ways</title>
      <author>Andrew Luca</author>
      <pubDate>Tue, 23 Nov 2021 22:16:46 +0000</pubDate>
      <link>https://dev.to/iamandrewluca/render-in-vue-16-ways-d50</link>
      <guid>https://dev.to/iamandrewluca/render-in-vue-16-ways-d50</guid>
      <description>&lt;p&gt;In this blog post I will show you 16 ways how to render something in &lt;a href="https://v3.vuejs.org/"&gt;Vue&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-lets-start"&gt;
  &lt;/a&gt;
  🚀 So let's start
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Talk is cheap. Show me the code.&lt;br&gt;
― Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is full example that you can play around &lt;br&gt;
&lt;a href="https://github.com/iamandrewluca/vue-render-everywhere"&gt;https://github.com/iamandrewluca/vue-render-everywhere&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  🧰 Prerequisites
&lt;/h2&gt;

&lt;p&gt;I'm using &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; with this configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vitejs/plugin-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;vueJsx&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vitejs/plugin-vue-jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;vueJsx&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;vue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue/dist/vue.esm-bundler.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When refering to a DOM element, this is the HTML for every example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/html"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"template-in-script"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;quick&lt;/span&gt; &lt;span class="nx"&gt;brown&lt;/span&gt; &lt;span class="nx"&gt;fox&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#methods-to-render-in-vue"&gt;
  &lt;/a&gt;
  🎁 Methods to render in Vue
&lt;/h2&gt;

&lt;p&gt;I'm showing these methods only for learning purposes. Use at your own risk.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-raw-template-endraw-option-as-raw-string-endraw-"&gt;
  &lt;/a&gt;
  Method 1: &lt;code&gt;template&lt;/code&gt; option as &lt;code&gt;string&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;li&amp;gt;The quick brown fox...&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-2-raw-template-endraw-option-as-a-selector"&gt;
  &lt;/a&gt;
  Method 2: &lt;code&gt;template&lt;/code&gt; option as a selector
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#template-in-script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-3-raw-template-endraw-option-as-a-raw-htmlelement-endraw-"&gt;
  &lt;/a&gt;
  Method 3: &lt;code&gt;template&lt;/code&gt; option as a &lt;code&gt;HTMLElement&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#template-in-script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-4-using-raw-render-endraw-option-and-raw-h-endraw-factory"&gt;
  &lt;/a&gt;
  Method 4: using &lt;code&gt;render&lt;/code&gt; option and &lt;code&gt;h&lt;/code&gt; factory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The quick brown fox...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-5-using-raw-render-endraw-option-and-raw-compile-endraw-function"&gt;
  &lt;/a&gt;
  Method 5: using &lt;code&gt;render&lt;/code&gt; option and &lt;code&gt;compile&lt;/code&gt; function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;li&amp;gt;The quick brown fox...&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-6-using-raw-render-endraw-option-and-raw-compile-endraw-function-with-selector"&gt;
  &lt;/a&gt;
  Method 6: using &lt;code&gt;render&lt;/code&gt; option and &lt;code&gt;compile&lt;/code&gt; function with selector
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#template-in-script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-7-using-raw-render-endraw-option-and-raw-compile-endraw-function-with-raw-htmlelement-endraw-"&gt;
  &lt;/a&gt;
  Method 7: using &lt;code&gt;render&lt;/code&gt; option and &lt;code&gt;compile&lt;/code&gt; function with &lt;code&gt;HTMLElement&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#template-in-script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-8-using-raw-setup-endraw-function-and-raw-h-endraw-factory"&gt;
  &lt;/a&gt;
  Method 8: using &lt;code&gt;setup&lt;/code&gt; function and &lt;code&gt;h&lt;/code&gt; factory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The quick brown fox...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-9-using-raw-setup-endraw-and-raw-compile-endraw-functions"&gt;
  &lt;/a&gt;
  Method 9: using &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;compile&lt;/code&gt; functions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;li&amp;gt;The quick brown fox...&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PUY3XyRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh10qbtghd279fyulvi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUY3XyRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh10qbtghd279fyulvi1.png" alt="Image description" width="735" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Boring? 🤣 We are not done yet 🚗&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-10-using-functional-component-and-raw-h-endraw-factory"&gt;
  &lt;/a&gt;
  Method 10: using functional component and &lt;code&gt;h&lt;/code&gt; factory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The quick brown fox...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-11-%EF%B8%8F-using-functional-component-and-raw-compile-endraw-function"&gt;
  &lt;/a&gt;
  Method 11: ⛔️ using functional component and &lt;code&gt;compile&lt;/code&gt; function
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;JUST AN EXPERIMENT, DO NOT USE&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compiled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;li&amp;gt;The quick brown fox...&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;compiled&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here we have the method that is used by most Vue developers, Single File Component&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-12-using-sfc-raw-template-endraw-tag"&gt;
  &lt;/a&gt;
  Method 12: using SFC &lt;code&gt;template&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;The quick brown fox...&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-13-using-sfc-without-raw-template-endraw-tag"&gt;
  &lt;/a&gt;
  Method 13: using SFC without &lt;code&gt;template&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;li&amp;gt;The quick brown fox...&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually when you use SFC with a &lt;code&gt;template&lt;/code&gt; tag, compiler will convert the &lt;code&gt;template&lt;/code&gt; to &lt;code&gt;render&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;So basically you can use SFC without a &lt;code&gt;template&lt;/code&gt; tag and use one of the methods above (all of them work).&lt;/p&gt;

&lt;p&gt;But we are not done yet. We have 3 more methods.&lt;/p&gt;

&lt;p&gt;Let me introduce you &lt;strong&gt;JSX&lt;/strong&gt; 🤣&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1Qdp4trljSkY8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1Qdp4trljSkY8/giphy.gif" alt="hello fellow kids" width="500" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-14-using-raw-render-endraw-option-and-jsx"&gt;
  &lt;/a&gt;
  Method 14: using &lt;code&gt;render&lt;/code&gt; option and JSX
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The quick brown fox...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-15-using-raw-setup-endraw-function-and-jsx"&gt;
  &lt;/a&gt;
  Method 15: using &lt;code&gt;setup&lt;/code&gt; function and JSX
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The quick brown fox...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-16-using-functional-component-and-jsx"&gt;
  &lt;/a&gt;
  Method 16: using functional component and JSX
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The quick brown fox...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does last one look familiar? 👀 Hello to React friends!&lt;br&gt;
Yes a functional component with JSX in Vue looks identical with React function component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVpM1yBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du32bmgq6y3749emq8le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVpM1yBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du32bmgq6y3749emq8le.png" alt="boy and girl meme" width="750" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is full example that you can play around &lt;br&gt;
&lt;a href="https://github.com/iamandrewluca/vue-render-everywhere"&gt;https://github.com/iamandrewluca/vue-render-everywhere&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for today. Thanks for reading my blog posts!&lt;br&gt;
Never stop learning. Bye! 👋 &lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@dcemr_e?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Joshua Eckstein&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/crayons?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>What is Slate.js, and will it replace Quill and Draft.js?</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 23 Nov 2021 22:09:23 +0000</pubDate>
      <link>https://dev.to/logrocket/what-is-slatejs-and-will-it-replace-quill-and-draftjs-1fdp</link>
      <guid>https://dev.to/logrocket/what-is-slatejs-and-will-it-replace-quill-and-draftjs-1fdp</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ekekenteodionyenfe/"&gt;Ekekenta Odionyenfe&lt;/a&gt;✏️&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ianstormtaylor/slate"&gt;Slate&lt;/a&gt;&lt;a href="https://github.com/ianstormtaylor/slate"&gt;.js&lt;/a&gt; is a highly customizable platform for creating rich-text editors, also known as WYSIWYG editors. It enables you to create powerful, intuitive editors similar to those you’ve probably used in Medium, Dropbox Paper, or Google Docs. These are quickly becoming standard features for many web apps, and tools like Slate make them easier to implement, ensuring your program won’t get bogged down in complexity.&lt;/p&gt;

&lt;p&gt;Although Slate is still in beta at the time of writing, it’s natural to ask whether it has the potential to replace more &lt;a href="https://blog.logrocket.com/build-a-wysiwyg-text-editor-using-quill/"&gt;mature platforms like Quill&lt;/a&gt; and &lt;a href="https://blog.logrocket.com/building-rich-text-editors-in-react-using-draft-js-and-react-draft-wysiwyg/"&gt;Draft.js&lt;/a&gt;. The short answer is that it's far too early to tell, but here are a few facts to support why it could.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-slatejs"&gt;
  &lt;/a&gt;
  What's new in Slate.js?
&lt;/h2&gt;

&lt;p&gt;Building a rich-text editor for your React application has not been easy. As applications grow in size, a more productive and support-rich tool is necessary. With frameworks like Quill, developers must go through substantial hacks to fix performance issues. But Slate.js was designed to make things easier with the following features:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstclass-plugins"&gt;
  &lt;/a&gt;
  First-class plugins
&lt;/h3&gt;

&lt;p&gt;Other React-based rich-text editors like Quill and Draft offer plugins that provide users with additional capabilities. Slate, on the other hand, recognizes plugins as first-class entities; the basic editing functionality is even designed as a distinct plugin. That means you can completely alter the editing experience, allowing you to develop complex editors like Medium or Dropbox without having to contend with the library's standard assumptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallel-to-the-dom"&gt;
  &lt;/a&gt;
  Parallel to the DOM
&lt;/h3&gt;

&lt;p&gt;The DOM serves as the foundation for Slate's data model. The document is a hierarchical tree that employs selects and ranges and exposes all of the usual event handlers. This implies that sophisticated features such as tables and nested block quotations are possible. Slate can perform pretty much whatever you can do in the DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nested-document-model"&gt;
  &lt;/a&gt;
  Nested document model
&lt;/h3&gt;

&lt;p&gt;Slate's document model, like the DOM itself, is a layered, recursive tree. Depending on your use case, you can incorporate complicated components like tables and nested block quotations, as we noted above, or you can keep things simple by merely employing a single level of hierarchy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stateless-views-and-immutable-data"&gt;
  &lt;/a&gt;
  Stateless views and immutable data
&lt;/h3&gt;

&lt;p&gt;The Slate editor is stateless, utilizing immutable data structures via React and Immutable.js, making it much easier to reason about code and write plugins. For comparison’s sake, Quill handles its own changes, for example, and does not allow users to prevent edits. Quill cannot prevent the change, but it will override the content anytime the value varies from the existing state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schemaless-core"&gt;
  &lt;/a&gt;
  Schema-less core
&lt;/h3&gt;

&lt;p&gt;Slate's core logic makes no assumptions about the structure of the data you'll be changing, so there are no assumptions baked into the library that will catch you off guard when you need to move beyond the most basic use cases. This can cause serious performance issues when working with Quill and Draft.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clear-core-boundaries"&gt;
  &lt;/a&gt;
  Clear core boundaries
&lt;/h3&gt;

&lt;p&gt;With a plugin-first design and a schema-less core, the line between "core" and "custom" is much more apparent, which means the core experience doesn't become bogged down in edge cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intuitive-changes"&gt;
  &lt;/a&gt;
  Intuitive changes
&lt;/h3&gt;

&lt;p&gt;Slate texts are edited with "changes," which are meant to be high-level and straightforward to create and understand, allowing custom functionality to be as expressive as possible. This dramatically improves your ability to reason about your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collaborationready-data-model"&gt;
  &lt;/a&gt;
  Collaboration-ready data model
&lt;/h3&gt;

&lt;p&gt;Slate's data format is intended to allow collaborative editing to be built on top, so developers don't have to rethink everything if you decide to make your editor collaborative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slatejs-in-action"&gt;
  &lt;/a&gt;
  Slate.js in action
&lt;/h2&gt;

&lt;p&gt;Now let’s see Slate in action by building a simple rich-text editor. To get started, we need to create a new React project; we’ll use Create React App for that. Run the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;npx create-react-app rich-text-editor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can make a cup of coffee while the necessary packages are installed. When the installation is complete, install the three required packages for our Slate implementation with the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save&lt;/span&gt; slate slate-react slate-history
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, start the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open the &lt;code&gt;App.js&lt;/code&gt; component and import our installed packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEditor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Editable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;withReact&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create a new &lt;code&gt;Editor&lt;/code&gt; object. We will use the &lt;code&gt;useEditor&lt;/code&gt; hook to make our editor stable across renders. Then, we’ll create a state to handle the input in our editor with a paragraph and some dummy text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;withReact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createEditor&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paragraph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I am a Slate rich editor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s keep track of our Slate editor, its plugins, its value, its selection, and all changes made to the editor by rendering the Slate context provider. Then, render the &lt;code&gt;&amp;lt;Editable&amp;gt;&lt;/code&gt; component inside our React context.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;Editable&amp;gt;&lt;/code&gt; component behaves similarly to the &lt;code&gt;contentEditable&lt;/code&gt; component in React. It will render an editable rich-text document for the nearest &lt;code&gt;editor&lt;/code&gt; context whenever it is rendered. Modify the render method with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Slate&lt;/span&gt;
      &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Editable&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Slate&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have your text editor, test out the application on &lt;code&gt;localhost:3000&lt;/code&gt; in your favorite browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-slatejs"&gt;
  &lt;/a&gt;
  Why Slate.js?
&lt;/h2&gt;

&lt;p&gt;Slate was created to address the challenges developers might encounter when building large-scale applications with Quill and Draft.js. It was designed to transform the document's creation by making adjustments, which is necessary for developing advanced behaviors. That has often proved overly complicated with Quill or Draft.&lt;/p&gt;

&lt;p&gt;Quill, no doubt, is a drop-in editor; you can get started without changing anything. If you get beyond the most basic use cases, however, you may encounter certain performance issues, which have become &lt;a href="https://github.com/quilljs/quill/issues/2197"&gt;a recognized&lt;/a&gt; &lt;a href="https://github.com/quilljs/quill/issues/2197"&gt;defect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Slate, on the other hand, was designed to facilitate actual productivity by providing you the flexibility to do whatever you choose. Slate offers sophisticated integrations with Markdown, Google Docs, and Medium out of the box to enable for seamless collaboration with teammates.&lt;/p&gt;

&lt;p&gt;It allows you to perform complex operations like adding tables, and inserting images and bulleted lists into those tables. Slate.js makes serialization to HTML, Markdown, and other formats possible. Simple tasks like converting a document to HTML or Markdown is made a lot easier with less boilerplate code.&lt;/p&gt;

&lt;p&gt;With all that said, it’s definitely worth giving Slate.js a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#will-slate-replace-quill-and-draftjs"&gt;
  &lt;/a&gt;
  Will Slate replace Quill and Draft.js?
&lt;/h2&gt;

&lt;p&gt;To be honest, this may not be the case. Slate.js is still in beta, which means the stable version is still yet to be released. Your app might crash, or some features might not work properly.&lt;/p&gt;

&lt;p&gt;Again, despite their imperfections, Quill and Draft.js have been in production for a long time now. And as much as we might wish otherwise, there is no such thing as perfection when it comes to programming languages. On top of that, it’s not easy for an org to change its system to something entirely new within a short period.&lt;/p&gt;

&lt;p&gt;Ultimately, Slate has not been rigorously used for production-grade applications, and it hasn’t been proven to handle those ambiguous tasks that expose Quill and Draft as inefficient.&lt;/p&gt;

&lt;p&gt;Maybe in a year or so, we'll start hearing from companies and developers about their experience with Slate — how they've overcome the known flaws in Quill and Draft. Perhaps the community behind it will modify it to the point where it's a truly viable solution. Will it replace Quill and Draft? We can't tell for now.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#are-you-adding-new-js-libraries-to-improve-performance-or-build-new-features-what-if-theyre-doing-the-opposite"&gt;
  &lt;/a&gt;
  Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?
&lt;/h2&gt;

&lt;p&gt;There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYla9PmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;Build confidently — &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Machine Learning for Anomaly Detection: Decreasing Time to Find Root Cause by Automating Log Analysis</title>
      <author>Max Shash</author>
      <pubDate>Tue, 23 Nov 2021 21:58:11 +0000</pubDate>
      <link>https://dev.to/maxshash/machine-learning-for-anomaly-detection-decreasing-time-to-find-root-cause-by-automating-log-analysis-2ak2</link>
      <guid>https://dev.to/maxshash/machine-learning-for-anomaly-detection-decreasing-time-to-find-root-cause-by-automating-log-analysis-2ak2</guid>
      <description>&lt;p&gt;Learn a practical approach to using Machine Learning for Log Analysis and Anomaly Detection in the article below.&lt;/p&gt;

&lt;p&gt;There are many articles on applying machine learning for log analysis. However, most of them are dated, academic in nature, or don’t focus on practical outcomes. On Dev.to, most of the articles cover ML courses or the difference between deep learning and machine learning.&lt;/p&gt;

&lt;p&gt;In this article, we want to share our real-life experience on using ML/AI for log analysis and anomaly detection with the specific purpose of automatically uncovering the root cause of software issues.&lt;/p&gt;

&lt;p&gt;We will also discuss the various approaches to ML-based log analysis, some of the existing challenges, and provide details of our approach to solving these problems.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: We are &lt;a href="https://www.zebrium.com/"&gt;Zebrium&lt;/a&gt; and we work on a product that uses ML on logs to identify the root cause of the software incidents. Companies like Seagate, IraLogix, Basemap, Nebulon, and Reserved.ai rely on our product daily.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-approaches-and-challenges-for-ai-log-analysis"&gt;
  &lt;/a&gt;
  Current Approaches and Challenges for AI Log Analysis
&lt;/h2&gt;

&lt;p&gt;While there have been a lot of academic papers on the subject, most approaches typically fall into two categories which are explained below:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-using-generalized-machine-learning-algorithms"&gt;
  &lt;/a&gt;
  1. Using Generalized Machine Learning Algorithms
&lt;/h3&gt;

&lt;p&gt;This category refers to algorithms that have been designed to detect anomalous patterns in string-based data. Two popular models in this category are Linear Support Vector Machines (SVM) and Random Forest.&lt;/p&gt;

&lt;p&gt;SVM, for example, classifies the probability that certain words in a logline are correlated with an incident. Some words such as “error” or “unsuccessful” may correlate with an incident and receive a higher probability score than other words such as “successful” or “connected”. The combined score of the message is used to detect an issue.&lt;/p&gt;

&lt;p&gt;Both SVM and Random Forest models use supervised machine learning for training and require a lot of data to serve accurate predictions. As we discussed above, this makes them difficult and costly to deploy in most real-life environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using-deep-learning-artificial-intelligence"&gt;
  &lt;/a&gt;
  2. Using Deep Learning (Artificial Intelligence)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/mcsh/deep-learning-and-machine-learning-an-overview-310o"&gt;Deep learning&lt;/a&gt; is a very powerful form of ML, generally called Artificial Intelligence (AI). By training neural networks on large volumes of data, Deep Learning can find patterns in data. It is most commonly used with Supervised training on labeled datasets. AI has been used for hard problems such as image and speech recognition with great results.&lt;/p&gt;

&lt;p&gt;One of the best academic articles on how this can be applied to logs is the &lt;a href="https://www.cs.utah.edu/~lifeifei/papers/deeplog.pdf"&gt;Deeplog paper from the University of Utah&lt;/a&gt;. Their approach uses deep learning to detect anomalies in logs. Interestingly, they have also applied machine learning to parse logs into event types, which has some similarities to &lt;a href="https://www.zebrium.com/blog/part-1-machine-learning-for-logs"&gt;Zebrium’s approach&lt;/a&gt; discussed later, as this significantly improves the accuracy of log anomaly detection.&lt;/p&gt;

&lt;p&gt;The challenge with this approach is that again it requires large volumes of data to become accurate. This means new environments will take longer before they can serve accurate predictions, and smaller environments may never produce enough data for the model to be accurate enough.&lt;/p&gt;

&lt;p&gt;In addition, unlike the statistical algorithms discussed previously, Deep Learning can be very compute-intensive to train. Many data scientists use expensive GPU instances to train their models more quickly but at a significant cost. Since we need to train the model on every unique environment individually, and continuously over time, this could be an extremely expensive way to perform automated log analysis.&lt;/p&gt;

&lt;p&gt;Some vendors have trained deep learning algorithms on common 3rd party services (i.e. MySQL, Nginx, etc.). This approach can work as it can take a large volume of publicly available datasets and error modes to train the model, and the trained model can be deployed to many users. However, as few environments are only running these 3rd party services (most also have custom software), this approach is limited to only discovering incidents in 3rd party services, and not the custom software running in the environment itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-log-anomaly-detection-is-not-enough-for-effective-mldriven-log-analysis"&gt;
  &lt;/a&gt;
  Why Log Anomaly Detection Is Not Enough for Effective ML-driven Log Analysis
&lt;/h2&gt;

&lt;p&gt;Many approaches to machine learning for logs focus on detecting anomalies. There are several challenges with this:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-log-volumes-are-evergrowing-and-logs-tend-to-be-noisy-and-mostly-unstructured"&gt;
  &lt;/a&gt;
  1. Log Volumes Are Ever-Growing and Logs Tend to Be Noisy and Mostly Unstructured
&lt;/h3&gt;

&lt;p&gt;Log volumes are ever-growing and logs tend to be noisy and mostly unstructured. When troubleshooting, noticing that a rare event has occurred is usually significant. But how do you know if a log event is rare when each instance of the same event type isn't identical (event types have fixed and variable parts)?&lt;/p&gt;

&lt;p&gt;At the very least, machine learning would need to be able to categorize log events by type to know which are anomalous. The most common technique for this is &lt;a href="https://en.wikipedia.org/wiki/Longest_common_substring_problem"&gt;Longest Common Substring (LCS)&lt;/a&gt;, but the variability of individual events of the same type makes LCS accuracy challenging.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-log-anomaly-detection-tends-to-produce-very-noisy-results-this-can-be-exacerbated-by-inaccurate-categorization"&gt;
  &lt;/a&gt;
  2. Log Anomaly Detection Tends to Produce Very Noisy Results. This Can Be Exacerbated by Inaccurate Categorization
&lt;/h3&gt;

&lt;p&gt;Logs typically have many anomalies with only a few that are useful when detecting and/or troubleshooting problems. Therefore, a skilled expert still needs to manually sift through and analyze the anomalies to spot the signal from the noise.&lt;/p&gt;

&lt;p&gt;For effective ML-driven log analysis, something more is needed than just log anomaly detection.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For effective ML-driven log analysis, something more is needed than just log anomaly detection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-new-way-to-detect-anomalies-in-logs"&gt;
  &lt;/a&gt;
  A New Way to Detect Anomalies in Logs
&lt;/h2&gt;

&lt;p&gt;In order to address the limitations described above, Zebrium has taken a multi-layered approach to use machine learning for log analysis. This approach is both more effective at finding anomalies and also provides a higher-level construct that goes beyond just log anomaly detection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zS3vD2VT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16v4yyfehfs7g69hc3gj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zS3vD2VT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16v4yyfehfs7g69hc3gj.jpg" alt="Unsupervised machine learning turns logs into easy to understand root cause reports" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://www.zebrium.com/"&gt;zebrium.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The technology described below is in production and &lt;a href="https://www.zebrium.com/company/customers"&gt;relied upon by leading companies around the world&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially, log files or log streams are sent to the platform. Following are the key stages:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-structuring-and-categorization-of-the-incoming-log-events"&gt;
  &lt;/a&gt;
  1. Structuring and Categorization of the Incoming Log Events
&lt;/h3&gt;

&lt;p&gt;Zebrium starts by using unsupervised machine learning to structure and categorize log events by type automatically.&lt;/p&gt;

&lt;p&gt;During the structuring phase, multiple ML techniques are used depending on how many examples of an event type have been seen. This allows for highly effective categorization even when there is just one, or only a few, examples. Side note: in root cause analysis, the identification of new or rare events is extremely important.&lt;/p&gt;

&lt;p&gt;Overall, the model continues to improve with more data and is also able to adapt to changing event structures (e.g. a parameter is added to a logline), but typically achieves good accuracy within the first day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pattern-learning"&gt;
  &lt;/a&gt;
  2. Pattern Learning
&lt;/h3&gt;

&lt;p&gt;Once the events have been categorized by type, the patterns for each “event type” are learned. This forms the foundation for accurate ML-based log analysis and anomaly detection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-finding-the-signal-in-the-noisecorrelated-clusters-of-anomalies"&gt;
  &lt;/a&gt;
  3. Finding the Signal in the Noise-Correlated Clusters of Anomalies
&lt;/h3&gt;

&lt;p&gt;As each new event is seen, it is scored based on how anomalous it is. Many factors go into anomaly scoring but the two of the biggest ones are "how rare an event is" and its severity ("how bad an event is"). &lt;/p&gt;

&lt;p&gt;Since the categorization of log events is very accurate, so too is Zebrium's ability to detect anomalous events. But even so, log anomalies on their own can still be noisy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-identifying-correlated-anomalies"&gt;
  &lt;/a&gt;
  4. Identifying Correlated Anomalies
&lt;/h3&gt;

&lt;p&gt;Machine learning next looks for hotspots of abnormally correlated anomalies across all logs. This eliminates the coincidental effect of random anomalies in logs.&lt;/p&gt;

&lt;p&gt;The anomalous events that are uncovered as being correlated form the basis of a "root cause report" and typically contain both root cause indicators and symptoms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-nlp-summarization-the-last-mile-problem"&gt;
  &lt;/a&gt;
  5. NLP Summarization (the Last Mile Problem)
&lt;/h3&gt;

&lt;p&gt;The Zebrium machine does a very good job of distilling details of a software problem down to just a few log lines, typically 5 to 20.&lt;/p&gt;

&lt;p&gt;A summary of this, together with an appropriate prompt, is passed to the &lt;a href="https://dev.to/amananandrai/top-10-best-uses-of-gpt-3-175n"&gt;GPT-3 language model&lt;/a&gt;. The AI model returns a novel response that can be used for root cause summarization. &lt;/p&gt;

&lt;p&gt;Although this feature is designated "experimental", real-world results so far have shown that approximately 40% of the time, the simple plain language summaries are very useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-delivering-the-results-of-mlbased-log-analysis-as-a-root-cause-report"&gt;
  &lt;/a&gt;
  6. Delivering the Results of ML-Based Log Analysis as a Root Cause Report
&lt;/h3&gt;

&lt;p&gt;An interactive root cause report is automatically created by combining the log lines from stage 4, with the plain language summary created in stage 5.&lt;/p&gt;

&lt;p&gt;The report can be delivered via webhook to another application (such as an incident response tool) or viewed interactively in the Zebrium UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-type-of-log-analysis-with-machine-learning-works-well-in-the-real-world"&gt;
  &lt;/a&gt;
  This Type of Log Analysis With Machine Learning Works Well in the Real World
&lt;/h2&gt;

&lt;p&gt;The technology described above is in production and relied upon by leading companies around the world. There are two key use cases where users find value:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-finding-the-root-cause-of-a-problem-automatically-instead-of-manually-hunting-through-logs"&gt;
  &lt;/a&gt;
  1. Finding the Root Cause of a Problem Automatically Instead of Manually Hunting Through Logs
&lt;/h3&gt;

&lt;p&gt;Finding the root cause is often the biggest bottleneck in the incident response process. Using machine learning to uncover details of the problem means much faster mean time to resolution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-proactive-detection-of-new-or-unknown-problems-or-incidents-that-are-missed-by-other-tools"&gt;
  &lt;/a&gt;
  2. Proactive Detection of New or Unknown Problems or Incidents That Are Missed by Other Tools.
&lt;/h3&gt;

&lt;p&gt;While most monitoring tools will notice when something major occurs, there are many problems that go unnoticed because they are not detected by any existing rules or thresholds.&lt;br&gt;
Have you tried using ML/AI for Log Analysis? If yes, please share your results in the comments below. We would love to hear from you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The article was originally posted on &lt;a href="https://dzone.com/articles/using-machine-learning-for-log-analysis-and-anomal"&gt;Dzone&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>devops</category>
      <category>sre</category>
      <category>loganalysis</category>
    </item>
  </channel>
</rss>
