<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing SELECT* Podcast, Innovative Tech &amp; Dev Topics</title>
      <author>Margo McCabe</author>
      <pubDate>Fri, 23 Apr 2021 14:50:09 +0000</pubDate>
      <link>https://dev.to/margo_hdb/introducing-select-podcast-innovative-tech-dev-topics-323g</link>
      <guid>https://dev.to/margo_hdb/introducing-select-podcast-innovative-tech-dev-topics-323g</guid>
      <description>&lt;p&gt;One of my favorite things about being immersed in the tech community is the &lt;em&gt;people&lt;/em&gt;! I have connected with so many interesting and smart folks, some of which I‚Äôve had conversations and built relationships with, while many others I‚Äôve simply followed and learned from via blogging or social media. &lt;strong&gt;This is what inspired HarperDB‚Äôs new tech podcast called &lt;a href="https://harperdb.io/company/podcast/?utm_source=devto"&gt;SELECT*&lt;/a&gt;, hosted by yours truly! The goal is to be another great resource for innovative technology and developer topics&lt;/strong&gt;. Official description: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The team at HarperDB is excited to bring you our new podcast, Select*. We will be featuring guests across a wide range of backgrounds and topics, with the goal of being your resource for coding tips, best practices, diversity and inclusion, product reviews, tech trends, jobs, and much, much more! We ain't your grandma's podcast, we can guarantee some fun and entertainment while we're at it! &lt;a href="https://harperdb.io/company/podcast/?utm_source=devto"&gt;Listen now&lt;/a&gt;, available wherever you listen to your podcasts (including Apple, Google, Spotify, YouTube, Stitcher, etc.).&lt;/em&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JN8lV00K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucflrfn7ipt5v1l6njw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JN8lV00K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucflrfn7ipt5v1l6njw3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
It‚Äôs super fun and I‚Äôm able to have insightful conversations with some awesome people, learning about their journeys and gaining insights and tips that are helpful for our listeners. I‚Äôm excited to share a bit about our podcast and the conversations I‚Äôve had so far, as you might find something useful or interesting for you! üó£Ô∏è üéß&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#episodes-currently-available-on-select"&gt;
  &lt;/a&gt;
  Episodes currently available on SELECT*:
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=VGlioD6g7E0&amp;amp;list=PLlgTMTKsypS4RAYUtEsvXOOnQiyRXRhCw&amp;amp;index=5"&gt;Episode 1&lt;/a&gt;: HarperDB Founder Story, Looking Back and Looking Ahead&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For our 1st episode, I interviewed two HarperDB Co-founders, &lt;a href="https://dev.to/kylebernhardy"&gt;Kyle Bernhardy&lt;/a&gt; (CTO) and &lt;a href="https://dev.to/zaxharperdb"&gt;Zach Fowler&lt;/a&gt; (CPO) on their founder story and journey to becoming startup innovators, along with looking at how far HarperDB has come and where we are headed. They also discuss other technologies they are excited about in the new year, as well as Kyle's rockin' plaid suite with matching shoes!&lt;/p&gt;

&lt;p&gt;Questions in this Episode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tell us a bit about your background, how you met / how the Harper team came together.&lt;/li&gt;
&lt;li&gt;What's it like going from a technical / dev background to management / founder?&lt;/li&gt;
&lt;li&gt;Talk a little bit about how far HarperDB has come‚Ä¶. What‚Äôs your favorite thing about HarperDB, what problems are you solving?&lt;/li&gt;
&lt;li&gt;Focus on future - where is HarperDB headed, main goals for 2021?&lt;/li&gt;
&lt;li&gt;Favorite programming languages? Other tools / technologies you're excited about?&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=QDkbZlKHTao&amp;amp;list=PLlgTMTKsypS4RAYUtEsvXOOnQiyRXRhCw&amp;amp;index=4"&gt;Episode 2&lt;/a&gt;: Building Apps in Node.js and Electron.js and the Power of Doodling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In episode 2, I chatted with David Neal, known as the "ambassador of awesome and doodle-driven developer", about building apps in Node.js and Electron.js, as well as the power of illustrations! We covered the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;David's background and journey in the tech world (hint: he's been a full time dev and database nerd since the beginning of the Internet!)&lt;/li&gt;
&lt;li&gt;Building web apps or command-line apps with Node.js&lt;/li&gt;
&lt;li&gt;Building desktop apps with Electron.js&lt;/li&gt;
&lt;li&gt;Fun fact- drawing illustrations used for presentations and content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listen now to gain some serious inspiration, and learn about how David helps other developers be more awesome.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;David Neal is a family man, musician, illustrator, software developer, and Microsoft MVP living in North Georgia. He currently leads Developer Relations at ActiveCampaign, runs on a high-octane mixture of caffeine and JavaScript, and is made entirely of bacon.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Twitter &amp;amp; Dev: &lt;a class="mentioned-user" href="https://dev.to/reverentgeek"&gt;@reverentgeek&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=Kad-S-sUaNg&amp;amp;list=PLlgTMTKsypS4RAYUtEsvXOOnQiyRXRhCw&amp;amp;index=3"&gt;Episode 3&lt;/a&gt;: Tips for Code Newbies Across the Globe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A panel-style discussion with two different perspectives: a self-proclaimed code newbie and a coding instructor! Mina is an aspiring Web Developer, self-learning CSS and Javascript. Shruti, Senior Engineer at Paypal, is on a mission to make JavaScript and GraphQL development easier. From Javascript, front end, and 100 days of code, to community, skills for the job hunt, and staying motivated - you won't want to miss this discussion. In this episode we covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share a bit about your journey, how did you get into tech/development?&lt;/li&gt;
&lt;li&gt;When getting started, how did you determine what type of developer you wanted to be, which languages or tech stack to start with?&lt;/li&gt;
&lt;li&gt;What are your main tips, dos, and don'ts, for code newbies? What's important to remember throughout the journey?&lt;/li&gt;
&lt;li&gt;What about jobs - is it important to know right away when you start coding what you want to do with your career? How can you differentiate yourself in such a competitive market?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Shruti is a Senior Software Engineer on the Checkout team at PayPal and is passionate about teaching and sharing knowledge in JavaScript, React, GraphQL, and front-end technologies. She shares byte-sized javascript tidbits through her newsletter - JSByte: &lt;a href="http://tinyletter.com/shrutikapoor"&gt;http://tinyletter.com/shrutikapoor&lt;/a&gt;. She is also an ardent #DevJoke fan.&lt;/em&gt; &lt;br&gt;
Twitter &amp;amp; Dev: &lt;a class="mentioned-user" href="https://dev.to/shrutikapoor08"&gt;@shrutikapoor08&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mina, from Sydney, Australia, is an aspiring Web Designer &amp;amp; Developer. She is self-learning CSS and Javascript and has a Youtube channel focused on web design and development, social media, and self-study tips for beginners.&lt;/em&gt;&lt;br&gt;
Twitter: @Codeanddream&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=mj-DQwUAjII&amp;amp;list=PLlgTMTKsypS4RAYUtEsvXOOnQiyRXRhCw&amp;amp;index=2"&gt;Episode 4&lt;/a&gt;: Vets Who Code: Founder Story&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this podcast interview, I was fortunate enough to get some airtime with Jerome Hardaway, an Air Force veteran who launched &lt;a href="//vetswhocode.io"&gt;Vets Who Code&lt;/a&gt;. Vets Who Code is a veteran-led and operated charitable non-profit that focuses on training veterans in web development and software engineering principles free of charge, with the focus of starting careers as JavaScript developers and other roles in tech.&lt;/p&gt;

&lt;p&gt;Jerome shares his intriguing and inspiring story of returning from the military without a clear path of what to do next, learning how to code, and eventually creating this much-needed organization that helps other vets in his similar position. Jerome is passionate about community, highly focused on his goals, and incredibly fun to talk to! Listen now to learn about Jerome, Vets Who Code, and ways to get involved.&lt;/p&gt;

&lt;p&gt;Twitter &amp;amp; Dev: &lt;a class="mentioned-user" href="https://dev.to/jeromehardaway"&gt;@jeromehardaway&lt;/a&gt;
&lt;br&gt;
@VetsWhoCode&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=bX4rxnB2uKI&amp;amp;list=PLlgTMTKsypS4RAYUtEsvXOOnQiyRXRhCw&amp;amp;index=1"&gt;SELECT* Episode 5&lt;/a&gt;: Leadership Advice from a Senior Netflix Engineer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was a fun chat with Jem Young, Senior Software Engineer at Netflix. Jem started out at Netflix in UI and is now in backend/infrastructure. He shares a bit about what it's like working at a tech giant, imposter syndrome, the importance of communication in engineering, and tips for being a leader including what it's like managing an engineering team. Jem is inspiring, knowledgeable, and super easy to talk to!&lt;/p&gt;

&lt;p&gt;@JemYoung&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jem Young is a tall engineer at Netflix who loves dogs, reading, and clean code. He really enjoys working across the stack but his true passion lies in JavaScript and building a clean user experience. He believes that empathy is the key to building an effective UI and when he‚Äôs not at the gym or chasing his cat, you can find him hassling other engineers to write more tests.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Coming Up:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recently recorded a conversation with Debbie O'Brien (&lt;a class="mentioned-user" href="https://dev.to/debs_obrien"&gt;@debs_obrien&lt;/a&gt;
), a Head Developer Advocate for Bit.dev and Nuxt.js ambassador with 10+ years experience in Frontend development. Debbie talks about her interesting journey into tech and across numerous roles, from leading a dev team into dev advocacy, and more! She shares a bit about her initial career shift and learning to code in just nine months, learning JavaScript, and then getting into Nuxt and React. Debbie shares insightful tips for people trying to get into similar Dev Advocacy roles, and talks about technology she's excited about this year.&lt;/p&gt;

&lt;p&gt;Next on the calendar we also have time scheduled with &lt;a class="mentioned-user" href="https://dev.to/jamesqquick"&gt;@jamesqquick&lt;/a&gt;
 and a few other very special guests. &lt;a href="https://harperdb.io/company/podcast/"&gt;Stay tuned&lt;/a&gt; for more great content! &lt;/p&gt;




&lt;p&gt;&lt;em&gt;We would love to hear from you. If you have topic suggestions, would like to be a guest, or nominate a guest, don‚Äôt hold back! Comment below or reach out to &lt;a href="mailto:podcast@harperdb.io"&gt;podcast@harperdb.io&lt;/a&gt; anytime. Hope you enjoy listening and don‚Äôt forget to like, subscribe, comment, or whatever else you can do on those podcast channels.üòÅ&lt;/em&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Domain-Driven Design and the Hexagonal Architecture</title>
      <author>Petter Holmstr√∂m</author>
      <pubDate>Fri, 23 Apr 2021 13:51:06 +0000</pubDate>
      <link>https://dev.to/peholmst/domain-driven-design-and-the-hexagonal-architecture-2o87</link>
      <guid>https://dev.to/peholmst/domain-driven-design-and-the-hexagonal-architecture-2o87</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted as a &lt;a href="https://vaadin.com/learn/tutorials/ddd/ddd_and_hexagonal"&gt;tutorial&lt;/a&gt; on the Vaadin website. Since I am moving my future DDD writing to this platform, I'm copying my original tutorial series as well to keep the timeline straight.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the two previous articles, we learned about &lt;a href="https://dev.to/peholmst/strategic-domain-driven-design-3e87"&gt;strategic&lt;/a&gt; and &lt;a href="https://dev.to/peholmst/tactical-domain-driven-design-17dp"&gt;tactical&lt;/a&gt; domain-driven design. Now it is time to learn how to turn a domain model into working software - more specifically, how to do it using the hexagonal architecture. &lt;/p&gt;

&lt;p&gt;The previous two articles were pretty generic even though the code examples were written in Java. Although a lot of the theory in this article can also be applied in other environment and languages as well, I have explicitly written it with Java and Vaadin in mind.&lt;/p&gt;

&lt;p&gt;Again, the content is based on the books &lt;em&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/em&gt; by Eric Evans and &lt;em&gt;Implementing Domain-Driven Design&lt;/em&gt; by &lt;em&gt;Vaughn Vernon&lt;/em&gt; and I highly recommend you to read both of them. However, even though I presented my own thoughts, ideas and experiences in the previous articles as well, this one is even more strongly colored by what I think and believe. That said, it was the books of Evans and Vernon that got me started with DDD in the first place and I'd like to think that what I'm writing here is not too far from what you will find in the books.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-it-called-hexagonal"&gt;
  &lt;/a&gt;
  Why Is It Called Hexagonal?
&lt;/h1&gt;

&lt;p&gt;The name &lt;em&gt;hexagonal architecture&lt;/em&gt; comes from the way this architecture is usually depicted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43uphorj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33ru7jmqzice8bfsq8of.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43uphorj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33ru7jmqzice8bfsq8of.png" alt="The hexagonal architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to return to why hexagons are used later in this article. This arhictecture also goes under the names &lt;em&gt;ports and adapters&lt;/em&gt; (which better explains the central idea behind it) and &lt;em&gt;onion architecture&lt;/em&gt; (because of how it is layered).&lt;/p&gt;

&lt;p&gt;In the following, we are going to have a closer look at the "onion". We are going to start with the core - the domain model - and then work ourselves out, one layer at the time, until we reach the adapters and the systems and clients that interact with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hexagonal-vs-traditional-layers"&gt;
  &lt;/a&gt;
  Hexagonal vs. Traditional Layers
&lt;/h2&gt;

&lt;p&gt;Once we dig deeper into the hexagonal architecture you will find that it has several resemblances to the more traditional layered architecture. Indeed, you can think of the hexagonal architecture as an evolution of the layered architecture. However, there are some differences especially with regards to how a system interacts with the outside world. To better understand these differences, let's start with a recap of the layered architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRNxmHnx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p25w9vttpfz3pkto7nah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRNxmHnx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p25w9vttpfz3pkto7nah.png" alt="The traditional layered architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The principle is that the system is built up of layers stacked on top of each other. A higher layer can interact with a lower layer &lt;em&gt;but not the other way around&lt;/em&gt;. Typically, in a domain-driven layered architecture, you would have the UI layer at the top. This layer, in turn, interacts with an application service layer, which interacts with the domain model that lives in a domain layer. At the bottom, we have an infrastructure layer that communicates with external systems such as a database.&lt;/p&gt;

&lt;p&gt;In the hexagonal system, you will find that the application layer and the domain layer are still pretty much the same. However, the UI layer and the infrastructure layer are treated in a very different way. Keep reading to find out how.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-domain-model"&gt;
  &lt;/a&gt;
  The Domain Model
&lt;/h1&gt;

&lt;p&gt;At the very core of the hexagonal architecture lies the domain model, implemented using the building blocks of tactical DDD that we covered in the previous article. This is where the so-called business logic lives, where all the business decisions are made. This is also the most stable part of the software that hopefully will change the least (unless the business itself changes of course).&lt;/p&gt;

&lt;p&gt;The domain model has been the subject of the previous two articles in this series, so we are not going to cover it anymore here. However, the domain model alone does not provide any value if there is no way of interacting with it. To do that, we have to move up to the next layer in the "onion".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#application-services"&gt;
  &lt;/a&gt;
  Application Services
&lt;/h1&gt;

&lt;p&gt;An application service acts as a facade through which clients will interact with the domain model. Application services have the following characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are stateless&lt;/li&gt;
&lt;li&gt;They enforce system security&lt;/li&gt;
&lt;li&gt;They control the database transactions&lt;/li&gt;
&lt;li&gt;They orchestrate business operations but do not make any business decisions (i.e., they do not contain any business logic)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's have a closer look at what this means.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#statelessness"&gt;
  &lt;/a&gt;
  Statelessness
&lt;/h2&gt;

&lt;p&gt;An application service does not maintain any internal state that can be changed by interacting with clients. All the information that is needed to perform an operation should be available as input parameters to the application service method. This will make the system simpler and easier to debug and scale.&lt;/p&gt;

&lt;p&gt;If you find yourself in a situation where you have to make multiple application service calls within the context of a single business process, you can model the business process in a class of its own and pass an instance of it as an input parameter to the application service method. The method would then do its magic and return an updated instance of the business process object that in turn can be used as input to other application service methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Current process state&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyApplicationService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="nf"&gt;performSomeStuff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="nf"&gt;performSomeMoreStuff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also make the business process object mutable and let the application service method change the state of the object directly. I personally do not prefer this approach since I believe it can lead to unwanted side effects, especially if the transaction ends up rolling back. This depends on how the application service is being called by the client and will return to this matter later in the section about ports and adapters.&lt;/p&gt;

&lt;p&gt;For tips on how to implement more complex and long-running business processes, I encourage you to read Vernon's book.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-enforcement"&gt;
  &lt;/a&gt;
  Security Enforcement
&lt;/h2&gt;

&lt;p&gt;The application service makes sure that the current user is allowed to perform the operation in question. Technically, you can do this manually at the top of each application service method or use something more sophisticated such as AOP. It does not matter how security is enforced as long as it happens in the application service layer and not inside the domain model. Now, why is this important?&lt;/p&gt;

&lt;p&gt;When we talk about security in an application, we tend to put more emphasis on preventing unauthorized access than on permitting authorized access. Thus, any security check we add to the system will essentially make it harder to use. If we add these security checks to the domain model, we may find ourselves in a situation where we are unable to perform an important operation because we did not think of it when the security checks were added and now they stand in the way. By keeping the all security checks out of the domain model, we get a more flexible system since we can interact with the domain model in any way we want. The system will still be safe since all clients are required to go through an application service anyway. It is way easier to create a new application service than to change the domain model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-examples"&gt;
  &lt;/a&gt;
  Code Examples
&lt;/h3&gt;

&lt;p&gt;Here are two Java-examples of what security enforcement in an application service could look like. The code has not been tested and should be treated more as pseudo-code than actual Java code.&lt;/p&gt;

&lt;p&gt;The first example demonstrates declarative security enforcement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApplicationService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Secured&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ROLE_BUSINESS_PROCESSOR"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="nf"&gt;performSomeStuff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCustomerId&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseThrow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CustomerNotFoundException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCustomerId&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;someResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myDomainService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;performABusinessOperation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;updateMyBusinessProcessWithResult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someResult&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The annotation instructs the framework to only allow authenticated users with the role &lt;code&gt;ROLE_BUSINESS_PROCESSOR&lt;/code&gt; to invoke the method.&lt;/li&gt;
&lt;li&gt;The application service looks up an aggregate root from a repository in the domain model.&lt;/li&gt;
&lt;li&gt;The application service passes the aggregate root to a domain service in the domain model, storing the result (whatever it is).&lt;/li&gt;
&lt;li&gt;The application service uses the result of the domain service to update the business process object and returns it so that it can be passed to other application service methods participating in the same longrunning process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second example demonstrates manual security enforcement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApplicationService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="nf"&gt;performSomeStuff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MyBusinessProcess&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// We assume SecurityContext is a thread-local class that contains information&lt;/span&gt;
        &lt;span class="c1"&gt;// about the current user.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="nc"&gt;SecurityContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoggedOn&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AuthenticationException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No user logged on"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="nc"&gt;SecurityContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;holdsRole&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ROLE_BUSINESS_PROCESSOR"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AccessDeniedException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insufficient privileges"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCustomerId&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseThrow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CustomerNotFoundException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCustomerId&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;someResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myDomainService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;performABusinessOperation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;updateMyBusinessProcessWithResult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someResult&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In a real application, you would probably create helper methods that throw the exception if a user is not logged on. I have only included a more verbose version in this example to show what needs to be checked.&lt;/li&gt;
&lt;li&gt;As in the previous case, only users with the role &lt;code&gt;ROLE_BUSINESS_PROCESSOR&lt;/code&gt; are allowed to invoke the method.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#transaction-management"&gt;
  &lt;/a&gt;
  Transaction Management
&lt;/h2&gt;

&lt;p&gt;Every application service method should be designed in such a way that it forms a single transaction of its own, regardless of whether the underlying data storage uses transactions or not. If an application service method succeeds, there is no way of undoing it except by explicitly invoking another application service that reverses the operation (if such a method even exists).&lt;/p&gt;

&lt;p&gt;If you find yourself in a situation where you would want to invoke multiple application service methods within the same transaction, you should check that the granularity of your application service is correct. Maybe some of the things your application service is doing should actually be in domain services instead? You may also need to consider redesigning your system to use eventual consistency instead of strong consistency (for more information about this, please check the previous article about tactical domain-driven design).&lt;/p&gt;

&lt;p&gt;Technically, you can either handle the transactions manually inside the application service method or you can use the declarative transactions that are offered by frameworks and platforms such as Spring and Java EE.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-examples"&gt;
  &lt;/a&gt;
  Code Examples
&lt;/h3&gt;

&lt;p&gt;Here are two Java-examples of what transaction management in an application service could look like. The code has not been tested and should be treated more as pseudo-code than actual Java code.&lt;/p&gt;

&lt;p&gt;The first example demonstrates declarative transaction management:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserAdministrationService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Transactional&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;resetPassword&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findByUserId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resetPassword&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The framework will make sure the entire method runs inside a single transaction. If an exception is thrown, the transaction is rolled back. Otherwise, it is committed when the method returns.&lt;/li&gt;
&lt;li&gt;The application service calls a repository in the domain model to find the &lt;code&gt;User&lt;/code&gt; aggregate root.&lt;/li&gt;
&lt;li&gt;The application service invokes a business method on the &lt;code&gt;User&lt;/code&gt; aggregate root.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second example demonstrates manual transaction management:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserAdministrationService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Transactional&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;resetPassword&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transactionManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;begin&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findByUserId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resetPassword&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rollback&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The transaction manager has been injected into the application service so that the service method can start a new transaction explicitly.&lt;/li&gt;
&lt;li&gt;If everything works, the transaction is committed after the password has been reset.&lt;/li&gt;
&lt;li&gt;If an error occurs, the transaction is rolled back and the exception is rethrown.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#orchestration"&gt;
  &lt;/a&gt;
  Orchestration
&lt;/h2&gt;

&lt;p&gt;Getting the orchestration right is perhaps the most difficult part of designing a good application service. This is because you need to make sure you are not accidentally introducing business logic into the application service even though you think you are only doing orchestration. So what does orchestration mean in this context?&lt;/p&gt;

&lt;p&gt;By orchestration, I mean looking up and invoking the correct domain objects in the correct order, passing in the correct input parameters and returning the correct output. In its simplest form, an application service may look up an aggregate based on an ID, invoke a method on that aggregate, save it and return. However, in more complex cases, the method may have to look up multiple aggregates, interact with domain services, perform input validation and so on. If you find yourself writing long application service methods, you should ask yourself the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is the method making a business decision or asking the domain model to make the decision?&lt;/li&gt;
&lt;li&gt;Should some of the code be moved to domain event listeners?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This being said, having some business logic ending up in an application service method is not the end of the world. It is still pretty close to the domain model and well encapsulated and should be pretty easy to refactor into the domain model at a later time. Don't waste too much precious time thinking about whether something should go into the domain model or into the application service if it is not immediately clear to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-examples"&gt;
  &lt;/a&gt;
  Code Examples
&lt;/h3&gt;

&lt;p&gt;Here is a Java-example of what a typical orchestration could look like. The code has not been tested and should be treated more as pseudo-code than actual Java code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerRegistrationService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Transactional&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
    &lt;span class="nd"&gt;@PermitAll&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="nf"&gt;registerNewCustomer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomerRegistrationRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;violations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;violations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidCustomerRegistrationRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;violations&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;customerDuplicateLocator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;checkForDuplicates&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createNewCustomer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;5&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;6&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The application service method runs inside a transaction.&lt;/li&gt;
&lt;li&gt;The application service method can be accessed by any user.&lt;/li&gt;
&lt;li&gt;We invoke a JSR-303 validator to check that the incoming registration request contains all the necessary information. If the request is invalid, we throw an exception that will be reported back to the user.&lt;/li&gt;
&lt;li&gt;We invoke a domain service that will check if there already is a customer in the database with the same information. If that is the case, the domain service will throw an exception (not shown here) that will be propagated back to the user.&lt;/li&gt;
&lt;li&gt;We invoke a domain factory that will create a new &lt;code&gt;Customer&lt;/code&gt; aggregate with information from the registration request object.&lt;/li&gt;
&lt;li&gt;We invoke a domain repository to save the customer and returns the newly created and saved customer aggregate root.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#domain-event-listeners"&gt;
  &lt;/a&gt;
  Domain Event Listeners
&lt;/h2&gt;

&lt;p&gt;In the previous article about tactical domain-driven design, we talked about domain events and domain event listeners. We did not, however, talk about where the domain event listeners fit into the overall system architecture. We recall from the previous article that a domain event listener should not be able to affect the outcome of the method that published the event in the first place. In practice, this means that a domain event listener should run inside its own transaction.&lt;/p&gt;

&lt;p&gt;Because of this, I consider domain event listeners to be a special kind of application service that is invoked not by a client but by a domain event. In other words: domain event listeners belong in the application service layer and not inside the domain model. This also means that a domain event listener is an orchestrator that should not contain any business logic. Depending on what needs to happen when a certain domain event is published, you may have to create a separate domain service that decides what to do with it if there is more than one path forward.&lt;/p&gt;

&lt;p&gt;This being said, in the section about aggregates in the previous article, I mentioned that it may sometimes be justified to alter multiple aggregates within the same transaction even though this goes against the aggregate design guidelines. I also mentioned that this should preferably be made through domain events. In cases like this, the domain event listeners would have to participate in the current transaction and could thereby affect the outcome of the method that published the event, breaking the design guidelines for both domain events and application services. This is not the end of the world as long as you do it intentionally and are aware of the consequences you might face in the future. Sometimes you just have to be pragmatic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-and-output"&gt;
  &lt;/a&gt;
  Input and Output
&lt;/h2&gt;

&lt;p&gt;One important decision when designing application services is to decide what data to consume (method parameters) and what data to return. You have three alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the entities and value objects directly from the domain model.&lt;/li&gt;
&lt;li&gt;Use separate Data Transfer Objects (DTOs).&lt;/li&gt;
&lt;li&gt;Use Domain Payload Objects (DPOs) that are a combination of the two above.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each alternative has its own pros and cons, so let's have a closer look at each.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#entities-and-aggregates"&gt;
  &lt;/a&gt;
  Entities and Aggregates
&lt;/h3&gt;

&lt;p&gt;In the first alternative, the application services return entire aggregates (or parts thereof). The client can do whatever it wants with them and when it is time to save changes, the aggregates (or parts thereof) are passed back to the application service as parameters. &lt;/p&gt;

&lt;p&gt;This alternative works best when the domain model is anemic (i.e. it only contains data and no business logic) and the aggregates are small and stable (as in unlikely to change much in the near future). &lt;/p&gt;

&lt;p&gt;It also works if the client will be accessing the system through REST or SOAP and the aggregates can easily be serialized into JSON or XML and back. In this case, clients will not actually be interacting directly with your aggregates but with a JSON or XML representation of the aggregate that may be implemented in a completely different language. From the client's perspective, the aggregates are just DTOs.&lt;/p&gt;

&lt;p&gt;The advantages of this alternative are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use the classes that you already have&lt;/li&gt;
&lt;li&gt;There is no need to convert between domain objects and DTOs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It couples the domain model directly to the clients. If the domain model changes, you have to change your clients as well.&lt;/li&gt;
&lt;li&gt;It imposes restrictions on how you validate user input (more about this later).&lt;/li&gt;
&lt;li&gt;You have to design your aggregates in such a way that the client cannot put the aggregate into an inconsistent state or perform an operation that is not allowed.&lt;/li&gt;
&lt;li&gt;You may run into problems with lazy-loading of entities inside an aggregate (JPA).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I try to avoid this approach as much as I can.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-transfer-objects"&gt;
  &lt;/a&gt;
  Data Transfer Objects
&lt;/h3&gt;

&lt;p&gt;In the second alternative, the application services consume and return data transfer objects. The DTOs can correspond to entities in the domain model, but more often they are designed for a specific application service or even a specific application service method (such as request and response objects). The application service is then responsible for moving data back and forth between the DTOs and the domain objects. &lt;/p&gt;

&lt;p&gt;This alternative works best when the domain model is very rich in business logic, the aggregates are complex or when the domain model is expected to change a lot while keeping the client API as stable as possible.&lt;/p&gt;

&lt;p&gt;The advantages of this alternative are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The clients are decoupled from the domain model, making it easier to evolve it without having to change the clients.&lt;/li&gt;
&lt;li&gt;Only the data that is actually needed is being passed between the clients and the application services, improving performance (especially if the client and the application service are communicating over a network in a distributed environment).&lt;/li&gt;
&lt;li&gt;It becomes easier to control access to the domain model, especially if only certain users are allowed to invoke certain aggregate methods or view certain aggregate attribute values.&lt;/li&gt;
&lt;li&gt;Only application services will interact with the aggregates inside active transactions. This means you can utilize lazy loading of entities inside an aggregate (JPA).&lt;/li&gt;
&lt;li&gt;If the DTOs are interfaces and not classes, you get even more flexibility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You get a new set of DTO classes to maintain.&lt;/li&gt;
&lt;li&gt;You have to move data back and forth between DTOs and aggregates. This can be especially tedious if the DTOs and entities are almost similar in structure. If you work in a team you need to have a good explanation ready for why the separation of DTOs and aggregates is warranted. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, this is the approach I start with in most cases. Sometimes I end up converting my DTOs into DPOs, which is the next alternative we are going to look at.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-payload-objects"&gt;
  &lt;/a&gt;
  Domain Payload Objects
&lt;/h3&gt;

&lt;p&gt;In the third alternative, application services consume and return domain payload objects. A domain payload object is a data transfer object that is aware of the domain model and can contain domain objects. This is essentially a combination of the first two alternatives.&lt;/p&gt;

&lt;p&gt;This alternative works best in cases where the domain model is anemic, the aggregates are small and stable and you want to implement an operation that involves multiple different aggregates. Personally, I would say I use DPOs more often as output objects than as input objects. However, I try to limit the use of domain objects in DPOs to value objects if only possible.&lt;/p&gt;

&lt;p&gt;The advantages of this alternative are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You do not need to create DTO classes for everything. When passing a domain object directly to the client is good enough, you do it. When you need a custom DTO, you create one. When you need both, you use both.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The disadvantages are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same as for the first alternative. The disadvantages can be mitigated by only including immutable value objects inside the DPOs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-examples"&gt;
  &lt;/a&gt;
  Code Examples
&lt;/h3&gt;

&lt;p&gt;Here are two Java examples of using DTOs and DPOs, respectively. The DTO example demonstrates a use case where it makes  sense to use a DTO than return the entity directly: Only a fraction of the entity attributes are needed and we need to include information that does not exist in the entity. The DPO example demonstrates a use case where it makes sense to use a DPO: We need to include many different aggregates that are related to each other in some way.&lt;/p&gt;

&lt;p&gt;The code has not been tested and should be treated more as pseudo-code than actual Java code.&lt;/p&gt;

&lt;p&gt;First, we look at the Data Transfer Object example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerListEntryDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;CustomerId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;LocalDate&lt;/span&gt; &lt;span class="n"&gt;lastInvoiceDate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Getters and setters omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerListingService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Transactional&lt;/span&gt; 
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomerListEntryDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getCustomerList&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dtos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomerListEntryDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;customers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;lastInvoiceDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invoiceService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findLastInvoiceDate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;dto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CustomerListEntryDTO&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setLastInvoiceDate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastInvoiceDate&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;dtos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The Data Transfer Object is just a data structure without any business logic. This particular DTO is designed to be used in a user interface list view that only needs to show the customer name and last invoice date.&lt;/li&gt;
&lt;li&gt;We look up all the customer aggregates from the database. In a real-world application, this would be a paginated query that only returns a subset of the customers.&lt;/li&gt;
&lt;li&gt;The last invoice date is not stored in the customer entity so we have to invoke a domain service to look it up for us.&lt;/li&gt;
&lt;li&gt;We create the DTO instance and populate it with data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Second, we look at the Domain Payload Object example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerInvoiceMonthlySummaryDPO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;YearMonth&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Invoice&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;invoices&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Getters and setters omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerInvoiceSummaryService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;CustomerInvoiceMontlySummaryDPO&lt;/span&gt; &lt;span class="nf"&gt;getMonthlySummary&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomerId&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;YearMonth&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;invoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invoiceRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findByYearMonth&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dpo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CustomerInvoiceMonthlySummaryDPO&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;dpo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCustomer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;dpo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMonth&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;dpo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInvoices&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invoices&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dpo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The Domain Payload Object is a data structure without any business logic that contains both domain objects (in this case entities) and additional information (in this case the year and month).&lt;/li&gt;
&lt;li&gt;We fetch the customer's aggregate root from the repository.&lt;/li&gt;
&lt;li&gt;We fetch the customer's invoices for the specified year and month.&lt;/li&gt;
&lt;li&gt;We create the DPO instance and populate it with data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#input-validation"&gt;
  &lt;/a&gt;
  Input Validation
&lt;/h2&gt;

&lt;p&gt;As we have mentioned previously, an aggregate must always be in a consistent state. This means among other things that we need to properly validate all the input that is used to alter the state of an aggregate. How and where do we do that?&lt;/p&gt;

&lt;p&gt;From a user experience perspective, the user interface should include validation so that the user is not even able to perform an operation if the data is invalid. However, relying simply on user interface validation is &lt;em&gt;not good enough&lt;/em&gt; in a hexagonal system. The reason for this is that the user interface is but one of potentially many entry points into the system. It does not help that the user interface is validating data properly if a REST endpoint lets any garbage through to the domain model.&lt;/p&gt;

&lt;p&gt;When thinking about input validation there are actually two distinct kinds of validation: format validation and content validation. When we are validating the format, we check that certain values of certain types conform to certain rules. E.g. a social security number is expected to be in a specific pattern. When we are validating the content, we already have a well-formed piece of data and are interested in checking that that data makes sense. E.g. we may want to check that a well-formed social security number actually corresponds to a real person. You can implement these validations in different ways so let's have a closer look.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#format-validation"&gt;
  &lt;/a&gt;
  Format Validation
&lt;/h3&gt;

&lt;p&gt;If you are using a lot of value objects in your domain model (I tend to do that personally) that are wrappers around primitive types (such as strings or integers), then it makes sense to build the format validation straight into your value object constructor. In other words, it should not be possible to create e.g. an &lt;code&gt;EmailAddress&lt;/code&gt; or &lt;code&gt;SocialSecurityNumber&lt;/code&gt; instance without passing in a well-formed argument. This has the added advantage that you can do some parsing and cleaning up inside the constructor if there are multiple known ways of entering valid data (e.g. when entering a phone number some people may use spaces or dashes to split the number into groups whereas others may not use any whitespace at all).&lt;/p&gt;

&lt;p&gt;Now when the value objects are valid, how do we validate the entities that use them? There are two options available for Java developers.&lt;/p&gt;

&lt;p&gt;The first option is to add the validation into your constructors, factories and setter methods. The idea here is that it should not even be possible to put an aggregate into an inconsistent state: all required fields must be populated in the constructor, any setters of required fields will not accept null parameters, other setters will not accept values of an incorrect format or length, etc. I personally tend to use this approach when I'm working with domain models that are very rich in business logic. It makes the domain model very robust, but also practically forces you to use DTOs between clients and application services since it is more or less impossible to properly bind to a UI.&lt;/p&gt;

&lt;p&gt;The second option is to use Java Bean Validation (JSR-303). Put annotations on all of the fields and make sure your application service runs the aggregate through the &lt;code&gt;Validator&lt;/code&gt; before doing anything else with it. I personally tend to use this approach when I'm working with domain models that are anemic. Even though the aggregate itself does not prevent anybody from putting it into an inconsistent state, you can safely assume that all aggregates that have either been retrieved from a repository or have passed validation are consistent.&lt;/p&gt;

&lt;p&gt;You can also combine both options by using the first option in your domain model and Java Bean Validation for your incoming DTOs or DPOs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-validation"&gt;
  &lt;/a&gt;
  Content Validation
&lt;/h3&gt;

&lt;p&gt;The simplest case of content validation is to make sure that two or more interdependent attributes within the same aggregate are valid (e.g. if one attribute is set, the other must be null and vice versa). You can either implement this directly into the entity class itself or use a class-level Java Bean Validation constraint. This type of content validation will come for free while performing format validation since it uses the same mechanisms.&lt;/p&gt;

&lt;p&gt;A more complex case of content validation would be to check that a certain value exists (or does not exist) in a lookup list somewhere. This is very much the responsibility of the application service. Before allowing any business or persistence operations to continue, the application service should perform the lookup and throw an exception if needed. This is not something you want to put into your entities since the entities are movable domain objects whereas the objects needed for the lookup are typically static (see the previous article about tactical DDD for more information about movable and static objects).&lt;/p&gt;

&lt;p&gt;The most complex case of content validation would be to verify an entire aggregate against a set of business rules. In this case, the responsibility is split between the domain model and the application service. A domain service would be responsible for performing the validation itself, but the application service would be responsible for invoking the domain service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-examples"&gt;
  &lt;/a&gt;
  Code Examples
&lt;/h3&gt;

&lt;p&gt;Here we are going to look at three different ways of handling validation. In the first case, we will look at performing format validation inside the constructor of a value object (a phone number). In the second case, we will look at an entity that has validation built-in so that it is not possible to put the object into an inconsistent state in the first place. In the third and last case, we will look at the same entity but implemented using JSR-303 validation. That makes it possible to put the object into an inconsistent state, but not to save it to the database as such.&lt;/p&gt;

&lt;p&gt;A value object with format validation could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PhoneNumber&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ValueObject&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PhoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requireNonNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"phoneNumber must not be null"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isDigit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="nc"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isWhitespace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'('&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;')'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'-'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IllegalArgument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" is not valid"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"phoneNumber must not be empty"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;phoneNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Equals and hashCode omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;First, we check that the input value is not null.&lt;/li&gt;
&lt;li&gt;We include only digits in the final phone number that we actually store. For international phone numbers, we should support a '+' sign as the first character as well, but we'll leave that as an exercise to the reader.&lt;/li&gt;
&lt;li&gt;We allow, but ignore, whitespace and certain special characters that people often use in phone numbers.&lt;/li&gt;
&lt;li&gt;Finally, when all the cleaning is done, we check that the phone number is not empty.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An entity with built-in validation could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Entity&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Fields omitted&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomerNo&lt;/span&gt; &lt;span class="n"&gt;customerNo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PostalAddress&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;setCustomerNo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerNo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;setPostalAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;setCustomerNo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomerNo&lt;/span&gt; &lt;span class="n"&gt;customerNo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;customerNo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requireNonNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerNo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"customerNo must not be null"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requireNonNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nanme&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name must not be null"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Name must be between 1 and 50 characters"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;setAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PostalAddress&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requireNonNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"address must not be null"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We invoke the setters from the constructor in order to perform the validation implemented in the setter methods. There is a small risk in invoking overridable methods from a constructor in case a subclass decides to override any of them. In this case, it would be better to mark the setter methods as final but some persistence frameworks may have a problem with that. You just have to know what you are doing.&lt;/li&gt;
&lt;li&gt;Here we check the length of a string. The lower limit is a business requirement since every customer must have a name. The upper level is a database requirement since the database, in this case, has a schema that only allows it to store strings of 50 characters. By adding the validation here already, you can avoid annoying SQL errors at a later stage when you try to insert too long strings into the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An entity with JSR-303 validation could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Entity&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@NotNull&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;CustomerNo&lt;/span&gt; &lt;span class="n"&gt;customerNo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@NotBlank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nd"&gt;@Size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@NotNull&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;PostalAddress&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Setters omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;This annotation ensures that the customer number cannot be null when the entity is saved.&lt;/li&gt;
&lt;li&gt;This annotation ensures that the name cannot be empty or null when the entity is saved.&lt;/li&gt;
&lt;li&gt;This annotation ensures that the name cannot be longer than 50 characters when the entity is saved.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#does-the-size-matter"&gt;
  &lt;/a&gt;
  Does the Size Matter?
&lt;/h2&gt;

&lt;p&gt;Before we go on to ports and adapters, there is one more thing I want to briefly mention. As with all facades, there is an ever-present risk of the application services growing into huge god classes that know too much and do too much. These types of classes are often hard to read and maintain simply because they are so large.&lt;/p&gt;

&lt;p&gt;So how do you keep the application services small? The first step is of course to split a service that is growing too big into smaller services. However, there is a risk in this as well. I have seen situations were two services where so similar that developers did not know what the difference was between them, nor which method should go into which service. The result was that service methods were scattered over two separate service classes, and sometimes even implemented twice - once in each service - but by different developers.&lt;/p&gt;

&lt;p&gt;When I design application services, I try to make them as coherent as possible. In CRUD applications, this could mean one application service per aggregate. In more domain-driven applications, this could mean one application service per business process or even separate services for specific use cases or user interface views.&lt;/p&gt;

&lt;p&gt;Naming is a very good guideline when designing application services. Try to name your application services according to what they do as opposed to which aggregates they concern. E.g. &lt;code&gt;EmployeeCrudService&lt;/code&gt; or &lt;code&gt;EmploymentContractTerminationUsecase&lt;/code&gt; are far better names than &lt;code&gt;EmployeeService&lt;/code&gt; which could mean anything. Also spend some time thinking about your naming conventions: do you really need to end all your services with the &lt;code&gt;Service&lt;/code&gt; suffix? Would it make more sense in some cases to use suffixes such as &lt;code&gt;Usecase&lt;/code&gt; or &lt;code&gt;Orchestrator&lt;/code&gt; or even leave the suffix out completely?&lt;/p&gt;

&lt;p&gt;Finally, I just want to mention command based application services. In this case, you model each application service model as a command object with a corresponding command handler. This means that every application service contains exactly one method that handles exactly one command. You can use polymorphism to create specialized commands or command handlers. This approach results in a large number of small classes and is useful especially in applications whose user interfaces are inherently command-driven or where clients interact with application services through some kind of messaging mechanism such as a message queue (MQ) or enterprise service bus (ESB).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-examples"&gt;
  &lt;/a&gt;
  Code Examples
&lt;/h3&gt;

&lt;p&gt;I'm not going to give you an example of what a God-class looks like because that would take up too much space. Besides, I think most developers who have been in the profession for a while have seen their fair share of such classes. Instead, we are going to look at an example of what a command based application service could look like. The code has not been tested and should be treated more as pseudo-code than actual Java code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;CommandHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;

    &lt;span class="no"&gt;R&lt;/span&gt; &lt;span class="nf"&gt;handleCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CommandGateway&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;

    &lt;span class="c1"&gt;// Fields omitted&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt; &lt;span class="nf"&gt;handleCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;commandHandlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findHandlerFor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseThrow&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;IllegalStateException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No command handler found"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;handleCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateCustomerCommand&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;PostalAddress&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;PhoneNumber&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Constructor and getters omitted&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateCustomerCommandHandler&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CommandHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreateCustomerCommand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;5&amp;gt;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="nd"&gt;@Transactional&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="nf"&gt;handleCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateCustomerCommand&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAddress&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPhone&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPhone&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEmail&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEmail&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;customerRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;Command&lt;/code&gt; interface is just a marker interface that also indicates the result (output) of the command. If the command has no output, the result can be &lt;code&gt;Void&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CommandHandler&lt;/code&gt; interface is implemented by a class that knows how to handle (perform) a particular command and return the result.&lt;/li&gt;
&lt;li&gt;Clients interact with a &lt;code&gt;CommandGateway&lt;/code&gt; to avoid having to lookup individual command handlers. The gateway knows about all available command handlers and how to find the correct one based on any given command. The code for looking up handlers is not included in the example since it depends on the underlying mechanism for registering handlers.&lt;/li&gt;
&lt;li&gt;Every command implements the &lt;code&gt;Command&lt;/code&gt; interface and includes all the necessary information to perform the command. I like to make my commands immutable with built-in validation, but you can also make them mutable and use JSR-303 validation. You can even leave your commands as interfaces and let the clients implement them themselves for maximum flexibility.&lt;/li&gt;
&lt;li&gt;Every command has its own handler that performs the command and returns the result.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#hexagonal-vs-entitycontrolboundary"&gt;
  &lt;/a&gt;
  Hexagonal vs. Entity-Control-Boundary
&lt;/h2&gt;

&lt;p&gt;If you have heard of the &lt;em&gt;Entity-Control-Boundary&lt;/em&gt; pattern before, you will find the hexagonal architecture familiar. You can think of your aggregates as &lt;em&gt;entities&lt;/em&gt;, domain services, factories and repositories as &lt;em&gt;controllers&lt;/em&gt; and the application services as &lt;em&gt;boundaries&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ports-and-adapters"&gt;
  &lt;/a&gt;
  Ports and Adapters
&lt;/h1&gt;

&lt;p&gt;So far we have discussed the domain model and the application services that surround and interact with it. However, these application services are completely useless if there is no way for clients to invoke them and that is where ports and adapters enter the picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-port"&gt;
  &lt;/a&gt;
  What is a Port?
&lt;/h2&gt;

&lt;p&gt;A port is an interface between the system and the outside world that has been designed for a particular purpose or protocol. Ports are not only used to allow outside clients to access the system but also to allow the system to access external systems.&lt;/p&gt;

&lt;p&gt;Now, it is easy to start thinking of the ports as network ports and the protocols as network protocols such as HTTP. I made this mistake myself and in fact Vernon does that too in at least one example in his book. However, if you look closer at the &lt;a href="https://alistair.cockburn.us/hexagonal-architecture/"&gt;article&lt;/a&gt; by &lt;em&gt;Alistair Cockburn&lt;/em&gt;, that Vernon refers to, you will find that this is not the case. It is, in fact, far more interesting than that.&lt;/p&gt;

&lt;p&gt;A port is a technology agnostic application programming interface (API) that has been designed for a particular type of interaction with the application (hence the word "protocol"). How you define this protocol is completely up to you and that is what makes this approach exciting. Here are a few examples of different ports you may have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A port used by your application to access a database&lt;/li&gt;
&lt;li&gt;A port used by your application to send out messages such as e-mails or text messages&lt;/li&gt;
&lt;li&gt;A port used by human users to access your application&lt;/li&gt;
&lt;li&gt;A port used by other systems to access your application&lt;/li&gt;
&lt;li&gt;A port used by a particular user group to access your application&lt;/li&gt;
&lt;li&gt;A port exposing a particular use case&lt;/li&gt;
&lt;li&gt;A port designed for polling clients&lt;/li&gt;
&lt;li&gt;A port designed for subscribing clients&lt;/li&gt;
&lt;li&gt;A port designed for synchronous communication&lt;/li&gt;
&lt;li&gt;A port designed for asynchronous communication&lt;/li&gt;
&lt;li&gt;A port designed for a particular type of device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list is by no means exhaustive and I'm sure you can come up with many more examples yourself. You can also combine these types. For example, you could have a port that allows administrators to manage users using a client that uses asynchronous communication. You can add as many ports to the system as you want or need, without affecting the other ports or the domain model.&lt;/p&gt;

&lt;p&gt;Let's have a look at the hexagonal architecture diagram again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43uphorj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33ru7jmqzice8bfsq8of.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43uphorj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33ru7jmqzice8bfsq8of.png" alt="The hexagonal architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each &lt;em&gt;side&lt;/em&gt; of the inner hexagonal represents a port. This is the reason for why this architecture is often depicted like this: you get six sides out-of-the-box that you can use for different ports and plenty of room to draw in as many adapters as you need. But what is an adapter?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-adapter"&gt;
  &lt;/a&gt;
  What is an Adapter?
&lt;/h2&gt;

&lt;p&gt;I already mentioned that ports are technology agnostic. Still, you interact with the system through some technology - a web browser, a mobile device, a dedicated hardware device, a desktop client, and so on. This is where adapters come in.&lt;/p&gt;

&lt;p&gt;An adapter allows interaction through a particular port, using a particular technology. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A REST adapter allows REST clients to interact with the system through some port&lt;/li&gt;
&lt;li&gt;A RabbitMQ adpter allows RabbitMQ clients to interact with the system through some port&lt;/li&gt;
&lt;li&gt;An SQL adapter allows the system to interact with a database through some port&lt;/li&gt;
&lt;li&gt;A Vaadin adapter allows human users to interact with the system through some port&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can have multiple adapters for a single port or even a single adapter for multiple ports. You can add as many adapters to the system as you want or need, without affecting the other adapters, the ports or the domain model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ports-and-adapters-in-code"&gt;
  &lt;/a&gt;
  Ports and Adapters in Code
&lt;/h2&gt;

&lt;p&gt;By now, you should have some idea of what a port and what an adapter is on a conceptual level. But how do you transform these concepts into code? Let's have a look!&lt;/p&gt;

&lt;p&gt;Ports will in most cases materialize themselves as interfaces in your code. For ports that allow outside system to access your application, these interfaces are your application service interfaces:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7EwqYEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3kf48iipm36olh4zlyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7EwqYEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3kf48iipm36olh4zlyw.png" alt="An adapter using a port interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The implementation of your interface resides inside your application service layer and the adapters use the service through its interface only. This is very much in line with the classical layered architecture where the adapter is just another client that uses your application layer. The main difference is that the concept of ports helps you to design better application interfaces since you actually have to think about what the clients of your interfaces will be and acknowledge that different clients may need different interfaces instead of going for a one-size-fits-all approach.&lt;/p&gt;

&lt;p&gt;Things get more interesting when we look at a port that allows your application to access an external system through some adapter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3nFKZHtU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw123ku3cxuz2y8migoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3nFKZHtU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw123ku3cxuz2y8migoo.png" alt="An adapter implementing a port interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, it is the adapter that implements the interface. The application service then interacts with the adapter through this interface. The interface itself either lives in your application service layer (such as a factory interface) or in your domain model (such as a repository interface). This approach would not have been permitted in the traditional layered architecture as the interface would be declared in an upper layer (the "application layer" or the "domain layer"), but implemented in a lower layer (the "infrastructure layer").&lt;/p&gt;

&lt;p&gt;Please note that in both these approaches, the dependency arrows point toward the interface. The application always remains decoupled from the adapter, and the adapter always remains decoupled from the implementation of the application.&lt;/p&gt;

&lt;p&gt;To make this even more concrete, let's look at some code examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-a-rest-api"&gt;
  &lt;/a&gt;
  Example 1: A REST API
&lt;/h3&gt;

&lt;p&gt;In the first example we are going to create a REST API for our Java application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y5bl-rBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8a9sd4607z0b6ziutkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5bl-rBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8a9sd4607z0b6ziutkj.png" alt="A REST adapter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The port is some application service that is suitable to be exposed through REST. The REST controller acts as the adapter. Naturally we are using a framework such as Spring or JAX-RS that provides both the servlet and mapping between POJOs (Plain Old Java Objects) and XML/JSON out-of-the-box. We only have to implement the REST controller which will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take either raw XML/JSON or deserialized POJOs as input,&lt;/li&gt;
&lt;li&gt;Invoke the application services, &lt;/li&gt;
&lt;li&gt;Construct a response as either raw XML/JSON or as a POJO that will be serialized by the framework, and&lt;/li&gt;
&lt;li&gt;Return the response to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The clients, regardless of whether they are client-side web applications running in a browser or other systems running on their own servers, are not a part of this particular hexagonal system. The system also does not have to care about who the clients are as long as they conform to the protocol and technology that the port and adapter supports.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-a-serverside-vaadin-ui"&gt;
  &lt;/a&gt;
  Example 2: A Server-Side Vaadin UI
&lt;/h3&gt;

&lt;p&gt;In the second example, we are going to look at a different type of adapter, namely a server-side Vaadin UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7JrvzPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upatzaq1j0vfjk87e0md.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7JrvzPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upatzaq1j0vfjk87e0md.png" alt="A Vaadin adapter and HTTP port"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The port is some application service that is suitable to be exposed through a web UI. The adapter is the Vaadin UI that translates incoming user actions into application service method calls and the output into HTML that can be rendered in the browser. Thinking of the user interface as just another adapter is an excellent way of keeping business logic outside of the user interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-communicating-with-a-relational-database"&gt;
  &lt;/a&gt;
  Example 3: Communicating with a Relational Database
&lt;/h3&gt;

&lt;p&gt;In the third example, we are going to turn things around and look at an adapter that allows our system to call out to an external system, more specifically a relational database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---J_rOwkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aka7k2vvdmb27rni97d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---J_rOwkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aka7k2vvdmb27rni97d.png" alt="A repository adapter and JDBC port"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, because we are using Spring Data, the port is a repository interface from the domain model (if we didn't use Spring Data, the port would probably be some kind of database gateway interface that provides access to repository implementations, transaction management and so on).&lt;/p&gt;

&lt;p&gt;The adapter is Spring Data JPA so we don't actually need to write it ourselves, only set it up correctly. It will automatically implement the interface using proxies when the application starts. The Spring container will take care of injecting the proxy into the application service that uses it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-4-communicating-with-an-external-system-over-rest"&gt;
  &lt;/a&gt;
  Example 4: Communicating with an External System over REST
&lt;/h3&gt;

&lt;p&gt;In the fourth and last example, we are going to look at an adapter that allows our system to call out to an external system over REST:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCp609qQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsylv2tw4cy31jw7ml7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCp609qQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsylv2tw4cy31jw7ml7h.png" alt="A REST client adapter and HTTP port"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the application service has a need to reach out to the external system, it has declared an interface that it wants to use for this. You can think of this as the first part of an anti-corruption layer (go back and read the article about strategic DDD if you need a refresher on what that is).&lt;/p&gt;

&lt;p&gt;The adapter then implements this interface, forming the second part of the anti-corruption layer. Like in the previous example, the adapter is injected into the application service using some kind of dependency injection such as Spring. It then uses some internal HTTP client to make calls to the external system and translates the received responses into domain objects as dictated by the integration interface.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#multiple-bounded-contexts"&gt;
  &lt;/a&gt;
  Multiple Bounded Contexts
&lt;/h1&gt;

&lt;p&gt;So far we have only looked at what the hexagonal architecture looks like when applied to a single bounded context. But what happens when you have multiple bounded contexts that need to communicate with each other?&lt;/p&gt;

&lt;p&gt;If the contexts are running on separate systems and communicating over a network, you can do something like this: Create a REST server adapter for the upstream system and a REST client adapter for the downstream system:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mzRLXIed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afwn4tzd6gkboottexi6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzRLXIed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afwn4tzd6gkboottexi6.png" alt="Two bounded contexts running on separate nodes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mapping between the different contexts would take place in the downstream system's adapter.&lt;/p&gt;

&lt;p&gt;If the contexts are running as modules inside a single monolithic system, you can still use a similar architecture but you only need a single adapter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_DqRJ9WG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6et81k7x6ovxngqp2gmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_DqRJ9WG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6et81k7x6ovxngqp2gmi.png" alt="Two bounded contexts inside the same monolith"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since both contexts are running inside the same virtual machine, we only need one adapter that interacts with both contexts directly. The adapter implements the port interface of the downstream context and invokes the port of the upstream context. Any context mapping takes place inside the adapter.&lt;/p&gt;

</description>
      <category>domaindrivendesign</category>
      <category>ddd</category>
      <category>hexagonal</category>
      <category>portsandadapters</category>
    </item>
    <item>
      <title>How to get your first job as a Software Engineer</title>
      <author>Jordi Enric</author>
      <pubDate>Fri, 23 Apr 2021 13:44:52 +0000</pubDate>
      <link>https://dev.to/jordienr/how-to-get-your-first-job-as-a-software-engineer-2bcj</link>
      <guid>https://dev.to/jordienr/how-to-get-your-first-job-as-a-software-engineer-2bcj</guid>
      <description>&lt;p&gt;If you believe you have the skills to become a junior software engineer and have started applying to jobs let me help you out.&lt;/p&gt;

&lt;p&gt;First understand that getting the first job, specially if you don't have a degree, will probably be the hardest part of your career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resume"&gt;
  &lt;/a&gt;
  Resume
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One page.&lt;/li&gt;
&lt;li&gt;Includes the technologies you're comfortable working with, frameworks too.&lt;/li&gt;
&lt;li&gt;Includes relevant experience to the role you're applying for.&lt;/li&gt;
&lt;li&gt;Includes relevant education.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're self-taught include the list of resources you used to learn. &lt;/p&gt;

&lt;p&gt;If you don't have any real experience add some personal projects with links to the project, technologies used, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  Tips
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don't use skill bars or % to represent your skill level (Ex: 65% JavaScript). If you're comfortable using a technology add it, otherwise don't. No one expects you to be an expert.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't make it too colorful or graphic, it will make you look more professional. Keep those things for your personal website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make it easy to scan&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use headings for each section&lt;/li&gt;
&lt;li&gt;Use lists&lt;/li&gt;
&lt;li&gt;Make short paragraphs&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kinda like I do in this article ü§†&lt;/p&gt;

&lt;p&gt;This document will help you get past the first filters which will probably be recruiters that are not experts about technology. They will have a list of job offers and will check this document to see if you fit any. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pro Tip:&lt;/p&gt;

&lt;p&gt;Google Junior Software Engineer CVs and check examples online, copy their designs and structure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#personal-website-amp-portfolio"&gt;
  &lt;/a&gt;
  Personal Website &amp;amp; Portfolio
&lt;/h2&gt;

&lt;p&gt;I recommend you create some content like blog posts about the things you learn. This will look good to recruiters and companies and will also help you solidify the things you're learning.&lt;/p&gt;

&lt;p&gt;Being able to explain things clearly in a document is a really valuable skill for most businesses. You can practice that by writing on your blog. You can then share it here in dev.to.&lt;/p&gt;

&lt;p&gt;Sections you could have in your website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blog&lt;/li&gt;
&lt;li&gt;About me

&lt;ul&gt;
&lt;li&gt;Who are you&lt;/li&gt;
&lt;li&gt;What do you do&lt;/li&gt;
&lt;li&gt;How did you learn the things you know&lt;/li&gt;
&lt;li&gt;What are your hobbies other than programming&lt;/li&gt;
&lt;li&gt;Picture of you, try to look happy&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Contact

&lt;ul&gt;
&lt;li&gt;Email &amp;amp; LinkedIn&lt;/li&gt;
&lt;li&gt;How long do you usually take to respond&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;Things you've made&lt;/li&gt;
&lt;li&gt;Pictures of what you've made&lt;/li&gt;
&lt;li&gt;Links to what you've made&lt;/li&gt;
&lt;li&gt;Why did you make them&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Somewhat Pro Tip:&lt;br&gt;
You can create a static site, completely free with Github Pages, Netilfy or Vercel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#linkedin"&gt;
  &lt;/a&gt;
  LinkedIn
&lt;/h2&gt;

&lt;p&gt;This one is important. Many Software Developers like shitting on LinkedIn. I don't particularly love it, but I find it really useful to network, keep in touch with old colleagues, find job opportunities, etc.&lt;/p&gt;

&lt;p&gt;I got my last 2 jobs thought LinkedIn chats. Not even applying to jobs. Just connecting with people and talking.&lt;/p&gt;

&lt;p&gt;Here's what you should do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Complete your LinkedIn profile.&lt;br&gt;
If you have a Resume and Personal website this will be mostly copying and pasting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a picture, make sure your face is covering at least 60% of the space, has good lighting, you don't look like a serial killer, you're the only one in the picture, try to look happy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search "recruiter" + city you want to work at.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect with some of them. Try to send notes saying something like: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;'Hello NAME, I'm actively looking for jobs in the X industry and would like to connect with you. Have a good day!'&lt;/p&gt;

&lt;p&gt;Other searches you can do are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IT / TECH Headhunter (Yeah this is a thing)&lt;/li&gt;
&lt;li&gt;HR &lt;/li&gt;
&lt;li&gt;Talent Acquisition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now connect with other developers like you, in my experience most developers will accept if they see clearly that you're a developer. &lt;/p&gt;

&lt;p&gt;Build your network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-to-job-offers"&gt;
  &lt;/a&gt;
  Applying to job offers
&lt;/h2&gt;

&lt;p&gt;Now here LinkedIn has something that other job-boards don't. You can see who posted it, connect and message them.&lt;/p&gt;

&lt;p&gt;When you see an offer you could fit in. Connect with whoever posted it. Talk to them, share that you're interested and you think you could be a good fit.&lt;/p&gt;

&lt;p&gt;This usually works because you're doing the recruiter/poster job for them. Every job offer is different than the others, so recruiters have a hard time finding developers that fit their offers. &lt;em&gt;You want to help recruiters help you&lt;/em&gt;, recruiters are your friends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-nice-to-recruiters"&gt;
  &lt;/a&gt;
  Be nice to recruiters
&lt;/h2&gt;

&lt;p&gt;They are not Software Development experts, they don't have to be, that's your job not theirs. If a recruiter contacts you with an offer that doesn't fit your profile say thanks and decline. They are trying to help people find jobs, don't be an ass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-for-feedback-to-recruiters"&gt;
  &lt;/a&gt;
  Ask for feedback to recruiters
&lt;/h2&gt;

&lt;p&gt;They know what works and what kind of profile companies are looking for. They can help you tailor your resume. They can give you info on salary in case you have to discuss that on the interview. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hang-on"&gt;
  &lt;/a&gt;
  Hang on
&lt;/h2&gt;

&lt;p&gt;As I said, getting your first job is probably the hardest part. If you don't have experience going to interviews and some of them go wrong don't worry too much about it. Treat interviews as learning experiences specially at the beginning. Always be nice and ask for feedback.  &lt;/p&gt;

&lt;p&gt;You will probably go to 100s of interviews throughout your career so some of them will go wrong, it doesn't matter. Try to learn and improve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-resources"&gt;
  &lt;/a&gt;
  Free resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://capd.mit.edu/jobs-and-internships/resumes-cvs-cover-letters-and-linkedin"&gt;https://capd.mit.edu/jobs-and-internships/resumes-cvs-cover-letters-and-linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.imperial.ac.uk/careers/applications-and-interviews/cv/"&gt;https://www.imperial.ac.uk/careers/applications-and-interviews/cv/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-twitter-for-more"&gt;
  &lt;/a&gt;
  Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; for more.
&lt;/h2&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>üöÄ10 Trending projects on GitHub for web developers - 23rd April 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 23 Apr 2021 13:43:44 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-23rd-april-2021-4g02</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-23rd-april-2021-4g02</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-gittips"&gt;
  &lt;/a&gt;
  1. git-tips
&lt;/h3&gt;

&lt;p&gt;Most commonly used git tips and tricks.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/git-tips"&gt;
        git-tips
      &lt;/a&gt; / &lt;a href="https://github.com/git-tips/tips"&gt;
        tips
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Most commonly used git tips and tricks.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
git-tips&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Collection of &lt;code&gt;git-tips&lt;/code&gt;, want to add your tips? Checkout &lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/./contributing.md"&gt;contributing.md&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://git.io/git-tips" rel="nofollow"&gt;English&lt;/a&gt; | &lt;a href="https://github.com/521xueweihan/git-tips"&gt;‰∏≠Êñá&lt;/a&gt; | &lt;a href="https://github.com/Imangazaliev/git-tips"&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt; | &lt;a href="https://github.com/mingrammer/git-tips"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt; | &lt;a href="https://github.com/hprobotic/git-tips"&gt;Ti·∫øng Vi·ªát&lt;/a&gt; | &lt;a href="https://github.com/isotai/git-tips"&gt;Êó•Êú¨Ë™û&lt;/a&gt; | &lt;a href="https://github.com/amarduwal/git-tips"&gt;‡§®‡•á‡§™‡§æ‡§≤‡•Ä&lt;/a&gt; | &lt;a href="https://github.com/mbiesiad/tips"&gt;Polski&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;strong&gt;Tools:&lt;/strong&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/git-tip" rel="nofollow"&gt;git-tip&lt;/a&gt; - A handy CLI to make optimum use of these tips. (&lt;a href="https://github.com/djoudi5/docker-git-tip"&gt;Here in Docker container&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S: All these commands are tested on &lt;code&gt;git version 2.7.4 (Apple Git-66)&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#everyday-git-in-twenty-commands-or-so"&gt;Everyday Git in twenty commands or so&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#show-helpful-guides-that-come-with-git"&gt;Show helpful guides that come with Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#search-change-by-content"&gt;Search change by content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#show-changes-over-time-for-specific-file"&gt;Show changes over time for specific file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#remove-sensitive-data-from-history-after-a-push"&gt;Remove sensitive data from history, after a push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#sync-with-remote-overwrite-local-changes"&gt;Sync with remote, overwrite local changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#list-of-all-files-till-a-commit"&gt;List of all files till a commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#git-reset-first-commit"&gt;Git reset first commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#reset-preserve-uncommitted-local-changes"&gt;Reset: preserve uncommitted local changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#list-all-the-conflicted-files"&gt;List all the conflicted files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#list-of-all-files-changed-in-a-commit"&gt;List of all files changed in a commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#unstaged-changes-since-last-commit"&gt;Unstaged changes since last commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#changes-staged-for-commit"&gt;Changes staged for commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#show-both-staged-and-unstaged-changes"&gt;Show both staged and unstaged changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/git-tips/tips/master/#list-all-branches-that-are-already-merged-into-master"&gt;List all branches that are already merged&lt;/a&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/git-tips/tips"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-pkg"&gt;
  &lt;/a&gt;
  2. Pkg
&lt;/h3&gt;

&lt;p&gt;This command line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vercel"&gt;
        vercel
      &lt;/a&gt; / &lt;a href="https://github.com/vercel/pkg"&gt;
        pkg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Package your Node.js project into an executable
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer: &lt;code&gt;pkg&lt;/code&gt; was created for use within containers and is not intended for use in serverless environments. For those using Vercel, this means that there is no requirement to use &lt;code&gt;pkg&lt;/code&gt; in your projects as the benefits it provides are not applicable to the platform.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/355811f40937ffc26fe79b9dacfe6435760e3cec7d9fa14fdb82cdbce6523de2/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f7a6569742d696e632f696d6167652f75706c6f61642f76313530393933363738392f7265706f7369746f726965732f706b672f706b672d7265706f2d62616e6e65722d6e65772e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/355811f40937ffc26fe79b9dacfe6435760e3cec7d9fa14fdb82cdbce6523de2/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f7a6569742d696e632f696d6167652f75706c6f61642f76313530393933363738392f7265706f7369746f726965732f706b672f706b672d7265706f2d62616e6e65722d6e65772e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/vercel/pkg/actions/workflows/ci.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5J6DNS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vercel/pkg/actions/workflows/ci.yml/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/vercel/pkg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7924411dfd4f316d99e3c59993729763e9bcc9033b83fda0530a9e62be7abb17/68747470733a2f2f64617669642d646d2e6f72672f76657263656c2f706b672f7374617475732e737667" alt="Dependency Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/vercel/pkg?type=dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d197790920b274c4d72405bbda78ca80d260f34d2082e5e96b4951b896d0ed98/68747470733a2f2f64617669642d646d2e6f72672f76657263656c2f706b672f6465762d7374617475732e737667" alt="devDependency Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This command line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.&lt;/p&gt;
&lt;h2&gt;
Use Cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make a commercial version of your application without sources&lt;/li&gt;
&lt;li&gt;Make a demo/evaluation/trial version of your app without sources&lt;/li&gt;
&lt;li&gt;Instantly make executables for other platforms (cross-compilation)&lt;/li&gt;
&lt;li&gt;Make some kind of self-extracting archive or installer&lt;/li&gt;
&lt;li&gt;No need to install Node.js and npm to run the packaged application&lt;/li&gt;
&lt;li&gt;No need to download hundreds of files via &lt;code&gt;npm install&lt;/code&gt; to deploy
your application. Deploy it as a single file&lt;/li&gt;
&lt;li&gt;Put your assets inside the executable to make it even more portable&lt;/li&gt;
&lt;li&gt;Test your‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/vercel/pkg"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-react-amp-redux-in-typescript-complete-guide"&gt;
  &lt;/a&gt;
  3. React &amp;amp; Redux in TypeScript - Complete Guide
&lt;/h3&gt;

&lt;p&gt;The complete guide to static typing in "React &amp;amp; Redux" apps using TypeScript&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/piotrwitek"&gt;
        piotrwitek
      &lt;/a&gt; / &lt;a href="https://github.com/piotrwitek/react-redux-typescript-guide"&gt;
        react-redux-typescript-guide
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The complete guide to static typing in "React &amp;amp; Redux" apps using TypeScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;h1&gt;
React &amp;amp; Redux in TypeScript - Complete Guide&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;"This guide is a &lt;strong&gt;living compendium&lt;/strong&gt; documenting the most important patterns and recipes on how to use &lt;strong&gt;React&lt;/strong&gt; (and its Ecosystem) in a &lt;strong&gt;functional style&lt;/strong&gt; using &lt;strong&gt;TypeScript&lt;/strong&gt;. It will help you make your code &lt;strong&gt;completely type-safe&lt;/strong&gt; while focusing on &lt;strong&gt;inferring the types from implementation&lt;/strong&gt; so there is less noise coming from excessive type annotations and it's easier to write and maintain correct types in the long run."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spectrum.chat/react-redux-ts" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3aaae7abc6655c1485b607bd83b732aec0d7316f84511c9c7471c4641d4679f2/68747470733a2f2f77697468737065637472756d2e6769746875622e696f2f62616467652f62616467652e737667" alt="Join the community on Spectrum"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/react-redux-typescript-guide/Lobby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/react-redux-typescript-guide/Lobby"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Found it useful? Want more updates?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/piotrwitek/react-redux-typescript-guide/stargazers"&gt;&lt;strong&gt;Show your support by giving a ‚≠ê&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://www.buymeacoffee.com/piotrekwitek" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/c3f856bacd5b09669157ed4774f80fb9d8622dd45ce8fdf2990d3552db99bd27/68747470733a2f2f7777772e6275796d6561636f666665652e636f6d2f6173736574732f696d672f637573746f6d5f696d616765732f6f72616e67655f696d672e706e67" alt="Buy Me a Coffee"&gt;
&lt;/a&gt;
&lt;a href="https://www.patreon.com/piotrekwitek" rel="nofollow"&gt;
  &lt;img src="https://camo.githubusercontent.com/ca317983c1ee436cd8c1157c5d2769c641372ee441af705dc0a32e3654fcbc9f/68747470733a2f2f63352e70617472656f6e2e636f6d2f65787465726e616c2f6c6f676f2f6265636f6d655f615f706174726f6e5f627574746f6e4032782e706e67" alt="Become a Patron" width="160"&gt;
&lt;/a&gt;


&lt;h3&gt;
&lt;strong&gt;What's new?&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;üéâ &lt;em&gt;Now updated to support &lt;strong&gt;TypeScript v3.7&lt;/strong&gt;&lt;/em&gt; üéâ
üöÄ _Updated to &lt;code&gt;typesafe-actions@5.x.x&lt;/code&gt; üöÄ&lt;/p&gt;

&lt;br&gt;
&lt;/div&gt;
&lt;h3&gt;
&lt;strong&gt;Goals&lt;/strong&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete type safety (with &lt;a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" rel="nofollow"&gt;&lt;code&gt;--strict&lt;/code&gt;&lt;/a&gt; flag) without losing type information downstream through all the layers of our application (e.g. no type assertions or hacking with &lt;code&gt;any&lt;/code&gt; type)&lt;/li&gt;
&lt;li&gt;Make type annotations concise by eliminating redundancy in types using advanced TypeScript Language features like &lt;strong&gt;Type Inference&lt;/strong&gt; and‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/piotrwitek/react-redux-typescript-guide"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-react-kawaii"&gt;
  &lt;/a&gt;
  4. React Kawaii
&lt;/h3&gt;

&lt;p&gt;React Kawaii is a library of cute SVG illustrations (react components). Ideal if you want to give some cuteness and personality to your react application.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/miukimiu"&gt;
        miukimiu
      &lt;/a&gt; / &lt;a href="https://github.com/miukimiu/react-kawaii"&gt;
        react-kawaii
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Cute SVG React Components
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React Kawaii&lt;/h1&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/miukimiu/react-kawaii/master/docs/images/react-kawaii-logo%402x.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0pTtbDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/miukimiu/react-kawaii/master/docs/images/react-kawaii-logo%25402x.png" width="450"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;React Kawaii is a library of cute SVG illustrations (react components). Ideal if you want to give some cuteness and personality to your react application.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-kawaii" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3b81ec5a0bbb0f0cb0725d18f260fe9db5022e1af180990363670a1b47e849a9/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d6b61776169692e7376673f7374796c653d666c61742d737175617265" alt="Version"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/5e4e557088cff130407fab39d62313ac6c645fbd47345bc6f51b1eaf0e1f574b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f72656163742d6b61776169692e737667"&gt;&lt;img src="https://camo.githubusercontent.com/5e4e557088cff130407fab39d62313ac6c645fbd47345bc6f51b1eaf0e1f574b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f72656163742d6b61776169692e737667" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/miukimiu/react-kawaii/blob/master/docs/images/react-kawaii-example.gif?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLgUb-0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/miukimiu/react-kawaii/raw/master/docs/images/react-kawaii-example.gif%3Fraw%3Dtrue" alt="React Kawaii Example"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;With npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm install --save react-kawaii&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;With yarn:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn add react-kawaii&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
How to use&lt;/h3&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Planet&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react-kawaii'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;Example&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Planet&lt;/span&gt; &lt;span class="pl-c1"&gt;size&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-c1"&gt;200&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;mood&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;"blissful"&lt;/span&gt; &lt;span class="pl-c1"&gt;color&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;"#FDA7DC"&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
How to use with React Native&lt;/h3&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Planet&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react-kawaii/lib/native/'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;Example&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Planet&lt;/span&gt; &lt;span class="pl-c1"&gt;size&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-c1"&gt;200&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;mood&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;"blissful"&lt;/span&gt; &lt;span class="pl-c1"&gt;color&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;"#FDA7DC"&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Depending on your &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-native&lt;/code&gt; version, you might need to to install the package
&lt;a href="https://github.com/react-native-community/react-native-svg"&gt;react-native-svg&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;With npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm install react-native-svg&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;With yarn:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn add react-native-svg&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Link react-native:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;react-native link react-native-svg&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Read the react-native-svg &lt;a href="https://github.com/react-native-community/react-native-svg"&gt;documentation&lt;/a&gt; in case you need help.&lt;/p&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;p&gt;So‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/miukimiu/react-kawaii"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-reacttextareaautosize"&gt;
  &lt;/a&gt;
  5. react-textarea-autosize
&lt;/h3&gt;

&lt;p&gt;Drop-in replacement for the textarea component which automatically resizes textarea as content changes. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Andarist"&gt;
        Andarist
      &lt;/a&gt; / &lt;a href="https://github.com/Andarist/react-textarea-autosize"&gt;
        react-textarea-autosize
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      &amp;lt;textarea /&amp;gt; component for React which grows with content
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-textarea-autosize" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/738e7fb825040d30fb1d6da6a70a21202ae9d5dfd70202811b158a365d47c273/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d74657874617265612d6175746f73697a652e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/react-textarea-autosize" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0a0ceefe8991b0a83ac0c73c00e373e90e91ecaa5b361e7e109fbd40a305f627/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f72656163742d74657874617265612d6175746f73697a652e737667" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
react-textarea-autosize&lt;/h1&gt;
&lt;p&gt;Drop-in replacement for the textarea component which automatically resizes
textarea as content changes. A native React version of the popular
&lt;a href="http://www.jacklmoore.com/autosize/" rel="nofollow"&gt;jQuery Autosize&lt;/a&gt;! Weighs
around &lt;span&gt;1.3KB&lt;/span&gt; (minified &amp;amp; gzipped).&lt;/p&gt;
&lt;p&gt;This module supports IE9 and above.&lt;/p&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;TextareaAutosize&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react-textarea-autosize'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// If you use CommonJS syntax:&lt;/span&gt;
&lt;span class="pl-c"&gt;// var TextareaAutosize = require('react-textarea-autosize').default;&lt;/span&gt;
&lt;span class="pl-v"&gt;React&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;renderComponent&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;div&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;TextareaAutosize&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;div&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-smi"&gt;document&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;getElementById&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'element'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;npm install react-textarea-autosize&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://andarist.github.io/react-textarea-autosize/" rel="nofollow"&gt;https://andarist.github.io/react-textarea-autosize/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Props&lt;/h2&gt;
&lt;h3&gt;
Special props:&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;prop&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;maxRows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Maximum number of rows up to which the textarea can grow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minRows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Minimum number of rows to show for textarea&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;onHeightChange&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Function invoked on textarea height change, with height as first argument. The second function argument is an object containing additional information that might be useful for custom behaviors. Current options include &lt;code&gt;{ rowHeight: number }&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Andarist/react-textarea-autosize"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-js-image-carver"&gt;
  &lt;/a&gt;
  6. JS Image Carver
&lt;/h3&gt;

&lt;p&gt;Content-aware image resizer based on Seam Carving algorithm&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trekhleb"&gt;
        trekhleb
      &lt;/a&gt; / &lt;a href="https://github.com/trekhleb/js-image-carver"&gt;
        js-image-carver
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üåÖ Content-aware image resizer and object remover based on Seam Carving algorithm
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
JS IMAGE CARVER&lt;/h1&gt;
&lt;p&gt;Content-aware image resizer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
‚ñ∂Ô∏è &lt;a href="https://trekhleb.dev/js-image-carver/" rel="nofollow"&gt;Ô∏èDemo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
‚úèÔ∏è &lt;a href="https://trekhleb.dev/blog/2021/content-aware-image-resizing-in-javascript/" rel="nofollow"&gt;How it works&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üìÑ &lt;a href="https://perso.crans.org/frenoy/matlab2012/seamcarving.pdf" rel="nofollow"&gt;Seam carving paper&lt;/a&gt; by &lt;em&gt;Shai Avidan&lt;/em&gt; and &lt;em&gt;Ariel Shamir&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/trekhleb/js-image-carver/main/public/site-meta-image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OQPJhUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/trekhleb/js-image-carver/main/public/site-meta-image.png" alt="JS IMAGE CARVER"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Background image by &lt;a href="https://unsplash.com/@sadswim?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" rel="nofollow"&gt;Ian Dooley&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Content-aware image resizing&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Content-aware image resizing&lt;/em&gt; might be applied when it comes to changing the image proportions (i.e. reducing the width while keeping the height) and when losing some parts of the image is not desirable. Doing the straightforward image scaling in this case would distort the objects in it. To preserve the proportions of the object while changing the image proportions we may use the &lt;a href="https://perso.crans.org/frenoy/matlab2012/seamcarving.pdf" rel="nofollow"&gt;Seam Carving algorithm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the example below, you may see how the original image width was reduced by 50% using content-aware resizing (left image) and straightforward scaling (right image). In this particular case, the left image looks more natural since the proportions of the balloons were preserved.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/trekhleb/js-image-carver/main/public/demo-00-02.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8mbQ6Fw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/trekhleb/js-image-carver/main/public/demo-00-02.png" alt="Content-aware image resizing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Seam Carving algorithm‚Äôs idea is to find the‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trekhleb/js-image-carver"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-awesome-deno"&gt;
  &lt;/a&gt;
  7. Awesome Deno
&lt;/h3&gt;

&lt;p&gt;Curated list of awesome things related to Deno&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/denolib"&gt;
        denolib
      &lt;/a&gt; / &lt;a href="https://github.com/denolib/awesome-deno"&gt;
        awesome-deno
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Curated list of awesome things related to Deno
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Awesome Deno &lt;a href="https://awesome.re" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64f8905651212a80869afbecbf0a9c52a5d1e70beab750dea40a994fa9a9f3c6/68747470733a2f2f617765736f6d652e72652f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://deno.land" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vcd2-8iM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/denolib/awesome-deno/main/deno-logo.png" width="100"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust.&lt;/p&gt;
&lt;p&gt;This list is a collection of the best Deno modules and resources.&lt;/p&gt;
&lt;h2&gt;
Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#docs"&gt;Docs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#official-docs"&gt;Official Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#external-docs"&gt;External Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#online-playgrounds"&gt;Online Playgrounds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#modules"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#registries"&gt;Registries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#showcases"&gt;Showcases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#articles"&gt;Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#presentations"&gt;Presentations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#resources-in-other-languages"&gt;Resources in Other Languages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#chinese"&gt;Chinese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#hebrew"&gt;Hebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#indonesian"&gt;Indonesian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#italian"&gt;Italian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#japanese"&gt;Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#korean"&gt;Korean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#russian"&gt;Russian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#spanish"&gt;Spanish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/denolib/awesome-deno/main/#uzbek"&gt;Uzbek&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Docs&lt;/h2&gt;
&lt;h3&gt;
Official Docs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://deno.land" rel="nofollow"&gt;Official Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deno.land/typedoc/" rel="nofollow"&gt;Deno API TypeDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deno.land/manual" rel="nofollow"&gt;Deno Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deno.land/x/" rel="nofollow"&gt;Deno Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
External Docs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://denolib.github.io/v8-docs/" rel="nofollow"&gt;V8 Docs for Deno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://DenoBeginner.com" rel="nofollow"&gt;DenoBeginner.com&lt;/a&gt; - A completely free crash course on deno for beginners.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Online Playgrounds&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://deno.town" rel="nofollow"&gt;deno.town&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://deno-playground.now.sh" rel="nofollow"&gt;Deno Playground&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/maman/deno-playground"&gt;maman/deno-playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://playground.denobr.com/" rel="nofollow"&gt;DenoBR Playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mycompiler.io/new/deno" rel="nofollow"&gt;myCompiler.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://repl.it/languages/deno" rel="nofollow"&gt;Repl.it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Assistants&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://t.me/denoland_bot" rel="nofollow"&gt;Telegram Bot Assistant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/genemators/lander.js"&gt;Source code of the bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Modules&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: Deno has a few official modules that could be found at &lt;a href="https://deno.land/std/" rel="nofollow"&gt;deno_std&lt;/a&gt;
Consider submitting to the &lt;a href="https://deno.land/x/" rel="nofollow"&gt;deno.land/x&lt;/a&gt; registry.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/zhmushan/abc"&gt;abc&lt;/a&gt; - A better Deno framework to create web application.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/postui/aleph.js"&gt;aleph.js&lt;/a&gt; - A React framework in Deno, inspired by‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/denolib/awesome-deno"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-howlerjs"&gt;
  &lt;/a&gt;
  8. Howler.js
&lt;/h3&gt;

&lt;p&gt;Javascript audio library for the modern web.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/goldfire"&gt;
        goldfire
      &lt;/a&gt; / &lt;a href="https://github.com/goldfire/howler.js"&gt;
        howler.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Javascript audio library for the modern web.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://howlerjs.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/46832a6f8e119d1df5586c62b1df34b68a96e427e5ae8c51ef69a8705d287a3e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f686f776c65722e6a732f686f776c65722d6c6f676f2e706e67" alt="howler.js" title="howler.js"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Description&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://howlerjs.com" rel="nofollow"&gt;howler.js&lt;/a&gt; is an audio library for the modern web. It defaults to &lt;a href="http://webaudio.github.io/web-audio-api/" rel="nofollow"&gt;Web Audio API&lt;/a&gt; and falls back to &lt;a href="https://html.spec.whatwg.org/multipage/embedded-content.html#the-audio-element" rel="nofollow"&gt;HTML5 Audio&lt;/a&gt;. This makes working with audio in JavaScript easy and reliable across all platforms.&lt;/p&gt;
&lt;p&gt;Additional information, live demos and a user showcase are available at &lt;a href="https://howlerjs.com" rel="nofollow"&gt;howlerjs.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Follow on Twitter for howler.js and development-related discussion: &lt;a href="https://twitter.com/goldfirestudios" rel="nofollow"&gt;@GoldFireStudios&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Single API for all audio needs&lt;/li&gt;
&lt;li&gt;Defaults to Web Audio API and falls back to HTML5 Audio&lt;/li&gt;
&lt;li&gt;Handles edge cases and bugs across environments&lt;/li&gt;
&lt;li&gt;Supports all codecs for full cross-browser support&lt;/li&gt;
&lt;li&gt;Automatic caching for improved performance&lt;/li&gt;
&lt;li&gt;Control sounds individually, in groups or globally&lt;/li&gt;
&lt;li&gt;Playback of multiple sounds at once&lt;/li&gt;
&lt;li&gt;Easy sound sprite definition and playback&lt;/li&gt;
&lt;li&gt;Full control for fading, rate, seek, volume, etc.&lt;/li&gt;
&lt;li&gt;Easily add 3D spatial sound or stereo panning&lt;/li&gt;
&lt;li&gt;Modular - use what you want and easy to extend&lt;/li&gt;
&lt;li&gt;No outside dependencies, just pure JavaScript&lt;/li&gt;
&lt;li&gt;As light as‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/goldfire/howler.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-partyjs"&gt;
  &lt;/a&gt;
  9. party.js
&lt;/h3&gt;

&lt;p&gt;A JavaScript library to brighten up your user's site experience with visual effects!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yiliansource"&gt;
        yiliansource
      &lt;/a&gt; / &lt;a href="https://github.com/yiliansource/party-js"&gt;
        party-js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A JavaScript library to brighten up your user's site experience with visual effects!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/yiliansource/party-js/main/.github/banner.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiGzJ2fa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/yiliansource/party-js/main/.github/banner.svg"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;
    &lt;a href="https://raw.githubusercontent.com/yiliansource/party-js/main/#installation"&gt;Installation&lt;/a&gt; ‚Ä¢
    &lt;a href="https://raw.githubusercontent.com/yiliansource/party-js/main/#usage"&gt;Usage&lt;/a&gt; ‚Ä¢
    &lt;a href="https://raw.githubusercontent.com/yiliansource/party-js/main/#contributing"&gt;Contributing&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://www.npmjs.com/package/party-js" rel="nofollow"&gt;&lt;img alt="npm" src="https://camo.githubusercontent.com/033587da2a93f8d791b940ca6844d79958d37c90e77f657ee63fa4f43f2d2d27/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f70617274792d6a733f7374796c653d666c6174"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/176322258dcc1f23376b6b5f61f44a2479f1c754a2f84c3ccf9c211488bea303/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f79696c69616e736f757263652f70617274792d6a733f7374796c653d666c6174"&gt;&lt;img alt="GitHub Repo stars" src="https://camo.githubusercontent.com/176322258dcc1f23376b6b5f61f44a2479f1c754a2f84c3ccf9c211488bea303/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f79696c69616e736f757263652f70617274792d6a733f7374796c653d666c6174"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4fabce17b091ab599fdbe029d645a1cd49d9d267456c06e3a86bcb7e4eb362e0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f79696c69616e736f757263652f70617274792d6a732f4e6f64652e6a7325323043493f7374796c653d666c6174266c6f676f3d4e6f64652e6a73"&gt;&lt;img alt="GitHub Build Status" src="https://camo.githubusercontent.com/4fabce17b091ab599fdbe029d645a1cd49d9d267456c06e3a86bcb7e4eb362e0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f79696c69616e736f757263652f70617274792d6a732f4e6f64652e6a7325323043493f7374796c653d666c6174266c6f676f3d4e6f64652e6a73"&gt;&lt;/a&gt;
    &lt;a href="https://partyjs.yiliansource.dev" rel="nofollow"&gt;&lt;img alt="GitHub Docs Status" src="https://camo.githubusercontent.com/b21d49b8d4c9e7a2c8213faefca4756e3800c8c03cb4c53faac47e89b7dc9510/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f79696c69616e736f757263652f70617274792d6a732f4465706c6f79253230646f63756d656e746174696f6e3f636f6c6f723d626c7565266c6162656c3d646f6373266c6f676f3d52656164253230746865253230446f6373266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d1d3ae1ea06db0092e552116904d1d6683a7f3ee399e55b67c9eaf959ee86e9b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f70617274792d6a733f7374796c653d666c6174"&gt;&lt;img alt="npm downloads" src="https://camo.githubusercontent.com/d1d3ae1ea06db0092e552116904d1d6683a7f3ee399e55b67c9eaf959ee86e9b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f70617274792d6a733f7374796c653d666c6174"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4db98b3bcd5be54e5120f69f2da52b12769e8bf77aefba70b628f9c108ad4d4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f79696c69616e736f757263652f70617274792d6a733f7374796c653d666c6174"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/f4db98b3bcd5be54e5120f69f2da52b12769e8bf77aefba70b628f9c108ad4d4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f79696c69616e736f757263652f70617274792d6a733f7374796c653d666c6174"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;p&gt;The library is written in TypeScript and compiled to an UMD module to allow integration into different environments.&lt;/p&gt;

&lt;h3&gt;
Browsers&lt;/h3&gt;
&lt;p&gt;You can grab the latest version from &lt;a href="https://www.jsdelivr.com/" rel="nofollow"&gt;jsdelivr&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://cdn.jsdelivr.net/npm/party-js@latest/bundle/party.min.js&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The library instance is loaded into the global &lt;code&gt;party&lt;/code&gt; object.&lt;/p&gt;
&lt;h3&gt;
Node.JS&lt;/h3&gt;
&lt;p&gt;If you are using a package-managed environment, you can also install the latest version via &lt;a href="https://www.npmjs.com/package/party-js" rel="nofollow"&gt;npm&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;npm install party-js
yarn add party-js&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To use it, simply &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; it.&lt;/p&gt;
&lt;div class="highlight highlight-source-ts js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;party&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"party-js"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;party&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"party-js"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;The library essentially offers a fully customizeable particle-system implementation into HTML documents. Users of the library have the ability to create and fine-tune effects to their individual liking. The library offers a few simple effects right out-of-the-box, so you don't have to waste time re-creating simple effects.&lt;/p&gt;
&lt;div class="highlight highlight-source-js js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-smi"&gt;document&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;querySelector&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/yiliansource/party-js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-choc-ui"&gt;
  &lt;/a&gt;
  10. Choc UI
&lt;/h3&gt;

&lt;p&gt;Prebuilt Chakra UI Higher Order Components&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/anubra266"&gt;
        anubra266
      &lt;/a&gt; / &lt;a href="https://github.com/anubra266/choc-ui"&gt;
        choc-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Prebuilt Chakra UI Higher Order Components
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://choc-ui.tech" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIVq-V36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/anubra266/choc-ui/main/./public/logo.png" width="200"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://github.com/anubra266/choc-ui/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/fd4f1036dec288301deff51b4b0797c873981a18a5e2afdc0879e783bd4f0a71/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616e756272613236362f63686f632d75692e7376673f7374796c653d666f722d7468652d6261646765" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://github.com/anubra266"&gt;&lt;img src="https://camo.githubusercontent.com/f3e94c4ae509b2bcbf7b617ac32d8364d87ebed2934894eccf4293520fbf1621/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f617574686f722d40616e756272613236362d626c75652e7376673f7374796c653d666f722d7468652d6261646765" alt="Author"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2&gt;
About Choc UI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://choc-ui.tech" rel="nofollow"&gt;&lt;strong&gt;CHOC&lt;/strong&gt;&lt;/a&gt; is &lt;em&gt;acronym&lt;/em&gt; for &lt;a href="https://chakra-ui.com" rel="nofollow"&gt;Chakra&lt;/a&gt; Higher Order Components. Choc UI is a collection of components, inspired by many sources of well used web components, which are rebuilt based on the Chakra UI library.&lt;/p&gt;
&lt;h2&gt;
Official Documentation&lt;/h2&gt;
&lt;p&gt;See it in action on &lt;a href="https://choc-ui.tech" rel="nofollow"&gt;Choc-UI's Website.&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2&gt;
Components&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Elements
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Headers&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Cards&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Alerts&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Pagination&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Badges&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Gradient Icons&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Carousels&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Empty - Antd&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Result - Antd&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Special Elements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Page Sections
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Heros&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Feature Sections&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 CTA Sections&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Pricing Sections&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Client Sections - WickedBlocks&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Content Sections&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 FAQs&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Newsletter Sections&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Stats&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Testimonials&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Blog Sections -&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Contact Sections&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Footers - Meraki UI&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Logo Clouds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Navigation - TailwindUI, Meraki UI
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Navbars&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Vertical Navigation (Menus)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Sidebar Navigation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Headings - TailwindUI
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Card Headings&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Section Headings&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Page Headings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Example Pages - Meraki UI, Kutty
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Landing Pages&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Contact Pages&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Error Pages&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Home Screens&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Detail Screens&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Settings Screens&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Forms Tailwind
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Form Layouts - Tailwind&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Sign in and Registration - WickedBlocks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Lists Tailwind
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Tables&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Stacked Lists&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Grid‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/anubra266/choc-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing üìà
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt;  +2,110 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wbkd/react-flow"&gt;React Flow&lt;/a&gt;  +1,904 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt;  +1,589 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of code&lt;/a&gt;   +1,525stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GorvGoyl/Clone-Wars"&gt;Clone Wars&lt;/a&gt;  +1,031 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/wbkd/react-flow"&gt;React Flow&lt;/a&gt;  +61%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arnelenero/simpler-state"&gt;Simpler State&lt;/a&gt;  +45%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt;  +21%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pankod/superplate"&gt;Superplate&lt;/a&gt;  +15.46%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GorvGoyl/Clone-Wars"&gt;Clone Wars&lt;/a&gt; +11%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +7,827 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GorvGoyl/Clone-Wars"&gt;Clone Wars&lt;/a&gt; +4,717 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +4,522 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +4,146 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +3,172 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/appsmithorg/appsmith"&gt;Appsmith&lt;/a&gt;  +104%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arnelenero/simpler-state"&gt;Simpler State&lt;/a&gt;  +95%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GorvGoyl/Clone-Wars"&gt;Clone Wars&lt;/a&gt; +85%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wbkd/react-flow"&gt;React Flow&lt;/a&gt;  +71%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tailwindlabs/headlessui"&gt;Headless UI&lt;/a&gt; +53%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Build a Color Wheel with Tints &amp; Shades</title>
      <author>Mads Stoumann</author>
      <pubDate>Fri, 23 Apr 2021 13:43:17 +0000</pubDate>
      <link>https://dev.to/madsstoumann/how-to-build-a-color-wheel-with-tints-shades-nfj</link>
      <guid>https://dev.to/madsstoumann/how-to-build-a-color-wheel-with-tints-shades-nfj</guid>
      <description>&lt;p&gt;I've built a handful of &lt;a href="https://dev.to/madsstoumann/colors-are-math-how-they-match-and-how-to-build-a-color-picker-4ei8"&gt;color pickers&lt;/a&gt; through the years, so when I &lt;a href="https://www.amazon.co.uk/Designers-Dictionary-Colour-Sean-Adams/dp/1419726390/?_encoding=UTF8&amp;amp;pd_rd_w=hVrHi&amp;amp;pf_rd_p=511c9d46-9b08-4a49-8274-fd2b88a7304c&amp;amp;pf_rd_r=YN45PC380BHWB986M602&amp;amp;pd_rd_r=d1d239a3-1b36-4095-b612-0012c7a979ee&amp;amp;pd_rd_wg=iVQvL&amp;amp;ref_=pd_gw_ci_mcx_mr_hp_d"&gt;in this book&lt;/a&gt; stumbled upon a color-wheel with ‚Äúbuilt-in‚Äù shades and tints, I had to code it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vo-Dm0-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j6ufqs46wlhj80x0gnv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vo-Dm0-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j6ufqs46wlhj80x0gnv.jpg" alt="Color Wheel with tints and shades"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first, I thought: ‚ÄúThat's easy ‚Äì it's just a conical gradient with &lt;em&gt;hard stops&lt;/em&gt; for the colors, and a radial gradient for the tints and shades‚Äù.&lt;/p&gt;

&lt;p&gt;But, alas, look at how ‚Äúun-crisp‚Äù the edges in the conical gradient are (Chrome, MacOS):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_8wVXqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhphfx9v83ljaf45d039.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_8wVXqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhphfx9v83ljaf45d039.png" alt="Color Wheel, using conical gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So ‚Äì I had to do it in &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each ‚Äúring‚Äù in the circle is built up by 12 circles with different colors and &lt;code&gt;stroke-dasharray&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"wheel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"c3"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"c2"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"c1"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"16"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
...etc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--u&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;.c1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--l&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="py"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.c2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--l&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="py"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--u&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.c3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--l&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="py"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--u&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* ... etc */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The circles are wrapped in a &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;-tag with &lt;code&gt;id="wheel"&lt;/code&gt;, so I can use &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; (pun intended) to clone the rings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#wheel"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"r3"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#wheel"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"r2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#wheel"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"r1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
etc...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each ring-class then sets a different &lt;code&gt;--l&lt;/code&gt; (lightness) and &lt;code&gt;stroke-width&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.r1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;stroke-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.r2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;stroke-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* ... etc */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the final result I've chosen more tints than shades, so it's not as dark as in the book-example. Firefox has issues with setting some svg-attributes in CSS, so check it out in Chrome, Edge or Safari:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/zYNmZMN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-have-some-fun"&gt;
  &lt;/a&gt;
  Let's have some fun!
&lt;/h2&gt;

&lt;p&gt;How about &lt;strong&gt;rotating&lt;/strong&gt; those color rings ‚Äì or changing the &lt;strong&gt;saturation&lt;/strong&gt;? Scroll down to see and try the controls, if they're not at the top of the Pen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/KKaGWJw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;To have an &lt;strong&gt;automated animation&lt;/strong&gt;, animating the &lt;code&gt;--r&lt;/code&gt; custom property, we need to register a Custom Property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--r&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"&amp;lt;angle&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in this (you need Chrome/Edge with Houdini):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/abpRJgy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Don't stare at it too long ‚Äì or you'll be hypnotized!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Playing with BeautifulSoup (spiders might not be so scary after all)</title>
      <author>Joks84</author>
      <pubDate>Fri, 23 Apr 2021 13:40:33 +0000</pubDate>
      <link>https://dev.to/joks84/playing-with-beautifulsoup-spiders-might-not-be-so-scary-after-all-4o81</link>
      <guid>https://dev.to/joks84/playing-with-beautifulsoup-spiders-might-not-be-so-scary-after-all-4o81</guid>
      <description>&lt;p&gt;Scraping is cool. &lt;br&gt;
You can automate lots of things ‚Äì scrape the jobs you want, scrape the articles, create content aggregators, send the things you need to your email, save it to a file...plenty of options.&lt;br&gt;
Just be respectful to the websites you are scraping and check their policies regarding scraping.&lt;br&gt;
Requirements:&lt;br&gt;
Python, BeautifulSoup4, requests.&lt;/p&gt;

&lt;p&gt;The URL we will be using is for educational purposes. Creator itself says it can be used for practicing your scraping skills:&lt;br&gt;
&lt;a href="http://books.toscrape.com/"&gt;http://books.toscrape.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h4&gt;

&lt;p&gt;Create a python file where you will be writing the code for scraping ‚Äì I will name mine scraper.py.&lt;br&gt;
As usual, we are using pip to install requests and beautifulsoup4 modules. &lt;br&gt;
Go to your terminal where venv is activated and type:&lt;br&gt;
&lt;code&gt;pip install requests beautifulsoup4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Requests module helps us to send requests to a webpage and see the response.&lt;br&gt;
BeautifulSoup will help us with the scraping and filtering data we want.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's Start
&lt;/h4&gt;

&lt;p&gt;Firstly, we will use requests module to access the URL.&lt;br&gt;
&lt;code&gt;scraper.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;


&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://books.toscrape.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the script, we will get:&lt;br&gt;
&lt;code&gt;&amp;lt;Response [200]&amp;gt;&lt;/code&gt;&lt;br&gt;
which is telling us we have accessed the URL (status code 200 == OK).&lt;br&gt;
Now, we will start using BeautifulSoup.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;scraper.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://books.toscrape.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created the soup instance.&lt;br&gt;
Next, we want to see what we are looking at and from where we are gathering the data.&lt;/p&gt;

&lt;p&gt;For that, we have two options (and it‚Äôs up to you to choose what works better for you):&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#1-printing-the-soup-instance-to-a-terminal"&gt;
  &lt;/a&gt;
  1. Printing the soup instance to a terminal
&lt;/h6&gt;

&lt;p&gt;When we print the &lt;code&gt;soup&lt;/code&gt; variable, we will get the html code of the page we are accessing.&lt;br&gt;
I have written two options for printing the results (&lt;code&gt;print(soup)&lt;/code&gt; and &lt;code&gt;print(soup.prettify()&lt;/code&gt;).&lt;br&gt;
The difference ‚Äì if we print the &lt;code&gt;soup&lt;/code&gt; itself, we will get ugly, cluttered code.&lt;br&gt;
If we use &lt;code&gt;prettify()&lt;/code&gt;, we will get clean &lt;code&gt;html&lt;/code&gt; code.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#2-using-devtools"&gt;
  &lt;/a&gt;
  2. Using DevTools
&lt;/h6&gt;

&lt;p&gt;I prefer the second option.&lt;br&gt;
When we open the URL we want to scrape in the browser, use the right click of the mouse and select &lt;code&gt;Inspect&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;DevTools&lt;/code&gt; will appear. Select the &lt;code&gt;Elements&lt;/code&gt; option and reload the page. You will have &lt;code&gt;html&lt;/code&gt; code of the page shown in &lt;code&gt;Elements&lt;/code&gt; section. This is the type you are looking for:&lt;br&gt;
`   &lt;/p&gt;
&lt;br&gt;
        &lt;br&gt;
    All products | Books to Scrape - Sandbox&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;meta http-equiv="content-type" content="text/html; charset=UTF-8" /&amp;gt;
    &amp;lt;meta name="created" content="24th Jun 2016 09:29" /&amp;gt;
    &amp;lt;meta name="description" content="" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width" /&amp;gt;
    &amp;lt;meta name="robots" content="NOARCHIVE,NOCACHE" /&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;Now, if you haven‚Äôt used &lt;code&gt;html&lt;/code&gt; before, do short research ‚Äì it's not complicated.&lt;br&gt;
For scraping purposes, we should know the basics like the tags, ids, classes, etc. so we can grab what we need.&lt;br&gt;
In the begging, it will take more time to get familiar with the &lt;code&gt;html&lt;/code&gt; itself. But...like everything else, it will get better with practice.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#lets-scrape"&gt;
  &lt;/a&gt;
  Let's Scrape
&lt;/h4&gt;

&lt;p&gt;What we want to do here is to get the book title, the price of the book, and to check if the book is available or not.&lt;/p&gt;

&lt;p&gt;Firstly, we want to see which &lt;code&gt;html&lt;/code&gt; tag has the content we want to scrape. &lt;br&gt;
After researching the &lt;code&gt;html&lt;/code&gt;, we can notice the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag. To be more precise, the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag with the &lt;code&gt;class=‚Äùproduct_pod‚Äù&lt;/code&gt;.&lt;br&gt;
That specific tag has everything we need ‚Äì the title, the price, and the availability of the book.&lt;br&gt;
The information of each book is wrapped in &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag with &lt;code&gt;class="product_pod"&lt;/code&gt;.&lt;br&gt;
We have our target ‚Äì we just need to have all of them in one variable for easier scraping.&lt;br&gt;
Let‚Äôs add the following line to our &lt;code&gt;scraper.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product_pod"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;soup&lt;/code&gt; instance we are looking for all of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tags that have &lt;code&gt;class="product_pod"&lt;/code&gt; and we are storing them to &lt;code&gt;results&lt;/code&gt; variable.&lt;br&gt;
When we print &lt;code&gt;results&lt;/code&gt;, we will get a list-like variable.&lt;br&gt;
Now, let's see how one element of the &lt;code&gt;results&lt;/code&gt; looks like, so we can know what to do.&lt;br&gt;
Add the following to your file and run the script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product_pod"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image_container"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"catalogue/a-light-in-the-attic_1000/index.html"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"A Light in the Attic"&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"thumbnail"&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"media/cache/2c/da/2cdad67c44b002e7ead0cc35693c0e8b.jpg"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"star-rating Three"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-star"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-star"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-star"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-star"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-star"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"catalogue/a-light-in-the-attic_1000/index.html"&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"A Light in the Attic"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Light&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product_price"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price_color"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;¬£&lt;/span&gt;&lt;span class="mf"&gt;51.77&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"instock availability"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-ok"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;stock&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary btn-block"&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Adding..."&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have printed only one result, we see it contains &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; tag with the title we want.&lt;br&gt;
Also, we can see we have a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag with the &lt;code&gt;class="price_color"&lt;/code&gt; which contains the price of the book, and we have &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag with the &lt;code&gt;class="instock availability"&lt;/code&gt; which tells us if the book is in stock or not.&lt;br&gt;
Now we will access the information we need.&lt;/p&gt;

&lt;p&gt;Let's start extracting data from the &lt;code&gt;result&lt;/code&gt; variable which contains data related to just one book (a bit later, we will do it for all the books from the page we are scraping).&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#the-book-title"&gt;
  &lt;/a&gt;
  The book title
&lt;/h6&gt;

&lt;p&gt;To your file add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;title_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we print &lt;code&gt;title_element&lt;/code&gt;, we will get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"catalogue/a-light-in-the-attic_1000/index.html"&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"A Light in the Attic"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Light&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the full title is in &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag. We need to access the title itself and we are doing it by accessing the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag in &lt;code&gt;title_element&lt;/code&gt; and searching for the title itself. Add to your file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title_element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;print(title)&lt;/code&gt; will now give us ‚ÄúA Light in the Attic‚Äù.&lt;/p&gt;

&lt;p&gt;We solved the book title.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#the-price"&gt;
  &lt;/a&gt;
  The price
&lt;/h6&gt;

&lt;p&gt;We saw the price is wrapped in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag with the &lt;code&gt;class="price_color"&lt;/code&gt;. Add to your file the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;price_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price_color"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we print the &lt;code&gt;price_element&lt;/code&gt;, we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price_color"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;¬£&lt;/span&gt;&lt;span class="mf"&gt;51.77&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now need to get the text from the tag, and clean the text from any spacing. Add the following line to your file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price_element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we print the price, we will have nicely formatted string - &lt;code&gt;¬£51.77&lt;/code&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#the-availability-of-the-book"&gt;
  &lt;/a&gt;
  The availability of the book
&lt;/h6&gt;

&lt;p&gt;Similarly to the book‚Äôs price, we will get the availability of the book. Add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;availability_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"instock availability"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will give us the following result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"instock availability"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon-ok"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;stock&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are cleaning the result by adding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;available_element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will give us string ‚ÄúIn stock‚Äù.&lt;br&gt;
Ok, we know how to get the title, the price and the availability of the book.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-final-code"&gt;
  &lt;/a&gt;
  The final code
&lt;/h4&gt;

&lt;p&gt;Since the &lt;code&gt;results&lt;/code&gt; variable from the beginning is a list-like variable, we can go through a loop and do this for each book in the loop (for each result in results).&lt;br&gt;
Let‚Äôs change our code a little bit by adding a for loop and printing the information for each book in the list. Change your file to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;


&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://books.toscrape.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product_pod"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# looping through results and storing the values to a separate variables.
&lt;/span&gt;    &lt;span class="c1"&gt;# the book title.
&lt;/span&gt;    &lt;span class="n"&gt;title_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"h3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title_element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# the price of the book.
&lt;/span&gt;    &lt;span class="n"&gt;price_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price_color"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price_element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# availability of the book
&lt;/span&gt;    &lt;span class="n"&gt;available_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"p"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"instock availability"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;available_element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The book title is: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The book price: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The book is: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the script, we will get the following results in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Light&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Attic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;¬£&lt;/span&gt;&lt;span class="mf"&gt;51.77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;stock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tipping&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Velvet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;¬£&lt;/span&gt;&lt;span class="mf"&gt;53.74&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;stock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Soumission&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;¬£&lt;/span&gt;&lt;span class="mf"&gt;50.10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;stock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Libertarianism&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Beginners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;¬£&lt;/span&gt;&lt;span class="mf"&gt;51.33&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;stock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="s"&gt;'s Only the Himalayas.
The book price: ¬£45.17.
The book is: In stock.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it is.&lt;br&gt;
Scraping itself is not super difficult, just requires some practice (like everything else).&lt;br&gt;
Also, it can be done in different ways depending on what you need and what you prefer.&lt;br&gt;
Hope someone will find this post helpful.&lt;/p&gt;

</description>
      <category>scraping</category>
      <category>python</category>
      <category>beautifulsoup</category>
    </item>
    <item>
      <title>AWS EKS vs. ECS vs. Fargate: Where to manage your Kubernetes?</title>
      <author>CAST AI</author>
      <pubDate>Fri, 23 Apr 2021 13:19:10 +0000</pubDate>
      <link>https://dev.to/castai/aws-eks-vs-ecs-vs-fargate-where-to-manage-your-kubernetes-5392</link>
      <guid>https://dev.to/castai/aws-eks-vs-ecs-vs-fargate-where-to-manage-your-kubernetes-5392</guid>
      <description>&lt;p&gt;We all love containers for their scalability. But it might easily become your overhead if you end up managing a large cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is where container orchestration comes in.&lt;/strong&gt; When operating at scale, you need a platform that automates all the tasks related to the management, deployment and scaling of container clusters. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There‚Äôs a reason why almost 90% of containers are orchestrated today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you‚Äôre using Kubernetes on AWS, there are several options you can choose from: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elastic Container Service (ECS), &lt;/li&gt;
&lt;li&gt;Elastic Kubernetes Service (EKS), &lt;/li&gt;
&lt;li&gt;AWS Fargate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read on to find out which one is &lt;strong&gt;a better match&lt;/strong&gt; for your workloads.  &lt;/p&gt;

&lt;p&gt;And if you know what‚Äôs what in the world of AWS Kubernetes, you could still probably use a few &lt;a href="https://cast.ai/blog/8-best-practices-to-reduce-your-aws-bill-for-kubernetes/"&gt;best practices to reduce your cloud bill.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you‚Äôll find inside:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Elastic Container Service (ECS)?&lt;/li&gt;
&lt;li&gt;What is Elastic Kubernetes Service (EKS)?&lt;/li&gt;
&lt;li&gt;What is AWS Fargate?&lt;/li&gt;
&lt;li&gt;AWS EKS vs. ECS ‚Äì Similarities&lt;/li&gt;
&lt;li&gt;AWS EKS vs. ECS ‚Äì Differences&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Pricing&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Multi cloud portability&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;When to choose EKS?&lt;/li&gt;
&lt;li&gt;When to go for ECS?&lt;/li&gt;
&lt;li&gt;Wrap up&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-elastic-container-service-ecs"&gt;
  &lt;/a&gt;
  What is Elastic Container Service (ECS)?
&lt;/h2&gt;

&lt;p&gt;AWS ECS stands for AWS Elastic Container Service. It‚Äôs a scalable container orchestration platform owned by AWS. It was designed to run, stop, and manage containers in a cluster. The containers themselves are defined here as part of task definitions and driven by ECS in the cloud. &lt;/p&gt;

&lt;p&gt;You can use ECS with EC2 instances (best for long-running tasks) or AWS Fargate (good for serverless tasks). Let‚Äôs take a closer look at these two options:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecs-with-ec2-instances"&gt;
  &lt;/a&gt;
  ECS with EC2 instances
&lt;/h3&gt;

&lt;p&gt;In this model, containers are deployed to EC2 instances (VMs) created for the cluster. ECS managed them together with tasks that are part of the task definition. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h4&gt;

&lt;p&gt;You have full control over the type of EC2 instance used here. For example, you can use a GPU-optimized instance type if you need to run training for a machine learning model that comes with unique GPU requirements.&lt;br&gt;
You can take advantage of Spot instances that &lt;a href="https://cast.ai/blog/how-to-reduce-cloud-costs-by-90-spot-instances-and-how-to-use-them/"&gt;reduce cloud costs by up to 90%&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h4&gt;

&lt;p&gt;You‚Äôre the one responsible for security patches and network security of the instances, as well as their scalability in the cluster (but thankfully, you can use &lt;a href="https://cast.ai/blog/guide-to-kubernetes-autoscaling-for-cloud-cost-optimization/"&gt;Kubernetes autoscaling&lt;/a&gt; for that). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost-youre-charged-for-the-ec2-instances-run-within-your-cluster-and-vpc-networking"&gt;
  &lt;/a&gt;
  Cost: You‚Äôre charged for the EC2 instances run within your cluster and VPC networking.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#ecs-with-aws-fargate"&gt;
  &lt;/a&gt;
  ECS with AWS Fargate
&lt;/h3&gt;

&lt;p&gt;In this variant, you don‚Äôt need to worry about EC2 instances or servers anymore. Just choose the CPU and memory combo you need and your containers will be deployed there. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h4&gt;

&lt;p&gt;No servers to manage.&lt;br&gt;
AWS is in charge of container availability and scalability. Still, better select the right CPU and memory ‚Äì otherwise, you risk that your application becomes unavailable.&lt;br&gt;
You can use Fargate Spot, a new capability that can run interruption-tolerant ECS Tasks at up to a 70% discount off the Fargate price&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h4&gt;

&lt;p&gt;ECS + Fargate supports only one networking mode ‚Äì awsvpc ‚Äì which &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html#task-networking-considerations"&gt;limits your control&lt;/a&gt; over the networking layer (and you might need that in some scenarios).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost-youre-charged-based-on-the-cpu-and-memory-you-select-the-amount-of-cpu-cores-and-gb-determines-the-cost-of-running-your-cluster"&gt;
  &lt;/a&gt;
  Cost: You‚Äôre charged based on the CPU and memory you select. The amount of CPU cores and GB determines the cost of running your cluster.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jc3kJjbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyh2gkbexfxozh3kcv3j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jc3kJjbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyh2gkbexfxozh3kcv3j.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-elastic-kubernetes-service-eks"&gt;
  &lt;/a&gt;
  What is Elastic Kubernetes Service (EKS)?
&lt;/h2&gt;

&lt;p&gt;EKS is a service that provides and manages a Kubernetes control plane on its own. You have no access to the master nodes on EKS since they‚Äôre under a special AWS account.&lt;/p&gt;

&lt;p&gt;To run a Kubernetes workload, EKS establishes the control plane and Kubernetes API in your managed AWS infrastructure and you‚Äôre good to go.&lt;/p&gt;

&lt;p&gt;At this point, you can deploy workloads using native K8s tools like kubectl, Kubernetes Dashboard, Helm, and Terraform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-aws-eks"&gt;
  &lt;/a&gt;
  Advantages of AWS EKS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;don‚Äôt have to install, operate, and maintain&lt;/strong&gt; your own Kubernetes control plane.&lt;/li&gt;
&lt;li&gt;EKS allows you to &lt;strong&gt;easily run tooling and plugins&lt;/strong&gt; developed by the Kubernetes open-source community. &lt;/li&gt;
&lt;li&gt;EKS &lt;strong&gt;automates load distribution and parallel processing&lt;/strong&gt; better than any DevOps engineer could.&lt;/li&gt;
&lt;li&gt;Your Kubernetes assets integrate seamlessly with AWS services if you use EKS.&lt;/li&gt;
&lt;li&gt;EKS uses VPC networking.&lt;/li&gt;
&lt;li&gt;Any application running on EKS is compatible with one running in your existing Kubernetes environment. You can migrate to EKS without applying any changes to code.&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;EC2 spot instances&lt;/strong&gt; using managed node groups that follow spot best practices and allow some pretty great costs savings. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hw5jE3Gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ag4vxqwjvm978rgyien.jpeg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-fargate"&gt;
  &lt;/a&gt;
  What is AWS Fargate?
&lt;/h2&gt;

&lt;p&gt;Usually, a container management platform reworks a server‚Äôs CPU and memory to allocate them to your workloads better. But the underlying server is still there ‚Äì just divided in a different way. And it might become a burden in managing your systems.&lt;/p&gt;

&lt;p&gt;AWS solves this problem with Fargate, by taking over the management of that underlying server. &lt;/p&gt;

&lt;p&gt;Instead of doing all the tasks yourself ‚Äì from booting a server and installing the agent to making sure that it‚Äôs up-to-date ‚Äì you can simply create a cluster and add your workload to it. AWS will add pre-configured servers to the ‚Äúpool‚Äù automatically to support your requirements.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Today, 32% of AWS container environments run on Fargate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are a few things you should know about Fargate before jumping on the Fargate-managed bandwagon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It‚Äôs &lt;strong&gt;not a good fit for highly regulated environments&lt;/strong&gt; where companies use dedicated tenancy hosting.&lt;/li&gt;
&lt;li&gt;The combination of ECS and Fargate &lt;strong&gt;supports only one networking mode (awsvpc)&lt;/strong&gt; that comes with limitations if you need to have deep control over the networking layer.&lt;/li&gt;
&lt;li&gt;Fargate allocates resources automatically, but &lt;strong&gt;you can set few controls over how it works.&lt;/strong&gt; This can easily lead to uncontrolled cost rise if you fail in close monitoring (for example, in R&amp;amp;D environments). One way to deal with that is through self-hosting and creating limited-capacity clusters. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_26n71cS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q68miz7wpadwqdjj57n.jpeg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-eks-vs-ecs-similarities"&gt;
  &lt;/a&gt;
  AWS EKS vs. ECS ‚Äì Similarities
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-they-both-have-a-layer-of-abstraction"&gt;
  &lt;/a&gt;
  1. They both have a layer of abstraction
&lt;/h3&gt;

&lt;p&gt;EKS and ECS come with a layer of abstraction for containers called deployments (EKS) or tasks (ECS). &lt;/p&gt;

&lt;p&gt;Their functionalities are quite similar. Both ECS and EKS have an abstraction called cluster ‚Äì a combination of all the working components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-they-allow-a-mix-of-aws-compute-platforms"&gt;
  &lt;/a&gt;
  2. They allow a mix of AWS compute platforms
&lt;/h3&gt;

&lt;p&gt;Whether you‚Äôre running your containers with ECS and EKS, you can choose one or more AWS compute options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;EC2 Instances&lt;/strong&gt; ‚Äì virtual machines that offer a wide range of options and capacities.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AWS Fargate&lt;/strong&gt; ‚Äì for serverless applications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AWS Outposts&lt;/strong&gt; ‚Äì a fully managed service that offers the same AWS infrastructure, services, APIs, and tools to data centers or on-premises facilities to make hybrid setups consistent. Great for workloads that need low latency access to on-premises systems or local data processing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AWS Local Zones&lt;/strong&gt; ‚Äì a kind of AWS infrastructure deployment that locates compute, storage, database, and other services closer to a specific population, industry, or IT centers. Perfect for applications that you want running closer to the end-users.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;AWS Wavelength&lt;/strong&gt; ‚Äì this infrastructure is optimized for mobile edge computing applications that help to avoid the latency resulting from application traffic having to go through multiple hops across the Internet to reach the destination. A great pick for low-latency, mobile edge applications.&lt;br&gt;
How to choose &lt;a href="https://cast.ai/blog/how-to-choose-the-best-vm-for-the-job/"&gt;the best VM type&lt;/a&gt;? Consider your selection across these four dimensions:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;performance, &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cost,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;availability, &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reliability. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding the differences between all these options essential because they come with different financial commitments and complexity in management.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJ7cuzbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiq0f0f8l19h5ngqq97k.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJ7cuzbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiq0f0f8l19h5ngqq97k.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-you-dont-need-to-monitor-or-operate-them"&gt;
  &lt;/a&gt;
  3. You don‚Äôt need to monitor or operate them
&lt;/h3&gt;

&lt;p&gt;These managed services eliminate the effort in operating services and allow your teams to focus on core applications. &lt;/p&gt;

&lt;p&gt;You can easily assume that they‚Äôre reliable and highly available at all times. The Kubernetes control plane and API will be up and running no matter what ‚Äì even when updating to the latest release (naturally, this happens automatically as well). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-they-share-the-approach-to-security"&gt;
  &lt;/a&gt;
  4. They share the approach to security
&lt;/h3&gt;

&lt;p&gt;To access services and resources securely, AWS provides the Identity and Access Management (IAM) solution. You can create users (and user groups) ‚Äì and then assign permissions to them. &lt;/p&gt;

&lt;p&gt;This control system is available in both ECS and EKS. For example, you can use IAM to limit who can access ECS tasks or Kubernetes workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-eks-vs-ecs-differences"&gt;
  &lt;/a&gt;
  AWS EKS vs. ECS ‚Äì Differences
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-IW8QmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8xbovxqcxpz1r8s0sy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-IW8QmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8xbovxqcxpz1r8s0sy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pricing"&gt;
  &lt;/a&gt;
  1. Pricing
&lt;/h3&gt;

&lt;p&gt;In general, if you run ECS and EKS clusters on EC2 instances, you‚Äôll be paying on compute costs that depend on the instance type you pick and its running time.&lt;/p&gt;

&lt;p&gt;ECS doesn‚Äôt come with any additional charges, but EKS does.&lt;/p&gt;

&lt;p&gt;EKS will charge you $0.1 per hour per Kubernetes cluster. This amounts to c. $74 per month, which doesn‚Äôt seem like a lot. But the costs might add up quickly depending on your setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you‚Äôre just exploring microservices and containers, ECS is a better option. And if you‚Äôre ready to handle the scalability level of Kubernetes, the $74 extra on your bill isn‚Äôt going to make much difference against your overall compute costs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Check this out too: &lt;a href="https://cast.ai/blog/kubernetes-cost-estimation-4-problems-and-how-to-solve-them/"&gt;Kubernetes cost estimation: 4 problems and how to solve them&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DLwHkLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brgw3yo54n7s8rhhhq4l.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-deployment"&gt;
  &lt;/a&gt;
  2. Deployment
&lt;/h3&gt;

&lt;p&gt;You can set up both EKS and ECS from the AWS management console. But then things start looking different.&lt;/p&gt;

&lt;p&gt;ECS is really simple to deploy. After all, it was designed to be a simple API for creating containerized workloads without any complex abstractions. You get no control plane, so once your cluster is set up, you can configure and deploy tasks directly from the AWS management console. &lt;/p&gt;

&lt;p&gt;Deploying clusters on EKS is a bit more complex and requires expert configuration. You need to configure and deploy pods via Kubernetes first because EKS is just another layer for creating K8s clusters on AWS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So, you need more expertise and operational knowledge to deploy and manage applications on EKS when compared to ECS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-multi-cloud-portability"&gt;
  &lt;/a&gt;
  3. Multi cloud portability
&lt;/h3&gt;

&lt;p&gt;The ideal scenario is when you can move your workloads from one cloud provider to another with minimal disruption. This is what portability is all about. To achieve it, you need interoperability among cloud services. &lt;/p&gt;

&lt;p&gt;While ECS is an AWS proprietary technology, EKS is based on Kubernetes which is open-source.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kubernetes in EKS allows you to package your containers and move them to another platform quickly. ECS might lock you in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you build an application in ECS, you‚Äôre likely to encounter a vendor lock-in issue in the long run. And if you choose to design your application on Kubernetes, you can basically run it on any other Kubernetes cluster ‚Äì from clouds to on-premises. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-networking"&gt;
  &lt;/a&gt;
  4. Networking
&lt;/h3&gt;

&lt;p&gt;When using ECS, you use the awsvpc network that receives an elastic network interface (ENI) attached to the container instance hosting it. You‚Äôll be looking at default limits to the number of network interfaces that can be attached to an EC2 instance (the primary network interface counts as one). Just to give you an idea, a c5.large instance may have up to 4 ENIs attached to it by default.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ECS, the maximum number of ENIs you can assign varies by EC2 type. Even though AWS increased the limits, this might not be enough to support all the containers you want running on that particular instance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that ECS supports launching container instances with larger ENI density using specific EC2 instance types. When you pick such an instance type and opt in to the awsvpcTrunking account setting, you‚Äôll get some additional ENIs on newly launched container instances. So, you can place more tasks using the awsvpc network mode on every container instance. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With EKS, you can assign a dedicated network interface to a pod to improve security. All the containers inside that pod will share the internal network and public IP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can share an ENI between multiple pods, which allows you to place more pods per instance. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-community-support"&gt;
  &lt;/a&gt;
  5. Community support
&lt;/h3&gt;

&lt;p&gt;The open-source Kubernetes rules over proprietary ECS here. The latter offers limited community assistance, so you can only count on the corporate support of AWS.&lt;/p&gt;

&lt;p&gt;When running Kubernetes in EKS, you get:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;community support (Stack Overflow, Github issues), &lt;/li&gt;
&lt;li&gt;resources (from official training to online courses), &lt;/li&gt;
&lt;li&gt;community-maintained tools like kubectl extensions, Helm Charts, or Kubernetes Operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-choose-eks"&gt;
  &lt;/a&gt;
  When to choose EKS?
&lt;/h2&gt;

&lt;p&gt;For some teams, ECS proves to be too simple and comes with limitations that EKS doesn‚Äôt have. So, when should you select EKS?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;When you need granular control over container placement&lt;/strong&gt; ‚Äì ECS doesn‚Äôt have a concept similar to pods. So, if you need fine-grained control over container placement better go somewhere else. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When you need more networking modes&lt;/strong&gt; ‚Äì ECS has only one networking mode available in Fargate. If your serverless app needs something else, EKS is a better choice.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;When you want more control over your tooling&lt;/strong&gt; ‚Äì ECS comes with a set of default tools. For example, you can use only Web Console, CLI, and SDKs for management. Logging and performance monitoring is carried out using CloudWatch, service discovery through Route 53, and deployments via ECS itself. If you don‚Äôt like any of these tools, go for EKS. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxAJYIDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15eiuj1caro3zr2i6tyq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxAJYIDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15eiuj1caro3zr2i6tyq.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-to-go-for-ecs"&gt;
  &lt;/a&gt;
  When to go for ECS?
&lt;/h2&gt;

&lt;p&gt;Some teams might benefit from ECS more than EKS thanks to its simplicity. Here‚Äôs when selecting ECS makes the most sense:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When you have limited DevOps resources&lt;/strong&gt; ‚Äì ECS comes with a gentle learning curve so if you‚Äôre not prepared to re-architect your applications around Kubernetes concepts, ECS will be easier to adopt.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When you don‚Äôt have time or resources to pick and choose add-ons&lt;/strong&gt; ‚Äì Kubernetes and EKS by extension is a far more flexible tool. You can choose from many different add-ons available in the system. But each of them requires time, resources, and maintenance to make the most of it. ECS has only one option in each category ‚Äì if it works for you, you‚Äôre good to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When Kubernetes is too much&lt;/strong&gt; ‚Äì If adopting K8s all at once is a little too much for you, ECS could be a good first step. It allows you to try your hand at containerization and move your workloads into a managed service without huge upfront investment. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;If flexibility of moving across different cloud vendors isn‚Äôt that important to you and you‚Äôre happy to put all of your eggs in the (AWS) basket), ECS makes sense. &lt;/p&gt;

&lt;p&gt;But if you‚Äôd like to have the freedom to integrate with the open-source Kubernetes community, putting in the energy and time to make EKS is worth it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whichever tool you choose, you still need to find a way to analyze and optimize cloud costs. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you‚Äôre looking to make your journey with EKS smoother, we might have something for you. Use our &lt;a href="https://cast.ai"&gt;EKS cost analyzer&lt;/a&gt; to check your cluster costs for free, set cost policies, and reduce your cloud bill. Try &lt;a href="https://cast.ai"&gt;CAST AI&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>10 GitHub Repositories every Developer should know</title>
      <author>Pawel</author>
      <pubDate>Fri, 23 Apr 2021 13:11:37 +0000</pubDate>
      <link>https://dev.to/pb/10-github-repositories-every-developer-should-know-ngm</link>
      <guid>https://dev.to/pb/10-github-repositories-every-developer-should-know-ngm</guid>
      <description>&lt;p&gt;Other than being the home for some of the most interesting Open Source Projects on the internet, GitHub is also a great place for sharing resources of all kinds, from free books to APIs, from roadmaps to project ideas and to the projects.&lt;br&gt;
But with sheer mass it becomes difficult to find the most useful repositories which you may think doesn't exists.&lt;br&gt;
So I have curated this list of fifteen fabulous repositories that provide a great value for all web and software developers.&lt;/p&gt;

&lt;p&gt;All of them will add value to you and help you to become a better web or software developer or both.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-free-programming-books"&gt;
  &lt;/a&gt;
  1. Free Programming Books
&lt;/h1&gt;

&lt;p&gt;GitHubüåü: 183K+ &lt;/p&gt;

&lt;p&gt;Offered in a variety of different languages &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; is no doubt one of the most popular and starred repositories on GitHub. Even though it has "Books" in its name, it offers a lot more than that. It contains sections of free online courses, interactive programming resources, problem sets and competitive programming, programming playgrounds and podcasts and cheat sheets almost every programming language. &lt;/p&gt;

&lt;p&gt;But has a major collection of programming books which makes it an "Awesome" collection.'&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-developer-roadmap"&gt;
  &lt;/a&gt;
  2. Developer Roadmap
&lt;/h1&gt;

&lt;p&gt;GitHubüåü: 155K+&lt;/p&gt;

&lt;p&gt;Got stuck? or need some advice for getting started to your developer journey? then this &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;repository&lt;/a&gt; will guide you through. It has all the technologies you need to know if you want to become a Frontend or Backend or DevOps Engineer. It has all the alternative technologies from which can choose whatever suits your need or comfort.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-ossu-computer-science"&gt;
  &lt;/a&gt;
  3. OSSU Computer Science
&lt;/h1&gt;

&lt;p&gt;GitHubüåü:81K+&lt;/p&gt;

&lt;p&gt;If you don't have a computer science background or degree and want the equivalent knowledge same as a Computer Science degree then this &lt;a href="https://github.com/ossu/computer-science"&gt;repository&lt;/a&gt; is for you. It's for those who want a proper, well-rounded grounding in concepts fundamental to all computing disciplines. It offers all the resources to help you become a self-taught computer science graduate equivalent and has a worldwide community of learners.&lt;/p&gt;

&lt;p&gt;It is designed according to the degree requirements of undergraduate computer science majors, minus general education (non-CS) requirements, as it is assumed most of the people following this curriculum are already educated outside the field of CS. The courses themselves are among the very best in the world, often coming from Harvard, Princeton, MIT, etc., but specifically chosen to meet the following criteria.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-awesome"&gt;
  &lt;/a&gt;
  4. Awesome
&lt;/h1&gt;

&lt;p&gt;GitHubüåü: 158K+&lt;/p&gt;

&lt;p&gt;As the name describes it has an &lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; lists of all kinds of interesting topics ranging from computer science to media, from gaming to business and the list goes on.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-build-your-own-x"&gt;
  &lt;/a&gt;
  5. Build your own X
&lt;/h1&gt;

&lt;p&gt;GitHubüåü: 103K+&lt;/p&gt;

&lt;p&gt;If you are a person who believes in the principle of "Learning by doing" then this &lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;repository&lt;/a&gt; has the potential of becoming your daily stop at GitHub. It has links to the resources which help you build your own Cryptocurrency, Database, Bots, BitTorrent Clients, and many more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-coding-interview-university"&gt;
  &lt;/a&gt;
  6. Coding Interview University
&lt;/h1&gt;

&lt;p&gt;Github üåü: 165K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; has a multi-month study plan to become a software engineer for a large tech company like Google, Amazon, Facebook, Apple, or any other software company. It offers advice on how to study to become a reliability engineer or operations engineer. It also has links to the flashcards for quickly brushing up your knowledge and stay updated originally created by the author of the repository who landed a job at Amazon. And there are much more success stories like that.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-public-apis"&gt;
  &lt;/a&gt;
  7. Public Apis
&lt;/h1&gt;

&lt;p&gt;GitHubüåü: 118K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;Public Apis&lt;/a&gt; has a collective list of all the free APIs available on the internet to use in your personal or professional projects. It offers a wide range of Application Programming interfaces (APIs) such as business, anime, animals, news, finance, games, and more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-tech-interview-handbook"&gt;
  &lt;/a&gt;
  8. Tech Interview Handbook
&lt;/h1&gt;

&lt;p&gt;GitHubüåü:51K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt; has all the materials that you need to crack a Tech Interview. It has a variety of material regarding How to prepare for coding interviews, Good questions to ask your interviewer, Helpful tips on resume, and many more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-system-design-primer"&gt;
  &lt;/a&gt;
  9. System Design Primer
&lt;/h1&gt;

&lt;p&gt;GitHubüåü:127K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/donnemartin/system-design-primer"&gt;System Design Primer&lt;/a&gt; is a great repository for software engineers that will help you learn how to design large-scale systems. That will then help you become a better engineer. The repo provides an organized collection of resources for this broad topic.&lt;br&gt;
Because system design often is a required component of the technical interview process at many companies, this repository can also help you to prepare for those interviews with a study guide, advice on how to approach an interview, interview questions with solutions, Anki flashcard sets for interactive learning, and interactive coding challenges.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-design-resources-for-developers"&gt;
  &lt;/a&gt;
  10. Design Resources for Developers
&lt;/h1&gt;

&lt;p&gt;GitHubüåü:25K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;This repository&lt;/a&gt; has a curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more, available for free to use in your projects and applications. It offers all the template stuff you need to get started with your web development projects.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Bonus&lt;/em&gt;: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awesome-repos"&gt;
  &lt;/a&gt;
  Awesome Repos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/pawelborkar/awesome-repos"&gt;Awesome Repos&lt;/a&gt; is just a few weeks old but the way it's including all the fantastic repositories on GitHub is mindblowing. It has a number of resourceful repositories packed in just one place. All you have to do is just visit this repository that's it. The repository is still growing and welcomes PRs.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
I hope you find these repositories as useful as I do and can use them to become better software engineers. Thanks for reading!&lt;/p&gt;

&lt;p&gt;If you like my work please follow me on &lt;a href="https://linkedin.com/in/pawelborkar"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Reinventing myself</title>
      <author>Lea Rosema (she/her)</author>
      <pubDate>Fri, 23 Apr 2021 12:54:58 +0000</pubDate>
      <link>https://dev.to/terabaud/reinventing-myself-4oin</link>
      <guid>https://dev.to/terabaud/reinventing-myself-4oin</guid>
      <description>&lt;p&gt;So, it's time to reinvent myself and look for another challenge. But I don't know yet where my journey goes. &lt;/p&gt;

&lt;p&gt;My last employer took quite a big effort in supporting me shaping me into the developer I'm expected to be. They offer assistance and coaching, but nothing really seems to work for me.&lt;/p&gt;

&lt;p&gt;I need to take a step back and think about my next steps.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What I Learned in the First Three Years of Working as a Web Developer</title>
      <author>Gabriel Laroche</author>
      <pubDate>Fri, 23 Apr 2021 12:51:12 +0000</pubDate>
      <link>https://dev.to/gablaroche/what-i-learned-in-the-first-three-years-of-working-as-a-web-developer-513p</link>
      <guid>https://dev.to/gablaroche/what-i-learned-in-the-first-three-years-of-working-as-a-web-developer-513p</guid>
      <description>&lt;p&gt;The last time I wrote a post like this was when I was three months into my career and I feel like I should make a post now, since my thought process and my feelings towards certain things in the field has changed. If you're looking for an article talking about concrete technical things I learned like "Oh I learned these really cool and useful features in JavaScript", This is not the post for you. This post is about how my opinions evolved and changed over the years. A common thing you might see during this post is that in the last three years, I realized that I had (and still have) a lot of privilege and my way of thinking some things were born out of that and I had opinions that were unintentionally gatekeepy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passion"&gt;
  &lt;/a&gt;
  Passion
&lt;/h2&gt;

&lt;p&gt;I used to be super passionate about web development and I would work on silly side projects after work and I used to think it was important for other devs to be passionate about their work and I would look down on people who are just in it for money or aren't passionate about the field. This has changed, I still enjoy coding and I still code in my spare time from time to time, but I don't think it's super important to be passionate about web development and I think it's fine if people are in it for the money, at the end of the day, it's just a job, we all have to survive, we all have to live, who am I to judge other people's motivation to come in to work? Who am I to judge if people are not plugged in 24/7? Who am I to judge if people don't have a portfolio or side projects?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vanilla-javascript-first-vs-frameworkslibraries-first"&gt;
  &lt;/a&gt;
  Vanilla JavaScript First V.S. Frameworks/Libraries First
&lt;/h2&gt;

&lt;p&gt;I used to think that learning vanilla JavaScript before frameworks/libraries was the best and most efficient way to be a better front-end developer. That may be true for me and my way of learning things but it doesn't take into account people who don't necessarily have the time to learn JavaScript first, like people who switch careers later in their life. I had the luxury of going to a post-secondary school in my home city at the ripe age of 16 for 4 years. I had the time to learn the "fundamentals" first. While I'm on that note, when what do we mean by "fundamentals"? How much knowledge is enough to start diving into frameworks and libraries? People who start with React or Vue before Vanilla JavaScript doesn't invalidate them as developers. This logic also applies to CSS frameworks. Often times I see people who start with frameworks and libraries want to learn the backbone of their tech stack and become really proficient in CSS/JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-html-and-css-programming-languages"&gt;
  &lt;/a&gt;
  Are HTML and CSS programming languages?
&lt;/h2&gt;

&lt;p&gt;Okay this might be my most controversial opinion so far, but they both are programming languages, mostly because in the last three years I have seen amazing things done with these two languages. I was never one to consider HTML and CSS as unimportant, because I write a lot of HTML and CSS in my day to day. Even then, I used to say "Well HTML literally means 'Hypertext Markup &lt;em&gt;Language&lt;/em&gt;' and CSS is a stylesheet &lt;em&gt;language&lt;/em&gt;" and yes they are Markup and stylesheet languages respectively, but why don't we consider these types of languages as sub types of programming language? JavaScript is technically a scripting language, but no one argues its validity as a programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-a-personal-note"&gt;
  &lt;/a&gt;
  On a personal note
&lt;/h2&gt;

&lt;p&gt;even if this whole post is opinionated, this section is very specific to me and my experience.&lt;/p&gt;

&lt;p&gt;After working two and a half years at a wonderful agency, I decided to work for a different company. There were three main factors that I looked for.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Interesting projects and challenges&lt;/li&gt;
&lt;li&gt;Small company that isn't a startup&lt;/li&gt;
&lt;li&gt;Embraces remote culture, even after the pandemic&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#interesting-projects-and-challenges"&gt;
  &lt;/a&gt;
  Interesting Projects and Challenges
&lt;/h3&gt;

&lt;p&gt;This is the main reason I wanted to change companies. Although the projects could be interesting for some/most developers, we mostly built big marketing websites for big corporations. That was fun for the first year or so in the industry, but after that I was starting to want to build products and Saas style projects and that was not something we did at our company.&lt;/p&gt;

&lt;p&gt;Although I don't think passion is important. I feel like it's important that I at least tolerate or enjoy the projects I work on. That can come in many forms like enjoying the tools you are working with, the team, the goal/mission of the project, the challenges you face, the client, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#small-company-that-isnt-a-startup"&gt;
  &lt;/a&gt;
  Small Company That Isn't a Startup
&lt;/h3&gt;

&lt;p&gt;Going from a company with thousands of employees and is owned by one of the biggest marketing and communications company to a small twenty-ish employees company was quite a bit jarring, but in a good way. Obviously not all big companies are the same and same thing for smaller companies. After all, I've only worked at two tech companies that did very different things. Going into this small company, I saw myself cutting through a lot less red tape, especially when it comes to PTO and project architecture. At the bigger company it was a pain trying to add small npm packages to projects that it was usually easier to build solutions in-house, whereas the smaller company, there were a lot less friction when adding packages. At my current company I feel more independent while still having a good support system and that my opinions and ideas matter and aren't completely disregarded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#embraces-remote-culture-even-after-the-pandemic"&gt;
  &lt;/a&gt;
  Embraces Remote Culture, Even after the Pandemic
&lt;/h3&gt;

&lt;p&gt;Now, this is something that my previous company did very well. after three months of being fully remote they announced that the company will keep the office, but will be remote first for the foreseeable future and I applauded this decision. I grew to really love working remotely, I feel like I'm more focused, productive, eat home cooked meals 99% of the time and don't have to deal with the harsh Canadian winter or buses. It was one of the first things I asked my new employer because their only office is in a city three hours away from me and they were 100% on board.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;In conclusion, I learned to see things with more nuance and compassion than before.&lt;/p&gt;

&lt;p&gt;In conclusion, it was fun writing this post and reflecting on my career so far. I hope to write more articles like this as I progress in my career. Let me know what you think and feel free to share your own opinions and challenge mine. üôÇ&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Hotwire Turbo in Rails with legacy JavaScript</title>
      <author>Matou≈° Bor√°k</author>
      <pubDate>Fri, 23 Apr 2021 12:49:53 +0000</pubDate>
      <link>https://dev.to/nejremeslnici/using-hotwire-turbo-in-rails-with-legacy-javascript-17g1</link>
      <guid>https://dev.to/nejremeslnici/using-hotwire-turbo-in-rails-with-legacy-javascript-17g1</guid>
      <description>&lt;p&gt;When &lt;a href="https://turbo.hotwire.dev/"&gt;Hotwire Turbo&lt;/a&gt; got released around Christmas 2020, it was exciting news for many of us. One of its main appeals is that it helps you create highly reactive web pages in Rails while having to write &lt;a href="https://twitter.com/dhh/status/1266057500547141633"&gt;almost no custom JavaScript&lt;/a&gt;. Turbo also seems very easy to use, it just ‚Äùinvites‚Äú you to try and play with your pages. Let‚Äôs take a look if Turbo can be used in a long-developed project with a lot of old JavaScript code, too (spoiler: with a little tweak, it very much can!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-road-to-legacy-javascript-in-a-longtime-rails-project"&gt;
  &lt;/a&gt;
  The road to legacy JavaScript in a long-time Rails project
&lt;/h2&gt;

&lt;p&gt;After all the years that we watched the JavaScript community boost its ecosystem to tremendous heights and after trying (and often failing) to keep up with the pace of language enhancements, new frameworks and build systems, this &lt;strong&gt;intended simplicity&lt;/strong&gt; of Turbo is a very welcome turnaround. To be clear, we &lt;em&gt;do&lt;/em&gt; like JavaScript, it‚Äôs a fine language, especially since ES6, but in our opinion its strengths stand out and are sustainable only if you have enough sufficiently specialized JavaScript devs in a team. In other words, for a small Rails team, long-term management of complex JavaScript can be very difficult. &lt;/p&gt;

&lt;p&gt;That‚Äôs why we have always been cautious about bringing too much JavaScript to the project, especially for things that could be done in other ways. Still, there's always been a kingdom where JavaScript absolutely ruled and that was &lt;strong&gt;page reactivity&lt;/strong&gt;. Most people love reactive pages and we do, too! So, in the end, still a lot of JavaScript managed to get into our codebase.&lt;/p&gt;

&lt;p&gt;Over the years, the ‚Äùofficial‚Äú support and default conventions for building reactive JavaScript-enabled pages in Rails took &lt;strong&gt;many different forms&lt;/strong&gt;. Let‚Äôs just run through some of the options for working with JavaScript that we had in our pretty much standard Rails project during the course of its existence, i.e. during the last ~12 years:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there was the old and rusty inline vanilla JavaScript since forever,&lt;/li&gt;
&lt;li&gt;there was the &lt;a href="https://github.com/rails/prototype-rails"&gt;Prototype&lt;/a&gt; library since who knows when but it was &lt;a href="https://github.com/rails/prototype_legacy_helper"&gt;phased out&lt;/a&gt; gradually (~2010),&lt;/li&gt;
&lt;li&gt;and in Rails 3.1, it was &lt;a href="https://guides.rubyonrails.org/3_1_release_notes.html#default-js-library-is-now-jquery"&gt;replaced&lt;/a&gt; by &lt;a href="https://github.com/rails/jquery-rails"&gt;jQuery&lt;/a&gt; (~2011),&lt;/li&gt;
&lt;li&gt;Rails 3.1 also brought &lt;a href="https://github.com/rails/ruby-coffee-script"&gt;CoffeeScript&lt;/a&gt; as a new and encouraged way of ‚Äùwriting JavaScript‚Äú (~2011),&lt;/li&gt;
&lt;li&gt;there was &lt;a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html#unobtrusive-javascript"&gt;Unobtrusive JavaScript&lt;/a&gt; to replace the inline style; it was pushed further by the &lt;a href="https://github.com/rails/jquery-ujs"&gt;jquery-ujs library&lt;/a&gt; (~2010), later superseded by the &lt;a href="https://dev.to/nejremeslnici/migrating-from-jquery-ujs-to-rails-ujs-k9m"&gt;somewhat compatible&lt;/a&gt; &lt;a href="https://github.com/rails/rails/tree/main/actionview/app/assets/javascripts"&gt;Rails UJS&lt;/a&gt; (2016),&lt;/li&gt;
&lt;li&gt;there were &lt;a href="https://signalvnoise.com/posts/3697-server-generated-javascript-responses"&gt;Server-generated JavaScript Responses&lt;/a&gt; (SJR) allowing the server to update pages via JavaScript (~2011),&lt;/li&gt;
&lt;li&gt;since Rails 4, the &lt;a href="https://github.com/turbolinks/turbolinks"&gt;Turbolinks library&lt;/a&gt; has been included but had a &lt;a href="https://youtu.be/ktZLpjCanvg?t=2898"&gt;bunch of problems&lt;/a&gt; at that time (2013), so&lt;/li&gt;
&lt;li&gt;Rails 5 came with a major and largely incompatible rewrite of Turbolinks (Turbolinks 5), the previous versions of which were renamed to &lt;a href="https://github.com/turbolinks/turbolinks-classic"&gt;Turbolinks Classic&lt;/a&gt; (2016),&lt;/li&gt;
&lt;li&gt;Rails 5.1 &lt;a href="https://github.com/rails/webpacker"&gt;optionally adopted&lt;/a&gt; the &lt;a href="https://webpack.js.org/"&gt;webpack bundler&lt;/a&gt; and the &lt;a href="https://yarnpkg.com/"&gt;yarn package manager&lt;/a&gt; (2017), the two became the preferred way of handling JavaScript in Rails,&lt;/li&gt;
&lt;li&gt;Rails 5.1 also &lt;a href="https://github.com/rails/rails/pull/27113"&gt;removed jQuery&lt;/a&gt; from default dependencies (2017)&lt;/li&gt;
&lt;li&gt;the &lt;a href="https://m.signalvnoise.com/stimulus-1-0--a-modest-javascript-framework-for-the-html-you-already-have/"&gt;Stimulus JS&lt;/a&gt; framework was released (2018),&lt;/li&gt;
&lt;li&gt;CoffeeScript, although still soft-supported via &lt;a href="https://github.com/rails/ruby-coffee-script"&gt;a gem&lt;/a&gt;, is &lt;a href="https://github.com/rails/ruby-coffee-script/issues/22#issuecomment-355821741"&gt;discouraged&lt;/a&gt; in favor of vanilla ES6 JavaScript or Typescript compiled via webpack (~2018),&lt;/li&gt;
&lt;li&gt;after being in beta for 3 years, &lt;a href="https://github.com/rails/sprockets#upgrading-to-sprockets-4x"&gt;Sprockets 4&lt;/a&gt; was released, with support for ES6 and source maps in the asset pipeline (2019), to serve people still hesitant with webpack,&lt;/li&gt;
&lt;li&gt;and finally &lt;a href="https://turbo.hotwire.dev/"&gt;Turbo&lt;/a&gt; which should become a part of Rails 7 (late 2020),&lt;/li&gt;
&lt;li&gt;oh and by the way, DHH &lt;a href="https://twitter.com/dhh/status/1334428951180173313"&gt;nowadays explores&lt;/a&gt; native ES6 modules which could allow ditching webpacker and returning to Sprockets for handling JavaScript again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What a ride! In retrospect, to us it really looks as if DHH and others struggled hard to make the JavaScript ecosystem and its goodies available in Rails but not until they were able to come up with a &lt;strong&gt;sufficiently elegant way&lt;/strong&gt; to do that (and if so, thanks for that üôè). Each iteration made sense and each newly adopted technique was a step forward but still, &lt;strong&gt;the overall churn of JavaScript styles has been tremendous&lt;/strong&gt;. While, in our experience, upgrading Rails itself &lt;a href="https://twitter.com/boramacz/status/1149590543485173760"&gt;got easier with each version&lt;/a&gt;, the same cannot be said about our JavaScript code. JavaScript in Rails from only a few years ago is &lt;em&gt;quite different&lt;/em&gt; from how it looks today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turbo-changes-everything"&gt;
  &lt;/a&gt;
  Turbo changes everything
&lt;/h2&gt;

&lt;p&gt;And here comes &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/"&gt;Hotwire Turbo&lt;/a&gt;&lt;/strong&gt; to change the situation again but this time with truly good promises. The reasoning for high hopes is simple: Turbo lets you create many of the reactive page patterns &lt;strong&gt;without having to write a single line of JavaScript&lt;/strong&gt;. JavaScript is now pushed behind the scenes and the main focus, even for describing reactive behavior, &lt;strong&gt;is on HTML&lt;/strong&gt; which is easy to author via Rails templates (or anything else). Custom JavaScript code, now preferably written as &lt;a href="https://stimulus.hotwire.dev/"&gt;Stimulus JS&lt;/a&gt; controllers, becomes just an icing on the cake if you need some more special interactions with a page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The new Basecamp‚Äôs flagship ‚Äì the &lt;a href="https://hey.com/"&gt;HEY.com&lt;/a&gt; service ‚Äì currently uses a total of ~60kB of JavaScript (zipped) while, in terms of reactivity, it feels like a real SPA. In contrast, our web uses twice as much JavaScript while mostly being  an ordinary click-and-wait-for-the-whole-page web, oh well‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So again, with Turbo, the problem with JavaScript code patterns becoming obsolete is &lt;strong&gt;effectively gone because in the future there will simply be no custom JavaScript code to upgrade&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;If it all looks that great, why were we hesitant so far about just adding the &lt;code&gt;turbo-rails&lt;/code&gt; gem and hitting the shiny new road? Before we actually tried to dive in, we had the following big concern: &lt;strong&gt;will Turbo work with Turbo Drive disabled?&lt;/strong&gt; &lt;a href="https://turbo.hotwire.dev/handbook/drive"&gt;Turbo Drive&lt;/a&gt;, the successor of Turbolinks, is a member of the Turbo family. This library is cool but &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/handbook/building"&gt;requires&lt;/a&gt; the JavaScript code to be structured in a certain way&lt;/strong&gt; which is often quite hard to achieve in an older project with a lot of legacy JavaScript. We haven‚Äôt really tried to bite the refactoring bullet yet, although we‚Äôre getting near. Until then, we need to be sure that our web will work OK without Turbo Drive.&lt;/p&gt;

&lt;p&gt;And we are happy to find out that the brief answer to this question is a &lt;strong&gt;big bold YES!&lt;/strong&gt; Read on if you‚Äôd like to know more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-turbo"&gt;
  &lt;/a&gt;
  Installing Turbo
&lt;/h2&gt;

&lt;p&gt;We won‚Äôt go into much detail here, the &lt;a href="https://turbo.hotwire.dev/handbook/installing"&gt;official procedure&lt;/a&gt; just worked for us. If you‚Äôre still using the Asset Pipeline for your JavaScript files, make sure it supports ES6 syntax (i.e., you‚Äôll need to upgrade to &lt;a href="https://github.com/rails/sprockets/blob/master/UPGRADING.md"&gt;Sprockets 4&lt;/a&gt;). You also need a recent-enough Rails version (Rails 6, it &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/turbo-rails.gemspec#L13"&gt;seems&lt;/a&gt;). Otherwise, all should be good.&lt;/p&gt;

&lt;p&gt;One small catch though: if you have &lt;em&gt;both&lt;/em&gt; the Asset Pipeline &lt;em&gt;and&lt;/em&gt; webpack enabled (as we do) and if you only want Turbo to be included in the webpack-managed bundles, you‚Äôll notice that &lt;code&gt;turbo.js&lt;/code&gt; gets precompiled also in the Asset Pipeline if you use the &lt;a href="https://github.com/hotwired/turbo-rails"&gt;&lt;code&gt;turbo-rails&lt;/code&gt; gem&lt;/a&gt;. It turns out that the gem automatically adds this file into the pipeline upon initialization. To prevent this (and save a bit of hassle with enabling ES6 in Sprockets), you can remove it again during the start of your Rails app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/application.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;# remove Turbo from Asset Pipeline precompilation&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after_initialize&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;precompile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"turbo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#disabling-turbo-by-default"&gt;
  &lt;/a&gt;
  Disabling Turbo by default
&lt;/h2&gt;

&lt;p&gt;If you try browsing your site now, after some time you‚Äôll likely notice various glitches and unexpected behavior ‚Äì that‚Äôs Turbo Drive (Turbolinks) kicking our legacy JavaScript butt. What we need to do now is &lt;strong&gt;disable Turbo by default and enable it selectively&lt;/strong&gt; only in places where we‚Äôll use Turbo Frames or Streams.&lt;/p&gt;

&lt;p&gt;We‚Äôll do the disabling part in a little conditional way that will help us when we try to make our JavaScript code Turbo Drive-ready later. To disable Turbo completely in all pages in Rails, you can put the following instructions in your layout files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/layouts/application.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@turbo&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"turbo-visit-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"reload"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"turbo-cache-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"no-cache"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;data-turbo=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@turbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instructions here are all controlled by the &lt;strong&gt;&lt;code&gt;@turbo&lt;/code&gt; variable&lt;/strong&gt;. If you do nothing else, this variable will be equal to &lt;code&gt;nil&lt;/code&gt; and will render the page with Turbo disabled. If, some bright day later, you manage to get your JavaScript to a better shape on a group of pages, you can selectively switch on Turbo (and thus Turbo Drive) for them using &lt;code&gt;@turbo = true&lt;/code&gt; in the corresponding controllers. We are about to explore this migration path ourselves soon.&lt;/p&gt;

&lt;p&gt;In particular, what the instructions mean is this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most important one is the &lt;strong&gt;&lt;code&gt;data-turbo="false"&lt;/code&gt;&lt;/strong&gt; attribute in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. It tells Turbo to &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/handbook/drive#disabling-turbo-drive-on-specific-links-or-forms"&gt;ignore&lt;/a&gt; all links and forms on the page&lt;/strong&gt; and leave them for standard processing by the browser. When Turbo decides whether it should handle a link click or form submit, it &lt;a href="https://github.com/hotwired/turbo/blob/22cbc4fca58ecf07e82d8a66e3afdd632dc45ab8/src/core/session.ts#L262"&gt;searches&lt;/a&gt; the target element and all its parents for the &lt;code&gt;data-turbo&lt;/code&gt; attribute and if it finds a &lt;code&gt;"false"&lt;/code&gt; value, it just backs off. This tree traversal is a great feature that will later allow us to selectively switch Turbo on, see below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other two meta tags are not strictly necessary, they serve as a kind of backup in case Turbo control ‚Äùleaks in‚Äú somewhere unexpectedly. The &lt;code&gt;turbo-visit-control&lt;/code&gt; meta tag &lt;a href="https://turbo.hotwire.dev/handbook/drive#ensuring-specific-pages-trigger-a-full-reload"&gt;forces&lt;/a&gt; Turbo to make a full page reload if it encounters an AJAX response (initiated outside of a Turbo Frame). Finally, the &lt;code&gt;turbo-cache-control&lt;/code&gt; meta tag &lt;a href="https://turbo.hotwire.dev/handbook/building#opting-out-of-caching"&gt;ensures&lt;/a&gt; that the page will never be stored in Turbo‚Äôs cache.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, so when you browse your site &lt;em&gt;now&lt;/em&gt;, it should behave exactly the same as you‚Äôre used to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-frames"&gt;
  &lt;/a&gt;
  Using Turbo Frames
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://turbo.hotwire.dev/handbook/frames"&gt;Turbo Frames&lt;/a&gt; act like self-replaceable blocks on a page: they capture link clicks and form submits, issue an AJAX request to the server and replace themselves with the same-named Turbo Frame extracted from the response. &lt;/p&gt;

&lt;p&gt;As we have Turbo globally disabled, we need to &lt;strong&gt;selectively enable it for each Turbo Frame&lt;/strong&gt;, again using a &lt;code&gt;data-turbo&lt;/code&gt; attribute, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/show.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;turbo: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"Edit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
...
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"Homepage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting the &lt;code&gt;data-turbo&lt;/code&gt; attribute to &lt;code&gt;"true"&lt;/code&gt; will make Turbo process all links and forms inside the Turbo Frame block, &lt;strong&gt;while still ignoring them anywhere outside the frame&lt;/strong&gt;. So, in our example above, the "Edit" link will be handled by Turbo (and clicking on it will render an inline edit form), whereas the "Homepage" link will still be processed normally by the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-streams-responses"&gt;
  &lt;/a&gt;
  Using Turbo Streams responses
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://turbo.hotwire.dev/handbook/streams"&gt;Turbo Streams&lt;/a&gt; allow the back-end to explicitly declare changes to be made on the client. Whenever the response from the server contains one or more &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; elements, Turbo automatically executes the actions within them, updating the given fragments of the page.&lt;/p&gt;

&lt;p&gt;Similarly to Turbo Frames, links or forms that expect a Turbo Stream response must be &lt;strong&gt;rendered in a Turbo-enabled context&lt;/strong&gt;, so again the only change needed to make Streams work is setting the &lt;code&gt;data-turbo&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/show.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;data-turbo=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;button_to&lt;/span&gt; &lt;span class="s2"&gt;"Approve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;approve_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the server responds with a Turbo Stream response, e.g. via a &lt;code&gt;respond_to&lt;/code&gt; block, Turbo will execute the page update commands, as in this somewhat ugly example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/comments_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;approve&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;approve!&lt;/span&gt;

  &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;turbo_stream: &lt;/span&gt;&lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                                &lt;span class="s2"&gt;"&amp;lt;p&amp;gt;approved!&amp;lt;p&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clicking on the "Approve" link will trigger Turbo (because it is enabled in that context), Turbo will make an AJAX request to the server, the server will respond with a &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; element containing a "prepend" action with the target of the given comment. Turbo will intercept this response and execute the action, effectively prepending the "approved!" text inside the comment div.&lt;/p&gt;

&lt;p&gt;This is all just normal Turbo Streams handling, all we had to do above that is enable Turbo for the particular page fragment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-streams-broadcasting"&gt;
  &lt;/a&gt;
  Using Turbo Streams broadcasting
&lt;/h2&gt;

&lt;p&gt;Turbo Streams don‚Äôt even need to respond to user interactions, they can also be used for broadcasting page updates asynchronously from the back-end.&lt;/p&gt;

&lt;p&gt;And, you know what? &lt;strong&gt;It just works, you don‚Äôt need to do anything special here.&lt;/strong&gt; For a simple example, add a broadcast command to your model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;after_create_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_prepend_to&lt;/span&gt; &lt;span class="s2"&gt;"comments"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶and structure your index template accordingly and a newly created comment will be automatically prepended to a list of comments on the index page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/index.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream_from&lt;/span&gt; &lt;span class="s2"&gt;"comments"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comments"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@comments&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How cool is that‚Ä¶?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mind-the-collision-with-rails-ujs"&gt;
  &lt;/a&gt;
  Mind the collision with Rails UJS
&lt;/h2&gt;

&lt;p&gt;If you used to render links with non-GET methods or ‚ÄùAJAXified‚Äú links with a &lt;code&gt;remote: true&lt;/code&gt; attribute, you need to know that these won‚Äôt work any more inside Turbo-enabled contexts. These functions are handled by &lt;a href="https://github.com/rails/rails/tree/main/actionview/app/assets/javascripts"&gt;Rails UJS&lt;/a&gt; and are &lt;a href="https://github.com/hotwired/turbo-rails#compatibility-with-rails-ujs"&gt;not compatible with Turbo&lt;/a&gt;. Non-GET links should be converted to inline forms using &lt;strong&gt;&lt;code&gt;button_to&lt;/code&gt;&lt;/strong&gt; and remote links should be refactored to normal links handled by Turbo.&lt;/p&gt;

&lt;p&gt;Other UJS features, such as disabling buttons or confirm dialogs continue to work normally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To sum this all up, Turbo seems to be perfectly usable even if your legacy JavaScript code does not allow you to switch on Turbo Drive (Turbolinks) right away. This is such a great news! Turbo enables us to &lt;strong&gt;gradually rewrite&lt;/strong&gt; (and effectively &lt;strong&gt;&lt;em&gt;remove&lt;/em&gt;&lt;/strong&gt;, for the most part) our old hand-written JavaScript. We can bring modern, highly reactive behavior to our newly built and updated pages without having to refactor all that rusty JavaScript prior to that.  &lt;/p&gt;

&lt;p&gt;Once the amount of JavaScript lowers substantially, we can take care of the remaining bits and switch on Turbo Drive globally to speed up the web experience even more.&lt;/p&gt;

&lt;p&gt;Overall we think this begins a new era in our front-end development and we are very excited about it! üíõ&lt;/p&gt;

</description>
      <category>rails</category>
      <category>javascript</category>
      <category>hotwire</category>
      <category>turbo</category>
    </item>
    <item>
      <title> Game Dev Digest ‚Äî‚ÄäIssue #91 - Shaders and Math, Oh My!</title>
      <author>Game Dev Digest - The Newsletter On Unity Game Dev</author>
      <pubDate>Fri, 23 Apr 2021 12:45:59 +0000</pubDate>
      <link>https://dev.to/gamedevdigest/game-dev-digest-issue-91-shaders-and-math-oh-my-4k9o</link>
      <guid>https://dev.to/gamedevdigest/game-dev-digest-issue-91-shaders-and-math-oh-my-4k9o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#issue-91-shaders-and-math-oh-my"&gt;
  &lt;/a&gt;
  Issue #91 - Shaders and Math, Oh My!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://gamedevdigest.com/digests/issue-91-shaders-and-math-oh-my.html"&gt;GameDevDigest.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqrjhKWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqrjhKWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-91.png" alt="Issue #91 - Shaders and Math, Oh My!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A shader deep dive you never knew you wanted till now! Plus learn some math, test and debug and other cool stuff. Enjoy!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://bronsonzgeb.com/index.php/2021/04/17/run-pong-on-the-gpu-with-compute-shaders-in-unity/"&gt;&lt;strong&gt;Run Pong on the GPU with Compute Shaders in Unity&lt;/strong&gt;&lt;/a&gt;  - This article is about adding interactivity and game logic to Compute Shaders. We‚Äôll do this by writing a version of Pong that runs on the GPU through Compute Shaders.&lt;br&gt;
&lt;a href="https://bronsonzgeb.com/index.php/2021/04/17/run-pong-on-the-gpu-with-compute-shaders-in-unity/"&gt;&lt;em&gt;Bronson Zgeb&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://halisavakis.com/shaderquest-part-5-shader-code-syntax-colors/"&gt;&lt;strong&gt;ShaderQuest Part 5: Shader code syntax &amp;amp; Colors&lt;/strong&gt;&lt;/a&gt;  - The first part is going to cover some stuff around the syntax of shader code languages while in the second part we‚Äôll take a look at how colors work in the context of shaders. In the second part we‚Äôll finally start modifying a shader and seeing stuff changing on our objects!&lt;br&gt;
&lt;a href="https://halisavakis.com/shaderquest-part-5-shader-code-syntax-colors/"&gt;&lt;em&gt;halisavakis.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cyanilux.com/tutorials/holofoil-card-shader-breakdown/"&gt;&lt;strong&gt;Holofoil Card Shader Breakdown&lt;/strong&gt;&lt;/a&gt;  - Lately I‚Äôve been experimenting a bit with holographic foil shader effects.&lt;br&gt;
&lt;a href="https://www.cyanilux.com/tutorials/holofoil-card-shader-breakdown/"&gt;&lt;em&gt;Cyanilux&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kelvinvanhoorn.wordpress.com/2021/04/20/supermassive-black-hole-tutorial/"&gt;&lt;strong&gt;Supermassive black hole tutorial&lt;/strong&gt;&lt;/a&gt;  - Due to the interest in my supermassive black hole (SMBH) shader I‚Äôve decided to write a tutorial on it.&lt;br&gt;
&lt;a href="https://kelvinvanhoorn.wordpress.com/2021/04/20/supermassive-black-hole-tutorial/"&gt;&lt;em&gt;Kelvin van Hoorn&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blogs.unity3d.com/2021/04/20/how-to-speed-up-2d-art-workflows-with-2d-psd-importer/"&gt;&lt;strong&gt;How to speed up 2D art workflows with 2D PSD Importer&lt;/strong&gt;&lt;/a&gt;  - 2D games are made from hundreds or even thousands of sprites. The 2D team at Unity is continuously working to improve round-tripping workflows, including the steps needed to import, and iterate on, assets. A major improvement is the 2D PSD Importer package. Read on to learn how to import Photoshop PSB files into your project and explore real use cases that can boost your productivity when working with 2D assets. &lt;em&gt;[Check out the &lt;a href="https://www.youtube.com/watch?v=b2bIh8WPsi4"&gt;video&lt;/a&gt; as well]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://blogs.unity3d.com/2021/04/20/how-to-speed-up-2d-art-workflows-with-2d-psd-importer/"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gamasutra.com/blogs/DerekLieu/20210419/380033/The_Simplest_Trailer_to_Make_For_Your_Steam_Page.php?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+GamasutraFeatureArticles+%28Gamasutra+Feature+Articles%29"&gt;&lt;strong&gt;The Simplest Trailer to Make For Your Steam Page&lt;/strong&gt;&lt;/a&gt;  - If you're a first time or hobbyist developer, Chris Zukowski from HowToMarketAGame.com recommends you make your Steam page as soon as possible. This is backed up by an official recommendation by Valve. &lt;em&gt;[For more, read &lt;a href="https://www.reddit.com/r/gamedev/comments/mthobe/i_made_a_trailer_that_got_7k_organic_views_and_1k/"&gt;I made a trailer that got 7K organic views and 1K wishlist in 3 days. Just wanted to share my techniques!&lt;/a&gt; by Rotorist, and &lt;a href="https://www.gamasutra.com/blogs/SimonCarless/20210419/380094/When_demos_can_radically_expand_your_games_discoverability.php"&gt;When demos can radically expand your game's discoverability&lt;/a&gt; by Simon Carless]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.gamasutra.com/blogs/DerekLieu/20210419/380033/The_Simplest_Trailer_to_Make_For_Your_Steam_Page.php?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+GamasutraFeatureArticles+%28Gamasutra+Feature+Articles%29"&gt;&lt;em&gt;Derek Lieu&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coffeebraingames.wordpress.com/2021/04/18/how-to-add-subscribers-to-mailchimp-within-your-unity-game/"&gt;&lt;strong&gt;How to add subscribers to Mailchimp within your Unity game&lt;/strong&gt;&lt;/a&gt;  - Mailchimp is one the most recommended mailing list management software/website out there. Thankfully, it has an API and I‚Äôm sure there‚Äôs a way to access it via C#. I‚Äôm writing this article to show you how so you don‚Äôt have to suffer like I did.&lt;br&gt;
&lt;a href="https://coffeebraingames.wordpress.com/2021/04/18/how-to-add-subscribers-to-mailchimp-within-your-unity-game/"&gt;&lt;em&gt;Coffee Brain Games&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blogs.unity3d.com/2021/04/16/on-demand-qa-testing-with-unity-automated-qa/"&gt;&lt;strong&gt;On-Demand QA Testing with Unity Automated QA&lt;/strong&gt;&lt;/a&gt;  - The Automated QA package enables users to record and playback touch or drag interactions with the UI of a Unity Project and optionally use recordings to drive Unity Tests ‚Äì in the editor, on an iOS or Android device.&lt;br&gt;
&lt;a href="https://blogs.unity3d.com/2021/04/16/on-demand-qa-testing-with-unity-automated-qa/"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ngtools.tech/uv/"&gt;&lt;strong&gt;NG Unity Versioner&lt;/strong&gt;&lt;/a&gt;  - Working on tools for the Editor? Not sure if the API you are using is available in latest versions? Use NG Unity Versioner to instantly check API range availability&lt;br&gt;
&lt;a href="https://twitter.com/_Mikilo_/status/1384477226398220291"&gt;&lt;em&gt;ngtools.tech&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pauliom.medium.com/auto-compile-time-support-for-unity-tags-16b3d9ea83db"&gt;&lt;strong&gt;Auto compile-time support for Unity Tags&lt;/strong&gt;&lt;/a&gt;  - I think anyone who has used Tags or Colliders in Unity will know that feeling when you are about to write code to utilize a tag and you are not sure of the spelling or case of the tag in question.&lt;br&gt;
&lt;a href="https://pauliom.medium.com/auto-compile-time-support-for-unity-tags-16b3d9ea83db"&gt;&lt;em&gt;Paul Marsh&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.gamedev.tv/data-persistence-in-unity/"&gt;&lt;strong&gt;Data Persistence in Unity without using PlayerPrefs class&lt;/strong&gt;&lt;/a&gt;  - If you've been using Unity for a while there's a high chance you've already used PlayerPrefs class to store data persistently across different game runs. In this post, I'd like to share with you a different solution.&lt;br&gt;
&lt;a href="https://blog.gamedev.tv/data-persistence-in-unity/"&gt;&lt;em&gt;blog.gamedev.tv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/game-development-for-beginners-unity-course/"&gt;&lt;strong&gt;Game Development for Total Beginners - Free Unity Course&lt;/strong&gt;&lt;/a&gt;  - We just published a 7-hour course on the freeCodeCamp.org YouTube channel that will teach you how to create games using Unity. This is the perfect course for a complete beginner.&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/game-development-for-beginners-unity-course/"&gt;&lt;em&gt;freecodecamp.org&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://80.lv/articles/creating-environments-using-unity-s-ai-assisted-creation-tools/"&gt;&lt;strong&gt;Creating Environments Using Unity's AI-Assisted Creation Tools&lt;/strong&gt;&lt;/a&gt;  - Juuso Voutilainen speaks with us about his Ai-assisted Creation Workflow and how Unity ArtEngine has become the backbone of his creative work. &lt;em&gt;[For more, read &lt;a href="https://blogs.unity3d.com/2021/04/20/from-tiling-to-styling-discover-the-basics-of-artengine-for-your-animation-assets/"&gt;From tiling to styling: Discover the basics of ArtEngine for your animation assets&lt;/a&gt; on the Unity blog]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://80.lv/articles/creating-environments-using-unity-s-ai-assisted-creation-tools/"&gt;&lt;em&gt;80.lv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://forum.unity.com/threads/unity-future-net-development-status.1092205/?utm_source=csharpdigest&amp;amp;utm_medium=email&amp;amp;utm_campaign=359"&gt;&lt;strong&gt;Unity Future .NET Development Status&lt;/strong&gt;&lt;/a&gt;  - We‚Äôve had a good bit of interest on various forum threads about Unity‚Äôs plans for C# and .NET in the future. Microsoft has been pushing the .NET ecosystem in a number of beneficial directions, and we at Unity want to bring those improvements to our users as soon as we can.&lt;br&gt;
&lt;a href="https://forum.unity.com/threads/unity-future-net-development-status.1092205/?utm_source=csharpdigest&amp;amp;utm_medium=email&amp;amp;utm_campaign=359"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unity3d.com/unity/alpha/2021.2.0a14"&gt;&lt;strong&gt;Unity 2021.2.0 Alpha 14&lt;/strong&gt;&lt;/a&gt;  - Unity 2021.2.0 Alpha 14 has been released.&lt;br&gt;
&lt;a href="https://unity3d.com/unity/alpha/2021.2.0a14"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=84A1FcQt9v4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P244eP3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/c7954da25f8eefd7bc9e39a056810d28.png" alt="How To Use Every Node in Unity Shader Graph"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=84A1FcQt9v4"&gt;&lt;strong&gt;How To Use Every Node in Unity Shader Graph&lt;/strong&gt;&lt;/a&gt;  - Shader Graph ships with over 200 nodes in the base package. With such a vast array of features at your disposal, it's easy to get lost when you're searching for the perfect way to make the shader you have in mind. This video shows every single node in action, complete with examples, explanations of what every input and output does and a few best practices for certain nodes!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=84A1FcQt9v4"&gt;&lt;em&gt;Daniel Ilett&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=LKaEMBLIw9s"&gt;&lt;strong&gt;Unity Shader Graph - Grow Vines | Trees Tutorial&lt;/strong&gt;&lt;/a&gt;  - Did you know that you can grow anything with Unity Shader Graph? Like an animation. A shader that can procedurally grow geometry. It's a very practical effect, used to grow vines for example. Or other 3d objects.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=LKaEMBLIw9s"&gt;&lt;em&gt;Gabriel Aguiar Prod.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=EH5epbeX3ek"&gt;&lt;strong&gt;Everything you need to know about prefabs in Unity | Prefabs Explained ft. Lego Microgame&lt;/strong&gt;&lt;/a&gt;  - In this detailed breakdown, you will learn everything you need to know about prefabs in Unity! With this 12 minute guide, prefabs will be explained in a step by step process, and the knowledge gained will save you time and headaches as you develop your own games. It will even help you implement better game design!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=EH5epbeX3ek"&gt;&lt;em&gt;Nicky B&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_61tlp2kOow"&gt;&lt;strong&gt;The Basics of Dot Product in Unity URP. Vectors, Angles, and Lighting! | Game Dev Tutorial&lt;/strong&gt;&lt;/a&gt;  - The Dot Product is a useful vector function which has many uses in shaders and gameplay programming. You can use it to calculate lighting, know when a projectile has reached it's apex, or calculate when a creature sees an object. In this video, I'll show you how to use it in various ways!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=_61tlp2kOow"&gt;&lt;em&gt;Ned Makes Games&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=81GecyuNapg"&gt;&lt;strong&gt;Local Multiplayer UI with the Multiplayer Event System - Unity Tutorial&lt;/strong&gt;&lt;/a&gt;  - In this video we will use the Multiplayer Event System from the new Input System in Unity to separate the UI for local multiplayer games.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=81GecyuNapg"&gt;&lt;em&gt;samyam&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=iQDGLaSI3Cg"&gt;&lt;strong&gt;How To Make A Multiplayer Game In Unity 2021.1 - Syncing Variables&lt;/strong&gt;&lt;/a&gt;  - This Unity Multiplayer tutorial will teach you how to implement Network Variables to sync data between Clients and the Server.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=iQDGLaSI3Cg"&gt;&lt;em&gt;Dapper Dino&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=eIZgPAZx56s"&gt;&lt;strong&gt;Potion Liquid Wobble Shader Graph - Easy Unity Tutorial&lt;/strong&gt;&lt;/a&gt;  - In this video we will show you how to create a Potion Liquid Wobble Shader Graph.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=eIZgPAZx56s"&gt;&lt;em&gt;Binary Lunar&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=rSiYL04H1jE"&gt;&lt;strong&gt;Simple Shader Graphs - 2D &amp;amp; 3D Distortion/Heatwave Effect [Refraction, What Is That?]&lt;/strong&gt;&lt;/a&gt;  - Check out this very simple yet FUNKY Distortion Shader Graph tutorial with in depth explanation made in Unity 2019 LTS.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rSiYL04H1jE"&gt;&lt;em&gt;Seth Funk&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=vDicVihdn4s"&gt;&lt;strong&gt;Make a Level Editor in 2 MINUTES in Unity! Tiny Tutorial #01&lt;/strong&gt;&lt;/a&gt;  - 6 lines of code for a functioning level editor.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=vDicVihdn4s"&gt;&lt;em&gt;Robert Thomson&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assets"&gt;
  &lt;/a&gt;
  Assets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/spring-sale?aid=1011l8NVc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vv2bY78D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/55885724-07ff-4d53-a33e-b7c0e8316a64.png" alt="Sprint into Spring Sale"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://assetstore.unity.com/spring-sale?aid=1011l8NVc"&gt;&lt;strong&gt;Sprint into Spring Sale&lt;/strong&gt;&lt;/a&gt;  - Save 50%: Sprint into Spring Sale is on now!&lt;/p&gt;

&lt;p&gt;500+ of our most popular assets at 50% off. Plus, get an extra 5% off on-sale purchases of $100 or more and 10% off on-sale purchases of $150 or more with coupon code SPRING2021. &lt;a href="https://assetstore.unity.com/spring-sale?aid=1011l8NVc"&gt;Check out the sale&lt;/a&gt; now! &lt;/p&gt;

&lt;p&gt;We are also bringing back our popular Daily Deals, one high value asset each day that is available at 70% off.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Today &lt;a href="https://assetstore.unity.com/packages/3d/props/guns/ultimate-fps-weapons-pack-64555?aid=1011l8NVc"&gt;Ultimate FPS Weapons Pack&lt;/a&gt; (Save $210)&lt;/li&gt;
&lt;li&gt;Saturday &lt;a href="https://assetstore.unity.com/packages/3d/animations/mega-animations-pack-162341?aid=1011l8NVc"&gt;Mega Animations Pack&lt;/a&gt; (Save $63)&lt;/li&gt;
&lt;li&gt;Sunday &lt;a href="https://assetstore.unity.com/packages/3d/environments/sci-fi/future-slums-built-in-176339?aid=1011l8NVc"&gt;Future Slums (Built-In)&lt;/a&gt; (Save $139)&lt;/li&gt;
&lt;li&gt;Monday &lt;a href="https://assetstore.unity.com/packages/3d/animations/fighter-pack-bundle-30804?aid=1011l8NVc"&gt;Fighter Pack Bundle&lt;/a&gt; (Save $83)&lt;/li&gt;
&lt;li&gt;Tuesday &lt;a href="https://assetstore.unity.com/packages/3d/props/weapons/low-poly-fps-pack-54947?aid=1011l8NVc"&gt;Low Poly FPS Pack&lt;/a&gt; (Save $105)&lt;/li&gt;
&lt;li&gt;Wednesday &lt;a href="https://assetstore.unity.com/packages/templates/systems/puzzle-match-kit-100199?aid=1011l8NVc"&gt;Puzzle Match Kit&lt;/a&gt; (Save $139)&lt;/li&gt;
&lt;li&gt;Thursday &lt;a href="https://assetstore.unity.com/packages/3d/environments/polyquest-worlds-full-pack-vol-1-74631?aid=1011l8NVc"&gt;Polyquest Worlds Full Pack Vol.1&lt;/a&gt; (Save $209)&lt;/li&gt;
&lt;li&gt;Friday &lt;a href="https://assetstore.unity.com/packages/templates/systems/ccg-kit-52739?aid=1011l8NVc"&gt;CCG Kit&lt;/a&gt; (Save $104)&lt;/li&gt;
&lt;li&gt;this is the final week of the sale, don't miss out!
&lt;a href="https://assetstore.unity.com/spring-sale?aid=1011l8NVc"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/needle-tools/demystify"&gt;&lt;strong&gt;Demystify for Unity&lt;/strong&gt;&lt;/a&gt;  - High performance understanding for stack traces in Unity&lt;br&gt;
&lt;a href="https://github.com/needle-tools/demystify"&gt;&lt;em&gt;needle-tools&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/EcsRx/ecsrx"&gt;&lt;strong&gt;EcsRx&lt;/strong&gt;&lt;/a&gt;  - EcsRx is a reactive take on the common ECS pattern with a well separated design using rx and adhering to IoC and other sensible design patterns.&lt;br&gt;
&lt;a href="https://github.com/EcsRx/ecsrx"&gt;&lt;em&gt;EcsRx&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/inc8877/RightStatsMonitor"&gt;&lt;strong&gt;RightStatsMonitor&lt;/strong&gt;&lt;/a&gt;  - Useful tool for displaying FPS with high precision. Very lightweight and fast. GC-free.&lt;br&gt;
&lt;a href="https://github.com/inc8877/RightStatsMonitor"&gt;&lt;em&gt;inc8877&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lordubbe/Timeline-Scene-Clip"&gt;&lt;strong&gt;Timeline-Scene-Clip&lt;/strong&gt;&lt;/a&gt;  - Provides the ability to dynamically load/unload scenes with Timeline using the Scene Clip Track. You can also just snatch the Scene Name Picker, which is a handy attribute to slap on a string, allowing you to pick a scene name so you don't accidentally misspell (or try to load a scene that is not in the build settings)!&lt;br&gt;
&lt;a href="https://github.com/lordubbe/Timeline-Scene-Clip"&gt;&lt;em&gt;lordubbe&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Javilingys/Math-For-Games-using-Unity"&gt;&lt;strong&gt;Math-For-Games-using-Unity&lt;/strong&gt;&lt;/a&gt;  - Mathematics for Computer Games Development using Unity.&lt;br&gt;
&lt;a href="https://github.com/Javilingys/Math-For-Games-using-Unity"&gt;&lt;em&gt;Javilingys&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/packages/tools/gui/ui-accessibility-plugin-uap-87935?aid=1011l8NVc"&gt;&lt;strong&gt;UI Accessibility Plugin (UAP)&lt;/strong&gt;&lt;/a&gt;  - &lt;em&gt;[now free!]&lt;/em&gt; The UI Accessibility Plugin (UAP) allows you to make your UI accessible to blind and visually impaired players with only a few clicks.&lt;br&gt;
&lt;a href="https://assetstore.unity.com/packages/tools/gui/ui-accessibility-plugin-uap-87935?aid=1011l8NVc"&gt;&lt;em&gt;MetalPop Games&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.humblebundle.com/books/head-first-programming-oreilly-books?partner=unity3dreport"&gt;&lt;strong&gt;HUMBLE BOOK BUNDLE: HEAD FIRST PROGRAMMING BY O'REILLY&lt;/strong&gt;&lt;/a&gt;  - Get a head-start on learning to program with O'Reilly in our newest bundle, Head First Programming by O'Reilly! Dive into ebooks like Head First Java, 2nd Edition, Head First Python, 2nd Edition, and Head First C#, 3rd Edition. Plus, your purchase helps support Code For America!&lt;br&gt;
US$772 WORTH OF AWESOME STUFF&lt;br&gt;
PAY $1 OR MORE&lt;br&gt;
&lt;a href="https://www.humblebundle.com/books/head-first-programming-oreilly-books?partner=unity3dreport"&gt;&lt;em&gt;Humble Bundle&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.humblebundle.com/software/vegas-pro-discover-your-endless-freedom-software?partner=unity3dreport"&gt;&lt;strong&gt;HUMBLE SOFTWARE BUNDLE: VEGAS PRO - DISCOVER YOUR ENDLESS FREEDOM&lt;/strong&gt;&lt;/a&gt;  - Everything you need to produce stunning videos with epic soundtracks: Enter the big screen with VEGAS Pro 16 Edit plus Hollywood effects like proDAD ReSpeedr and FXhome Enhance Ultra. Create your own songs with the Music Maker Score Edition, produce videos with VEGAS Movie Studio 16 and record &amp;amp; edit audio with SOUND FORGE Audio Studio 13. Discover your endless freedom with one of our best selling bundles ever! Plus, your purchase will support Stop AAPI Hate.&lt;br&gt;
US$756 WORTH OF AWESOME STUFF&lt;br&gt;
PAY $1 OR MORE&lt;br&gt;
&lt;a href="https://www.humblebundle.com/software/vegas-pro-discover-your-endless-freedom-software?partner=unity3dreport"&gt;&lt;em&gt;Humble Bundle&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.raywenderlich.com/21965623-announcing-our-deprecated-books-repo"&gt;&lt;strong&gt;Announcing our Deprecated Books Repo!&lt;/strong&gt;&lt;/a&gt;  - We‚Äôre excited to announce that we‚Äôve made our older, deprecated books free to everyone. Come see which books we‚Äôre releasing for all to enjoy! &lt;em&gt;[&lt;a href="https://github.com/raywenderlich/deprecated-books"&gt;github repo&lt;/a&gt; includes &lt;a href="https://cdn.raywenderlich.com/deprecated-books/bgsku/Beat_Em_Up_Game_Starter_Kit_Unity_v1.0.zip"&gt; Beat ‚ÄôEm Up Game Starter Kit - Unity&lt;/a&gt;, &lt;a href="https://cdn.raywenderlich.com/deprecated-books/uvr/Unity_AR_&amp;amp;_VR_by_Tutorials_v1.2.zip"&gt; Unity AR &amp;amp; VR by Tutorials&lt;/a&gt; and more]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.raywenderlich.com/21965623-announcing-our-deprecated-books-repo"&gt;&lt;em&gt;raywenderlich.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spotlight"&gt;
  &lt;/a&gt;
  Spotlight
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/dgCm2rWkb9w"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swi7rxiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/b57c12dca0c40f1e5a73133ba8b435bc.png" alt="Against the Storm"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://store.steampowered.com/app/1336490/Against_the_Storm/"&gt;&lt;strong&gt;Against the Storm&lt;/strong&gt;&lt;/a&gt; is a roguelite city builder set in a fantasy world where it never stops raining. Develop technologies that will help your beaver, human, and lizard citizens tackle destructive storms and extend the frontier of your civilization.&lt;/p&gt;

&lt;p&gt;If you'd like to get some advice on how to develop city-building games in Unity, message us on Reddit where we like to &lt;a href="https://www.reddit.com/r/unity/comments/moqpsh/today_i_made_a_small_system_that_allows_players/"&gt;share coding tips&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://store.steampowered.com/app/1336490/Against_the_Storm/"&gt;&lt;em&gt;Eremite Games&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can subscribe to the free weekly newsletter on &lt;a href="https://gamedevdigest.com"&gt;GameDevDigest.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity</category>
      <category>csharp</category>
      <category>news</category>
    </item>
  </channel>
</rss>
