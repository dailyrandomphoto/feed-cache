<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Do I need math to be a good developer?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 30 Aug 2021 15:25:27 +0000</pubDate>
      <link>https://dev.to/codesphere/do-i-need-math-to-be-a-good-developer-ila</link>
      <guid>https://dev.to/codesphere/do-i-need-math-to-be-a-good-developer-ila</guid>
      <description>&lt;p&gt;&lt;em&gt;Written by Dan Parry at Codesphere&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There seems to be a common perception that math and coding are intrinsically linked and to some extent, they are. Whether being good or bad at math affects how good a developer an individual is, however, is a whole other topic worth talking about.&lt;/p&gt;

&lt;p&gt;On one hand, there is the school of thought that math is indeed very important because programming involves complex calculations and anyone without a deep understanding of math will struggle to solve problems. The other extreme is, of course, the diametric opposite: that it is not important and math doesn't generally play a role when writing coding.&lt;/p&gt;

&lt;p&gt;I personally lean more towards the "no it is not" side of the argument, but‚Ä¶not entirely. While math is important (as it is in most things) it is not essential and certainly is not the key to being a good developer. Let's talk about why‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UelAQ1dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ov9lnt7c75jp49fn0z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UelAQ1dm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ov9lnt7c75jp49fn0z.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Having a basic understanding of general math will go a long way in helping you understand how to solve a given problem when coding. Calculating how many squares your grid needs to be long as it is wide for example, or the frequency at which your web animation should pop up and annoy the user are both mathematical issues to solve. The heavy lifting, however, the actual calculation, is always going to be the computer itself. There are of course edge cases, or in fact, whole areas of development, that are exceptions to this rule but we will come to them later.&lt;/p&gt;

&lt;p&gt;At its core, coding is problem-solving, and learning math is a great way to train your problem-solving skills. It is also true that computer languages are based on math, but so is music and Pythagoras rarely comes up when learning to play guitar.&lt;/p&gt;

&lt;p&gt;Learning math in school prepares you for problem-solving and develops skills that make you a better problem solver, but if you are not good at it that doesn't mean you're a bad developer, it just means you're bad at math.&lt;/p&gt;

&lt;p&gt;One of the first things I learned on my coding journey is that Google is my best friend. Retaining vast amounts of information is not a requirement and lazy developers are good developers. The same is true here, having a good grasp of math will give you the tools you need to make you a great developer but you can get by just fine without it.&lt;/p&gt;

&lt;p&gt;If you can instantly calculate a complex equation needed to solve an issue in your head that's great, but also, you can just identify the math needed and google it‚Ää-‚Ääthis is a valid strategy in development and you shouldn't be scared to embrace it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-can-you-improve-your-problemsolving-skills"&gt;
  &lt;/a&gt;
  How can you improve your problem-solving skills?
&lt;/h3&gt;

&lt;p&gt;Building a project is by far the best advice I can give here. Build something, it doesn't matter what, just that you try. You will come across issues you didn't expect, learn to solve them, and remember them next time. This is the best way (outside of a professional setting) to hone your skills as a developer beyond the basics of syntax and terminology.&lt;/p&gt;

&lt;p&gt;A whole project may be a little daunting or just time-consuming, and there are great tools you can use that are a little more accessible. Coding problems are a great example, check out codewars.com and try your hand at a Kata if you want to use your coding knowledge to solve a problem.&lt;/p&gt;

&lt;p&gt;Back to our topic of what, if any, math you will need to be a good developer. The answer is frustratingly vague, basic math is the short answer, the bar for entry if you will. The truth is, as a web dev you're probably not going to need that much math in your day to day and when you do, you can look it up!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#when-is-math-a-requirement"&gt;
  &lt;/a&gt;
  When is math a requirement?
&lt;/h3&gt;

&lt;p&gt;We mentioned earlier there are areas of development that require extensive knowledge of mathematical theory to work in and this is indeed true. Don't worry, they are industry-specific areas that you won't find yourself in by mistake and suddenly have to solve complex algorithmic issues on your first day as an intern at CodeSphere.&lt;/p&gt;

&lt;p&gt;Game development is one example, 3D modeling requires a good understanding of trigonometry and physics in order to design realistic characters and environments. Anything to do with Machine learning or AI is another, it requires high-level mathematical concepts to teach machines, or to build the mechanisms that allow the machine to learn I should say.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nFvwKJqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99c8pmyheryb7trfawyg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFvwKJqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99c8pmyheryb7trfawyg.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't intend to get into these fields, and you're awful at math, then don't worry your general life as a developer will probably be juuust 'fine'.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#in-short"&gt;
  &lt;/a&gt;
  In short‚Ä¶
&lt;/h3&gt;

&lt;p&gt;Math is not essential to being a great, or even a good, developer but it can't hurt to be good at it. If nothing else just to make sure you're being paid market value for your dev skills. Computers do a lot of the heavy lifting when it comes to calculations so a basic understanding of math and a good eye for problem-solving are all the tools you need to start your journey into the wonderful world of development.&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at &lt;a href="https://codesphere.com/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=mathfordev&amp;amp;utm_term=math%2Bwebdev%2Bdiscuss%2Bweb%2Blearning"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>coding</category>
      <category>math</category>
    </item>
    <item>
      <title>I‚Äôm joining Postman, focusing on Open Source üë©üèº‚ÄçüöÄ</title>
      <author>Alejandra Quetzalli üêæ</author>
      <pubDate>Mon, 30 Aug 2021 14:53:10 +0000</pubDate>
      <link>https://dev.to/alejandra_quetzalli/i-m-joining-postman-focusing-on-open-source-2986</link>
      <guid>https://dev.to/alejandra_quetzalli/i-m-joining-postman-focusing-on-open-source-2986</guid>
      <description>&lt;p&gt;Well‚Ä¶ the unexpected happened!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vib3oArc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hrj7a5ilqpggcvzgkz7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vib3oArc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hrj7a5ilqpggcvzgkz7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I joined Postman to focus on &lt;strong&gt;Open Source&lt;/strong&gt; technologies. &lt;/p&gt;

&lt;p&gt;(I've been informed this makes me a &lt;em&gt;Postmanaut&lt;/em&gt; üë©üèº‚ÄçüöÄ.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzPVJpCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu9wrq4jikfmuw1p457y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzPVJpCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu9wrq4jikfmuw1p457y.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKy78R7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quvif5txxnlvm6401ki7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKy78R7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quvif5txxnlvm6401ki7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1TzlRGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfv1am0ocsuu2nyaph95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1TzlRGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfv1am0ocsuu2nyaph95.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-new-job-about"&gt;
  &lt;/a&gt;
  What is the new job about?
&lt;/h2&gt;

&lt;p&gt;Being hired onto the Open Source (OSS) side of the Postman spaceship means I was &lt;strong&gt;not&lt;/strong&gt; hired to work on the Postman product docs. (So joining Postman all-hands meetings or events are &lt;strong&gt;not&lt;/strong&gt; required, cause I‚Äôm in one of the partner OSS teams.) &lt;/p&gt;

&lt;p&gt;Rather, I was hired directly by the OSS project maintainer team that owns the &lt;strong&gt;&lt;a href="https://www.asyncapi.com/"&gt;AsyncAPI&lt;/a&gt;&lt;/strong&gt; OSS initiative, which &lt;a href="https://www.linuxfoundation.org/en/press-release/linux-foundation-will-host-asyncapi-to-support-growth-and-collaboration-for-industrys-fastest-growing-api-spec/#:~:text=Menu%20Menu-,Linux%20Foundation%20Will%20Host%20AsyncAPI%20to%20Support%20Growth%20and,Industry's%20Fastest%2DGrowing%20API%20Spec&amp;amp;text=SAN%20FRANCISCO%2C%20Calif.%2C%20March,will%20host%20the%20AsyncAPI%20Initiative."&gt;moved under the Linux Foundation&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're curious to learn more, Postman‚Äôs CEO and co-founder Abhinav Asthana wrote a &lt;a href="https://blog.postman.com/asyncapi-joins-forces-with-postman-future-of-apis/"&gt;blog post&lt;/a&gt; in 2020 to announce their partnership with AsyncAPI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My job here as Senior Technical Writer will be to own the &lt;a href="https://www.asyncapi.com/docs/getting-started"&gt;documentation for AsyncAPI&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That said, I‚Äôll delve in a &lt;a href="https://www.youtube.com/asyncapi"&gt;few streams&lt;/a&gt; or conference talks as well, despite not being their DevRel person. New boss just happened to suggest the idea and I decided to remain open to it since it would be only OSS community focused events. (I‚Äôve been taking a purposeful break from corporate/startup conference talks for over a year because I needed and wanted a &lt;strong&gt;damn break&lt;/strong&gt;.) &lt;/p&gt;

&lt;p&gt;Thank you for the neat swag, Postman! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wZEEqQLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddiwdjvz18d19cluidca.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZEEqQLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddiwdjvz18d19cluidca.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8gSO_rmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j90uxpe7xi0al9vju1bt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gSO_rmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j90uxpe7xi0al9vju1bt.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---MJeZdjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlhmfkfx2uat3ixvlprx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---MJeZdjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlhmfkfx2uat3ixvlprx.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#butim-also-awaiting-my-asyncapi-swag-to-arrive-soon"&gt;
  &lt;/a&gt;
  But...I'm also awaiting my &lt;strong&gt;AsyncAPI swag&lt;/strong&gt; to arrive soon!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tt6i2KRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4bgn8cv2wp3ucnyl18g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tt6i2KRF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4bgn8cv2wp3ucnyl18g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIwbGIv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj81b3tbafoic77d52f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIwbGIv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj81b3tbafoic77d52f7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-8oJ3a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h0r68sk5q6iw6fsf3ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-8oJ3a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h0r68sk5q6iw6fsf3ha.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-does-postman-offer-any-cool-benefits"&gt;
  &lt;/a&gt;
  Wait, does Postman offer any cool benefits?
&lt;/h3&gt;

&lt;p&gt;Ooh you bet they do! üöÄüë©üèº‚ÄçüöÄ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;$240/month lunch stipend: ergo, &lt;strong&gt;FREE lunch for as long as I work here&lt;/strong&gt; üòúüçïüçï&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Up to $600/year reimbursed for wellness and health programs; I‚Äôm using mine for kickboxing &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Asynchronous communication via Slack&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remote WFH&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Very flexible schedule &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlimited PTO&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full medical benefits/401K account; they hope to start matching this year or next ü§ûüèΩ &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Charity/Foundation donation matching for an organization of your choice ü•∞; I will be choosing &lt;strong&gt;&lt;a href="https://womenforafghanwomen.org/"&gt;Women for Afghan Women&lt;/a&gt;&lt;/strong&gt;, because we need to continue supporting Afghan Women during the current humanitarian crisis unrolling in Afghanistan this year.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-asyncapi"&gt;
  &lt;/a&gt;
  What is AsyncAPI?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.asyncapi.com/"&gt;AsyncAPI&lt;/a&gt; is an OSS initiative that seeks to improve Event-Driven Architectures (EDAs), asynchronous API standardization, and asynchronous API developer tools. &lt;/p&gt;

&lt;p&gt;AsyncAPI was created to describe APIs that &lt;strong&gt;don‚Äôt&lt;/strong&gt; use HTTP. AsyncAPI has a specification similar to OpenAPI: it uses JSON schema for modeling published and subscribed objects. &lt;/p&gt;

&lt;p&gt;EDAs like AsyncAPI are broker-centric. A broker is a piece of infrastructure in charge of &lt;strong&gt;receiving messages&lt;/strong&gt; and &lt;strong&gt;delivering them&lt;/strong&gt;. Brokers can store messages until they are delivered, making EDAs quite resilient to failures. Some examples of brokers are &lt;em&gt;RabbitMQ&lt;/em&gt;, &lt;em&gt;Apache Kafka&lt;/em&gt;, &lt;em&gt;Solace&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Wanna try an AsyncAPI playground?&lt;br&gt;
&lt;a href="https://playground.asyncapi.io"&gt;https://playground.asyncapi.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTIf2H5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2xwsrdbvqo75zq5q66h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTIf2H5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2xwsrdbvqo75zq5q66h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XNDQRrb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky4a65x33zozto7rnl8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNDQRrb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky4a65x33zozto7rnl8d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;asyncapi: '2.1.0'
info:
  title: Count Signups
  version: 1.0.0
  description: This service counts user signups
channels:
  user/signedup:
    subscribe:
      message:
        $ref: '#/components/messages/UserSignedUp'
components:
  messages:
    UserSignedUp:
      payload:
        type: object
        properties:
          displayName:
            type: string
            description: user name
          email:
            type: string
            format: email
            description: user email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tRLZGp5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqvbjb7ta3m632s3w9ov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tRLZGp5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqvbjb7ta3m632s3w9ov.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PhPEW5Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zobk3hzcjvxux6fy6628.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PhPEW5Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zobk3hzcjvxux6fy6628.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-excited-about-joining-a-oss-team"&gt;
  &lt;/a&gt;
  Why am I excited about joining a üíØ% OSS team?
&lt;/h2&gt;

&lt;p&gt;Honestly, I am most excited about &lt;em&gt;not&lt;/em&gt; having a Product Owner that feels pressured by an Engineering organization. &lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It‚Äôs been my experience that when Product Managers (PMs) or Engineering orgs own Technical Writer (TW) teams, Developer Documentation often suffers by getting caught between the conflicting priorities of opposite  teams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Engineering orgs tend to assume dev audiences know at least some basics. (&lt;strong&gt;For the love of donuts üç© üç© üç©... can we stop assuming what readers do or don‚Äôt know, have or haven‚Äôt installed, and have or haven't tested before?!?!&lt;/strong&gt;) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Engineering orgs tend to be arrogant in their programming knowledge and not place enough value on detailed and beginner guides. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Engineering orgs tend to forget that DevDocs need to make sense to non-programmers. (i.e. Not all PMs know how to program and not all readers are developers. I mean, do you &lt;strong&gt;want&lt;/strong&gt; your Sales team empowered for success or don‚Äôt you?) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PMs tend to be too opinionated on voice, which consistently leads to stifling a tech writer‚Äôs individual style. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PMs can also focus too much on feature driven development that brings in more business vs prioritizing what the actual community freaking asked for.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PMs can lose perspective and forget that documentation should help ANYONE. That includes developers whose first language is &lt;em&gt;not&lt;/em&gt; English. Forcing TWs who learnt English as their &lt;strong&gt;second language&lt;/strong&gt; to ‚ú®‚ú® magically ‚ú®‚ú® write only in mind for USA audiences or English grammar enthusiasts is the &lt;strong&gt;opposite&lt;/strong&gt; of inclusion and diversity. PMs need to understand that it‚Äôs a balancing act to tackle DevDocs and that keeping it simple to read matters!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having TW teams report into PM (or Engineering) orgs removes true ownership from TWs. TW teams need to have sole jurisdiction to do the job right. As long as TWs are reporting to &lt;em&gt;another&lt;/em&gt; department, Developer Documentation goals will always be in competition with the parent org.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for coming to my TED talk.üé§&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NzIHWyCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k27m6uml95z79y46t8z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NzIHWyCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k27m6uml95z79y46t8z2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What‚Äôs next?
&lt;/h2&gt;

&lt;p&gt;I‚Äôm available for blog posts, articles, workshops, &lt;a href="https://www.youtube.com/asyncapi"&gt;videos&lt;/a&gt;, and talks about AsyncAPI, the AsyncAPI community, and how you too can &lt;a href="https://github.com/asyncapi"&gt;contribute to AsyncAPI&lt;/a&gt;.‚ô•Ô∏è &lt;/p&gt;

&lt;p&gt;My main focus is &lt;a href="https://www.asyncapi.com/docs/getting-started"&gt;writing our Docs&lt;/a&gt;, but new boss supports variety, so I‚Äôm open to it.üòÉüëçüèΩ &lt;/p&gt;

&lt;p&gt;I'll also make a point to help with community questions that come through our &lt;a href="https://asyncapi.slack.com/join/shared_invite/enQtNDY3MzI0NjU5OTQyLTM5NTlkYzFmZDQyMGVkNzVkOTRhMGU2N2VmMWRlOTdkNWE0YzdjMGQ2NzRlOWU1NGJkYjUyZDEzMzM3ZGYzYzM#/shared-invite/email"&gt;AsyncAPI Slack channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, we hold &lt;a href="https://github.com/asyncapi/community"&gt;biweekly OSS AsyncAPI interest community meetings&lt;/a&gt; on Tuesdays at 6:00pm CET. If you'd like to join me, all you have to do is &lt;a href="https://calendar.google.com/calendar?cid=dGJyYmZxNGRlNWJjbmd0OG9rdmV2NGxzdGtAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ"&gt;add our calendar&lt;/a&gt; or &lt;a href="https://groups.google.com/forum/#!forum/asyncapi-users"&gt;join our mailing list&lt;/a&gt; to get an invite to the next meeting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---wQOsn6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10vx5lgng835h6ag1z4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wQOsn6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10vx5lgng835h6ag1z4o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-me-know-how-i-can-help"&gt;
  &lt;/a&gt;
  Let me know how I can help!
&lt;/h2&gt;

&lt;p&gt;If you already have some &lt;strong&gt;AsyncAPI&lt;/strong&gt; questions to send my way, I'm only a DM away here and in my social media. &lt;/p&gt;

&lt;p&gt;I can't wait to meet and support all of you awesome OSS community members!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ELtrwHzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke1944y0nl0hag86cdwc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ELtrwHzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke1944y0nl0hag86cdwc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LU6_cOA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aaq0kxump80okvwwzwf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LU6_cOA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8aaq0kxump80okvwwzwf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>career</category>
      <category>eventdriven</category>
      <category>architecture</category>
    </item>
    <item>
      <title>The importance of UI/UX | Software Engineering</title>
      <author>Sanajit Jana</author>
      <pubDate>Mon, 30 Aug 2021 14:49:23 +0000</pubDate>
      <link>https://dev.to/sanajitjana/the-importance-of-ui-ux-software-engineering-1n0n</link>
      <guid>https://dev.to/sanajitjana/the-importance-of-ui-ux-software-engineering-1n0n</guid>
      <description>&lt;p&gt;The user interface is the front-end application view to which the user interacts in order to use the software. The software becomes more popular if its user interface is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attractive&lt;/li&gt;
&lt;li&gt;Simple to use&lt;/li&gt;
&lt;li&gt;Responsive in short time&lt;/li&gt;
&lt;li&gt;Clear to understand&lt;/li&gt;
&lt;li&gt;Consistent on all interface screens&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two types of User Interface:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#command-line-interface"&gt;
  &lt;/a&gt;
  Command Line Interface:
&lt;/h5&gt;

&lt;p&gt;Command Line Interface provides a command prompt, where the user types the command and feeds it to the system. The user needs to remember the syntax of the command and its use.&lt;/p&gt;

&lt;p&gt;Graphical User Interface: Graphical User Interface provides a simple interactive interface to interact with the system. GUI can be a combination of both hardware and software. Using GUI, the user interprets the software.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#user-interface-design-process"&gt;
  &lt;/a&gt;
  User Interface Design Process:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqRFWc6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn3asr7gshucitc7cs7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqRFWc6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn3asr7gshucitc7cs7t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The analysis and design process of a user interface is iterative and can be represented by a spiral model. The analysis and design process of the user interface consists of four framework activities.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User, task, environmental analysis, and modelling: Initially, the focus is based on the profile of users who will interact with the system, i.e. understanding, skill and knowledge, type of user, etc, based on the user‚Äôs profile users are made into categories. From each category, requirements are gathered. Based on the requirements developer understand how to develop the interface. Once all the requirements are gathered a detailed analysis is conducted. In the analysis part, the tasks that the user performs to establish the goals of the system are identified, described and elaborated. The analysis of the user environment focuses on the physical work environment. Among the questions to be asked are:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Where will the interface be located physically?&lt;/li&gt;
&lt;li&gt;Will the user be sitting, standing, or performing other tasks unrelated to the interface?&lt;/li&gt;
&lt;li&gt;Does the interface hardware accommodate space, light, or noise constraints?&lt;/li&gt;
&lt;li&gt;Are there special human factors considerations driven by environmental factors?&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Interface Design: The goal of this phase is to define the set of interface objects and actions i.e. Control mechanisms that enable the user to perform desired tasks. Indicate how these control mechanisms affect the system. Specify the action sequence of tasks and subtasks, also called a user scenario. Indicate the state of the system when the user performs a particular task. Always follow the three golden rules stated by Theo Mandel. Design issues such as response time, command and action structure, error handling, and help facilities are considered as the design model is refined. This phase serves as the foundation for the implementation phase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interface construction and implementation: The implementation activity begins with the creation of a prototype (model) that enables usage scenarios to be evaluated. As the iterative design process continues a User Interface toolkit that allows the creation of windows, menus, device interaction, error messages, commands, and many other elements of an interactive environment can be used for completing the construction of an interface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interface Validation: This phase focuses on testing the interface. The interface should be in such a way that it should be able to perform tasks correctly and it should be able to handle a variety of tasks. It should achieve all the user‚Äôs requirements. It should be easy to use and easy to learn. Users should accept the interface as a useful one in their work.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#golden-rules"&gt;
  &lt;/a&gt;
  Golden Rules:
&lt;/h5&gt;

&lt;p&gt;The following are the golden rules stated by Theo Mandel that must be followed during the design of the interface.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#place-the-user-in-control"&gt;
  &lt;/a&gt;
  Place the user in control:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Define the interaction modes in such a way that does not force the user into unnecessary or undesired actions: The user should be able to easily enter and exit the mode with little or no effort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide for flexible interaction: Different people will use different interaction mechanisms, some might use keyboard commands, some might use a mouse, some might use the touch screen, etc. Hence all interaction mechanisms should be provided.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow user interaction to be interruptible and undoable: When a user is doing a sequence of actions the user must be able to interrupt the sequence to do some other work without losing the work that had been done. The user should also be able to do undo operations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Streamline interaction as skill level advances and allow the interaction to be customized: Advanced or highly skilled users should be provided with a chance to customize the interface as the user wants which allows different interaction mechanisms so that the user doesn‚Äôt feel bored while using the same interaction mechanism.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hide technical internals from casual users: The user should not be aware of the internal technical details of the system. He should interact with the interface just to do his work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design for direct interaction with objects that appear on the screen: The user should be able to use the objects and manipulate the objects that are present on the screen to perform a necessary task. By this, the user feels easy to control over the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>design</category>
      <category>uiux</category>
      <category>sketch</category>
      <category>mockup</category>
    </item>
    <item>
      <title>Create a very Cool 404/503 Error Page with Laravel!</title>
      <author>IchiiP</author>
      <pubDate>Mon, 30 Aug 2021 14:47:46 +0000</pubDate>
      <link>https://dev.to/ichii731/create-a-very-cool-404-503-error-page-with-laravel-mhf</link>
      <guid>https://dev.to/ichii731/create-a-very-cool-404-503-error-page-with-laravel-mhf</guid>
      <description>&lt;p&gt;Hi. This time, let's create a cool 404/503... error page with Laravel.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#error-page-structure-in-laravel"&gt;
  &lt;/a&gt;
  Error page structure in Laravel
&lt;/h1&gt;

&lt;p&gt;Laravel can display the error page just by placing files in the specified directory without adding any special controller. So it's very easy to support.&lt;/p&gt;

&lt;p&gt;All you have to do is to add a file like 400.blade.php to  &lt;code&gt;resources-&amp;gt;view-&amp;gt;errors&lt;/code&gt; directory.&lt;br&gt;
In addition, I would like to add base.blade.php to the layout directory to make it a template.&lt;/p&gt;

&lt;p&gt;The file tree looks like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îî‚îÄresources
  ‚îî‚îÄviews
    ‚îî‚îÄerrors
           404.blade.php
      ‚îî‚îÄlayouts
              base.blade.php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#lets-make-it"&gt;
  &lt;/a&gt;
  Let's make it!
&lt;/h1&gt;

&lt;p&gt;Now let's actually make it using a template etc. &lt;br&gt;
&lt;strong&gt;A sample of the completed site has been uploaded to GitHub.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/ichii731/php-examples/tree/main/laravel_error-page"&gt;https://github.com/ichii731/php-examples/tree/main/laravel_error-page&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dev-environment"&gt;
  &lt;/a&gt;
  Dev Environment
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ubuntu20.04 LTS
PHP 7.4.3
Laravel Framework 6.20.26
Template Engine: Blade
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#404-page-template"&gt;
  &lt;/a&gt;
  404 page template
&lt;/h2&gt;

&lt;p&gt;This time, I changed a part of the template introduced in DEV Commynity and diverted it. The original template CodePen is here.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/LYxewMN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's a cool-looking template that counts up numbers and animates them to 404 and 503.&lt;/p&gt;

&lt;p&gt;It may look difficult at first glance, but it's a simple configuration using "for" statements in Javascript. We will use this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customize-template"&gt;
  &lt;/a&gt;
  Customize Template
&lt;/h2&gt;

&lt;p&gt;I did the following changes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Converted SCSS to CSS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Changed the file path for loading CSS, JS to be described in the &lt;strong&gt;asset helper&lt;/strong&gt;‚Üê&lt;code&gt;asset('filepath')&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Created a base blade to handle various errors, and then modified it to switch the display depending on the error content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The process of changing the text displayed depending on the error implement using &lt;strong&gt;@yield("")&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After typing the asset element, the file and directory structure looks like below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ShY3mL7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqz3qrfpfahl8ezi3exf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ShY3mL7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqz3qrfpfahl8ezi3exf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h1&gt;

&lt;p&gt;BaseÔºö&lt;strong&gt;resources/views/errors/layouts/base.blade.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ja"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;@yield('title')&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'{{ asset('&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;flexgrid.min.css&lt;/span&gt;&lt;span class="err"&gt;')&lt;/span&gt; &lt;span class="err"&gt;}}'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ asset('/css/style.css') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- partial:index.partial.html --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"xs-12 md-6 mx-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"countUp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;data-count=&lt;/span&gt;&lt;span class="s"&gt;"@yield('http-request')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@yield('title')&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@yield('message')&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@yield('detail')&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- partial --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"{{ asset('/js/in-view@0.6.1.js') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"{{ asset('/js/script.js') }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;404 ErrorÔºö&lt;strong&gt;resources/views/errors/404.blade.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'errors.layouts.base'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http-request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'404'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Page not found'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'This may not mean anything.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'detail'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"I'm probably working on something that has blown up."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For other problems like &lt;strong&gt;403&lt;/strong&gt; forbidden, &lt;strong&gt;500&lt;/strong&gt; Internal Server Error, &lt;strong&gt;503&lt;/strong&gt; Service Unavailable, etc, just copy and paste the above file and add something like &lt;code&gt;500.blade.php&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-try-it-out"&gt;
  &lt;/a&gt;
  Let's try it out
&lt;/h1&gt;

&lt;p&gt;Let's start a simple server with the artisan command. The actual behavior is like &lt;strong&gt;below GIF Image&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GaCTLraL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xig00re5f4ml2kjg0l3n.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GaCTLraL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xig00re5f4ml2kjg0l3n.gif" alt="ezgif-2-ecaa0e6b7f99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isn't it cool? Please refer to it ...&lt;/p&gt;

&lt;p&gt;I'll also post it on the repo on GitHub. Please try it. (GitHub pushes only laravel diff directories / files)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/ichii731/php-examples/tree/main/laravel_error-page"&gt;https://github.com/ichii731/php-examples/tree/main/laravel_error-page&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please also check the blog and Twitter&lt;a href="https://twitter.com/ichii731"&gt;@ichii731&lt;/a&gt; if you like :D&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>1UpBlitz ‚Äì A SaaS Starter for Blitzjs</title>
      <author>Dillon Raphael</author>
      <pubDate>Mon, 30 Aug 2021 14:45:36 +0000</pubDate>
      <link>https://dev.to/dillonraphael/1upblitz-a-saas-starter-for-blitzjs-5ek3</link>
      <guid>https://dev.to/dillonraphael/1upblitz-a-saas-starter-for-blitzjs-5ek3</guid>
      <description>&lt;p&gt;After working on this product for a few months, I promised to release 1UpBlitz on August 31st. But instead, I'm 1 day early!&lt;/p&gt;

&lt;p&gt;This is me working over the weekend, while I was a cottage. Where I was supposed to relax and chill.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--flYZhv1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/2837FyHZ/E-Cgvy-QWUAc-IEx-E.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--flYZhv1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/2837FyHZ/E-Cgvy-QWUAc-IEx-E.jpg" alt="Me Working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1UpBlitz is my first product that's been relatively successful.&lt;/p&gt;

&lt;p&gt;What is 1UpBlitz? 1UpBlitz is a SaaS starter built with blitzjs that will save you 60+ hours of work.&lt;/p&gt;

&lt;p&gt;What's Blitzjs? It's a full stack react framework. Think ruby on rails, but for React. You can learn more about it here &lt;a href="https://blitzjs.com/"&gt;https://blitzjs.com/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;1UpBlitz comes with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create multiple plans&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plan upgrading and downgrading&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Roles &amp;amp; Permissions for workspaces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Invite users to a workspace&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;File upload api routes and an included react-dropzone form component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smart slug generator&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search &amp;amp; Paginated table component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;End-to-end tested with cypress&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I'm having a release sale of 25% off over at producthunt. Check it out &lt;a href="https://www.producthunt.com/posts/1upblitz"&gt;https://www.producthunt.com/posts/1upblitz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blitzjs</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Chaos Engineering and AWS FIS</title>
      <author>Supratip Banerjee</author>
      <pubDate>Mon, 30 Aug 2021 14:29:16 +0000</pubDate>
      <link>https://dev.to/aws-builders/chaos-engineering-and-aws-fis-1acl</link>
      <guid>https://dev.to/aws-builders/chaos-engineering-and-aws-fis-1acl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-chaos-engineering"&gt;
  &lt;/a&gt;
  What is Chaos Engineering
&lt;/h3&gt;

&lt;p&gt;Chaos engineering is a process of stressing an application in test or production environment by creating disruptive events such as server outage, API throttling or latency and then observes how the system responds&lt;/p&gt;

&lt;p&gt;Then we implement our improvements, and we do that to prove or disprove our assumptions of our system capability to handle these disruptive elements.&lt;/p&gt;

&lt;p&gt;Rather these events happen at 3 am or in weekend or in cloud, we create them in a controlled environment during working hours when all our teams and engineers are ready to tackle the issue&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Chaos engineering improves he performance of application&lt;/li&gt;
&lt;li&gt;Uncovers hidden issues&lt;/li&gt;
&lt;li&gt;Exposes monitoring observability and alarm blind spots
Improves recovery time, operation scales and lot more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8sy89ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qnqisct1jmlgm80rl3y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8sy89ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qnqisct1jmlgm80rl3y.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-facts"&gt;
  &lt;/a&gt;
  Some facts
&lt;/h3&gt;

&lt;p&gt;Now I will be mentioning few numbers from a survey that happened this year on 2020s data by &lt;a href="https://www.gremlin.com/"&gt;Gremlin&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;34% of organizations are using chaos engineering officially and actively as a practice&lt;/li&gt;
&lt;li&gt;60% of the teams application availability has enhanced, which is between 99.5% and 99.99%&lt;/li&gt;
&lt;li&gt;around 23% of the teams/orgs have less than 1 hour as MTTR (which is mean time to recovery from any system outage or fatal failure)&lt;/li&gt;
&lt;li&gt;60% of them have run at least one chaos engineering attack&lt;/li&gt;
&lt;li&gt;For 61.4% orgs the high severity incidents have come down to 1‚Äì10 incidents per month&lt;/li&gt;
&lt;li&gt;There's been increased interest for chaos engineering practices across world and google search numbers speak for itself
Also if I filter orgs that have more than 10k employees, 70% of them does daily/weekly or monthly attacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source: Gremlin&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EfvSpUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vogkxswxmbuehlhls8fe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EfvSpUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vogkxswxmbuehlhls8fe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xuzr4qjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz0veyvc0w1klbl0od4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xuzr4qjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz0veyvc0w1klbl0od4v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EvShG0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha9gu44wcdmo3nmqkdw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EvShG0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ha9gu44wcdmo3nmqkdw2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8Ym5D2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v460r9zd0cwk5hen1r1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8Ym5D2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v460r9zd0cwk5hen1r1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xepRv27f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rc29kww19huetmoloao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xepRv27f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rc29kww19huetmoloao.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h3&gt;

&lt;p&gt;Chaos engineering has some challenges in terms of industry adoption&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;20% of the orgs are still not aware&lt;/li&gt;
&lt;li&gt;Other 20% have some other priorities over this&lt;/li&gt;
&lt;li&gt;Next 20% has no experience of it etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7D7cfXSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsmkl3x84z3fixz6gjfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7D7cfXSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsmkl3x84z3fixz6gjfe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evolution"&gt;
  &lt;/a&gt;
  Evolution
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In 2020, Chaos Engineering went mainstream and made headlines in Politico (hacking) and Bloomberg (Pentagon security issues).&lt;/li&gt;
&lt;li&gt;Gremlin hosted the largest Chaos Engineering event ever, with over 3,500 registrants.&lt;/li&gt;
&lt;li&gt;Github has over 200 Chaos Engineering related projects with 16K+ stars.&lt;/li&gt;
&lt;li&gt;And most recently, AWS released their own public Chaos Engineering offering, AWS Fault Injection Simulator.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#chaos-today"&gt;
  &lt;/a&gt;
  Chaos Today
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;60% of industry run Chaos Engineering attack.&lt;/li&gt;
&lt;li&gt;Along with large organizations, smaller teams are also adopting&lt;/li&gt;
&lt;li&gt;DevOps, SRE, Infra, Operations even Development teams are embracing the practise&lt;/li&gt;
&lt;li&gt;Many orgs are moving experimentation to production
459,548 attacks using Gremlin platform (2020 data)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#aws-fis"&gt;
  &lt;/a&gt;
  AWS FIS
&lt;/h3&gt;

&lt;p&gt;AWS Fault Injection Simulator is a fully managed tool that allows you to execute fault injection experiments on AWS, making it simpler to improve an application's speed, observability, and resilience. Fault injection experiments are employed in chaos engineering, which is the technique of straining an application in testing or production settings by introducing disruptive events such as a rapid spike in CPU or memory usage, monitoring how the system responds, and making changes. The fault injection experiment assists teams in creating the real-world conditions required to reveal hidden defects, monitoring blind spots, and performance bottlenecks that are difficult to detect in distributed systems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqG4Vubr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0a8l6bjg7pc1mpqnh6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqG4Vubr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0a8l6bjg7pc1mpqnh6p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Watch out the next blog for more details on AWS FIS&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>chaosengineering</category>
      <category>testing</category>
    </item>
    <item>
      <title>My dos and don‚Äôts for new projects</title>
      <author>Davide Vernizzi</author>
      <pubDate>Mon, 30 Aug 2021 14:28:57 +0000</pubDate>
      <link>https://dev.to/davidevernizzi/my-dos-and-don-ts-for-new-projects-20f9</link>
      <guid>https://dev.to/davidevernizzi/my-dos-and-don-ts-for-new-projects-20f9</guid>
      <description>&lt;p&gt;When starting a new project it is important to set things right from the beginning, so that you will not waste time later and will not be forced into something that is not the right direction. Here‚Äôs my personal list of thins I do and I don‚Äôt (mostly based on AWS because that‚Äôs what I know more, but any cloud provider is fine).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   Try to offload as much as possible and focus on your core features. You should not waste any single minute doing non-core things, life is too short to reinvent the wheel over and over. The list of non-core things is huge: email, notifications, authentication, payments, infrastructure, and so on. Also, people that spend their life focusing on a single problem have had more time to think about it, know some subtle things you could not, and, in general, have more firepower to tackle the problem.&lt;/li&gt;
&lt;li&gt;   Use Docker and anything that manages Docker as a service. Using Docker allows you to easily move your application through different stages (dev, QA, production). It also makes it easier for new hires to set up the development environment and start contributing to the project. I‚Äôve tried Amazon ECS and I have mixed feelings, but it does its job.&lt;/li&gt;
&lt;li&gt;   Use anything that keeps a database up and running. Managing a database is a living hell. It is difficult, tedious, and risky (nothing is annoying like filling up a database hard disk, and nothing is scaring like checking the database backup in the case of a disaster; you want both of these features managed by someone else). There is not a single good point about it that comes to my mind. I‚Äôve had a great experience with Amazon RDS and I can recommend it hands down.&lt;/li&gt;
&lt;li&gt;   Put CI/CD pipelines in place &lt;strong&gt;before&lt;/strong&gt; anything else. Pipelines are your best friend. Nowadays it‚Äôs easy to build a pipeline: they are somehow standardised (wrap your steps inside a Docker flow), and most of the git repositories have integrated which also provide a free tier. There is no excuse to postpone this task; do this first thing and it will save tons of time later.&lt;/li&gt;
&lt;li&gt;   The same goes for the testing framework. This is more complex than setting up pipelines; testing frameworks are less standard since they depend both on the tech stack you are using and on how you are using it. Nonetheless, you should write your tests before your code. I know that this is not always realistic, sometimes you just need to release something, or simply you are too tired/bored to write tests before. However, you must have a working testing environment &lt;strong&gt;before&lt;/strong&gt; you start writing code; also add a few examples on how to test your code (not code in general, but exactly the code you have in your repo). The idea here is to do that extra mile that goes from the testing framework tutorial to have it running in your case so that anyone can easily add the tests you didn‚Äôt write upfront when you were in hurry. These two things might slow your first commit but will speed up starting from the second.&lt;/li&gt;
&lt;li&gt;   Find services that allow you to delegate whole chunks of application. For example, don‚Äôt config an email service, use SendGrid. Remember to wrap it, so that it is easy to change it later without modifying every place where it is used.&lt;/li&gt;
&lt;li&gt;   Resist fancy tech unless you really need it. You probably don‚Äôt need NoSQL, K8S, Kafka, and so on. They are powerful tools, designed for complex scenarios that might not fit your needs, at least at the beginning of a project. Also, they are difficult to use, integrate and maintain, so they will pave the road for future problems ‚Ä¶&lt;/li&gt;
&lt;li&gt;   ... but use any technology you know. If you are good with K8S use it!&lt;/li&gt;
&lt;li&gt;   Don‚Äôt do your own authentication system; it‚Äôs really a &lt;a href="https://withblue.ink/2020/04/08/stop-writing-your-own-user-authentication-code.html"&gt;bad idea&lt;/a&gt; to do it yourself. There are many alternatives like Auth0, AWS Cognito, SuperTokens, KeyCloak, just use one. If you can use something open source, it‚Äôs better because you keep some control over your data (but, again, I‚Äôm biased here).&lt;/li&gt;
&lt;li&gt;   Try to avoid vendor lock-ins. It‚Äôs a difficult balance between execution velocity and vendor dependency. You should use any service that allows you to easily move away from it, and carefully evaluate services that keep you there. For instance, RDS is a no-brainer here because at its base it‚Äôs just a standard SQL server, so you can dump your data and move them. AWS Lambda is a much more difficult choice because it‚Äôs difficult to move to another provider once you have tens of lambdas deeply integrated with AWS API Gateway. Auth0 is another different level since it is somehow standard (all in all it provides you a JWT), but it keeps your data and it‚Äôs painless to migrate them. If you can, plan migration procedure for services, but don‚Äôt waste too much development time. In the end, it‚Äôs better to have a locked-in something that a completely free nothing (just in software development, not in life!)&lt;/li&gt;
&lt;li&gt;   I find it useful to write my backend in node, so that it is easy to do both frontend and backend, but many people don‚Äôt like this. Whatever you do, try to keep your stack simple, and make sure that anyone is ready to be up and running and contribute in a couple of hours top. Docker is your friend here too.&lt;/li&gt;
&lt;li&gt;   I‚Äôd suggest skiping microservices until you know more about your project. When you go for microservices keep in mind that it involves a lot of infrastructure (sound CI/CD, automatic deployment, and distributed logging &lt;em&gt;at least&lt;/em&gt;). Solve infrastructure &lt;strong&gt;before&lt;/strong&gt; going for microservices. Don‚Äôt ever dare to do microservices if your pipelines are not good enough (personal experience speaking here). &lt;a href="https://news.ycombinator.com/item?id=12509533"&gt;This comment&lt;/a&gt; on HN is 5 years old but still applies.&lt;/li&gt;
&lt;li&gt;   &lt;a href="https://repl.it/"&gt;repl.it&lt;/a&gt; has helped me many times to solve small algorithm issues without having the complexity of the project. If your stack is JS, there is an extension for VSC called Quokka that might help.&lt;/li&gt;
&lt;li&gt;   Follow the &lt;a href="https://12factor.net/"&gt;12factor&lt;/a&gt;, if it applies. Smart people carefully thought about it and it is full of wisdom. Think about production early in your development stage, even if you are not releasing anything yet. Production constraints might change something deep inside your code that will have a large impact. For instance, if your project will need to handle multi-tenants in production, it is better to have a multi-tenant-capable database code before writing tens of services that will interact with the database. Also, if you need to scale services on multiple servers, your code shouldn‚Äôt be much stateful. The 12factor helps you to avoid some pitfalls (like not fetching configuration from environment variables), but you should think also beyond this.&lt;/li&gt;
&lt;li&gt;   When in doubt, wrap it. If you are not sure you can use a service, or follow a given approach, if possible, wrap it into a function. Later on, you can re-implement the function without changing everything else. I know this is a best practice and everyone knows it, but it‚Äôs good to remind it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I‚Äôve learned each one of these points by hitting walls and earning sleepless nights. I hope that by sharing this I can help others to avoid some troubles and to release faster and better.&lt;/p&gt;

</description>
      <category>tips</category>
      <category>opinion</category>
    </item>
    <item>
      <title>Backend Operations in PHP from 0 to Hero(Pt. 2 passing variables and user input)</title>
      <author>Code_Jedi</author>
      <pubDate>Mon, 30 Aug 2021 14:28:56 +0000</pubDate>
      <link>https://dev.to/code_jedi/backend-operations-in-php-from-0-to-hero-pt-2-passing-variables-and-user-input-23gi</link>
      <guid>https://dev.to/code_jedi/backend-operations-in-php-from-0-to-hero-pt-2-passing-variables-and-user-input-23gi</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/code_jedi/backend-operations-in-php-from-0-to-hero-pt-1-simple-operations-pop"&gt;last tutorial&lt;/a&gt;, we made a PHP script that performs simple backend operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In part 2, we'll be making a PHP script that will perform customizable backend operations by getting user input and passing it to our backend script&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started!
&lt;/h3&gt;

&lt;p&gt;First, let's create a form that will accept a &lt;code&gt;url&lt;/code&gt; and a &lt;code&gt;tag&lt;/code&gt; parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;title&amp;gt;Simple operations&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;form method="post" action="results.php"&amp;gt;
  url: &amp;lt;input type="text" name="url"&amp;gt;&amp;lt;br&amp;gt;
  tag: &amp;lt;input type="text" name="tag"&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;button type="submit" &amp;gt;Submit&amp;lt;/button&amp;gt;
  &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Once these parameters are accepted, they will passed-on to &lt;code&gt;results.php&lt;/code&gt;, here's how it will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
$url = $_POST["url"];
$tag = $_POST["tag"];
$output = exec("python3 op1.py $url $tag");
echo("&amp;lt;h1&amp;gt;$output&amp;lt;/h1&amp;gt;");
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's going on here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, &lt;code&gt;results.php&lt;/code&gt; defines the &lt;code&gt;$url&lt;/code&gt; and &lt;code&gt;$tag&lt;/code&gt; variables as the ones passed-on by the form we made earlier.&lt;/li&gt;
&lt;li&gt;It then executes &lt;code&gt;op1.py&lt;/code&gt; using the &lt;a href="https://www.php.net/manual/en/function.exec.php"&gt;exec function&lt;/a&gt; and passes the &lt;code&gt;$url&lt;/code&gt; and &lt;code&gt;$tag&lt;/code&gt; variables to &lt;code&gt;op1.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It finally echos the output of this exec function inside an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#heres-where-the-magic-happens"&gt;
  &lt;/a&gt;
  Here's where the magic happens
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;results.php&lt;/code&gt; passes the &lt;code&gt;$url&lt;/code&gt; and &lt;code&gt;$tag&lt;/code&gt; variables to &lt;code&gt;op1.py&lt;/code&gt;, executes the python script and returns it's output.&lt;/p&gt;

&lt;p&gt;One big question you might have is: &lt;br&gt;
&lt;em&gt;&lt;strong&gt;"How is python able to work with PHP variables?"&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1LDqGKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nis82hah8kjn48ruzer.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1LDqGKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nis82hah8kjn48ruzer.gif" alt="What?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Using the &lt;code&gt;sys&lt;/code&gt; library.&lt;br&gt;
Let me show you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sys
import requests
from bs4 import BeautifulSoup

url=sys.argv[1]
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
element = soup.find('body').find(sys.argv[2])
print(element)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a python script which scrapes webpages for certain HTML tags such as &lt;code&gt;h1&lt;/code&gt; &lt;code&gt;div&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;, and outputs the text contents within the first occurrence of the specified HTML tag within the webpage.&lt;/p&gt;

&lt;p&gt;As you might remember, &lt;code&gt;results.php&lt;/code&gt; passed first the &lt;code&gt;$url&lt;/code&gt; variable, then the &lt;code&gt;$tag&lt;/code&gt; variable, therefor, when we define the &lt;code&gt;url&lt;/code&gt; variable in our python script, we call &lt;code&gt;sys.argv[1]&lt;/code&gt; to in turn get the first variable that was passed by the PHP script, which is the &lt;code&gt;$url&lt;/code&gt; variable.&lt;/p&gt;




&lt;p&gt;Next, when defining the tag which we want to scrape for text contents within the specified URL's webpage, we call &lt;code&gt;sys.argv[2]&lt;/code&gt; to get the second variable passed by &lt;code&gt;results.php&lt;/code&gt;, which is the &lt;code&gt;$tag&lt;/code&gt; variable.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-same-can-be-done-with-nodejs-like-so"&gt;
  &lt;/a&gt;
  The same can be done with Node.js like so:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;results.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
$url = $_POST["url"];
$tag = $_POST["tag"];
$output = exec("url=$url tag=$tag node op1.js");
echo("&amp;lt;h1&amp;gt;$output&amp;lt;/h1&amp;gt;");
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;op1.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('URL: ' + process.env.url + ' | tag: ' + process.env.tag)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5LGicE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s2jvnljb5dntxctch70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5LGicE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s2jvnljb5dntxctch70.png" alt="Node.js output"&gt;&lt;/a&gt;&lt;/p&gt;





&lt;p&gt;Full code:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;title&amp;gt;Simple operations&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;form method="post" action="results.php"&amp;gt;
  url: &amp;lt;input type="text" name="url"&amp;gt;&amp;lt;br&amp;gt;
  tag: &amp;lt;input type="text" name="tag"&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;button type="submit" &amp;gt;Submit&amp;lt;/button&amp;gt;
  &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;results.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
$url = $_POST["url"];
$tag = $_POST["tag"];
$output = exec("python3 op1.py $url $tag");
echo("&amp;lt;h1&amp;gt;$output&amp;lt;/h1&amp;gt;");
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;op1.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sys
import requests
from bs4 import BeautifulSoup

url=sys.argv[1]
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
element = soup.find('body').find(sys.argv[2])
print(element)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Now if you open a terminal in your project's directory, run &lt;code&gt;php -S localhost:8000&lt;/code&gt; and open the respective url in your browser, here's how our code should work:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVXNgf-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azuydiuqysatn25xn7m3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVXNgf-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azuydiuqysatn25xn7m3.png" alt="index.php"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;These form parameters are passed on to &lt;code&gt;results.php&lt;/code&gt; which the user is then redirected to&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlltY5vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7jzw48v76p692ol2zq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlltY5vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7jzw48v76p692ol2zq9.png" alt="results.php"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;code&gt;results.php&lt;/code&gt; then takes those parameters, passes them to &lt;code&gt;op1.py&lt;/code&gt;, executes the respective python script and returns it's output inside an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag which in this case is "PHP tutorial".&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;If you were to change the tag parameter to &lt;code&gt;p&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nty7NSUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4p58r0oibfo7hw793rpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nty7NSUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4p58r0oibfo7hw793rpm.png" alt="p parameter"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;op1.py&lt;/code&gt; will then scrape the first &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag within the specified URL:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LwoxNdTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/490hpaw60p0d1h0jx8kr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LwoxNdTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/490hpaw60p0d1h0jx8kr.png" alt="p element"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#you-can-now-experiment"&gt;
  &lt;/a&gt;
  You can now experiment!
&lt;/h3&gt;

&lt;p&gt;You can now implement this method of performing user customizable backend operations into your projects and PHP scripts when trying to perform backend operations.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Stick around for part 3 to learn about more complex, memory and time intensive backend operations in PHP!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Byeeeeüëã&lt;/p&gt;

</description>
      <category>php</category>
      <category>devops</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Get Weather {Day -17}</title>
      <author>Al Siam</author>
      <pubDate>Mon, 30 Aug 2021 14:21:54 +0000</pubDate>
      <link>https://dev.to/alsiamworld/get-weather-day-17-384j</link>
      <guid>https://dev.to/alsiamworld/get-weather-day-17-384j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-17-"&gt;
  &lt;/a&gt;
  100daysofcode { Day - 17 }
&lt;/h1&gt;

&lt;p&gt;Today I created a common temperature site using the OpenWeatherMap API. Just enter the name of your city and see the temperature.&lt;/p&gt;

&lt;p&gt;Preview: &lt;a href="https://alsiamworld.github.io/get-temperature"&gt;https://alsiamworld.github.io/get-temperature&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1Z_kCvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1zigbf6t131npq4qt14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1Z_kCvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1zigbf6t131npq4qt14.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-programming-devcommunity-webdev"&gt;
  &lt;/a&gt;
  javascript #programming #devcommunity #webdev
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cool Button Hover Effect Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 30 Aug 2021 14:20:53 +0000</pubDate>
      <link>https://dev.to/nikhil27b/cool-button-hover-effect-using-html-css-2n7e</link>
      <guid>https://dev.to/nikhil27b/cool-button-hover-effect-using-html-css-2n7e</guid>
      <description>&lt;p&gt;Hello, today I created an Amazing button hover Using HTML &amp;amp; CSS. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/RwgrRqQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How the 7 deadly sins üëø will make you an Accessibility Expert! üòá</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 30 Aug 2021 14:16:42 +0000</pubDate>
      <link>https://dev.to/inhuofficial/how-the-7-deadly-sins-will-make-you-an-accessibility-expert-27c7</link>
      <guid>https://dev.to/inhuofficial/how-the-7-deadly-sins-will-make-you-an-accessibility-expert-27c7</guid>
      <description>&lt;p&gt;I am a sinner, it is far more fun than being good. So let's see how we can use the 7 deadly sins to our advantage when it comes to accessibility.&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a href="https://levelup.gitconnected.com/7-capital-sins-of-a-software-developer-7cb66f6abeca"&gt;https://levelup.gitconnected.com/7-capital-sins-of-a-software-developer-7cb66f6abeca&lt;/a&gt;, but I thought being on the side of evil would be more fun!&lt;/p&gt;

&lt;p&gt;So let's jump in and see how being a sinner can be a good thing (oh and as this is one of my rants (sort of), be aware that any anger etc. is just for fun!)&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;Trigger warnings, click to expand&lt;/strong&gt;
  &lt;br&gt;
This article is a humorous take on Christianity, evil and the seven deadly sins. 

&lt;p&gt;If you are deeply religious you may find some things offensive in this article and I would suggest you leave now. &lt;/p&gt;

&lt;p&gt;Additionally there are some dark jokes and sexuality related content, just in case you are sensitive to that. &lt;/p&gt;

&lt;p&gt;Finally there is a link to a website that uses a lot of profanity at the end of the "Wrath" section, although there is no swearing in the article itself be careful of that link (it has a warning on it!) &lt;/p&gt;

&lt;p&gt;It is all safe for work, but just a heads up!&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jRjay_gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/JSMFNr5pjVsAAAAC/se7en-whats-in-the-box.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jRjay_gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/JSMFNr5pjVsAAAAC/se7en-whats-in-the-box.gif" alt="Whats in the box from Se7en the movie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pride"&gt;
  &lt;/a&gt;
  Pride
&lt;/h2&gt;

&lt;p&gt;Ah, pride, we should be humble and practice humility as accessibility experts surely?&lt;/p&gt;

&lt;p&gt;Nope!&lt;/p&gt;

&lt;p&gt;Building accessible products and services takes thought and a little bit of extra effort. &lt;/p&gt;

&lt;p&gt;So when you have built something that is accessible, boast about it, be proud! &lt;/p&gt;

&lt;p&gt;Tell the world how you built something that is better than that built by other "developers" (as how can you call yourself a developer and build things that don't work for everyone?!).&lt;/p&gt;

&lt;p&gt;I mean &lt;a href="https://www.vatican.va/content/vatican/en.html"&gt;God's own website (the Vatican official website)&lt;/a&gt; has 1157 detectable accessibility errors in Axe DevTools - that must be some kind of record! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSUQUuee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thcm2qf6jsbh5gn7bdi9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSUQUuee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thcm2qf6jsbh5gn7bdi9.jpg" alt="Axe DevTools reports 1157 accessibility errors on the Vatican website home page (in English)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So as pride is considered the greatest of all the sins, I am happy to say "I am proud that I did not build the Vatican website".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#greed"&gt;
  &lt;/a&gt;
  Greed
&lt;/h2&gt;

&lt;p&gt;I want a big house and a nice car, I like material possessions.&lt;/p&gt;

&lt;p&gt;Building an accessible website (and business) means that more people can access it, and spend money there!&lt;/p&gt;

&lt;p&gt;As 1 in 6 people have a disability and 1 in 10 people have a disability that affects the way they interact with your website it is a massive market that is being ignored!&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www.clickawaypound.com/downloads/cap19final0502.pdf"&gt;Click-Away Pound report&lt;/a&gt; estimates that UK businesses lose over ¬£17 billion a year to their more accessible competitors (notice I say more accessible, nobody is getting it right it is just some sites have fewer barriers!).&lt;/p&gt;

&lt;p&gt;Imagine if just one site was fully accessible, that site could become a power house and grab all of that money! &lt;/p&gt;

&lt;p&gt;So be greedy! Build a product that is better than everyone else's and have thousands of people with disabilities flock to your site as they move away from your inaccessible competition!&lt;/p&gt;

&lt;p&gt;Watch your bank balance grow and your material wealth increase. &lt;/p&gt;

&lt;p&gt;According to the heavenly virtues, we should be charitable not greedy. Well &lt;a href="https://www.christianaid.org.uk/"&gt;Christian Aid's website&lt;/a&gt; has 40 accessibility errors, so I choose greed and 0 accessibility errors every day of the week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j4MzH7gY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1xslt84jj6qersygnjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4MzH7gY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1xslt84jj6qersygnjr.png" alt="Axe DevTools reports 40 accessibility errors including 6 critical ones on the Christian Aid website home page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrath"&gt;
  &lt;/a&gt;
  Wrath
&lt;/h2&gt;

&lt;p&gt;Get angry when you see inaccessible websites. &lt;/p&gt;

&lt;p&gt;I recently had a &lt;a href="https://dev.to/inhuofficial/wethe15-great-shame-about-the-website-though-3k24"&gt;rant about the #WeThe15 website&lt;/a&gt; as it is a campaign about including people with disabilities, that had a completely inaccessible website. (It has improved a little after some guidance from a certain sinner who sent an angry email and how to fix things, but it still not great!)&lt;/p&gt;

&lt;p&gt;We are meant to be kind apparently. &lt;/p&gt;

&lt;p&gt;Well what has kindness brought? &lt;/p&gt;

&lt;p&gt;Over 25 years of little progress in the UK towards equality (over 30 years in the USA with the ADA). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://webaim.org/projects/million/#wcag"&gt;97.4% of website have accessibility issues that are detectable automatically&lt;/a&gt;...it seems that asking nicely and being forgiving and kind to people's ignorance and the barriers it creates is not the answer.&lt;/p&gt;

&lt;p&gt;So let out your inner rage monster and call out these inaccessible websites!&lt;/p&gt;

&lt;p&gt;Saying that, if the &lt;a href="https://www.disabilityrightsuk.org/"&gt;Disability Rights UK website&lt;/a&gt; can't get it right, what hope is there...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXs-FEgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93134t3u17dyhretrkb3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXs-FEgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93134t3u17dyhretrkb3.png" alt="Axe DevTools reports 72 accessibility errors on the Disability Rights UK website home page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, &lt;a href="https://ultimatemotherfuckingwebsite.com"&gt;I can build an evil site with 0 accessibility errors (warning, site contains many many swears so don't visit if you are offended by swearing!)&lt;/a&gt; quite easily.&lt;/p&gt;

&lt;p&gt;I choose the side of the sinners, as the sinners are winning!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#envy"&gt;
  &lt;/a&gt;
  Envy
&lt;/h2&gt;

&lt;p&gt;I am envious. Envious of companies who have managed to convince people that they are helping with crap products. &lt;/p&gt;

&lt;p&gt;AccessiBe is one of those companies, telling people that their accessible overlay will fix all of their problems (it makes things worse!). &lt;/p&gt;

&lt;p&gt;I am envious that I cannot get the reach they have in order to educate people that a website needs to be built with accessibility in mind, that it should be part of your Minimal Viable Product (MVP).&lt;/p&gt;

&lt;p&gt;I am envious that they can persuade people that they are helping, when they are actually making things worse.&lt;/p&gt;

&lt;p&gt;These overlays are so bad for accessibility that the disabled community created &lt;a href="https://www.accessibyebye.org/"&gt;a plugin that blocks AccessiBe and other overlays&lt;/a&gt; as they cause so many issues!&lt;/p&gt;

&lt;p&gt;I use my envy as a source of power, unlocking the secrets these companies use to get the positive coverage they do not deserve.&lt;/p&gt;

&lt;p&gt;Then I can spin their techniques for my evil ways of actually building things that are accessible! üò±&lt;/p&gt;

&lt;p&gt;Apparently I am meant to be patient rather than envious, pfff.&lt;/p&gt;

&lt;p&gt;I will not be patient any longer, I want to make change happen quickly!&lt;/p&gt;

&lt;p&gt;I mean, if I told you I built accessible websites, and had 405 accessibility errors on my home page, would you listen? (that is how many AccessiBe's homepage has!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGSSpnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqcqwb4xuo53merymdqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGSSpnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqcqwb4xuo53merymdqf.png" alt="Axe DevTools reports 405 accessibility errors on the AccessiBe website home page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lust"&gt;
  &lt;/a&gt;
  Lust
&lt;/h2&gt;

&lt;p&gt;Well disability just isn't sexy enough for lust right? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkZ9vVN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55dufmd3h3o9uaz91rkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkZ9vVN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55dufmd3h3o9uaz91rkd.png" alt="very attractive woman with double below knee amputations and prosthetic legs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I mean, I am sure many people would give their right arm for a woman like that. (and yes, that was a dark joke, I am evil remember?)&lt;/p&gt;

&lt;p&gt;But when it comes to lust and accessibility I am talking about a lust for power.&lt;/p&gt;

&lt;p&gt;This obviously links back to the greed and money part in some ways, but power is different. &lt;/p&gt;

&lt;p&gt;Imagine how much power you could wield if you had the backing of the &lt;strong&gt;1 billion disabled people&lt;/strong&gt; around the world.&lt;/p&gt;

&lt;p&gt;I want that backing, I lust after the power that brings, the power to shape the direction humanity is taking. The power to persuade politicians and business owners to listen.&lt;/p&gt;

&lt;p&gt;I want to use that power to force websites to be accessible or take them offline (imagine how quickly you would fix accessibility issues if that was a possibility...and if you build websites in the UK then you may want to start preparing...I am serious, I have something quite scary lined up!).&lt;/p&gt;

&lt;p&gt;I want to use that power to give the legal requirements (that already exists for websites to be accessible) some teeth, to force barriers to be removed in society! &lt;/p&gt;

&lt;p&gt;Yes, I am a monster, I lust after power and I lust after influence to make change happen. &lt;/p&gt;

&lt;p&gt;So I encourage you to also lust after influence, so that you can change people's thought process on accessibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gluttony"&gt;
  &lt;/a&gt;
  Gluttony
&lt;/h2&gt;

&lt;p&gt;Be a glutton! &lt;/p&gt;

&lt;p&gt;Over-consume accessibility articles and everything related to accessibility and disability.&lt;/p&gt;

&lt;p&gt;The more you consume on the subject the better your development practices will become. &lt;/p&gt;

&lt;p&gt;You will start thinking about people with Vestibular Disorders (e.g. sensitivity to movement), mobility impairments (e.g. accuracy issues with a mouse so they use a keyboard), people who use &lt;a href="http://www.inclusive.co.uk/articles/eye-gaze-say-it-with-your-eyes-a490"&gt;Eye Gaze technology&lt;/a&gt;, people who use dual or &lt;a href="https://www.nbt.nhs.uk/bristol-centre-enablement/services-at-centre/bristol-communication-aid-service/aac-switch-scanning"&gt;single switches to navigate your site&lt;/a&gt;, screen readers and people who use braille.&lt;/p&gt;

&lt;p&gt;Along the way you will learn about &lt;a href="https://www.w3.org/WAI/standards-guidelines/aria/"&gt;WAI-ARIA&lt;/a&gt;, semantic HTML etc. &lt;/p&gt;

&lt;p&gt;This will help you build sites that are SEO friendly (as you will structure things correctly), fast (as you will stop using bloated libraries, frameworks etc. that get in the way of accessibility) and more.&lt;/p&gt;

&lt;p&gt;So over-indulge, eat up all the accessible content you can!&lt;/p&gt;

&lt;p&gt;If you want a big juicy article to sink your teeth into to get you started, how does a 16,500 word listicle sound?:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility (a11y) tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jul 30 „Éª 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#sloth"&gt;
  &lt;/a&gt;
  Sloth
&lt;/h2&gt;

&lt;p&gt;It is good to be lazy!&lt;/p&gt;

&lt;p&gt;Accessibility is centred around using semantic elements and simplifying things to make the User Experience (UX) better (for everyone!). &lt;/p&gt;

&lt;p&gt;If you use native and semantic elements your life becomes 100 times easier as a developer, someone else has done all the hard work for you. &lt;/p&gt;

&lt;p&gt;Instead of hundreds of lines of code to build an accordion, use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"&gt;&lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;&lt;/a&gt;, they have all the functionality baked in and fall back gracefully in the few browsers that don't support them!&lt;/p&gt;

&lt;p&gt;For buttons, instead of using a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and having to add &lt;code&gt;tabindex="0"&lt;/code&gt;, handlers for keyboard interactions etc., &lt;a href="https://dev.to/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b"&gt;just use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thousands of developers have done most of the hard work for you. &lt;/p&gt;

&lt;p&gt;So engage the principles of sloth, be lazy, use what others have done before you so you have to work less!&lt;/p&gt;

&lt;p&gt;The only time you should be diligent (the opposite of sloth!) is ensuring that you apply accessible principles consistently, but there are &lt;a href="https://www.a11yproject.com/checklist/"&gt;checklists for that sort of thing&lt;/a&gt; to make life easy so you don't have to exert too much effort!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#father-forgive-me-for-i-have-sinned-and-will-continue-to"&gt;
  &lt;/a&gt;
  Father, forgive me for I have sinned! (and will continue to)
&lt;/h2&gt;

&lt;p&gt;This was a silly article (and I really had to stretch on a couple of the sins!), but with a serious message.&lt;/p&gt;

&lt;p&gt;You can make accessibility &lt;strong&gt;work for you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Remember that making things that are accessible benefits you as much as it does everyone else, you can do it for selfish reasons and still do some good!&lt;/p&gt;

&lt;p&gt;So go on, be a devil, put accessibility as your top priority and make it part of your MVP today!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-final-bit-of-evil-"&gt;
  &lt;/a&gt;
  One final bit of evil üëø!
&lt;/h3&gt;

&lt;p&gt;So this article can use the JavaScript tag (so people actually see it), here is a JS snippet!üòã&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;evilWin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to Zero Trust on AWS ECS Fargate</title>
      <author>Omer Hamerman</author>
      <pubDate>Mon, 30 Aug 2021 14:16:12 +0000</pubDate>
      <link>https://dev.to/omerxx/introduction-to-zero-trust-on-aws-ecs-fargate-38bl</link>
      <guid>https://dev.to/omerxx/introduction-to-zero-trust-on-aws-ecs-fargate-38bl</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;After a long while of researching for information on a solution I knew I wanted, it was quite hard to figure out what to choose, and how to use it. And so, this is basically the &lt;em&gt;guide I wish I had&lt;/em&gt;: &lt;strong&gt;what&lt;/strong&gt; I wanted and &lt;strong&gt;why&lt;/strong&gt;, the solution itself, and just as important - &lt;strong&gt;how&lt;/strong&gt; to implement a solution that's well designed, but poorly documented...&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h1&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h1&gt;

&lt;p&gt;With the rise of Google's &lt;a href="https://cloud.google.com/beyondcorp"&gt;beyond-corp&lt;/a&gt; approach, the concept of "Zero Trust" brought the Identity Aware Proxy to the world. In a nutshell, internal resources or tools sit in private inaccessible areas of the cloud, while a reverse proxy on top of them, offers access to permitted users only. The authentication often relies on an OAuth2 provider, but any kind of user directory does the trick.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h1&gt;

&lt;p&gt;Rarely do you enjoy a combination of more than two of these:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Quality user experience&lt;/li&gt;
&lt;li&gt;Ease of management / maintenance
The magic lies with benefiting from all of the bove with the same solution.&lt;/li&gt;
&lt;/ol&gt;



&lt;h4&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h4&gt;

&lt;p&gt;The key feature in an identity-aware proxy is the redundancy of VPN servers. VPN by its nature offers a single point of access to the internal network. Once authenticated, the user has the keys to the kingdom; all internal systems are reachable. In some cases, when &lt;a href="https://en.wikipedia.org/wiki/Role-based_access_control"&gt;RBAC&lt;/a&gt; is correctly implemented, authentication is still in the way and protects user access. However, the system is still accessible network-wise, making it susceptible to scans and attacks that might bypass the standard access point.&lt;/p&gt;

&lt;p&gt;With a reverse proxy, before the request is being authorized, all access is blocked as the routing didn't take place. The request was blocked before being rerouted forward.&lt;/p&gt;

&lt;p&gt;Another aspect of security comes from the fact that the user has one identity source to manage. If &lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication"&gt;MFA / 2FA&lt;/a&gt; has been enabled (&lt;a href="https://www.google.com/landing/2step/"&gt;and it should!!!&lt;/a&gt;), it stands for all future user authentication methods. More on that on the ease of access, and, ease of management.&lt;/p&gt;

&lt;p&gt;One clarification before moving on though; this is not to say that VPNs are the past, or that's something is broken with the concept of having one. Deployed correctly, VPN servers are incredible at what they do. They're ubiquitous for a reason. That said, most implementations lack basic access control, and those that do, more often than not, do not monitor internal queries once a user has been authenticated. In some cases, there are usually not too many alternatives. But for others - e.g. back-office web services, we can do better.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#ease-of-access"&gt;
  &lt;/a&gt;
  Ease of access
&lt;/h4&gt;

&lt;p&gt;This is the more straightforward aspect of things; a user with the organization directory only has to manage one identity. Assuming the user is keeping their passwords safe with something like &lt;a href="https://1password.com/"&gt;1Password&lt;/a&gt;, and a mandatory &lt;a href="https://www.google.com/landing/2step/"&gt;2 step verification&lt;/a&gt;, it makes everyone's life easier. The cookie generated from one successful authentication can be used to access all other systems under the proxy (given the user is permitted to do so).&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#ease-of-management"&gt;
  &lt;/a&gt;
  Ease of management
&lt;/h4&gt;

&lt;p&gt;One of the key pain points engineering / IT / Ops teams struggle with is user management when multiple systems and tools are involved in the development. Instead of managing a growing number of directories and user sets, &lt;a href="https://en.wikipedia.org/wiki/Single_sign-on"&gt;SSO&lt;/a&gt; offers a single point of authentication, allowing the management of only one directory. All that's left is to integrate SSO with the identity-aware-proxy to leverage both a single access point and the reuse of a cookie.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/buzzfeed/sso"&gt;SSO&lt;/a&gt; to the rescue!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;While &lt;a href="https://github.com/buzzfeed/sso"&gt;Buzzfeed's SSO&lt;/a&gt; is simply wonderful in terms of concept and implementation, its docs are somewhat &lt;strong&gt;incomprehensive&lt;/strong&gt; for the lack of a better word. The issue amplifies when trying to deploy on ECS Fargate. (Somewhat surprising given the nature of Buzzfeed's workload on ECS but ü§∑).&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  The How
&lt;/h1&gt;

&lt;p&gt;With that in mind, here's a guide / better-docs for implementing a  "Zero-trust proxy with SSO and cookie reuse on ECS Fargate"&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Probably the world record for the single line title with most buzzwords ever&lt;/em&gt;...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Buzzfeed's SSO is an implementation of two proxy entities, one service as a proxy to underlying systems and the other as an auth provider. The reason for the local auth provider is being able to serve one login for all systems, instead of having to re-authenticate with every different upstream. This is a cookie-reuse for the same purpose, which is a super elegant solution on behalf of Buzzfeed. &lt;a href="https://github.com/buzzfeed/sso/blob/main/docs/diagrams/sso_request_flow.png"&gt;Here's a complex, yet comprehensive visual diagram of the system&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As said, the system comprises of a proxy and an auth provider, namely &lt;code&gt;sso-proxy&lt;/code&gt; and &lt;code&gt;sso-authenticator&lt;/code&gt; (or &lt;code&gt;sso-auth&lt;/code&gt; in short). Both systems are configured by a set of environment variables, where the backend routing is described in an &lt;a href="https://github.com/buzzfeed/sso/blob/main/docs/sso_config.md"&gt;upstream Yaml config file&lt;/a&gt;. With growing usage, additional features, switches, parameters, and updates the project kind of grew out of basic understandable configuration docs. This is why we're here today.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;h4&gt;
  &lt;a href="#the-proxy"&gt;
  &lt;/a&gt;
  The Proxy
&lt;/h4&gt;

&lt;p&gt;This is the entity that serves as the front gate for incoming requests. If the incoming request is identified as valid, the request goes through and is routed based on &lt;code&gt;upstream_configs.yml&lt;/code&gt;. Otherwise, requests are redirected to the authenticator.&lt;/p&gt;

&lt;p&gt;I've chosen to build the container image with the environment wrapping Buzzfeed's image. This is for convenience only and can be shifted to any other method. Building the image with &lt;code&gt;docker build --build-arg client_id=xxx client_secret=xxx ...&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; buzzfeed/sso&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; client_id \&lt;/span&gt;
    client_secret \
    session_cookie_secret

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; UPSTREAM_CONFIGFILE="/sso/upstream_configs.yml" \&lt;/span&gt;
    UPSTREAM_CLUSTER="" \
    PROVIDER_URL_EXTERNAL="https://sso-auth.domain.co" \
    CLIENT_ID=$client_id \
    CLIENT_SECRET=$client_secret \
    SESSION_COOKIE_SECRET=$session_cookie_secret \
    SESSION_TTL_LIFETIME="1h" \
    UPSTREAM_SCHEME=http

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./upstream_config.yml /sso/upstream_configs.yml&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/bin/sso-proxy"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#the-authenticator"&gt;
  &lt;/a&gt;
  The Authenticator
&lt;/h4&gt;

&lt;p&gt;Receiving unauthenticated requests from the proxy, the authenticator is in charge of contacting the OAuth2 provider for authorization. According to configuration, if the requesting user has the relevant permissions i.e. authorized domain, correct sub-group, and so on, a cookie is set and redirected to the proxy, which in turn lets it through.&lt;/p&gt;

&lt;p&gt;Built-in the same manner as its twin, the authenticator is based on the same image, only uses a different &lt;code&gt;ENTRYPOINT&lt;/code&gt; and a different set of configuration variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; buzzfeed/sso&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; client_id \&lt;/span&gt;
    client_secret \
    session_cookie_secret \
    session_key

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; AUTHORIZE_EMAIL_DOMAINS=domain.co \&lt;/span&gt;
    AUTHORIZE_PROXY_DOMAINS=domain.co \
    SERVER_HOST=sso-auth.domain.co \
    CLIENT_PROXY_ID=$client_id \
    CLIENT_PROXY_SECRET=$client_secret \
    SESSION_COOKIE_SECURE=true \
    SESSION_COOKIE_SECRET=$session_cookie_secret \
    SESSION_COOKIE_EXPIRE=1h \
    SESSION_KEY=$session_key \
    PROVIDER_X_CLIENT_ID=$client_id \
    PROVIDER_X_CLIENT_SECRET=$client_secret \
    PROVIDER_X_TYPE=google \
    PROVIDER_X_SLUG=google \
    PROVIDER_X_GOOGLE_IMPERSONATE=admin@domain.co \
    PROVIDER_X_GOOGLE_CREDENTIALS=/sso/credentials.json \
    PROVIDER_X_GROUPCACHE_INTERVAL_REFRESH=1m \
    PROVIDER_X_GROUPCACHE_INTERVAL_PROVIDER=1m \
    LOGGING_LEVEL=debug

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./credentials.json /sso/credentials.json&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 4180&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/bin/sso-auth"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#oauth2-provider-of-choice-google"&gt;
  &lt;/a&gt;
  OAuth2 Provider of choice - Google
&lt;/h4&gt;

&lt;p&gt;Not much to elaborate on Google. It's workspace directory offers a wide range of user management feature and is considered a standard choice. Specifically Buzzfeed's SSO offers either Google or Okta as providers. If these are not the way your organization is managing user this post might be irrelevant for the most part. You can however, make use of the underlying system - &lt;a href="https://github.com/oauth2-proxy/oauth2-proxy"&gt;OAuth2-proxy&lt;/a&gt;, which will provide a similar experience, except the solution of a single locally managed authentication mechanism. Instead of having two components, the proxy is one system that operates against the backend provider.&lt;/p&gt;

&lt;p&gt;Instructions (although far from perfect) can be found &lt;a href="https://github.com/buzzfeed/sso/blob/main/docs/google_provider_setup.md"&gt;here&lt;/a&gt;.&lt;br&gt;
Important notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Please do go through all steps, even if some seem unnecessary; like not following step three and forward if group segregation is not a requirement. &lt;a href="https://github.com/buzzfeed/sso/blob/main/docs/google_provider_setup.md#3-set-up-a-service-account-for-google-groups-based-authorization"&gt;&lt;strong&gt;Do go all the way through it, and make sure you get the .json file at the end.&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Read carefully, make sure &lt;a href="https://github.com/buzzfeed/sso/blob/main/docs/google_provider_setup.md#authorizing-use-of-the-admin-sdk-api"&gt;admin SDK&lt;/a&gt; is enabled as shown&lt;/li&gt;
&lt;li&gt;Make sure that from Google's worskspace security side, the API controls&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;PROVIDER_X_GOOGLE_IMPERSONATE=admin@domain.co&lt;/code&gt; is set with an admin user&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;
  &lt;a href="#upstreams"&gt;
  &lt;/a&gt;
  Upstreams
&lt;/h4&gt;

&lt;p&gt;Upstreams are a configuration file where proxy routes are set. They take a public request form the web, and, if authenticated is routed to an internal (or not) service given some conditions are met.&lt;/p&gt;

&lt;p&gt;The configuration below describes two services and their internal routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vault&lt;/span&gt;
  &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vault.sso.domain.co&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vault.local:8200&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;allowed_groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;production@domain.co&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;snappass&lt;/span&gt;
  &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets.sso.domain.co&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets.local:5000&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;allowed_email_domains&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;domain.co&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each entry &lt;strong&gt;must&lt;/strong&gt; have a &lt;code&gt;default&lt;/code&gt; setting, other custom settings can follow&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;from&lt;/code&gt; &amp;amp; &lt;code&gt;to&lt;/code&gt; are the base, while &lt;code&gt;options&lt;/code&gt; are optional &lt;strong&gt;only if&lt;/strong&gt; one of the &lt;a href="https://github.com/buzzfeed/sso/blob/main/docs/sso_proxy_config.md#upstream"&gt;top three&lt;/a&gt; &lt;code&gt;UPSTREAM_DEFAULT_&lt;/code&gt; are set. &lt;em&gt;I've learned this one the hard way...&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Note how &lt;code&gt;allowed_groups&lt;/code&gt; or &lt;code&gt;allowed_email_domains&lt;/code&gt; are set and sufficient on their own. The first is permitting access for a specific directory group, while the latter offers a domain wide access with&lt;/li&gt;
&lt;li&gt;The entire set of &lt;code&gt;options&lt;/code&gt; can be found &lt;a href="https://github.com/buzzfeed/sso/blob/main/docs/sso_config.md"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h4&gt;

&lt;p&gt;The two services above should be deployed together in an internal network just as any other service would. The best practise here dictates a load balancer on top, to route traffic into the proxy / authenticator. The only thing to consider here is the &lt;em&gt;reachability&lt;/em&gt; of upstream services; a system that's considered "internal" and will be accessed through the proxy has to be accessible from the proxy itself. On the network level, this means that they either have to sit in the same virtual private network, or have a &lt;a href="https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html"&gt;peering&lt;/a&gt; between the networks. From the proxy's perspective, the IP &lt;strong&gt;and&lt;/strong&gt; the port should be in-reach and open. "Open" also means that they would be part of the same security group, or open a rule in the respective groups to be able to provide back and forth communication.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#ecs-and-service-discovery"&gt;
  &lt;/a&gt;
  ECS and Service Discovery
&lt;/h4&gt;

&lt;p&gt;Once the proxy is set, the user gains access, they should be able to communicate with endpoints only accessible internally within the private network, the &lt;a href="https://aws.amazon.com/vpc/"&gt;VPC&lt;/a&gt;. While we can redirect the request to an IP, those tend to change and the connection is then lost. An improvement can be an elastic IP that's guaranteed to stay fixed with the resource it was attached to. This brings a few new issues though; a. the resource itself can (and should) be rotated within time - we are dealing with containers after all. b. Elastic IPs will &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/"&gt;start being charged&lt;/a&gt; once their underlying resource no longer exists. Another improvement might be a human-readable DNS A record that's pointed at the same IP. Still, being readable and all, the inherent problem with a static IP remains.&lt;/p&gt;

&lt;p&gt;The solution - &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html"&gt;AWS Service Discovery&lt;/a&gt;. Put simply, the service discovery service attaches itself to an ECS target group, updating the live running tasks underneath with an internal endpoint managed by Route53. Meaning, the user can hit the same endpoint and trust it to resolve to a dynamic IP that's connected to an existing task.&lt;/p&gt;

&lt;p&gt;Here's a quick example using Terraform code (out of convenience only - this can be set manually or using any other language):&lt;/p&gt;

&lt;p&gt;A global resource of private dns namespace has to be crated first, before it can  host internl records:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w8lbprDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6fc9cykyfo1wqur8z8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8lbprDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6fc9cykyfo1wqur8z8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the namespace is ready, we can start creating private records, note the reference to the namespace inside &lt;code&gt;dns_config&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BdCFMUmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63xvn7wxamvmfyno5bm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BdCFMUmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63xvn7wxamvmfyno5bm1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And lastly, connecting the &lt;code&gt;aws_ecs_service&lt;/code&gt; resource to the &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_service#service_registries"&gt;service registry&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9_LcaVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1s8r5dnafjdnj2y91s9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9_LcaVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1s8r5dnafjdnj2y91s9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#alternatives"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h3&gt;

&lt;p&gt;The solution above is no the only one for zero trust solution. There are plenty out there, including &lt;a href="https://www.cloudflare.com/teams/"&gt;commecrial ones&lt;/a&gt; as well as many OSS alternatives. Buzzfeed's solution was the choice here for its elegance by remaining a one-stop authentication system that builds on top of Google's OAuth2 solution. Any kind of solution will usually do pretty much the same work, and as long as the concept of security is kept, the rest is implementation details.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#extending-the-power-of-zero-trust"&gt;
  &lt;/a&gt;
  Extending the power of Zero Trust
&lt;/h3&gt;

&lt;p&gt;Having the system deployed is a great solution for all things web. But sometimes real-life pop the security bubble; in some cases engineers will need to gain access to private resources by SSH, or other protocols (working aginst a Redis or a PostgreSQL instance). While Working directly against a resource in its protocol is not achievable, we can extend the reach by deploying web interfaces for &lt;a href="https://github.com/huashengdun/webssh"&gt;SSH&lt;/a&gt;, &lt;a href="https://www.pgadmin.org/"&gt;PGAdmin&lt;/a&gt;-like applications.&lt;/p&gt;

&lt;p&gt;I would address the engineering culture of accessing private resources in the first place, and how to create a workflow that removes the necessity of such operations, but that's material for another post. In the meantime, let's leave the notion of avoiding it when you can. And if you're serious, you may consider rotating those accessed instances altogether, marking them as &lt;em&gt;contaminated&lt;/em&gt; once they've been SSH'ed into and automating their removal. Food for thought...&lt;/p&gt;




&lt;p&gt;I hope this post helped with grasping the concept of zero trust and a real world implementation. This is some I struggled with when I tried incorporating it in our workflow, so I'm happy to share the experience and the "how to".&lt;/p&gt;

&lt;p&gt;If you find any mistakes in the information above, have any questions or comments please &lt;a href="https://twitter.com/0merxx"&gt;reach out&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thank you for reading üñ§ &lt;/p&gt;

</description>
      <category>devops</category>
      <category>security</category>
      <category>aws</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
