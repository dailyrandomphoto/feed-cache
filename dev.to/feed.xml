<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CloudSniper ‚Äì Cloud Security Operations</title>
      <author>kalilinux</author>
      <pubDate>Thu, 22 Apr 2021 20:55:52 +0000</pubDate>
      <link>https://dev.to/kalilinux/cloudsniper-cloud-security-operations-14ln</link>
      <guid>https://dev.to/kalilinux/cloudsniper-cloud-security-operations-14ln</guid>
      <description>&lt;p&gt;Cloud Sniper is a platform designed to manage Cloud Security Operations, intended to respond to security incidents by accurately analyzing and correlating cloud artifacts. It is meant to be used as a Cloud Security Operations platform to detect and remediate security incidents by showing a complete visibility of the company‚Äôs cloud security posture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/cloudsniper-cloud-security-operations"&gt;CloudSniper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>security</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Top 5 DEV Comments of the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 22 Apr 2021 20:51:45 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-42gn</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-42gn</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a weekly roundup of awesome DEV comments that you may have missed. You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;We love a good &lt;a href="https://dev.to/technoglot/what-s-the-best-dev-joke-or-pun-you-know-jei"&gt;dev joke&lt;/a&gt; and this one &lt;a class="mentioned-user" href="https://dev.to/jmdejager"&gt;@jmdejager&lt;/a&gt;
 commented takes the cake!  &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/jmdejager"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ga_Mn-7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---wONnKAG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/jmdejager"&gt;
        &lt;span class="comment-username"&gt; üê§ü•á Jasper de Jager&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/jmdejager/comment/1dfi4" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 16
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;This was just on twitter:&lt;/p&gt;

&lt;p&gt;where do Javascript developers wash their hands?&lt;/p&gt;

&lt;p&gt;in async... ü§£&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now this is definitely a &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-53nb"&gt;win&lt;/a&gt;! So glad to see some folks in our community are getting vaccinated üò≠ Congrats, &lt;a class="mentioned-user" href="https://dev.to/yoursunny"&gt;@yoursunny&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/yoursunny"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOQWVnwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qZJgOhyw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/242407/5dfdb123-238c-417a-9590-5747bf7ab561.jpeg" alt="yoursunny profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/yoursunny"&gt;
        &lt;span class="comment-username"&gt;Junxiao Shi&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/yoursunny/comment/1dg9l" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 17
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I won the raffle for a "leftover" vaccine. It reduces the chance of me dying this year by 40%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5fIou5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo37b5n2lemhzi1filhi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUF2P_pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--u5fIou5F--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo37b5n2lemhzi1filhi.jpeg" alt="I got vaccinated"&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes, all you need are some &lt;a href="https://dev.to/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m"&gt;VS Code Shortcuts&lt;/a&gt;, and &lt;a class="mentioned-user" href="https://dev.to/equiman"&gt;@equiman&lt;/a&gt;
 offers some really useful ones! Thanks for the tips üòä&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/equiman"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6l_Rykdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0rbmnYNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/60846/7c649d45-d4c7-4ed0-8ec1-8413e51a80d4.png" alt="equiman profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/equiman"&gt;
        &lt;span class="comment-username"&gt;Camilo Martinez&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/equiman/comment/1df8m" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 16
  &lt;/time&gt;

    ‚Ä¢ Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Apr 16&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Excellent recommendations! I would like to add this information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ctrl+i&lt;/code&gt; also does the same as &lt;code&gt;ctrl+space&lt;/code&gt; it was introduced recently.&lt;/li&gt;
&lt;li&gt;When using &lt;code&gt;ctrl+d&lt;/code&gt; and select more elements than expected, you can undo selections with &lt;code&gt;ctrl+u&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Okay, okay, only one more &lt;a href="https://dev.to/technoglot/what-s-the-best-dev-joke-or-pun-you-know-jei"&gt;dev joke&lt;/a&gt;, I promise. But this one &lt;a class="mentioned-user" href="https://dev.to/hugekontrast"&gt;@hugekontrast&lt;/a&gt;
 commented really deserves to be highlighted! Pure genius. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/hugekontrast"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFJUPycw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4nLZFY3q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/315855/94552dee-34da-436e-a7ab-48636a2a78d5.jpeg" alt="hugekontrast profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/hugekontrast"&gt;
        &lt;span class="comment-username"&gt;Ashish Khareüòé&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/hugekontrast/comment/1dglk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 17
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Found this on reddit! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HBYCgih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltv46anes16qwb0oqmyv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2MWNksR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1HBYCgih--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltv46anes16qwb0oqmyv.jpg" alt="Recursion joke "&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;We all &lt;a href="https://dev.to/xenoxdev/where-do-you-like-to-travel-the-most-3ef0"&gt;miss travel&lt;/a&gt;, and luckily pics like these make the wanderlust ease up. Thanks for the addition, &lt;a class="mentioned-user" href="https://dev.to/manpreet"&gt;@manpreet&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/manpreet"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciVWrHTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1YFIh3kr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/114627/2699e163-a248-4544-ac61-91d73bf5d942.jpg" alt="manpreet profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/manpreet"&gt;
        &lt;span class="comment-username"&gt;Manpreet virk&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/manpreet/comment/1dkbk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 21
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I often visit Chail- a quiet hill station in Himachal Pradesh (India). I just love its stunning panoramic views and calmness around. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYHmK7WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t18hkmhw3vcwmrlo56r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzVS5Kyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--kYHmK7WY--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t18hkmhw3vcwmrlo56r.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ‚úå&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>35 Principles for 35 Years</title>
      <author>swyx</author>
      <pubDate>Thu, 22 Apr 2021 20:45:31 +0000</pubDate>
      <link>https://dev.to/swyx/35-principles-for-35-years-1n2h</link>
      <guid>https://dev.to/swyx/35-principles-for-35-years-1n2h</guid>
      <description>&lt;p&gt;I turn 35 today. Here are 35 principles I have accumulated and try to live by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Life is too Short for Short Term Games&lt;/strong&gt;. We only have so many years for long term games to compound. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üíÅ‚Äç‚ôÇÔ∏è How to Play Long Term Games:&lt;br&gt;&lt;br&gt;Systems &amp;gt; Goals&lt;br&gt;Discipline &amp;gt; Motivation&lt;br&gt;Trust &amp;gt; Distrust&lt;br&gt;Principles &amp;gt; Tactics&lt;br&gt;Writing &amp;gt; Reading&lt;br&gt;Vulnerability &amp;gt; Confidence&lt;br&gt;North Stars &amp;gt; Low Hanging Fruit&lt;br&gt;Trends &amp;gt; News&lt;br&gt;Habits &amp;gt; Sprints&lt;br&gt;Questions &amp;gt; Answers&lt;br&gt;Problems &amp;gt; Solutions&lt;br&gt;People &amp;gt; Projects
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:06 AM - 10 Jul 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1281424520100737025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1281424520100737025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1281424520100737025" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Writing is Stupendously High Leverage.&lt;/strong&gt; It helps to organize my thoughts and learning (aka &lt;a href="https://twitter.com/swyx/status/1245281982797373441?lang=en"&gt;Building My Second Brain&lt;/a&gt;), and enables me to share great ideas even while I sleep (as a &lt;a href="https://twitter.com/swyx/status/1224538408132993026?lang=en"&gt;Friendcatcher&lt;/a&gt;). Blogging helped me sell $4k worth of an empty PDF on the day I decided to write my book because people trusted me, and it's led to multiple job opportunities from great companies that I would have otherwise struggled to be hired at.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn in Public&lt;/strong&gt;. &lt;a href="https://www.swyx.io/learn-in-public/"&gt;https://www.swyx.io/learn-in-public/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Good Enough is Better than Best&lt;/strong&gt;. In a world of infinite abundance you can lose yourself constantly chasing the hottest new thing. &lt;a href="https://twitter.com/swyx/status/1221129594146840577"&gt;Satisfice rather than Maximize.&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less is More&lt;/strong&gt;. Minimalism wins: Subtracting is harder than Adding. Quantity reduces perceived quality. Depth and whitespace stand out. (yes I realize the irony of this principle in a list of 35)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create Clarity.&lt;/strong&gt; Simple Explanations of What, Why, and How are extremely underrated and extremely useful. This is also a core skill of all leaders.  &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJXWU4FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1296609423574446080/k98tS5P6_normal.jpg" alt="Coding Career Community profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Coding Career Community
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/coding_career"&gt;@coding_career&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ‚ÄúYou can‚Äôt call yourself a leader by coming into a situation that is by nature uncertain, ambiguous ‚Äî and create confusion. You have to create clarity where none exists.‚Äù&lt;br&gt;&lt;br&gt;‚Äî‚ÄâSatya Nadella&lt;br&gt;&lt;br&gt;dynamite leadership quote, in a dynamite article for engineering leaders. &lt;a href="https://t.co/8sReCx8W93"&gt;twitter.com/sarah_edo/stat‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:02 PM - 15 Apr 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Sarah Drasner
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/sarah_edo"&gt;@sarah_edo&lt;/a&gt;

        &lt;/div&gt;
        Well, here goes nothin‚Äô! I was asked to open source the career ladders I used for my organization, I hope it‚Äôs a helpful resource for people:

üìù Article: https://t.co/wTGlxse1Rn
üìç Site: https://t.co/slqF0ij1dZ

A little thread with some thoughts about this üßµ
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1382726094214758400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1382726094214758400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1382726094214758400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Optimize for Change&lt;/strong&gt;. Optimizing for anything else tends to make systems MORE fragile, not less. If you learn only one &lt;a href="https://twitter.com/swyx/status/1383516418205835264"&gt;lesson from Facebook's open source&lt;/a&gt;, learn this. &lt;a href="https://overreacted.io/optimized-for-change/"&gt;https://overreacted.io/optimized-for-change/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Seek First To Understand, Then To Be Understood.&lt;/strong&gt; &lt;a href="https://twitter.com/swyx/status/1218246107781832705"&gt;https://twitter.com/swyx/status/1218246107781832705&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Praise in Public, Criticize in Private&lt;/strong&gt;. As satisfying as it might be to dump on someone publicly, I need to remember how it makes them feel. Everything is &lt;em&gt;not&lt;/em&gt; awesome, and I hate people that fake positivity. But I can either help or make them feel bad about it and the former is more effective than the latter. Exception for companies and people that are actively harming or misleading the vulnerable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build an Empathy Check Habit&lt;/strong&gt;. I can't take back an impulsive response that hurts someone. When I can't check with trusted friends, &lt;a href="https://mobile.twitter.com/swyx/status/1344687793851699200"&gt;I need to think before I tweet.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;People remember how you made them feel, before what you said&lt;/strong&gt;. A good story has more power than a good argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/swyx/status/1230021710470053889"&gt;&lt;strong&gt;Treat Others How They Want To Be Treated&lt;/strong&gt;.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Complete Truths are Not Welcome.&lt;/strong&gt; Most people are more interested in being entertained, sharing outrage, feeling good about themselves, or defending their reputation, than debating truth or improving themselves. Trying to change them is less effective than simply seeking out like minds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organize IRL Events&lt;/strong&gt;. You can do a lot to create excitement and connection in a community simply by organizing dinners and meetups and conferences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't offer unsolicited help.&lt;/strong&gt; Make Sure Help Is Wanted Before Offering It. Men - be especially wary about this when women are talking about their problems. Sometimes they just need support, not solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ask For Help More&lt;/strong&gt;. People are happy to help and like you more when they have helped you. Don't worry about showing weakness; you are getting something far more valuable in return.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Log Your Wins&lt;/strong&gt;. e.g. when you ship something big or small, or when someone says nice things about you. They can help when you are feeling emotionally down, or when writing a &lt;a href="https://jvns.ca/blog/brag-documents/"&gt;brag document&lt;/a&gt;. Help others celebrate their wins too. PS a &lt;strong&gt;brag slack channel&lt;/strong&gt; can serve as an OLTP store of personal wins.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don't End The Week With Nothing.&lt;/strong&gt; &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üÜï The Part Time Creator Manifesto&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/wFA7gsTWzt"&gt;swyx.io/part-time-crea‚Ä¶&lt;/a&gt;&lt;br&gt;&lt;br&gt;There's a lot of "quit your job, indie hack your way to freedom" on social media.&lt;br&gt;&lt;br&gt;I like my job. But I want to make too. There has to be a middle way. &lt;br&gt;&lt;br&gt;Quick thread üëá
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:33 PM - 14 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1371227946136993792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1371227946136993792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1371227946136993792" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pick Up What They Put Down.&lt;/strong&gt; Guarantee feedback by giving feedback. ****&lt;a href="https://www.swyx.io/PUWTPD"&gt;https://www.swyx.io/PUWTPD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Speak Succinctly&lt;/strong&gt;. Trailing sentences and double-barreled questions are hard to understand. Set the general direction and shut up. If they're off-track, interject.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Optimize for Retention, not Consumption&lt;/strong&gt;. We are the sum total of still-relevant knowledge we still remember, not the total of the volume of content we consume.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Illustrate Your Point&lt;/strong&gt;. Adding code samples or drawing 2x2's and system diagrams makes your idea much more effective. A picture &lt;em&gt;IS&lt;/em&gt; worth a thousand words!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Separate Your Identity from Your Work.&lt;/strong&gt; You can learn a lot on the Internet for &lt;a href="https://kentcdodds.com/chats-with-kent-podcast/seasons/01/episodes/you-can-learn-a-lot-for-the-low-price-of-your-ego-with-shawn-wang"&gt;the low, low price of $YOUR_EGO&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/swyx/status/1342896023350304768"&gt;&lt;strong&gt;Build Tools For Yourself&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Collect Questions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obsess on collecting good answers and you might be precise but irrelevant.&lt;/li&gt;
&lt;li&gt;Obsess on collecting good questions and you will be approximately right.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Systems &amp;gt; Goals&lt;/strong&gt;. You don't rise to the level of your goals. You fall to the level of your systems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Play Games You Cannot Win.&lt;/strong&gt; Our world is full of "winnable" games - likes, retweets, #1 of the day, employee of the month. External motivators destroy our intrinsic drive. You don't play infinite games to win. Only way to keep &lt;a href="https://twitter.com/swyx/status/968688836468453376"&gt;childlike creativity&lt;/a&gt; is to play games that you cannot win. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Your Calendar as a Todo List.&lt;/strong&gt; Normal todo lists don't force you to make tradeoffs. Sequence your work, set limits, and know when to decline or delegate tasks. When time block planning, eat your frog: Put First Things First. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3qj-lSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1360406256842797056/qhvO9V6x_normal.jpg" alt="swyx profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        swyx
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Your Calendar as Todo List:&lt;br&gt;&lt;br&gt;(why I'm getting into time block planning)
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:59 AM - 23 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1364107473724919809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1364107473724919809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1364107473724919809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Practice Stoicism&lt;/strong&gt;. It'll never stay as great as you want, it's never really as bad as you feel. This, too, shall pass.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Have a Productivity Keystone.&lt;/strong&gt; If you start a day unproductive, you are extremely likely to be unproductive the rest of the day. Instead, start off with something productive that you do every morning, you reinforce the idea that today is going to be a productive day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Incorporate.&lt;/strong&gt; Companies pay expenses before taxes, People pay taxes before expenses. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stay in the Game&lt;/strong&gt;. Berkshire Hathaway originally had a third partner, Rick Guerin. He got caught out with margin loans and had to sell out. Warren and Charlie survived 14 recessions. &lt;a href="https://www.swyx.io/psychology-of-money/"&gt;https://www.swyx.io/psychology-of-money/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't Skimp On Your Equipment.&lt;/strong&gt; Spending a few hundred dollars on your keyboard and monitor setup will save &lt;a href="https://twitter.com/swyx/status/1274054230911803392?lang=en"&gt;tens of thousands of physiotherapy and pain in future&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Earn White Collar, Spend Blue Collar&lt;/strong&gt;. Don't let your expenses rise as fast as your income - you probably don't need what you're thinking of buying. Spend part of your white collar income making up for white collar downsides - gym, group classes, &lt;a href="https://twitter.com/swyx/status/1323550900816764928"&gt;personal trainer&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Always Turn Lessons To Principles&lt;/strong&gt;. When we make mistakes or have great success, we should form them into principles so we can write them down and learn from or repeat them. &lt;a href="https://twitter.com/swyx/status/952232991455174656"&gt;It is the only way for past versions of you to communicate lessons to future you.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>reflections</category>
      <category>advice</category>
    </item>
    <item>
      <title>How to get a job out of a failed job interview</title>
      <author>Piotr Wilk</author>
      <pubDate>Thu, 22 Apr 2021 20:44:11 +0000</pubDate>
      <link>https://dev.to/wilkuintheair/how-to-get-a-job-out-of-a-failed-job-interview-4icb</link>
      <guid>https://dev.to/wilkuintheair/how-to-get-a-job-out-of-a-failed-job-interview-4icb</guid>
      <description>&lt;h5&gt;
  &lt;a href="#to-the-point"&gt;
  &lt;/a&gt;
  To the point!
&lt;/h5&gt;

&lt;p&gt;On a job interview listen carefully what the team you are supposed to join struggles with. What kind of problem they're currently solving.&lt;br&gt;
Then if they say no to you, you can just say thanks and tell them &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey, I'm good at this one you're dealing with, let me do this for you as a side project, show me the code and I will estimate it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#now-i-will-give-you-some-context-how-it-worked-in-my-case"&gt;
  &lt;/a&gt;
  Now I will give you some context how it worked in my case.
&lt;/h5&gt;

&lt;p&gt;I suck. I totally suck at job interviews. Maybe I'm smart (oh the hell with it it's my blog, I can even say I'm very smart!). But I don't talk much, I'm kind of a typical introvert programmer. And as you may already know it's better to talk at job interviews.&lt;/p&gt;

&lt;p&gt;So these guys were looking for someone who talks. They said&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sorry Piotr, you are very smart but you didn't say much at the interview, you had no energy and stuff. We're looking for a guy who can talk and has the energy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then I said&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for the interview! Listen guys, you said you're struggling with upgrading your app. I did this many times and I can help you just with this one if you want. Just let me know if that sounds interesting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#success"&gt;
  &lt;/a&gt;
  Success
&lt;/h5&gt;

&lt;p&gt;It turned out this did sound interesting to them, we've discussed the details and I've got a nice side project instead.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>career</category>
      <category>5days5blogposts</category>
    </item>
    <item>
      <title>Funciones JavaScript</title>
      <author>Francisco</author>
      <pubDate>Thu, 22 Apr 2021 20:34:25 +0000</pubDate>
      <link>https://dev.to/franciscode/funciones-javascript-3l5k</link>
      <guid>https://dev.to/franciscode/funciones-javascript-3l5k</guid>
      <description>&lt;p&gt;Antes de comenzar:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una de las cosas que nos encontramos al aprender JavaScript son las &lt;strong&gt;Funciones&lt;/strong&gt;, en esta gu√≠a que esta basada en la gu√≠a de w3 schools. Aprenderas lo principal sobre las funciones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#funciones-javascript"&gt;
  &lt;/a&gt;
  Funciones JavaScript
&lt;/h2&gt;

&lt;p&gt;Una funci√≥n de JavaScript es un bloque de c√≥digo dise√±ado para realizar una tarea en particular.&lt;/p&gt;

&lt;p&gt;Una funci√≥n de JavaScript se ejecuta cuando "algo" la invoca (la llama).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myFunction(p1, p2) {
  return p1 * p2;   // La funci√≥n retorna el producto entre p1 y p2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sintaxis-de-funciones-de-javascript"&gt;
  &lt;/a&gt;
  Sintaxis de funciones de JavaScript
&lt;/h3&gt;

&lt;p&gt;Una funci√≥n de JavaScript se define con la functionpalabra clave, seguida de un nombre , seguido de par√©ntesis () .&lt;/p&gt;

&lt;p&gt;Los nombres de funciones pueden contener letras, d√≠gitos, subrayados y signos de d√≥lar (las mismas reglas que las variables).&lt;/p&gt;

&lt;p&gt;Los par√©ntesis pueden incluir nombres de par√°metros separados por comas:&lt;/p&gt;

&lt;p&gt;** ( par√°metro1, par√°metro2, ... ) **&lt;/p&gt;

&lt;p&gt;El c√≥digo a ejecutar, por la funci√≥n, se coloca entre llaves: {}&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function name(parameter1, parameter2, parameter3) {
  // C√≥digo a ser ejecutado
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Los &lt;strong&gt;par√°metros&lt;/strong&gt; de la funci√≥n se enumeran entre par√©ntesis () en la definici√≥n de la funci√≥n.&lt;/p&gt;

&lt;p&gt;Los argumentos de la funci√≥n son los valores que recibe la funci√≥n cuando se invoca.&lt;/p&gt;

&lt;p&gt;Dentro de la funci√≥n, los argumentos (los par√°metros) se comportan como variables locales.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una funci√≥n es muy similar a un procedimiento o una subrutina, en otros lenguajes de programaci√≥n.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#invocaci%C3%B3n-de-una-funci%C3%B3n"&gt;
  &lt;/a&gt;
  Invocaci√≥n de una Funci√≥n
&lt;/h3&gt;

&lt;p&gt;El c√≥digo dentro de la funci√≥n se ejecutar√° cuando "algo" invoca (llama) a la funci√≥n:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cuando ocurre un evento (cuando un usuario hace clic en un bot√≥n)&lt;/li&gt;
&lt;li&gt;Cuando se invoca (llama) desde el c√≥digo JavaScript&lt;/li&gt;
&lt;li&gt;Autom√°ticamente (autoinvocado)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#retorno-de-funci%C3%B3n"&gt;
  &lt;/a&gt;
  Retorno de Funci√≥n
&lt;/h3&gt;

&lt;p&gt;Cuando JavaScript llega a una &lt;code&gt;return&lt;/code&gt; declaraci√≥n, la funci√≥n dejar√° de ejecutarse.&lt;/p&gt;

&lt;p&gt;Si la funci√≥n fue invocada desde una declaraci√≥n, JavaScript "regresar√°" para ejecutar el c√≥digo despu√©s de la declaraci√≥n de invocaci√≥n.&lt;/p&gt;

&lt;p&gt;Las funciones a menudo calculan un &lt;strong&gt;valor de retorno&lt;/strong&gt; . El valor de retorno se "devuelve" al "llamador":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = myFunction(4, 3);   

function myFunction(a, b) {
  return a * b;            
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado en x ser√°&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#por-qu%C3%A9-funciones"&gt;
  &lt;/a&gt;
  ¬øPor qu√© funciones?
&lt;/h3&gt;

&lt;p&gt;Puede reutilizar el c√≥digo: defina el c√≥digo una vez y util√≠celo muchas veces.&lt;/p&gt;

&lt;p&gt;Puede usar el mismo c√≥digo muchas veces con diferentes argumentos para producir resultados diferentes&lt;/p&gt;

&lt;p&gt;Se subir√° mas contenido con respecto a JavaScript, puedes aprender mas siguiendo la gu√≠a que proporciona la w3schools.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>function</category>
      <category>guide</category>
    </item>
    <item>
      <title>Build your own event system in Python </title>
      <author>Kuba</author>
      <pubDate>Thu, 22 Apr 2021 20:10:01 +0000</pubDate>
      <link>https://dev.to/kuba_szw/build-your-own-event-system-in-python-5hk6</link>
      <guid>https://dev.to/kuba_szw/build-your-own-event-system-in-python-5hk6</guid>
      <description>&lt;p&gt;Event system is not hard to build on your own. There are plenty of libraries ready to use, but for better understanding I want to implement it by myself. &lt;/p&gt;

&lt;p&gt;The idea of this post comes from &lt;a href="https://www.youtube.com/watch?v=oNalXg67XEE"&gt;this&lt;/a&gt; video. Today I was searching the internet for tips how to manage my project which has a lot of different modules and I wanted to do it nice and clean. One of the ideas I found is &lt;a href="https://en.wikipedia.org/wiki/Observer_pattern"&gt;Observer&lt;/a&gt; pattern from ‚ÄúGang of four‚Äù book. This should be very simple implementation of it.   &lt;/p&gt;

&lt;p&gt;First thing is that you have subscribers. They subscribe to different types of events. Every time the event is posted, you have to notify the subscriber about it. &lt;/p&gt;

&lt;p&gt;First create two methods for subscribing the event, and for posting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/event.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;

&lt;span class="n"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event_type&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example I will be creating the new user which will invoke event &lt;code&gt;new_user_created&lt;/code&gt;. Subscriber for this event will be module for sending welcome message by email. &lt;/p&gt;

&lt;p&gt;Let's create a user. It will be simple dictionary, but it can be an object too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/user.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.event&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_event&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;post_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_user_created"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now handle sending emails. We will need two things here. Some kind of email provider and some kind of handler for it. I want my email provider class to handle all 'business logic' only, so I created &lt;code&gt;modules&lt;/code&gt; folder for such.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/modules/email.py 
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"=========================="&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"From: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Subject: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"=========================="&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And handler for email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/email_handler.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.modules.email&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.event&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subscribe&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'Welcome!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Some welcome message'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_email_event_handlers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_user_created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's connect everything together. Make an app file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/app.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.user&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register_new_user&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.email_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;

&lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Jakub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name@domain.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First thing to do is to set email handler events up. That means, subscribe to event &lt;code&gt;new_user_created&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If all the subscriptions are done, register new user. Output should be as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==========================
From: name@domain.com
Subject: Welcome!
Some welcome message
==========================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extend-the-system"&gt;
  &lt;/a&gt;
  Extend the system
&lt;/h3&gt;

&lt;p&gt;What if we want to extend this. Let's add some database. In modules, add &lt;code&gt;database.py&lt;/code&gt; file and sample implementation of database as a list of users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/modules/database.py 
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'======================='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'======================='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And handler for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/database_handler.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.modules.database&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.event&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subscribe&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_database_event_handlers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_user_created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_user_registered_event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the only thing to do is set database handler up in app file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/app.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.user&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register_new_user&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.email_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.database_handler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup_database_event_handlers&lt;/span&gt; 

&lt;span class="n"&gt;setup_email_event_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;setup_database_event_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;register_new_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Jakub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'secret'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name@domain.com'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the result should be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==========================
From: name@domain.com
Subject: Welcome!
Some welcome message
==========================
==========================
[{'name': 'Jakub', 'password': 'secret', 'email': 'name@domain.com'}]
==========================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice thing about it, is that this way keeps your modules independent of each other and keeps their cohesion strong. Besides that, it allows you to manipulate order of listeners in event very quickly. No more 'ctrl + c | ctrl + v' whole code üòâ.&lt;/p&gt;

&lt;p&gt;Comment what do you think about it! How do you build workflow in your apps between multiple modules? &lt;/p&gt;

</description>
      <category>python</category>
      <category>5days5blogposts</category>
      <category>eventdriven</category>
      <category>design</category>
    </item>
    <item>
      <title>Discord Bot for Appointment Scheduling in NodeJS</title>
      <author>Spurwing</author>
      <pubDate>Thu, 22 Apr 2021 19:58:41 +0000</pubDate>
      <link>https://dev.to/spurwing/discord-bot-for-appointment-scheduling-in-nodejs-5fd</link>
      <guid>https://dev.to/spurwing/discord-bot-for-appointment-scheduling-in-nodejs-5fd</guid>
      <description>&lt;p&gt;Discord has for many years been popular in the gaming community. But due to the explosion of &lt;strong&gt;Remote Work&lt;/strong&gt; and &lt;strong&gt;Work From Home&lt;/strong&gt; opportunities, it's strongly competing in the &lt;strong&gt;business&lt;/strong&gt; world with tools like Slack, Google and Zoom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=e5SpHXVMlKw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSMJhTMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lu7t408wmm6swpw5sw4.png" alt="discord scheduling bot for business"&gt;&lt;/a&gt;&lt;br&gt;
YouTube Demo: &lt;a href="https://www.youtube.com/watch?v=e5SpHXVMlKw"&gt;https://www.youtube.com/watch?v=e5SpHXVMlKw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can join our Discord server and try this bot yourself: &lt;a href="https://discord.gg/j3gd5Qk5uW"&gt;https://discord.gg/j3gd5Qk5uW&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;We love Discord at Spurwing, it provides all features we need for free: text and voice channels, video calls, video conferencing, screen sharing and recently the addition of stage channels. You can emulate an &lt;strong&gt;office experience&lt;/strong&gt; with these channels, an ideal solution for a conservative managers.&lt;/p&gt;

&lt;p&gt;On top of that it provides a superb API, developer community and resources for building bots and automation solutions. The business of &lt;strong&gt;scheduling appointments&lt;/strong&gt; and &lt;strong&gt;managing calendars&lt;/strong&gt; is a complex one, fortunately Spurwing helps simplify and streamline just that.&lt;/p&gt;

&lt;p&gt;In this article I'll share our simple solution for scheduling appointments on Discord. The full code is available on our &lt;a href="https://github.com/Spurwing/Chat-Bot-Integrations/tree/main/Discord/NodeJS"&gt;GitHub repository&lt;/a&gt;. This Discord Bot is connected to our Spurwing API for scheduling appointments and managing our calendar.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bot-summary"&gt;
  &lt;/a&gt;
  Bot summary
&lt;/h2&gt;

&lt;p&gt;A discord bot is a piece of code that listens to text (or voice) data and can then respond however you program it. The easiest way to call/use a bot is to use a prefix character like &lt;code&gt;!&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;. To see all available commands we can enter &lt;code&gt;!help&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymA3W3cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9c1utu8bkcavh07d669.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymA3W3cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9c1utu8bkcavh07d669.png" alt="appointment scheduling discord bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first command we encounter is &lt;code&gt;!days [date]&lt;/code&gt; which will give all available days in the month of &lt;code&gt;[date]&lt;/code&gt;. Omitting this parameter will use the current month. You can also use keywords like &lt;code&gt;today&lt;/code&gt;, &lt;code&gt;next month&lt;/code&gt;, &lt;code&gt;March 2021&lt;/code&gt;, etc. We use a great NLP Library &lt;a href="https://github.com/wanasit/chrono"&gt;chrono&lt;/a&gt; which is capable of interpreting casual text into JavaScript DateTime objects:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V6ubc-cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x81awgg4dccoo2uwzaap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6ubc-cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x81awgg4dccoo2uwzaap.png" alt="appointment scheduling discord bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second command we can use is &lt;code&gt;!slots [date]&lt;/code&gt;. This returns a list of bookable slots on our calendar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0UKxMDxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsopy0jak4y3dycsy1eh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0UKxMDxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsopy0jak4y3dycsy1eh.png" alt="appointment scheduling discord bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do note that these slots contain a timezone offset &lt;code&gt;+0200&lt;/code&gt; which means GMT+2. This timezone depends the local time of the machine hosting your bot. But we can also provide a custom timezone or offset to see the times relative to your own location:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6jwd1pa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l0skt41jl1quhk3rohy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6jwd1pa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l0skt41jl1quhk3rohy.png" alt="appointment scheduling discord bot timezone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there are no bookable slots available for a certain date then you'll receive an error message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tYQxBd0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3b05f6yt197950d731y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tYQxBd0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3b05f6yt197950d731y.png" alt="appointment scheduling discord bot time zones"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we are able to find bookable slots, we can start scheduling appointments using our third command &lt;code&gt;!book [slot] [@email]&lt;/code&gt;. You can use one of the slots as &lt;code&gt;[slot]&lt;/code&gt; argument or provide a custom Date and Time, as long as it will evaluate to valid and bookable slot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H2uMNJq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnzqjvdti0s3vm4v5fbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H2uMNJq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnzqjvdti0s3vm4v5fbc.png" alt="appointment booking discord bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again if booking fails you will be given an error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9zu1Lyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii7xjsaj329vuqgg1daw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9zu1Lyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii7xjsaj329vuqgg1daw.png" alt="appointment booking discord bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These three simple commands allows Discord users to schedule simple 1-on-1 appointments with you. In the next sections we'll explain how to install and configure this bot, but also how to customize it for 1-to-many appointments and incorporate multiple calendars.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS v12.x or v14.x is highly recommended&lt;/li&gt;
&lt;li&gt;If you don't have a Discord Bot yet, follow step 1 of this &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-discord-bot-with-node-js"&gt;tutorial&lt;/a&gt; to obtain your bot's token and adding the bot to your Discord server.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Clone, fork or download our repository: &lt;a href="https://github.com/Spurwing/Chat-Bot-Integrations/"&gt;https://github.com/Spurwing/Chat-Bot-Integrations/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;/Discord/NodeJS/&lt;/code&gt; and execute &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy the file &lt;code&gt;config.sample.js&lt;/code&gt; to &lt;code&gt;config.js&lt;/code&gt; and edit it

&lt;ul&gt;
&lt;li&gt;Provide your Discord Bot Token&lt;/li&gt;
&lt;li&gt;Provide your Spurwing Provider Id&lt;/li&gt;
&lt;li&gt;Optionally provide a Spurwing Appointment Type Id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the bot: &lt;code&gt;node index.js&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Optionally use PM2 or nodemon to keep the bot running 24/7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Upon successful connection you should see a message like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccTGXdQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uabgd1p8t90uvsly45pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccTGXdQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uabgd1p8t90uvsly45pp.png" alt="discord bot scheduling appointments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you didn't provide an Appointment Type Id, the code will fetch a random one from your Spurwing account. Each appointment type has an associated duration (15min, 30min, 45min, ...). Our API uses it to generate bookable slots.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#developers"&gt;
  &lt;/a&gt;
  Developers
&lt;/h3&gt;

&lt;p&gt;This bot is merely a basic implementation for &lt;strong&gt;demo purposes&lt;/strong&gt;. We can extend it with more advanced features to facilitate Calendar Management, Group Bookings, Reminders, Sending Emails, Voice Commands and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQLwGjAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b3mvnblg88didivsjnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQLwGjAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b3mvnblg88didivsjnr.png" alt="discord bot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h2&gt;

&lt;p&gt;The Spurwing Provider ID (&lt;strong&gt;PID&lt;/strong&gt;) represents an individual calendar. You can extend the bot to keep a mapping of Discord Members and their PIDs. If your Spurwing account has Organizational privileges then you can create multiple accounts (and thus PIDs) for all your members. Each calendar can also be two-way synced with any third-party email provided (Gmail, Outlook, Apple).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tRuh-MzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n7jddhenj24kybwxnje.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tRuh-MzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n7jddhenj24kybwxnje.png" alt="team scheduling api"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#group-bookings"&gt;
  &lt;/a&gt;
  Group Bookings
&lt;/h2&gt;

&lt;p&gt;Our demo bot only allows for 1-on-1 bookings, hence the single &lt;code&gt;[@email]&lt;/code&gt; argument for the &lt;code&gt;!book&lt;/code&gt; command. You can extend that command to allow a list of email addresses.&lt;/p&gt;

&lt;p&gt;Alternatively you can create a mapping of Discord Members and their email addresses. Now instead of providing their emails explicitly to the command you can use the &lt;code&gt;@username&lt;/code&gt; notation by Discord.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reminders"&gt;
  &lt;/a&gt;
  Reminders
&lt;/h2&gt;

&lt;p&gt;To incorporate automated reminders, either as public announcements or private messages, you make the bot poll for all calendar events (every minute or so). And based on your preferences make it send reminders to all participants.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixGmw4vJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl7zyrpoe2d3ogaxvv5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixGmw4vJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl7zyrpoe2d3ogaxvv5g.png" alt="discord bot reminder"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sending-emails"&gt;
  &lt;/a&gt;
  Sending Emails
&lt;/h2&gt;

&lt;p&gt;We already have a Spurwing Library for sending emails using the SMTP protocol. Our &lt;a href="https://github.com/Spurwing/iCalendar-Integrations/"&gt;iCalendar Library Repository&lt;/a&gt; contains all the logic you need inside &lt;code&gt;index.js&lt;/code&gt;, in particular the &lt;code&gt;sendMail&lt;/code&gt; function which you can re-use here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#voice-commands"&gt;
  &lt;/a&gt;
  Voice Commands
&lt;/h2&gt;

&lt;p&gt;The thing I love about Discord the most are its voice channels. It's just a virtual place you can join and talk to everyone inside the channel. No annoying meeting links needed to instantly hop on a call with someone.&lt;/p&gt;

&lt;p&gt;A Discord Bot can also join a voice channel and listen to all speakers individually (but can also send audio data). One of my personal open-source projects &lt;a href="https://github.com/healzer/DiscordEarsBot"&gt;DiscordEarsBot&lt;/a&gt; uses NLP and Machine Learning to transcribe and interpret what is being said. This solution is pretty accurate and supports 32 of languages. You can use that solution for adding Voice Commands or generated suggestions based on what is being said during a conversation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You: maybe we should meet again next week?

Bot: Would you like to schedule for next week this time?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Another cool UX improvement to the &lt;code&gt;!book [slot] ...&lt;/code&gt; command is to make return a few bookable slots if it fails to schedule for the &lt;code&gt;[slot]&lt;/code&gt; you provided.&lt;/p&gt;

&lt;p&gt;Discord Bots are amazing tools that can help us &lt;strong&gt;automate tasks&lt;/strong&gt; and be &lt;strong&gt;more productive&lt;/strong&gt; at our daily business. If you enjoy our content, make sure to give us a star on GitHub and follow us for more. Visit &lt;a href="https://www.spurwing.io/"&gt;Spurwing&lt;/a&gt; and schedule a free demo today. Have a great day!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Super powers of Javascript Console</title>
      <author>Kinanee Samson</author>
      <pubDate>Thu, 22 Apr 2021 19:55:00 +0000</pubDate>
      <link>https://dev.to/kalashin1/super-powers-of-javascript-console-4ek9</link>
      <guid>https://dev.to/kalashin1/super-powers-of-javascript-console-4ek9</guid>
      <description>&lt;p&gt;Chances are if you are a JavaScript developer then you might have used the console object more times than you blink your eye. That's a big exaggeration but i just wanted to point out just how much the console object is important to JavaScript developer and most notably it's log() Method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#console-object"&gt;
  &lt;/a&gt;
  Console Object
&lt;/h2&gt;

&lt;p&gt;The console object exists on the window object in JavaScript in the browser and it gives us access to the debug console that comes built in with most browsers by default. We can access the console object in any scope. &lt;/p&gt;

&lt;p&gt;In node js the console object is also available globally from any scope, it provides a debugging console that is similar to that of the web browser, however it provides a console class with which we can create and configure a console instance which we write to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#console-object"&gt;
  &lt;/a&gt;
  console object
&lt;/h2&gt;

&lt;p&gt;There are quite a handful of methods available on the console object which we can use for debugging, most notably is the log method;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consolelog"&gt;
  &lt;/a&gt;
  console.log()
&lt;/h3&gt;

&lt;p&gt;This method simply writes a message to the console, it accepts an argument which is the object we want to log to the console. The object can be of any data type e.g strings, numbers, booleans, arrays, objects, maps e.t.c&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// some message&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// {name: 'john', friend: 'doe'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a simple demonstration of the log()  method on the console object, a more useful and pratical case is to use it to output certain variables at certain stages in your code especially when there is bug, so you can pin point exactly where the error is coming from, and how to deal with it. But do ensure that you remove all calls to console.log() when you are don debugging, you could easily forget to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consolewarn"&gt;
  &lt;/a&gt;
  console.warn()
&lt;/h3&gt;

&lt;p&gt;This is another useful method on the console object, it sends a warning to the console. It lso accepts an argument which will be output to the browsers console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not an even number`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    

&lt;span class="c1"&gt;// 1 is not an even number&lt;/span&gt;
&lt;span class="c1"&gt;// 3 is not an even number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite useful when we are building packages other developers are going to be uusing, we can use this method to let them know that something could potentially lead to an error or bug in the code if it's not dealt with or stopped as fast as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consoleerror"&gt;
  &lt;/a&gt;
  console.error()
&lt;/h3&gt;

&lt;p&gt;This method allows us to send an error message to the console, like previous methods we have discussed above, the error method also accepts an argument which will be sent to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oops yous just pushed the wrong button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// oops yous just pushed the wrong button&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference between these three is that console.log() Keeps ur console clean, just  print out a message to the console, console.warn() Will print out the message along with a warning sign, while console.error() Will log the message with an error sign.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timing-your-process"&gt;
  &lt;/a&gt;
  Timing your Process
&lt;/h3&gt;

&lt;p&gt;The console object provides another method which is useful for debugging, it allows us to keep track how long it takes to complete a task. To start a timer u call console.time() And this starts a timer, to end the timer you call console.timeEnd(). This might give you insight to how long your processes are taking to complete, this can also help you refactor your code to be more efficient and avoid unnecessary memory leaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; el'
console.log(name.indexOf('K'))
console.timeEnd()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#displaying-data-in-tabular-form"&gt;
  &lt;/a&gt;
  Displaying data in tabular form
&lt;/h3&gt;

&lt;p&gt;You can use console.table() to output a message to the browser, the cool thing about this method is that it displays the data in a tabular form when you pass in an object that has key-value pairs, e.g an array or an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this were an object, we would see the keys logged out along with their values just like we get with the array in the example above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-custom-lodger"&gt;
  &lt;/a&gt;
  Building a Custom Lodger
&lt;/h2&gt;

&lt;p&gt;if you have node js installed on your computer, you can take advantage of it and build your own custom lodger, i will b giving you a brief intro on doing that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-node-js"&gt;
  &lt;/a&gt;
  install node js
&lt;/h3&gt;

&lt;p&gt;To install node js on your computer simply head to &lt;a href="https://nodejs.org"&gt;nodejs.org&lt;/a&gt; and download the most stable version,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lodger"&gt;
  &lt;/a&gt;
  Lodger
&lt;/h3&gt;

&lt;p&gt;On node js we have the console class which is globally available. It is to note that the console on node js works similar to that of the browser. You can create an instance of a console from this console class, let's see how.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// creating writeStreams that will be used by our Console class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./log.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./errLog.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// when we instantiate the Console class it takes in two arguments, they mudt be writeable streams&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Lodger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outStream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;Lodger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello worl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Lodger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop doing that&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Lodger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;you touched the wrong button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspect the directory you are working with and you will see that two files have been created for ud;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;log.txt&lt;/li&gt;
&lt;li&gt;errLog.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The log.txt will hold our normal logs and warnings, e.g Loger.log() and Lodger.warn(). Our error logs will be sent to errLog.txt and that's it, done!&lt;/p&gt;

&lt;p&gt;That's it fir this article, there aremore methods available to the console object, you can check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Console?wsdl"&gt;here&lt;/a&gt; for more on the, i hope you find this useful.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>WPRecon ‚Äì Vulnerability recognition tool in CMS WordPress</title>
      <author>kalilinux</author>
      <pubDate>Thu, 22 Apr 2021 19:53:11 +0000</pubDate>
      <link>https://dev.to/kalilinux/wprecon-vulnerability-recognition-tool-in-cms-wordpress-2okc</link>
      <guid>https://dev.to/kalilinux/wprecon-vulnerability-recognition-tool-in-cms-wordpress-2okc</guid>
      <description>&lt;p&gt;For you to compile wprecon you will need to have the golang compiler installed. And for that you will access the official website of golang and will download and install it. Here!&lt;/p&gt;

&lt;p&gt;Once downloaded and installed you will download wprecon directly from github with the command:&lt;/p&gt;

&lt;p&gt;go get github.com/blackbinn/wprecon;&lt;br&gt;
cd $(go env GOPATH)/src/github.com/blackbinn/wprecon;&lt;br&gt;
make build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/wprecon-vulnerability-recognition-tool-in-cms-wordpress"&gt;wprecon&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>php</category>
      <category>security</category>
      <category>vulnerability</category>
    </item>
    <item>
      <title>My productivity setup for VS Code</title>
      <author>charly3pins</author>
      <pubDate>Thu, 22 Apr 2021 19:38:39 +0000</pubDate>
      <link>https://dev.to/charly3pins/my-productivity-setup-for-vs-code-1glf</link>
      <guid>https://dev.to/charly3pins/my-productivity-setup-for-vs-code-1glf</guid>
      <description>&lt;p&gt;I spend a lot of hours during the day coding for the company I work for and during nights or weekends for myself, so I want to be comfortable with the tools I use constantly. One of them is my editor of code, specifically &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;. I started with Java and the most extended for it is Eclipse with all its variants. Then I moved to Go and I was a Sublime user for years until I gave a try to VS Code. Oh boy! Since I tried, I never wanted to switch back. Super fast, super configurable, a lot of extensions and A LOT OF THEMES.&lt;/p&gt;

&lt;p&gt;So after a long way of researching and tweaking (a never ending story I would say) I found a setup that makes me comfortable, happy and more productive. For that reason I want to share with you lovely readers my theme, my font, my icons and the extensions I have in order to inspire you to reach your own setup same as me.&lt;/p&gt;

&lt;p&gt;The default VS Code theme is not bad at all, but I will show you how to move from this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOfVC2h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-default.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOfVC2h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-default.jpeg" alt="vscode default"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To this amazing setup&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfI2PuZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-charly3pins.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfI2PuZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-charly3pins.jpeg" alt="vscode charly3pins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theme"&gt;
  &lt;/a&gt;
  Theme
&lt;/h2&gt;

&lt;p&gt;I am a fan of the Dark themes so that was a must for me. I've tried a few like the &lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobalt2&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt; or even a one more "crazy" like &lt;a href="https://marketplace.visualstudio.com/items?itemName=max-SS.cyberpunk"&gt;Cyberpunk&lt;/a&gt;, until I found the one called &lt;a href="https://github.com/DHedgecock/radical-vscode/"&gt;Radical&lt;/a&gt;. It's simply the perfect one for me. A dark theme, a retro futuristic touch with subtle neon colors and the combination of dark blue for the background and blue and grey for the text with the green, yellow and pink. It has the perfect palette for me.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jb6RUke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/DHedgecock/radical-vscode/master/assets/banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jb6RUke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/DHedgecock/radical-vscode/master/assets/banner.png" alt="radical theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#font"&gt;
  &lt;/a&gt;
  Font
&lt;/h2&gt;

&lt;p&gt;I've installed the &lt;a href="https://github.com/pcaro90/hermit"&gt;Hermit&lt;/a&gt; as my font for the editor. I don't like the ligatures so I tried to find a monospace that was clear and readable and I found this font that I really liked. I also used it for my terminal that probably soon I will publish about how I've configured it too. In addition, for the more curious of you, the font size I'm using is of 14.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXCWruLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/hermit-font.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXCWruLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/hermit-font.jpeg" alt="hermit font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanna find your favorite font I recommend you to check the following website &lt;a href="https://www.programmingfonts.org"&gt;https://www.programmingfonts.org&lt;/a&gt; where you can see in a live demo all the fonts and the links to their websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h2&gt;

&lt;p&gt;Previously I had some Material Icons extension installed but currenlty I'm using the default &lt;a href="https://marketplace.visualstudio.com/items?itemName=qinjia.seti-icons"&gt;Seti&lt;/a&gt; icons for VS Code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypJ7nwgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/hellopao/vscode-seti-icons/raw/master/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypJ7nwgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/hellopao/vscode-seti-icons/raw/master/screenshot.png" alt="seti icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h2&gt;

&lt;p&gt;The extensions that I have currently installed in my editor are the following ones:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnZd2S9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-extensions.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnZd2S9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/productivity-setup-vscode/vscode-extensions.jpeg" alt="extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXR3qoQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/formulahendry/vscode-auto-rename-tag/raw/master/images/usage.gif" alt="auto rename tag"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a big time saver when you're working with HTML or XML because it renames the open/close tags at same time you're changning one of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbAjoZv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CoenraadS/Bracket-Pair-Colorizer-2/raw/master/images/example.png" alt="bracket pair colorizer 2"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It helps a lot to identify the open-close pairs of brackets in your code, colorizing them with the same color. Also if you put your cursor inside a block it underlines the starting line and connects to the closing bracket with a vertical line of the same color. It really helps!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=kamikillerto.vscode-colorize"&gt;Colorize&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUGNKHTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/kamikillerto/vscode-colorize/master/assets/demo.gif" alt="colorize"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your file contains some color code this extension will highlight the code with the actual color.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code"&gt;Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply the Dart language support for the editor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter"&gt;Flutter&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCHSu5YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dartcode.org/images/marketplace/flutter_hot_reload.gif" alt="flutter"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply the Flutter language support for the editor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=golang.Go"&gt;Go&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4O_9Zv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/golang/vscode-go/raw/master/docs/images/completion-signature-help.gif" alt="go"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply the Go language support for the editor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It enables you to collaboratively edit with others in real time, regardless what programming languages you're using or app types you're building. It allows you to instantly and securely share your current project in another workspace. Developers that join your sessions receive all of their editor context from your environment (e.g. language services, debugging), which ensures they can start productively collaborating immediately, without needing to clone any repos or install any SDKs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JYUgdp4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aka.ms/vsls/quickstart/invite" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JYUgdp4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aka.ms/vsls/quickstart/invite" alt="live share"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dhedgecock.radical-vscode"&gt;Radical&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The theme already explained on its section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight"&gt;TODO Highlight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It highlights the TODOs inside the code to make them more visible once you're reading code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NeY0QWdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/wayou/vscode-todo-highlight/raw/master/assets/material-night-eighties.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NeY0QWdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/wayou/vscode-todo-highlight/raw/master/assets/material-night-eighties.png" alt="todo highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It displays the TODO and FIXME in a tree view in the explorer panel. Clicking a TODO within the tree will open the file and put the cursor on the line containing the TODO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNcMLghs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Gruntfuggly/todo-tree/master/resources/screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNcMLghs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Gruntfuggly/todo-tree/master/resources/screenshot.png" alt="todo tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=zxh404.vscode-proto3"&gt;vscode-proto3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply the proto3 language support for the editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBeLNih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/zxh0/vscode-proto3/raw/master/images/gif1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBeLNih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/zxh0/vscode-proto3/raw/master/images/gif1.gif" alt="vscode proto3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope it helped you and feel free to comment here or contact me on my social media for any comments, questions or suggestions.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Automate Your GitHub Profile README with Go and GitHub Actions</title>
      <author>charly3pins</author>
      <pubDate>Thu, 22 Apr 2021 19:35:37 +0000</pubDate>
      <link>https://dev.to/charly3pins/automate-your-github-profile-readme-with-go-and-github-actions-2lmo</link>
      <guid>https://dev.to/charly3pins/automate-your-github-profile-readme-with-go-and-github-actions-2lmo</guid>
      <description>&lt;p&gt;After the post where I explained &lt;a href="https://charly3pins.dev/blog/build-an-awesome-github-profile-readme/"&gt;how to create a README for the GitHub profile&lt;/a&gt;, I missed including in the section of the &lt;code&gt;Blog&lt;/code&gt; a link to the last post published. I mainly didn‚Äôt because I didn‚Äôt want to have to manually update the README every time with the last post and its link. To solve this I was thinking how I could automate this update. While doing my daily reading of the RSS feeds I follow with the Feedly app, I stumbled upon that I also had RSS feeds. So I could read my blog feed myself and get the latest post from there easily.&lt;/p&gt;

&lt;p&gt;Once I covered the part of how to get the last post published, I missed the part of how to update the README and that's where I first tried (I had been wanting for a long time) the &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. Some time ago GitHub launched these actions that basically serve to create automatic workflows for &lt;a href="https://en.wikipedia.org/wiki/CI/CD"&gt;CI/CD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With both parts of the problem covered, I was just missing a little thing... do it! So I will explain in detail how I did both so you can use it in your project if you are interested.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-the-latest-post-with-go"&gt;
  &lt;/a&gt;
  Get the latest post with Go
&lt;/h2&gt;

&lt;p&gt;I needed to scan the blog feed and wanted to do it in Go, so the first thing I did was look for any libraries that would make it easier for me not to reinvent the wheel and I found the &lt;a href="https://github.com/mmcdole/gofeed"&gt;github.com/mmcdole/gofeed&lt;/a&gt;. It had a lot of features but I had enough with the basic use described in its README.&lt;/p&gt;

&lt;p&gt;With the next piece of code, I create a new parser, scan the address of my feed and the resulting items, I save only the first one, as it is the last post posted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gofeed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://charly3pins.dev/index.xml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error getting feed: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;newestItem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that I already have the item with all the information. It looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My productivity setup for VS Code&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;http://charly3pins.dev/blog/my-productivity-setup-for-vs-code/&lt;span class="nt"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;Tue, 09 Mar 2021&lt;span class="nt"&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;guid&amp;gt;&lt;/span&gt;http://charly3pins.dev/blog/my-productivity-setup-for-vs-code/&lt;span class="nt"&gt;&amp;lt;/guid&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;I am gonna show you my setup for VS Code editor which makes me more productive and I feel more comfortable with the tool that I spend most of my time during the day.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;content&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;I spend a lot of hours during the day coding for the company I work for and during nights or weekends for myself, so I want to be comfortable with the tools I use constantly. One of them is my editor of code, specifically &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://code.visualstudio.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;VS Code&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.....&lt;span class="nt"&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What I'm interested in showing in README is just the &lt;code&gt;title&lt;/code&gt; and the &lt;code&gt;link&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-and-write-the-readme"&gt;
  &lt;/a&gt;
  Read and write the README
&lt;/h2&gt;

&lt;p&gt;Once I had the necessary information I now had to read the &lt;code&gt;README.md&lt;/code&gt; file from the &lt;a href="https://github.com/charly3pins/charly3pins"&gt;repository&lt;/a&gt;, write the changes and save it again.&lt;/p&gt;

&lt;p&gt;To do this I could read the file using the standard library &lt;code&gt;ioutil.ReadFile()&lt;/code&gt;, but in this case since I don't want to reuse anything from the file, so I can call &lt;code&gt;os.Create()&lt;/code&gt; directly to create a new file and so overwrite the README.md that I already had in the directory.&lt;/p&gt;

&lt;p&gt;Also, since I want to put the feed information along with the static part of text I already had, what I will do is create a few strings with the different sections I want to put in the profile and then put them all together using &lt;code&gt;fmt.Sprintf()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code that does all this is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error creating file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error writing content to file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What remains to be seen from here is the value of &lt;code&gt;filename&lt;/code&gt; and that of&lt;code&gt;data&lt;/code&gt;. The first is easy, just the route to get to the README. In my case as I have the project in a subdirectory of my repository I have to use &lt;code&gt;filename = ../README.md&lt;/code&gt;. For the other variable, what is there is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"# Hey there!"&lt;/span&gt;
&lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"## Blog&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;My latest blog post is: **["&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;newestItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"]("&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;newestItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Link&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;")**."&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important part is the &lt;code&gt;blog&lt;/code&gt; where you can clearly see how I read the feed information.&lt;/p&gt;

&lt;p&gt;You can see the complete code in &lt;a href="https://github.com/charly3pins/charly3pins/blob/main/update/main.go"&gt;my repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-process-automatically"&gt;
  &lt;/a&gt;
  Running the process automatically
&lt;/h2&gt;

&lt;p&gt;Once we have the code that generates the README automatically and dynamically according to the last post, what remains to be done is to run it periodically and in order to do not have to worry about anything. To do this I will use a &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows"&gt;trigger&lt;/a&gt; from GitHub Actions so that every time I push to branch &lt;code&gt;master&lt;/code&gt; run the process and also run it on a scheduled basis every Sunday at 12am.&lt;/p&gt;

&lt;p&gt;First of all I need the &lt;code&gt;.github/worfklows&lt;/code&gt; folder and inside I create the &lt;code&gt;update.yaml&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  push&lt;span class="p"&gt;:&lt;/span&gt;
    branches&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;-&lt;/span&gt; master
  schedule&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;-&lt;/span&gt; cron&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'0 0 * * 0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the trigger is ready, what needs to be defined are the &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs"&gt;jobs&lt;/a&gt;. You can define as many as you want, in my case with 3 I have enough. The first will &lt;code&gt;checkout&lt;/code&gt; the project, the second will &lt;code&gt;generate&lt;/code&gt; the README, and the third will &lt;code&gt;deploy&lt;/code&gt; the changes. For the last step we will need to use the &lt;a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow"&gt;authentication mechanisms&lt;/a&gt; provided by GitHub Actions. The resulting code is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;jobs&lt;span class="p"&gt;:&lt;/span&gt;
  build&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;deploy&lt;span class="p"&gt;:&lt;/span&gt;
    runs&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; ubuntu&lt;span class="p"&gt;-&lt;/span&gt;latest

    steps&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;-&lt;/span&gt; name&lt;span class="p"&gt;:&lt;/span&gt; checkout repo
        uses&lt;span class="p"&gt;:&lt;/span&gt; actions/checkout@master
        with&lt;span class="p"&gt;:&lt;/span&gt;
          fetch&lt;span class="p"&gt;-&lt;/span&gt;depth&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;-&lt;/span&gt; name&lt;span class="p"&gt;:&lt;/span&gt; generate README
        run&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
          &lt;span class="k"&gt;cd&lt;/span&gt; $&lt;span class="p"&gt;{&lt;/span&gt;GITHUB_WORKSPACE&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/update/&lt;/span&gt;
          &lt;span class="k"&gt;go&lt;/span&gt; run main&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;
      &lt;span class="p"&gt;-&lt;/span&gt; name&lt;span class="p"&gt;:&lt;/span&gt; deploy &lt;span class="k"&gt;changes&lt;/span&gt;
        run&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
          git config user&lt;span class="p"&gt;.&lt;/span&gt;name &lt;span class="s2"&gt;"${GITHUB_ACTOR}"&lt;/span&gt;
          git config user&lt;span class="p"&gt;.&lt;/span&gt;email &lt;span class="s2"&gt;"${GITHUB_ACTOR}@users.noreply.github.com"&lt;/span&gt;
          git &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
          git commit &lt;span class="p"&gt;-&lt;/span&gt;am &lt;span class="s2"&gt;":rocket:: updated content"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the full code in &lt;a href="https://github.com/charly3pins/charly3pins/blob/main/.github/workflows/update.yaml"&gt;my repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to comment here or contact me on my social media for any comments, questions or suggestions.&lt;/p&gt;

</description>
      <category>go</category>
      <category>github</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Build an awesome GitHub's profile README</title>
      <author>charly3pins</author>
      <pubDate>Thu, 22 Apr 2021 19:33:22 +0000</pubDate>
      <link>https://dev.to/charly3pins/build-an-awesome-github-s-profile-readme-4l96</link>
      <guid>https://dev.to/charly3pins/build-an-awesome-github-s-profile-readme-4l96</guid>
      <description>&lt;p&gt;GitHub released a &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/managing-your-profile-readme"&gt;new feature&lt;/a&gt; that allows users to create a portfolio using a &lt;code&gt;README&lt;/code&gt; in a special repository with same name as the username and display it in the user's profile like the cover picture of this post. This article explains how to create that repo step by step and add some tips and tricks that you can use to tweak your own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-create-a-profile-readme"&gt;
  &lt;/a&gt;
  How do I create a profile README?
&lt;/h2&gt;

&lt;p&gt;As I've mentioned before, the profile README is created when the user creates a new repository with the same name as its username. For example, my GitHub username is charly3pins so I created a new repository named &lt;code&gt;charly3pins&lt;/code&gt;. The steps are the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new repository with the same name as your GitHub username going &lt;a href="https://github.com/new"&gt;here&lt;/a&gt;. Tick the &lt;code&gt;Add a README file option&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W2NPNAOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/github-profile-readme/new-repo.png" alt="create repo"&gt;
&lt;/li&gt;
&lt;li&gt;Open the generated README.md and you will see the following template:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2vvXdtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charly3pins.dev/images/github-profile-readme/repo-template.png" alt="repo template"&gt;
&lt;/li&gt;
&lt;li&gt;Uncomment the comments and add some content like text, GIFs, images, emojis, etc. Whatever you want and Markdown accepts it's okay... Sky is the limit! üöÄ Check out &lt;a href="https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf"&gt;this&lt;/a&gt; Markdown Cheatsheet if you need to brush up on Markdown syntax.&lt;/li&gt;
&lt;li&gt;Commit your new README. Note that the changes must be in &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; branch, otherwise will not be visible on your profile until you merge the changes in one of those branches.&lt;/li&gt;
&lt;li&gt;Push changes to GitHub (if you made changes locally).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#be-creative"&gt;
  &lt;/a&gt;
  Be creative
&lt;/h2&gt;

&lt;p&gt;You can check my &lt;a href="https://github.com/charly3pins"&gt;GitHub profile&lt;/a&gt; and the &lt;a href="https://github.com/charly3pins/charly3pins"&gt;repo&lt;/a&gt; that hosts my README. I've added my dynamic GitHub stats using &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;this&lt;/a&gt; repo, there are a lot of more information that you can add in your profiles. Also I've used &lt;a href="https://shields.io/"&gt;this&lt;/a&gt; site to make the badges displayed for the social networks and the technologies and tools. &lt;/p&gt;

&lt;p&gt;My recommendation is to check check &lt;a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme"&gt;this&lt;/a&gt; repo to see a lot of GitHub profiles and get some inspiration.&lt;/p&gt;

&lt;p&gt;Feel free to comment here or contact me in my social networks for any comment, question or suggestion.&lt;/p&gt;

</description>
      <category>github</category>
      <category>profile</category>
    </item>
  </channel>
</rss>
