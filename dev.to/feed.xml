<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Code Splitting Explained</title>
      <author>Laurie</author>
      <pubDate>Mon, 04 Jan 2021 13:25:15 +0000</pubDate>
      <link>https://dev.to/laurieontech/code-splitting-explained-3ijl</link>
      <guid>https://dev.to/laurieontech/code-splitting-explained-3ijl</guid>
      <description>&lt;p&gt;If you're familiar with JavaScript applications you may have heard the term code splitting before. So what does it mean?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition" class="anchor"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting"&gt;MDN&lt;/a&gt;, "Code splitting is the splitting of code into various bundles or components which can then be loaded on demand or in parallel."&lt;/p&gt;

&lt;p&gt;In other words, when you have different chunks of code you can make choices about how you load them. When you only have one big one, your hands are tied.&lt;/p&gt;

&lt;p&gt;But what does code splitting get you? And why is it necessary?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance" class="anchor"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;When your application is bundled up for use, it isn't just your application code that's included. The bundle also comes with all the third-party libraries your code uses. That can make for a pretty big bundle size! And as the size of this bundle increases, loading it can become costly.&lt;/p&gt;

&lt;p&gt;Suppose all of that code had to be downloaded every time a user loaded a page. It could take a considerable amount of time until the page was usable. This is not a great experience for users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Code splitting allows you to break up the monolithic bundle into various smaller bundles. You can then load the bundles in parallel or implement lazy loading, delaying download of certain code until a user needs it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools" class="anchor"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;p&gt;The most common tools for implementing code splitting are &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; and &lt;a href="http://browserify.org/"&gt;Browserify&lt;/a&gt;. However, you may be implementing code splitting behavior without even realizing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async" class="anchor"&gt;
  &lt;/a&gt;
  Async
&lt;/h2&gt;

&lt;p&gt;You're likely used to code at the top of your file that looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyScript&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./my-script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This includes &lt;code&gt;my-script&lt;/code&gt; in your main application bundle.&lt;/p&gt;

&lt;p&gt;However, there is another way. Suppose you only needed that script to run in a certain scenario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./my-script`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// do something here&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you've read my &lt;a href="https://laurieontech.com/posts/webpack-or-node/"&gt;Node or Webpack post&lt;/a&gt; you may recall that Webpack often has implementations of functions you think you're familiar with. In this case, the code above is using Webpack's import function, not the browser or Node.js supported dynamic import. It loads the script asyncronously, so that it doesn't hold up the rest of the code, and returns a Promise.&lt;/p&gt;

&lt;p&gt;By doing this, the code inside &lt;code&gt;my-script&lt;/code&gt; becomes part of a different bundle. The snippet above is performing code splitting!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-that-it" class="anchor"&gt;
  &lt;/a&gt;
  Is that it?
&lt;/h2&gt;

&lt;p&gt;There is a lot to talk about here. Bundling and performance are vast topics! But this is a nice primer.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webpack</category>
    </item>
    <item>
      <title>Why You Should Learn Rust in 2021</title>
      <author>Serokell</author>
      <pubDate>Mon, 04 Jan 2021 09:38:45 +0000</pubDate>
      <link>https://dev.to/serokell/why-you-should-learn-rust-in-2021-po</link>
      <guid>https://dev.to/serokell/why-you-should-learn-rust-in-2021-po</guid>
      <description>&lt;p&gt;According to the StackOverflow surveys,  Rust has been &lt;a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted"&gt;the most loved programming language&lt;/a&gt;  for the last four years in a row. &lt;/p&gt;

&lt;p&gt;Most of the people that have tried out Rust would like to continue using it. But if you haven’t used it, you might wonder – what is Rust, why is it so special, and what makes it so popular amongst developers?&lt;/p&gt;

&lt;p&gt;In this guide, I’ll try to give a quick intro and answer all the questions you might have about Rust. &lt;/p&gt;

&lt;p&gt;Here are some of the points I will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#what-is-rust%3F"&gt;What is Rust?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://serokell.io/blog/rust-guide#data-ownership-model"&gt;Rust’s borrow checker&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#rust-vs.-c%2B%2B"&gt;Rust vs. C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#rust-and-webassembly"&gt;Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://serokell.io/blog/rust-guide#getting-started-with-rust"&gt;Getting started with Rust&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://serokell.io/blog/rust-guide#further-learning"&gt;Further learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rust" class="anchor"&gt;
  &lt;/a&gt;
  What is Rust?
&lt;/h2&gt;

&lt;p&gt;Rust is a low-level statically-typed multi-paradigm programming language that’s focused on safety and performance. &lt;/p&gt;

&lt;p&gt;Rust solves problems that C/C++ has been struggling with for a long time, such as memory errors and building concurrent programs. &lt;/p&gt;

&lt;p&gt;It has three main benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  better memory safety due to the compiler; &lt;/li&gt;
&lt;li&gt;  easier concurrency due to the data ownership model that prevents data races;&lt;/li&gt;
&lt;li&gt;  zero-cost abstractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s go through each of these in turn. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-segfaults" class="anchor"&gt;
  &lt;/a&gt;
  No segfaults
&lt;/h3&gt;

&lt;p&gt;If you want to do system programming, you need the low-level control that memory management provides. Unfortunately, manual management comes with a lot of issues in languages like C. Despite the presence of tools like Valgrind, catching memory management problems is tricky. &lt;/p&gt;

&lt;p&gt;Rust prevents these issues. Rust’s ownership system analyses the program’s memory management at compile-time, making sure that bugs due to poor memory management can’t happen and that garbage collection is unnecessary. &lt;/p&gt;

&lt;p&gt;Furthermore, if you want to do super-optimized implementations in a C-like manner, you can do that while expressly separating them from the rest of the code with the &lt;a href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html"&gt;unsafe&lt;/a&gt; keyword.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-concurrency" class="anchor"&gt;
  &lt;/a&gt;
  Easier concurrency
&lt;/h3&gt;

&lt;p&gt;Due to the borrow checker, Rust can prevent data races at compile-time.&lt;/p&gt;

&lt;p&gt;Data races occur when two threads access the same memory at the same time, and they can lead to some nasty, unpredictable behavior. Thankfully, preventing undefined behavior is all what Rust is about. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zerocost-abstractions" class="anchor"&gt;
  &lt;/a&gt;
  Zero-cost abstractions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://carette.xyz/posts/zero_cost_abstraction/"&gt;Zero-cost abstractions&lt;/a&gt; make sure that there is virtually no runtime overhead for the abstractions that you use. In simpler words: there is no speed difference between low-level code and one written with abstractions. &lt;/p&gt;

&lt;p&gt;Are these things important? Yes. For example, &lt;a href="https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/"&gt;around 70 % of the issues&lt;/a&gt; addressed by Microsoft in the past 12 years have been memory errors. &lt;a href="https://www.zdnet.com/article/chrome-70-of-all-security-bugs-are-memory-safety-issues/"&gt;Same with Google Chrome&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-rust-good-for" class="anchor"&gt;
  &lt;/a&gt;
  What is Rust good for?
&lt;/h3&gt;

&lt;p&gt;Rust being a rather low-level language, it's useful when you need to squeeze more out of the resources you have. Since it's statically typed, the type system helps you deter certain classes of bugs during compilation. Therefore, you will tend to use it when your resources are limited, and when it is important that your software doesn't fail. In contrast, high-level dynamically typed languages like Python and JavaScript are better for things like quick prototypes.&lt;/p&gt;

&lt;p&gt;Here are some of Rust’s use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Powerful, cross-platform command-line tools.&lt;/li&gt;
&lt;li&gt;  Distributed online services.&lt;/li&gt;
&lt;li&gt;  Embedded devices.&lt;/li&gt;
&lt;li&gt;  Anywhere else you would need systems programming, like &lt;a href="https://research.mozilla.org/servo-engines/"&gt;browser engines&lt;/a&gt; and, perhaps, &lt;a href="https://www.theregister.com/2020/07/13/rust_code_in_linux_kernel/"&gt;Linux kernel&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, here are a few operating systems, written in Rust: &lt;a href="https://www.redox-os.org/"&gt;Redox&lt;/a&gt;, &lt;a href="https://intermezzos.github.io/"&gt;intermezzOS&lt;/a&gt;, &lt;a href="https://github.com/QuiltOS/QuiltOS"&gt;QuiltOS&lt;/a&gt;, &lt;a href="https://github.com/sorpaas/rux"&gt;Rux&lt;/a&gt;, &lt;a href="https://github.com/tock/tock"&gt;Tock&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-objectoriented" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust object-oriented?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Who knows what object-oriented means nowadays?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is &lt;em&gt;not really.&lt;/em&gt; Rust has some object-oriented features: you can create structs, and they can contain both data and associated methods on that data, which is kind of similar to classes minus inheritance. But in contrast to languages like Java, Rust doesn’t have inheritance and uses traits to achieve polymorphism instead. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-a-functional-programming-language" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust a functional programming language?
&lt;/h3&gt;

&lt;p&gt;Even though Rust is superficially quite similar to C, it is heavily influenced by the ML family of languages. (This family includes languages like OCaml, F#, and Haskell.) For example, Rust traits are basically Haskell’s typeclasses, and Rust has very powerful pattern matching capabilities.&lt;/p&gt;

&lt;p&gt;Rust does feature more mutability than functional programmers would usually be accustomed to. We can think of it like this: both Rust and FP try to avoid shared mutable state. While FP is focused on avoiding mutable state, Rust tries to avoid the shared part of the danger. Rust is also missing a lot of stuff that would make functional programming doable in it, such as tail call optimization and good support for functional data structures. &lt;/p&gt;

&lt;p&gt;All in all, there is enough support for functional programming in Rust for somebody to have written &lt;a href="https://www.amazon.com/Hands-Functional-Programming-Rust-applications-ebook/dp/B07C5S4729"&gt;a book&lt;/a&gt; about it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-good-for-game-development" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust good for game development?
&lt;/h3&gt;

&lt;p&gt;Theoretically, yes. Since Rust is focused on performance and does not use a garbage collector, games written in it should be performant and predictably fast. &lt;/p&gt;

&lt;p&gt;Unfortunately, the ecosystem is still young, and there is nothing written in Rust that would compare to Unreal Engine, for example. The pieces are there, though, and Rust has a lively community. If you want to see examples of games written in Rust, you can go to the &lt;a href="https://www.reddit.com/r/rust_gamedev/"&gt;Rust game dev subreddit&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;More on Rust game dev: &lt;a href="https://arewegameyet.rs/"&gt;Are we game yet?&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-rust-good-for-web-development" class="anchor"&gt;
  &lt;/a&gt;
  Is Rust good for web development?
&lt;/h3&gt;

&lt;p&gt;Rust has multiple frameworks for web development like &lt;a href="https://github.com/actix/actix-web"&gt;Actix Web&lt;/a&gt; and &lt;a href="https://rocket.rs/"&gt;Rocket&lt;/a&gt; that are very usable and well-built. In particular, if you are looking for pure speed, Actix Web hits the top of &lt;a href="https://www.techempower.com/benchmarks/"&gt;framework benchmarks&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Rust doesn’t have anything that can compete with the ecosystem of frameworks like Django and Rails, though. Since Rust is a rather young language, a lot of handy utility libraries are missing, which means that the development process is not that simple and easy. &lt;/p&gt;

&lt;p&gt;More on web development in Rust: &lt;a href="https://www.arewewebyet.org/"&gt;Are we web yet?&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Rust is a powerful tool for writing memory-safe and thread-safe applications while keeping it fast. While it has great potential, it is unclear whether the choice of Rust is warranted in fields where considerable library support is needed &lt;em&gt;right at this very moment&lt;/em&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#data-ownership-model" class="anchor"&gt;
  &lt;/a&gt;
  Data ownership model
&lt;/h2&gt;

&lt;p&gt;Let’s dive into one of the things that make Rust special – its borrow checker.&lt;/p&gt;

&lt;p&gt;To start explaining data ownership in Rust, I need to introduce you to two kinds of memory in low-level programming: the stack and the heap. &lt;/p&gt;

&lt;p&gt;Stack is used for static memory allocation, while heap is used for dynamic memory allocation. In simpler words: stack is for things whose memory size we know (like integers or str, which in Rust is a string-in-memory), while heap is for things whose size might change significantly (a regular String). To operate with these mutable things, we allocate space for them on the heap and put a pointer to that space on the stack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQAu7ns1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/18/185qd9q0.1_%2827%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQAu7ns1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/18/185qd9q0.1_%2827%29.jpg" alt="Data ownership in Rust"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#moving" class="anchor"&gt;
  &lt;/a&gt;
  Moving
&lt;/h3&gt;

&lt;p&gt;But there’s a problem: what to do if two variables are assigned a pointer to the same data on the heap? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMQfI-21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ub/ubsq62oz.2_%2819%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMQfI-21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ub/ubsq62oz.2_%2819%29.jpg" alt="Example: two variables are assigned a pointer to the same data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try to change one of the variables by changing the data underneath, the other one will also change, which is frequently not something we want.&lt;/p&gt;

&lt;p&gt;The same (and even worse) situation happens if there two threads are operating with the same data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dssFd2o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/41/416s5oes.3_%2817%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dssFd2o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/41/416s5oes.3_%2817%29.jpg" alt="Illustration: two threads operating with the same data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine if one of these threads mutate the data on the heap while the other is reading from it. Oh, the eldritch horror that can come out of it! We call this a data race. &lt;/p&gt;

&lt;p&gt;Therefore, in Rust, only one variable can own a certain piece of data. Once you assign that data to another variable, it is either moved or copied.&lt;/p&gt;

&lt;p&gt;To give an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"All men who repeat a line from Shakespeare are William Shakespeare."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="nf"&gt;.push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"― Jorge Luis Borges"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This won’t compile because the ownership of data gets moved to s2, and &lt;code&gt;s1&lt;/code&gt; can’t be accessed after the move anymore. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TCUBSbJENO4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#borrowing" class="anchor"&gt;
  &lt;/a&gt;
  Borrowing
&lt;/h3&gt;

&lt;p&gt;Now, moving the ownership around manually is quite troublesome since you always need to make sure to give it back.&lt;/p&gt;

&lt;p&gt;To solve that, we can borrow variables by creating references to them. Using these references doesn’t transfer ownership, but lets us either read the variable (immutable reference or &lt;code&gt;&amp;amp;&lt;/code&gt;) or even mutate it (mutable reference or &lt;code&gt;mut &amp;amp;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;But there are limits on references, since having multiple mutable references would amount to the same thing as having multiple owners. &lt;/p&gt;

&lt;p&gt;That’s why the compiler enforces a rule for referencing things.&lt;/p&gt;

&lt;p&gt;You can do either: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  multiple immutable references (read-only), &lt;/li&gt;
&lt;li&gt;  one mutable reference (read-and-write).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an intuitive metaphor that I shamelessly borrow from &lt;a href="https://github.com/Dhghomon/easy_rust"&gt;Rust explained using easy English&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Think of data referenced as a Powerpoint presentation. You can either edit the presentation (mutable ref), or present it to any amount of people (immutable ref), but if it’s presented while it’s being edited, heads might roll in the respective department. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8M0QfLUDaaA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rust-vs-c" class="anchor"&gt;
  &lt;/a&gt;
  Rust vs. C++
&lt;/h2&gt;

&lt;p&gt;Now that we know what makes Rust special, we can compare it to the other main systems programming language – C++. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w8NuEWc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ih/ihu89a0m.4_%2813%29.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8NuEWc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://serokell.io/files/ih/ihu89a0m.4_%2813%29.jpg" alt="Rust and C++ comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-choose-rust-over-c" class="anchor"&gt;
  &lt;/a&gt;
  Why choose Rust over C++
&lt;/h3&gt;

&lt;p&gt;In C++, developers have more issues when trying to avoid undefined behavior. In Rust, the borrow checker enables you to avoid unsafe behavior by design. This eradicates a whole class of bugs, and that’s quite important. &lt;/p&gt;

&lt;p&gt;In addition, Rust is a much more modern and, in some aspects, better-designed language. In particular, the powerful type system will help you even when its main objective is not to catch memory errors, and being new, it can create its tooling with the best practices in mind without worrying about legacy codebases.  &lt;/p&gt;

&lt;p&gt;If you don’t want to drop your old C code, Rust has a solution. You can easily call your functions through FFI (Foreign Function Interface). Of course, the compiler can’t guarantee the safety of this code, but it’s a good last resort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-choose-c-over-rust" class="anchor"&gt;
  &lt;/a&gt;
  Why choose C++ over Rust
&lt;/h3&gt;

&lt;p&gt;C and C++ have been around for decades. Whatever problem you want to solve, there’s most likely a ton of libraries by people that have had the same exact problem. &lt;/p&gt;

&lt;p&gt;Sometimes, this means that it is impossible to use Rust because it is practically impossible to replicate the ecosystem support. In particular, C++ has game engines and frameworks that we won’t see on Rust for quite some time. &lt;/p&gt;

&lt;p&gt;The same problems that Rust solves, modern C++ has solved in (somewhat roundabout) ways, so trusting experienced C++ developers is a reasonably safe option if you do not want to venture in Rust. &lt;/p&gt;

&lt;p&gt;And, of course, to write Rust, you sometimes need to wrestle with the compiler. This is not for everyone. &lt;/p&gt;




&lt;p&gt;In the end, Rust’s slogan is “A language empowering everyone to build reliable and efficient software.” &lt;/p&gt;

&lt;p&gt;While Rust initially started as a replacement for C++, it is clear that they are aiming further, trying to make lower-level programming accessible to more and more people that wouldn’t perhaps be able to handle C++. &lt;/p&gt;

&lt;p&gt;This makes the comparison a bit moot. Rust is not a substitute, but a language that opens up new spaces of possibility, one of which we will discuss in the next section. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rust-and-webassembly" class="anchor"&gt;
  &lt;/a&gt;
  Rust and WebAssembly
&lt;/h2&gt;

&lt;p&gt;If you haven’t yet heard about it, WebAssembly is like… &lt;a href="https://en.wikipedia.org/wiki/Assembly_language"&gt;Assembly&lt;/a&gt; for the Web. &lt;/p&gt;

&lt;p&gt;Historically, browsers have been able to run HTML, CSS, and JavaScript, with HTML responsible for the structure, CSS for the look, and JavaScript for the interactions. If you didn’t like writing plain JavaScript, you could transpile it from various other languages that added types, Haskell- or OCaml-like code, and other things. &lt;/p&gt;

&lt;p&gt;But, JavaScript does not have the predictably fast performance necessary to run computation-intensive applications like games. (This is due to the garbage collector and dynamic typing.) &lt;/p&gt;

&lt;p&gt;WebAssembly helps with that. It is a language for the browser that can serve as a compile target for any language, such as Rust, Python, C++. This means that you can take code in basically any modern programming language, and put it in the browser. &lt;/p&gt;

&lt;p&gt;In comparison to other languages, Rust is ideally suited for writing code to compile to WebAssembly. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Minimal runtime.&lt;/strong&gt; WebAssembly doesn’t have its own runtime, so it needs to be shipped with the code. The smaller the runtime, the less stuff the user needs to download. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Statically typed.&lt;/strong&gt; Since Rust is statically typed, it can compile to a more efficient WebAssembly since the compiler can use the types to optimize the code. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;We have a head start.&lt;/strong&gt; Most importantly, Rust has embraced WebAssembly wholeheartedly. Rust already has a fantastic community and tooling for compiling to WebAssembly, which, to be honest, is the most significant advantage out of these three. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info on Rust and WebAssembly, watch &lt;a href="https://www.youtube.com/watch?v=CMB6AlE1QuI"&gt;this talk by Steve Klabnik&lt;/a&gt; or check out the &lt;a href="https://rustwasm.github.io/docs/book/"&gt;rustwasm book&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started-with-rust" class="anchor"&gt;
  &lt;/a&gt;
  Getting started with Rust
&lt;/h2&gt;

&lt;p&gt;To get started with Rust code, you can either download &lt;code&gt;rustup&lt;/code&gt; &lt;a href="https://www.rust-lang.org/tools/install"&gt;here&lt;/a&gt; or use the &lt;a href="https://play.rust-lang.org/"&gt;Rust Playground&lt;/a&gt;, which is an online tool that lets you run some Rust code and witness the consequences.😅&lt;/p&gt;

&lt;p&gt;Once you have your Rust environment ready, let’s do some code. Here, we will be doing a Rust version of fizzbuzz to give a brief insight into what Rust is capable of. &lt;/p&gt;

&lt;p&gt;To create a new project, go to the directory you want the project to be in and do &lt;code&gt;cargo new fizzbuzz&lt;/code&gt;. This will instruct Rust’s build manager to create a new project. Once you do that, go to the&lt;code&gt;/src&lt;/code&gt; folder and open up &lt;code&gt;main.rs&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;First, let’s write something that takes a number and returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  “fizz” for the numbers that divide with 3,&lt;/li&gt;
&lt;li&gt;  “buzz” for numbers that divide with 5,&lt;/li&gt;
&lt;li&gt;  “fizzbuzz” for numbers that divide with both 3 and 5,&lt;/li&gt;
&lt;li&gt;  the number as a string if it is divided with neither. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust has a very powerful tool in match statements to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fizzbuzz&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"fizzbuzz"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"fizz"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"buzz"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since text in quotes is a string in memory, or &lt;code&gt;str&lt;/code&gt;in Rust, we need to convert it to a String.  &lt;/p&gt;

&lt;p&gt;Now, we need a way to count up to a certain number from 1. We’ll write a new function that takes the number as an argument, creates a range from 1 to the number, applies the&lt;code&gt;fizzbuzz&lt;/code&gt; function, and prints the result. In Rust, we can achieve this with a simple for loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;count_up_to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To achieve any result in the terminal, we need to have a main function. Let’s replace hello_world with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;count_up_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we can use the &lt;code&gt;cargo run main.rs&lt;/code&gt; command, and most likely, should see a stream of fizzes and buzzes on our terminal. &lt;/p&gt;

&lt;p&gt;But hey! Perhaps fizzbuzz isn’t the only game we play? Perhaps the new hotness is wubbalubba? Let’s quickly modify our counting code to make sure we can take on any of the counting games around town. &lt;/p&gt;

&lt;p&gt;To do that, we will need our Rust function to take another function that takes an unsigned 32-bit integer and returns a String. After adding what is called a &lt;em&gt;function pointer&lt;/em&gt; to the type signature, the worst has passed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;count_up_to_with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside, we just need to substitute fizzbuzz with the function variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;count_up_to_with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we add a new game that somehow turns integers into strings, our function will be able to handle it. &lt;/p&gt;

&lt;p&gt;For convenience, here is wubbalubba, hardly a creative invention:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;wubbalubba&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"dub dub"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"wubba"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"lubba"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the required function to call it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;count_up_to_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wubbalubba&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#further-learning" class="anchor"&gt;
  &lt;/a&gt;
  Further learning
&lt;/h2&gt;

&lt;p&gt;Rust’s community is awesome. Everywhere you go, you will find a lot of clearly-explained, beginner-oriented materials for learning and people ready to help you. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://tourofrust.com/"&gt;Tour of Rust&lt;/a&gt;.&lt;/strong&gt; An interactive tutorial on the basics of Rust, up until generics and smart pointers.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://doc.rust-lang.org/book/"&gt;The Rust Programming Language&lt;/a&gt;.&lt;/strong&gt; The Rust book of choice, available online for free. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://exercism.io"&gt;Exercism Rust track&lt;/a&gt;.&lt;/strong&gt; If you want to get more experience with the language and its syntax, Exercism is a good option. Unfortunately, it looks like the Rust track is slightly overpopulated right now, so don’t count on receiving a lot of mentor attention. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://doc.rust-lang.org/stable/rust-by-example/"&gt;Rust by example&lt;/a&gt;.&lt;/strong&gt; A collection of examples of idiomatic Rust code. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://cheats.rs/"&gt;Rust cheat sheet&lt;/a&gt;.&lt;/strong&gt; If you want to take a quick look at the most important concepts of Rust, this is for you. &lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;&lt;a href="https://github.com/rust-lang/rustlings"&gt;Rustlings&lt;/a&gt;.&lt;/strong&gt; A collection of Rust exercises that will let you wrestle with the compiler in a controlled environment. &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope that this article helped you understand why Rust is so popular and loved right now. I also hope that I have set you on a path towards learning and trying out Rust for yourself, either for a tool or a side project. If you want to read more posts on development and cool programming languages, follow us on social media: &lt;a href="https://twitter.com/serokell"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.facebook.com/serokell.io/"&gt;Facebook&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>gamedev</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding Docker: part 25 – Dockerfile: CMD &amp; ENTRYPOINT instructions</title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 04 Jan 2021 07:24:58 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-part-25-dockerfile-cmd-entrypoint-instructions-35of</link>
      <guid>https://dev.to/aurelievache/understanding-docker-part-25-dockerfile-cmd-entrypoint-instructions-35of</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker. I think it could be a good way, more visual, to explain Docker (and other technologies like Kubernetes and Istio).&lt;/p&gt;

&lt;p&gt;We continue the series of Docker sketchnotes with an explanation about CMD &amp;amp; ENTRYPOINT instructions in Dockerfile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJuzzk_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bi7a7qll7w91wpx43sr9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJuzzk_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bi7a7qll7w91wpx43sr9.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHBoBvR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x5qgz9im7wbc4xkw09od.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHBoBvR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x5qgz9im7wbc4xkw09od.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GcCfdDPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6wlt79s90f9sn6zmvx68.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GcCfdDPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6wlt79s90f9sn6zmvx68.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0O_HRdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8us7sa6c2mgefjlx13rq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0O_HRdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8us7sa6c2mgefjlx13rq.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 120 pages: ["Understanding Kubernetes in a visual way"] and a sketchbook about Istio (&lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;https://gumroad.com/aurelievache#uCxcr&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>10 Awesome Free Courses for Devs by Devs</title>
      <author>Simon Holdorf</author>
      <pubDate>Mon, 04 Jan 2021 07:22:50 +0000</pubDate>
      <link>https://dev.to/simonholdorf/10-awesome-free-courses-for-devs-by-devs-15ci</link>
      <guid>https://dev.to/simonholdorf/10-awesome-free-courses-for-devs-by-devs-15ci</guid>
      <description>&lt;p&gt;This article was originally published on &lt;a href="https://thesmartcoder.dev/awesome-free-courses-for-devs-by-devs/"&gt;The Smart Coder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning to code and becoming a web developer is one of the best decisions you can make these days. And luckily there are tons of material, often in the form of courses to help you with that. To help you discover awesome courses covering different programming languages and technologies, I have curated this list of 10 fantastic courses for beginners. &lt;/p&gt;

&lt;p&gt;I am not affiliated with any of the creators and don't receive any compensation or anything like that. This is just a list of 10 of my favorite courses that I want to share with you!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#javascript-30" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript 30
&lt;/h2&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/28643bqnqgzl/37uWikpIo57ltrGtpDo4uo/093cdf4cc7b0de023bcdf67329abcaf7/javascript30_orj9f0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/37uWikpIo57ltrGtpDo4uo/093cdf4cc7b0de023bcdf67329abcaf7/javascript30_orj9f0.jpg" alt="JavaScript projects for beginners"&gt;&lt;/a&gt;&lt;br&gt;
Let's start with a real burner. The JavaScript 30 course by the amazing Wes Bos is just awesome. During this course that spans over 30 days, you are going to build 30 &lt;a href="https://thesmartcoder.dev/9-awesome-projects-you-can-build-with-vanilla-javascript/"&gt;vanilla javascript projects&lt;/a&gt;. That means no frameworks, libraries, compilers, or boilerplates. Just plain, vanilla JS. This is an awesome course to practice the basics of JavaScript, add cool things to your portfolio, and become better in JS! Almost 400,000 developers have taken this course and you should be next!&lt;/p&gt;

&lt;p&gt;If you need more inspiration for cool &lt;a href="https://thesmartcoder.dev/9-awesome-projects-you-can-build-with-vanilla-javascript/"&gt;javascript projects&lt;/a&gt; check out this post!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript30.com/"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#beginners-guide-to-react-w-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Beginner's Guide to React w/ Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9U3IhLAnSxM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Many of you know Colt Steele for his fantastic Udemy courses and his boot camp (with job-guarantee!). And because Colt cares for the community he created a free introduction course to React. In almost 2 and a half hours Colt is going to show you the basics of React including &lt;a href="https://thesmartcoder.dev/awesome-react-hooks/"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Functional Components? Check!&lt;br&gt;
JSX? Check!&lt;br&gt;
Props &amp;amp; State? Check, Check!&lt;br&gt;
Styling in React? Also, Check!&lt;/p&gt;

&lt;p&gt;There are of course longer courses that go much more into detail. But for beginners, this course is extremely valuable and a solid foundation to dig deeper into React!&lt;/p&gt;

&lt;p&gt;If you want to learn more about &lt;a href="https://thesmartcoder.dev/awesome-react-hooks/"&gt;React Hooks&lt;/a&gt; and want to become a &lt;a href="https://thesmartcoder.dev/10-tips-and-tricks-that-will-make-you-a-better-reactjs-dev/"&gt;better React Developer&lt;/a&gt;, check out these posts!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=9U3IhLAnSxM"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vue-js-3-tutorial-for-beginners" class="anchor"&gt;
  &lt;/a&gt;
  Vue JS 3 Tutorial for Beginners
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YrxBCBibVo0"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Vue.js is almost as popular as React and even got more stars on GitHub! So learning Vue is always a good choice and this course for beginners by Shaun Pelling (The Net Ninja) might well be your kickstart into a successful developer career!  It teaches Vue.js 3, the brand new version that was released not long ago, and explains the basic concepts very well. It covers topics such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Vue CLI&lt;/li&gt;
&lt;li&gt;Fetching Data&lt;/li&gt;
&lt;li&gt;Composition API (Brand new!)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shaun also got a more in-depth course on Udemy (paid) if you want to dig deeper into Vue.js. Here are some more &lt;a href="https://thesmartcoder.dev/10-free-resources-to-kickoff-your-career-as-a-vue-developer/"&gt;free Vue resources&lt;/a&gt; for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=YrxBCBibVo0&amp;amp;list=PL4cUxeGkcC9hYYGbV60Vq3IXYNfDk8At1"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#python-for-beginners" class="anchor"&gt;
  &lt;/a&gt;
  Python for Beginners
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_uQrJ0TkZlc"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Python is one of the hottest programming languages to learn right now. Besides web development, Python is often used for machine learning and data science, professions with high demand, and even higher salaries!&lt;/p&gt;

&lt;p&gt;This course (5 hours long) by Mosh Hamedani who is well-known for his fantastic courses and what he does for the community is a perfect introduction to the Python language. Mosh is going to teach you things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Types&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Loops&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and much more. He also provides you with three cool Python projects to practice what you learned.&lt;/p&gt;

&lt;p&gt;So if you want a career in ML or Data Science, Python is the right choice and this course can be where it all starts!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_uQrJ0TkZlc"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-flutter-email-course" class="anchor"&gt;
  &lt;/a&gt;
  The Flutter Email Course
&lt;/h2&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/28643bqnqgzl/6Sbh3fl675En1O32n87ntS/62ed844936f8531ab1ed59c5aa5e6c20/codewithandrea_js4dgk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/6Sbh3fl675En1O32n87ntS/62ed844936f8531ab1ed59c5aa5e6c20/codewithandrea_js4dgk.jpg" alt="Flutter Course for Beginners"&gt;&lt;/a&gt;&lt;br&gt;
Flutter is Google's open-source UI Development Kit for building awesome, cross-platform applications in the Dart programming language. According to a recent Stackoverflow survey, Flutter is the #4 most-loved framework by developers.&lt;/p&gt;

&lt;p&gt;But how can you get started with Flutter? Let me introduce you to Andrea Bizzotto, an absolute expert when it comes to Flutter &amp;amp; Dart. And luckily for us, Andrea recently created a free Flutter Course in the form of a newsletter to help you become versatile Flutter developers.&lt;/p&gt;

&lt;p&gt;During 15 days you will get 15 emails, one a day covering different topics. Each email is containing a brief intro, links to the most important resources, and a small challenge to test your knowledge. &lt;/p&gt;

&lt;p&gt;The course covers topics like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flutter state management&lt;/li&gt;
&lt;li&gt;Data Persistence&lt;/li&gt;
&lt;li&gt;Animations&lt;/li&gt;
&lt;li&gt;Platform Channels,&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;CI/CD&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a great way to get started with Flutter and you can enhance your knowledge afterward on your own or by checking out more of Andrea's great courses!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithandrea.com/newsletter/"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nodejs-course-for-beginners" class="anchor"&gt;
  &lt;/a&gt;
  Node.js Course for Beginners
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RLtyhwFtXQA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Node.js is slowly becoming the number one choice for many developers when building APIs and writing server-side code. Many corporations integrate Node in their tech stacks because it's based on JavaScript and uses Google's V8 engine. It's also a good choice if you want to become a full-stack developer because you can use a frontend framework like React and code everything in JS.&lt;/p&gt;

&lt;p&gt;In this introductory course, NoobCoder will provide you with a solid overview of the features of Node.js. He covers topics such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File system&lt;/li&gt;
&lt;li&gt;Streams &amp;amp; pipes&lt;/li&gt;
&lt;li&gt;Creating HTTP servers&lt;/li&gt;
&lt;li&gt;Express framework&lt;/li&gt;
&lt;li&gt;User Input Validation&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all, it's a good start into the world of Node.js. Even though the course is from 2018, most of the things are still valid today. And if you are serious about working with Node.js, you need additional resources and practice anyway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RLtyhwFtXQA"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#typescript-course-for-beginners" class="anchor"&gt;
  &lt;/a&gt;
  TypeScript Course for Beginners
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BwuLxPH8IDs"&gt;
&lt;/iframe&gt;
&lt;br&gt;
TypeScript is one of the most loved programming languages for many developers according to a recent Stackoverflow survey. It combines the beauty of JavaScript with strong typing and modern compiler features. Angular and Nest.js make heavy use of TypeScript and helped it gaining popularity. &lt;br&gt;
If you haven't tried out TypeScript yet, I recommend you to do so. I know many developers that once they have touched TS never want to go back to writing pure JS.&lt;br&gt;
And if you want to watch a course to learn the basics of TypeScript I got something for you. This course by Maximilian Schwarzmüller (famous for his brilliant Udemy courses) is exactly what you need.&lt;br&gt;
The quality is top-notch (Max-Standard) and the course covers topics like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to TS&lt;/li&gt;
&lt;li&gt;Types&lt;/li&gt;
&lt;li&gt;Tuples &amp;amp; Enums&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Compilation&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=BwuLxPH8IDs"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#html-crash-course-for-absolute-beginners" class="anchor"&gt;
  &lt;/a&gt;
  HTML Crash Course for Absolute Beginners
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UB1O30fR-EE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
When you are new to web development, people will often advise you to start with the basics. And by that, they usually mean HTML, CSS, and JavaScript. That often makes sense because when you are building, let's say a house, you won't start with the interior without having at least some walls first. Think of HTML &amp;amp; CSS as the basic structure for any website. &lt;/p&gt;

&lt;p&gt;So if you want to get started with web development and know absolutely nothing about HTML, this great course by Brad Traversy (a.k.a. Traversy Media) is exactly what you need. It's quite short with about 1-hour length but will cover the most basics things about HTML like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing a Text Editor&lt;/li&gt;
&lt;li&gt;HTML Page Structure&lt;/li&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;li&gt;Headings, Paragraphs&lt;/li&gt;
&lt;li&gt;Lists, Tables, Forms, Buttons&lt;/li&gt;
&lt;li&gt;HTML5 Semantic Tags&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UB1O30fR-EE"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#aws-certified-cloud-practitioner-training" class="anchor"&gt;
  &lt;/a&gt;
  AWS Certified Cloud Practitioner Training
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3hLmDS179YE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Because almost everything runs in the cloud today, the demand for cloud developers, administrators, and people with similar skills is continuously rising. And Amazon Web Services is a major, if not the biggest player in this game. If you have acquired one or more certifications for AWS services your chances for well-payed jobs are even higher. &lt;/p&gt;

&lt;p&gt;And because of this, Andrew Brown, AWS Community Hero, and Cloud Expert created this course (and many more!) for you to prepare for the AWS Certified Cloud Practitioner exam.&lt;/p&gt;

&lt;p&gt;The free course covers topics like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Cloud Concepts&lt;/li&gt;
&lt;li&gt;AWS Infrastructure&lt;/li&gt;
&lt;li&gt;Getting started with AWS&lt;/li&gt;
&lt;li&gt;EC2, ELB, S3, CloudFront&lt;/li&gt;
&lt;li&gt;Pricing Models &amp;amp; Pricing&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This certificate is often seen as the entry-point for a career in cloud services and might be one of the biggest opportunities for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3hLmDS179YE"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#java-tutorial-for-complete-beginners" class="anchor"&gt;
  &lt;/a&gt;
  Java Tutorial for Complete Beginners
&lt;/h2&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/28643bqnqgzl/5zDWEX1lFrAJflTHaF68jE/25f86b9fa0e7aa62ef5afbf5dc3b9224/java_course_lbqvmz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/28643bqnqgzl/5zDWEX1lFrAJflTHaF68jE/25f86b9fa0e7aa62ef5afbf5dc3b9224/java_course_lbqvmz.jpg" alt="Java course for beginners"&gt;&lt;/a&gt;&lt;br&gt;
When you are on Twitter or other social media covering programming topics it always seems that only JavaScript and maybe Python exist in this world. This, of course, is not true. Java is still a fantastic programming language that continuously becomes better and receives new features. It's strongly-typed and run by billions of devices, for example, Android phones or IoT devices. Major corporations have Java as part of their technology stack (a lot of AWS is written in Java!) and the demand and pay for qualified developers is still very high, just look at some job openings.&lt;/p&gt;

&lt;p&gt;This course by John Purcell aims at anyone that has a desire to learn programming without any prior knowledge. It's a whopping 16-hours full of Java knowledge that covers topics such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core Java&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Loops&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;li&gt;Constructors&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Java Collections Framework&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more about the &lt;a href="https://thesmartcoder.dev/java-vs-javascript/"&gt;difference between java and javascript&lt;/a&gt; check out this post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/java-tutorial/"&gt;Link to course&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is just a small sample of tons of fantastic courses available. But in the mass of content arises a problem: Where do you find &lt;a href="https://thesmartcoder.dev/courses/"&gt;the best courses for developers&lt;/a&gt; by the best developers? &lt;/p&gt;

&lt;p&gt;There are many platforms like Youtube or Udemy where you can find courses. But some great courses are shared by their creators via social media or on their own, personal home pages solely. This makes it easy to miss out on their wonderful work!&lt;/p&gt;

&lt;p&gt;I've therefore created a new feature for my site, &lt;a href="https://thesmartcoder.dev/"&gt;The Smart Coder&lt;/a&gt; called &lt;a href="https://thesmartcoder.dev/courses/"&gt;DevCourses&lt;/a&gt;. It's a place where developers can discover the best courses for all kinds of topics like JavaScript, React, Vue, Java, AWS, and more! You can find all the courses listed above there plus more. &lt;/p&gt;

&lt;p&gt;DevCourses is built for the community so any course creator can add their course to the site for others to discover it via a &lt;a href="https://thesmartcoder.dev/courses/create-new-course/"&gt;dedicated form&lt;/a&gt;. This way, the list of courses will steadily grow becoming the most comprehensive and high-quality repository for developer courses.&lt;/p&gt;

&lt;p&gt;So if you are the creator of a course for developers, feel free to submit it to the site. And if you know about a good course that should be on the site, contact the creator to submit it.&lt;/p&gt;

&lt;p&gt;This is a feature for the community that lives from the participation of the community.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>275 bytes BMI Calculator</title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 04 Jan 2021 06:28:23 +0000</pubDate>
      <link>https://dev.to/madsstoumann/275-bytes-bmi-calculator-1253</link>
      <guid>https://dev.to/madsstoumann/275-bytes-bmi-calculator-1253</guid>
      <description>&lt;p&gt;You don't always need a large frontend framework for interactive components. &lt;/p&gt;

&lt;p&gt;As an example, I've made a BMI Calculator, which is only 275 bytes, minified and gzipped.&lt;/p&gt;

&lt;p&gt;I always wrap smaller, interactive components, in either a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;-tag.&lt;br&gt;
Depending on the component, I add a single &lt;code&gt;eventListener&lt;/code&gt;, either &lt;code&gt;onchange&lt;/code&gt; or &lt;code&gt;oninput&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a "catch all" for any input within the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;. If I need to know the specific element that changed, it's in the &lt;code&gt;event.target&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's dissect the calculator. The &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; has two &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt; (height, weight) and three &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;-tags (height info, weight info, bmi result).&lt;/p&gt;

&lt;p&gt;Excerpt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"230"&lt;/span&gt; &lt;span class="na"&gt;step=&lt;/span&gt;&lt;span class="s"&gt;"0.5"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"180"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"ho"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;output&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The un-minified JavaScript-code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;18.49&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;18.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;24.99&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;29.99&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;34.99&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;39.99&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueAsNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueAsNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.393700787&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; cm / &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inches&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;' &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inches&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; kg / &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;2.2046&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt; lb`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;groups&lt;/code&gt; is an array of BMI-ranges, corresponding to the six BMI-groups (underweight, normal weight etc.).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;height&lt;/code&gt; and &lt;code&gt;weight&lt;/code&gt; are references to the range-input values.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bmi&lt;/code&gt; is the formula for calculating a BMI using height and weight.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index&lt;/code&gt; finds the index of the BMI-group, in which range the current &lt;code&gt;bmi&lt;/code&gt; is found. This value is later used to set the current BMI-group (a radio-button-group):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;-tag can either be set using &lt;code&gt;.innerText&lt;/code&gt; or &lt;code&gt;.value&lt;/code&gt;. I prefer the latter, and that's how the labels are set, as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bmi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/LYRdmVY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The code itself is 381 bytes, gzipped approx. 275 bytes. &lt;strong&gt;However&lt;/strong&gt;, if your modules are so small, there's no benefit in gzipping them, as the "un-gzipping" will take longer than the benefit of the smaller file-size.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Born Blind: Meet Taylor the Web Developer</title>
      <author>RealToughCandy.io</author>
      <pubDate>Mon, 04 Jan 2021 06:18:13 +0000</pubDate>
      <link>https://dev.to/realtoughcandy/born-blind-meet-taylor-the-web-developer-1pjd</link>
      <guid>https://dev.to/realtoughcandy/born-blind-meet-taylor-the-web-developer-1pjd</guid>
      <description>&lt;p&gt;Welcome to the second installment of our Web Dev Interview Series.&lt;/p&gt;

&lt;p&gt;In this series, we interview developers on what got them started, where they are now, what they'd do differently, and more.&lt;/p&gt;

&lt;p&gt;We're excited to introduce you to Taylor!&lt;/p&gt;

&lt;p&gt;Today she talks about learning web development, web accessibility and starting her own business...All while facing some unique challenges in the midst of a pandemic.&lt;/p&gt;

&lt;p&gt;Note: Answers have been edited for clarity and space constraints.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-tell-us-about-yourself" class="anchor"&gt;
  &lt;/a&gt;
  1. Tell us about yourself.
&lt;/h2&gt;

&lt;p&gt;Hello, My name is Taylor Arndt. I was born blind since birth with an eye condition called Septo-optic dysplasia (optic nerve hypoplasia) where my optic nerve didn’t fully develop. As a result, I am almost completely blind with the exception of lights, colors, and shadows.&lt;/p&gt;

&lt;p&gt;I am from the state of Michigan. I grew up in a small town, so I always had some accessibility battles going on. I have had to teach myself many skills like how to use a screen reader which is a tool blind users use which reads the content of the screen aloud to them. Before teaching myself web development, I was your average college student studying computer science.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-made-you-get-into-web-development" class="anchor"&gt;
  &lt;/a&gt;
  2. What made you get into web development?
&lt;/h2&gt;

&lt;p&gt;We all know that 2020 has been a crazy year for all of us. I lost my job at the college helping students and departments with their accessibility issues due to the lack of funding that the pandemic caused. In addition, I faced more inaccessibility problems on the academic side of the computer science department. They basically told me, “We really can’t help you because of COVID” even though they have to because of regulations.&lt;/p&gt;

&lt;p&gt;In addition, my math was lacking because I never had the proper math education because growing up in a small town math teachers didn’t want to teach me because they didn’t want to adapt math so a blind person could learn it. So the perfect storm happened where I couldn’t advance until I had the math, even though I had basically taught myself lots of programming.&lt;/p&gt;

&lt;p&gt;I then needed to support myself because of the loss of my position so I then started my own company, Taylor’s Accessibility Services, LLC, where I help companies with web accessibility remediation and other services. I have had many clients tell me that they need web developers so I started to learn and build my skills. I took one programming class at my college, so I knew the fundamentals at least. I am going to college at my local community college just to get some practical experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-what-resources-have-you-been-using-to-study" class="anchor"&gt;
  &lt;/a&gt;
  3. What resources have you been using to study?
&lt;/h2&gt;

&lt;p&gt;I have used a huge assortment of resources for studying. Udemy, freeCodeCamp, YouTube, tutorial websites, and whatever I can find. The hardest challenge is finding resources which are accessible with screen readers.&lt;/p&gt;

&lt;p&gt;In addition, most videos are not accessible because the instructor has to verbalize so someone who is blind can follow. If you use terms like over here, over there, and this and that, blind users can’t see what you are talking about thus making the tutorial inaccessible. There are some good instructors that verbalize like Traversy Media.&lt;/p&gt;

&lt;p&gt;You don’t have to say everything but you should explain what you are typing. Also, having the source code files help so we understand what the final product looks like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-are-your-career-goals" class="anchor"&gt;
  &lt;/a&gt;
  4. What are your career goals?
&lt;/h2&gt;

&lt;p&gt;My goal is to become a web developer to assist companies. Obviously helping make websites but in addition to make sure the websites are accessible from the start so people are not having to get sued for inaccessibility they could have prevented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-what-would-you-like-to-see-improved-in-terms-of-web-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  5. What would you like to see improved in terms of web accessibility?
&lt;/h2&gt;

&lt;p&gt;I would like to see more training for developers on the topic. Developers know they have to make things accessible but they don’t know how. In addition, many wait until the last minute to get things tested. You should start the accessibility testing process early to avoid huge costs at the end to fix inaccessibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-do-you-have-any-advice-for-those-with-visual-impairments-who-are-thinking-about-pursuing-web-development" class="anchor"&gt;
  &lt;/a&gt;
  6. Do you have any advice for those with visual impairments, who are thinking about pursuing web development?
&lt;/h2&gt;

&lt;p&gt;Yes, I would say that it is a good field. There are many people who work in web development who are blind. I would try to find accessible resources so you can learn. I mentioned some earlier like freeCodeCamp, certain Udemy courses, YouTube. I would also find a study group so you can network with other developers.&lt;/p&gt;

&lt;p&gt;If you would like to read more real-life stories about web developers, check out the &lt;a href="https://realtoughcandy.io/blog"&gt;RealToughCandy.io blog&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>a11y</category>
    </item>
    <item>
      <title>What is useState Hook in React</title>
      <author>Rahul</author>
      <pubDate>Mon, 04 Jan 2021 02:59:07 +0000</pubDate>
      <link>https://dev.to/rahxuls/what-is-usestate-hook-in-react-1cc</link>
      <guid>https://dev.to/rahxuls/what-is-usestate-hook-in-react-1cc</guid>
      <description>&lt;p&gt;&lt;strong&gt;useState&lt;/strong&gt; Hook in React - A complete guide to managing states with &lt;strong&gt;useState&lt;/strong&gt; Hook in react.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-usestate-hook" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;em&gt;useState&lt;/em&gt; hook?
&lt;/h3&gt;

&lt;p&gt;You're already familiar with the concept of states in react (Ig not, refer this series). &lt;/p&gt;

&lt;p&gt;Earlier we could declare a state variable only in the class-based component. The &lt;em&gt;useState&lt;/em&gt; hook allows us to use states in a Function Component. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-caalling-usestate-do-" class="anchor"&gt;
  &lt;/a&gt;
  WHat does caalling &lt;em&gt;useState()&lt;/em&gt; do ?
&lt;/h3&gt;

&lt;p&gt;In simple terms, it declares the "state variable". &lt;br&gt;
Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare a new state variable, which we'll call "apples"&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;setApples&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

    &lt;span class="c1"&gt;// Other codes...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The argument passed to &lt;em&gt;useState&lt;/em&gt; Hook ("0" in this case) is the initial state. This essentially means &lt;strong&gt;apples = 0&lt;/strong&gt;. The &lt;em&gt;setApples&lt;/em&gt; is a function that can be used to change the value of &lt;em&gt;apples&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-happening-here" class="anchor"&gt;
  &lt;/a&gt;
  What is happening here?
&lt;/h3&gt;

&lt;p&gt;Whenever we call useState, it returns an array with exactly two elements. The first one is the state variable and the second is the function to update the state variable. So we can also write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case, apples are an array with exactly two elements. We can access the store variable as apples [0] and the functions to update apples [0] and the function to update apples [0] as apples [1]. Since we know that useState always return exactly two elements, we can use array destructuring to get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApples&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It is not necessary to name the second element as setApples. we can call it whatever we want. But the convention is to name it like that as it makes the code much readable. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#but-why-do-we-need-a-function-to-update-the-state-variable" class="anchor"&gt;
  &lt;/a&gt;
  But why do we need a function to update the state variable?
&lt;/h4&gt;

&lt;p&gt;In vanilla JavaScript you can update the variable as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But this is not allowed in React. In react, whenever you want to update the &lt;em&gt;apples&lt;/em&gt; variable (or any other state variable), you need to call the &lt;em&gt;setApples&lt;/em&gt; (or whatever you name it) function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-update-the-state-variable" class="anchor"&gt;
  &lt;/a&gt;
  How to update the state variable?
&lt;/h2&gt;

&lt;p&gt;Let's see this example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare the state variable &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setApples&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="c1"&gt;//Function to handle the update&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appleHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appleHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setApples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Update the number of apples&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*Display the number of apples*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;Apples&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;appleHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Increase&lt;/span&gt; &lt;span class="nx"&gt;Apples&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="c1"&gt;//Button&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here you can see that we are using a button (line 16) to call the reference of &lt;em&gt;appleHandler&lt;/em&gt; (you can give any name you want) function, which calls the &lt;strong&gt;setApples&lt;/strong&gt; function to update the value of apples. &lt;/p&gt;

&lt;p&gt;Note that onClick event calls only the reference of &lt;strong&gt;appleHandler&lt;/strong&gt; function. We cannot use parenthesis ( like: &lt;em&gt;appleHandler()&lt;/em&gt; ), nor we can use &lt;em&gt;setApples&lt;/em&gt; directly to update the state, because that will execute the function as soon as the DOM is rendered and send the code into infinte loop. We only want to execute &lt;strong&gt;appleHandler&lt;/strong&gt; when the button is clicked. We can also do this by using an anonymous function as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setApples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increase&lt;/span&gt; &lt;span class="nx"&gt;Apples&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Line 16 in the previous examples can be replaced by this above code and will work the same. However, it is a good practice to use handler functions to change the state. &lt;/p&gt;




&lt;br&gt;&lt;br&gt;
Show your support. &lt;br&gt;&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/rahxuls"&gt; &lt;br&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--finLNCLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rahulism1/image/upload/v1608182430/bmc_nbxakd.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;

&lt;br&gt;&lt;br&gt;
💻 Thanks For Reading | Happy Coding 🥂

</description>
      <category>react</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a React modal component using a custom Hook</title>
      <author>Michael Burrows</author>
      <pubDate>Mon, 04 Jan 2021 02:21:56 +0000</pubDate>
      <link>https://dev.to/michaelburrows/building-a-react-modal-component-using-a-custom-hook-439g</link>
      <guid>https://dev.to/michaelburrows/building-a-react-modal-component-using-a-custom-hook-439g</guid>
      <description>&lt;p&gt;In this tutorial we’ll be building a custom React modal component that can be used to display a variety of web elements including: forms, alert messages, or images.&lt;/p&gt;

&lt;p&gt;Let’s get started by using Create React App to setup our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-modal
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;/src&lt;/code&gt; folder create a new file called &lt;code&gt;useModal.js&lt;/code&gt; which will contain the &lt;code&gt;useModal()&lt;/code&gt; custom Hook. Custom Hooks should always start with &lt;code&gt;use&lt;/code&gt; so that you can quickly tell that it’s a re-usable Hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also in the &lt;code&gt;/src&lt;/code&gt; folder create a new file called &lt;code&gt;Modal.js&lt;/code&gt; for the modal component itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-pop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dialog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Et&lt;/span&gt; &lt;span class="nx"&gt;sit&lt;/span&gt; &lt;span class="nx"&gt;saepe&lt;/span&gt; &lt;span class="nx"&gt;velit&lt;/span&gt; &lt;span class="nx"&gt;tenetur&lt;/span&gt; &lt;span class="nx"&gt;et&lt;/span&gt; &lt;span class="nx"&gt;consequatur&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Nihil&lt;/span&gt; &lt;span class="nx"&gt;doloribus&lt;/span&gt; &lt;span class="nx"&gt;nulla&lt;/span&gt; &lt;span class="nx"&gt;nulla&lt;/span&gt; &lt;span class="nx"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Soluta&lt;/span&gt; &lt;span class="nx"&gt;illo&lt;/span&gt; &lt;span class="nx"&gt;et&lt;/span&gt; &lt;span class="nx"&gt;asperiores&lt;/span&gt; &lt;span class="nx"&gt;numquam&lt;/span&gt; &lt;span class="nx"&gt;earum&lt;/span&gt; &lt;span class="nx"&gt;nesciunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Vero&lt;/span&gt; &lt;span class="nx"&gt;odio&lt;/span&gt; &lt;span class="nx"&gt;voluptatem&lt;/span&gt; &lt;span class="nx"&gt;sunt&lt;/span&gt; &lt;span class="nx"&gt;sunt&lt;/span&gt; &lt;span class="nx"&gt;laboriosam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;   &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;, document.bod&lt;/span&gt;&lt;span class="err"&gt;y
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;visible&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; we use a &lt;a href="https://reactjs.org/docs/portals.html"&gt;Portal&lt;/a&gt; to render the modal into a DOM node that exists outside the DOM hierarchy of the parent component, in this instance the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. This is because modals need to be the last DOM element in a page to meet accessibility requirements.&lt;/p&gt;

&lt;p&gt;We can now pull it all together by modifying the &lt;code&gt;App.js&lt;/code&gt; file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Modal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useModal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modal&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally add some basic CSS to &lt;code&gt;App.css&lt;/code&gt; so we can test the functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal-pop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#aaa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.modal-overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can now test the modal by running the &lt;code&gt;npm start&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Whilst this example is quite simple it demonstrates how to build a functioning modal component that you can customise for use in future projects. Thanks for reading and be sure to check out my other tutorials on building React components.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Finding Winning Stocks with Web Scrapers, and Serverless (AWS Lambda and DynamoDB)</title>
      <author>Miguel A. Calles MBA</author>
      <pubDate>Mon, 04 Jan 2021 00:13:08 +0000</pubDate>
      <link>https://dev.to/miguelacallesmba/finding-winning-stocks-with-web-scrapers-and-serverless-aws-lambda-and-dynamodb-1kco</link>
      <guid>https://dev.to/miguelacallesmba/finding-winning-stocks-with-web-scrapers-and-serverless-aws-lambda-and-dynamodb-1kco</guid>
      <description>&lt;p&gt;A few friends and I chat about stocks, share ideas, and encourage each other. A few months ago, I realized we needed some automation to help us find winners. I chose to use a serverless solution to build this system.&lt;/p&gt;

&lt;p&gt;There are many good stocks and finding them takes time. We can find them by reading articles, using stock tools, getting tips from Twitter, and many other ways. With so many ways to find stock candidates, we needed to define the process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finding-a-screener" class="anchor"&gt;
  &lt;/a&gt;
  Finding a Screener
&lt;/h1&gt;

&lt;p&gt;We decided FinViz.com was a good source to start our automation. One of our team members is a good stock analyst. He created a &lt;a href="https://www.finviz.com/screener.ashx?v=351&amp;amp;f=cap_smallover,fa_eps5years_pos,fa_sales5years_pos,ind_stocksonly,sh_price_o2,sh_relvol_o2,ta_changeopen_u1,ta_perf_dup,ta_perf2_52wup&amp;amp;ft=4&amp;amp;o=-relativevolume"&gt;screener&lt;/a&gt; that we used for a long while.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHOfGYAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609717059726/J9zYrSu-S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHOfGYAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609717059726/J9zYrSu-S.png" alt="finviz-screener.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example FinViz Screener&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-web-scraper" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Web Scraper
&lt;/h1&gt;

&lt;p&gt;After a while, we noticed we were forgetting to check this screener. That is when automation became handy. I wrote a Python web scraper using BeautifulSoup to get the top 10 stock symbols from the screener.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;FINVIZ_BASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://finviz.com"&lt;/span&gt;
&lt;span class="n"&gt;FINVIZ_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'FINVIZ_PATH'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;FINVIZ_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;FINVIZ_HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'User-Agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'My Trading App/0.0.1'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FINVIZ_BASE&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;FINVIZ_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FINVIZ_HEADERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FINVIZ_DATA&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;## look for symbols
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'quote.ashx?t='&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;## assumes this html code
&lt;/span&gt;            &lt;span class="c1"&gt;## &amp;lt;a class="tab-link" href="quote.ashx?t=TWTR&amp;amp;amp;ty=c&amp;amp;amp;p=d&amp;amp;amp;b=1"&amp;gt;TWTR&amp;lt;/a&amp;gt;
&lt;/span&gt;            &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I needed a way to run this web scraper on a timer. I could have set up a server to run the Python code on a CRON, but I did not want to maintain the server. I decided to use a serverless solution to reduce maintenance and keep my costs low.&lt;/p&gt;

&lt;p&gt;I set up an AWS Lambda function with a Python runtime, and deployed it using &lt;a href="https://miguelacallesmba.com/aws-cdk-vs-serverless-framework"&gt;AWS CDK&lt;/a&gt;. I configured CloudWatch rules to set up a CRON to trigger the Lambda function. Now the web scraper runs per the schedule.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#posting-to-slack" class="anchor"&gt;
  &lt;/a&gt;
  Posting to Slack
&lt;/h1&gt;

&lt;p&gt;We were already using Slack to chat, so it was the ideal medium to post the top ten symbols. I created a Slack app that posted the findings to an #alerts channel and the #general channel. The #alert channel posts had detailed information (e.g., chart images). The #general channel posts had the summary information. We did this to not overwhelm the discussion in the #general channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IowSUaNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609716913629/ZcZX-_R8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IowSUaNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609716913629/ZcZX-_R8v.png" alt="alert-channel.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example of the #alert channel post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtQBbjyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609716929200/HTIR0XVD8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtQBbjyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609716929200/HTIR0XVD8.png" alt="general-channel.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example of the #general channel post.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-stats" class="anchor"&gt;
  &lt;/a&gt;
  Creating stats
&lt;/h1&gt;

&lt;p&gt;As you might have guessed, it became difficult to see patterns without some type of stats. We had good intel, but how do we decide which stocks to pick without some type of histogram.&lt;/p&gt;

&lt;p&gt;We wrote the stock symbols to a DynamoDB table, and the date when they appeared in the alert.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;

&lt;span class="n"&gt;STATS_TABLE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'STATS_TABLE_NAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATS_TTL_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'STATS_TTL_NAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATS_TTL_DAYS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'STATS_TTL_DAYS'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'dynamodb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;TableName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATS_TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'PK'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'S'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;'SK'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'S'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'#&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sk_prefix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;AttributeUpdates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;STATS_TTL_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'Value'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="s"&gt;'N'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ttl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s"&gt;'Action'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'PUT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;scan_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'Value'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="s"&gt;'BOOL'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s"&gt;'Action'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'PUT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then created another Lambda function to post a text-based histogram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dymvmcRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609718020558/T19_VGMZu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dymvmcRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609718020558/T19_VGMZu.png" alt="stats-post.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example histogram post to the #general channel.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With a little code we implemented automation to our manual investment process. We were able to extend this approach to scrape different investment sources. Furthermore, it costs $0.00 per month by taking advantage of the serverless capabilities in the &lt;a href="https://aws.amazon.com/free/"&gt;AWS free tier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://miguelacallesmba.com/finding-winning-stocks-with-serverless"&gt;MiguelACallesMBA.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@firmbee"&gt;William Iven&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/investor"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>python</category>
    </item>
    <item>
      <title>Production-ready Python</title>
      <author>Romeo Agbor Peter</author>
      <pubDate>Sun, 03 Jan 2021 22:12:14 +0000</pubDate>
      <link>https://dev.to/romeopeter/production-ready-python-4d33</link>
      <guid>https://dev.to/romeopeter/production-ready-python-4d33</guid>
      <description>&lt;p&gt;Below are 5 steps to take to build production-ready python applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-virtual-environment-to-isolate-program" class="anchor"&gt;
  &lt;/a&gt;
  1. Use Virtual Environment to Isolate Program.
&lt;/h2&gt;

&lt;p&gt;The development environment in most cases is different from the production environment. For instance, the development environment for a program will be the programmer's machine (laptop, desktop or tablet). The production environment will be a virtual machine instance (AWS instance, Azure Virtual Machine, or Linode Standard) or a containerized instance(Docker, Kubernetes). To isolate the program in both environments with its Python version and modules, use the &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;Python Virtual Environment&lt;/a&gt; in both environments.&lt;/p&gt;

&lt;p&gt;The example below shows how to create and activate an isolated environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create virtual environment.
&amp;gt; python -m venv ./env

# Activate virtual environment on Windows
&amp;gt; ./env/script/activate.bat &amp;amp;&amp;amp; ./env/scripts/activate

# Activate virtual environment on Mac
.env/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Furthermore, required Python packages(with their required versions) can be installed and pushed to a file that'll hold the packages for the program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Install the Scrapy module via pip
(env) &amp;gt; pip install scrapy===2.4.1

# Push package to file
(env) &amp;gt; pip freeze &amp;gt; requirement.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The example above installs a specific package with the required version. The package is then pushed to a &lt;code&gt;requirement.txt&lt;/code&gt; file using the &lt;code&gt;pip freeze&lt;/code&gt; command. The &lt;code&gt;requirement.txt&lt;/code&gt; file is used for specifying the Python packages the program requires, while the &lt;code&gt;pip freeze&lt;/code&gt; command is used for outputting installed packages names with their correct version.&lt;/p&gt;

&lt;p&gt;In a different environment, the virtual environment can be recreated, and the required packages with the required versions specified in the &lt;code&gt;requirement.txt&lt;/code&gt; file can be installed. Installing the packages on a Mac is quite easy as it only requires running the &lt;code&gt;pip install&lt;/code&gt; command with the &lt;code&gt;-r&lt;/code&gt; switch on the &lt;code&gt;requirement.txt&lt;/code&gt; file. But on windows, the packages have to installed by copying them from the requirement file list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Installing required packages on a Mac
(env)&amp;gt; pip intalled -r requirement.txt

# Installing required packages on a Windows
(env)&amp;gt; pip install scrapy===2.4.1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-use-config-files-for-defining-deployment-environment" class="anchor"&gt;
  &lt;/a&gt;
  2. Use Config Files for Defining Deployment Environment.
&lt;/h2&gt;

&lt;p&gt;The deployment environment for an app has to maintain proper configuration for the app to work correctly. The environment is where the app is run either in development or production. An app is said to be in &lt;strong&gt;production&lt;/strong&gt; when it leaves the &lt;strong&gt;development&lt;/strong&gt; stage.&lt;/p&gt;

&lt;p&gt;The configuration setting of the production environment is different from that of the development environment. To modify a program on the production server, you'd have to run it on the development environment. The new changes are pushed to production.&lt;/p&gt;

&lt;p&gt;The issue with these environments is the differences in configurations. The production environment requires different settings that may be hard to reproduce in the development environment. For instance, you have a program running on a web server with access to external data via &lt;a href="https://romeopeter.com/blog/api-first"&gt;API&lt;/a&gt;. To modify the code, you'd have to start the webserver container, set up API configuration and the appropriate keys needed to access the external data. These steps are unnecessary and time-consuming if all you want to do is modify a part of your program, then ensure everything works correctly.&lt;/p&gt;

&lt;p&gt;A workaround to the above scenario is to modify your program at startup time to provide different functionalities depending on the deployment environment. Have a dedicated configuration for the program on both the development and production environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py
&lt;/span&gt;
&lt;span class="c1"&gt;# Don't run with 'TESTING' turned on in production
&lt;/span&gt;&lt;span class="n"&gt;TESTING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# API credentials should be kept secrete in production
&lt;/span&gt;&lt;span class="n"&gt;API_CREDENTIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"consumer_key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"XXXXXXXXXXXXXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"consumer_secret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"XXXXXXXXXXXXXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"access_token"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"XXXXXXXXXXXXXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"access_secret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"XXXXXXXXXXXXXX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The TESTING constant is set to the Boolean value of True by default. It determines how the app runs on development and production. The API_CREDENTIAL constant is a key-value pair of the required API key.&lt;/p&gt;

&lt;p&gt;Depending on the value of the TESTING variable, other modules in the app can import the settings.py file and determine how they implement their attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# main.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;settings&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestingAPI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Use mock data in development
    """&lt;/span&gt;

    &lt;span class="c1"&gt;# ...
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealAPI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Uses real data via API in production
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# ...
&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TESTING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestingAPI&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RealAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API_CREDENTIALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the above example, modules should be customized to perform differently in deployment environments. Doing so makes it easy to skip the unnecessary reproduction code like API or database connection when it's not needed. Mock API data can be generated and injected into the program when testing or developing.&lt;/p&gt;

&lt;p&gt;Another similar instance might be to make the app work differently based OS. Say the host server used in production is a different OS, say Linux and the one for development is a Windows, this might break the app because of the differences in OS type.&lt;/p&gt;

&lt;p&gt;The Python &lt;code&gt;sys&lt;/code&gt; module should be used to inspect the OS and determine its type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# main.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinuxEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindowsEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'linux'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinuxEnv&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startwith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'wind32'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WindowEnv&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-debug-using-the-raw-repr-endraw-builtin-function" class="anchor"&gt;
  &lt;/a&gt;
  3. Debug Using  the &lt;code&gt;repr&lt;/code&gt; Built-in Function
&lt;/h2&gt;

&lt;p&gt;Basic debugging in Python is done using the &lt;code&gt;print&lt;/code&gt; function. The print function returns a human-readable string version of whatever argument passed to it. If there is an error on a python program, the &lt;code&gt;print&lt;/code&gt; function can be used to output how the state of the program changes while it runs to see where the error occurred.&lt;/p&gt;

&lt;p&gt;The issue with this way of debugging is that the function can only output human-readable string version of the value supplied to it. It doesn't output what the &lt;strong&gt;type&lt;/strong&gt; of the value is.&lt;/p&gt;

&lt;p&gt;For instance, the &lt;code&gt;print&lt;/code&gt; function output below doesn't make clear if the value type is a Number or a String.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Number
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# String
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1024"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Human-readable output
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;1024&lt;/span&gt;
&lt;span class="mi"&gt;1024&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function is for outputting human-readable values. This doesn't help at all when debugging.&lt;/p&gt;

&lt;p&gt;Python provides the &lt;code&gt;repr&lt;/code&gt; built-in function to return a &lt;strong&gt;printable representation&lt;/strong&gt; of an object. It can be used in conjunction with the &lt;code&gt;print&lt;/code&gt; statement know and ensure value types when debugging.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Number
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# String
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1024"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# printable representation output
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="c1"&gt;# number
&lt;/span&gt;&lt;span class="s"&gt;'1024'&lt;/span&gt; &lt;span class="c1"&gt;# string
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The same result is reached employing the C-style &lt;code&gt;%r&lt;/code&gt; format string, and the &lt;code&gt;%&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Number
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%r"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# String
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%r"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="s"&gt;"1024"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# printable representation output
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="c1"&gt;# number
&lt;/span&gt;&lt;span class="s"&gt;'1024'&lt;/span&gt; &lt;span class="c1"&gt;# string
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#debugging-dynamic-objects" class="anchor"&gt;
  &lt;/a&gt;
  Debugging Dynamic Objects
&lt;/h4&gt;

&lt;p&gt;When debugging dynamic objects, using the human-readable function gives the same value as the &lt;code&gt;repr&lt;/code&gt; function. That means the &lt;code&gt;print&lt;/code&gt; function can be used because using &lt;code&gt;repr&lt;/code&gt; on &lt;strong&gt;Object&lt;/strong&gt; instances isn't helpful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"6'5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Persson&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x0000011671395160&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# human-readable string
&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;__main__.Persson object at 0x0000011671395160&amp;gt;'&lt;/span&gt; &lt;span class="c1"&gt;# object representation
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The are two ways to resolve this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;__repr__&lt;/code&gt; special method.&lt;/li&gt;
&lt;li&gt;Use object instance dictionary when you don't control the class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;__repr__&lt;/code&gt; special method can only be used in classes that you control. It should define and return a string expression of the created object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Person(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)'&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"6'5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;"Person(John, 25, 6'5)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When you don't have control over the class, use the &lt;code&gt;__dict__&lt;/code&gt; special attribute to get access to the object instance dictionary. The &lt;code&gt;__dict__&lt;/code&gt; attribute returns a dictionary of class attributes and methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Person(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)'&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"6'5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"6'5"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-use-reusable-components" class="anchor"&gt;
  &lt;/a&gt;
  4. Use Reusable Components
&lt;/h2&gt;

&lt;p&gt;Write functions or classes that will be reused in other parts of the program to create a flow. For instance, A program that reads data from a data source(API, database, AWS s3), loads model from a pickle file, uses the model to generate predictions based on the dataset, and save the predictions in a database.&lt;/p&gt;

&lt;p&gt;To achieve the instance above, the code responsible for handling the process could be divided into components rather than using a single function or class. Each component implies a different process that can be assembled with other components to create a pipeline for the required flow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_data_from_api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#... 
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_predictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;predictions&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_predictions_to_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...
&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="s"&gt;"""Prediction pipeline"""&lt;/span&gt;

   &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_data_from_api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;Predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_predictions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;save_predictions_to_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;#...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Benefits of using the component approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Component can be reused in other pipelines&lt;/li&gt;
&lt;li&gt;Easy to improve and modify components overtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the code sample above, all four components are assembled as pipeline in the &lt;code&gt;mian()&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-test-program-with-raw-unittest-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  5. Test Program with &lt;code&gt;Unittest&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Python is a dynamically typed programming language. That means that it doesn't have a static type checker by default. Not having a static type checker often results in runtime errors.&lt;/p&gt;

&lt;p&gt;All programs should be tested regardless of the programming language used, but Python is specifically &lt;a href="https://romeopeter.com/pythons-limitations"&gt;limited&lt;/a&gt; as it has no type checking, at least not by default. Fortunately, the &lt;strong&gt;unittest&lt;/strong&gt; module can be used to test python programs. Python dynamism makes it easy to write to test.&lt;/p&gt;

&lt;p&gt;Testing is ensuring good code quality. It gives the programmer assurance that the program will work as expected when deployed. The responsible programmer should always build with testing in mind.&lt;/p&gt;

&lt;p&gt;To use the built-in &lt;strong&gt;unittest&lt;/strong&gt; module on your code, it has to be imported in a different python file. For instance, say you have a utility function defined in utils.py.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Must supply string or byte. Found %r"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To perform a test, you need to create a second file with the word &lt;code&gt;test&lt;/code&gt; followed by the name of the file you want to test, which is the &lt;code&gt;utils.py&lt;/code&gt; file. So the name of the file will be &lt;code&gt;test.utils.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#test_utils.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;to_str&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UtilsTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_to_str_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Verifies equality
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_to_str_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Verifies boolean expression
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_to_str_bad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#verifies exception is raised
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each test method begins with the word test. If a test method runs without raising any exception, then the test is successful. The tests above are organized according to test cases in the &lt;code&gt;TestCase&lt;/code&gt; subclasses. The subclasses include helper methods for making assertion tests, such as &lt;code&gt;assertEqual&lt;/code&gt;, &lt;code&gt;assertNotEqual&lt;/code&gt;, &lt;code&gt;assertRaises&lt;/code&gt;, and &lt;code&gt;assertTrue&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;NOTE:&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;To learn more about the testing and the unittest module, Click the link to the python documentation on testing. &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;https://docs.python.org/3/library/unittest.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So there you have it, 5 guidelines on building production-ready python apps. Don't forget to check out the full &lt;a href="https://romeopeter.com/blog/setting-up-production-ready-python-apps/"&gt;article&lt;/a&gt; to see all 7 steps.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>python</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learning NodeJS Part 1: Understanding the Essentials</title>
      <author>Shemona Singh</author>
      <pubDate>Sun, 03 Jan 2021 21:33:09 +0000</pubDate>
      <link>https://dev.to/singhshemona/learning-nodejs-part-1-understanding-the-essentials-4h4o</link>
      <guid>https://dev.to/singhshemona/learning-nodejs-part-1-understanding-the-essentials-4h4o</guid>
      <description>&lt;p&gt;&lt;em&gt;In late fall of 2020, I went on a mission to better understand Node. I wanted to improve the way I use it, how I might be able to use more of its features, and moreover grow my front end knowledge to full stack. This series includes the notes I've compiled from my learnings over at &lt;a href="https://www.theodinproject.com/courses/nodejs"&gt;The Odin Project&lt;/a&gt;. The lessons also include general web concepts necessary to better work with Node.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;In order to pass the potential bumps when learning Node, it's important that some of your web fundamentals are in order. For this section and the next, I'll be revisiting key topics and tying it back to Node. Let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-what-node-really-is" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Understanding what Node really is&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Node is an open-source, cross-platform runtime environment that allows developers to create all kinds of server-side tools and applications in JavaScript.&lt;/p&gt;

&lt;p&gt;But that's just the textbook definition - let's break down what those words mean.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-so-groundbreaking-about-node" class="anchor"&gt;
  &lt;/a&gt;
  What's so groundbreaking about Node?
&lt;/h3&gt;

&lt;p&gt;JavaScript was originally designed to run in the browser. This means it was impossible to run it in anything that was not a website. &lt;strong&gt;Node brings JS out of the browser-world, so you can accomplish with it most anything other server-side languages can do. This is what is so groundbreaking about Node.&lt;/strong&gt; It gives JavaScript backend capabilities. &lt;/p&gt;

&lt;p&gt;To make this happen Node must have added functionality that original JS did not have, right? Indeed, Node enables JS to have abilities like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create http connections&lt;/li&gt;
&lt;li&gt;Listen to network requests &lt;/li&gt;
&lt;li&gt;Generate dynamic page content&lt;/li&gt;
&lt;li&gt;Create/open/read/write/delete/close files on a server&lt;/li&gt;
&lt;li&gt;Collect form data&lt;/li&gt;
&lt;li&gt;Add/delete/modify data in a database&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-term-v8-comes-up-alongside-node-what-is-v8" class="anchor"&gt;
  &lt;/a&gt;
  The term 'V8' comes up alongside Node. What is V8?
&lt;/h3&gt;

&lt;p&gt;JS runtime environments need engines to run. As we discussed, Node is a JS runtime environment so it needs an engine as well. Node's engine is built on Chrome's open source JS engine, V8. V8 is written in C++, and allows you to write your own C++ via hooks that you can make available to JavaScript. &lt;/p&gt;

&lt;p&gt;There are other runtime engines like &lt;a href="https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey"&gt;SpiderMonkey&lt;/a&gt; by Mozilla and &lt;a href="https://en.wikipedia.org/wiki/Chakra_(JScript_engine)"&gt;Chakra&lt;/a&gt; by Microsoft.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-would-hello-world-look-like-in-node" class="anchor"&gt;
  &lt;/a&gt;
  What would “hello world” look like in Node?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a file (name it anything) but be sure it has the extension &lt;code&gt;.js&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Put the following in it: &lt;code&gt;console.log("Hello World!");&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Open your node terminal, &lt;code&gt;cd&lt;/code&gt; into the directory to the folder where the file is saved and run &lt;code&gt;node [name-of-file].js&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Look familiar? Since Node is a runtime environment for JS, you can power it with the JS syntax you know and love.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#key-concepts-in-understanding-node" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Key Concepts in Understanding Node&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#node-is-asynchronous-and-eventdriven-lets-break-down-these-terms" class="anchor"&gt;
  &lt;/a&gt;
  Node is &lt;strong&gt;asynchronous&lt;/strong&gt; and &lt;strong&gt;event-driven&lt;/strong&gt;, let's break down these terms:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Event-driven:&lt;/strong&gt; every action on a computer is an event. It could be a network request, someone trying to access a port on a server, clicking submit on a button - the possibilities are endless. Events trigger some response to occur, which is what Node helps us to handle. &lt;/p&gt;

&lt;p&gt;Synchronous and asynchronous describes two different ways code can be run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synchronous:&lt;/strong&gt; means each operation must complete before the next operation can start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asynchronous:&lt;/strong&gt; means instead of writing code in prediction of when each line will run, you write it as a collection of smaller functions that are called in response to an event.&lt;/p&gt;

&lt;p&gt;For example, let’s say you are writing a program and you need it to do the following: It should read some text from a file, print that text to the console, query a database for a list of users and filter the users based on their age. &lt;/p&gt;

&lt;p&gt;This is what those steps would look like if they were to be executed &lt;strong&gt;synchronously&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read File&lt;/li&gt;
&lt;li&gt;Print File Contents&lt;/li&gt;
&lt;li&gt;Query Database&lt;/li&gt;
&lt;li&gt;Filter Database Query results&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make these steps execute &lt;strong&gt;asynchronously&lt;/strong&gt; we would instead break up the tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read File &lt;em&gt;AND THEN&lt;/em&gt; Print File Contents&lt;/li&gt;
&lt;li&gt;Query Database &lt;em&gt;AND THEN&lt;/em&gt; Filter Database Query Results&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this way, Node is not waiting around. While the file is being read, it can query the database. Then depending on which one is complete first (an event!) it will move on to the next task at hand.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This process is almost exactly like the way that you would use &lt;code&gt;addEventListener&lt;/code&gt; in front-end JavaScript to wait for a user action such as a mouse-click or keyboard press. The main difference is that the events are going to be things such as network requests and database queries. This functionality is facilitated through the use of &lt;strong&gt;callbacks&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-are-callbacks" class="anchor"&gt;
  &lt;/a&gt;
  What are callbacks?
&lt;/h3&gt;

&lt;p&gt;Callbacks are functions that are passed into another function as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this has no callback&lt;/span&gt;
&lt;span class="c1"&gt;// it prints "First" then "Second"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// this has a callback &lt;/span&gt;
&lt;span class="c1"&gt;// it prints "Second" then "First"&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you're not careful, this can result in &lt;a href="http://callbackhell.com/"&gt;callback hell&lt;/a&gt;, which you can reduce with practices like using the &lt;a href="https://www.npmjs.com/package/async"&gt;async&lt;/a&gt; module or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promises&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-errorfirst-callbacks" class="anchor"&gt;
  &lt;/a&gt;
  What about error-first callbacks?
&lt;/h3&gt;

&lt;p&gt;A common convention for Node and Express is to use &lt;a href="http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/"&gt;error-first callbacks&lt;/a&gt;. In this convention, the first value in the callback functions is an error value, while subsequent arguments contain success data. This ensures if you get really in the weeds with callbacks, you can be notified when a request is being held up due to a process never going through.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explain-the-event-loop" class="anchor"&gt;
  &lt;/a&gt;
  Explain the event loop.
&lt;/h3&gt;

&lt;p&gt;This leads me to the last large concept for this section - the event loop. You can &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ&amp;amp;feature=youtu.be&amp;amp;t=852"&gt;watch this excellent video explanation&lt;/a&gt; on the event loop. But it's on the lengthier side, so this section will be summarizing its highlights.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The event loop is the secret behind JavaScript's asynchronous programming. JS executes all operations on a single thread, but using a few smart data structures, it gives us the illusion of multi-threading.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8fG4xZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czf5ypvh4ef3rvir9c8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8fG4xZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czf5ypvh4ef3rvir9c8w.png" alt="Screenshot from Event loop Video"&gt;&lt;/a&gt;&lt;br&gt;
The job of the event loop is to watch for the stack and the task queue. If the stack is empty and the task queue is not, it will push the first item from the queue to the stack, effectively running it. The 'webapis' section is what we get from whatever our environment provides us with, in this case it's the browser providing us with the ability to keep track of the &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ajax requests would be treated the same way - put into the webapi section, because the code for a request does not live in the JS runtime, it lives in the browser webapi.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;We have one more section after this that lays down fundamentals. Onto part 2!&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>An intro to styled components in your react project</title>
      <author>Will Holmes</author>
      <pubDate>Sun, 03 Jan 2021 20:51:37 +0000</pubDate>
      <link>https://dev.to/willholmes/an-intro-to-styled-components-in-your-react-project-2ooc</link>
      <guid>https://dev.to/willholmes/an-intro-to-styled-components-in-your-react-project-2ooc</guid>
      <description>&lt;p&gt;CSS as a means of styling your web apps / websites is confusing, complex and can soon spiral out of control if you do not enforce a strict way of styling throughout your project.&lt;/p&gt;

&lt;p&gt;This is mostly down to the fact that the semantics of it are odd and can be quite restrictive. For example, no for loops or functions. However, you do get the luxury of targeting elementIds, classes and others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tried-but-didnt-achieve-greatness" class="anchor"&gt;
  &lt;/a&gt;
  Tried but didn't achieve greatness...
&lt;/h2&gt;

&lt;p&gt;There have been attempts to try and solve these problems with the likes of CSS pre-processors. These allow you to create styles in their own format which get transpiled down to CSS some popular examples might be SASS, LESS, SCSS etc. However, these come with their own problems. Such as they all can end up with the same issue of overcrowding of stylesheets like in CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-styled-components" class="anchor"&gt;
  &lt;/a&gt;
  So what are styled components?
&lt;/h2&gt;

&lt;p&gt;We are starting to live in a world whereby a large proportion of web apps are being developed in react. With this in mind styled components has been developed to be used alongside react when developing your websites / web apps. It takes the fundamentals of CSS and applies them to be closely integrated with our components. The main point is that we are no longer styling elements based on their type, elementId or className. We are now styling them as their own 'components' that are 'styled'. &lt;/p&gt;

&lt;p&gt;Let's break this down in an example:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-css" class="anchor"&gt;
  &lt;/a&gt;
  React + CSS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;hello.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.helloWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;hello.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"helloWorld"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above demonstrates the way we are used to with a HTML / CSS world. This allows us to have a file to determine how elements should look and feel &lt;strong&gt;(hello.css)&lt;/strong&gt;. Alongside a file that allows us to construct our elements in a way that creates an experience &lt;strong&gt;(hello.js)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-styled-components" class="anchor"&gt;
  &lt;/a&gt;
  React + Styled Components
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;hello.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HelloHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
color: blue;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HelloHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;HelloHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now from a glance this may look like a trivial change that has simply moved the CSS away from the individual file, into the component file. However, that is exactly the point. The styles now sit within the component where they are being used. This means that we are no longer relying on CSS classes or elementIds to style our components.&lt;/p&gt;

&lt;p&gt;One of the main goals of styled-components is that it &lt;em&gt;'wants to remove the mapping between styles and components'.&lt;/em&gt; By incorporating our styles into our react code as 'components' we are now bridging that gap and allowing for more readable code from the outset. Gone are the days where a div has been styled by a stylesheet sitting tens of folders deep within a big codebase.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  My thoughts?
&lt;/h1&gt;

&lt;p&gt;Whilst styled-components is still a fairly new kid on the block it's definitley something I am going to keep playing with and seeing its potential. Since working on my personal website I have discovered it's benefits and how it fits into a project. I'm sure there are some points it falls behind on but with every new piece of disruptive tech, that's to be expected. As i progress further with styled-components I will be sure to blog again with my more advanced thoughts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#helpful-links" class="anchor"&gt;
  &lt;/a&gt;
  Helpful Links:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Styled Components&lt;/strong&gt;: &lt;a href="https://styled-components.com/"&gt;https://styled-components.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know below in the comments if you have used styled-components in your react projects. If so, how did you find it? 👇&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
