<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Designing Solutions for Healthcare: How to Make Users of Your App Satisfied?</title>
      <author>Emerline</author>
      <pubDate>Thu, 19 Aug 2021 07:44:01 +0000</pubDate>
      <link>https://dev.to/emerlinedev/designing-solutions-for-healthcare-how-to-make-users-of-your-app-satisfied-4nli</link>
      <guid>https://dev.to/emerlinedev/designing-solutions-for-healthcare-how-to-make-users-of-your-app-satisfied-4nli</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgvgtYgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4j9lc0eo7lq2mkahev7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgvgtYgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4j9lc0eo7lq2mkahev7.png" alt="Screenshot 2021-08-19 102125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every product owner places a great emphasis on its functionality, and for good reason. When a product is incapable of delivery, it’s a waste of money. Still, it’s not just about functionality. The thing is that all functions have to be presented in the way to be easily understood and utilized by end-users — and this is achieved through sound design. &lt;/p&gt;

&lt;p&gt;When it comes to healthcare apps, design plays one of the major roles in lead generation, customer loyalty, and retention rates. Any successful healthcare app has to be built in a way to highlight the most essential elements of the product, gently guide users through its features and functions, give advice on the next step to take, and in this way lead to necessary actions. When it does, the app can serve a company as its main product and pay for investments. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This post aims at sharing key steps that need to be taken for the creation of a worthy healthcare app. All of them derive from our development expertise that covers the creation of solutions for companies operating in the healthcare industry. Furthermore, the article features information about the recent development of a migraine app, so make sure to learn about the benefits offered to a client after the work done by our team, and see how our services can contribute to your product success and increased profits.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#designing-mobile-apps-for-healthcare-key-steps-to-take"&gt;
  &lt;/a&gt;
  Designing mobile apps for healthcare: key steps to take
&lt;/h1&gt;

&lt;p&gt;It’s true that the competitiveness in the healthcare app market is severe, so deficiencies are unacceptable. In case your users, whether these are your employees or clients, face some difficulties when they interact with your solution, you’re in trouble: productivity of your workers will decrease, and you will lose your customers who’ll find another, more satisfying solution. To help you avoid such situations, we provide you with initial steps to take for the creation of a sound healthcare app design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #1: Research&lt;/strong&gt;&lt;br&gt;
Before prototyping an app interface, you need to define your target audience: their geographical, socio-demographic, psychological characteristics, etc. — anything that is correlinked with your product goal. Remember that there’s no product that can fit everyone. And while interests and capabilities of users play significant roles in how your users will interact with the application, start with answering the following questions:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ztaMXZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78dhtv7dntqqfwva099h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ztaMXZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78dhtv7dntqqfwva099h.png" alt="Screenshot 2021-08-19 102150"&gt;&lt;/a&gt; Also, you have to think about whether your app will be used by patients, their doctors, or both. This will allow you to make smart decisions about functionality and UI. &lt;/p&gt;

&lt;p&gt;When it comes to medical personnel, your app should provide them with the ability to find data quickly. These could be electronic health records, medication specifications and recipes, therapeutic and medication recommendations, etc. &lt;/p&gt;

&lt;p&gt;In contrast, when developing a healthcare app for patients, it is wise to include as little information as it is possible and provide it in the convenience of an easily understandable, highly intuitive UI, especially if your targeted audience is elderly people. In case it does, don't hesitate to conduct research and adhere to all the A11Y(accessibility) rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #2: Simplicity&lt;/strong&gt;&lt;br&gt;
Once again, healthcare apps for patients should not contain too many details. Otherwise, your users will get frustrated. Make it as simple as possible. &lt;/p&gt;

&lt;p&gt;One more point here is that doctors will also appreciate the simplicity. So when it comes to UI, it's always better to focus on minimalistic and clear design. In this way, you can ensure that user discovery of the app will be joyful and pleasant. Also, consider adding such features as passive inputs and autocomplete. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #3: Features and Functionality&lt;/strong&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--laos9HQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42lvu47jtfcqtnxatztr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--laos9HQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42lvu47jtfcqtnxatztr.png" alt="Screenshot 2021-08-19 102215"&gt;&lt;/a&gt; If you want your app to be successful, one of the most important things is to ensure that design and functionality work together. They have to solve the problems of your users and address their pain points.&lt;/p&gt;

&lt;p&gt;Depending on your targeted audience, think about functionality to include. So if you create an app for medical organizations such as medical centers, hospitals, etc., make sure that patients will have access to their records (visits, recommendations, appointments, and so on). When developing telemedicine apps, it's initial to add video-conferencing features. Medication apps are useless without a notification system. &lt;/p&gt;

&lt;p&gt;Still, mind that even if your app offers a bunch of useful features, only the main ones can be placed on the home screen. Otherwise, lots of clutter will lead to frustration and choice upon a more simple app. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #4: Navigation&lt;/strong&gt;&lt;br&gt;
If you want your app to be widely adopted, clear navigation is a must. It should speed up the process of discovery and use. For example, a survey conducted on behalf of Stanford Medicine states that 62% of the time devoted by a doctor to each patient is being spent in the EHR. You can address this issue, offering doctors a more convenient, faster way of accessing and dealing with health or medical records. We did that for a recently developed Uber-like app for doctors, so you are welcome to read about it here. &lt;/p&gt;

&lt;p&gt;The key point here is that your app has to be quick enough and have a clear navigation structure. So make sure that all the important information is on the surface, and your users won't lose their precious time looking for what they need for hours. To do so, adhere to the 3-click rule, which states that any information in your app should be accessible in three transitions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #5: Colors&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSZLGwDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1xyafzv874d2354475.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSZLGwDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1xyafzv874d2354475.png" alt="Screenshot 2021-08-19 102240"&gt;&lt;/a&gt; In the majority of cases, colors used in healthcare apps are neutral. These could be light shades of blue, green, grey, etc. When it comes to the background, the choice is usually upon white. It is so because the app should not look too vivid, irritating the user. For this reason, the choice of such colors as red and yellow is really rare. &lt;/p&gt;

&lt;p&gt;Still, when looking at the diversity of healthcare apps, we can see that there are no restrictions at all. The only rule to adhere to is to create a positive, sometimes calming impression, as we did in the migraine app described below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #6: Personalization&lt;/strong&gt;&lt;br&gt;
In recent years, the personalization of mobile apps has become one of the key drivers for their success. And this fact is proven by statistics showing that 33% of customers will abandon business relationships because of insufficient personalization. But what does personalization mean?&lt;/p&gt;

&lt;p&gt;In terms of medical apps, it implies the provision of suggestions on the next action to take, gently guiding a user to the accomplishment of the desired goal and even further. To make your app personalized, research with identification and analysis of patterns in user behaviors is of the highest value.  &lt;/p&gt;

&lt;p&gt;Also, personalization can be presented through customization options, whether these are color themes (that was our case with a further discussed migraine app), interactive elements, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #7: Accessibility&lt;/strong&gt;&lt;br&gt;
Adherence to accessibility rules is important in the creation of any type of app, but when it comes to healthcare ones, the importance is even of higher value. The thing is that healthcare solutions are more likely to be used by people with different impairments. Also, quite often these apps have elderly people among targeted users, so it is initial to address different visual and hearing abilities, as well as physical and psychological characteristics. &lt;/p&gt;

&lt;p&gt;All this means that both app owners and developers need to take into account limitations their users might face and build the solution in a way to minimize the negative impact of these limitations. To do so, it is wise to rely on WC3’s Web Content Accessibility Guidelines, adhere to design accessibility rules, and use color blindness simulators.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#development-for-a-migraine-app-at-emerline"&gt;
  &lt;/a&gt;
  Development for a migraine app at Emerline
&lt;/h1&gt;

&lt;p&gt;Recently, our team has taken part in the development of an app that helps people who are prone to migraine. The idea behind the app was to offer a user a migraine-free life or to minimize the possibility for its occurrence through the analysis of three types of data: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Environmental (weather — barometric pressure change, bright sunlight, and other traceable triggers)&lt;/li&gt;
&lt;li&gt;Behavioral (data provided by the user on a diet, sleep, activity, etc.)&lt;/li&gt;
&lt;li&gt;Personal (gender, age, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking advantage of Kotlin and Swift, our experts rebuilt the existing mobile app for iOS and developed the one for Android. &lt;strong&gt;We also worked on the creation of custom themes to allow the client the possibility for setting different color themes for the app and changing the branding elements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After 3 month of hands-on work on UI, our team delivered to the client easy-to-use, pleasantly looking, intuitive apps for iOS and Android, each offering opportunities for fast and easy customization. Thanks to our work, the client gained a lot of business benefits, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to resell the app to any third-party service provider, with an opportunity to implement their branding elements and set a color theme accordingly.&lt;/li&gt;
&lt;li&gt;Provision of users with the solution that looks good and is easy and pleasant to interact with.&lt;/li&gt;
&lt;li&gt;A precious opportunity to reach a wider audience by offering versions for two major platforms: iOS and Android.&lt;/li&gt;
&lt;li&gt;Confidence in the fault-free operation of the version for iOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to agree, getting all these business advantages in a short period of time is a really good thing you can do for your business, and for sure, we are always here to help you with that. Feel free to contact us for more information, free consultation, and let’s make your brightest ideas come to life together!&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://emerline.com"&gt;https://emerline.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>softwaredevelopment</category>
      <category>design</category>
      <category>healthcare</category>
    </item>
    <item>
      <title>React-query series Part 1: Basic react-query setup</title>
      <author>Emmanuel Chinonye Nnajiofor</author>
      <pubDate>Thu, 19 Aug 2021 07:31:59 +0000</pubDate>
      <link>https://dev.to/nnajiforemma10/react-query-series-part-1-basic-react-query-setup-12g4</link>
      <guid>https://dev.to/nnajiforemma10/react-query-series-part-1-basic-react-query-setup-12g4</guid>
      <description>&lt;p&gt;Hey guys!&lt;/p&gt;

&lt;p&gt;So after a few years as a frontend developer, I have decided to&lt;br&gt;
write my first article. You have no idea the fear I had to&lt;br&gt;
conquer (or maybe you do), 😟 but there is no point hiding in your shell right ?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sections"&gt;
  &lt;/a&gt;
  Sections
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-0"&gt;Intro&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-1"&gt;Prerequisite&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-2"&gt;Bootstrap our project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-3"&gt;Setup react-query&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-4"&gt;Credits&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com/"&gt;React-query&lt;/a&gt; is a superlight library for fetching, updating and synchronizing and updating server state. With react-query, you don't have to write your &lt;br&gt;
data-fetching logic (Who likes all that setting of loading, error and data state huh ? 🤷‍♀️ ), You&lt;br&gt;
don't also do not need global store libraries like redux or &lt;br&gt;
zustand to make your server state global or persistent. Even if a&lt;br&gt;
global store is used in your application, it is restricted to only&lt;br&gt;
client state like user settings etc, thereby reducing your&lt;br&gt;
code size by a ton.&lt;br&gt;
Although this library has a wonderful documentation, I have found that it can be daunting for beginners and thus, a need for a no-nonsense simple series to get beginners quickly setup to using react-query.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of react and hooks in react&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#bootstrap-our-project"&gt;
  &lt;/a&gt;
  Bootstrap our project &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We bootstrap a basic react app by running &lt;code&gt;npx create-react-app project-name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-query-setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also install react-query library to our react app by running&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i react-query&lt;/code&gt;. At the time of writing, &lt;a href="https://www.npmjs.com/package/react-query"&gt;react-query&lt;/a&gt; version is at 3.19.6&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-query
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-reactquery"&gt;
  &lt;/a&gt;
  Setup react-query &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To setup react-query, we need the &lt;code&gt;QueryClientProvider&lt;/code&gt;. The &lt;br&gt;
&lt;code&gt;QueryClientProvider&lt;/code&gt; component is used to connect and provide a &lt;br&gt;
&lt;code&gt;QueryClient&lt;/code&gt; to your application; more or less, connect our &lt;br&gt;
application to features react-query provides.&lt;br&gt;
The &lt;code&gt;QueryClientProvider&lt;/code&gt; component takes in a "client" prop. This &lt;br&gt;
prop is in turn, supplied the &lt;code&gt;queryClient&lt;/code&gt; instance. You can supply &lt;br&gt;
the &lt;code&gt;queryClient&lt;/code&gt; instance a custom config object as a &lt;code&gt;param&lt;/code&gt; if &lt;br&gt;
you'd like to set your own defaults. You can read about some &lt;br&gt;
important defaults that comes with react-query &lt;a href="https://react-query.tanstack.com/guides/important-defaults"&gt;here.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*create and use a custom config object.Normally, I'd put this in another file and export
*/&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClientConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnReconnect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;cacheTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchIntervalInBackground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;suspense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;staleTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClientConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, you can add the &lt;a href="https://react-query.tanstack.com/devtools"&gt;&lt;code&gt;ReactQueryDevTools&lt;/code&gt;&lt;/a&gt; component to debug and visualize your queries on your development environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query/devtools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*create and use a custom config object.Normally, I'd put this in another file and export
*/&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClientConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnReconnect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;cacheTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchIntervalInBackground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;suspense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;staleTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClientConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The rest of your application */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the next part of this series, we will talk about how to start fetching data and we will also look at what each key-value in the &lt;code&gt;queryClientConfig&lt;/code&gt; object does for queries.&lt;/p&gt;

&lt;p&gt;If the article has helped you, I wouldn't mind a 💖&lt;br&gt;
Thank you !&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/NnajioforEmma10"&gt;twitter @NnajioforEmma10&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Image: &lt;a href="https://blog.logrocket.com/whats-new-in-react-query-3/"&gt;Logrocket: What is new in react-query 3 by Lawrence Eagles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com"&gt;React-query documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>hooks</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 11, Random numbers</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 19 Aug 2021 07:18:15 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-11-random-numbers-5cnj</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-11-random-numbers-5cnj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-cover-the-random-module-in-python"&gt;
  &lt;/a&gt;
  Today we will cover the random module in Python.
&lt;/h2&gt;




&lt;p&gt;Just like the math and cmath modules, the 'random' module is built in into Python, so we do not need to take any extra efforts to download or install it.😊&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-a-random-number"&gt;
  &lt;/a&gt;
  Generating a random number
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;random()&lt;/code&gt; method in random module generates a floating point number between 0 and 1. Note that Python is case sensitive, hence &lt;code&gt;random()&lt;/code&gt; and &lt;code&gt;Random()&lt;/code&gt; are different!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="c1"&gt;#import the random module
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0.8231210971019169
0.7495851490827552
0.1910088487916375
0.7611387314935155
0.17622975226933524
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;But many times we want a number in between a specific range of numbers. This is where the &lt;code&gt;randint()&lt;/code&gt; method comes handy. The &lt;code&gt;randint()&lt;/code&gt; method generates a integer between a given range of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;7
4
3
6
7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the input parameters of the &lt;code&gt;randint()&lt;/code&gt; gives must be in ascending order only. For example this won't work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 3, in &amp;lt;module&amp;gt;
    n = random.randint(10,7)
  File "/usr/lib/python3.4/random.py", line 218, in randint
    return self.randrange(a, b+1)
  File "/usr/lib/python3.4/random.py", line 196, in randrange
    raise ValueError("empty range for randrange() (%d,%d, %d)" % (istart, istop, width))
ValueError: empty range for randrange() (10,8, -2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;random()&lt;/code&gt; method is often used in data science and statistical operations to obtain random numbers between 0 to 1. For other applications, in most cases the &lt;code&gt;randint()&lt;/code&gt; function becomes useful&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Typing 'random' every time is just a waste right? We can shorten up the code by replacing random with a short keyword, whoch we can use everytime. The syntax for the following is &lt;/p&gt;

&lt;p&gt;&lt;code&gt;import random as rd&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;SO now every time instead of writing &lt;code&gt;random&lt;/code&gt;, we can just write &lt;code&gt;rd&lt;/code&gt;&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
1
2
9
9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-of-random-numbers"&gt;
  &lt;/a&gt;
  List of random numbers.
&lt;/h3&gt;

&lt;p&gt;Many times, we require to have a list of random numbers. &lt;/p&gt;

&lt;p&gt;One way to do that is appending random numbers to the list. We first create an empty list and then append the random numbers one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="n"&gt;randomlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[23, 15, 26, 26, 18]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way is by using the method &lt;code&gt;sample()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sample()&lt;/code&gt; method takes two arguments. One is the list of numbers to choose random numbers from, and the other is the number of random numbers to choose. The examples below will make things clear.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="n"&gt;randomlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[28, 24, 15, 26, 19]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;range()&lt;/code&gt; function returns a list of values from the start to the end.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="n"&gt;randomlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;#Here the sample returns a random number from the list of prime numbers provided.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[7, 5, 2, 3, 17]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨&lt;/p&gt;

&lt;p&gt;😎 Your suggestions motivate me, so please please please let me know in the comment section if you this part or not. 🧐 And don't forget to like the post if you did. 😍&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Setting up Windows virtual test environments with Vagrant</title>
      <author>Edoardo Sanna</author>
      <pubDate>Thu, 19 Aug 2021 07:12:43 +0000</pubDate>
      <link>https://dev.to/sannae/setting-up-windows-virtual-test-environments-with-vagrant-4k1b</link>
      <guid>https://dev.to/sannae/setting-up-windows-virtual-test-environments-with-vagrant-4k1b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#install"&gt;Install and setup Vagrant&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#create"&gt;Creating a new project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrantup"&gt;Your first &lt;code&gt;vagrant up&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customize"&gt;Customizing your VM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#provisioning"&gt;Provisioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction-why-and-what"&gt;
  &lt;/a&gt;
  Introduction: why and what &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Recently we've been trying to implement a Continuous Delivery pipeline for our in-house .NET applications suite - you can't imagine how long and painful it is to install and configure a multi-tier application by hand 😓 ! Being a demanding task (a &lt;em&gt;looot&lt;/em&gt; of scripting required!), we needed to be able to quickly provision and destroy several test environments (where 'environment', containers not being supported yet, is a whole Windows Virtual Machine). &lt;/p&gt;

&lt;p&gt;The main idea was to create an easy, repeatable and trackable procedure. The best practices mentioned by &lt;a href="https://cloud.google.com/architecture/devops/devops-tech-deployment-automation"&gt;Google's DevOps capabilities&lt;/a&gt; persuaded us to use &lt;strong&gt;Infrastructure as Code (IaC)&lt;/strong&gt;. IaC is basically code - therefore version-controlled with &lt;code&gt;git&lt;/code&gt; - made of creation and configuration scripts to be fed to a proper virtualization engine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.virtualbox.org/manual/ch08.html"&gt;Virtualbox&lt;/a&gt;, &lt;a href="https://www.vmware.com/support/ws5/doc/ws_learning_cli_vmrun.html"&gt;VMWare&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/try-hyper-v-powershell"&gt;Hyper-V&lt;/a&gt; all offer their own CLIs, but we'd like to use a provider-neutral tool. Hence we decided for &lt;a href="https://www.vagrantup.com"&gt;Hashicorp's Vagrant&lt;/a&gt;, an &lt;a href="https://github.com/hashicorp/vagrant"&gt;open-source&lt;/a&gt; CLI-based VM manager already equipped with providers integrated with the main hypervisors. &lt;/p&gt;

&lt;p&gt; 
  &lt;a href="https://www.vagrantup.com"&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mil9lv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.vagrantup.com/img/logo-hashicorp.svg"&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article is a quick start guide to create your first test environments using Vagrant. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-and-setup-vagrant"&gt;
  &lt;/a&gt;
  Install and setup Vagrant &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can download Vagrant from the &lt;a href="https://www.vagrantup.com/downloads"&gt;download page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the installation is complete, you can verify it by opening your favorite shell (recommending Microsoft's open-source &lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt;), and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--version&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-new-project"&gt;
  &lt;/a&gt;
  Creating a new project &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Vagrant depends on a specific location on your workstation to store all the configuration files of your project and the virtualized disks: therefore, you need to create your own &lt;code&gt;MyVagrant\&lt;/code&gt; folder and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt;

&lt;p&gt;Once you're in it, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--minimal&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to &lt;a href="https://www.vagrantup.com/docs/cli/init"&gt;initialize&lt;/a&gt; your Vagrant project in the local folder. It will create a minimal configuration file called &lt;a href="https://www.vagrantup.com/docs/vagrantfile"&gt;Vagrantfile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Vagrantfile is a Ruby-based script containing the instructions Vagrant will use to interact with the various virtualization providers in order to create the described infrastructure.&lt;/p&gt;

&lt;p&gt;The minimal Vagrantfile created with the &lt;code&gt;init&lt;/code&gt; command is pretty simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"base"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Vagrant.configure&lt;/code&gt; block sets a specific &lt;a href="https://www.vagrantup.com/docs/vagrantfile/version"&gt;"configurator" version&lt;/a&gt;: all the next instructions will need to be included in this block.&lt;/p&gt;

&lt;p&gt;The central command (&lt;code&gt;config.vm.box&lt;/code&gt;) specifies the "box" used to create your Virtual Machine. A &lt;a href="https://www.vagrantup.com/docs/boxes"&gt;"box"&lt;/a&gt;) is a VM image - pretty much similar to the concept of &lt;a href="https://docs.docker.com/get-started/overview/#docker-objects"&gt;Docker images&lt;/a&gt; - exportable from already created VMs or downloadable from the community's &lt;a href="https://app.vagrantup.com/boxes/search"&gt;Vagrant Cloud repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-raw-vagrant-up-endraw-"&gt;
  &lt;/a&gt;
  Your first &lt;code&gt;Vagrant up&lt;/code&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you try to spin up your VM with the initial Vagrantfile, Vagrant will return an error because it doesn't know any &lt;code&gt;"base"&lt;/code&gt; box. You may replace that value with any box name available: in our example, we will try to boot a Windows Server machine, therefore we'll use the publicly available &lt;a href="https://app.vagrantup.com/StefanScherer/boxes/windows_2019"&gt;Stefan Scherer's Windows Server 2019 box&lt;/a&gt; to have a 180-days trial version of Windows Server 2019 Eval with Desktop.&lt;/p&gt;

&lt;p&gt;In case you don't have a local copy of the box, Vagrant will automatically download it from the Vagrant Cloud before creating the VM.&lt;/p&gt;

&lt;p&gt;To boot your VM, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we didn't specify any virtualization provider, Vagrant will use &lt;a href="https://www.virtualbox.org/"&gt;Virtualbox&lt;/a&gt; as default: if you have a different hypervisor, make sure you edit the Vagrantfile with the &lt;a href="https://www.vagrantup.com/docs/providers/configuration"&gt;appropriate settings&lt;/a&gt;. Remember then to add the &lt;code&gt;--provider=PROVIDER_NAME&lt;/code&gt; (where PROVIDER_NAME is &lt;code&gt;vmware_fusion&lt;/code&gt;, &lt;code&gt;hyperv&lt;/code&gt;, &lt;code&gt;vmware_desktop&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;, etc) to your &lt;code&gt;vagrant up&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Vagrant will take some minutes to download the image and boot up the VM, depending on the chosen OS. If your output includes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Timed out while waiting for the machine to boot. This means that
Vagrant was unable to communicate with the guest machine within
the configured ("config.vm.boot_timeout" value) time period.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The VM has correctly started on Virtualbox nonetheless, but Vagrant won't be able to communicate with it and proceed with the following instructions, such as &lt;a href="#provisioning"&gt;provisioning&lt;/a&gt; software. Therefore, we need to add in the first part of the Vagrantfile the following properties about the &lt;a href="https://www.vagrantup.com/docs/vagrantfile/machine_settings#config-vm-communicator"&gt;communicator&lt;/a&gt; (i.e. &lt;a href="https://www.vagrantup.com/docs/vagrantfile/winrm_settings"&gt;WinRM&lt;/a&gt;) that Vagrant will use to connect to our Windows operating system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Additional parameters to communicate with Windows&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boot_timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;communicator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"winrm"&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55985&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By opening the Virtualbox GUI you may find your new VM in the list: notice that, with a Vagrantfile as minimal as the one we provided, the Virtual Machine will have a combination of the provider's and Vagrant's default properties, such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The default VM name chosen by Vagrant follows the format &lt;code&gt;PROJECT-FOLDER_default_TIMESTAMP&lt;/code&gt;; you may want to customize it with a more descriptive hostname, such as &lt;code&gt;web&lt;/code&gt; or &lt;code&gt;db&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==&amp;gt; default: Setting the name of the VM: MyVagrant_default_1629122422277_92221
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The VM will have a main network adapter ("Adapter 1") connected via NAT to the host:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==&amp;gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The network TCP port 22 on the host is mapped to TCP port 2222 on the guest:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==&amp;gt; default: Forwarding ports...
    default: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll see how to change the properties above in the following section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customizing-your-vm"&gt;
  &lt;/a&gt;
  Customizing your VM &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Customizing our newborn Virtual Machine requires a little bit of &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration"&gt;additional configuration&lt;/a&gt; in the Vagrantfile: some settings needs to be added in the  &lt;code&gt;config.vm&lt;/code&gt; namespace of the Vagrantfile. &lt;/p&gt;

&lt;p&gt;All the code described below must be added inside the &lt;code&gt;Vagrant.configure("2") do |config|&lt;/code&gt; section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some properties can be changed by configuring the &lt;code&gt;provider&lt;/code&gt;, such as the &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration#virtual-machine-name"&gt;VM's name&lt;/a&gt; or the &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration#gui-vs-headless"&gt;hypervisor's GUI&lt;/a&gt;. Notice that some settings don't have a specific shortcut and they will need the &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration#vboxmanage-customizations"&gt;&lt;code&gt;customize&lt;/code&gt;&lt;/a&gt; property:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Customization&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"virtualbox"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my_vm"&lt;/span&gt;    &lt;span class="c1"&gt;# Sets the new VM's name&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;        &lt;span class="c1"&gt;# Enables the hypervisor's GUI&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;     &lt;span class="c1"&gt;# Sets the VM's RAM&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;customize&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"modifyvm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--draganddrop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hosttoguest"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Enables drag-and-drop between host and guest&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;customize&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"modifyvm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--clipboard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"bidirectional"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Enables a bidirectional clipboard between host and guest&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Additional ports can be mapped between host and guest with the &lt;code&gt;config.vm.network&lt;/code&gt; settings (additional details on networking can be found &lt;a href="https://www.vagrantup.com/docs/networking"&gt;here&lt;/a&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Customization&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:forwarded_port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;guest: &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;host: &lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="s2"&gt;"http"&lt;/span&gt;  &lt;span class="c1"&gt;# Map host's port 8080 to guest's port 80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;By default, Vagrant will share (or &lt;a href="https://www.vagrantup.com/docs/synced-folders"&gt;"sync"&lt;/a&gt;) your project directory - i.e. the directory with the Vagrantfile - to &lt;code&gt;/vagrant&lt;/code&gt; on the guest. You can set additional synced folders with:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Customization&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;synced_folder&lt;/span&gt; &lt;span class="s2"&gt;"app/wwwroot"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"src/"&lt;/span&gt;  &lt;span class="c1"&gt;# Map the host's "src/" folder to the guest's "/app/wwwroot"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And many more!&lt;/p&gt;

&lt;p&gt;After each change, remember to run &lt;code&gt;vagrant validate&lt;/code&gt; to check the Vagrantfile for any syntax error.&lt;/p&gt;

&lt;p&gt;If the validation is successful, run &lt;code&gt;vagrant reload&lt;/code&gt; to reboot your VM and apply all the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provisioning"&gt;
  &lt;/a&gt;
  Provisioning &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So now we have a ready VM, but what if we need to also install software or change the configuration during the boot process? This practice is called &lt;a href="https://www.vagrantup.com/docs/provisioning"&gt;provisioning&lt;/a&gt; and it can be attached to the &lt;code&gt;vagrant up&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;There are several provisioners integrated with Vagrant, such as &lt;a href="https://www.vagrantup.com/docs/provisioning/ansible"&gt;Ansible&lt;/a&gt;, &lt;a href="https://www.vagrantup.com/docs/provisioning/puppet_apply"&gt;Puppet&lt;/a&gt;, &lt;a href="https://www.vagrantup.com/docs/provisioning/docker"&gt;Docker&lt;/a&gt; and even simply uploading &lt;a href="https://www.vagrantup.com/docs/provisioning/file"&gt;files&lt;/a&gt; to the VM.&lt;/p&gt;

&lt;p&gt;In our case, let's try to set up a development environment by installing a package manager (in our case &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;) and then an IDE (what's better than &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;?), and let's try to do it with the &lt;a href="https://www.vagrantup.com/docs/provisioning/shell"&gt;shell&lt;/a&gt; provisioner, i.e. uploading and running a shell script.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;scripts/&lt;/code&gt; folder in your project and add the &lt;code&gt;InstallChocolatey.ps1&lt;/code&gt; PowerShell script (you may find it on the official &lt;a href="https://chocolatey.org/install#individual"&gt;Chocolatey install page&lt;/a&gt;, please be sure to read Chocolatey's disclaimer about downloading scripts from the Internet ❗) in it:&lt;/p&gt;

&lt;p&gt;In the config block of your Vagrantfile, add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Provisioning&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;"shell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;path: &lt;/span&gt;&lt;span class="s2"&gt;"scripts/InstallChocolatey.ps1"&lt;/span&gt;  &lt;span class="c1"&gt;# Run the external script to install Chocolatey&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;"shell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inline: &lt;/span&gt;&lt;span class="s2"&gt;"choco install vscode --yes"&lt;/span&gt;   &lt;span class="c1"&gt;# Run the inline script to install VSCode via Chocolatey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you &lt;code&gt;vagrant reload&lt;/code&gt; your VM, the provisioning will be performed at the end of the boot. The first shell script (called from an external file whose &lt;code&gt;path&lt;/code&gt; is provided) will download and install Chocolatey, the second &lt;code&gt;inline&lt;/code&gt; script will force the download and installation of the &lt;a href="https://community.chocolatey.org/packages/vscode"&gt;Visual Studio Code's choco package&lt;/a&gt; from the Chocolatey community repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In just a few minutes, we were able to spin up a Virtual Machine with our desired operating system and with some software installed (a package manager and an IDE) and now we're ready to write code and start some tests! 🎉 🎊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BwWhve9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f9yrgyjabqn9nhpc8fg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BwWhve9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f9yrgyjabqn9nhpc8fg.jpg" alt="Our new virtual test environment!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus, our IaC files (i.e. the Vagrantfile and the corresponding PowerShell scripts) now can be stored in a &lt;code&gt;git&lt;/code&gt; repository, thus taking advantage of all the source control features: basically we have a &lt;strong&gt;versioned infrastructure&lt;/strong&gt;, repeatable and exportable in any settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/sannae/07cd210478336f6f8aa571636f33b06b"&gt;Here&lt;/a&gt; you can find the code mentioned in this post.&lt;/p&gt;

&lt;p&gt;See you next time! 👋&lt;/p&gt;

</description>
      <category>vagrant</category>
      <category>windows</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building A Motivating Discord Bot In Node.js</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 19 Aug 2021 07:11:22 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/building-a-motivating-discord-bot-in-node-js-2jc9</link>
      <guid>https://dev.to/dailydevtips1/building-a-motivating-discord-bot-in-node-js-2jc9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is originally posted on the &lt;a href="https://adevait.com/nodejs/building-motivating-discord-bot-nodejs"&gt;Adeva blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Teams making it their own, gamers living there online, friends doing their online hangouts. Yes, we're talking about Discord, the communication tool with more than a quarter-billion users.&lt;/p&gt;

&lt;p&gt;No wonder you see many people talking about it, making tools work with it, and notice integrations pop up everywhere.&lt;/p&gt;

&lt;p&gt;And we're going to be a part of that because today, we'll learn how to make our very first Discord bot!&lt;/p&gt;

&lt;p&gt;And not any bot, a motivating bot for when we feel down. Because developer happiness is very important ❤️.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To get started with this project, you will need the following knowledge and tools.&lt;/p&gt;

&lt;p&gt;Using the command line&lt;br&gt;
Discord client setup and ready to go&lt;br&gt;
Basic knowledge of Node.js applications&lt;br&gt;
Don't worry, it's not too technical and explained step-by-step for you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-a-discord-bot"&gt;
  &lt;/a&gt;
  Setting Up a Discord Bot
&lt;/h2&gt;

&lt;p&gt;Let's start with the configuration side. We'll be setting up a Discord bot, but let's make our test server for our new bot before we get there.&lt;/p&gt;

&lt;p&gt;Open your Discord client and click the plus icon:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjppVx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297672863/pNWnAq6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjppVx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297672863/pNWnAq6z8.png" alt="new Discord client"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please fill out the details as to what server you'll be creating. For this article, it doesn't matter what you choose.&lt;/p&gt;

&lt;p&gt;Once that is done, and your server is up and running. Then we can head over to the &lt;a href="https://discord.com/login?redirect_to=%2Fdevelopers%2Fapplications"&gt;Discord Developer Portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Click on the New application button on the top right of the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mzGZoW6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297717612/0vLaw6B6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzGZoW6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297717612/0vLaw6B6k.png" alt="New Discord application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the pop-up, fill out whatever your app should be named. I used &lt;code&gt;discord-test-bot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the left menu, click on the &lt;code&gt;Bot&lt;/code&gt; item, and click the &lt;code&gt;Add Bot&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUsUPaPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297757770/jl9El4h-k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUsUPaPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297757770/jl9El4h-k.png" alt="Discord new bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can then give this bot an image and name, making it friendly and personal!&lt;/p&gt;

&lt;p&gt;Another critical step is to make sure we give the app and our bot the correct rights.&lt;br&gt;
To manage the rights, head over to the Oauth2 section.&lt;/p&gt;

&lt;p&gt;For scopes, turn on the &lt;code&gt;Bot&lt;/code&gt; scope. Then scroll down and select &lt;code&gt;Send Messages&lt;/code&gt; and &lt;code&gt;Read Message History&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abS51d8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297794141/FvKi6NMGi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--abS51d8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297794141/FvKi6NMGi.png" alt="Bot access rights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to add this bot to the server we just created. We can do this by copying the link under the scopes section and opening that in a separate window.&lt;/p&gt;

&lt;p&gt;It will pop up a select, where you can choose what server you like to add the bot to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NflBdynK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297820949/Mle_UnH7M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NflBdynK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297820949/Mle_UnH7M.png" alt="Add bot to Discord channel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing we need from the developer portal is the token. We can head back to the Bot menu item and click the copy button on the token part:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBjaJbg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297849052/Ma4ecsjjF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBjaJbg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297849052/Ma4ecsjjF.png" alt="Copy Discord bot token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll use this token to give our bot access to do something.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-nodejs-discord-script"&gt;
  &lt;/a&gt;
  Creating the Node.js Discord Script
&lt;/h2&gt;

&lt;p&gt;Alright, now that this admin part is done, let's start on our Node.js script.&lt;/p&gt;

&lt;p&gt;Open your favorite terminal and create a new project directory and initialize node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;discord-bot &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;discord-bot
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: The -y parameter answers all questions of the CLI with yes (saves us some enters).&lt;/p&gt;

&lt;p&gt;Next, we'll be using a couple of NPM packages, so let's install those using our terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios discord.js dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install the following packages, which we'll use for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;axios&lt;/code&gt;: Making http requests to the quotes API&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;discord.js&lt;/code&gt;: The Discord NPM package&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dotenv&lt;/code&gt;: Enables environmental config files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in place, let's create our &lt;code&gt;.env&lt;/code&gt; file first. This file will hold the Discord bot token we just copied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;YOUR_TOKEN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Replace YOUR_TOKEN with the actual token you got from the bot setup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, create an &lt;code&gt;index.js&lt;/code&gt; file in your editor. The first thing we'll add is all our config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned, we won't make an ordinary bot. Our bot will be responding to people who seem to be sad on Discord.&lt;/p&gt;

&lt;p&gt;For this, we'll create an array of words that sound sad. You can, of course, enhance this list to your wish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;angry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unhappy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;miserable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;down&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is that when a user uses any of those words, we lift them with a quote.&lt;/p&gt;

&lt;p&gt;The next part will be to log in to the bot. This is something the Discord NPM package handles for us, so we have to call the following line of code.&lt;/p&gt;

&lt;p&gt;In this line, we call the login function of the bot and pass our token to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can also see if our bot is connected by executing the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Logged in as &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But more importantly, we want to listen to messages being sent on the Discord server and react to those.&lt;/p&gt;

&lt;p&gt;To listen to messages, we use the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute code&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to add a check to see if the message was not by any bot. Else we might create an infinite loop 👀.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That line will stop the function when a bot posts a message.&lt;/p&gt;

&lt;p&gt;The next part will be to see if the user used any of our target words.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foundWord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foundWord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Found the word &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;foundWord&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick recap for what's going on, we use the JavaScript array method “find“ to loop over each of our target words. When the message includes that word, it breaks the find method and will return that word.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User types message: "I'm angry and sad at the same time"&lt;/li&gt;
&lt;li&gt;We'll loop over our targets&lt;/li&gt;
&lt;li&gt;The first hit is sad&lt;/li&gt;
&lt;li&gt;We found the word sad&lt;/li&gt;
&lt;li&gt;Console logs: "Found the word sad"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is enough for now, we could check the other way around, but this is the more efficient solution.&lt;/p&gt;

&lt;p&gt;The next step is to query a quotes API and return a random quote to uplift the person.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://type.fit/api/quotes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// API response inside response object&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an array, so let's try and get a random item from this array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bear with me here. We define a new variable and call the response.data array, we then pass the number of the item we want to retrieve.&lt;/p&gt;

&lt;p&gt;As the variable, we send the Math where we get a random number with a max of all items in the object.&lt;/p&gt;

&lt;p&gt;The last thing we need to do is respond to this user with a nice message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`Don't be &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;foundWord&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;randomQuote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;once said:\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;randomQuote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, let's run the script and test it out!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ND5J9jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629298149918/INSrPbX1Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ND5J9jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629298149918/INSrPbX1Z.png" alt="Discord chatbot responding with uplifting messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there we go! Our Discord bot is responding with an uplifting message. The message will change every time someone mentions one of our trigger words. If you're looking for the source code, I hosted the code on &lt;a href="https://github.com/rebelchris/node-discord-bot"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting Started with Systems Programming with Rust (Part 2)</title>
      <author>Beka Modebadze</author>
      <pubDate>Thu, 19 Aug 2021 06:39:14 +0000</pubDate>
      <link>https://dev.to/bexxmodd/getting-started-with-systems-programming-with-rust-part-2-2lei</link>
      <guid>https://dev.to/bexxmodd/getting-started-with-systems-programming-with-rust-part-2-2lei</guid>
      <description>&lt;h2&gt; Building a Mini-Shell &lt;/h2&gt;



&lt;p&gt;
    In the introductory Part 1, we discussed what system processes are, how to spawn them, and how to pass commands and execute them. If you want to review this material first you can 
    &lt;a href="https://bexxmodd.herokuapp.com/post/1/"&gt;click here.&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;
    In this section we’ll learn:

    &lt;/p&gt;
&lt;ul&gt;- What are system signals and how to handle them.&lt;/ul&gt;
    &lt;ul&gt;- What are stdout, stdin, and stderr, and how to use them efficiently.&lt;/ul&gt;
    &lt;ul&gt;- Writing to stdout and reading from stdin, instead of printing and what’s the advantage of doing so.&lt;/ul&gt;
    &lt;ul&gt;- Managing parent and child processes and their execution order.&lt;/ul&gt;




&lt;p&gt;
    To demonstrate the above-listed topics in practice, we’ll be building a UNIX mini-shell, which will be able to take commands from a user in the terminal and execute them. The program will also handle some invalid commands and deal with stuck programs gracefully.
&lt;/p&gt;



&lt;h2&gt;stdin, stdout, and stderr&lt;/h2&gt;

&lt;p&gt;
    Probably you are familiar with what streams are in computing, if not just like water streams, it refers to the flow of data from source to an endpoint. Streams allow connecting commands, processes, files, etc. There are three special streams:
&lt;/p&gt;




&lt;ul&gt;- stdin (Standard Input): which takes text as an input.&lt;/ul&gt;
    &lt;ul&gt;- stdout (Standard Output): stores text output in the stdout stream.&lt;/ul&gt;
    &lt;ul&gt;- stderr (Standard Error): When an error occurs during a stream the error message is stored in this stream.&lt;/ul&gt;




&lt;p&gt;
The Linux system is file-oriented. This means nearly all streams are treated as files, and those streams are processed based on the unique identifier code that each file type has. For stdio (collection of standard output, input, and error) assigned values are 0 for stdin, 1 for stdout, and 2 for stderr. If we want to read a stream of text from the command line, in C we use the function &lt;code&gt;read()&lt;/code&gt; and supply code 0 as one of the arguments for stdin (Figure 1-a).
&lt;/p&gt;




&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BUHx0iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2Ay3_tArgpKbZp1CiR5MpKeg.png" alt="centered image"&gt;&lt;p&gt;Figure 1-a. Stdin Stdout &amp;amp; Stderr diagram&lt;/p&gt;
&lt;/center&gt;



&lt;p&gt;
    Reading and writing from &lt;code&gt;stdio&lt;/code&gt; is a little bit different in Rust, but fundamentals remain the same. To better demonstrate their use we’ll start writing code for our mini-shell program. Initially, we’ll create a loop that will be asking the user to type in a command that the system will execute. The first two functionalities we need to create are writing to stdout and reading from stdin.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// flushes text buffer to the stdout&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// flush to the terminal&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    We’ll use a standard &lt;code&gt;io&lt;/code&gt;&amp;gt; module to write to the terminal. Instead of passing &lt;code&gt;String&lt;/code&gt; by copy, the function &lt;code&gt;write_to_stdout()&lt;/code&gt; takes a reference to a string slice as an argument. The &lt;code&gt;str&lt;/code&gt; is different from &lt;code&gt;String&lt;/code&gt;. It’s what Rust refers to as a slice, is a reference to a part of a &lt;code&gt;String&lt;/code&gt;. If you want to better understand the difference between those two, I’d recommend reading &lt;a href="https://doc.rust-lang.org/nightly/book/ch04-01-what-is-ownership.html"&gt;chapter 4 from Rust's official book.&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;
    The &lt;code&gt;write_to_stdout()&lt;/code&gt; function returns &lt;code&gt;Result&lt;/code&gt; object which can be &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;. As those names suggest if everything goes as planned we’ll return &lt;code&gt;Ok&lt;/code&gt; otherwise &lt;code&gt;Err&lt;/code&gt; is returned. This procedure is so common in Rust that to return &lt;code&gt;Err&lt;/code&gt; we have a special symbol &lt;code&gt;?&lt;/code&gt; at the end of the function call that can end up in error.
&lt;/p&gt;



&lt;p&gt;
    Inside the function, we call a &lt;code&gt;write()&lt;/code&gt; function that fills the text buffer of the &lt;code&gt;stdout&lt;/code&gt; and then we flush text on the screen. Inside &lt;code&gt;write()&lt;/code&gt; we usa &lt;code&gt;as_ref()&lt;/code&gt; method which converts string slice into an ASCII byte literal, as this is what the above-mentioned function expects as an argument.
&lt;/p&gt;



&lt;p&gt;
    Next, we need to build a function that will read the user inputted command, and process it. For this, we’ll write a custom function &lt;code&gt;get_user_command()&lt;/code&gt; that returns &lt;code&gt;String&lt;/code&gt;.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;/// fetch the user inputted command from terminal&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_user_command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.read_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// not receommended&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.ends_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// remove last char&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;input&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    The function reads a full line from the terminal and copies a value into an &lt;code&gt;input&lt;/code&gt; variable. The &lt;code&gt;read_line()&lt;/code&gt; takes mutable reference of the input &lt;code&gt;String&lt;/code&gt; variable, dereferences inside the function call, writes user-supplied command, and returns &lt;code&gt;Result&lt;/code&gt;. When we read a line from stdin it’s EOL (end of line) terminated, which includes the &lt;code&gt;\n&lt;/code&gt; control character at the end and we need to get rid of it before returning input.
&lt;/p&gt;



&lt;p&gt;
    Finally, we glue our input and output functions together with our mini-shell program.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;run_shell&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_shell&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;shellname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ghost# "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;shellname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;eprintln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to write to stdout : {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cmnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_user_command&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cmnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;eprintln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}: command not found!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    In our &lt;code&gt;main()&lt;/code&gt; function we run a loop that prints the shell name to the terminal screen and waits for the user to input the command. The &lt;code&gt;run_shell()&lt;/code&gt; writes to stdout using previously defined function by us and handles an error if it occurs during printing. If something goes wrong it notifies a user about it and exits the program with error code 1 (Unsuccessful compilation).
&lt;/p&gt;



&lt;p&gt;
    Next, it reads the user-supplied command and passes that command to a newly created process. Then we check the status of the command execution, and if the command was unsuccessful we notify a user that the “command not found” and instead of exiting here, we return to the loop of prompting the user for an input.
&lt;/p&gt;



&lt;p&gt;
    Run the program with &lt;code&gt;cargo run&lt;/code&gt; and we should see output similar to this:
&lt;/p&gt;




&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXyZywJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2ARYlhw2gMUvCkS3eJpvUD3w.png" alt="centered image"&gt;
&lt;/center&gt;



&lt;p&gt;
    A good question to ask here is why we use to read and write functions instead of simply printing to the screen. The reason behind this is that directives like &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; are what’s called Async-Signal Safe functions, while C's &lt;code&gt;printf&lt;/code&gt; is not. They can be safely called within a signal handler (which we’ll review next).
&lt;/p&gt;



&lt;p&gt;
    The functions that are Async-Signal Safe are guaranteed not to be interrupted or interfered with when some signal is sent. For example, if we are in the middle of &lt;code&gt;println!()&lt;/code&gt; call and a signal occurs whose handler itself calls &lt;code&gt;println!()&lt;/code&gt; can result in undefined behavior. Because in this case, the output of the two &lt;code&gt;println!()&lt;/code&gt; statements would be intertwined.
&lt;/p&gt;



&lt;h2&gt;System Signals&lt;/h2&gt;

&lt;p&gt;
    To improve our mini-shell we have to handle system signals. Signals in the UNIX environment are sort of notifications that are sent by an operating system to a process to notify about a certain event, which usually ends up interrupting the process. Each signal has a unique name and integer value assigned to it. You can check the full list of signals of your system by typing &lt;code&gt;kill -l&lt;/code&gt; in your terminal.
&lt;/p&gt;



&lt;p&gt;
    By default, each signal has its handler defined which is a function that is called when a certain signal arrives. We can modify the handling of those signals (which we’ll do for our mini-shell project). However, some of the signal handlers can’t be modified.
&lt;/p&gt;



&lt;p&gt;
    For our project will take a look at four following signals:
&lt;/p&gt;



&lt;ul&gt;- &lt;code&gt;SIGINT&lt;/code&gt; which is called by pressing &lt;b&gt;Ctrl+C&lt;/b&gt; and causes the system to send a &lt;b&gt;INT&lt;/b&gt; signal to the running process. By default this causes the processes to terminate immediately. The Signal code for &lt;code&gt;SIGINT&lt;/code&gt; is 2.&lt;/ul&gt;

&lt;ul&gt;- &lt;code&gt;SIGQUIT&lt;/code&gt; is called by pressing &lt;b&gt;Ctrl+\&lt;/b&gt; and will send the &lt;b&gt;QUIT&lt;/b&gt; signal to the running process. This also terminates the process but more ungracefully. However, cleanup of absolutely necessary resources that need to be cleaned is performed. The assigned code is 3&lt;/ul&gt;

&lt;ul&gt;
    - &lt;code&gt;SIGALRM&lt;/code&gt; is like an alarm clock with a countdown in seconds. If the seconds' count hits zero, any pending alarm is canceled and the &lt;code&gt;SIGALRM&lt;/code&gt; signal is sent to the process. The alarm code is 14.
&lt;/ul&gt;

&lt;ul&gt;- &lt;code&gt;SIGKILL&lt;/code&gt; is the most forceful signal sent by the system which forces the process to halt. This signal can’t be handled manually by a user but the system will still perform a cleanup after process termination. It has a code 9.&lt;/ul&gt;



&lt;p&gt;
    Now, it’s time to check how we’ll be handling the above-listed signals in Rust (except &lt;code&gt;SIGKILL&lt;/code&gt; for which we can’t change default behavior). For example, if you run &lt;code&gt;cat&lt;/code&gt; command in the Linux terminal without a file argument it will get stuck in an infinite loop. When this happens in our mini-shell we’ll rewire the &lt;code&gt;SIGINT&lt;/code&gt; signal so it will forward the interrupt signal to the child process. This will only terminate the running loop but will keep our shell program running.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// Registers UNIX system signals&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;register_signal_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Signals&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// signal execution is forwarded to the child process&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="nf"&gt;.forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;SIGINT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;assert_ne!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// assert that the signal is sent&lt;/span&gt;
                &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    First, we create an iterator of signals which stores a vector of signal references. Here we indicate which signals are expected to be handled. Next, we need to forward the signal to the child process, the one which is actively running, and perform desired behavior on it. This is done by spawning a new thread that returns a &lt;code&gt;JoinHandler&lt;/code&gt;.
&lt;/p&gt;



&lt;p&gt;
    This handler will detach a child process after being dropped. This means when &lt;code&gt;SIGINT&lt;/code&gt; arrives at the child's process, that process will be separated from the parent and it will only interrupt whatever the child process is doing, while the parent process will continue running. If there is no child process in execution it will do nothing.
&lt;/p&gt;



&lt;p&gt;
    We use &lt;code&gt;forever()&lt;/code&gt; function on signals iterator which returns an infinite loop over arriving signals. As soon as the signal arrives it will be evaluated with a match-case and if it matches &lt;code&gt;SIGINT&lt;/code&gt; it will assert that signal was sent successfully. For any other signal, the iterator will continue to wait for the next signal.
&lt;/p&gt;



&lt;p&gt;
    Since we rewired the &lt;code&gt;SIGINT&lt;/code&gt; signal to only handle child processes, what if we want to exit the program completely? We’ll handle a different signal and let it print “Goodbye” to the stdout and exit graciously. For this one, we’ll use the &lt;code&gt;SIGQUIT&lt;/code&gt; signal, which can be sent from the keyboard by pressing &lt;b&gt;Ctrl + \&lt;/b&gt;.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// .. previous function introduction and matching ..&lt;/span&gt;

        &lt;span class="n"&gt;SIGQUIT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Goodbye!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c"&gt;// .. rest of the function ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    When the &lt;code&gt;SIGQUIT&lt;/code&gt; signal is called it’s matched in our iterator and this calls our &lt;code&gt;write_to_stdout()&lt;/code&gt; function. Then program exits with code 0, which in Linux stands for a successful compilation. Notice we are importing &lt;code&gt;SIGNAL&lt;/code&gt; consts from &lt;code&gt;signal_hook&lt;/code&gt; library, which is a library for easier Unix signal handling.
&lt;/p&gt;



&lt;p&gt;
    Finally, we’ll add a small feature to our program. The user will supply an integer at the program's start. This number will be used as a countdown for the program’s execution time. For example, if a user supplies 5, this will invoke &lt;code&gt;alarm(5)&lt;/code&gt; when the child process is started. If a function isn’t complete when the countdown ends, our manually defined &lt;code&gt;SIGALRM&lt;/code&gt; signal will kill it and return the program to the initial state.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;unistd&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// alarm will be called from `execute_shell(timeout: u32)`&lt;/span&gt;
&lt;span class="c"&gt;/// after function collects user input it calls `alarm::set(timeout)`&lt;/span&gt;

&lt;span class="c"&gt;// .. beginning of the register_signal_handlers function ..&lt;/span&gt;

        &lt;span class="n"&gt;SIGALRM&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This's taking too long...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="c"&gt;// when alarm goes off it kills child process&lt;/span&gt;
            &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c"&gt;// .. rest of the function ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    When &lt;code&gt;SIGALRM&lt;/code&gt; is matched, first, it will write to the stdout, and next, it does a very interesting thing. It will use the &lt;code&gt;signal::kill()&lt;/code&gt; function to send the &lt;code&gt;SIGINT&lt;/code&gt; signal on a process it operates. But since the same function handles &lt;code&gt;SIGINT&lt;/code&gt; by forwarding it to a child process it will only kill the child process and return back to the main program of running mini-shell. Full function:
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;unistd&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// Register UNIX system signals&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;register_signal_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Signals&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// signal execution is forwarded to the child process&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="nf"&gt;.forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;SIGALRM&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This's taking too long...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="c"&gt;// when alarm goes off it kills child process&lt;/span&gt;
                    &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;SIGQUIT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Good bye!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// not safe&lt;/span&gt;
                    &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;SIGINT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;assert_ne!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// assert that the signal is sent&lt;/span&gt;
                &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    These should be an expected outcome if you run our mini-shell through the terminal:
&lt;/p&gt;




&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImOGYa19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2Apn1CzSKuvPAH2MJtg115ZA.png" alt="centered image"&gt;
&lt;/center&gt;



&lt;p&gt;
    You can find a full code of the mini-shell, which includes some additional features besides covered here, in &lt;a href="https://github.com/bexxmodd/systems-with-rust/blob/master/src/main.rs"&gt;this GitHub repository&lt;/a&gt;.
&lt;/p&gt;



&lt;h2&gt;Summary&lt;/h2&gt;



&lt;p&gt;
    Today we learned what are stdin, stdout, and stderr, and how to use them properly. We looked at the common UNIX system signals and manually handled three of them to fit the needs of our mini-shell program. The combined knowledge from &lt;a href="https://bexxmodd.herokuapp.com/post/1/"&gt;Part 1&lt;/a&gt; allowed us to build a program that executes system commands and handles system signals safely and fast thanks to the Rust language.
&lt;/p&gt;



&lt;p&gt;
    In the upcoming parts, we’ll take a look at communicating between processes between pipes and review concurrency. We’ll demonstrate why Rust can be the best choice for this.
&lt;/p&gt;





&lt;center&gt;...&lt;/center&gt;

</description>
      <category>rust</category>
      <category>linux</category>
      <category>systems</category>
      <category>programming</category>
    </item>
    <item>
      <title>Monetising my freelance journey</title>
      <author>alder_code</author>
      <pubDate>Thu, 19 Aug 2021 06:32:11 +0000</pubDate>
      <link>https://dev.to/aldercode/monetising-my-freelance-journey-4mkl</link>
      <guid>https://dev.to/aldercode/monetising-my-freelance-journey-4mkl</guid>
      <description>&lt;p&gt;Let's try something: &lt;strong&gt;monetising a '(sort of) noob to success' freelance journey&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Monetising: totally not a typo... I'm using UK English 😉)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sound interesting?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_mTrJnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629190206600/mpIJQw-US.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_mTrJnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629190206600/mpIJQw-US.png" alt='Mr Burns, from The Simpsons, with clasped hands, saying "Excellent"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyone who has been following me on &lt;a href="https://twitter.com/aldercode"&gt;Twitter&lt;/a&gt; will know that I'm HARD at work getting myself established as a busy and (one day) successful freelancer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-wordpress-websites"&gt;
  &lt;/a&gt;
  Building WordPress websites
&lt;/h2&gt;

&lt;p&gt;I've written &lt;a href="https://dev.to/aldercode/series/12438"&gt;a couple of posts&lt;/a&gt; here on DEV Community about getting started as a freelancer building WordPress websites. If you've read them (and quite a number of you have - thank you!), you may be wondering where the next update is. &lt;/p&gt;

&lt;p&gt;Well, it's coming. A few 'work in progress' sites are coming along nicely, but I'm waiting until there's something new that's finalised and/or launched, i.e. more concrete, before posting the next instalment. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-all-the-things"&gt;
  &lt;/a&gt;
  Writing ALL the things...
&lt;/h2&gt;

&lt;p&gt;I'm also having a good go at getting back into freelancing writing. This is something that I did back in 2009 and 2010, and it actually went really well at the time. I was &lt;strong&gt;busy&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;But, I packed it all in for a decade. Why? Well, life happened (as it tends to do). I'll be sure to post more on that at a later stage. &lt;/p&gt;

&lt;p&gt;Now, I'm back as a writer. Yesterday, my first-of-many (hopefully) written articles was accepted, invoiced, and will be published soon. Whilst this is by no means the first time I've done this, it somehow feels like quite a major milestone this time around. The reason? It's the first time that I've done so in eleven years. &lt;/p&gt;

&lt;p&gt;I claimed that "I'm back". Now, having sent a formal invoice for &lt;em&gt;actual&lt;/em&gt; dollars, it's verifiably confirmed. Someone, in this case a client, reaching for their wallet, has a nice "you are &lt;em&gt;indeed&lt;/em&gt; back" feel to it.&lt;/p&gt;

&lt;p&gt;Additionally, between starting this post's draft and finishing it today, it seems I may have secured a second freelancing writing gig. Exciting times!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documenting-my-freelance-journey"&gt;
  &lt;/a&gt;
  Documenting my freelance journey
&lt;/h2&gt;

&lt;p&gt;I've been keen on the whole #buildinpublic and #learninpublic thing since I started on tech Twitter, and here on Hashnode, back in March.&lt;/p&gt;

&lt;p&gt;I've been open about where I am coding-wise and what I'm doing freelance-wise since the start.&lt;/p&gt;

&lt;p&gt;There are so many others out there trying to learn to code, start freelancing, etc. that I feel obligated to continue sharing my progress publicly. At the same time, I continue doing so because I enjoy it &lt;strong&gt;and&lt;/strong&gt; want to help out in any way that I can.&lt;/p&gt;

&lt;p&gt;Many folks on Twitter, and here, have posted about how no matter where one is on their &lt;em&gt;(insert appropriate learning/subject)&lt;/em&gt; journey there is always someone at an earlier stage who could use your knowledge to help them. &lt;/p&gt;

&lt;p&gt;The implication is: start blogging about it now! You don't need to be an expert before you start sharing what you know and what you've learned, even if you only learned it ten minutes ago.&lt;/p&gt;

&lt;p&gt;In fact, blogging about something that you learned barely ten minutes ago will assuredly help reinforce your learning. Win-win for everyone!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monetising-my-freelance-journey"&gt;
  &lt;/a&gt;
  Monetising my freelance journey
&lt;/h2&gt;

&lt;p&gt;Here's something I was wondering: is it possible to monetise this path I'm on from (sort of) freelance noob to successful freelancer?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-in-it-for-me"&gt;
  &lt;/a&gt;
  What's in it for me?
&lt;/h3&gt;

&lt;p&gt;Building a community from the get-go. There are &lt;em&gt;so&lt;/em&gt; many of us giving freelancing a go, yet the majority of us are doing so in isolation. &lt;/p&gt;

&lt;p&gt;Sure, the process will initially start off as more of a one-way conversation, but I plan to make it way more interactive and embrace comments and opinions beginning to flow and the community developing.&lt;/p&gt;

&lt;p&gt;By making this a paid community, albeit still at a low cost ($5 per month at launch), the community will hopefully be populated by those with a true interest in learning and developing freelancing skills.&lt;/p&gt;

&lt;p&gt;There's obviously also an interest in having this generate some income, I must be honest. If I can somewhat subsidise my early earnings via another method, that will hopefully allow me to chase after preferred, more appropriate, freelance roles. This is as opposed to jumping at whatever freelance gigs I can find just to get going.&lt;/p&gt;

&lt;p&gt;It's one thing to start freelancing by taking on anything and everything, and quite another to establish yourself as one of the better ones in any specific niche right from the outset.&lt;/p&gt;

&lt;p&gt;Granted, very few have the luxury of choosing. Therefore, I'm trying to &lt;em&gt;create&lt;/em&gt; that luxury for myself. "We make our own luck," I believe the saying goes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-potential-solution"&gt;
  &lt;/a&gt;
  A potential solution:
&lt;/h3&gt;

&lt;p&gt;I whipped up a &lt;a href="https://aldercode.gumroad.com/l/goingfreelance"&gt;Gumroad membership page&lt;/a&gt; to address this. &lt;/p&gt;

&lt;p&gt;The goal: those interested can sign up for weekly &lt;strong&gt;detailed&lt;/strong&gt; updates on the current progress of my freelancing journey. &lt;/p&gt;

&lt;p&gt;And, importantly, it's not going to focus on just freelance writing or just freelance website building (using WordPress, at least at the start), but rather: &lt;strong&gt;both&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This won't be a mere newsletter either, but rather a detailed unpacking of what I did, what worked, what did not, and the reasons why.&lt;/p&gt;

&lt;p&gt;A front-row seat to the daily life of a freelancer.&lt;/p&gt;

&lt;p&gt;Given that I'm not exactly starting at zero, there will obviously be a fair bit of detailed backstory on how I got to where I am right now over the last few months. Additionally, I'll include detailed information on what I did back in 2009 and 2010 that allowed me to earn a fair bit as a freelance writer then too.&lt;/p&gt;

&lt;p&gt;By committing to posting in full detail every week for my subscribers, I imagine that the content generated over the next six months to a year is going to prove invaluable to prospective freelancers!&lt;/p&gt;

&lt;p&gt;Naturally, once we've all learned enough to compile the learnings into a good eBook, subscribers will get that for free too. It'd be rude of me not to!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-in-it-for-subscribers"&gt;
  &lt;/a&gt;
  What's in it for subscribers?
&lt;/h3&gt;

&lt;p&gt;All of the above, plus: &lt;/p&gt;

&lt;p&gt;Knowledge. &lt;/p&gt;

&lt;p&gt;Watching someone else try to get up and running as a freelancer from the starting blocks. &lt;/p&gt;

&lt;p&gt;Fine, I may have already have left the starting blocks, but, I assure you, not by that much. It's still very early days for my freelancing career. The weekly updates will include way more detail than I'd tend to share in blog posts usually. &lt;/p&gt;

&lt;p&gt;Learning from my learnings.&lt;/p&gt;

&lt;p&gt;Seeing the results of outreach and discovering what it's &lt;strong&gt;actually&lt;/strong&gt; like out there.&lt;/p&gt;

&lt;p&gt;Learning the process from contact to brief to delivery... and on to invoicing.&lt;/p&gt;

&lt;p&gt;Sound interesting? If so, be sure to check out the &lt;a href="https://aldercode.gumroad.com/l/goingfreelance"&gt;Gumroad page&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#will-it-work"&gt;
  &lt;/a&gt;
  Will it work?
&lt;/h3&gt;

&lt;p&gt;I have &lt;strong&gt;no&lt;/strong&gt; idea. But, I'm happy to find out.&lt;/p&gt;

&lt;p&gt;I'm going to be doing the work whether or not folks sign up and join me. I may as well unpack the lessons learned along the way with the wider world instead of stacking them all up and only releasing my magnum opus 😉 in a year.&lt;/p&gt;

&lt;p&gt;Personally, I love grasping opportunities to find out as much as I can about freelancing from wherever I can, i.e. really getting into the finer details. &lt;/p&gt;

&lt;p&gt;Hopefully, this helps someone else on their path to freelancing and financial success.&lt;/p&gt;

&lt;p&gt;Time will tell.&lt;/p&gt;

&lt;p&gt;Got any thoughts on this? I'd love to hear them. Drop a comment below and let's chat.&lt;/p&gt;

&lt;p&gt;Watch this space for feedback on how it all goes.&lt;/p&gt;




&lt;p&gt;Enjoyed the post? Then, please stop by on &lt;a href="https://twitter.com/aldercode"&gt;Twitter&lt;/a&gt; to say Hi. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/W7W73WZVX"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKanlt08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>freelancing</category>
      <category>writing</category>
    </item>
    <item>
      <title>Best Design Resources for Developers - II</title>
      <author>Suhail Kakar</author>
      <pubDate>Thu, 19 Aug 2021 06:29:57 +0000</pubDate>
      <link>https://dev.to/suhailkakar/best-design-resources-for-developers-ii-2g5a</link>
      <guid>https://dev.to/suhailkakar/best-design-resources-for-developers-ii-2g5a</guid>
      <description>&lt;p&gt;Are you searching for the best design resources? This is a collection that every developer should bookmark since it contains the greatest resources for creating an eye-catching and aesthetically enhanced project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Every developer's job entails some kind of product design. It's not just about having a good appearance; it's also about having engaging visuals and a good overall presentation. Rather than spending time and money on a lengthy design process, it is preferable to leverage resources that offer ready-to-use components and features for a fantastic, amazing, and outstanding product.&lt;/p&gt;

&lt;p&gt;Part one of these resources can be found &lt;a href="https://blog.suhailkakar.com/best-design-resources-for-developers"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#accessibility-resources"&gt;Accessibility resources&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#checklists"&gt;Checklists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guidelines"&gt;Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#industry-leaders-educators-and-consultants"&gt;Industry leaders, educators, and consultants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#online-courses"&gt;Online courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#patterncomponent-libraries"&gt;Pattern/component libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements-and-standards"&gt;Requirements and standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-tools-and-development-references"&gt;Testing tools and development references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#further-reading"&gt;Further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#books-and-zines"&gt;Books and zines&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#individual-publications"&gt;Individual publications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility"&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#independent-practice-consulting-freelancing"&gt;Independent practice, consulting, freelancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#process-and-mindset"&gt;Process and mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-experience-and-interaction-design"&gt;User experience and interaction design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-research"&gt;User research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#publishers-and-distributors"&gt;Publishers and distributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#browser-features"&gt;Browser features&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#google-chrome-extensions-and-bookmarklets"&gt;Google Chrome extensions and bookmarklets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#google-chrome-devtools"&gt;Google Chrome DevTools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#brushes"&gt;Brushes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#colors-and-color-palettes"&gt;Colors and color palettes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#accessible-color-palettes"&gt;Accessible color palettes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility-testing-tools"&gt;Accessibility testing tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fonts"&gt;Fonts&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#directories-and-marketplaces"&gt;Directories and marketplaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#individual-foundries"&gt;Individual foundries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#icons-and-emoji"&gt;Icons and emoji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#inspiration-and-criticism-websites"&gt;Inspiration and criticism websites&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#brand-identity"&gt;Brand identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#illustration-and-art"&gt;Illustration and art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#print-layout-packaging-art-direction"&gt;Print, layout, packaging, art direction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motion"&gt;Motion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typography"&gt;Typography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-mobile-product"&gt;Web, mobile, product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ux-patterns-and-components"&gt;UX patterns and components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visual-design"&gt;Visual design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#macos-apps"&gt;macOS apps&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#development"&gt;Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#font-management"&gt;Font management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#menubar-apps"&gt;Menubar apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#mockups"&gt;Mockups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prototyping-tools"&gt;Prototyping tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stock-graphics"&gt;Stock graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stock-photography"&gt;Stock photography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-testing-and-interactive-feedback-tools"&gt;User testing and interactive feedback tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#accessibility-resources"&gt;
  &lt;/a&gt;
  Accessibility resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#checklists"&gt;
  &lt;/a&gt;
  Checklists
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://accessibility.18f.gov/checklist/"&gt;18F Accessibility Guide Checklist&lt;/a&gt; — WCAG 2.0 compliance checklist for developers, driven by priority&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hhs.gov/web/section-508/making-files-accessible/pdf-required/index.html"&gt;HHS.gov’s checklist for creating accessible PDFs&lt;/a&gt; — designing accessibly for artifacts that aren't apps or websites is important, too!&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://accessibility.voxmedia.com/"&gt;Vox Media Accessibility Guidelines Checklist&lt;/a&gt; — best practices for designers, engineers, PMs, QA, and editorial staff (with sources to read more; great to send to coworkers on different teams)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guidelines"&gt;
  &lt;/a&gt;
  Guidelines
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://accessibility.18f.gov/"&gt;18F Accessibility Guide&lt;/a&gt; — hub of accessibility resources and principles by government office 18F&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://empathyprompts.net/"&gt;Empathy Prompts&lt;/a&gt; — open source list of considerations &amp;amp; challenges to help build empathy&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://material.io/guidelines/usability/accessibility.html#accessibility-principles"&gt;Google Material Design Accessibility Principles&lt;/a&gt; — practices for color, sound, motion, layout, copy, hierarchy, focus, and implementation&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://inclusivedesignprinciples.org/"&gt;Inclusive Design Principles&lt;/a&gt; — seven clear principles to follow to put people first, by leading experts The Paciello Group&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.microsoft.com/en-us/design/inclusive"&gt;Microsoft Inclusive Design Principles&lt;/a&gt; — Microsoft's guidelines for designing accessible and inclusive experiences, including a detailed manual (.pdf) with awesome visualizations, and activity cards for considerations &amp;amp; challenges while brainstorming&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#industry-leaders-educators-and-consultants"&gt;
  &lt;/a&gt;
  Industry leaders, educators, and consultants
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/"&gt;Deque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.karlgroves.com/"&gt;Karl Groves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.knowbility.org/"&gt;Knowability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.levelaccess.com/"&gt;Level Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marcysutton.com/"&gt;Marcy Sutton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.paciellogroup.com/"&gt;The Paciello Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://simplyaccessible.com/"&gt;Simply Accessible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webaim.org/resources/designers/"&gt;WebAIM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#online-courses"&gt;
  &lt;/a&gt;
  Online courses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.pluralsight.com/courses/web-accessibility-meeting-guidelines"&gt;Pluralsight “Meeting Web Accssibility Guidelines” course&lt;/a&gt; — [paid] — practical course with code examples to meet Section 508 and/or WCAG 2.0 requirements for government/education projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udacity.com/course/web-accessibility--ud891"&gt;Udacity Web Accessibility course, by Google&lt;/a&gt; — [free] — practical course focused on front-end design and development regarding markup and visual styling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#patterncomponent-libraries"&gt;
  &lt;/a&gt;
  Pattern/component libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://a11y-style-guide.com/style-guide/"&gt;A11y Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ianmcburnie.github.io/mindpatterns/index.html"&gt;eBay MIND Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#requirements-and-standards"&gt;
  &lt;/a&gt;
  Requirements and standards
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.w3.org/TR/WCAG20/"&gt;🌐 WCAG 2.0&lt;/a&gt; — the W3C’s “Web Content Accessibility Guidelines” web standards specification&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ada.gov/"&gt;🇺🇸 ADA&lt;/a&gt; — Americans with Disabilities Act prohibits discrimination against people with disabilities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.section508.gov/"&gt;🇺🇸 Section 508&lt;/a&gt; — amendment to the Workforce Rehabilitation Act federally mandating all tech developed, procured, maintained, or used by the federal government be accessible to persons with disabilities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ontario.ca/laws/regulation/110191"&gt;🇨🇦 AODA&lt;/a&gt; — Accessibility for Ontarians with Disabilities Act, enacted for the province to become “accessible for people with disabilities by 2025”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing-tools-and-development-references"&gt;
  &lt;/a&gt;
  Testing tools and development references
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.accessible-email.org/"&gt;Accessible-email.org&lt;/a&gt; — browser-based semantic analysis to report a11y and usability issues errors in marketing emails&lt;/li&gt;
&lt;li&gt;
&lt;a href="#colors"&gt;Colors palettes &amp;amp; contrast testing tools&lt;/a&gt; — listed in the "Colors" category 👇&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.html5accessibility.com/"&gt;HTML5 Accessibility&lt;/a&gt; — lists current accessibility support status of HTML5 features across major browsers&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://pa11y.org/"&gt;pa11y&lt;/a&gt; — automated accessibility testing on the command line for programmatic accessibility reporting&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://khan.github.io/tota11y/"&gt;tota11y&lt;/a&gt; — Khan Academy's jQuery-based semantic analysis that can be inserted into a page or run as a bookmarklet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://a11ywins.tumblr.com/"&gt;Accessibility Wins&lt;/a&gt; — single-serving Tumblr showcasing small victories in accessible web design and development&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brunopulis/awesome-a11y"&gt;Awesome Accessibility&lt;/a&gt; — a curated list of awesome accessibility tools, articles and resources on GitHub&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Books on accessibility&lt;/em&gt; — listed in the “Books” category 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#books-and-zines"&gt;
  &lt;/a&gt;
  Books and zines
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#individual-publications"&gt;
  &lt;/a&gt;
  Individual publications
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://rosenfeldmedia.com/books/a-web-for-everyone/"&gt;&lt;em&gt;A Web for Everyone&lt;/em&gt; by Sarah Horton &amp;amp; Whitney Quesenbery&lt;/a&gt;, 2014 — practical advice and examples to build accessible web products without sacrificing design or innovation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.smashingmagazine.com/inclusive-design-patterns/"&gt;&lt;em&gt;Inclusive Design Patterns — Coding Accessibility Into Web Design&lt;/em&gt; by Heydon Pickering&lt;/a&gt;, 2016 — real-world techniques and strategies to build and prototype accessible interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/641593.Meggs_History_of_Graphic_Design?ac=1&amp;amp;from_search=true"&gt;&lt;em&gt;Megg’s History of Graphic Design&lt;/em&gt; by Philip B. Meggs&lt;/a&gt;, 1983 — the unrivaled college textbook authority on the history of graphic design, mostly in America and Europe&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#independent-practice-consulting-freelancing"&gt;
  &lt;/a&gt;
  Independent practice, consulting, freelancing
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/13574985-design-is-a-job"&gt;&lt;em&gt;Design Is a Job&lt;/em&gt; by Mike Monteiro&lt;/a&gt;, 2012 — no bullshit lessons on selling yourself and working with others&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/28511400-pricing-design"&gt;&lt;em&gt;Pricing Design&lt;/em&gt; by Dan Mall&lt;/a&gt;, 2016 — brief and invaluable reference on value-based pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#process-and-mindset"&gt;
  &lt;/a&gt;
  Process and mindset
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/615570.The_Artist_s_Way"&gt;&lt;em&gt;The Artist’s Way&lt;/em&gt; by Julia Cameron&lt;/a&gt;, 1992 – classic international bestseller on the creative process&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://shapeofdesignbook.com/"&gt;&lt;em&gt;The Shape of Design&lt;/em&gt; by Frank Chimero&lt;/a&gt;, 2012 — sometimes insightful, sometimes insufferable; a rumination on making things for other people&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/25814544-sprint"&gt;&lt;em&gt;Sprint&lt;/em&gt; by Jake Knapp &amp;amp; more&lt;/a&gt;, 2016 — a balanced book of details, examples, checklists, and scripts to perform your own famed Google Ventures design sprint&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#user-experience-and-interaction-design"&gt;
  &lt;/a&gt;
  User experience and interaction design
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/17239285-microinteractions"&gt;&lt;em&gt;Microinteractions: Designing with Details&lt;/em&gt; by Dan Saffer&lt;/a&gt;, 2013 — straight-forward examples on the small details that exist inside &amp;amp; around a product’s features&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#user-research"&gt;
  &lt;/a&gt;
  User research
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/17236175-just-enough-research"&gt;&lt;em&gt;Just Enough Research&lt;/em&gt; by Erika Hall&lt;/a&gt;, 2013 — breaks down the huge topic of design research in a digestible, approachable, organized, and humorous way&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#publishers-and-distributors"&gt;
  &lt;/a&gt;
  Publishers and distributors
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://abookapart.com"&gt;A Book Apart&lt;/a&gt; — top of the class brief books for people who make websites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chroniclebooks.com"&gt;Chronicle Books&lt;/a&gt; — innovative and design-y adult and children’s books, based in San Francisco&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://draw-down.com/"&gt;Draw Down&lt;/a&gt; — large catalog of small-press books and zines on graphic design, culture, criticism, art, and more&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://usshop.gestalten.com/"&gt;Gestalten&lt;/a&gt; — high-quality books on graphic design, art, and culture&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mitpress.mit.edu/"&gt;MIT Press&lt;/a&gt; — hundreds of new books published yearly from leading researchers on technology, art, and science&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://rosenfeldmedia.com/"&gt;Rosenfeld Media&lt;/a&gt; – user experience books, training, workshops, seminars, and experts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.smashingmagazine.com/books"&gt;Smashing Magazine&lt;/a&gt; — affordable, practical books from digital design practitioners&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-features"&gt;
  &lt;/a&gt;
  Browser features
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#google-chrome-extensions-and-bookmarklets"&gt;
  &lt;/a&gt;
  Google Chrome extensions and bookmarklets
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://tachyons.io/xray/"&gt;Tachyons X-ray&lt;/a&gt; — debug &amp;amp; align objects to an 8 or 16px grid&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.typesample.com/"&gt;Type Sample&lt;/a&gt; — identify and sample webfonts — 3 samples for free, or unlimited samples for $5/year subscription. available as a bookmarklet or Chrome extension&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm?hl=en"&gt;WhatFont?&lt;/a&gt; — inspect a webfont’s name, family, weight, size, style, color, line height, and source (if hosted via Google Fonts or Typekit)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#google-chrome-devtools"&gt;
  &lt;/a&gt;
  Google Chrome DevTools
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/animations"&gt;Animation timeline &amp;amp; editing&lt;/a&gt; — powerful tools to inspect and modify CSS animations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/emulate-mobile-viewports"&gt;Device Mode&lt;/a&gt; — test responsiveness by using popular viewport sizes or creating your own presets&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes##screenshots"&gt;Full-page screenshot&lt;/a&gt; — it’s inside the Device Mode — no additional browser extension required!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/"&gt;Network performance&lt;/a&gt; — analyze resource requests and emulate mobile experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#brushes"&gt;
  &lt;/a&gt;
  Brushes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.kylebrush.com/"&gt;Kyle T. Webster&lt;/a&gt; — best Photoshop brushes for drawing and adding small texture (though they are not of much use without a pressure-sensitive tablet)&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.retrosupply.co/collections/brushes"&gt;RetroSupply&lt;/a&gt; — Photoshop and Illustrator brushes for multiple uses, including adding large (2000px) texture. recommended packs: Standard Issue Brush &amp;amp; Texture Bundle, Standard Issue Subtle Brush Kit, VectorFuzz&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.retrosupply.co/products/the-hand-lettering-toolbox?variant=22157366791"&gt;Shauna Lynn Panczyszyn’s "Hand Lettering Toolbox"&lt;/a&gt; — Photoshop brushes made exclusively for digital lettering, with &lt;a href="https://creativemarket.com/shaunaparmesan"&gt;more specific sets here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://patreon.com/sydweiler"&gt;Syd Weiler&lt;/a&gt; — gorgeous Photoshop brushes, niched mostly toward organic shapes and textures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#colors-and-color-palettes"&gt;
  &lt;/a&gt;
  Colors and color palettes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://clrs.cc/"&gt;clrs.cc&lt;/a&gt; — really pretty default colors for prototyping&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://coolors.co/app"&gt;Coolors&lt;/a&gt; — interactive color palette generator&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://material.io/color/#!/?view.left=1&amp;amp;view.right=0"&gt;Google Material design colors&lt;/a&gt; — choose from all the hues in Google’s material design palette, see a tint and shade of each, and test against white &amp;amp; black text for accessibility&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://color.adobe.com/create/color-wheel/"&gt;Kuler&lt;/a&gt; — Adobe color palette resource&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.palettable.io/"&gt;Paletteable&lt;/a&gt; — interactive color palette generator&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://sipapp.io/"&gt;Sip&lt;/a&gt; — macOS and iOS colorpicker app, allows you to save custom palettes&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Category:Shades_of_color_templates"&gt;Wikipedia’s category for color shades&lt;/a&gt; — if you wanna nerd out&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#accessible-color-palettes"&gt;
  &lt;/a&gt;
  Accessible color palettes
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://randoma11y.com/"&gt;Randoma11y&lt;/a&gt; — accessibility-friendly random color generator for text &amp;amp; background combinations&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#accessibility-testing-tools"&gt;
  &lt;/a&gt;
  Accessibility testing tools
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://colororacle.org/"&gt;Color Oracle&lt;/a&gt; — open source macOS color blindness simulator&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.paciellogroup.com/resources/contrastanalyser/"&gt;Contrast Analyzer&lt;/a&gt; — open source macOS eye-dropper tool for text/bg accessibility testing, shows fail/AA Large/AA/AAA results&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://usecontrast.com/"&gt;Contrast&lt;/a&gt; — [paid] — minimal &amp;amp; gorgeous macOS menubar eye-dropper tool, shows fail/AA Large/AA/AAA results&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hexnaw.com/"&gt;Hex Naw&lt;/a&gt; — input up to 12 hex codes to test entire color systems for accessible contrast&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://webaim.org/resources/contrastchecker/"&gt;Online contrast checker&lt;/a&gt; — input text/bg hex codes for accessible contrast testing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/spectrum/ofclemegkcmilinpcimpjkfhjfgmhieb?hl=en"&gt;Spectrum&lt;/a&gt; — Google Chrome extension to instantly test web pages for different types of color vision deficiency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#directories-and-marketplaces"&gt;
  &lt;/a&gt;
  Directories and marketplaces
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt; — hundreds of free webfonts hosted via Google or self-hosted, downloadable via &lt;a href="https://github.com/google/fonts"&gt;GitHub repo&lt;/a&gt; with individual licenses&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://myfonts.com"&gt;MyFonts&lt;/a&gt; — thousands of fonts from all kinds of foundries, includes some trial fonts &amp;amp; free families. (good for searching and testing, but it’s better to buy through the foundries themselves!)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://typekit.com/"&gt;TypeKit&lt;/a&gt; — included with Adobe CC subscription, some fonts &amp;amp; families are only available for desktop &lt;em&gt;or&lt;/em&gt; web use. larger selection available for individual purchase through Typekit Marketplace&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.typenetwork.com/"&gt;Type Network&lt;/a&gt; — incredibly high-quality fonts by select independent foundries&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youworkforthem.com/fonts/"&gt;YouWorkForThem&lt;/a&gt; — thousands of fonts in the “original creative marketplace”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#individual-foundries"&gt;
  &lt;/a&gt;
  Individual foundries
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.a2-type.co.uk/"&gt;A2 Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://avondaletypeco.com/"&gt;Avondale Type Co.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://betatype.com/"&gt;Beta Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.boldmonday.com/"&gt;Bold Monday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.colophon-foundry.org/"&gt;Colophon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://commercialtype.com/"&gt;Commercial Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.daltonmaag.com/"&gt;Dalton Maag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dstype.com/"&gt;DSType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fontbureau.typenetwork.com/"&gt;Font Bureau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fontfont.com/"&gt;FontFont&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fountaintype.com/"&gt;Fountain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.grillitype.com/"&gt;GrilliType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.typography.com/"&gt;Hoefler &amp;amp; Co.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.houseind.com/"&gt;House Industries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hvdfonts.com/"&gt;HvD Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justanotherfoundry.com/"&gt;Just Another Foundry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lineto.com/"&gt;Lineto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.marksimpson.com/"&gt;Mark Simpson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://okaytype.com/"&gt;Okay Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.p22.com/"&gt;P22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://processtypefoundry.com/fonts/"&gt;Process Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sudtipos.com/"&gt;Sudtipos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thedesignersfoundry.com"&gt;The Designer’s Foundry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.type-together.com/"&gt;TypeTogether&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typotheque.com/"&gt;Typotheque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vllg.com/"&gt;Village&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#icons-and-emoji"&gt;
  &lt;/a&gt;
  Icons and emoji
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.emojione.com/developers/"&gt;EmojiOne&lt;/a&gt; — [free &amp;amp; paid] — emoji set with free &amp;amp; premium licensing options available; downloadable as pngs, vectors, and font files&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://emojipedia.org/apple/"&gt;Emojipedia&lt;/a&gt; — [free] — every emoji, ever&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://material.io/icons/"&gt;Google Material Design icons&lt;/a&gt; — [free] — 900+ open source icons from Google’s gorgeous design language&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://thenounproject.com/"&gt;The Noun Project&lt;/a&gt; — [free &amp;amp; paid] — available for use with Creative Commons attribution or available to purchase without attribution for fair prices; best quality selection in one place&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://symbolset.com/"&gt;SymbolSet&lt;/a&gt; — [paid] — super high-quality icon fonts categorized by topic and style&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://applypixels.com/template/vector-emoji"&gt;Vector Emoji&lt;/a&gt; — [free] — iOS emoji faces recreated in vector as layered PSDs or Sketch files&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#inspiration-and-criticism-websites"&gt;
  &lt;/a&gt;
  Inspiration and criticism websites
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#brand-identity"&gt;
  &lt;/a&gt;
  Brand identity
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://bpando.org"&gt;BP &amp;amp; O&lt;/a&gt; — killer packaging and brand design gallery&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.underconsideration.com/brandnew"&gt;Brand New&lt;/a&gt; — brand identity case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://shipcom.tumblr.com"&gt;Shipcom&lt;/a&gt; — collection of shipping, manufacturing, transport, and logistics logos&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#illustration-and-art"&gt;
  &lt;/a&gt;
  Illustration and art
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.booooooom.com"&gt;Boooooooom&lt;/a&gt; — art, illustration, design, photography interviews and features&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.jackywinter.com/all-artists"&gt;Jacky Winter&lt;/a&gt; — illustration collective&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#motion"&gt;
  &lt;/a&gt;
  Motion
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vimeo.com/channels/wineaftercoffee"&gt;Wine After Coffee&lt;/a&gt; — curated channel of the best motion graphics, animation, and video&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#print-layout-packaging-art-direction"&gt;
  &lt;/a&gt;
  Print, layout, packaging, art direction
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.underconsideration.com/artofthemenu"&gt;Art of the Menu&lt;/a&gt; — restaurant-specific print menu design case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://designspiration.net"&gt;Designspiration&lt;/a&gt; — photography, print design, cool stuff gallery, Pinterest style&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.underconsideration.com/fpo"&gt;FPO&lt;/a&gt; — print design case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.grafik.net"&gt;Grafik&lt;/a&gt; — cutting-edge and old school fringe aesthetic case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.itsnicethat.com"&gt;It’s Nice That&lt;/a&gt; — creative inspiration worldwide&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://mindsparklemag.com"&gt;Mind Sparkle Mag&lt;/a&gt; — print, brand, interior, industrial design features&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.trendlist.org"&gt;Trendlist&lt;/a&gt; — graphic design trends for the designer’s designer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#typography"&gt;
  &lt;/a&gt;
  Typography
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.alphabettes.org"&gt;Alphabettes&lt;/a&gt; — commentary, research, and work showcases by women in type design&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fontsinuse.com"&gt;Fonts In Use&lt;/a&gt; — highest quality public archive of typography indexed by typeface, format, and industry&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://typographica.org"&gt;Typographica&lt;/a&gt; — reviews and commentary on type books and typefaces&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.typewolf.com"&gt;Type Wolf&lt;/a&gt; — curated examples of typography on the web with premium guides and resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#web-mobile-product"&gt;
  &lt;/a&gt;
  Web, mobile, product
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#ux-patterns-and-components"&gt;
  &lt;/a&gt;
  UX patterns and components
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://capptivate.co"&gt;Capptivate&lt;/a&gt; — mobile design patterns and components in video form&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://collectui.com"&gt;Collect UI&lt;/a&gt; — UI design components gallery populated from Dribbble posts&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://emptystat.es"&gt;Empty Stat.es&lt;/a&gt; — empty state designs&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://littlebigdetails.com"&gt;Little Big Details&lt;/a&gt; — delightful, thoughtful UX components that make a big difference&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://pttrns.com"&gt;PTTRNS&lt;/a&gt; — mobile design patterns and components&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://zurb.com/patterntap"&gt;Pattern Tap&lt;/a&gt; — website components gallery&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://uimovement.com/"&gt;UI Movement&lt;/a&gt; — UI design components gallery and newsletter, largely culled from Dribbble&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://unmatchedstyle.com"&gt;Unmatched Style&lt;/a&gt; — website design and interactive components gallery&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#visual-design"&gt;
  &lt;/a&gt;
  Visual design
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://httpster.net"&gt;HTTPSTER&lt;/a&gt; — website design gallery. sort by category and style&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.lapa.ninja/"&gt;Lapa&lt;/a&gt; — website design gallery. sort by category and color&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://onepagelove.com"&gt;One Page Love&lt;/a&gt; — website design gallery featuring only one-page websites&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.pages.xyz/"&gt;Pages.xyz&lt;/a&gt; — website design gallery for digital product marketing and ecommerce sites&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://reallygoodemails.com"&gt;Really Good Emails&lt;/a&gt; — email design gallery&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://siteinspire.com"&gt;Siteinspire&lt;/a&gt; — website design gallery with the tightest curation. sort by category, style, subject, or CMS. includes starred favorites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sitesee.co"&gt;Site See&lt;/a&gt; — website design gallery. sort by category and color. includes custom curated collections&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.webcreme.com"&gt;Web Creme&lt;/a&gt; — website design gallery, updated sporadically, online since 2005(!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#macos-apps"&gt;
  &lt;/a&gt;
  macOS apps
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://kapeli.com/dash"&gt;Dash&lt;/a&gt; — [paid] — instant offline access to 150+ API documentation sets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#font-management"&gt;
  &lt;/a&gt;
  Font management
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://rightfont.com/"&gt;RightFont&lt;/a&gt; — [paid] — preview, sync, install, and manage fonts on your Mac or Dropbox/Google Drive&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#menubar-apps"&gt;
  &lt;/a&gt;
  Menubar apps
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://dustinsenos.com/littleIpsum"&gt;LittleIpsum&lt;/a&gt; — [free] — sgenerate lorem ipsum lightning fast (can automatically wrap in &lt;code&gt;p&lt;/code&gt; tags, too)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cockos.com/licecap/"&gt;LICEcap&lt;/a&gt; — [free] — weirdest name, most straightforward and lightweight way to capture parts of your screen as a gif (also available for Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mockups"&gt;
  &lt;/a&gt;
  Mockups
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://facebook.design/handskit/"&gt;Facebook Design&lt;/a&gt; — [free] — diverse hands holding mobile devices&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://graphicburger.com/mock-ups/"&gt;Graphicburger&lt;/a&gt; — [free] — physical product mockups &amp;amp; templates&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://graphicriver.net/"&gt;GraphicRiver&lt;/a&gt; — [paid] — any product mockup you could ever think of&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.pixeden.com"&gt;Pixeden&lt;/a&gt; — [free &amp;amp; paid] — physical product mockups &amp;amp; templates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prototyping-tools"&gt;
  &lt;/a&gt;
  Prototyping tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.adobe.com/products/experience-design.html"&gt;Adobe Experience Design&lt;/a&gt; — included with Adobe CC subscription, for creating wireframes and protoyping interactivity&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://atomic.io"&gt;Atomic&lt;/a&gt; — prototyping tool for mobile or desktop interactions or animations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; — the first real-time collaborative interface design tool&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://framerjs.com"&gt;Framer&lt;/a&gt; — prototyping tool built on framer.js for prototyping mobile and desktop apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.invisionapp.com/"&gt;InVision&lt;/a&gt; — collaborative click-through prototyping tool for web and mobile&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marvelapp.com/"&gt;Marvel&lt;/a&gt; — simple click-through prototyping tool for web and mobile apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://principleformac.com/"&gt;Principle&lt;/a&gt; — motion design prototyping tool for mobile and web applications&lt;/li&gt;
&lt;li&gt;👆 &lt;a href="https://www.cooper.com/prototyping-tools"&gt;More details on these apps and the differences between them @ cooper.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stock-graphics"&gt;
  &lt;/a&gt;
  Stock graphics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://creativemarket.com/"&gt;CreativeMarket&lt;/a&gt; — huge marketplace for design assets of varying qualities (including fonts and stock photos), great for when you need to recreate a specific style or work in a particular niche&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.retrosupply.co/"&gt;RetroSupply&lt;/a&gt; — well-made and well-priced assets that skew toward retro/vintage&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youworkforthem.com/graphics/"&gt;YouWorkForThem&lt;/a&gt; — cool textures and imagery from the original online creative marketplace&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stock-photography"&gt;
  &lt;/a&gt;
  Stock photography
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://deathtothestockphoto.com/"&gt;Death to the Stock Photo&lt;/a&gt; — [free &amp;amp; paid] — new sets emailed weekly, premium plans available for more photos and unlimited access&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://gratisography.com/"&gt;Gratisography&lt;/a&gt; — [free] — photos by one photographer requiring no attribution, most are weird but some are chill to save in a folder for later since they’re free&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://magdeleine.co/browse/"&gt;Magdeline&lt;/a&gt; — [free] — similar to unsplash, some are licensed in public domain, some require Creative Commons attribution&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://masterfile.com"&gt;Masterfile&lt;/a&gt; — [paid] — stock photos, a little higher quality than iStock. registered account includes unwatermarked hi-res comps&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://stocksy.com"&gt;Stocksy&lt;/a&gt; — [paid] — high quality, stylish lifestyle paid stock photos (watermarked comps)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt; — [free] — the first of the hip and gorgeous free with no strings attached stock photo sites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.flickr.com/photos/wocintechchat/albums"&gt;Women of Color in Tech&lt;/a&gt; — [free] — photos of women in color in tech settings since every other stock photo site fails at this hardcore&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-testing-and-interactive-feedback-tools"&gt;
  &lt;/a&gt;
  User testing and interactive feedback tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://lookback.io"&gt;Lookback&lt;/a&gt; — users record their screen, face, voice, and touches while using your site/app/prototype/wireframe&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://usabilityhub.com"&gt;UsabilityHub&lt;/a&gt; — for quick 5-minute qualitative, navigation-based, or hot-spot based remote tests for static images or a series of images&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://usertesting.com"&gt;UserTesting&lt;/a&gt; — finds participants for you, runs a usability test, and records and stores videos of real people speaking their thoughts as they use your site/app/prototype/wireframe&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This list is provided by Skullface and other contributors &lt;a href="https://github.com/skullface/design-resources"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found this list helpful. If you need any help please let me know in the comment section&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>design</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to maintain your Motivation while Learning to Code </title>
      <author>Anurag Pathak</author>
      <pubDate>Thu, 19 Aug 2021 06:27:30 +0000</pubDate>
      <link>https://dev.to/anurag_pathak/how-to-maintain-your-motivation-while-learning-to-code-3f66</link>
      <guid>https://dev.to/anurag_pathak/how-to-maintain-your-motivation-while-learning-to-code-3f66</guid>
      <description>&lt;p&gt;Coding may sound overwhelming in the starting but, as you progress, you may start losing interest. &lt;br&gt;
Printing hello world in any programming language is the ultimate pleasure. but as you progress towards more complex topics of OOPs functions pointers data structures, your brain might stop responding, you may question yourself, "Is this meant for me ?", "can I do this ?", "Is this my thing ?" 😨🤯&lt;br&gt;
Let me answer some of these questions which, may help you gain some confidence and start coding as passionately as you were in the first place. 😊&lt;br&gt;
Here are some reasons why you are demotivated or losing interest in coding. 🧐🤔🤔&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You are not giving enough time and learning things way 
  too fast. If you are learning, figure out your own pace. 
  Always remember learning is more important than 
  finishing the topic. Learn to spend time with the 
  questions rather than just, trying to finish the 
  syllabus and run for numbers.🥸&lt;/li&gt;
&lt;li&gt;You are very much concerned about the future results and 
  not enjoying the process of learning.🤓&lt;/li&gt;
&lt;li&gt;If it is becoming monotonous then take a break and come 
  back stronger and motivated.💪🏻💪🏻&lt;/li&gt;
&lt;li&gt;If you still feel demotivated then, try to solve easy 
  questions, go back in time and solve questions you 
  already solved, see your achievements and feel good 
  about it that would motivate you to do more and 
  accomplish more.😉😌&lt;/li&gt;
&lt;li&gt;If you are still stuck and feel like quitting then, 
  think about the reason which you gave yourself in the 
  first place, think about why you even started coding and 
  if that reason still matters to you, then sit on the 
  chair, switch to dark mode and start typing.😎😎&lt;/li&gt;
&lt;li&gt;If you still feel like quitting then it's okay not 
  everyone should code there are various career options 
  choose that career which matches your skillset and 
  interests choosing a career is not an easy decision 
  think and discuss and at last decide and choose what 
  suits you best.😇😇&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At last, I would like to thank the community for the good work.❤️❤️&lt;br&gt;
Stay healthy, stay motivated and keep doing good work.&lt;/p&gt;

&lt;p&gt;🤩 Happy coding 🥳🥳&lt;/p&gt;

</description>
      <category>firstpost</category>
      <category>programming</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Liman MYS setup on Ubuntu 20.04</title>
      <author>mtdemircan</author>
      <pubDate>Thu, 19 Aug 2021 06:06:19 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-mys-setup-on-ubuntu-20-04-5c41</link>
      <guid>https://dev.to/aciklab/liman-mys-setup-on-ubuntu-20-04-5c41</guid>
      <description>&lt;p&gt;As of the development of the Liman MYS, it is packaged for use on the Pardus operating system. However, there is no obstacle to running it on Debian based systems.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-php-73-on-ubuntu-2004"&gt;
  &lt;/a&gt;
  Adding PHP 7.3 on Ubuntu 20.04
&lt;/h1&gt;

&lt;p&gt;With the following repository and update, PHP 7.3 version will be available on Ubuntu.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install software-properties-common
sudo add-apt-repository ppa:ondrej/php
sudo apt update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#adding-the-aciklab-repository-where-the-liman-is-located"&gt;
  &lt;/a&gt;
  Adding the Aciklab Repository where the Liman is located
&lt;/h1&gt;

&lt;p&gt;With the following two commands, it is possible to add the repository to the system and to introduce the public key of this repository to the system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "deb [arch=amd64] http://depo.aciklab.org/ onyedi main" | sudo tee /etc/apt/sources.list.d/acikdepo.list
sudo wget -qO - http://depo.aciklab.org/public.key | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#required-postgresql-version"&gt;
  &lt;/a&gt;
  Required PostgreSQL Version
&lt;/h1&gt;

&lt;p&gt;Liman MYS needs PostgreSQL 13.x version due to various corporate needs as infrastructure. Since there are no PostgreSQL 13.x packages in Ubuntu official repositories, the following repository must be added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" &amp;gt; /etc/apt/sources.list.d/pgdg.list'
sudo apt install gnupg2 ca-certificates -y
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
sudo apt update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#installing-the-liman-from-the-repository"&gt;
  &lt;/a&gt;
  Installing the Liman from the repository
&lt;/h1&gt;

&lt;p&gt;In order to install the current Liman from the repository, the following two commands are required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update
sudo apt install liman
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#creating-an-admin-password-and-entering-the-interface"&gt;
  &lt;/a&gt;
  Creating an Admin Password and entering the interface
&lt;/h1&gt;

&lt;p&gt;The first thing to do after installation is to create an Administrator password. For this, we need the following two commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo su liman
sudo php /liman/server/artisan administrator    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end of this step, you will see your username and password to log in from the Liman web interface.&lt;br&gt;
If you write the IP address of the server on which you installed the Liman on your web browser and log in with this information, you will be logged into the Web interface of the Liman.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VniX_ELQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a8trj4jpryrly5vh5sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VniX_ELQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a8trj4jpryrly5vh5sc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>liman</category>
      <category>php</category>
    </item>
    <item>
      <title>Freezing Arrays in Javascript</title>
      <author>Abd Sani</author>
      <pubDate>Thu, 19 Aug 2021 06:05:39 +0000</pubDate>
      <link>https://dev.to/sanijalal/freezing-arrays-in-javascript-22oo</link>
      <guid>https://dev.to/sanijalal/freezing-arrays-in-javascript-22oo</guid>
      <description>&lt;p&gt;This is a cool tip recently tweeted by Oliver Jumpertz:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💛 JavaScript tips 💛&lt;br&gt;&lt;br&gt;Arrays are objects. Object.freeze has an effect on them.&lt;br&gt;&lt;br&gt;This means that you can also make your arrays immutable. ↓ &lt;a href="https://t.co/9stpcnRX8k"&gt;pic.twitter.com/9stpcnRX8k&lt;/a&gt;&lt;/p&gt;— Oliver Jumpertz (&lt;a class="mentioned-user" href="https://dev.to/oliverjumpertz"&gt;@oliverjumpertz&lt;/a&gt;
) &lt;a href="https://twitter.com/oliverjumpertz/status/1428050011078680582?ref_src=twsrc%5Etfw"&gt;August 18, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Having never used this in my code, I decided to give it a try and see what happens if I try to push an already frozen array.&lt;/p&gt;

&lt;p&gt;So this is what I wrote in my Javascript file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var desserts = ['chocolate', 'muffin', 'ice-cream']
console.log(desserts)
console.log(desserts.length)
desserts.push('brownie')
console.log(desserts)
console.log(desserts.length)

Object.freeze(desserts)

desserts.push('popsicle')
console.log(desserts)
console.log(desserts.length)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is the outcome:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ 'chocolate', 'muffin', 'ice-cream' ]
3
[ 'chocolate', 'muffin', 'ice-cream', 'brownie' ]
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And once you freeze it, you will get a runtime TypeError:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;desserts.push('popsicle')
         ^

TypeError: Cannot add property 4, object is not extensible
    at Array.push (&amp;lt;anonymous&amp;gt;)
    at Object.&amp;lt;anonymous&amp;gt; (C:\repo\blog\js-freeze-array\freeze.js:10:10)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's good to know, no?&lt;/p&gt;

&lt;p&gt;Oh and if you haven't, please follow &lt;a href="https://twitter.com/oliverjumpertz/status/1428050011078680582"&gt;Oliver on twitter.&lt;/a&gt; He shares a lot of tips like this.&lt;/p&gt;

&lt;p&gt;Cover image by: &lt;a href="https://pixabay.com/illustrations/christmas-background-landscape-4701783/"&gt;https://pixabay.com/illustrations/christmas-background-landscape-4701783/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Make Money As A Developer By Selling APIs</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 19 Aug 2021 06:02:58 +0000</pubDate>
      <link>https://dev.to/codeloungedev/make-money-as-a-developer-by-selling-apis-251f</link>
      <guid>https://dev.to/codeloungedev/make-money-as-a-developer-by-selling-apis-251f</guid>
      <description>&lt;p&gt;Do you know you can make money by selling your APIs? Building and selling APIs is a great way to create a new source of passive income.&lt;/p&gt;

&lt;p&gt;Thus, in this article, you will see how to do that! First, you will create an API from scratch, and then you will sell it on &lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;RapidAPI&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-an-api"&gt;
  &lt;/a&gt;
  What's an API?
&lt;/h2&gt;

&lt;p&gt;Let's start by refreshing our memory on what an API is. The acronym &lt;strong&gt;API&lt;/strong&gt; stands for Application Programming Interface, and it's a way for two computer programs to communicate between them.&lt;/p&gt;

&lt;p&gt;In simple terms, it's a piece of software offering its services to other programs through a pre-defined set of functions. The other programs do not need to know about the API implementation because the functions describe how the API can be used. You communicate with APIs through requests, and there are four types of requests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt; requests - Get all the information&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt; requests - Create new data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT&lt;/code&gt; requests - Update existing data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE&lt;/code&gt; requests - Delete data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The API exposes different endpoints that are URLs to which you can make any of the four requests. &lt;/p&gt;

&lt;p&gt;Whenever you access a webpage on the internet, you are most likely interacting with an API. For example, when you access the newsfeed of a social media platform, you make a GET request to that platform's API to get the people's posts. Or, when you check your email or weather application on your phone, you interact with an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A real-world analogy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's look at a real-world analogy by taking a flower shop as an example.&lt;/p&gt;

&lt;p&gt;You go to the flower shop to buy some flowers. You enter the shop and ask the florist for a custom bouquet. The florist has a list of all the flowers and decorations you can use. You choose the flowers, the decorations, and then you make an order. The florist prepares the custom bouquet you asked for, and once it's ready, it brings it to you. You buy the bouquet and leave the shop.&lt;/p&gt;

&lt;p&gt;Thus, you (&lt;strong&gt;client&lt;/strong&gt;) made a &lt;strong&gt;request&lt;/strong&gt; to the florist (&lt;strong&gt;API&lt;/strong&gt;) with custom &lt;strong&gt;data&lt;/strong&gt;. The florist went to the flower shop atelier (&lt;strong&gt;server/database&lt;/strong&gt;) and brought your bouquet back (&lt;strong&gt;API response&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why APIs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The use of APIs speeds up the development time and process. It also simplifies the work of developers since they can use ready-made solutions. There is no need to re-invent the wheel and spend time building something that already exists.&lt;/p&gt;

&lt;p&gt;Let's take as an example Google Maps, which developers can embed in applications and websites. Rather than building a map each time you need one, you can simply use the one provided by Google. Can you see how much time and resources you save this way?&lt;/p&gt;

&lt;p&gt;Additionally, it opens ways to monetize your work. You can create an API and monetize its usage. For instance, the first 1000 requests might be free each month. However, after that, you can charge a sum like $0.001 for each additional request.&lt;/p&gt;

&lt;p&gt;Thus, by using APIs, you can save time, resources and also monetize your work!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-can-you-sell-the-api"&gt;
  &lt;/a&gt;
  How can you sell the API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;RapidAPI&lt;/a&gt; is the largest hub for APIs on the internet, so we will use it to monetize our API! What makes RapidAPI different is that they allow developers to sell access to their API. Thus, you can turn your APIs into a revenue stream and even turn them into passive income.&lt;/p&gt;

&lt;p&gt;Additionally, their platform allows developers to discover and consume existing APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does that mean?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You can use the RapidAPI platform to find and use APIs from all categories. For example, they have Translation, Flight Data, Text to Speech APIs and more. Thus, you can find any API you need for your application.&lt;/p&gt;

&lt;p&gt;Moreover, you can use multiple APIs without having to worry about different SDKs and API Keys. With RapidAPI, you can use multiple APIs with &lt;strong&gt;one&lt;/strong&gt; SDK, API Key and dashboard, all in one place!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udfebkEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627801868179/PDuO2G5Py.png" alt="Screenshot of RapidAPI webpage"&gt;&lt;/a&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, there is more! Using their platform, you can also &lt;strong&gt;add your APIs and sell access to them through pricing tiers&lt;/strong&gt;. RapidAPI created the infrastructure for you to monetize your API. You do not need to worry about doing any additional work to sell your API. You can simply upload your API, configure the tiers and let developers use it.&lt;/p&gt;

&lt;p&gt;In figure 2 below, you can see an example of Imgur, the online image hosting service, monetizing its API. They have four plans, each with its associated price. You can also see the extra charges for any additional requests and uploads.&lt;/p&gt;

&lt;p&gt;Thus, people can choose the plan suited to their needs and start using it. This way, you can transform your APIs into a source of a passive income!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZQ20C8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627803110670/iEev2ImWR.png" alt="Screenshot of Imgur selling their API on RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The best thing about RapidAPI is that anyone can sell their APIs. You do not need to be a corporation, a popular developer or anything like that. Anyone can do it!&lt;/p&gt;

&lt;p&gt;Thus, let's see how one can sell their API!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-and-deploy-the-api"&gt;
  &lt;/a&gt;
  Build and deploy the API
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to skip straight to the monetization part, you can do it &lt;a href="#setup-api-on-rapidapi"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, you will build a very simple application with Node.js and Express. The purpose of this article is to show how you can monetize your API, so you will create a dummy API with only one endpoint.&lt;/p&gt;

&lt;p&gt;For this example, you will use the Express application generator, which creates an application skeleton. To start the generator, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator rapidapi-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application only exposes one endpoint &lt;code&gt;/users&lt;/code&gt;, which returns a list of people with fake details. Thus, developers can use this simple API to test their applications with fake data before making it available to the public.&lt;/p&gt;

&lt;p&gt;Let's start by modifying the skeleton application. &lt;/p&gt;

&lt;p&gt;Open the project &lt;code&gt;rapidapi-example&lt;/code&gt;. After it opened, go to the &lt;code&gt;views&lt;/code&gt; folder and open &lt;code&gt;index.jade&lt;/code&gt;. Replace the content with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extends layout

block content
  h1= title
  p Welcome to #{title}
  p See the available list of 
    a(href='/users') users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create a folder in the root directory. The new folder will contain the JSON file with the fake users. Thus, you can create the new folder and the file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir data
touch data/users.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open the &lt;code&gt;users.js&lt;/code&gt; file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;melissa.fleming@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0740-304-475&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3655 manchester road&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;winchester&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;berkshire&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YB2 8EJ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;melissa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fleming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;christoffer.christiansen@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;05761325&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3391 pilevangen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;overby lyng&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;danmark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;88520&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;christoffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;christiansen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you create an array of persons and then export it. The reason for doing it is so you can import the data into your API.&lt;/p&gt;

&lt;p&gt;Thus, let's import the data into the API. First, go to the &lt;code&gt;routes&lt;/code&gt; folder and open the file &lt;code&gt;users.js&lt;/code&gt;. After that, import the array of persons by adding the following line under the &lt;code&gt;var router&lt;/code&gt; line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, replace the line &lt;code&gt;res.send('respond with a resource');&lt;/code&gt; with the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when people access the endpoint &lt;code&gt;/users&lt;/code&gt;, they get back the array of people in JSON format.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; in the terminal from the project's root directory to start and test the application. Then, after the application starts, go to &lt;code&gt;localhost:3000/users&lt;/code&gt; to test it!&lt;/p&gt;

&lt;p&gt;Figure 3 below illustrates what you should see!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoFGG1NV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627818881266/sMzp6u0wb.png" alt="Screenshot of the API"&gt;&lt;/a&gt;&lt;em&gt;Figure 3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The final file, &lt;code&gt;users.js&lt;/code&gt;, should look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* GET users listing. */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the API has only one endpoint that returns an array of people with fake details. Therefore, before publishing the API on RapidAPI, you need to deploy it on a hosting service.&lt;/p&gt;

&lt;p&gt;You can see my repository on &lt;a href="https://github.com/catalinpit/rapidapi-example"&gt;Github&lt;/a&gt; for reference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-api"&gt;
  &lt;/a&gt;
  Deploy the API
&lt;/h3&gt;

&lt;p&gt;There are many platforms where you can deploy Node.js applications, but you will see how to deploy on Heroku in this tutorial.&lt;/p&gt;

&lt;p&gt;The article shows a high-level overview of deploying to Heroku. If you want an in-depth guide, I recommend checking the &lt;a href="https://devcenter.heroku.com/articles/git"&gt;official documentation&lt;/a&gt;. With that being said, let’s quickly deploy the newly created application!&lt;/p&gt;

&lt;p&gt;The first step is to log into Heroku and go to the &lt;a href="https://dashboard.heroku.com/apps"&gt;dashboard&lt;/a&gt;. From the dashboard, click on the button saying “New” and select “Create new app”. Figure 4 illustrates what you should see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqtygRFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627907757681/qawxUYKdr.png" alt="Heroku App Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 4&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next step is to choose the &lt;strong&gt;app name&lt;/strong&gt; and the &lt;strong&gt;region&lt;/strong&gt; for your application. You can use the same details from figure 5 below, or you can use custom ones. Once you finish entering the details, click on the “Create app” button, as shown in figure 5.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ0OdmlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627909361008/a8IMZAEMa.png" alt="Create Heroku Deployment"&gt;&lt;/a&gt;&lt;em&gt;Figure 5&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After clicking on the “Create app” button, you are taken to a new page where you can find the deployment details. You can deploy your application using the Heroku CLI or Github. Choose the method that fits your needs.&lt;/p&gt;

&lt;p&gt;However, in this tutorial, you will see how to deploy to Heroku using Github. On the "deploy" page, choose the "Github" method for deployment. After that, search for the repository name, and once you find it, click on the "Connect" button.&lt;/p&gt;

&lt;p&gt;See figure 6 for reference!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kz4uuvKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627909818278/0BHesP2s3.png" alt="How to find your Github repository on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 6&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before going further and deploying the application, you need to choose the buildpack for the API. A buildpack is a script Heroku runs when your application is deployed. It's used to configure your app environment and install the dependencies needed by the application. Since the API is built with Node.js, you will need to install the &lt;code&gt;Node.js&lt;/code&gt; buildpack.&lt;/p&gt;

&lt;p&gt;As shown in figure 7, go to the settings page and scroll until you see the "Buildpacks" section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gnoCcL-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627910465542/zRBIaV-oA.png" alt="The settings page on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 7&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figure 8 illustrates what you should see when you scroll down the page. Now click on the "Add buildpack" button, as shown in figure 8 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWsZ29Iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627918692972/cBEqReKnS.png" alt="Add buildpack button on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 8&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you click on the "Add buildpack" button, a new window appears from where you can select Node.js - see figure 9 below for reference. Click on it and then click on "Save changes".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FZzURVX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627919692811/5ZC5qaCSL.png" alt="Select buildpack on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 9&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, you are ready to deploy the application on Heroku. First of all, go back to the "deploy" section. If you cannot find it, it's the third option in figure 7.&lt;/p&gt;

&lt;p&gt;Once you are there, scroll to the bottom of the page to see the section "Manual deploy". At this point, you should see a button saying "Deploy Branch" to deploy your application. See figure 10 for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBeBWO6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628174361784/OYUTQocS_.png" alt="Deploy on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 10&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the button triggers the deployment, which should be done in a couple of seconds or minutes. Once the application is deployed, you should see a success message, as shown in figure 11.&lt;/p&gt;

&lt;p&gt;You can open the API in your browser by clicking on the "View" button!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ea5EPvMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627922288323/4xJXdngx81.png" alt="Heroku App Deployment Notification"&gt;&lt;/a&gt;&lt;em&gt;Figure 11&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, you are ready to publish and sell your API on the RapidAPI platform. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setup-api-on-rapidapi"&gt;
  &lt;/a&gt;
  Setup API on RapidAPI
&lt;/h2&gt;

&lt;p&gt;In this section, you will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a RapidAPI account&lt;/li&gt;
&lt;li&gt;upload the API to the platform&lt;/li&gt;
&lt;li&gt;set the pricing tiers&lt;/li&gt;
&lt;li&gt;release the API to the public&lt;/li&gt;
&lt;li&gt;wait for passive income&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, let's start with the first step, which is about creating a RapidAPI account. To create an account, go to the &lt;a href="https://rapidapi.com/auth/sign-up?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;RapidAPI Hub&lt;/a&gt; and sign up with your preferred method. &lt;/p&gt;

&lt;p&gt;Follow the instructions, and once you signed up successfully, you should see the RapidAPI Hub homepage, as shown in figure 12.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rT7QqTUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628086661930/lQdz9Lncr.png" alt="RapidAPI Hub Homepage"&gt;&lt;/a&gt;&lt;em&gt;Figure 12&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the homepage, you should see an option called &lt;strong&gt;My APIs&lt;/strong&gt; (highlighted in figure 12). Click on it, and it will take you to a new page where you can add your API.&lt;/p&gt;

&lt;p&gt;At this point, you should be on the same page as the one in figure 13 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ravhrq3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628087204038/KUY_odOvT.png" alt="RapidAPI Hub Add API"&gt;&lt;/a&gt;&lt;em&gt;Figure 13&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once on this page, click on the button saying &lt;strong&gt;Add New API&lt;/strong&gt;, which is highlighted in figure 13. The next step is to enter the details about your API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;API Name&lt;/strong&gt; - name your API&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Short Description&lt;/strong&gt; - describe what your API does, so people know its purpose&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Category&lt;/strong&gt; - select a category for the API&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How to specify the API&lt;/strong&gt; - you can select any option from those five options. However, in this tutorial, you will see the &lt;strong&gt;UI&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you enter all the details, click on the blue button saying &lt;strong&gt;Add API&lt;/strong&gt;. Clicking on the button takes you to the API dashboard, as shown in figure 14 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNWXPe9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628088961364/xi2D9_6f3.png" alt="RapidAPI API Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 14&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The last steps of the process are to &lt;strong&gt;enter your base API URL&lt;/strong&gt;, &lt;strong&gt;add the endpoints&lt;/strong&gt;, and &lt;strong&gt;define the pricing tiers&lt;/strong&gt;. Thus, click on the second step, which is highlighted in figure 14 above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-the-base-url"&gt;
  &lt;/a&gt;
  Add the base URL
&lt;/h4&gt;

&lt;p&gt;The next step is to add the base URL for your API. The base URL is your API's "homepage". For example, the base URL for the API built in this tutorial is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://rapidapi-example.herokuapp.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason why you need to add the base URL is that you will have various endpoints. Then, you will need to configure each endpoint individually in RapidAPI. For instance, the only endpoint for this API is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://rapidapi-example.herokuapp.com/users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving forward, add the base URL by clicking on the &lt;strong&gt;Configure&lt;/strong&gt; button, as shown in figure 15.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghockrUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628089296179/YI4seYVfB.png" alt="RapidAPI Add Base URL for API"&gt;&lt;/a&gt;&lt;em&gt;Figure 15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After clicking on the button, a new pop-up appears where you can enter the URL. Enter it and then save it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F633MRtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628089361247/3z-FwA9kF.png" alt="Add Base URL for API"&gt;&lt;/a&gt;&lt;em&gt;Figure 16&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figure 17 illustrate what you should see on the screen. Now that you have the base URL set, you need to configure each endpoint individually. Click on the &lt;strong&gt;Endpoints&lt;/strong&gt; option, as shown in figure 17.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouFVpwtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628170587291/An1xMSyXN.png" alt="Create API endpoints"&gt;&lt;/a&gt;&lt;em&gt;Figure 17&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configure-the-rest-endpoint"&gt;
  &lt;/a&gt;
  Configure the REST endpoint
&lt;/h4&gt;

&lt;p&gt;On the new page, you can add either a REST endpoint or a GraphQL one. Since we have a REST API, click on the option &lt;strong&gt;Create REST Endpoint&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsWWiE4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628088298828/LvQPTesi6.png" alt="RapidAPI API Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 18&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next step is to configure the following for your endpoint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a name&lt;/li&gt;
&lt;li&gt;a description&lt;/li&gt;
&lt;li&gt;the HTTP method and the endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figure 19 illustrates the details for the &lt;code&gt;/users&lt;/code&gt; endpoint. Observe how you only need to specify the endpoint &lt;code&gt;/users&lt;/code&gt; rather than entering the whole URL. The reason why this works is because you set the base URL previously.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOhA7nVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628090416260/okp6hqkYv.png" alt="Configure the API endpoint"&gt;&lt;/a&gt;&lt;em&gt;Figure 19&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, you can test your endpoint. Save the endpoint by clicking on any of the buttons highlighted in figure 20.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYY7RRcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628091519787/6nMz3XGPo.png" alt="Test API endpoint in RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 20&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After saving the endpoint, the button &lt;strong&gt;Save To Test Endpoint&lt;/strong&gt; transforms to &lt;strong&gt;Test Endpoint&lt;/strong&gt;. Click on it to test and see if the endpoint returns the correct data.&lt;/p&gt;

&lt;p&gt;In figure 21, you can see a successful endpoint test - it returned the array of users. &lt;/p&gt;

&lt;p&gt;From here, you can set an example response to display on the API's page. The purpose of this example response is to help developers understand what kind of response they should get for an endpoint.&lt;/p&gt;

&lt;p&gt;To create an example response, click on the button saying &lt;strong&gt;Create example from response&lt;/strong&gt;. That's all you have to do!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTQa5YMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628093295369/9zA6SMvAw.png" alt="Test API endpoint in RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 21&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now you can save the endpoint and move onto the next step, which is about setting the pricing tiers. Yes, you are going to see the monetization part in this next step!&lt;/p&gt;

&lt;p&gt;To do that, click on the &lt;strong&gt;Plans &amp;amp; Pricing&lt;/strong&gt; option, as shown in figure 22.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90m6YlpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094074680/CGbck-b1R.png" alt="RapidAPI Plans &amp;amp; Pricing"&gt;&lt;/a&gt;&lt;em&gt;Figure 22&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-the-api"&gt;
  &lt;/a&gt;
  Pricing the API
&lt;/h3&gt;

&lt;p&gt;For in-depth information about pricing plans, check the &lt;a href="https://docs.rapidapi.com/docs/pricing-your-api-1?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;official guide&lt;/a&gt; from RapidAPI. It teaches you about advanced options such as custom quotas, rate limiting, and private subscription plans.&lt;/p&gt;

&lt;p&gt;In this article, you price the API based on the number of requests made by users. In figure 23, you can see the pricing page on RapidAPI. From here, you can monetize your API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VloP4OcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094627916/8S4hz5Iwu.png" alt="Plans and pricing RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 23&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's start with the "BASIC" plan, which is the free plan. To configure the tier, click on the "Edit" button. Once you click on the edit button, a new page opens. On this page, you can configure your pricing tier as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Object Name&lt;/strong&gt; - here, you select based on what you want to charge the users. For instance, with this API, you charge people based on the number of requests they make.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quota Type&lt;/strong&gt; - quota type specifies the type of quota for users - that is, how many requests are free each day/month.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quota Limit&lt;/strong&gt; - with quota limit, you specify how many requests are free. In this example, people can make 500 free requests each day.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limit Type&lt;/strong&gt; - here, you have a hard and soft limit. A hard limit means the users cannot make any additional requests after exceeding their quota limit. On the other hand, a soft limit means users will pay a specific fee after exceeding their quota limit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nV47Si_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094967761/rIQV_Lz8o.png" alt="Configure the free tier of the API"&gt;&lt;/a&gt;&lt;em&gt;Figure 24&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this example, the free tier for the API will have 500 free requests each day. If the users exceed the quota limit, they will not be able to make any more requests.&lt;/p&gt;

&lt;p&gt;Figure 25 illustrates the configuration for this pricing tier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VBg1b1xN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094986575/LQtSs-Izu.png" alt="RapidAPI Provider Dashboard Setting the Pricing"&gt;&lt;/a&gt;&lt;em&gt;Figure 25&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similarly, let's add some paid plans as well. After all, we are here to make money, right? Click on the "Add Plan" button under the "pro" section, as shown in figure 26.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGuFSDkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628096295479/1EBBHtAYj1.png" alt="RapidAPI Provider Dashboard Public and Private Plans"&gt;&lt;/a&gt;&lt;em&gt;Figure 26&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A new page opens, where you can add the usual details about the tier. For the object name, select "Requests" again because you want to charge based on the number of requests made by users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMjjjLnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628096801895/VI87VOuJT.png" alt="Setting the Pro Plan in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 27&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After that, enter the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Quota Type&lt;/strong&gt; - choose the monthly quota type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quota Limit&lt;/strong&gt; - enter 10000, so you allow people to make 10000 free requests each month.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limit Type&lt;/strong&gt; - choose a soft limit for this endpoint and then charge $0.01 for any additional request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See figure 28 for reference. Now you are done with the pro plan as well. Before it takes effect, you need to scroll down at the bottom of the page and save it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtzfX5OC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628096812531/8xGwbEqB2.png" alt="Setting the Pro Plan in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 28&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you save the plan, you can go back to the pricing dashboard and see the configured tiers. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3o3cAWKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628098112732/efj1XwHZK.png" alt="Plans Preview in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 29&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you can click on the "Preview" button, highlighted in figure 29, to see the plans in more detail. See figure 30 for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4TsJHp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628098357208/m9qkfmF-M.png" alt="Plans Preview in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 30&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Configuring the other two tiers - &lt;strong&gt;Ultra&lt;/strong&gt; and &lt;strong&gt;Mega&lt;/strong&gt; - is similar to the two plans you already set up. Thus, as an exercise, create those two tiers yourself!&lt;/p&gt;

&lt;p&gt;The next and last step is to make the API public, so other developers can use it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publish-the-api"&gt;
  &lt;/a&gt;
  Publish the API
&lt;/h3&gt;

&lt;p&gt;Before anyone can use your API and pay for it, you need to make it available to the public. Thus, go to the &lt;strong&gt;Global Settings&lt;/strong&gt;, as shown in figure 31.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uaZwIBmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628176079324/ofCHNfIW4.png" alt="API Global Settings"&gt;&lt;/a&gt;&lt;em&gt;Figure 31&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you are there, switch the API visibility to "public". To do that, click on the switch highlighted in figure 31.&lt;/p&gt;

&lt;p&gt;After clicking on the switch, a new pop-up appears, which tells you that you are about to make your API public. Lastly, click on the blue button saying "Make API public", and you are done!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZYUhKx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628175907325/doiHnpmS6.png" alt="Publish API on RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 32&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, you should see your API in the RapidAPI Hub. That means the API is public, and other developers can use it in their applications.&lt;/p&gt;

&lt;p&gt;Figure 33 illustrates the example API from this tutorial on the RapidAPI hub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wejm8eMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628175652124/Ls8Gzh4jN.png" alt="Making an API public on RapidAPi"&gt;&lt;/a&gt;&lt;em&gt;Figure 33&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Well done for selling your first API! In this article, you learnt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what an API is&lt;/li&gt;
&lt;li&gt;how to build and deploy a simple API&lt;/li&gt;
&lt;li&gt;how to sell access to it on RapidAPI hub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there is a lot of potential in selling your APIs. You can turn your API into a new stream of income, and it can even be passive. You build the API once and sell it and then sell it multiple times.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TvRe8NLbF30"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Article originally published on &lt;a href="https://catalins.tech"&gt;catalins.tech&lt;/a&gt; - &lt;a href="https://catalins.tech/make-money-as-a-developer-by-selling-apis"&gt;how to make money as a developer by selling APIs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
