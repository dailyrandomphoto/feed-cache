<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Clever CSS for responsive design</title>
      <author>·ſ</author>
      <pubDate>Tue, 09 Nov 2021 21:00:41 +0000</pubDate>
      <link>https://dev.to/jmau111/clever-css-for-responsive-design-47ke</link>
      <guid>https://dev.to/jmau111/clever-css-for-responsive-design-47ke</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/jmau111/very-weird-trip-css-1g15"&gt;CSS is weird&lt;/a&gt;. It's neither a programming language nor a design program such as Photoshop. It can be tedious and time-consuming if you're not a front-end ninja, especially the responsive part.&lt;/p&gt;

&lt;p&gt;Many devs won't spend their time doing clumsy CSS to get mediocre results. I don't blame them at all. It's a pragmatic choice.&lt;/p&gt;

&lt;p&gt;I was looking for new techniques to improve my CSS skills, especially media queries. Many blog posts recommend not using them anymore when it's possible.&lt;/p&gt;

&lt;p&gt;For now, I can't do what I want without using a few of them, but I found a technique that reduces the number of media queries drastically. It leverages the benefits of CSS variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--rwd-factor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--rwd-factor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use it like this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2.5rem&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--scale&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can easily style for various screen sizes by using a common factor while keeping the CSS stylesheet pretty light.&lt;/p&gt;

&lt;p&gt;I learned it from &lt;a href="https://victoria.dev/blog/responsive-pages-and-color-themes-with-minimal-css/"&gt;this blog post&lt;/a&gt;. Of course, it's not the only possible approach, but I found it efficient.&lt;/p&gt;

&lt;p&gt;You won't achieve the highest level of accuracy, but it just works.&lt;/p&gt;

</description>
      <category>css</category>
      <category>responsive</category>
      <category>variables</category>
    </item>
    <item>
      <title>TUTORIAL: Send An Automated SMS Message When Registering A New User</title>
      <author>Backendless</author>
      <pubDate>Tue, 09 Nov 2021 19:53:18 +0000</pubDate>
      <link>https://dev.to/backendless/tutorial-send-an-automated-sms-message-when-registering-a-new-user-p6d</link>
      <guid>https://dev.to/backendless/tutorial-send-an-automated-sms-message-when-registering-a-new-user-p6d</guid>
      <description>&lt;p&gt;Automated SMS messages are a great way to help onboard users to your app. In this article, we show how easy it is to send an SMS message upon a new user registration using &lt;a href="https://backendless.com/integrate-backendless-with-3000-web-apps-using-zapier/"&gt;Backendless' Zapier integration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SMS, or text messaging, is one of the most effective ways to engage your users. It is also a great way to create two-factor authentication (2FA) to prevent bots and malicious actors from spamming your registration process.&lt;/p&gt;

&lt;p&gt;Backendless is incredibly feature rich, but no platform can cover every niche use case. That’s why we have a Zapier integration, allowing you to access thousands of third-party tools and quickly integrate them into your Backendless app.&lt;/p&gt;

&lt;p&gt;Zapier can connect you with a variety of automation tools. These tools make it easy to automate time-consuming and time sensitive processes, like messages sent after every user registration.&lt;/p&gt;

&lt;p&gt;In this demo, we will create an application that will implement the function of sending SMS to a specific phone number every time a new user registers in the app. This foundation will prepare you for applying automated SMS functionality in a variety of useful ways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backendless-setup"&gt;
  &lt;/a&gt;
  Backendless Setup
&lt;/h2&gt;

&lt;p&gt;First, let’s set up our &lt;a href="https://backendless.com/"&gt;Backendless&lt;/a&gt; database and a simple registration form in UI Builder.&lt;/p&gt;

&lt;p&gt;To store data about registered users, we will use the Backendless &lt;code&gt;Users&lt;/code&gt; system table. This table is created automatically when you create a new app. In this table, we will use two fields: &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOFqFMqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/01-Users-system-table-in-Backendless.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOFqFMqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/01-Users-system-table-in-Backendless.jpg" alt="Users system table in Backendless" width="611" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For simplicity, our user interface will consist of two input elements and a “Register” button. You may add additional fields, such as first/last name, username, password confirmation, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_1j1tTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/02a-Registration-form-in-Backendless-UI-Builder.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_1j1tTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/02a-Registration-form-in-Backendless-UI-Builder.jpg" alt="Registration form in Backendless UI Builder" width="472" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about setting up your own user registration page, watch the video below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ZVNZk91BE4U"&gt;Programming User Registration in UI Builder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back to our demo, when you click on the “Register” button, data is recorded from the form elements in the “Users” table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmS6q3lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/03a-User-registration-Codeless-logic-highlighting-form-elements-scaled.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmS6q3lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/03a-User-registration-Codeless-logic-highlighting-form-elements-scaled.jpg" alt="User registration Codeless logic highlighting form elements" width="880" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Registration of a new user will be a signal (trigger) for Zapier to take action. On this signal, Zapier will receive data about the new user and transfer it to the “ClickSend SMS” application for sending SMS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zapier-setup"&gt;
  &lt;/a&gt;
  Zapier Setup
&lt;/h2&gt;

&lt;p&gt;Next, let’s set up the Zapier side of the equation. If you don’t have an account with &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt;, you will first need to register and log into your Zapier account. A free account is all you will need for this demo.&lt;/p&gt;

&lt;p&gt;Creating the automation with Zapier will consist of two steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;The first step is to define a Trigger (when Zapier needs to start performing an action). In our case, registering a new user will act as a trigger.&lt;/p&gt;

&lt;p&gt;Click on the button “Create Zap”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3IAdF3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/04-Create-new-Zap-in-Zapier-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3IAdF3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/04-Create-new-Zap-in-Zapier-1.jpg" alt="Create new Zap in Zapier" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the “App Event” field, select Backendless.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WrwgwyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/05-Select-Backendless-in-the-App-Event-field-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrwgwyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/05-Select-Backendless-in-the-App-Event-field-in-Zapier.jpg" alt="Select Backendless in the App Event field in Zapier" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the “Trigger Event” drop-down list, select “User Registered” and click the “Continue” button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xtV6RE2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/06-Select-User-Registered-as-trigger-event-in-Backendless.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtV6RE2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/06-Select-User-Registered-as-trigger-event-in-Backendless.jpg" alt="Select User Registered as trigger event in Backendless" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will need to enter your credentials with which you log into Backendless Console and click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfXo_xYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07-Add-Backendless-credentials-in-Zapier-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfXo_xYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07-Add-Backendless-credentials-in-Zapier-1.jpg" alt="Add Backendless credentials in Zapier" width="766" height="701"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you used a social account to register with Backendless, you will need to add a password for your account. To add a password, visit your User Profile:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ecTtw3gP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07a-Add-Password-in-Backendless.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecTtw3gP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07a-Add-Password-in-Backendless.png" alt="Add Password in Backendless" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the trigger settings, select the name of your Backendless app and click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSIYP6yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/08-Select-Backendless-app-for-trigger-setup-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSIYP6yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/08-Select-Backendless-app-for-trigger-setup-in-Zapier.jpg" alt="Select Backendless app for trigger setup in Zapier" width="880" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to test our trigger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFID3f5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/09-Test-trigger-in-Zapier-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFID3f5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/09-Test-trigger-in-Zapier-1.jpg" alt="Test trigger in Zapier" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the test is successful, an object with data about the registered user will be displayed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zb40j5N_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/10-Zapier-trigger-test-response-from-Backendless-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zb40j5N_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/10-Zapier-trigger-test-response-from-Backendless-1.jpg" alt="Zapier trigger test response from Backendless" width="880" height="752"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;In the second step, we will tell Zapier what action should be performed after the trigger is fired.&lt;/p&gt;

&lt;p&gt;Select the “ClickSend SMS” application from the drop-down list and select “Send SMS” from the “Action Event” list. Click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5j5y1d8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/11-Select-ClickSend-SMS-app-and-Send-SMS-action-event-in-Zapier-768x425.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5j5y1d8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/11-Select-ClickSend-SMS-app-and-Send-SMS-action-event-in-Zapier-768x425.jpg" alt="Select ClickSend SMS app and Send SMS action event in Zapier" width="768" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will need to enter your credentials with which you log into “ClickSend SMS” APP and click the continue button (if necessary, register for an account at &lt;a href="https://www.clicksend.com/"&gt;ClickSend SMS&lt;/a&gt;; you can start with a free trial).&lt;/p&gt;

&lt;p&gt;Configure the action as shown below. For this demo, we will set the action up to message ourselves that a new user has registered.&lt;/p&gt;

&lt;p&gt;The “To” field should contain the phone number to which SMS will be sent. The “Message” field should contain the message text. If necessary, you can fill in the optional fields. Click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-Gmrp2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/12-Configure-SMS-to-phone-number-and-message-fields-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-Gmrp2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/12-Configure-SMS-to-phone-number-and-message-fields-in-Zapier.jpg" alt="Configure SMS to phone number and message fields in Zapier" width="760" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we’ll test once again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wY5_eQZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/13-Test-Send-SMS-to-ClickSend-SMS-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wY5_eQZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/13-Test-Send-SMS-to-ClickSend-SMS-in-Zapier.jpg" alt="Test Send SMS to ClickSend SMS in Zapier" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we pass the test successfully, you will receive an SMS on your phone with the text displayed in the “Body”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dep_44j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/14-Successful-ClickSend-SMS-test-in-Zapier.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dep_44j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/14-Successful-ClickSend-SMS-test-in-Zapier.jpg" alt="Successful ClickSend SMS test in Zapier" width="880" height="725"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the “Turn on Zap” button and you’re ready to go! Zapier is now up and running.&lt;/p&gt;

&lt;p&gt;Be sure to check out our other Zapier demo articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://backendless.com/create-language-translator-with-zapier/"&gt;Creating a language translator using Zapier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More coming soon!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, and as always, Happy Codeless Coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Understanding APIs</title>
      <author>Zackius</author>
      <pubDate>Tue, 09 Nov 2021 19:42:11 +0000</pubDate>
      <link>https://dev.to/zackius/understanding-apis-23oi</link>
      <guid>https://dev.to/zackius/understanding-apis-23oi</guid>
      <description>&lt;p&gt;What’s an API?&lt;br&gt;
If you’ve interacted with tech/web magazines or blogs, you might at one time have seen the word API and wondered what it means and what its purpose is on the web. API is an acronym that is used in software development to stand for Application Programming Interface. An API refers to a set of tasks that provide applications with access to data and allows other applications to interact with other software components. &lt;br&gt;
In simpler terms, an API receives and delivers a user command to a system and sends the response form the system to the user. On your music play app on your phone, when you touch the play button on the screen, APIs receive that command and in turn play the music you want as response. &lt;br&gt;
For an API to be functional there are three things that need to be present and functional. &lt;br&gt;
Application: this refers to a program that is created to perform a certain task other than being compatible with the computer/phone. This can be a media player, a shopping application, or an accounting software. &lt;br&gt;
Programming: this refers to the process of creating an application that carries out a specific task.&lt;br&gt;
Interface: this refers to a distributed boundary across which separate components of an application exchange information. The sharing can be between computer software, hardware or peripheral devices.&lt;/p&gt;

&lt;p&gt;API allows developers to make specific calls in order to receive and send data. This transmission is done using a programming language referred to as “JSON”. Javascript Object Notation(JSON) is an independent and lightweight language that is used in sending information between computers. This language can be used to make defined actions like updating, creating, reading and deleting data. &lt;br&gt;
GET: request information(data) from the server.&lt;br&gt;
POST: sends information and changes from clients to the server.&lt;br&gt;
PUT: revise the existing information or add to it.&lt;br&gt;
DELETE: Removes existing information from the server. &lt;br&gt;
Examples of APIs&lt;br&gt;
When you are using an application on your computer or your phone, the application is connected to a server that stores data. In any case, you might be adding, retrieving, updating or deleting data from the application. In a scenario where you are adding, the APIs will receive your data, interpret it to a language that the server can understand then save it. On the other hand, when retrieving data from the server, the server will retrieve the data, APIs interpret it then send it back to the application for viewing in a readable way. &lt;/p&gt;

&lt;p&gt;To explain it better, let us take a sociable example.&lt;br&gt;
Imagine yourself sitting in a restaurant, a menu is presented to you to choose what kind of food and drinks to take. After going through the menu and choosing what you would like, the waiter takes your request and passes it to the kitchen department for preparation. After preparing your meal(request) the waiters will bring you the meal.&lt;br&gt;
In our restaurant scenario, the menu represents an interface that we relate to and understand what our server can give us. The waiters represent APIs that receive and deliver requests to our server and to you. The kitchen department here represents the server. &lt;/p&gt;

&lt;p&gt;Type of APIs&lt;br&gt;
There are four major types of APIs:&lt;br&gt;
Open APIs: this kind of APIs are also known as Public APIs, this is because they contain no restrictions to access. They can be accessed and used by anyone.&lt;br&gt;
Partner APIs: this type of APIs are not open to the public, to access these APIs a developer requires certain rights or licence  in order to work with them.&lt;br&gt;
Internal APIs: Also referred to as Private APIS, this type of APIs are created to be used within a company. Companies use such APIs to improve their services and products. &lt;br&gt;
Composite APIs: This kind of APIs joins different data and service APIs. It uses a sequence of tasks that runs simultaneously as a result of the implementation and not at the appeal of a task. Its major use is in speeding up the process of execution and enhancing the performance of the listeners in the online interface.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>All Data Types in JavaScript</title>
      <author>Nirbhay Parmar</author>
      <pubDate>Tue, 09 Nov 2021 19:40:09 +0000</pubDate>
      <link>https://dev.to/nirbhayparmar/all-data-types-in-javascript-237a</link>
      <guid>https://dev.to/nirbhayparmar/all-data-types-in-javascript-237a</guid>
      <description>&lt;p&gt;If you are a beginner in web development then you must learn the JavaScript. It powers the interactions on each and every webpages. Basically it enables the websites to interact with the user in many ways like music player, alert, pop-ups or a video player or animations.&lt;/p&gt;

&lt;p&gt;But to create such interactions on the websites developers need to write the code that take user inputs or call an &lt;a href="https://www.howtogeek.com/343877/what-is-an-api/"&gt;api&lt;/a&gt; to get any data, but to do all this things we need some type of storage container that will store different types of data like numbers, strings, objects or boolean. So each programming languages defines some data types to sort the things out.&lt;/p&gt;

&lt;p&gt;The JavaScript is a "dynamically typed" language, we not have to specify the data types at variable declaration unlike C/C++ or Java. Variables can store any data type in it. There are total 8 data types in JavaScript. These are as follows-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;BigInt&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h2&gt;

&lt;p&gt;Numbers as the name suggest, it used to store numbers. Numbers can be integers, fractions, or Infinity/-Infinity and NaN(Not a Number).&lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// integer&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fraction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt; &lt;span class="c1"&gt;// fraction&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;infinity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt; &lt;span class="c1"&gt;// Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string"&gt;
  &lt;/a&gt;
  String
&lt;/h2&gt;

&lt;p&gt;String is the type of data in which, there is a bunch of alphanumeric characters and other symbols are together. In other words, it is a group of characters. Strings are to be surrounded by quotes, single or double. &lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc123,./&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// string can have alphanumeric and other symbols&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;`The back-tics can used to use variables in in between the string like str is- &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// The back-tics can used to use variables in in between the string like str is- abc123,./ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bigint"&gt;
  &lt;/a&gt;
  BigInt
&lt;/h2&gt;

&lt;p&gt;BigInt is made to accommodate really large numbers which are more than 2^53 -1 or less -(2^53 -1) due to its technical limitations. They are represented by appending 'n' after the number.&lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bigint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123456789123456789123456789&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#boolean"&gt;
  &lt;/a&gt;
  Boolean
&lt;/h2&gt;

&lt;p&gt;Boolean is used to represent true or false values. Sometimes we only two values for our function or we have to check some condition that is true or false.&lt;br&gt;
Boolean values can also come as a result of comparision. &lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isTrueOrFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstIsGreaterOrNot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstIsGreaterOrNot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#null"&gt;
  &lt;/a&gt;
  Null
&lt;/h2&gt;

&lt;p&gt;People often confused between null value and undefined value(non existing value). Null values represents "nothing", "empty" or "unknown".&lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#undefined"&gt;
  &lt;/a&gt;
  Undefined
&lt;/h2&gt;

&lt;p&gt;They are different then Null data types. They represents that the variable is not assigned any value.&lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object"&gt;
  &lt;/a&gt;
  Object
&lt;/h2&gt;

&lt;p&gt;Objects are non primitive data type. We can defined key-value pairs. We can store any type values in one such object. We can store collections of data of different data types.&lt;/p&gt;

&lt;p&gt;Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Nirbhay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;isIndian&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#symbol"&gt;
  &lt;/a&gt;
  Symbol
&lt;/h2&gt;

&lt;p&gt;Symbol are used to create unique identifiers for objects. They can used to generate unique identifiers.&lt;/p&gt;

&lt;p&gt;No example for this because i have to read more on it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is based on what I learned about data types in JavaScript from &lt;a href="https://javascript.info/types"&gt;javascript.info.&lt;/a&gt; It is basically a summary of that article. Visit it to get some deeper understanding.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;cover photo by &lt;a href="https://unsplash.com/@pankajpatel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pankaj Patel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>SOLID  -  Los principios del diseño orientado a objetos - 1 er principio</title>
      <author>Victor Canseco Soto</author>
      <pubDate>Tue, 09 Nov 2021 19:25:46 +0000</pubDate>
      <link>https://dev.to/victor_canseco/solid-los-principios-del-diseno-orientado-a-objetos-1-er-principio-232h</link>
      <guid>https://dev.to/victor_canseco/solid-los-principios-del-diseno-orientado-a-objetos-1-er-principio-232h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#solid-los-principios-del-dise%C3%B1o-orientado-a-objetos"&gt;
  &lt;/a&gt;
  SOLID  -  Los principios del diseño orientado a objetos
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#introducci%C3%B3n"&gt;
  &lt;/a&gt;
  Introducción
&lt;/h2&gt;

&lt;p&gt;SOLID es un acrónimo de los primeros cinco principios del diseño orientado a objetos, los cuales fueron definidos por Robert C. Martin.&lt;/p&gt;

&lt;p&gt;Estos principios establecen mejores practicas para el desarrollo de software con toda la complejidad que implica mantener y extender conforme el proyecto crezca. Al adoptar estas practicas también se elimina (o minimiza) el código basura, el refactorizar y nos permite utilizar metodologías agiles y/o adaptativas de desarrollo de software.&lt;/p&gt;

&lt;p&gt;SOLID significa:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;S&lt;/strong&gt; - Single-responsiblity Principle&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O&lt;/strong&gt; - Open-closed Principle&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;L&lt;/strong&gt; - Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I&lt;/strong&gt; - Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;D&lt;/strong&gt; - Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A continuación abordaremos cada uno de estos principios para entender como estos cinco principios pueden ayudarte a ser un mejor desarrollador de software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#singleresponsiblity-principle"&gt;
  &lt;/a&gt;
  Single-responsiblity Principle
&lt;/h2&gt;

&lt;p&gt;Este principio establece lo siguiente:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una Clase debe tener una y solo una razón para cambiar, lo cual significa que una clase debe tener solo un trabajo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Por ejemplo, consideremos una aplicación que utiliza una colección de figuras (círculos y cuadrados), la cual calcula la suma de el área de todas las figuras de la colección.&lt;/p&gt;

&lt;p&gt;Primero creamos las clases de las figuras, su constructor y sus propiedades para inicializarlas.&lt;/p&gt;

&lt;p&gt;Para los cuadrados necesitamos la longitud de uno de sus lados: &lt;em&gt;Length&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Square&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para los círculos necesitamos conocer el: &lt;em&gt;Radius&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Después de crear las clases, continuamos con la lógica para la suma de las áreas de todas las figuras. Para esto recordamos algo de geometría básica.&lt;/p&gt;

&lt;p&gt;Para calcular el área de un cuadrado: &lt;em&gt;a = l * l&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;El área de un circulo se calcula de la siguiente forma: &lt;em&gt;a = π * r^2&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AreaCalculator&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Shapes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AreaCalculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_shapes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Shapes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_shapes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;Area&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Shapes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Area&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Pow&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Area&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Pow&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Area&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"La suma de las áreas de las figuras es: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nf"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora llego la hora de integrar todo y probar&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Shapes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Areas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AreaCalculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Shapes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Areas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El problema con el método de impresión es que el controla la lógica de la salida de los datos. &lt;/p&gt;

&lt;p&gt;Consideremos un escenario en el que la salida necesita ser convertida a otro formato como puede ser JSON.&lt;/p&gt;

&lt;p&gt;Toda esta lógica podría ser manejada por esta clase; sin embargo esto violaría el principio de Single-Responsibility. Nuestra clase AreaCalculator solo debe de preocuparse por la suma de las áreas de las figuras, no le interesa si el usuario desea usarlas en JSON, HTML u otro formato de salida.&lt;/p&gt;

&lt;p&gt;Para manejar esto debemos crear una clase separada la cual manejará la lógica que necesitamos para la salida de los datos para el usuario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOutputter&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;AreaCalculator&lt;/span&gt; &lt;span class="n"&gt;Calculator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CalculatorOutputter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AreaCalculator&lt;/span&gt; &lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Calculator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JsonSerializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToHtml&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;$"La suma de las áreas de las figuras es: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Integramos todo para utilizar la nueva clase y quedaría de la siguiente forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Shapes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Areas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AreaCalculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Shapes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Salida&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CalculatorOutputter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Areas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Salida&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Salida&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToHtml&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Con esto la lógica que necesitamos para la salida de datos para el usuario queda implementada en la clase CalculatorOutputter con lo cual satisfacemos el principio de Single-Responsibility.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Vite Frontend Starter</title>
      <author>ihaback</author>
      <pubDate>Tue, 09 Nov 2021 19:24:07 +0000</pubDate>
      <link>https://dev.to/ihaback/vite-frontend-starter-3pm1</link>
      <guid>https://dev.to/ihaback/vite-frontend-starter-3pm1</guid>
      <description>&lt;p&gt;
  &lt;a href="https://vitejs.dev" rel="noopener noreferrer"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xGisj6gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vitejs.dev/logo.svg" alt="Vite logo" width="410" height="404"&gt;
  &lt;/a&gt;
&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Pre-configured with typescript, styling, global state handling, formatting, building &amp;amp; testing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;⚡️ Fast dev server powered by &lt;a href="https://vitejs.dev/"&gt;&lt;code&gt;vite&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📖 Typescript ready&lt;/li&gt;
&lt;li&gt;💅 Styling with &lt;a href="https://styled-components.com/"&gt;&lt;code&gt;styled-components&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📦 Pre-configured global state handling with &lt;a href="https://redux-toolkit.js.org"&gt;&lt;code&gt;redux-toolkit&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🐛 Discover inconsistencies and fix formatting through linting scripts with &lt;a href="https://eslint.org/"&gt;&lt;code&gt;Eslint&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🔑 Testing scripts with &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;&lt;code&gt;React Testing Library&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💡 Path aliases do avoid pesky &lt;code&gt;../../&lt;/code&gt; paths in your code&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show me the code
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/ihaback/vite-frontend-starter/"&gt;https://github.com/ihaback/vite-frontend-starter&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#folder-aliases-for-development-testing-and-building"&gt;
  &lt;/a&gt;
  Folder aliases for development, testing and building
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#viteconfigts"&gt;
  &lt;/a&gt;
  vite.config.ts
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@features&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/features&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/store/index.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/utils.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tsconfigjson"&gt;
  &lt;/a&gt;
  tsconfig.json
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compilerOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baseUrl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;paths&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/styles/index.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@features/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/features/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/store/index.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/utils.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#babelconfigjs"&gt;
  &lt;/a&gt;
  babel.config.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module-resolver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/utils.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/store/index.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@features&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/features&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#develop"&gt;
  &lt;/a&gt;
  Develop
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "dev": "vite",
  "build": "tsc &amp;amp;&amp;amp; vite build",
  "serve": "vite preview",
  "test": "jest",
  "test:coverage": "jest --coverage",
  "lint": "eslint \"**/*.{js,jsx,ts,tsx}\" --fix"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vite</category>
      <category>eslint</category>
      <category>jest</category>
      <category>typescript</category>
    </item>
    <item>
      <title>My basic Neovim setup</title>
      <author>Elves Sousa</author>
      <pubDate>Tue, 09 Nov 2021 19:24:01 +0000</pubDate>
      <link>https://dev.to/elvessousa/my-basic-neovim-setup-253l</link>
      <guid>https://dev.to/elvessousa/my-basic-neovim-setup-253l</guid>
      <description>&lt;p&gt;In the last few articles, I commented on why I adopted Neovim as my main editor and went through the basics for using the program. However, it does not come with plugins or nice looks by default. Here, I show you how I set up my Neovim.&lt;/p&gt;

&lt;p&gt;The programming languages I use in my daily life are JavaScript (JSX and TypeScript), CSS, Sass and lately I'm studying Python, too. Therefore, my configuration supports these technologies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h79lKfsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9VeS1of.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h79lKfsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9VeS1of.png" alt="Neovim" width="820" height="655"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Neovim as is on first launch&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#about-my-choices-for-the-configuration"&gt;
  &lt;/a&gt;
  About my choices for the configuration
&lt;/h3&gt;

&lt;p&gt;As you can imagine, Neovim is configured by text files.&lt;/p&gt;

&lt;p&gt;There are two ways to configure it: using the Lua language, or VimScript, created for Vim. Here I will use the last one, as it works for both Vim and Neovim. So I kill two birds with one stone.&lt;/p&gt;

&lt;p&gt;I have no experience with Lua, and at the moment I have no plans on learning the language just to configure the application. I'm aware that there are more modern ways to do this, but I prefer to keep my settings concise.&lt;/p&gt;

&lt;p&gt;At the end of this guide, you will not have a tangle of files and directories, as you may have seen elsewhere, but rather a single file, just enough for comfortable use.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-options"&gt;
  &lt;/a&gt;
  Setting options
&lt;/h3&gt;

&lt;p&gt;As with most software, there is a way to edit options and preferences. These can be tested with the command &lt;code&gt;:set &amp;lt;option-name&amp;gt;&lt;/code&gt;. Try opening an instance of Vim/Neovim now and type &lt;code&gt;:set number&lt;/code&gt;, you'll notice that the line numbers will appear on the side. The problem with this is that these commands will have to be repeated each time you reopen the program.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#saving-settings"&gt;
  &lt;/a&gt;
  Saving settings
&lt;/h3&gt;

&lt;p&gt;To keep these settings saved, just write these commands in a file in your user folder. The name and location will vary depending on whether you use Vim or Neovim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Vim&lt;/strong&gt;: &lt;code&gt;&amp;lt;username&amp;gt;/.vimrc&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Neovim&lt;/strong&gt;: &lt;code&gt;&amp;lt;username&amp;gt;/.config/nvim/init.vim&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If these files/directories do not exist in your home folder, just create them manually. Remember that files starting with "." are hidden by default on Unix systems (Linux, BSDs and macOS). Make sure you are showing hidden files in your file manager or terminal.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-options-in-the-configuration-file"&gt;
  &lt;/a&gt;
  Basic options in the configuration file
&lt;/h3&gt;

&lt;p&gt;Before we get into more complex things like extensions and their settings, let's stick to the basics. There are many options to tinker with, however, the ones I put below are the ones I currently use. Note that in the file will have the commands that would have to be typed every time the editor opened.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Options&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;unnamedplus
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;completeopt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;noinsert&lt;span class="p"&gt;,&lt;/span&gt;menuone&lt;span class="p"&gt;,&lt;/span&gt;noselect
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;cursorline&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; inccommand&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;mouse&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;splitbelow&lt;/span&gt; &lt;span class="nb"&gt;splitright&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ttimeoutlen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;wildmenu&lt;/span&gt;

&lt;span class="c"&gt;" Tabs size&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;expandtab&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shiftwidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;tabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the explanation of each command above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;background=dark&lt;/code&gt;: apply the color set for dark screens. Not just the background of the screen, as it might look.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clipboard=unnamedplus&lt;/code&gt;: enables the clipboard between Vim/Neovim and other applications.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cursorline&lt;/code&gt;: highlights the current line in the editor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;completeopt&lt;/code&gt;: modifies the auto-complete menu to behave more like an IDE.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hidden&lt;/code&gt;: hide unused buffers&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;inccommand=split&lt;/code&gt;: show replacements in a split screen, before applying to the file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mouse=a&lt;/code&gt;: allows the use of the mouse in the editor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;number&lt;/code&gt;: shows line numbers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;relativenumber&lt;/code&gt;: show line numbers starting from the current one. Useful for using multiline commands.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;splitbelow splitright&lt;/code&gt;: changes split screen behavior with the command &lt;code&gt;:split&lt;/code&gt; (split horizontally) and &lt;code&gt;:vsplit&lt;/code&gt; (vertically). In this case, the screens will always split below the current screen and to the right.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;title&lt;/code&gt;: show the file title&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ttimeoutlen=0&lt;/code&gt;: time in milliseconds to run commands.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wildmenu&lt;/code&gt;: shows a more advanced menu for auto-completion suggestions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;expandtab&lt;/code&gt;: transforms tabs into spaces.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;shiftwidth=2&lt;/code&gt;: number of spaces for indentation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tabstop=2&lt;/code&gt;: number of spaces for tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;To add automatic syntax support for open files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;filetype&lt;/span&gt; plugin &lt;span class="nb"&gt;indent&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#color-support"&gt;
  &lt;/a&gt;
  Color support
&lt;/h3&gt;

&lt;p&gt;To enable 256 colors on the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;t_Co&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is a logic I made for Vim to detect if the system supports a greater number of colors. Note that I made a conditional to detect if the terminal emulator is Apple's one. For some reason the colors behave differently in the versions I used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" True color if available&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; term_program&lt;span class="p"&gt;=&lt;/span&gt;$TERM_PROGRAM

&lt;span class="c"&gt;" Check for conflicts with Apple Terminal app&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; term_program &lt;span class="p"&gt;!=&lt;/span&gt;? &lt;span class="s1"&gt;'Apple_Terminal'&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;termguicolors&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; $TERM &lt;span class="p"&gt;!=&lt;/span&gt;? &lt;span class="s1"&gt;'xterm-256color'&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;termguicolors&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't use the Apple terminal, ignore that part and just add the code inside the &lt;code&gt;else&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-for-true-italics"&gt;
  &lt;/a&gt;
  Support for true italics
&lt;/h3&gt;

&lt;p&gt;If you're like me and like fonts with true italic support, add these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Italics&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;t_ZH&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\e[3m"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;t_ZR&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\e[23m"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't ask me what these codes there mean. All I know is that a terminal with italic support will recognize them as italic.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#netrw-vims-default-file-manager"&gt;
  &lt;/a&gt;
  NetRW: Vim's default file manager
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Notice: If you already know a little about Vim and are not interested in NetRW, skip this part.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGODYtN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QCh5fZ5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGODYtN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QCh5fZ5.png" alt="NetRW" width="820" height="655"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;NetRW as it is&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you've ever used an IDE in your life, you might have noticed that there's always a tree on the side with the project files. Vim/Neovim use NetRW by default, which brings this same function.&lt;/p&gt;

&lt;p&gt;When opening Vim or Neovim using the &lt;code&gt;[n]vim .&lt;/code&gt; command to open the project directory, the file listing will appear inside it. It can also be opened using the &lt;code&gt;:Ex&lt;/code&gt; ,&lt;code&gt;:Vex&lt;/code&gt; or &lt;code&gt;:Sex&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;You can use it with the default settings, but personally, some things bother me, so I used the following settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" File browser&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:netrw_banner&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:netrw_liststyle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:netrw_browse_split&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:netrw_altv&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:netrw_winsize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:netrw_keepdir&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:netrw_localcopydircmd&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'cp -r'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;g:netrw_banner=0&lt;/code&gt;: hides the top banner that appears by default.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g:netrw_liststyle=0&lt;/code&gt;: change the display of files.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt; shows only one directory at a time.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; shows file data.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2&lt;/code&gt; shows files in columns.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;3&lt;/code&gt; shows as a tree where open directories are expanded.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g:netrw_browse_split=4&lt;/code&gt;: changes how files are opened.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; opens files in a horizontal split.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2&lt;/code&gt; opens in a vertical split.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;3&lt;/code&gt; opens in a new tab.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;4&lt;/code&gt; opens in a previous window, avoiding the creation of more divisions.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g:netrw_altv=1&lt;/code&gt;: switches the NetRW display to the left.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g:netrw_winsize=25&lt;/code&gt;: limits window size to 25% of available screen space.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g:netrw_keepdir=0&lt;/code&gt;: keeps the directory you accessed previously.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g:netrw_localcopydircmd&lt;/code&gt;: modifies the command used to copy files. By default, NetRW just copies empty folders. To change this, I set the default command to &lt;code&gt;cp -r&lt;/code&gt; so that the copy occurs recursively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make creating files easier, I've added more settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Create file without opening buffer&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; CreateInPreview&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;filename &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'please enter filename: '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'silent !touch '&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;b:netrw_curdir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;filename
  &lt;span class="k"&gt;redraw&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;" Netrw: create file using touch instead of opening a buffer&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; Netrw_mappings&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;% &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; CreateInPreview&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

augroup auto_commands
    autocmd &lt;span class="k"&gt;filetype&lt;/span&gt; netrw &lt;span class="k"&gt;call&lt;/span&gt; Netrw_mappings&lt;span class="p"&gt;()&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This prevents NetRW from opening an empty screen just to create a file.&lt;/p&gt;

&lt;p&gt;If you want to use NetRW, I believe this is the minimum needed to use it comfortably.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netrw-and-its-problems"&gt;
  &lt;/a&gt;
  NetRW and its problems
&lt;/h3&gt;

&lt;p&gt;There are several criticisms of NetRW for the way it causes a buffer mess. From what I've researched, it seems that using &lt;code&gt;g:netrw_liststyle=3&lt;/code&gt; tree mode tends to make this behavior worse. Errors are random, making fixing it a difficult process, and updating only NetRW is more complex than it should be.&lt;/p&gt;

&lt;p&gt;That's why there are several alternatives to NetRW, and the most famous one is NERDTree, which I use in my main configuration.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HbmZ7j44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YpJyJnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HbmZ7j44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YpJyJnt.png" alt="NetRW" width="820" height="655"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Neovim using the tweaks we made so far&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#plugin-manager-setup"&gt;
  &lt;/a&gt;
  Plugin manager setup
&lt;/h3&gt;

&lt;p&gt;Finally, it's time to configure the plugins. Unlike VS Code or other editors, there are several options for extension installers: Neobundle, Vundle, Vim-Plug, etc. Here I will use the last one, which seems to be the most used nowadays. To install it, open a terminal and run the following command:&lt;/p&gt;

&lt;p&gt;For Vim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-fLo&lt;/span&gt; ~/.vim/autoload/plug.vim &lt;span class="nt"&gt;--create-dirs&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Neovim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands above do all the necessary to have Vim-Plug available in your editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-plugins"&gt;
  &lt;/a&gt;
  Installing plugins
&lt;/h3&gt;

&lt;p&gt;Vim-Plug reads a part of your configuration file to find the extension in Github and install it in the editor. This part is delimited by the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;()&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'&amp;lt;github-user&amp;gt;/&amp;lt;repo-name&amp;gt;'&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add multiple extensions at once, just add multiple &lt;code&gt;Plug&lt;/code&gt; as desired. There is a website that catalogs these plugins for easy discovery, if you want to visit. It's called Vim Awesome. The link is at the end of the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugins-i-use"&gt;
  &lt;/a&gt;
  Plugins I use
&lt;/h3&gt;

&lt;p&gt;Here's what I use on my Vim/Neovim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;" Appearance&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'vim-airline/vim-airline'&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'ryanoasis/vim-devicons'&lt;/span&gt;

    &lt;span class="c"&gt;" Utilities&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'sheerun/vim-polyglot'&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'jiangmiao/auto-pairs'&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'ap/vim-css-color'&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'preservim/nerdtree'&lt;/span&gt;

    &lt;span class="c"&gt;" Completion / linters / formatters&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'neoclide/coc.nvim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'branch'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'master'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'do'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'yarn install'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'plasticboy/vim-markdown'&lt;/span&gt;

    &lt;span class="c"&gt;" Git&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'airblade/vim-gitgutter'&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Vim Airline&lt;/strong&gt;: modifies the status bar to make it more pleasant than the default one.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vim Devicons&lt;/strong&gt;: shows icons in the interface, based on icon fonts&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vim Polyglot&lt;/strong&gt;: syntax highlighting for several programming languages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto Pairs&lt;/strong&gt;: automatically closes parentheses, square brackets and braces when typing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vim CSS Color&lt;/strong&gt;: shows colors (hex, RGB, HSL) directly in the code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NERDTree&lt;/strong&gt;: sidebar to access project files. Replaces the NetRW I mentioned earlier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CoC (Conquer of Completion)&lt;/strong&gt;: provides auto-completion, very similar to what is available in VS Code. I'll go into details about it later.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vim Markdown&lt;/strong&gt;: better support for Markdown file syntax.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vim GitGutter&lt;/strong&gt;: Shows Git changes in open files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing these lines with addresses is not enough to install extensions. First, you must save the configuration file and restart Vim in order for the editor to comply with the newly added settings. After that, run the &lt;code&gt;:PlugInstall&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNC6UbyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/a3ZXjUJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNC6UbyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/a3ZXjUJ.png" alt="Vim Plug" width="820" height="655"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Vim Plug&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A window will open and show the installation process for each extension. After installation, you will have to restart Vim one more time to use the new extensions.&lt;/p&gt;

&lt;p&gt;To uninstall, remove the line of the plugin you want to get rid of from the configuration file and after restarting the editor, run the command &lt;code&gt;:PlugClean&lt;/code&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#color-schemes"&gt;
  &lt;/a&gt;
  Color schemes
&lt;/h2&gt;

&lt;p&gt;If there's something critical to a good development experience, it's a good color scheme. These are installed in the same way as extensions.&lt;/p&gt;

&lt;p&gt;First, add the line with the path to the theme's Github repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;()&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'morhetz/gruvbox'&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use the theme, add the command &lt;code&gt;colorscheme gruvbox&lt;/code&gt; in the configuration file. This will be enough to get rid of that black screen and stark colors that come by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#color-scheme-i-use"&gt;
  &lt;/a&gt;
  Color scheme I use
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjLNMQBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/57T9ab6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjLNMQBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/57T9ab6.png" alt="Sobrio and NetRW" width="880" height="572"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Sobrio: the theme I use in my daily life&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Despite setting the example with the GruvBox theme, this is not the theme I use. Color schemes are very subjective things and as I used this theme, I ended up getting a little bored with it. The same happened with others. Since I couldn't find one I liked, I made my own. It's called Sobrio. If you want to test it, just follow the same recipe above, changing only the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;()&lt;/span&gt;
    Plug &lt;span class="s1"&gt;'elvessousa/sobrio'&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then just add &lt;code&gt;colorscheme sobrio&lt;/code&gt; and restart the editor. Please feel free to leave your comment and suggestion about it. I would like to know your opinion. If you want to know more about it, the link for the website is at the end of the article.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#plugins-configuration"&gt;
  &lt;/a&gt;
  Plugins configuration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#devicons"&gt;
  &lt;/a&gt;
  Devicons
&lt;/h3&gt;

&lt;p&gt;Devicons is an extension that adds icons to Vim's interface. In order to work, it is necessary to have fonts with icon support installed on the system.&lt;/p&gt;

&lt;p&gt;Look for "NERD Fonts" on the internet, and you'll find plenty of them. The way to install fonts on the system varies a lot depending on the operating system, and I won't go into details here. Download it, install and apply the font for your terminal emulator. Other than that, no other configuration is required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#airline"&gt;
  &lt;/a&gt;
  Airline
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3IHgn4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8CcRTC2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3IHgn4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8CcRTC2.jpg" alt="Airline" width="873" height="21"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Little to set up here. Basically it's saying which theme to use and if you want to use "Powerline" mode, which are these lines with arrow shapes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:airline_theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'sobrio'&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:airline_powerline_fonts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:airline&lt;/span&gt;#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last option above shows enables Airline for the tab bar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nerdtree"&gt;
  &lt;/a&gt;
  NERDTree
&lt;/h3&gt;

&lt;p&gt;NERDTree is the replacement for NetRW. By default, it works fine. I just added a line to show hidden files by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" File browser&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; NERDTreeShowHidden&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You know, I like to see &lt;code&gt;.env&lt;/code&gt; or &lt;code&gt;.gitignore&lt;/code&gt; files without having to type &lt;code&gt;I&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Crq2QgbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pWiMQB0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Crq2QgbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pWiMQB0.png" alt="Sobrio para Vim" width="880" height="594"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Neovim com as configurações até agora&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ctrlp"&gt;
  &lt;/a&gt;
  CTRLP
&lt;/h3&gt;

&lt;p&gt;This plugin enables file search in your project's folder. It is activated by the same keyboard shortcut that gives its name. If you've ever used VS Code, you will get used to it very quickly. The only setting I made was this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:ctrlp_user_command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'.git/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'git --git-dir=%s/.git ls-files -oc --exclude-standard'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting the line above into plain English: CTRLP will ignore every file or directory mentioned inside your project's &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-markdown"&gt;
  &lt;/a&gt;
  Vim Markdown
&lt;/h3&gt;

&lt;p&gt;If you don't use Markdown, skip this part.&lt;/p&gt;

&lt;p&gt;As I use the Markdown format a lot to write on my blog, I installed this extension to improve the display of this type of file on my Neovim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Disable math tex conceal feature&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:tex_conceal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vim_markdown_math&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;" Markdown&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vim_markdown_folding_disabled&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vim_markdown_frontmatter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vim_markdown_conceal&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:vim_markdown_fenced_languages&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'tsx=typescriptreact'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use YAML headers (Frontmatter) at the top so that Gatsby does its magic. Without this plugin the frontmatter and code blocks syntax is not recognized.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coc-conquer-of-completion"&gt;
  &lt;/a&gt;
  Coc: Conquer of Completion
&lt;/h3&gt;

&lt;p&gt;This is the plugin that requires the most configuration. Conquer of Completion works as a server that provides auto-completion and code correction tools, working similar to VS Code. It supports extensions too, and these are responsible for adding support for the desired programming languages.&lt;/p&gt;

&lt;p&gt;The weakness of CoC is that it is based on NodeJS, so the dependencies of installed packages will take up a certain amount of disk space, like all Node projects. Of the ones I've tested so far, it has met my expectations the most, with the least configuration.&lt;/p&gt;

&lt;p&gt;Installing extensions is simple: just run the command &lt;code&gt;:CocInstall &amp;lt;extension-name&amp;gt;&lt;/code&gt; and the features will be available for you to use.&lt;/p&gt;

&lt;p&gt;Here are the extensions I use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;coc-tsserver&lt;/strong&gt;: support for JavaScript, TypeScript and React.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;coc-css&lt;/strong&gt;: support for CSS, Sass and SCSS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;coc-eslint&lt;/strong&gt;: lints JavaScript and TypeScript files.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;coc-emmet&lt;/strong&gt;: adds shortcuts to write less in HTML, CSS, Sass, SCSS and extended JavaScript files (JSX,TSX)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;coc-pyright&lt;/strong&gt;: Python support.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;coc-prettier&lt;/strong&gt;: formats the code according to well accepted standards in the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install them all at once, just run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;CocInstall coc&lt;span class="p"&gt;-&lt;/span&gt;tsserver coc&lt;span class="p"&gt;-&lt;/span&gt;css coc&lt;span class="p"&gt;-&lt;/span&gt;eslint coc&lt;span class="p"&gt;-&lt;/span&gt;emmet coc&lt;span class="p"&gt;-&lt;/span&gt;pyright coc&lt;span class="p"&gt;-&lt;/span&gt;prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prettier-with-cocprettier"&gt;
  &lt;/a&gt;
  Prettier with coc-prettier
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Language server stuff&lt;/span&gt;
command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; Prettier &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; CocAction&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'runCommand'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'prettier.formatFile'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above will run Prettier and format the file whenever you save the file. This helps a lot, as I spend less time pressing &lt;code&gt;Tab&lt;/code&gt; to indent code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coc-settings-in-json"&gt;
  &lt;/a&gt;
  Coc settings in JSON
&lt;/h3&gt;

&lt;p&gt;Apart from the &lt;code&gt;init.vim&lt;/code&gt; or &lt;code&gt;.vimrc&lt;/code&gt; we've used so far, I also use a separate file called &lt;code&gt;coc-settings.json&lt;/code&gt;. With it it is possible to modify the behavior of your extensions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"coc.preferences.formatOnSaveFiletypes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"sass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"scss"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"javascriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"typescriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"python.formatting.provider"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"black"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"python.formatting.blackPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~/.local/bin/black"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prettier.singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"javascript.autoClosingTags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"typescript.autoClosingTags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"emmet.includeLanguages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"javascriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"typescriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"html"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"codeLens.enable"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the explanation of the settings above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configure CoC to format some file types when saving.&lt;/li&gt;
&lt;li&gt;Configure Prettier to prefer single quotes in formatting.&lt;/li&gt;
&lt;li&gt;Inform which code formatter for python, "black" in this case, and passed the path to black on my system.&lt;/li&gt;
&lt;li&gt;Enable auto-close for extended JavaScript tags (JSX)&lt;/li&gt;
&lt;li&gt;Enable Emmet for more file formats.&lt;/li&gt;
&lt;li&gt;Disable Code Lens, as it crashed occasionally.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that if you don't use Python, just ignore the settings for it. For the Python formatter to work, it must be installed on the system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;black
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#keyboard-shortcuts"&gt;
  &lt;/a&gt;
  Keyboard shortcuts
&lt;/h2&gt;

&lt;p&gt;As with other programs, there is a way to configure keyboard shortcuts. This can be done for each editor mode. The possibilities are many. To add a keyboard shortcut in Vim, just add the expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;first&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;letter&lt;span class="p"&gt;-&lt;/span&gt;of&lt;span class="p"&gt;-&lt;/span&gt;target&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;letters&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;Command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The strange word &lt;code&gt;noremap&lt;/code&gt; comes from &lt;em&gt;"&lt;strong&gt;No&lt;/strong&gt;n &lt;strong&gt;Re&lt;/strong&gt;cursive &lt;strong&gt;Map&lt;/strong&gt;ping"&lt;/em&gt;, "Non-Recursive Mapping". This means that the created shortcut will not overwrite another similar shortcut, avoiding conflicts.&lt;/p&gt;

&lt;p&gt;As I'm a bit minimalist, I didn't add many shortcuts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Normal mode remappings&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F4&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;bd&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F5&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F6&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="k"&gt;terminal&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Tabs&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;S&lt;span class="p"&gt;-&lt;/span&gt;Tab&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gT
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Tab&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; gt
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;S&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;tabnew&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the explanation of the above mappings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+q&lt;/code&gt;: closes the open screen.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F4&lt;/code&gt;: closes the open file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F5&lt;/code&gt;: shows or hides NERDTree.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F6&lt;/code&gt;: opens a terminal in a lower split window.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift+Tab&lt;/code&gt;: switch to the previous tab.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift+t&lt;/code&gt;: creates a tab.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Tab&lt;/code&gt;: switch to the next open tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that there are several &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;. These represent all the times you would have to press &lt;code&gt;Enter&lt;/code&gt; in command mode. &lt;strong&gt;CR&lt;/strong&gt; is the abbreviation for &lt;em&gt;"Carriage Return"&lt;/em&gt;: a term from the time when typewriters were used. Today, we understand it as the &lt;code&gt;Enter&lt;/code&gt; or &lt;code&gt;Return&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;All shortcuts I used are for normal mode, so &lt;code&gt;nnoremap&lt;/code&gt; is on every line. If it was for insert mode it would be &lt;code&gt;inoremap&lt;/code&gt;, &lt;code&gt;vnoremap&lt;/code&gt; for visual mode and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-commands"&gt;
  &lt;/a&gt;
  Automatic commands
&lt;/h3&gt;

&lt;p&gt;To automate some things, Vim makes it possible to define what it calls &lt;code&gt;autocmd&lt;/code&gt;: automatic commands performed on certain events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Auto Commands&lt;/span&gt;
augroup auto_commands
    autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; CocAction&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'format'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; scss &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;iskeyword&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;@&lt;span class="p"&gt;-&lt;/span&gt;@
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, I defined two actions: one to format the Python code when saving the file, and another to resolve an inconsistency I had with SCSS files.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Without a doubt, this was the longest article I've made so far, but if you followed the instructions, you have a very functional editor now. There are other plugins, but as you get used to it and build confidence, you will test out others better suitable for your needs.&lt;/p&gt;

&lt;p&gt;Ideally, try to keep the init file simple. Too much extensions can affect performance. I use other settings that I haven't detailed in this article, as they are not important for most cases. I'm providing the link to my &lt;strong&gt;dotfiles&lt;/strong&gt; repository for you to check at the end of this article if you want.&lt;/p&gt;

&lt;p&gt;See you in the next article!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.elvessousa.com.br/post/vim-parte-3"&gt;This article in Portuguese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elvessousa/.dotfiles"&gt;My dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sobrio.elvessousa.com.br"&gt;Sobrio theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimawesome.com"&gt;Vim Awesome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If this article helped you in some way, consider &lt;a href="https://www.buymeacoffee.com/elvessousa"&gt;donating&lt;/a&gt;. This will help me to create more content like this!&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;strong&gt;Buffer:&lt;/strong&gt; A buffer is an area of Vim's memory used to hold text read from a file. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;strong&gt;Icon fonts:&lt;/strong&gt; A collection of vector icons avaible as font. &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>neovim</category>
      <category>vim</category>
      <category>programming</category>
    </item>
    <item>
      <title>No-code Is For Coders Too</title>
      <author>Backendless</author>
      <pubDate>Tue, 09 Nov 2021 19:23:38 +0000</pubDate>
      <link>https://dev.to/backendless/no-code-is-for-coders-too-50pc</link>
      <guid>https://dev.to/backendless/no-code-is-for-coders-too-50pc</guid>
      <description>&lt;p&gt;There is a common misconception that no-code (or codeless) platforms and tools are only for non-technical builders. This, of course, couldn’t be further from the truth.&lt;/p&gt;

&lt;p&gt;No-code and low-code solutions are typically created by developers as a tool to speed up their own development process. This is particularly true of backend-oriented tools created to automate the redundant and/or trivial tasks that are common with setting up a backend. Once the “simple” tasks are removed, developers can focus on the elements of their project that are true differentiators, be that a gorgeous UI, innovative APIs, powerful logic and algorithms, and so on.&lt;/p&gt;

&lt;p&gt;No-code Is More Than Democratize Development&lt;br&gt;
No-code and low-code should not be seen merely as a way to “democratize development” — which, no doubt, they do — but also as a means for experienced developers to build faster, build more innovative projects, and try new concepts, all without getting bogged down in the minutia of server hosting, setting up databases, (re)creating basic APIs, etc.&lt;/p&gt;

&lt;p&gt;Building faster does not mean sacrificing functionality or performance for development speed. Yes, no-code and low-code make it far easier for non-technical developers to bring their idea to life, but “building faster” means much more than that.&lt;/p&gt;

&lt;p&gt;Every organization in 2022 and beyond has the same need: provide an inviting, modern, user-friendly digital experience. This can take many forms including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Desktop website&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mobile website&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mobile app&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web app&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A digital experience is not limited to just customer-facing applications, however. What tools are you giving yourself as an organization internally? Are you using or building the best platforms to give your team members everything they need to serve your customers? Most importantly, is your internal technology team able to deliver all of these resources in a timely fashion?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-codeless-technologies"&gt;
  &lt;/a&gt;
  Benefits of Codeless Technologies
&lt;/h2&gt;

&lt;p&gt;Building a digital age business requires a wide range of tech solutions. Some of these solutions can be had out of the box, but every business is different. Customizing an off-the-shelf solution can be more costly and time-consuming than building what your need yourself. Enter codeless. Codeless technologies provide you with the greatest means to build ____ faster, be that your website, customer-facing apps, internal dashboards, process automation, and so much more.&lt;/p&gt;

&lt;p&gt;These tools don’t just give your non-technical team members the ability to build for their own needs, but also take a significant burden off of your technical team. And not just because other employees can do their job for them.&lt;/p&gt;

&lt;p&gt;Adding no-code and low-code tools to your development team’s stack frees them up from redundant and simple-yet-time-consuming tasks. Tools like Backendless can open opportunities to create new projects that may have been pushed aside as “low priority”, when really there just wasn’t the time to flesh out and develop them.&lt;/p&gt;

&lt;p&gt;So developers, here is your call: Build with no-code and low-code so the world can see your app, website, automation, tool, etc., that you are building sooner.&lt;/p&gt;

&lt;p&gt;Build faster -&amp;gt; test sooner -&amp;gt; iterate faster -&amp;gt; launch sooner -&amp;gt; make your users’ lives easier.&lt;/p&gt;

&lt;p&gt;How many doors will no-code open for your business?&lt;/p&gt;

&lt;p&gt;In the end, we all win.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>productivity</category>
      <category>serverless</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Curated list of C++ projects on #mybfio with ratings and users reviews</title>
      <author>Alexey Melezhik</author>
      <pubDate>Tue, 09 Nov 2021 19:17:11 +0000</pubDate>
      <link>https://dev.to/melezhik/curated-list-of-c-projects-on-mybfio-with-ratings-and-users-reviews-531l</link>
      <guid>https://dev.to/melezhik/curated-list-of-c-projects-on-mybfio-with-ratings-and-users-reviews-531l</guid>
      <description>&lt;p&gt;Curated list of C++ projects on #mybfio with ratings and users reviews. &lt;a href="https://mybf.io/?language=C%2B%2B"&gt;https://mybf.io/?language=C%2B%2B&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to add a new one? &lt;a href="https://mybf.io/add-project"&gt;https://mybf.io/add-project&lt;/a&gt; . Don't forget to choose  "C++" as a language.&lt;/p&gt;

</description>
      <category>curatedlist</category>
      <category>cpp</category>
      <category>ratings</category>
      <category>mybfio</category>
    </item>
    <item>
      <title>What I learned from building REST APIs in 3 different languages</title>
      <author>Lucia Cerchie</author>
      <pubDate>Tue, 09 Nov 2021 19:00:38 +0000</pubDate>
      <link>https://dev.to/cerchie/what-i-learned-from-building-rest-apis-in-3-different-languages-5cn1</link>
      <guid>https://dev.to/cerchie/what-i-learned-from-building-rest-apis-in-3-different-languages-5cn1</guid>
      <description>&lt;p&gt;While I was in bootcamp in 2020, I built REST APIs using JavaScript and Python.&lt;/p&gt;

&lt;p&gt;Recently, using &lt;a class="mentioned-user" href="https://dev.to/karanpratapsingh"&gt;@karanpratapsingh&lt;/a&gt;
's helpful &lt;a href="https://dev.to/karanpratapsingh/build-a-rest-api-with-go-for-beginners-3gp"&gt;tutorial&lt;/a&gt;, I got started on building a &lt;a href="https://github.com/Cerchie/go-rest-api"&gt;REST API in Golang&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was during the process of following the Golang tutorial that certain things really clicked for me. I'm writing to share them with you! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-basics-of-rest-apis-are-the-same-in-all-three-of-these-languages"&gt;
  &lt;/a&gt;
  1. The basics of REST APIs are the same in all three of these languages
&lt;/h2&gt;

&lt;p&gt;Building a REST API enabled me to establish a &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD pattern&lt;/a&gt;, whether I was doing it in JavaScript, Python, or Golang. &lt;/p&gt;

&lt;p&gt;In each of those languages, I had many of the same considerations. Which CRUD operations did I really need for my end project? How was I going to handle errors? Security? Testing? I am now understanding by my own experience that API design can be language-agnostic! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-its-ok-to-build-something-without-having-memorized-every-last-bit-of-the-syntax"&gt;
  &lt;/a&gt;
  2. It's ok to build something without having memorized every last bit of the syntax
&lt;/h2&gt;

&lt;p&gt;Since I wrote my Python and JavaScript APIs in a fast-paced bootcamp, I was 'forced' to dive in headfirst after a quick review of language syntax. My Golang API is a side-project so there was none of that external pressure, and for that reason I put it off for a long time.&lt;/p&gt;

&lt;p&gt;But after about the twelfth video on the ins and outs of pointers, I realized it was time to get started actually building something-- because getting to know language syntaxes is like getting to know people: learning the names is the beginning, but you have to start interacting with them to understand their behavior. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-python-javascript-and-golang-are-all-different-languages"&gt;
  &lt;/a&gt;
  3. Python, JavaScript, and Golang are all different languages
&lt;/h2&gt;

&lt;p&gt;I know, shocker. ;) &lt;/p&gt;

&lt;p&gt;But after working with them all I understand the differences better. When I only knew Python and JS, I thought maybe Golang was more like Python than I realize it is now, and that Python and JS were less alike than I think they are now.&lt;/p&gt;

&lt;p&gt;I got hung up on the syntax differences -- &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; in JS vs &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; in Python -- without realizing that these languages had some similarities as well. For example, JS and Python are both dynamically typed. You can declare a variable and the runtime gods will determine its type. Just try that with Golang! It won't let you, because you, as a Go developer, must declare a variable's type, it's not the runtime's concern. &lt;/p&gt;

&lt;p&gt;As far as similarities go, all three languages also participate in object-orientation to varying degrees/in varying ways -- as always, this depends on how you define object-orientation! That could be a whole separate blog post so I'm stopping here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you normally build something in one language, try it in a new one! The perspective you gain may surprise you. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>go</category>
      <category>architecture</category>
    </item>
    <item>
      <title>5 Best Practices for Effective Team Meetings</title>
      <author>Status Hero Editorial Staff</author>
      <pubDate>Tue, 09 Nov 2021 18:56:15 +0000</pubDate>
      <link>https://dev.to/statushero/5-best-practices-for-effective-team-meetings-57mb</link>
      <guid>https://dev.to/statushero/5-best-practices-for-effective-team-meetings-57mb</guid>
      <description>&lt;p&gt;&lt;strong&gt;Meetings don’t have to be something your team dreads or tries to avoid. The key is to make them effective and worthwhile. Check out these 5 best practices to get the most out of your meetings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The most important aspect of the &lt;a href="https://Agilemanifesto.org"&gt;Agile Manifesto and its twelve principles&lt;/a&gt; is delivering value to the customer or user. In order to achieve this, teams need to maintain a shared understanding of customers’ needs and of the work that must to be done. &lt;/p&gt;

&lt;p&gt;The Agile approach is especially important in complex project and product environments that deal with a high level of uncertainty, and several types of Agile meetings (or ceremonies) are key to its success. &lt;/p&gt;

&lt;p&gt;In this article, you will learn more about these types of meetings, as well as how to implement them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rules-for-meetings"&gt;
  &lt;/a&gt;
  Rules for Meetings
&lt;/h2&gt;

&lt;p&gt;Each meeting in the Agile world has a unique purpose and a set of rules for conducting it. To benefit from these meetings, you need to know the purpose, the rules, and the requirements of each type. &lt;/p&gt;

&lt;p&gt;The Agile methodology is not a framework but an umbrella philosophy that encompasses multiple methods and frameworks. You may think of Agile meetings primarily in terms of the Scrum ceremonies described in &lt;a href="https://www.scrum.org/resources/scrum-guide"&gt;The Scrum Guide&lt;/a&gt;, but these practices are valuable in nearly all Agile contexts. &lt;/p&gt;

&lt;p&gt;As an Agile coach, I have observed many teams use these ceremonies for a time, then lose focus. Sometimes teams may need to get reoriented. Here are some tips that work for all Agile meetings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do"&gt;
  &lt;/a&gt;
  Do:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Understand the purpose of the meeting type&lt;/li&gt;
&lt;li&gt;Have the right people at the meeting&lt;/li&gt;
&lt;li&gt;Run the meeting because it brings value to your team and its work&lt;/li&gt;
&lt;li&gt;Make room for every voice and encourage introverts to contribute&lt;/li&gt;
&lt;li&gt;Choose the proper setup, methods, and practices&lt;/li&gt;
&lt;li&gt;End the meeting when the work is done, even if it’s early&lt;/li&gt;
&lt;li&gt;Support the team in moving forward&lt;/li&gt;
&lt;li&gt;Use visualization as often as possible&lt;/li&gt;
&lt;li&gt;Ensure everyone comes prepared&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dont"&gt;
  &lt;/a&gt;
  Don’t:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run a meeting just because “everyone is doing it”&lt;/li&gt;
&lt;li&gt;Mix up different meeting types&lt;/li&gt;
&lt;li&gt;Follow the rules blindly&lt;/li&gt;
&lt;li&gt;Run a meeting without any outcome (e.g., decisions, further questions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because Agile focuses on teamwork and collaboration, communication is key. Agile meetings can help you communicate in a structured, focused way. &lt;/p&gt;

&lt;p&gt;If you use Agile meetings properly, they will produce the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for team building&lt;/li&gt;
&lt;li&gt;Shared understanding of the work to be done&lt;/li&gt;
&lt;li&gt;Focus on the right things to do and alignment on the goal&lt;/li&gt;
&lt;li&gt;Transparency in processes and progress&lt;/li&gt;
&lt;li&gt;Continuous improvement through constant feedback and early identification of challenges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a closer look at each of the Agile meetings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sprint-planning"&gt;
  &lt;/a&gt;
  Sprint Planning
&lt;/h2&gt;

&lt;p&gt;The sprint planning ceremony comes at the beginning of each sprint. The &lt;strong&gt;Product Owner&lt;/strong&gt; and the &lt;strong&gt;Scrum Master&lt;/strong&gt; (or similar roles) and the &lt;strong&gt;development team&lt;/strong&gt; commit to the &lt;em&gt;sprint goal&lt;/em&gt;. For that goal, the development team decides which &lt;strong&gt;product backlog items&lt;/strong&gt; (PBIs) or &lt;strong&gt;user stories&lt;/strong&gt; (US) will enter the &lt;strong&gt;sprint backlog&lt;/strong&gt;. The sprint goal should be challenging but not impossible, and it should consider the business need as well as the capability of the team.&lt;/p&gt;

&lt;p&gt;After selecting the items, the development team creates a strategy to reach the sprint goal and presents it to the Product Owner and Scrum Master. The development team checks to see that it has all the necessary information to work toward the sprint goal and double checks that the estimates are still valid.&lt;/p&gt;

&lt;p&gt;This meeting references principles 8 and 11 of the Agile Manifesto.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Principle 8&lt;/em&gt; is about keeping a constant pace that’s directly linked to the capacity of the team:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Principle 11&lt;/em&gt;, self-organizing teams are the solution for developing great products. Sprint planning is self-organizing:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;The best architectures, requirements, and designs emerge from self-organizing teams.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commitment to the sprint goal&lt;/li&gt;
&lt;li&gt;Alignment on what has to be done&lt;/li&gt;
&lt;li&gt;Clarity about how to reach the sprint goal&lt;/li&gt;
&lt;li&gt;Just-in-Time capacity planning for more reliability and predictability&lt;/li&gt;
&lt;li&gt;Clarification of last questions and inconsistencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Anti-Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Product Owner determines which and how many items go into the sprint backlog&lt;/li&gt;
&lt;li&gt;The development team doesn’t think about how to reach the sprint goal&lt;/li&gt;
&lt;li&gt;Capacity planning doesn’t match the capability of the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#standupdaily-scrum"&gt;
  &lt;/a&gt;
  Standup/Daily Scrum
&lt;/h2&gt;

&lt;p&gt;The standup or daily Scrum is a brief but valuable meeting. It happens every day at the &lt;strong&gt;same time&lt;/strong&gt; and in the &lt;strong&gt;same place&lt;/strong&gt;. This ritual makes it easy for participants to structure the day around the standup. Everyone in the development team shares insights on the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What have I done in the last twenty-four hours to add value to our sprint goal?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What am I planning to do today to add value to our sprint goal?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Which impediments came my way that may potentially jeopardize our sprint goal?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Product Owner&lt;/strong&gt; is invited to take part in the meeting but has no speaking time. The &lt;strong&gt;Scrum Master&lt;/strong&gt; helps the team to run the meeting.&lt;/p&gt;

&lt;p&gt;Not only does the standup give transparency to everyone about the status of work, it makes impediments visible at an early stage. The teams can figure out how to remove the blockers from their flow. Additionally, by sharing their goals, they’re better able to focus on them. &lt;/p&gt;

&lt;p&gt;The standup helps to bring &lt;em&gt;principle 4&lt;/em&gt; of the Agile Manifesto into practice:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Business people and developers must work together daily throughout the project.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide an update on accomplishments and goals&lt;/li&gt;
&lt;li&gt;Identify blockers and take action on them&lt;/li&gt;
&lt;li&gt;Strengthen the individual focus of each team member&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Anti-Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only one person is speaking during the fifteen minutes&lt;/li&gt;
&lt;li&gt;Product owner never takes part&lt;/li&gt;
&lt;li&gt;The answers are always “Same as yesterday!”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Can’t answer all the questions or solve the problems during a fifteen-minute timebox? Encourage those responsible for finding a solution to make connect separately and let the rest of the team go back to work.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sprint-review"&gt;
  &lt;/a&gt;
  Sprint Review
&lt;/h2&gt;

&lt;p&gt;Since customer satisfaction plays an important role in Agile, in this fast-moving &lt;a href="https://www.thelivingcore.com/en/what-is-the-meaning-of-vuca-world/"&gt;VUCA world&lt;/a&gt;, you need customer feedback in short cycles to ensure you’re still on the right path. In the sprint review, the &lt;strong&gt;development team&lt;/strong&gt; presents the results of the last sprint to the &lt;strong&gt;Product Owner&lt;/strong&gt;, the &lt;strong&gt;Scrum Master&lt;/strong&gt;, and eventually some &lt;strong&gt;representatives of the customer&lt;/strong&gt; or other &lt;strong&gt;stakeholders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Product Owner and the customer give feedback to the development team. If any part of the results are not accepted, the development team will fix this during the next sprint.&lt;/p&gt;

&lt;p&gt;The sprint review corresponds to &lt;em&gt;principle 1&lt;/em&gt; of the Agile Manifesto:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Progress update for Product Owner and stakeholders&lt;/li&gt;
&lt;li&gt;Presentation of results for feedback &lt;/li&gt;
&lt;li&gt;Identifying failures and misinterpretation at an early stage&lt;/li&gt;
&lt;li&gt;Continuous learning&lt;/li&gt;
&lt;li&gt;Maximizing customer satisfaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Anti-Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The team has nothing to present&lt;/li&gt;
&lt;li&gt;The team or the Product Owner regularly skips the review&lt;/li&gt;
&lt;li&gt;The Product Owner or stakeholder doesn’t offer feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sprint-retrospective"&gt;
  &lt;/a&gt;
  Sprint Retrospective
&lt;/h2&gt;

&lt;p&gt;At the end of each sprint comes the sprint retrospective. In this team meeting, the &lt;strong&gt;development team&lt;/strong&gt;, the &lt;strong&gt;Product Owner&lt;/strong&gt;, and the &lt;strong&gt;Scrum Master&lt;/strong&gt; review how they have worked together. In many teams, the Scrum Master is the facilitator of this ceremony. If you don’t have one, each team member can take that role. The retrospective is an excellent starting point for continuous improvement and working to become more Agile; it delivers value even to teams unfamiliar with Agile methods.&lt;/p&gt;

&lt;p&gt;The retrospective is mentioned in &lt;em&gt;principle 12&lt;/em&gt; of the Agile Manifesto:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To get the most benefit out of the retrospective, it should be interactive and engaging. It is divided into five phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the stage&lt;/li&gt;
&lt;li&gt;Gather data&lt;/li&gt;
&lt;li&gt;Generate insights&lt;/li&gt;
&lt;li&gt;Make decisions&lt;/li&gt;
&lt;li&gt;Closing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are creative exercises available for each phase. One useful source is the &lt;a href="https://retromat.org/en/?id=136-110-25-38-104"&gt;Retromat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To run a valuable retrospective, psychological safety is a prerequisite. Many experienced facilitators use the Prime Directive and the Vegas Rule at the beginning of each retrospective to maintain the right approach: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vegas Rule: What happens in the Retrospective stays in the Retrospective.&lt;/li&gt;
&lt;li&gt;Prime Directive: Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand. – &lt;em&gt;Norman L. Kerth&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn more about the collaboration during the last sprint&lt;/li&gt;
&lt;li&gt;Find out: What was good? What didn’t work? What is missing?&lt;/li&gt;
&lt;li&gt;Make problems visible&lt;/li&gt;
&lt;li&gt;Understand the Why of what worked/what didn’t work&lt;/li&gt;
&lt;li&gt;Make decisions together&lt;/li&gt;
&lt;li&gt;Strengthen the trust within the team&lt;/li&gt;
&lt;li&gt;Continuous improvement of collaboration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Anti-Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything is always “good”&lt;/li&gt;
&lt;li&gt;No one wants to speak about “bad” aspects&lt;/li&gt;
&lt;li&gt;Only one person is speaking&lt;/li&gt;
&lt;li&gt;The team makes decisions, but nothing happens afterward&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backlog-refinement"&gt;
  &lt;/a&gt;
  Backlog Refinement
&lt;/h2&gt;

&lt;p&gt;Backlog refinement is an ongoing process and not an explicit ceremony. But many teams do this significant work in a separate meeting because, otherwise, it would be neglected or forgotten. &lt;/p&gt;

&lt;p&gt;With backlog refinement, you take responsibility for cleaning and prioritizing your backlog. Since requirements and learnings change during the development process, the backlog should not be written in stone. With the refinement ritual, you pick out the old and no-longer-necessary items and throw them away. &lt;/p&gt;

&lt;p&gt;In the refinement process, the &lt;strong&gt;development team&lt;/strong&gt;, the &lt;strong&gt;Product Owner&lt;/strong&gt;, and the &lt;strong&gt;Scrum Master&lt;/strong&gt; check if the definition of each item is good enough to work on and catch if anything crucial is missing. They can add or specify &lt;em&gt;acceptance criteria&lt;/em&gt; and other important information until the team’s &lt;em&gt;definition of ready&lt;/em&gt; is fulfilled. If there are open questions, the team takes action to clarify them. The team reviews the estimates; if there are no estimates yet, the team will create them. The feedback and the learnings from the sprint review will influence the backlog refinement and priorities. &lt;/p&gt;

&lt;p&gt;Holding an extra meeting for refinement can sometimes get boring—people have problems concentrating and the quality drops. I prefer the &lt;a href="https://blog.codecentric.de/en/2021/03/10-minute-story-time/"&gt;ten-minute story time&lt;/a&gt;. After each standup, the team picks one item and refines it for a maximum of ten minutes. This provides an ongoing process and a set time for completing the task. Other teams run one meeting each week. You should determine what’s best for your team.&lt;/p&gt;

&lt;p&gt;Backlog refinement refers to &lt;em&gt;principle 10&lt;/em&gt; of the Agile Manifesto:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Simplicity—the art of maximizing the amount of work not done—is essential.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The better the team understands what’s required, the less likely they are to do unnecessary work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Duration:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;There is no official timebox for backlog refinement. Older versions of the Scrum Guide suggest that teams block ten percent of the sprint time for it, but you should take as much time as you need to refine the work items. That will depend on the quality of the requirements, their complexity, or the experience of the &lt;em&gt;Product Owner&lt;/em&gt; or &lt;em&gt;development team&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determine the status of the backlog&lt;/li&gt;
&lt;li&gt;Make sure critical information is in place so the team can concentrate on development&lt;/li&gt;
&lt;li&gt;Prepare for a successful sprint&lt;/li&gt;
&lt;li&gt;Make sure that everyone is on the same page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Anti-Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Items are poor quality&lt;/li&gt;
&lt;li&gt;The team has to rewrite the items&lt;/li&gt;
&lt;li&gt;Too much information is missing&lt;/li&gt;
&lt;li&gt;The team only wants to be “ready” and doesn’t concentrate on the task&lt;/li&gt;
&lt;li&gt;One person is doing it alone&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Using different types of meetings for specific purposes supports the Agile concept of working in a structured way. Staying focused and on topic helps increase work quality and motivates your team. &lt;/p&gt;

&lt;p&gt;Take some time to review your meetings, so you know if you are still following their original intent or have unconsciously left the Agile path. You may find room for improvement. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;By Juliette Chevalier. Juliette works as a Software Engineer, teaching programming at conferences and bootcamps worldwide on the side. Her purpose is to empower others by showing them what we can do with our brain, a computer, and wi-fi.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>productivity</category>
      <category>agile</category>
    </item>
    <item>
      <title>Establishing connections less than 1GB with Direct Connect, Transit Gateway, VPN and Sophos XG on AWS</title>
      <author>Víctor Pérez Pereira</author>
      <pubDate>Tue, 09 Nov 2021 18:54:31 +0000</pubDate>
      <link>https://dev.to/aws-builders/establishing-connections-less-than-1gb-with-direct-connect-transit-gateway-vpn-and-sophos-xg-on-aws-4kkc</link>
      <guid>https://dev.to/aws-builders/establishing-connections-less-than-1gb-with-direct-connect-transit-gateway-vpn-and-sophos-xg-on-aws-4kkc</guid>
      <description>&lt;p&gt;When we have many environments (development, quality and production) on AWS and we separate in different VPCs or AWS accounts, we can have a &lt;strong&gt;Transit Gateway&lt;/strong&gt;; however, when we require an on-premise scenario using &lt;strong&gt;Direct Connect&lt;/strong&gt; with less than 1GB to Transit Gateway native is not supported but, in the following description we’ll see an option of how we can solve it applying the mentioned services with &lt;strong&gt;AWS Direct Connect of 100Mbps&lt;/strong&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important"&gt;
  &lt;/a&gt;
  Important
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;In the next scenario we are using a telecommunications provider that offers connections lower than 1GB on AWS Direct Connect.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS Direct Connect&lt;/strong&gt; &lt;em&gt;“AWS Direct Connect links your internal network to an AWS Direct Connect location over a standard Ethernet fiber-optic cable. One end of the cable is connected to your router, the other to an AWS Direct Connect router. With this connection, you can create virtual interfaces directly to public AWS services (for example, to Amazon S3) or to Amazon VPC, bypassing internet service providers in your network path. An AWS Direct Connect location provides access to AWS in the Region with which it is associated. You can use a single connection in a public Region or AWS GovCloud (US) to access public AWS services in all other public Regions.”&lt;/em&gt; &lt;a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Welcome.html"&gt;1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Transit Gateway&lt;/strong&gt; &lt;em&gt;“A transit gateway is a network transit hub that you can use to interconnect your virtual private clouds (VPCs) and on-premises networks. As your cloud infrastructure expands globally, inter-Region peering connects transit gateways together using the AWS Global Infrastructure. Your data is automatically encrypted and never travels over the public internet.”&lt;/em&gt; &lt;a href="https://aws.amazon.com/transit-gateway/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cards.sort-order=desc"&gt;2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS VPN&lt;/strong&gt; &lt;em&gt;“AWS Virtual Private Network solutions establish secure connections between your on-premises networks, remote offices, client devices, and the AWS global network. AWS VPN is comprised of two services: AWS Site-to-Site VPN and AWS Client VPN. Each service provides a highly-available, managed, and elastic cloud VPN solution to protect your network traffic. AWS Site-to-Site VPN creates encrypted tunnels between your network and your Amazon Virtual Private Clouds or AWS Transit Gateways. For managing remote access, AWS Client VPN connects your users to AWS or on-premises resources using a VPN software client.”&lt;/em&gt; &lt;a href="https://aws.amazon.com/vpn/"&gt;3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOPHOS&lt;/strong&gt; &lt;em&gt;“Sophos XG Firewall is the only network security solution that is able to fully identify the user and source of an infection on your network and automatically limit access to other network resources in response. ... Using Security Heartbeat, we can do much more than just see the health status of an endpoint.”&lt;/em&gt; &lt;a href="https://www.sophos.com/en-us/medialibrary/PDFs/factsheets/sophos-xg-series-appliances-brna.pdf"&gt;4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-Yf62VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70n79l4o03n7w85aidnf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-Yf62VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70n79l4o03n7w85aidnf.png" alt="Image description" width="647" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#diagram-description"&gt;
  &lt;/a&gt;
  Diagram description
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, we are using &lt;strong&gt;AWS Control Tower&lt;/strong&gt; to segment accounts; we have three AWS accounts in the diagram, an account with the name: Networking; it will be used for interconnection with on-premise and AWS. We also associate the transit gateway attached to the other AWS accounts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a connection from on-premise to AWS using Direct Connect 100Mbps with BGP and VIF (Virtual Interfaces) private.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create and configure a floating VPC (Virtual Private Gateway), and this point is very important since it’s floating is not associated with any VPC . &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a transit VPC, it will have four subnets, two private and two public subnets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy and configure two Sophos XG EC2 instances to our communication routers between Direct Connect and Transit Gateway. You can obtain Sophos XG from AWS Marketplace. We use two Sophos XG with HA (high availability) in two different availability zones.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As previously presented, when the template is deployed it assigns an Elastic IP reserved to each Sophos XG, which we will use for creating VPC connection. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We Configure Transit Gateway on the AWS account of name: “Networking” and we associate the VPC’s AWS accounts QA/DEV and PROD, also the “transit” VPC which have the Sophos XG.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We Create and configure a VPN connection with AWS on each Sophos XG using Elastic IP reserved on the EC2 instances. It’s important that at the moment of configuring, we do not use the option of Transit Gateway given, we use floating VPG (Virtual Private Gateway)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#in-sophos-xg"&gt;
  &lt;/a&gt;
  In Sophos XG
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We create and configure a VPN connection with AWS and associate the routes for the BGP that we obtained from the configuration file on AWS-VPN console. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We configure firewall policy and routes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#in-the-route-table-of-vpc-and-aws"&gt;
  &lt;/a&gt;
  In the route table of VPC and AWS
&lt;/h3&gt;

&lt;p&gt;Previously, the VPCs that we will use from the three AWS accounts were associated with the Transit Gateway, so now, we only must modify the routing tables to go through Transit Gateway.&lt;/p&gt;

&lt;p&gt;At this point, we have a solution created and configured using AWS Direct Connect of 100Mbps with AWS Transit Gateway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments-and-recommendations"&gt;
  &lt;/a&gt;
  Comments and recommendations
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Understand the use of Transit Gateway, VPN and Direct Connect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take Transit Gateway Workshops, this is an important service to execute AWS configurations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use any router brand (for example: Forti, Checkpoint, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Activate VPC Flow Logs and review blocked and accepted traffic on VPCs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In my case I created a Sandbox VPC in the same region as the AWS account “Networking” to do tests and simulations with other VPC.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/integrating-sub-1-gbps-hosted-connections-with-aws-transit-gateway/"&gt;https://aws.amazon.com/blogs/networking-and-content-delivery/integrating-sub-1-gbps-hosted-connections-with-aws-transit-gateway/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/marketplace/pp/prodview-ga4qvij427bvw?sr=0-5&amp;amp;ref_=beagle&amp;amp;applicationId=AWSMPContessa"&gt;https://aws.amazon.com/marketplace/pp/prodview-ga4qvij427bvw?sr=0-5&amp;amp;ref_=beagle&amp;amp;applicationId=AWSMPContessa&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>vpn</category>
    </item>
  </channel>
</rss>
