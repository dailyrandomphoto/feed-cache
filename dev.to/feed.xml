<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>hopOn -  Car Sharing and Rental App</title>
      <author>Shivani Singh</author>
      <pubDate>Sat, 08 May 2021 08:14:01 +0000</pubDate>
      <link>https://dev.to/singhshivani/hopon-car-sharing-and-rental-app-fjb</link>
      <guid>https://dev.to/singhshivani/hopon-car-sharing-and-rental-app-fjb</guid>
      <description>&lt;p&gt; 
 A car sharing &amp;amp; rental app using &lt;a href="https://flutter.dev/"&gt;Flutter, &lt;/a&gt;&lt;a href="https://firebase.google.com/"&gt;Firebase &lt;/a&gt; &amp;amp; &lt;a href="https://cloud.google.com/"&gt;Google Maps APIs&lt;/a&gt; üî•
&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#about-the-app"&gt;
  &lt;/a&gt;
  About the App üöò
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;hopOn is flutter based application for car sharing and rental services.&lt;/li&gt;
&lt;li&gt;The two main functions that app includes are -

&lt;ol&gt;
&lt;li&gt;Rent a nearby car &lt;/li&gt;
&lt;li&gt;Give your car on rent&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The app uses 3 Google Maps API

&lt;ol&gt;
&lt;li&gt;Geocoding API (provides geocoding and reverse geocoding of addresses)&lt;/li&gt;
&lt;li&gt;Places API (returns information about places using HTTP requests)&lt;/li&gt;
&lt;li&gt;Directions API (returns JSON or XML-formatted directions between locations)&lt;/li&gt;
&lt;li&gt;This app has been completed with the detail study which includes Wireframe, methods, API study etc. All the information has been provided in the Github repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wireframe"&gt;
  &lt;/a&gt;
  Wireframe‚úíÔ∏è
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/3ALznWfTL7k7nPWyPuMfKT/Vehicle-Sharing-App?node-id=520%3A2"&gt;https://www.figma.com/file/3ALznWfTL7k7nPWyPuMfKT/Vehicle-Sharing-App?node-id=520%3A2&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Feel free to ask your doubts and contribute to this project.&lt;/li&gt;
&lt;li&gt;Find the app video with the detail explaination about methods and resources(Firebase, GCP etc.) on Github - &lt;a href="https://github.com/Singh-Shivani/hopOn/"&gt;https://github.com/Singh-Shivani/hopOn/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Do ‚≠ê the repo.&lt;/li&gt;
&lt;li&gt;Keep hustling &amp;amp; Stay safe‚ù§Ô∏è&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flutter</category>
      <category>googlecloud</category>
      <category>firebase</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Top 5 Reasons to Launch P2P Crypto Exchange ‚Äì You Need to know!</title>
      <author>KatrinKunze</author>
      <pubDate>Sat, 08 May 2021 08:00:39 +0000</pubDate>
      <link>https://dev.to/katrinkunze8/top-5-reasons-to-launch-p2p-crypto-exchange-you-need-to-know-2g3d</link>
      <guid>https://dev.to/katrinkunze8/top-5-reasons-to-launch-p2p-crypto-exchange-you-need-to-know-2g3d</guid>
      <description>&lt;p&gt;Cryptocurrencies have been touching new highs every day as many people are interested in adopting cryptocurrencies for facilitating seamless transactions. It makes the crypto exchanges popular and establishes them as a profitable business. Many crypto traders are utilizing P2P exchanges to make hassle-free transactions by devoiding third parties. The growing demand for  P2P crypto exchange development implies the potency of P2P exchange. In this blog, you will get to know the outline description of P2P crypto exchanges and why their demands are increasing in the crypto space.&lt;/p&gt;

&lt;p&gt;What is P2P Crypto Exchange?&lt;/p&gt;

&lt;p&gt;In the early days of crypto trading before the arrival of crypto exchange platforms, a person interested in selling/receiving cryptocurrencies is required to meet with other people in person to barter their digital assets in exchange for other assets. Then popped up the centralized exchange platforms which incur high transaction charges. Hence, the crypto community evolved with P2P crypto exchanges to promote direct trading and reduced transaction costs. &lt;/p&gt;

&lt;p&gt;P2P crypto exchanges allow buyers and sellers to communicate directly and complete the trading. Escrow system is used to monitor the crypto exchanges and helps to ensure the secured crypto transfers.&lt;/p&gt;

&lt;p&gt;How does P2P Exchange work?&lt;br&gt;
If you want to conduct crypto trading in a P2P exchange, follow the below steps&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        Register details in P2P crypto exchange and create an
              account.

          Based on the requirements, view the orders available in the crypto exchange.
         Select the amount you want to trade and place an order.
         Finally, buy or sell the cryptos with the person directly without any intermediaries.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Top 5 Advantages of P2P Crypto Exchange&lt;br&gt;
Secured business&lt;/p&gt;

&lt;p&gt;P2P Crypto Exchanges have followed high-security mechanisms like 2-factor authentication, Email verification, biometric authentication, SSL to ensure security in crypto transfers. It makes the system reliable, secured and makes it harder for hacking. Hence the P2P exchange launching is a secured business.&lt;/p&gt;

&lt;p&gt;High Profits&lt;/p&gt;

&lt;p&gt;Exchange platforms are earning their major revenues from transaction fees that have been collected from traders. Professional crypto-traders perform crypto trading extensively that will directly raise the transaction revenues and earn the high profits.&lt;/p&gt;

&lt;p&gt;No third parties&lt;/p&gt;

&lt;p&gt;In a P2P Exchange, the seller and buyer interacts directly, while the escrow system monitors the transactions and removes the intermediaries, which could automatically reduce operational costs and boost up your business.&lt;/p&gt;

&lt;p&gt;Quick crypto transfers&lt;/p&gt;

&lt;p&gt;The transaction takes place in a peer-to-peer way with no middlemen intervention, saving time and facilitating the quick transaction. Handling the P2P crypto exchanges is easy, can be processed quickly and hassle-free.&lt;/p&gt;

&lt;p&gt;Future-proofed business&lt;/p&gt;

&lt;p&gt;Cryptocurrencies will reach a high peak in the future. So, advanced P2P crypto exchanges will continue to grow in demand. Launching P2P crypto exchanges will help to occupy a leading position in the crypto space.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;br&gt;
This is all about the explanation of the P2P crypto exchange. Now you have understood the benefits of the P2P crypto exchange business. If you want to know more about P2P exchange, approach Blockchain Firm and leverage the lucrative deals!&lt;/p&gt;

&lt;p&gt;For More: &lt;a href="https://www.blockchainfirm.io/p2p-exchange-development"&gt;https://www.blockchainfirm.io/p2p-exchange-development&lt;/a&gt;&lt;/p&gt;

</description>
      <category>p2pcrypto</category>
      <category>cryptoexchange</category>
    </item>
    <item>
      <title>Do you use subdomains?</title>
      <author>Madza</author>
      <pubDate>Sat, 08 May 2021 07:41:52 +0000</pubDate>
      <link>https://dev.to/madza/do-you-use-subdomains-2go1</link>
      <guid>https://dev.to/madza/do-you-use-subdomains-2go1</guid>
      <description>&lt;p&gt;Subdomains are the part of a domain that comes before the main domain name and domain extension. They are created to organize and navigate to different sections of the website.&lt;/p&gt;

&lt;p&gt;Do you use subdomains for your personal domain like &lt;code&gt;awesomeproject.mydomain.com&lt;/code&gt;? &lt;/p&gt;

&lt;p&gt;If so, could you elaborate on your reasons why do you prefer them over subdirectories like &lt;code&gt;mydomain.com/awesomeproject&lt;/code&gt; or buying a dedicated domain like &lt;code&gt;awesomeproject.com&lt;/code&gt;?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>domain</category>
    </item>
    <item>
      <title>Beautifully encapsulate table related logic using a custom data source + sorting using directives</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Sat, 08 May 2021 07:03:51 +0000</pubDate>
      <link>https://dev.to/angular/beautifully-encapsulate-table-related-logic-into-a-custom-data-source-sorting-using-directives-1pc7</link>
      <guid>https://dev.to/angular/beautifully-encapsulate-table-related-logic-into-a-custom-data-source-sorting-using-directives-1pc7</guid>
      <description>&lt;p&gt;Tables are a fundamental part of the web. It is used in most of the applications out there to present data in a readable and digestible way. Tables can come out as very simple components, but they can be a real pain to work with if things are not organized properly. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;When the table we are dealing with has a lot of columns, rows, and multiple functionalities like sorting, filtering, etc, things can get real complex real fast.&lt;/p&gt;

&lt;p&gt;If we are not very careful in architecting tables for our applications, there can be all sorts of issues that might come into the picture as we start developing. This is the primary reason why we have a lot of table-related libraries available.&lt;/p&gt;

&lt;p&gt;One such great component for Angular is the Table component from Angular Material. It's a very solid table component that can be used without any hassle and is well documented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkeccFRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ce6zmfvkqijuuum8ewec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkeccFRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ce6zmfvkqijuuum8ewec.png" alt="Table with sorting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-commonly-seen"&gt;
  &lt;/a&gt;
  Features commonly seen
&lt;/h2&gt;

&lt;p&gt;The most common features that can be seen in any table component are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sorting&lt;/li&gt;
&lt;li&gt;Filtering&lt;/li&gt;
&lt;li&gt;Pagination
etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Implementing these from scratch could take time and If you don't know what you are doing, can lead to performance issues when dealing with huge data. In this article, I will be only focusing on managing the data for the table in a nice way and how to implement sorting in the table with the help of directives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-data-source"&gt;
  &lt;/a&gt;
  Creating the Data Source
&lt;/h2&gt;

&lt;p&gt;This approach is seen in the Angular Material table where we have the concept of Data Source. Here is what the official doc says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The DataSource is meant to serve as a place to encapsulate any sorting, filtering, pagination, and data retrieval logic specific to the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The data source will be the "one place" where we will segregate all the logic related to the table. In this way, our component will not be polluted. Also, another benefit that we get is that the common functionalities can be shared.&lt;/p&gt;

&lt;p&gt;We are going to try and build something similar to the Material DataSource. The whole point of the post is to show you that you could do things this way too. It's like a starting point for someone who would like to explore more on this stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-abstract-class"&gt;
  &lt;/a&gt;
  Creating an abstract class
&lt;/h3&gt;

&lt;p&gt;First, we start by creating a simple abstract class that implements some of the basic stuff that we need for the table to work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubSink&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;dataSubject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// The exposed observable for the table  to user&lt;/span&gt;
  &lt;span class="nx"&gt;data$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * The data which drives the table. It will accept
   * either array or an observable.
   * @param data - data for the table
   */&lt;/span&gt;
  &lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me break down the code a bit.&lt;br&gt;
The class &lt;code&gt;DataSource&amp;lt;T&amp;gt;&lt;/code&gt; accepts a generic type that can be provided to have proper typing for the data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subsink&lt;/code&gt; is a tiny little library that can help you manage your subscriptions with ease. You can initialize it and add subscriptions to it &lt;code&gt;subs.add(subscription)&lt;/code&gt; and then do&lt;br&gt;
&lt;code&gt;subs.unsubscribe()&lt;/code&gt; to unsubscribe from all of the subscriptions.&lt;br&gt;
Check it out here:  &lt;a href="https://www.npmjs.com/package/subsink"&gt;npm&lt;/a&gt;  |  &lt;a href="https://github.com/wardbell/subsink#readme"&gt;github&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Firstly, Initialize a subject that will be used for pushing the data out of the data source. The &lt;code&gt;data$&lt;/code&gt; observable is what our table will be relying on.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;constructor&lt;/code&gt; takes an initial value for the data source which is not mandatory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;destory&lt;/code&gt; method does the cleanup of subscriptions and should be called in the table component's &lt;code&gt;ngOnDestroy&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;updateData&lt;/code&gt; method accepts either an array or an observable just for some flexibility. This function can be used to update the data in the data source. Say if you are getting data from an API call in the component, you can call this method and pass the data to the data source. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-it-in-the-component"&gt;
  &lt;/a&gt;
  Using it in the component
&lt;/h2&gt;

&lt;p&gt;Now that we have our basic data source ready, we can see how it can be used inside a component.&lt;/p&gt;

&lt;p&gt;Once the component is created, In my case &lt;code&gt;User&lt;/code&gt; component, the first thing we have to do is to create a dedicated data source for the User component. I call it the &lt;code&gt;UserDataSoruce&lt;/code&gt;. We just have to create a class and extend our base &lt;code&gt;DataSoruce&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now, this is all we need. Once we start implementing the sorting functionality, more things will be added to the data source.&lt;/p&gt;

&lt;p&gt;Setting up the component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app-user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./user.component.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./user.component.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;changeDetection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectionStrategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OnPush&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userDataSoruce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt; &lt;span class="c1"&gt;// Create the instance of datasoruce&lt;/span&gt;
  &lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// observable used by table&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;trackBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interesting parts of the code above is creating the instance of our &lt;code&gt;UserDataSoruce&lt;/code&gt; class. And in the &lt;code&gt;ngOnInit&lt;/code&gt; we get the user data from the API and is &lt;br&gt;
and the template file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Last name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Birthday&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt;&lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let user of users$ | async;trackBy:trackBy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.firstname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.lastname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.birthday}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our table should be up and running by now. This would seem overly complicated for just showing some data in a table. Yes, it does! But once we start to implement sorting and other features, it will be clear why this would be a better approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-sorting"&gt;
  &lt;/a&gt;
  Implementing Sorting
&lt;/h2&gt;

&lt;p&gt;Now that we have the table and the data source setup, it's time to implement sorting.&lt;br&gt;
How would you normally implement sorting? Will all the logic for sorting be added inside your component?&lt;/p&gt;

&lt;p&gt;In this approach, we are going to abstract away almost all of the logic related to sorting into our data source and by using directives.&lt;/p&gt;

&lt;p&gt;So what we are trying to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user should be able to sort the column in ascending or descending order&lt;/li&gt;
&lt;li&gt;user will be seeing the default sort data on clicking 3 times:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Default --&amp;gt; Ascending --&amp;gt; Descending --&amp;gt; Default&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user will be shown arrows to mark the current sort direction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The approach that we are going to take is very similar to what is seen in the Angular Material Sort component. You will be able to understand some of the inner workings of it.&lt;/p&gt;

&lt;p&gt;### Creating the necessary directives&lt;/p&gt;

&lt;p&gt;Our directives will be taking care of all the above points. We don't have to maintain any kind of state inside our component, making the component clean.&lt;/p&gt;

&lt;p&gt;We will be needing two directives (one is actually gonna be a component):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Main Sorter Directive&lt;/li&gt;
&lt;li&gt;Sort Header Component&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#main-sorter-directive"&gt;
  &lt;/a&gt;
  Main Sorter Directive
&lt;/h4&gt;

&lt;p&gt;This should be placed on the &lt;code&gt;table&lt;/code&gt; tag and acts as our main parent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[sorter]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- selector&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;sortChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SortChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// If column is not the same as active, reset the direction&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Default --&amp;gt; Ascending&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="c1"&gt;// Ascending --&amp;gt; Descending&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Descending --&amp;gt; Default&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Emit the current active column and the direction&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two variables for managing the currently active column and the direction of sort. Then we have an event that will be emitted when the user clicks on the sort header.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sort&lt;/code&gt; function takes the column id to sort as the input. It just modifies the state according to the column being sorted and the prev state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sort-header-component"&gt;
  &lt;/a&gt;
  Sort Header component
&lt;/h4&gt;

&lt;p&gt;So we are using a component here as we need to show the arrow mark based on the sort direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[sortHeader]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;div class="sort-col"&amp;gt;
      &amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;
      &amp;lt;div ngClass]="{
          arrow: true,
          hide: sorter?.active !== ref || sorter?.direction === null,
          asc: sorter?.active === ref &amp;amp;&amp;amp; sorter?.direction === 'asc',
          desc: sorter?.active === ref &amp;amp;&amp;amp; sorter?.direction === 'desc'
        }"&amp;gt;ü°°&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- check the source code for styles&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SortHeader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- unique key for the column&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;HostListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- call the sort function in the parent&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Inject the parent directive&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interesting part of the above code is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are injecting our parent directive in the header component. Angular's DI system will then provide us with access to the parent sorter where we have written our sort function.&lt;br&gt;
Read more: &lt;a href="https://angular.io/guide/hierarchical-dependency-injection#hierarchical-injectors"&gt;https://angular.io/guide/hierarchical-dependency-injection#hierarchical-injectors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have our sort related directives ready, this is how we update the template code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt; &lt;span class="na"&gt;sortHeader&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"lastname"&lt;/span&gt; &lt;span class="na"&gt;sortHeader&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"birthday"&lt;/span&gt; &lt;span class="na"&gt;sortHeader&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Birthday&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let user of users$ | async;trackBy:trackBy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.firstname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.lastname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.birthday}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See that we have added the &lt;code&gt;sorter&lt;/code&gt; selector to our &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag and &lt;br&gt;
&lt;code&gt;sortHeader&lt;/code&gt; to our &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; along with the unique key for that column &lt;code&gt;ref&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can simple listen to the output and handle the change in your component like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;sorter&lt;/span&gt; &lt;span class="na"&gt;(sortChange)=&lt;/span&gt;&lt;span class="s"&gt;"handleSort($event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we will be doing something even better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-datasource-to-accommodate-sorting-feature"&gt;
  &lt;/a&gt;
  Updating DataSource to accommodate sorting feature
&lt;/h3&gt;

&lt;p&gt;We are going to make few changes to our &lt;code&gt;DataSoruce&lt;/code&gt; abstract class and add some for stuff so we can handle sorting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubSink&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// to save the initial sort order&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;inititalDataSubject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;initialData$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inititalDataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;dataSubject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// The exposed observable for the table  to user&lt;/span&gt;
  &lt;span class="nx"&gt;data$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Register the sorter with the datasource
   */&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listenToSortChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inititalDataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="nx"&gt;sortLogic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SortChangeEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Update the data when the user sorts
   * @param sorter - sorter instance
   */&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;listenToSortChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortChange&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;withLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialData$&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- get the data&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;sortEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortLogic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;([]))&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are the changes we made:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add an abstract method &lt;code&gt;sortLogic&lt;/code&gt; which gets the sort change event and the data. It should return an array.&lt;/li&gt;
&lt;li&gt;Add a setter to register our &lt;code&gt;Sorter&lt;/code&gt; with data source
What it does is that it listens to the sort change events and calls the &lt;code&gt;sortLogic&lt;/code&gt; method which should be implemented by our &lt;code&gt;UserDataSource&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#updating-userdatasource"&gt;
  &lt;/a&gt;
  Updating UserDataSource
&lt;/h4&gt;

&lt;p&gt;Now we have to implement the &lt;code&gt;sortLogic&lt;/code&gt; method in our &lt;code&gt;UserDataSource&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sortLogic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SortChangeEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;birthday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- can provide custom sorting logic if needed&lt;/span&gt;
        &lt;span class="nx"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the method &lt;code&gt;sortLogic&lt;/code&gt; receives the &lt;code&gt;SortChangeEvent&lt;/code&gt; and the table &lt;code&gt;data&lt;/code&gt; as params. We can use this info to sort the data and return it. If a particular column needs custom sorting, that can be handled here as well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#updates-to-usercomponent"&gt;
  &lt;/a&gt;
  Updates to UserComponent
&lt;/h4&gt;

&lt;p&gt;Our component would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userDataSoruce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- get the sorter instance&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- register it with data source&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;trackBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get hold of the &lt;code&gt;Sorter&lt;/code&gt; instance using &lt;code&gt;ViewChild&lt;/code&gt; ( &lt;a href="https://angular.io/api/core/ViewChild"&gt;ref&lt;/a&gt; ) and then register it with the data source in the &lt;code&gt;ngAfterViewInit&lt;/code&gt; lifecycle hook. &lt;br&gt;
We are done with the sorting implementation. Now that table should be sorted when the user clicks on the header.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;I wanted to write about things like these which are not seen very commonly, we use libraries and never actually try to see how they are implemented. So I just wanted to open up the minds of those who haven't actually understood how powerful Angular can be. &lt;/p&gt;

&lt;p&gt;This won't be a perfect implementation, we can bring in a lot of optimizations to the code. We can extend this to include more functionalities like pagination, filtering, searching, etc. If you would like for me to write a continuation post, please do comment down below.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n5cij"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flutter Install &amp; Setup on Ubuntu 16.04+</title>
      <author>Otavio Monteagudo</author>
      <pubDate>Sat, 08 May 2021 07:03:51 +0000</pubDate>
      <link>https://dev.to/otamm/flutter-install-setup-on-ubuntu-16-04-5394</link>
      <guid>https://dev.to/otamm/flutter-install-setup-on-ubuntu-16-04-5394</guid>
      <description>&lt;h1&gt;
  &lt;a href="#flutter-install-amp-setup-on-ubuntu-1604"&gt;
  &lt;/a&gt;
  Flutter Install &amp;amp; Setup on Ubuntu 16.04+
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#install-amp-configure-flutter"&gt;
  &lt;/a&gt;
  Install &amp;amp; Configure Flutter
&lt;/h2&gt;

&lt;p&gt;First things first: let's install flutter through the snap store. If you are using Ubuntu 16.04 onwards, you likely already have the &lt;code&gt;snap&lt;/code&gt; command installed; if you are not, you can follow the instructions available for your distro at the "Install Snap Store on your Linux distribution" section on &lt;a href="https://snapcraft.io/snap-store"&gt;this&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUcdBdbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wgxz7mtwcps32vuq3fp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUcdBdbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wgxz7mtwcps32vuq3fp.png" alt="Some of the linux distros snap store is available for." title="Some of the linux distros snap store is available for."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;snap&lt;/code&gt; command available, install flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;flutter &lt;span class="nt"&gt;--classic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After flutter has finished installing, run a basic checkup which will also perform some automatic configuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter doctor &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWu4eEg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12plekbnhxgfqz6u4efn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWu4eEg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12plekbnhxgfqz6u4efn.png" alt="flutter doctor output" title="flutter doctor output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flutter has been installed, nice!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-amp-configure-java"&gt;
  &lt;/a&gt;
  Install &amp;amp; Configure Java
&lt;/h2&gt;

&lt;p&gt;First of all, we need to get the (community-backed) Open Java Development Kit before being able to use Android Studio. To get the latest stable verion of Java 8 (other versions can sometimes show some unpredictable problems while working alongside Flutter as of May 2021, so I recommend installing OpenJDK 8; don't worry, OpenJDK 8 is set to receive support at least until 2024), open your terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;openjdk-8-jdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a successful installation, it is time to set the &lt;code&gt;$JAVA_HOME&lt;/code&gt; environment variable, used by default by many applications which interact with your local java installation, Android Studio among them. Get a list of the currently installed JDKs in your system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;update-alternatives &lt;span class="nt"&gt;--config&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose from the list of locally installed versions (remember that Java 8 is the easiest to use with Flutter) the one which you would like to be the system's default and set &lt;code&gt;$JAVA_HOME&lt;/code&gt; to its path, &lt;strong&gt;without including the &lt;code&gt;/bin&lt;/code&gt; portion onwards of the path&lt;/strong&gt; (in my case for instance the correct path was &lt;code&gt;/usr/lib/jvm/java-8-openjdk-amd64&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#JAVA_HOME=&amp;lt;your_java_installation_path&amp;gt;, same as below if you followed instructions&lt;/span&gt;
&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/usr/lib/jvm/java-8-openjdk-amd64"&lt;/span&gt; &lt;span class="c"&gt;# my local path after installing openjdk-8&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"JAVA_HOME=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc &lt;span class="c"&gt;# sets JAVA_HOME env var for current user&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'export PATH=$PATH:$JAVA_HOME/bin'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .zshrc &lt;span class="c"&gt;# adds java's binaries to your path&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt; &lt;span class="c"&gt;# verifies that the variable was perenially set&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-amp-configure-android-studio-to-run-with-flutter"&gt;
  &lt;/a&gt;
  Install &amp;amp; Configure Android Studio to run with Flutter
&lt;/h2&gt;

&lt;p&gt;Download Android Studio &lt;a href="https://developer.android.com/studio"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After your download finishes, extract the Android Studio package into the &lt;code&gt;/usr/local/&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo tar&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; /usr/local &lt;span class="nt"&gt;-zxvf&lt;/span&gt; ~/Downloads/&amp;lt;android_studio_package&amp;gt;.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a successful extraction, run Android Studio's installation script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash /usr/local/android-studio/bin/studio.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should pop up the install wizard. Follow the wizard's instructions for the standard installation and you should eventually arrive at the starter screen. Select Configurations at the lower right corner and click on "Plugins":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAHrXY4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xaxzsat1b2kcksqkypy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAHrXY4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xaxzsat1b2kcksqkypy.png" alt="Android Studio starter screen" title="Android Studio starter screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install the "Flutter" official plugin, published by &lt;strong&gt;flutter.dev&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OT_uWSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6t1w69ero8xe234idnl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OT_uWSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6t1w69ero8xe234idnl.png" alt="Flutter Plugin"&gt;&lt;/a&gt; "Flutter Plugin")&lt;/p&gt;

&lt;p&gt;You will be prompted to install the Dart plugin (Flutter's base programming language) before proceeding. Click 'Ok' and restart the Android Studio IDE. The option to start a Flutter project should be visible now; click on it, then select 'Flutter Application' and click on 'Next'.&lt;/p&gt;

&lt;p&gt;You should be greeted by the project configuration screen. Configure your project's name, location and description as you wish, and point the field "Flutter SDK" to &lt;code&gt;/home/&amp;lt;your_user_name&amp;gt;/snap/flutter/common/flutter&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SG5XNpjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4j43px47sc5o9t04jtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SG5XNpjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4j43px47sc5o9t04jtl.png" alt="Flutter Project Config" title="Flutter Project Config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case the above path is not available, open a terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter doctor &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should then be greeted with the starter project screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JfI0NRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve413tpxbsn674bqlowx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JfI0NRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve413tpxbsn674bqlowx.png" alt="Flutter Project Starter" title="Flutter Project Starter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost done, now you need to accept the android licenses and double check your flutter installation's ownership in order to avoid future surprise build errors due to resources denied for Android Studio. Open up your terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter doctor &lt;span class="nt"&gt;--android-licenses&lt;/span&gt; &lt;span class="c"&gt;# accept Google's licenses, necessary to build the app&lt;/span&gt;
&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="nv"&gt;$USER&lt;/span&gt;:&lt;span class="nv"&gt;$USER&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/snap/flutter &lt;span class="c"&gt;# confirm you are the owner of local flutter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Android Studio is finally setup to run Flutter projects. Nice!&lt;br&gt;
You should also enable the Desktop Entry for Android Studio. In your project screen, click on "Tools" then "Create Desktop Entry":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRzH7pPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmw2u417r7v8x6ry2n7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRzH7pPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmw2u417r7v8x6ry2n7t.png" alt="AS Desktop Entry" title="AS Desktop Entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Android Studio shortcut should be available from the "Activities" menu now.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enabling-hardware-virtualization-for-the-android-emulator"&gt;
  &lt;/a&gt;
  Enabling Hardware Virtualization for the Android Emulator
&lt;/h2&gt;

&lt;p&gt;In order to run the emulator, we must first set up your CPU's hardware virtualization capabilities.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;kvm-ok&lt;/code&gt; in your terminal and your output should indicate whether KVM acceleration can be used or not (Kernel Virtual Machine, in a nutshell it is a bridge between the kernel with virtual devices which allows a virtual device to emulate its own hardware directly from the host computer's hardware, take a look &lt;a href="https://www.linux-kvm.org/page/FAQ#Preparing_to_use_KVM"&gt;here&lt;/a&gt; for more detailed information); if you have an AMD or Intel CPU, most likely it can.&lt;/p&gt;

&lt;p&gt;Provided you are indeed able to use KVM acceleration, it is time to setup KVM and authorize the current user for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="c"&gt;# update repositories&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils &lt;span class="c"&gt;# base packages&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;addgroup kvm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;addgroup libvirtd &lt;span class="c"&gt;# create user authorization groups&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;adduser &lt;span class="nv"&gt;$USER&lt;/span&gt; kvm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;adduser &lt;span class="nv"&gt;$USER&lt;/span&gt; libvirtd &lt;span class="c"&gt;# add current user to auth groups&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;virsh &lt;span class="nt"&gt;-c&lt;/span&gt; qemu:///system list &lt;span class="c"&gt;# checks if virtualization is ok&lt;/span&gt;
&lt;span class="c"&gt;# if everything went fine, your output will be something like:&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  Id    Name                           State&lt;/span&gt;
&lt;span class="c"&gt;#----------------------------------------------------&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And restart your user session. In the computer, not only the terminal. Log off the system and then login or reboot the PC already, I'll be waiting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-android-emulator-to-test-apps"&gt;
  &lt;/a&gt;
  Using the Android Emulator to Test Apps
&lt;/h2&gt;

&lt;p&gt;Now, open an Android Studio project and click on the 'AVD Manager' (Android Virtual Device) option located in the window's upper right corner:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic_JFGWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3hnfp08d78fu8s81qad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic_JFGWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3hnfp08d78fu8s81qad.png" alt="AVD Manager" title="AVD Manager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the "Create Virtual Device" button and a window with a list of devices should pop up, with the 'Phone' category preselected; I recommend you pick a device with Play Store enabled just in case you might want to use it later inside your emulated device. Mine was the Nexus 5.&lt;/p&gt;

&lt;p&gt;Click on the 'Next' button and a list of system images (Android OS Versions) should appear:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--omMizeIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsncydy90yb8wh6yiq1p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--omMizeIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsncydy90yb8wh6yiq1p.png" alt="System Images" title="System Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, download your target image (by simply clicking on 'Download' right beside the Release Name), select a locally downloaded image and click on 'Next', which should only be highlighted after the image was successfully downloaded.&lt;/p&gt;

&lt;p&gt;A window will then show up, offering you to customize your virtual device's properties such as screen orientation on startup, RAM usage, etc. Tweak the device to your possibilities should you like to do so, otherwise you can safely click on 'Finish'.&lt;/p&gt;

&lt;p&gt;If everything goes well, you should now see your device listed at the Android Virtual Device Manager window:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbCwZ7b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsyjl24niolby6uh2np7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbCwZ7b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsyjl24niolby6uh2np7.png" alt="AVD Manager List" title="System Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go back to your Android Studio project view; at the same line where the 'AVD Manager' button is located, there is a dropdown list of available devices just to the left of 'main.dart'. Select the emulator you have just set up and click the green 'play' button just to the right of 'main.dart'. In case the emulator is not listed there yet, open the AVD Manager window again and click the green 'play' button under the 'actions' label listed for your virtual device to load and open the emulator before running your Flutter code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zUSPDOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hli5nfnywjr2i5mcf289.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zUSPDOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hli5nfnywjr2i5mcf289.png" alt="Android Virtual Device" title="System Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that 'debug' ribbon in the upper right corner? In case you wanna get rid of it, add &lt;code&gt;debugShowCheckedModeBanner: false&lt;/code&gt; as a field of &lt;code&gt;MaterialApp&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-physical-android-device-to-test-apps"&gt;
  &lt;/a&gt;
  Using a Physical Android Device to Test Apps
&lt;/h2&gt;

&lt;p&gt;You'll need to have a local installation of the Android Debug Bridge in order to enable your computer to trade information (such as APK builds) with any connected Android devices, virtual or otherwise. &lt;/p&gt;

&lt;p&gt;The ADB consists of a client (the interface from which you run commands, which will be the ADB binary installed in your computer for all purposes of this tutorial), a daemon (which executes in the Android device the commands initially sent from the client) and a server (which runs locally in the PC, which has a default listening location at tcp://localhost:5037, and intermediates the communication between the client and the daemon).&lt;/p&gt;

&lt;p&gt;Very conveniently, Android Studio currently ships with an ADB, so if you followed the instructions above to install Android Studio, you already have one at your computer. It is possible to install ADB from the Ubuntu repositories alongside the one in Android Studio, but this invites headaches if your computer eventually confuses the locally installed versions, so instead let's setup our linux user to access Android Studio's ADB and then run ADB:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'export PATH=$PATH:$HOME"/Android/Sdk/platform-tools"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .bashrc &lt;span class="c"&gt;# adds adb to path&lt;/span&gt;
adb start-server &lt;span class="c"&gt;# launches adb server&lt;/span&gt;
adb devices &lt;span class="c"&gt;# lists connected devices&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running &lt;code&gt;adb devices&lt;/code&gt;, you most likely got an error. This error has registered the &lt;code&gt;$LOGNAME&lt;/code&gt; variable which contains the current user name, you will use it to insert your user into the &lt;code&gt;plugdev&lt;/code&gt; group, in case you are not there already. You also most likely do not have a set of &lt;code&gt;udev&lt;/code&gt; rules for android devices; UDEV rule files specify Ubuntu interactions with plugged in devices, and Ubuntu will refuse to perform certain interactions with your Android device unless it is previously authorized in an UDEV rules file. So, let's correct there errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# add user to plugdev group&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; plugdev &lt;span class="nv"&gt;$LOGNAME&lt;/span&gt;
&lt;span class="c"&gt;# downloads a very thorough UDEV rules file into the appropriate directory&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;wget &lt;span class="nt"&gt;-O&lt;/span&gt; /etc/udev/rules.d/51-android.rules https://raw.githubusercontent.com/NicolasBernaerts/ubuntu-scripts/master/android/51-android.rules
&lt;span class="c"&gt;# gives reading permission to the UDEV android file&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;a+r /etc/udev/rules.d/51-android.rules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reboot your current Linux user session to apply these changes, then open a terminal and run &lt;code&gt;adb devices&lt;/code&gt; again. In case you still have a UDEV-related error, your device's manufacturer ID probably is not listed in &lt;code&gt;/etc/udev/rules.d/51-android.rules&lt;/code&gt;; in this case, look the internet for your device's manufacturer UDEV id and manually add it to the rule list in the same format as the others. Notice how the only field with an unique value amongst the rows is &lt;code&gt;ATTR{idVendor}&lt;/code&gt;. If you do not receive any error, you'll notice that your device is listed as 'unauthorized'. Let's unlock the device for USB debugging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unlocking-developer-mode-amp-usb-debugging"&gt;
  &lt;/a&gt;
  Unlocking Developer Mode &amp;amp; USB Debugging
&lt;/h2&gt;

&lt;p&gt;In your android device, open up 'Settings', then 'About Phone'; tap your 'Build number' 5-6 times until a toast telling that 'You are now a developer!' pops up. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUtl1gvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skib1pnotczz49wo5s4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUtl1gvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skib1pnotczz49wo5s4k.png" alt="You Are Now a Developer" title="You are now a developer!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back to 'Settings', open System', you should see that 'Developer Options' were unlocked.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HI1vrpHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lovbrm5eg1yg8twi3dft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HI1vrpHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lovbrm5eg1yg8twi3dft.png" alt="Developer Options" title="Developer Options entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tap this new entry check 'USB debugging' just under the 'Debug' section. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqiCkhbd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vp2kw9urr2dalqfvorb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqiCkhbd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vp2kw9urr2dalqfvorb.png" alt="USB Debugging" title="USB Debugging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plug your Android device in your PC via USB, then run &lt;code&gt;adb devices&lt;/code&gt; on your terminal. The output should list your device and also point it is unlocked for debugging. Now, go back to Android Studio, click on the device dropdown list (the one in which you selected your Virtual Device before) and your physical device should now be listed, select it. Click on the 'run' button and you should see the app in your device, ready to be interacted with.&lt;/p&gt;

&lt;p&gt;Congratulations! You are now a Flutter developer. If this article has helped you in any way, please remember to give a heart, comment, etc. Good luck in your developer journey!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>ubuntu</category>
      <category>android</category>
    </item>
    <item>
      <title>Do you code on weekends?</title>
      <author>Madza</author>
      <pubDate>Sat, 08 May 2021 06:56:09 +0000</pubDate>
      <link>https://dev.to/madza/do-you-code-on-weekends-2ooe</link>
      <guid>https://dev.to/madza/do-you-code-on-weekends-2ooe</guid>
      <description>&lt;p&gt;Many devs strictly believe that resting and family time is equally important as work, leaving weekends code-free:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--klHHxshB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3jdwxzvtazghun8nw6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klHHxshB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3jdwxzvtazghun8nw6w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you code on weekends?&lt;br&gt;
If so, what type of projects are you working on?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>Quick Introduction to typedef in C++</title>
      <author>Aastha Gupta</author>
      <pubDate>Sat, 08 May 2021 06:45:25 +0000</pubDate>
      <link>https://dev.to/guptaaastha/quick-introduction-to-typedef-in-c-5362</link>
      <guid>https://dev.to/guptaaastha/quick-introduction-to-typedef-in-c-5362</guid>
      <description>&lt;p&gt;C++ is a strongly typed language which means we take types very seriously in the C++ community! While types are important and reduce bugs, it gets tiresome pretty quickly when there's an inbuilt type with a long name that you‚Äôve to use repetitively throughout your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Examples&lt;/span&gt;

&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;product_one&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Introducing &lt;code&gt;typedef&lt;/code&gt; declarations, easy effortless way to declare and use types in your file. &lt;code&gt;typedef&lt;/code&gt; declarations can be considered as nicknames‚ú® that you give to an inbuilt type and whenever you want to say &lt;code&gt;inbuilt-type&lt;/code&gt;, you say their &lt;em&gt;nickname&lt;/em&gt; instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;UL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;UL&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Equivalent to unsigned long num;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PRODUCT&lt;/span&gt;
&lt;span class="n"&gt;PRODUCT&lt;/span&gt; &lt;span class="nf"&gt;product_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"notebook"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;54.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// Equivalent to std::pair &amp;lt;std::string,double&amp;gt; ("notebook",54.5);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In contrast to the &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt;, and &lt;code&gt;enum&lt;/code&gt; declarations, &lt;code&gt;typedef declarations&lt;/code&gt; &lt;em&gt;do not introduce new types&lt;/em&gt;, they simply introduce new names for existing types. What‚Äôs more exciting is that you can declare any type with &lt;code&gt;typedef&lt;/code&gt;, including pointers, functions and array types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt; &lt;span class="n"&gt;STRUCT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p_STRUCT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// the following two objects have the same type&lt;/span&gt;
&lt;span class="n"&gt;pSTRUCT&lt;/span&gt; &lt;span class="n"&gt;p_struct_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;STRUCT&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p_struct_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;typedef&lt;/code&gt; declarations are &lt;em&gt;scoped&lt;/em&gt;, that is you can declare a &lt;code&gt;variable&lt;/code&gt; with the same name as of the &lt;code&gt;typedef&lt;/code&gt; in the same file in a different scope and you‚Äôll face no type errors whatsoever!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;UL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;UL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
   &lt;span class="c1"&gt;// re-declaration hides typedef name&lt;/span&gt;
   &lt;span class="c1"&gt;// now UL is an unsigned int variable in this scope&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// typedef UL back in scope&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, I would highly advise against this practice because it eventually makes your file less readable and more confusing which is not something you‚Äôd want to do.ü§∑&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In summary, you can use &lt;code&gt;typedef&lt;/code&gt; declarations to construct shorter and more meaningful names to the types that are already defined by the language or for the types that you have declared. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hopefully this article gave you a brief introduction to typedef and you had fun reading it. To get more information on the topic, refer the docs &lt;a href="https://en.cppreference.com/w/cpp/language/typedef"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thanks for giving this article a read and I'll see you in the next one üòÑ  &lt;/p&gt;

</description>
      <category>cpp</category>
      <category>typedef</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>FUSE</title>
      <author>Dharaneedhar Reddy</author>
      <pubDate>Sat, 08 May 2021 06:44:14 +0000</pubDate>
      <link>https://dev.to/dharaneedhar828/fuse-4lpc</link>
      <guid>https://dev.to/dharaneedhar828/fuse-4lpc</guid>
      <description>&lt;p&gt;&lt;strong&gt;Filesystem in Userspace (FUSE)&lt;/strong&gt; is a loadable Unix kernel module that allows non-privileged users to create their file systems without editing the kernel code. The code of these file systems is run on userspace programs ‚Äì FUSE helps them link to the kernel interface.&lt;br&gt;
FUSE is available on several operating systems, including Linux, macOS, and Android.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1R2py9RV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a069wnyzzgo6mq6ztqz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1R2py9RV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a069wnyzzgo6mq6ztqz4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
FUSE is built on two main components: the fuse kernel module and the libfuse userspace library. The libfuse &lt;strong&gt;library&lt;/strong&gt; provides functionality to mount and unmount file systems.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NbbS22Pa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrxu97eni3rtan3fhrcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbbS22Pa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrxu97eni3rtan3fhrcy.png" alt="Alt Text"&gt;&lt;/a&gt; It also enables reading and responding to kernel requests.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q7MR5PT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7r36eobi2w5leaup245.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7MR5PT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7r36eobi2w5leaup245.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>fuse</category>
      <category>filesystem</category>
      <category>operatingsystem</category>
      <category>unix</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 179</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 08 May 2021 06:35:57 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-179-584i</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-179-584i</guid>
      <description>&lt;p&gt;üëã Emberistas! üêπ&lt;/p&gt;

&lt;p&gt;Global Accessibility Awareness Day, Readers' Question: Embroider status update, &lt;code&gt;@use&lt;/code&gt; with Ember Apollo Client, and how JS frameworks solved the problem of rendering fast.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#may-20th-is-global-accessibility-awareness-day"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/melaniersumner/status/1389703699241578502?s=20"&gt;May 20th is Global Accessibility Awareness Day üíü&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Global_Accessibility_Awareness_Day"&gt;Global Accessibility Awareness Day&lt;/a&gt;, an awareness day focusing on digital access and inclusion for the more than one billion people with disabilities and impairments, will be celebrated on May 20, 2021. Here are some suggestions from &lt;a href="https://github.com/MelSumner"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt; on how you can get involved in some accessibility (a11y) related open source projects!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Help convert &lt;a href="https://github.com/ember-components/ember-component-patterns"&gt;ember-component-patterns&lt;/a&gt; from Gitbook to an Ember app&lt;/li&gt;
&lt;li&gt;Help with &lt;a href="https://github.com/MelSumner/a11y-automation"&gt;a11y-automation.dev&lt;/a&gt; which is a project to track a11y automation&lt;/li&gt;
&lt;li&gt;Check out the &lt;a href="https://help-wanted.emberjs.com/ember-a11y"&gt;help wanted page&lt;/a&gt; for issues in the &lt;a href="https://github.com/ember-a11y"&gt;ember-a11y GitHub organization&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Help write some &lt;a href="https://github.com/ember-template-lint/ember-template-lint/issues?q=is%3Aopen+is%3Aissue+label%3Aa11y"&gt;a11y-related linting rules&lt;/a&gt; for ember-template-lint&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more ideas please check out the &lt;a href="https://globalaccessibilityawarenessday.org/"&gt;Global Accessibility Awareness Day (GAAD) website&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readers-question-whats-the-current-status-of-the-embroider-project"&gt;
  &lt;/a&gt;
  Readers' Question: What‚Äôs the current status of the Embroider project? üßµ
&lt;/h2&gt;

&lt;p&gt;What's the current status of the Embroider project? &lt;a href="https://github.com/embroider-build/embroider"&gt;Embroider&lt;/a&gt; is nearing a 1.0 release. Embroider has been a long time coming, and the future is looking bright. Several large, heavily-tested Ember apps are already shipping to production with Embroider! The official cutover point will be when Ember CLI starts generating new apps with Embroider by default. üôå &lt;strong&gt;Embroider won't be turned on in the next Ember CLI 3.27 release&lt;/strong&gt;, but the &lt;a href="https://github.com/emberjs/rfcs/pull/746"&gt;Enable Embroider Request for Comments (RFC)&lt;/a&gt; was opened up today by &lt;a href="https://github.com/thoov"&gt;Travis Hoover (@thoov)&lt;/a&gt;. Check it out!&lt;/p&gt;

&lt;p&gt;If you're not familiar with Embroider, Embroider is a new build pipeline that will provide a way to compile Ember apps into spec-compliant, modern JavaScript. Using Embroider will make it easier to take advantage of code splitting and tree shaking in your app.&lt;/p&gt;

&lt;p&gt;There are some risks if you choose to use Embroider in production today. You're likely to discover that some Ember addons don't work or will break your build. Right now, Embroider's own configuration options are subject to change, so you'll need to read the &lt;a href="https://github.com/embroider-build/embroider/blob/master/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt; to check for any gotchas when updating Embroider packages in your app.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/emberjs/rfcs/blob/dbb7a7c5dc7a6698368f078aa66f97c4bddd4bcb/text/0000-enable-embroider.md#community-adoption"&gt;Community Adoption&lt;/a&gt; section of the RFC highlights that Embroider has created a testing package for addon authors to consume in their ember-try scenarios to verify their addons work under Embroider. A meta issue will be created tracking the Top 100 addons according to &lt;a href="https://emberobserver.com/"&gt;Ember Observer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you missed it, Embroider was mentioned at virtual EmberConf 2021:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=1Z6cLV2licU"&gt;Keynote Part 2 AKA "Platform State of the Union"&lt;/a&gt; by &lt;a href="https://github.com/chancancode"&gt;Godfrey Chan (@chancancode)&lt;/a&gt; had an Embroider highlight, &lt;a href="https://youtu.be/1Z6cLV2licU?t=555"&gt;starting here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;a href="https://www.youtube.com/watch?v=09USvAy7w9g"&gt;Fun Fast Tools for Serious Work&lt;/a&gt; talk, &lt;a href="https://github.com/ef4"&gt;Edward Faulkner (@ef4)&lt;/a&gt; describes the Embroider vision and what it can unlock!&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#ember-apollo-client-raw-use-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/chrismllr/ember-apollo-client-use-5h3o"&gt;Ember Apollo Client + &lt;code&gt;@use&lt;/code&gt; üí°&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In a new app, &lt;a href="https://github.com/chrismllr"&gt;Chris Miller (@chrismllr)&lt;/a&gt; got to try out &lt;a href="https://github.com/ember-graphql/ember-apollo-client"&gt;ember-apollo-client&lt;/a&gt;, a GraphQL client for Ember apps. üß°&lt;/p&gt;

&lt;p&gt;Chris summarized his learning in the article &lt;a href="https://dev.to/chrismllr/ember-apollo-client-use-5h3o"&gt;Ember Apollo Client + &lt;code&gt;@use&lt;/code&gt;&lt;/a&gt;. The article concerns the following question:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember provides a few possible ways to fetch data. Which way do we follow with &lt;code&gt;ember-apollo-client&lt;/code&gt; in the equation?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Towards the end, Chris shows how to use the &lt;code&gt;@use&lt;/code&gt; API (from &lt;a href="https://github.com/pzuraq/ember-could-get-used-to-this"&gt;ember-could-get-used-to-this&lt;/a&gt;) to wrap &lt;code&gt;ember-apollo-client&lt;/code&gt; methods. This solution may apply to other data-fetching APIs, such as Ember Data.&lt;/p&gt;

&lt;p&gt;Interested in learning more? Check out &lt;a href="https://dev.to/chrismllr/ember-apollo-client-use-5h3o"&gt;Ember Apollo Client + &lt;code&gt;@use&lt;/code&gt;&lt;/a&gt; today!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-comparison-of-rendering-engines-of-react-angular-and-ember"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.heise.de/select/ix/2021/5/2018311514916341034"&gt;A Comparison of Rendering Engines of React, Angular, and Ember üåê&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jelhan1/status/1384931700036222981"&gt;Eine gro√üe √úberraschung&lt;/a&gt; from &lt;a href="https://github.com/jelhan"&gt;Jeldrik Hanschke (@jelhan)&lt;/a&gt;: The May issue of iX, a computer magazine from Germany, features the article &lt;a href="https://www.heise.de/select/ix/2021/5/2018311514916341034"&gt;Die Rendering-Engines von React, Angular und Ember im Vergleich&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The article is written for developers at all levels. Jeldrik provides a naive rendering engine to motivate the performance problems that it will encounter. Afterwards, you will get to learn how computer science helped create rendering engines that are performant.&lt;/p&gt;

&lt;p&gt;How do React, Angular, and Ember turn your single-page application code into what the user sees? What are the strengths and weaknesses in their approach? If you want to learn more about rendering engines, we encourage you to check out &lt;a href="https://www.heise.de/select/ix/2021/5/2018311514916341034"&gt;Jeldrik's article in iX&lt;/a&gt;! &lt;em&gt;(Note: This article is in German, but can be translated by a browser such as Google Chrome. You'll need to sign up on Heise.de to read, but there is a free trial period.)&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;Contributors' corner üëè&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/basz" rel="noopener noreferrer"&gt;Bas Kamer (@basz)&lt;/a&gt;, &lt;a href="https://github.com/nlfurniss" rel="noopener noreferrer"&gt;Nathaniel Furniss (@nlfurniss)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/chadhietala" rel="noopener noreferrer"&gt;Chad Hietala (@chadhietala)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/esquith" rel="noopener noreferrer"&gt;Esquith Allen (@esquith)&lt;/a&gt;, &lt;a href="https://github.com/spham92" rel="noopener noreferrer"&gt;Steven Pham (@spham92)&lt;/a&gt;, &lt;a href="https://github.com/btecu" rel="noopener noreferrer"&gt;Bj Tecu (@btecu)&lt;/a&gt;, &lt;a href="https://github.com/tylerturdenpants" rel="noopener noreferrer"&gt;Ryan Mark (@tylerturdenpants)&lt;/a&gt;, &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/srih4ri" rel="noopener noreferrer"&gt;Srihari (@srih4ri)&lt;/a&gt;, &lt;a href="https://github.com/gilest" rel="noopener noreferrer"&gt;Giles Thompson (@gilest)&lt;/a&gt;, &lt;a href="https://github.com/brendenpalmer" rel="noopener noreferrer"&gt;Brenden Palmer (@brendenpalmer)&lt;/a&gt;, &lt;a href="https://github.com/amk221" rel="noopener noreferrer"&gt;Andrew Kirwin (@amk221)&lt;/a&gt;, &lt;a href="https://github.com/runspired" rel="noopener noreferrer"&gt;Chris Thoburn (@runspired)&lt;/a&gt;, &lt;a href="https://github.com/bendemboski" rel="noopener noreferrer"&gt;Ben Demboski (@bendemboski)&lt;/a&gt;, and &lt;a href="https://github.com/pzuraq" rel="noopener noreferrer"&gt;Chris Garrett (@pzuraq)&lt;/a&gt; for their contributions to Ember and related repositories! üíñ&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;Connect with us ü§ì&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uvtPZkUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq55rhk5vkydd9khjyw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uvtPZkUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq55rhk5vkydd9khjyw0.png" alt="Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers‚Äô Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don‚Äôt worry, there are no silly questions, we appreciate them all - promise! ü§û&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ‚ú®&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Chris Ng, Isaac Lee, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>DevOps - A story</title>
      <author>Andrei Dascalu</author>
      <pubDate>Sat, 08 May 2021 06:20:12 +0000</pubDate>
      <link>https://dev.to/andreidascalu/devops-a-story-589b</link>
      <guid>https://dev.to/andreidascalu/devops-a-story-589b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Whenever I dare open LinkedIn, I suddenly come to the realisation that DevOps is one of the most misused terms since the concept of Agile. It's not hard to see why, if you've followed the concept as it grew.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick background&lt;/strong&gt;: "devops" was first used by a guy named Patrick Debois around 2008. The context: the implementations of Agile felt as if they weren't good enough to guide development processes. Together with a guy called Andrew Clay, they point at silo-ization of teams (and even companies). Debois masterminded an event called DevOpsDays the very next year and things spiralled from there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A step towards misuse&lt;/strong&gt; (a gift from "silos"): everybody knows the development process. You get requirements, you write some code that works, you hope it gets tested and the job is done. Making it available to users, making sure it runs, gathering info about issues, that's someone else's problem now. Since the part that developers need comes from the "ops" team, someone had to cross the silo divide to make DevOps happen - obviously we should call that "devops engineering" making a "devops" position. Thus making "devops" another word for "ops".&lt;/p&gt;

&lt;p&gt;The best &lt;a href="https://kenmugrage.com/2017/05/05/my-new-definition-of-devops/#more-4"&gt;definition of DevOps&lt;/a&gt; comes from a guy called Ken Mugrage, who spends a good deal of time outlining the actual meaning of DevOps and the fact that it is not a role/job/position, but a practice (or a mindset). To be fair, he also wrote that it's &lt;a href="https://kenmugrage.com/2020/12/14/devops-engineer-isnt-a-job-title-except-it-is/"&gt;ok to list yourself as a DevOps engineer&lt;/a&gt; as long as you don't promote "ops silos" or the silo mentality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-story"&gt;
  &lt;/a&gt;
  The Story
&lt;/h2&gt;

&lt;p&gt;It was just early last year that a bigger project came to my company. As it usually goes it was also rather urgent (as in, full-featured product a month before Christmas). We pooled in a good team and went for an MVP.&lt;/p&gt;

&lt;p&gt;The directive was clear: have a working MVP at any cost. We approached it the usual way with frontend (two frontend applications) and backend (6 backend services). People worked according to their primary field and moved across applications to keep the expertise and knowledge flowing. We pulled in from our recipe stack a development quickstart package (based on Docker Compose, for local development) to enable the team to get up and running ASAP.&lt;/p&gt;

&lt;p&gt;The main delivery restriction known at the time was that we had to use Azure, which we did.&lt;/p&gt;

&lt;p&gt;Everything was working fine in local (sure, why don't we ship your local environment then!) but when it came to deploying it, things went also just about every other project: developers have it working so it's someone else's job to make their code run as it was with all the chose components.&lt;/p&gt;

&lt;p&gt;Once thing got into Azure, various issues were exposed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the team had decided to use Redis 6 for caching. However Redis 6 was a beta in Azure and not available as a cluster. We had to use Redis 4 and the dev team had to go modify their stack and realign their libraries.&lt;/li&gt;
&lt;li&gt;we had a requirement for scaling (which you don't usually enable in development) so we had to use Redis cluster to accommodate scalable services. The devs used sigle-node Redis and their NodeJS library was configured as such. Changes were needed to allow cluster access.&lt;/li&gt;
&lt;li&gt;the devs also used Redis for a pub/sub service communication system. However, aside from flaky persistence, we also had a requirement for resilience. This means to have the application ready to go in two different Azure regions. It's not a big deal if caching has to be recreated but pub/sub queues had to flawlessly make the transition. In Azure Redis can't do that without manual intervention. &lt;/li&gt;
&lt;li&gt;logging: logging was implemented differently without standard structure. One of the most time wasteful things happened when it took over a week just to align logging models (and even afterwards fixes were needed to offer proper context to logs). Also, often logging is needed in the frontend as well. It's a sad day when frontend log instrumentation is postponed.&lt;/li&gt;
&lt;li&gt;metrics: while a late requirement, metrics are that thing you know it's going to be needed by a running system (even when people say it's not needed) and it's trivial to instrument an application from the start (and harder to bake in later). Of course, this came biting.&lt;/li&gt;
&lt;li&gt;observability: sooner or later the question comes - why am I throwing compute power at an app and it's still sluggish as hell in any non-dev environment? Tracing and APM come to answer that. Of course, some instrumentation and config is needed. It's trivial to prepare for it early.&lt;/li&gt;
&lt;li&gt;configuration management: in development various services used dotEnv files or actual environment variables. It's never an issue in development when you use one or the other but in a production system it's important to know that in the vast majority of config management libraries, actual environment variables override values taken from files. Also, questions come as to where would you store sensitive stuff? How do you pull them if you need them at build time? Or at runtime? Do platform choices impact that somehow? In Azure for example it was fairly easier to make secrets available as pure env vars in running containers (same for Github builds for build-time values). Anybody who was relying on pure dotEnv files had to change stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I happened to mention dev, but it's not a blame. Organisationally, the requirements came through a PO to the dev team, which was taken literally in the context of a Scrum--wannabe company - the dev team was made by devs with Ops and QA considered external dependencies.&lt;/p&gt;

&lt;p&gt;Even though technically there are QA and ops attached to the team, they were treated mostly as dependencies (dev does work, hand it to qa, then it gets handed to ops for deployment - while people get together in plannings and whatnot, most decisions rests with devs or architects and everyone else executes).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Consequences?&lt;/em&gt; Deadlines missed, overtime, mounting costs and eventually external help was needed to get it over the finish line.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Solutions?&lt;/em&gt; While a suggested "fix" was to have more oversight in the beginning, truth is that changes will be needed along the way. DevOps is a better answer, with communication front and centre and with knowledge-sharing and ownership coming in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;One thing I tend to say about DevOps is that: everyone in the team is DevOps engineer or nobody is. To achieve that, there are some basics to deal with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Know your tools&lt;/em&gt;: too often I see developers that know their development tools but not what it means to actually run your application. Many React/Angular devs know to execute &lt;code&gt;npm run&lt;/code&gt; but not what it means to build the application and run it. What are build time config variables and what are run time config variables. The attitude that "this is someone else's job" has to go away when teamwork is needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Communicate&lt;/em&gt;: might seem obvious but I found it's often not. When requirements come in, they have to be seen in the grad scheme of things, by every team member. They aren't standalone piece of work that need coding and then that's that. No amount of "definition of done" or "acceptance criteria" can replace good ol' fashioned alignment. Daily scrums or whatever of the ceremony teams perform on a daily basis may align you on daily tasks but not on the "big picture". It's everyone's job to make sure everyone in the team has a chance to weigh in (or at least be aware of) the implications of a task.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Imagine&lt;/em&gt;: imagination is important in development. How do you envision your piece of work becoming useful to a user? How does the journey looks like? What does it take to consider it working? How does it get from being code in my IDE to something users interact with? If there's a problem, what information do I need to fix it? There are lots of things that may go to the back of your mind.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ken Mugrage's definition is an elegant way to talk about ownership. The Team owns developing and operating it. Even when outside help is needed. Ownership makes everyone thing about the consequences of not doing something because eventually you'd have to handle fixing it (whether doing it yourself or finding someone who can help).&lt;/p&gt;

&lt;p&gt;This is DevOps: owning the development and operation of software. It's the missing piece for "True Agility". The job doesn't end when you commit and push your code.&lt;/p&gt;

</description>
      <category>ops</category>
      <category>webdev</category>
      <category>development</category>
    </item>
    <item>
      <title>Debugging vertical layouts in 2021</title>
      <author>Chen Hui Jing</author>
      <pubDate>Sat, 08 May 2021 05:53:22 +0000</pubDate>
      <link>https://dev.to/huijing/debugging-vertical-layouts-in-2021-292i</link>
      <guid>https://dev.to/huijing/debugging-vertical-layouts-in-2021-292i</guid>
      <description>&lt;p&gt;This blog has been around for more than 7 years. Where has the time gone? I first started messing around with vertical layouts after discovering the existence of &lt;code&gt;writing-mode&lt;/code&gt;. It was a ‚Äúcannot unsee‚Äù life event that happened around 5 years ago?&lt;/p&gt;

&lt;p&gt;CSS had seen a number of milestones in the last 5 years, and we are so much better equipped to build layouts today. When I take a moment to look back, I find myself appreciating all the work done to push CSS forward even more. With the DevTools updates that came out last month, I‚Äôve decided to revisit my favourite demo once again: &lt;a href="https://huijing.github.io/demos/grids-vertical/"&gt;CSS grid in vertical writing mode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to try it out with whichever DevTools you have on hand (I understand that not everyone has 9 browsers installed on their machine).&lt;/p&gt;

&lt;p&gt;This was the second iteration of a vertical writing demo that used CSS grid for layout. In 2016, I did &lt;strong&gt;not&lt;/strong&gt; use Grid for this because DevTools was kinda broken when &lt;code&gt;writing-mode&lt;/code&gt; was set to &lt;code&gt;vertical-rl&lt;/code&gt;. And trying to debug using just my imagination gave me a headache.&lt;/p&gt;

&lt;p&gt;Considering the scale of the web, I think use of vertical writing is still fairly tiny, and perhaps that may be why bugs related to vertical writing tend to exist. Time for a quick test of debugging vertical layouts with 2021 DevTools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firefox-devtools"&gt;
  &lt;/a&gt;
  Firefox Devtools
&lt;/h2&gt;

&lt;p&gt;Even before doing any verification, I was fairly confident Firefox Devtools would perform admirably for the Grid test. I say this because I had checked when the team fixed all the related bugs for this issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1303171"&gt;Support RTL and Vertical Writing Modes in the Grid Inspector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1430916"&gt;Rotate grid line numbers when writing modes / RTL are used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1430918"&gt;Rotate grid outline in Layout panel when writing modes / RTL are used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1430919"&gt;Enable writing mode / RTL support for Grid Inspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So unless the team introduced some regression bugs, I would expect no issues at all.&lt;/p&gt;

&lt;p&gt;Moment of truth!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---rydOaLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-ffgrid-640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rydOaLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-ffgrid-640.png" alt="Firefox Grid inspector overlay on a vertical layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful. The overlay doesn‚Äôt affect scrolling at all, the line numbers are labelled correctly. Just the way I expected things to work. Certified fresh!&lt;/p&gt;

&lt;p&gt;As for the Flexbox inspector, there aren‚Äôt that many moving parts that could break due to bugs. The calculations are most probably taken from the actual browser calculations so as long as the browser is sizing the flex items correctly, the layout tool will report the correct size as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wc1Ppw-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-ff-flex-640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wc1Ppw-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-ff-flex-640.png" alt="Firefox Flex inspector overlay on a vertical layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guess if I wanted to nitpick this, it would be nice if the shape of the flex item rectangle looks similar to that of the rendered flex item. Or maybe a direction indicator might be nice to have. That being said, I‚Äôm fine with the current Flexbox inspector as it is.&lt;/p&gt;

&lt;p&gt;Also, not directly related to Devtools but CSS logical properties is the total hotness, my friends! Specifically, logical properties for sizing. I should probably do a dedicated post on why logical properties are a godsend for layouts that are not in the default left-to-right, top-to-bottom flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chrome-devtools"&gt;
  &lt;/a&gt;
  Chrome Devtools
&lt;/h2&gt;

&lt;p&gt;Honestly, I didn‚Äôt expect it to work as well in Chrome, because even when Firefox first released its Grid inspector, support for vertical and RTL layouts wasn‚Äôt great. So given that Chrome only released their enhanced Grid inspector late last year, I expected some buggy behaviour.&lt;/p&gt;

&lt;p&gt;Okay, let‚Äôs give it a shot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AooQELdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1f6ztht6gdnr1d60cbh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AooQELdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1f6ztht6gdnr1d60cbh.gif" alt="Bug in Chrome grid inspector for vertical layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scrolling with the overlay active was a little janky, and the overlay lines are off-kilter. Again, this is not unexpected. And when I checked the Chromium bug tracker, lo and behold, someone already filed the issue: &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1203251&amp;amp;q=devtools%20grid&amp;amp;can=2"&gt;Issue 1203251: Grid overlay is misplaced for CSS grids with a vertical writing mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please do me a favour and star this issue! It‚Äôs not a guarantee that this will make the bug get fixed immediately, but it is a signal that folks care about this working correctly.&lt;/p&gt;

&lt;p&gt;Time to give Chrome‚Äôs new Flexbox inspector a spin as well. The overlay looked fine, so nothing much to say there. I was very fond of the Alignment tool and for the most part, it seemed to work okay. But as I was messing around, I found a pretty obscure ‚Äúblink-and-you-might-miss-it‚Äù bug.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwWWbKvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzn7kmze172pjy1f93eu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwWWbKvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzn7kmze172pjy1f93eu.gif" alt="Chrome alignment tool bug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did log a bug on the Chromium bug tracker, if anyone is interested. &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1206903"&gt;Issue 1206903: Alignment tool causes incorrect rendering for vertical layout&lt;/a&gt;. I think my issue is related to this one: &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1120156"&gt;Issue 1120156: CSS Grid &lt;code&gt;align-items: end;&lt;/code&gt; with vertical &lt;code&gt;writing-mode&lt;/code&gt; doesn‚Äôt work properly in a Flexbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And in the process to trying to document the bug properly, I found another weird behaviour for Flex items in a &lt;code&gt;vertical-rl&lt;/code&gt; environment in Chrome (or Chromium, since Edge has this issue as well).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oW1vm-pJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pks0l5e8as97bqb77ita.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oW1vm-pJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pks0l5e8as97bqb77ita.gif" alt="Chrome flex bug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I were to describe this in words, it would be, when the document is in &lt;code&gt;vertical-rl&lt;/code&gt; mode, content within a flex item does not respond to viewport resizing on the x-axis.&lt;/p&gt;

&lt;p&gt;I wonder if all these issues are somehow related. But I also raised a separate issue to document my specific use-case. &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1206914"&gt;Issue 1206914: Content within flex item renders incorrectly when writing-mode is vertical-rl&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#safari-devtools"&gt;
  &lt;/a&gt;
  Safari Devtools
&lt;/h2&gt;

&lt;p&gt;Safari‚Äôs Grid inspector in Devtools is even newer than Chrome‚Äôs, and technically haven‚Äôt been released yet, since it is only in Safari Technology Preview at the moment. I suppose this is the best time to test it out.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how this goes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EoItf7B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-webkit-bug-640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EoItf7B7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-webkit-bug-640.png" alt="Safari TP 123 Grid inspector overlay on a vertical layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, something is a little off at the moment. Scrolling performance with the overlays active was fine, but the line numbers do not respect the writing-mode direction, and the overlay wasn‚Äôt accurately positioned over the grid element either.&lt;/p&gt;

&lt;p&gt;But I went over to &lt;a href="https://bugs.webkit.org/"&gt;Webkit‚Äôs bug tracker&lt;/a&gt; and found: &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=224051"&gt;Bug 224051 - Web Inspector: Grid overlay does not honor writing modes and RTL layout direction&lt;/a&gt;. It appears that the issue had been flagged and fixed, so I‚Äôm guessing the next Safari Technology Preview release would contain this fix. üöÄ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update time! The bug has been fixed and resolved in Safari 124. Updating here because I just got the version bump. What a difference a day makes üíÉ.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VqSHhx7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-safari-fix-640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqSHhx7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chenhuijing.com/assets/images/posts/grid-vertical/dt-safari-fix-640.png" alt="Safari TP 124 Grid inspector overlay on a vertical layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Hokay, it‚Äôs time to wrap up ‚ÄúHui Jing breaks things yet again‚Äù segment. I want to say thank you to all the browser engineers who are busy fixing all these bugs and working hard to make the web a better experience for all of us. üôá‚Äç‚ôÄÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;small&gt;Credits: OG:image from &lt;a href="https://www.instagram.com/p/B9iEXx6hJzh/"&gt;alto0908 on Instagram&lt;/a&gt;&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I Dockerized my Next.js website?</title>
      <author>deepak pd</author>
      <pubDate>Sat, 08 May 2021 05:20:22 +0000</pubDate>
      <link>https://dev.to/deepakfilth/how-i-dockerized-my-next-js-website-4f3a</link>
      <guid>https://dev.to/deepakfilth/how-i-dockerized-my-next-js-website-4f3a</guid>
      <description>&lt;p&gt;Learn how to use Docker to create images for development and production.&lt;/p&gt;

&lt;p&gt;Imagine that you have developed a full fledged working application and want other developers to contribute to the project. Now if the application consists of different components like UI, running server, database etc. The new developer should install the exact configuration of  the entire stack on to his/her system before starting  the development. To overcome this issue Docker comes to the rescue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h2&gt;

&lt;p&gt;Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker‚Äôs methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multistaging-dockerfile-for-development-and-production"&gt;
  &lt;/a&gt;
  Multistaging dockerfile for development and production
&lt;/h2&gt;

&lt;p&gt;I created a common docker file for both development and production. Dockerfile is used to create an image of the application, using this image n number of containers can be created, which is like a running version of the image.&lt;/p&gt;

&lt;p&gt;üê¨&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;#Creates a layer from node:alpine image.&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="c"&gt;#Creates directories&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /usr/src/app

&lt;span class="c"&gt;#Sets an environment variable&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PORT 3000&lt;/span&gt;

&lt;span class="c"&gt;#Sets the working directory for any RUN, CMD, ENTRYPOINT, COPY, and ADD commands&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="c"&gt;#Copy new files or directories into the filesystem of the container&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json /usr/src/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package-lock.json /usr/src/app&lt;/span&gt;

&lt;span class="c"&gt;#Execute commands in a new layer on top of the current image and commit the results&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;##Copy new files or directories into the filesystem of the container&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /usr/src/app&lt;/span&gt;

&lt;span class="c"&gt;#Execute commands in a new layer on top of the current image and commit the results&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build

&lt;span class="c"&gt;#Informs container runtime that the container listens on the specified network ports at runtime&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;

&lt;span class="c"&gt;#Allows you to configure a container that will run as an executable&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["npm", "run"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dockercompose-to-create-containers-with-ease"&gt;
  &lt;/a&gt;
  üêôDocker-Compose to create containers with ease.
&lt;/h2&gt;

&lt;p&gt;Suppose you have an application that consists of UI, running server, DB and you want to create containers for all the components. One way is to create Dockerfile for each of the component and start the containers one by one manually or docker-compose can be used to start the entire stack with just one command.&lt;/p&gt;

&lt;p&gt;Below is the common docker-compose.yml file for both development and production&lt;/p&gt;

&lt;p&gt;üê¨&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt; &lt;span class="c1"&gt;#This denotes that we are using version 3 of Docker Compose&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This section defines all the different containers we will create.&lt;/span&gt;
  &lt;span class="na"&gt;blog_deepak&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This is the name of our Nextjs application.&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This specifies the location of our Dockerfile&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt; &lt;span class="c1"&gt;#This specifies the location of our Dockerfile&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This is used to map the container‚Äôs ports to the host machine.&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3000:3000"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üê¨&lt;strong&gt;docker-compose.dev.yml&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt; &lt;span class="c1"&gt;#This denotes that we are using version 3 of Docker Compose&lt;/span&gt;
    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This section defines all the different containers we will create.&lt;/span&gt;
    &lt;span class="na"&gt;blog_deepak&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This is the name of our Nextjs application.&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt; &lt;span class="c1"&gt;#command to execute&lt;/span&gt;
                &lt;span class="c1"&gt;#This is just like the -v option for mounting disks in Docker. In this              example, we attach our code files directory to the containers‚Äô ./code              directory.  This way, we won‚Äôt have to rebuild the images if changes are           made.&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/usr/src/app&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/usr/src/app/node_modules&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/usr/src/app/.next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üê¨&lt;strong&gt;docker-compose.prod.yml&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt; &lt;span class="c1"&gt;#This denotes that we are using version 3 of Docker Compose&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This section defines all the different containers we will create.&lt;/span&gt;
    &lt;span class="na"&gt;blog_deepak&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#This is the name of our Nextjs application.&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt; &lt;span class="c1"&gt;#command to execute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have configured my scripts in package.json to run docker-compose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prod"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev:up"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"docker-compose -f docker-compose.yml -f docker-compose.dev.yml up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prod:up"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"docker-compose -f docker-compose.yml -f docker-compose.prod.yml up"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, Compose reads two files, a docker-compose.yml and an optional docker-compose.override.yml file. By convention, the docker-compose.yml contains your base configuration. The override file, as its name implies, can contain configuration overrides for existing services or entirely new services.&lt;/p&gt;

&lt;p&gt;To use multiple override files, or an override file with a different name, you can use the -f option to specify the list of files. Compose merges files in the order they‚Äôre specified on the command line.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>docker</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
