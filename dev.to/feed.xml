<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top Magical JavaScript Tips For Every Front-end Developer</title>
      <author>Tips and Tricks</author>
      <pubDate>Sat, 28 Aug 2021 08:39:58 +0000</pubDate>
      <link>https://dev.to/tips_tricks/top-magical-javascript-tips-for-every-front-end-developer-3aeo</link>
      <guid>https://dev.to/tips_tricks/top-magical-javascript-tips-for-every-front-end-developer-3aeo</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>Multiplayer Connect Four Game. (Board Game) (WebSocket)</title>
      <author>FRADAR</author>
      <pubDate>Sat, 28 Aug 2021 08:38:39 +0000</pubDate>
      <link>https://dev.to/fradar/multiplayer-connect-four-game-board-game-websocket-30ig</link>
      <guid>https://dev.to/fradar/multiplayer-connect-four-game-board-game-websocket-30ig</guid>
      <description>&lt;p&gt;A friendly game of Connect 4 that lets you play with someone else looking at the pen! It automatically queues people into the next available game or creates a new one. The game server is built on node.js and running on a Heroku instance.&lt;/p&gt;

&lt;p&gt;This game also has a chat feature, where you can talk to your opponent.&lt;/p&gt;

&lt;p&gt;Play it with your friends here! :&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/xxrGdRv"&gt;https://codepen.io/FRADAR/full/xxrGdRv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Follow me here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See Ya!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>challenge</category>
      <category>javascript</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>20 Best CSS Library For Frontend Developer</title>
      <author>Tips and Tricks</author>
      <pubDate>Sat, 28 Aug 2021 07:17:35 +0000</pubDate>
      <link>https://dev.to/tips_tricks/20-best-css-library-for-frontend-developer-295c</link>
      <guid>https://dev.to/tips_tricks/20-best-css-library-for-frontend-developer-295c</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="#"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;🚀20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>Step by Step Guide to NFTS creation and sale for beginners using OpenSea</title>
      <author>Victor Quan Lam</author>
      <pubDate>Sat, 28 Aug 2021 07:10:41 +0000</pubDate>
      <link>https://dev.to/victorquanlam/step-by-step-guide-to-nfts-creation-and-sale-for-beginners-using-opensea-4dm6</link>
      <guid>https://dev.to/victorquanlam/step-by-step-guide-to-nfts-creation-and-sale-for-beginners-using-opensea-4dm6</guid>
      <description>&lt;p&gt;&lt;a href="https://opensea.io/"&gt;https://opensea.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you may do is to pay for a "mint" platform (i.e. create) an NFT. You have to construct a digital wallet and buy any currency for this reason.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to construct a digital wallet to purchase NFTs?&lt;/strong&gt;&lt;br&gt;
You have to put money into a digital wallet from which you can spend before you start.&lt;br&gt;
OpenSea employs ether, a cryptocurrency that you will have to purchase. Consider it as an arcade. You walk in and want to play games. But you have to buy some tokens before you play the games. Here is the same principle, except the tokens are called ether and you are presumably starting small, with fractions of ether, instead of buying a lot of tokens. &lt;br&gt;
All right, so back to the digital wallet. OpenSea proposes utilizing a Chrome browser plug-in known as MetaMask but supports many alternative digital wallets.&lt;br&gt;
It took approximately 30 seconds to install the plug-in and enter a password. Now, let's do that.&lt;br&gt;
Tap the Profile icon on the website upper right.&lt;br&gt;
• Click on the "Get " button.&lt;br&gt;
• Choose "Install MetaMask" for Chrome or your favourite compatible browser. This installs a plug-in for Chrome.&lt;br&gt;
• Select "Get Started." &lt;br&gt;
• Choose "Create Wallet."&lt;br&gt;
• Select "No thanks" for feedback sharing.&lt;br&gt;
• Create a password.&lt;br&gt;
• Write down the secret sentence you are given. This is extremely crucial and your backup for accessing your account. Don't lose it. Don't lose it.&lt;br&gt;
• Tap "Next" and confirm the confidential sentence.&lt;br&gt;
• To connect your account to the digital wallet, click "Next."&lt;br&gt;
• Click again on "Connect."&lt;br&gt;
Okay, you have an OpenSea digital wallet now. You now have to acquire a certain ether that you can spend on NFTs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to buy ether&lt;/strong&gt;&lt;br&gt;
You may use a range of applications to purchase cryptocurrency. Coinbase is popular. Robinhood is like that.&lt;br&gt;
Tap the symbol on the top right of Chrome at the end of your URL box.&lt;br&gt;
• Click on the icon.&lt;br&gt;
• Click on "Buy." If you have any in another account, click "Directly Deposit Ether."&lt;br&gt;
• Click "Follow Wyre."&lt;br&gt;
• Select the amount of ether you want to buy. Get used to these fees; when you buy something, there are more.&lt;br&gt;
• Click on the "Next" button.&lt;br&gt;
• Enter your payment and telephone number.&lt;br&gt;
• Tap "Send."&lt;br&gt;
• Enter your phone's payment authentication code.&lt;br&gt;
Authorize your purchase by typing in your bank account a six-digit number for an outstanding Wyre transaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to create and sell NFTs&lt;/strong&gt;&lt;br&gt;
You have some cool digital art, or you’re ready to sell. &lt;br&gt;
• Go to any site and tap on the top right on the "Create" button.&lt;br&gt;
• Create one or more collections— the latter for a collection, for instance, of images or cards that you have prepared.&lt;br&gt;
• To upload a PNG, GIF, MP3 or another form of a file, select "Choose File." The maximum capacity is 30MB.&lt;br&gt;
• Enter the price you want, or leave "place on sale." If it's ever sold. It seems sensible. It seems logical.&lt;br&gt;
• Enter your NFT name and description.&lt;br&gt;
• Set royalties. You will still be paid if it is sold on the secondary market. This is based on the present selling price.&lt;br&gt;
• Choose "Connect and create a wallet."&lt;br&gt;
• Connect your wallet.&lt;br&gt;
• Pay the "Gas" cost for listing processing.&lt;br&gt;
• To sign a sales order using your digital wallet, click "Start."&lt;br&gt;
• Click "Sign".&lt;br&gt;
That's it! It's listed now Offers will be displayed on the sales page. If the monies are ever sold, they will be transferred to my digital wallet. I may then use them to purchase more NFTs or cash in an app like Coinbase.&lt;/p&gt;

&lt;p&gt;OpenSea employs NFTS creation and sale, a cryptocurrency that you will have to purchase. You must construct a digital wallet from which you can spend NFTs before you can access the platform. The best place to start is with a Chrome browser plug-in called MetaMask. What does it take to create and sell an online art collection? You will still be paid if it is sold on the secondary market, based on the price you paid for it in the primary market.&lt;/p&gt;

</description>
      <category>nfts</category>
      <category>blockchain</category>
      <category>bitcoin</category>
    </item>
    <item>
      <title>Web Designer Roadmap 2021</title>
      <author>Tips and Tricks</author>
      <pubDate>Sat, 28 Aug 2021 06:40:17 +0000</pubDate>
      <link>https://dev.to/tips_tricks/web-designer-roadmap-2021-3akk</link>
      <guid>https://dev.to/tips_tricks/web-designer-roadmap-2021-3akk</guid>
      <description>&lt;h2 id="what-is-a-web-designer"&gt;What is a Web Designer?&lt;/h2&gt;
&lt;p&gt;Are you both creative and technically inclined? You may want to consider a career as a web designer!&lt;/p&gt;
&lt;p&gt;Web designers build or redesign websites. They understand what it takes to make a website functional and easy to use, but also understand what is needed to make it aesthetically appealing to the user.&lt;/p&gt;
&lt;p&gt;Web design is a rapidly growing industry, as digital media has become part of everyone's lives and people rely on the web for their communications, information, shopping, social life, and more.&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/web-designers-roadmap-2021/&amp;amp;ved=2ahUKEwjqlebL7qryAhUF7HMBHVCiCxQQFnoECBoQAQ&amp;amp;usg=AOvVaw2Oo-ikwNXhEKOFAMaulAH4"&gt;Web Designer Roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;









</description>
    </item>
    <item>
      <title>Everything you need to know about Hackathons
</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Sat, 28 Aug 2021 06:39:38 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/everything-you-need-to-know-about-hackathons-3fp8</link>
      <guid>https://dev.to/muthuannamalai12/everything-you-need-to-know-about-hackathons-3fp8</guid>
      <description>&lt;p&gt;As a college student, I bounce on every opportunity I can to have fun or further my career. A hackathon combines both. I’m a Computer Science major that can find it hard to code personal projects outside of class. Hackathons motivate me and give me time to explore these passions. In this article, we will take a deep dive into hackathons&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-hackathon"&gt;
  &lt;/a&gt;
  What is a Hackathon?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unE6ePbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219300275/jFCH0v4jB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unE6ePbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219300275/jFCH0v4jB.jpeg" alt="Hackathons.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hackathon is a word creation of the words hack(-ing) and marathon. In this context, hacking stands for the development of software- or hardware solution and the marathon describes the format, which is a 1–3 days lasting event.&lt;br&gt;
Usually, it takes place in a spacious venue, which fits sometimes several hundred hackers.&lt;/p&gt;

&lt;p&gt;Nowadays, hackathons are taking place completely online, due to the Corona outbreak.&lt;br&gt;
The goal of a hackathon is to develop a solution for a given problem. The solution can be in different forms: it could be a pitch deck containing the concept and business model, a mockup/wireframe of an app, or functioning software or hardware prototypes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-can-attend-hackathons"&gt;
  &lt;/a&gt;
  Who can attend Hackathons?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1tHMnQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219384645/dXoIzX5lz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1tHMnQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219384645/dXoIzX5lz.jpeg" alt="Hackathons1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It depends on the rules and kind of hackathon but you can usually count on developers, designers, project managers, and maybe some people with experience developing hardware. Skill levels and experience also vary greatly. As a student or someone new to development, you may experience what many call "imposter syndrome" when thinking of going to a hackathon. In other words, you may believe you are too green to contribute which may lead to a bad experience and embarrassment. Don't let that worry prevent you from joining. New developers, designers, and people with less formal roles than that are always welcome&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-i-need-to-have-programming-experience"&gt;
  &lt;/a&gt;
  Do I need to have programming experience?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8z04kgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219562706/BbZg8HQIc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8z04kgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219562706/BbZg8HQIc.png" alt="Hackathons4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NO. You don’t. The organizers usually hold workshops throughout the hackathon for anyone who is new to programming or someone who wishes to learn more about a particular topic. Mentors are also available 24/7. So if you go to a hackathon without knowing what you want to do, that’s totally fine because you will have these mentors at your service to help and guide you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dos-amp-donts"&gt;
  &lt;/a&gt;
  Dos &amp;amp; Don’ts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LnDfjjvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219500064/_O88q0Tt3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LnDfjjvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219500064/_O88q0Tt3.jpeg" alt="Hackathons3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO pair up with people you haven’t met before&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I went with a group of My college students, but we ended up pairing with other college students, and they had a lot of insight to offer as a front-end visual designer. Plus, you make new friends that can tell you about life at their colleges!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DON’T spend the entire time in the hacking space:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You’re in a new place (most likely)! Feel free to explore campus when you get the chance and snap some pictures of the misty graveyard or gothic buildings. Many of the small meetings offered by organizers will also likely relocate somewhere outside of the hacking space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO accept that your stress personality will come out:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re doing everything right, then you’re likely nowhere near being finished with your project by the last evening of the hackathon. This is when you pull an all-nighter to get a minimum viable product out, cutting corners (or probably more than just corners) to have something to present the next morning. This puts a lot of stress on you; you can expect your stress personality to rear its ugly head, and you may scare your teammates. At least I did.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DON’T be a perfectionist:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was my biggest mistake. The products coming out of hackathons are not by any means expected to be usable; essentially, you are rapid-prototyping a way to communicate your vision to the judges. Just that can get you a long way. In general make something generally functional, rather than perfect in some aspects and completely broken in others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most importantly, DO enjoy your time!:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hackathons are meant to be a learning experience! If you didn’t have fun by the end of it, then you did it wrong. And that’s the only way to do it wrong. Now that I’ve bestowed upon you my infinite wisdom (coming from my experience at one entire hackathon, mind you), go sign up for a hackathon! I promise you that it’ll be worth your weekend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-to-attend-a-hackathon"&gt;
  &lt;/a&gt;
  Reasons To Attend a Hackathon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nhm9WiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219456711/h-0jnSAoZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nhm9WiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625219456711/h-0jnSAoZ.png" alt="Hackathons2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Showcase Your Skills:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While hackathons are a great way for everyone to meet and collaborate with others in their field of expertise, there’s also a competitive side. Hackathons challenge attendees to exhibit their ability to innovate and create compelling, real-world solutions, utilizing the latest devices and technology. It’s also a chance to demonstrate specific skills that you aren’t able to showcase elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn About Tech:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the biggest benefits of attending a hackathon is learning new skills and attaining new knowledge. According to coding society Hackerstolz, you might gain more knowledge than you would in six months, due to the learning-by-doing approach employed at hackathons. You can also soak up information from fellow attendees — including ideas you may never have gained in the classroom or from a book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Share Your Ideas:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At its heart, a hackathon is a deeply collaborative effort. To get the most out of these events, attendees need to be willing to share their expertise with others, ensuring that everyone learns from everyone else. For example, experts in security can learn from designers about how to better implement their features, and app designers can learn how to better protect personal information. Hardware and software specialists can better learn how to work with each others’ tools — everyone learns something new.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge Yourself:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It can be very easy to remain in your comfort zone, doing things you know how to do and never really challenging yourself. At hackathons, there is no such safe space. You will be constantly challenged to push yourself and move outside your comfort zone.&lt;/p&gt;

&lt;p&gt;From working as part of a team of people who you don’t know, to doing things that you never even thought you’d try, hackathons are a great way to discover new talents, passions and skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collaborate Under Pressure:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It may not sound like a selling point, but experiencing the pressure of having to come together with people you don’t know and create something entirely new in a very short space of time can be hugely rewarding. You don’t simply get a sense of achievement from completing the task — you also learn how to work efficiently, how to work as a team, and how you can put your skills to work in a quick-turn environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-find-a-hackathon-near-you"&gt;
  &lt;/a&gt;
  Where to find a hackathon near you?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbye_AC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625220073073/stgtSoOxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbye_AC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625220073073/stgtSoOxf.png" alt="Hackathons5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the Internet, there are various online resources available which you can use to find a hackathon in your city.&lt;br&gt;
Here’s a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://mlh.io/"&gt;Major League Hacking&lt;/a&gt;  — The Official Student Hackathon League&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://devpost.com/hackathons"&gt;Devpost&lt;/a&gt; — Online and In-Person hackathons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hackathon.io/network"&gt;Hackathon.io&lt;/a&gt; — Platform to discover, share and manage hackathons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.hackalist.org/"&gt;Hackalist&lt;/a&gt; — Hackathons from around the world&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackathons.hackclub.com/"&gt;Hack Club&lt;/a&gt; — For high-school hackathons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://hackathonsnear.me/"&gt;HackathonsNear.me&lt;/a&gt; — Hackathon listing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are a computer science student, or an upcoming developer looking for something to do this summer, a hackathon might be an alternative for you. By attending a hackathon, either physical or online, allows you to develop your coding skills, add a project to your resume, work with developers, and network with current professionals in the field of your interest. You might also win a prize, which sometimes can be in cash form. Coding challenges are another way you could use to work on your coding skills this summer. Also, you can use these challenges to prepare for technical interviews if you are searching for a job.&lt;/p&gt;

&lt;p&gt;There you have it, what is a hackathon, why you should attend one, resources you can use to find a hackathon near you. Feel free to post in the comments other resources where to find hackathons that I have missed. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for Reading 😊 &lt;/p&gt;

</description>
      <category>hackathons</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create a Newsletter app with Twitter Revue, Next.js API Routes, and Tailwindcss</title>
      <author>Tapas Adhikary</author>
      <pubDate>Sat, 28 Aug 2021 06:15:10 +0000</pubDate>
      <link>https://dev.to/atapas/create-a-newsletter-app-with-twitter-revue-next-js-api-routes-and-tailwindcss-34ip</link>
      <guid>https://dev.to/atapas/create-a-newsletter-app-with-twitter-revue-next-js-api-routes-and-tailwindcss-34ip</guid>
      <description>&lt;p&gt;Hey there 👋, do you like to learn from video tutorials? This article is also available as video content.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XbtgjxWFssQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please feel free to &lt;a href="https://www.youtube.com/tapasadhikary"&gt;subscribe&lt;/a&gt; for the future content&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Do you have an email newsletter, or consider starting one? An email newsletter gives your subscribers regular updates about your work, products, passion, life, journey, anything that you find suitable to share. We have some great vendors/products/sites that help us to instantly get started with an email newsletter service. Buttondown, Mailchimp, MailerLite, Substack are just a few to name here.&lt;/p&gt;

&lt;p&gt;Early this year, &lt;a href="https://blog.twitter.com/en_us/topics/company/2021/making-twitter-a-better-home-for-writers"&gt;Twitter announced&lt;/a&gt; the acquisition of &lt;a href="https://www.getrevue.co/"&gt;Revue&lt;/a&gt;, a service that makes it free and easy for anyone to start and publish editorial newsletters. Not only that. Twitter has also made Revue’s Pro features free for all accounts.&lt;/p&gt;

&lt;p&gt;A few days back, a tweet from Revue's official account confirmed that they would allow people to subscribe to your Revue newsletter directly from your Twitter profile. Keeping some debates aside, I think it is a great move.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESISLB56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9KYB4VXoAcHKq8.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ErZ8tVim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354036477915754499/zQrdrHL9_normal.jpg" alt="Revue profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Revue
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @revue
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      It’s here 🧡&lt;br&gt;&lt;br&gt;Today, we’re starting to test a feature that allows people to subscribe to your Revue newsletter directly from your Twitter profile. &lt;br&gt;&lt;br&gt;It's available to all Revue creators immediately. To start though, your newsletters will show only for a test group on Twitter. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:00 PM - 19 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428371221524189186" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428371221524189186" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428371221524189186" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;As the owner of a newsletter, we can promote it in many ways. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can link to the &lt;a href="https://www.getrevue.co/profile/tapasadhikary"&gt;newsletter page&lt;/a&gt; from our website, blog. &lt;/li&gt;
&lt;li&gt;We can embed the subscription form to our website using simple JavaScript, HTML, CSS snippets provided by vendors. &lt;/li&gt;
&lt;li&gt;Lastly, if the newsletter vendor provides APIs to access data, we can create, manage the newsletter entirely within our control. It is a powerful usage that gives your users a feeling of &lt;code&gt;oneness&lt;/code&gt; being part of the same website, similar look-and-feel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#so-whats-the-plan"&gt;
  &lt;/a&gt;
  So, What's the Plan?
&lt;/h1&gt;

&lt;p&gt;This tutorial will teach how to use the &lt;code&gt;Revue&lt;/code&gt; APIs to fetch data into a &lt;code&gt;Next.js&lt;/code&gt; application using the API routes(serverless functions). We will also use the &lt;code&gt;tailwindcss&lt;/code&gt; to give the app a better look and feel. &lt;/p&gt;

&lt;p&gt;I am on my way to migrate &lt;a href="https://tapasadhikary.com/"&gt;my website&lt;/a&gt; using &lt;code&gt;Next.js&lt;/code&gt; and &lt;code&gt;tailwindcss&lt;/code&gt;, and the newsletter will be a part of it. So, it is an excellent opportunity to share what I have implemented and learned.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;If you want to jump into the final app or the source code early, here are the links,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://next-starter-revue-tailwind.vercel.app/"&gt;The Newsletter App Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/atapas/next-starter-revue-tailwind"&gt;The Entire Source Code on the GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XbtgjxWFssQ"&gt;(Again) The YouTube Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#setup-a-newsletter-service-using-revue"&gt;
  &lt;/a&gt;
  Setup a Newsletter Service using Revue
&lt;/h1&gt;

&lt;p&gt;To set up a newsletter with &lt;code&gt;Revue&lt;/code&gt;, sign up to &lt;a href="https://www.getrevue.co/"&gt;https://www.getrevue.co/&lt;/a&gt; using your Twitter account or email. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xFjvHOag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961288039/a9cLtdxcW.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFjvHOag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961288039/a9cLtdxcW.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Revue Sign up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, log in to your account to set up the newsletter by providing the name, description, layout, issues, and schedule. You can &lt;a href="https://www.getrevue.co/app/integrations"&gt;integrate many services&lt;/a&gt; like Twitter, Facebook, Instagram with your Revue account to fetch content from them to add to the newsletter. Additionally, you can fetch the data using the RSS feeds. You can integrate your Hshnode or Dev blog's RSS feed as well. I've made my wish already 😆!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZs-D4vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305109781619724288/5-e1f9SQ_normal.jpg" alt="Tapas Adhikary profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tapas Adhikary
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @tapasadhikary
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/tanoaksam"&gt;@tanoaksam&lt;/a&gt; &lt;a href="https://twitter.com/revue"&gt;@revue&lt;/a&gt; Cool. revue sounds promising. I was looking into it too. I loved how we can integrate services like Twitter and Insta to bring the items into the newsletter..&lt;br&gt;&lt;br&gt;Food for thought: &lt;a href="https://twitter.com/hashnode"&gt;@hashnode&lt;/a&gt; integration would be so good 😀. For now, we can do with its RSS integration though.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:42 PM - 20 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428744252532477955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428744252532477955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428744252532477955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The bottom of the &lt;a href="https://www.getrevue.co/app/integrations"&gt;integration page&lt;/a&gt; shows your API key to access the newsletter data over HTTP requests. Please copy this key and keep it safe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0fGWF7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961839803/kYd5WYoA7.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0fGWF7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629961839803/kYd5WYoA7.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="API Key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This API key will be part of the &lt;code&gt;Authorization&lt;/code&gt; header value when using the Revue APIs. &lt;a href="https://www.getrevue.co/api#get-/v2/lists"&gt;Here is the link&lt;/a&gt; to learn about all publicly available APIs. In this tutorial, we will use the following,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;POST /v2/subscribers&lt;/code&gt;: Add a subscriber to the list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /v2/subscribers&lt;/code&gt;: Returns a list of your active subscribers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /v2/issues&lt;/code&gt;: Returns a list of your sent issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, before that, let us build the user interface of the Newsletter Subscription app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-a-newsletter-subscription-app-using-nextjs-and-tailwindcss"&gt;
  &lt;/a&gt;
  Build a Newsletter Subscription App using Next.js and Tailwindcss
&lt;/h1&gt;

&lt;p&gt;There are plenty of starter projects available in GitHub to get started with Next.js and Tailwindcss. My personal favorite is &lt;a href="https://github.com/taylorbryant/next-starter-tailwind"&gt;next-starter-tailwind&lt;/a&gt; because of its simplicity. I'll be using it as a template to create a repository for the newsletter subscription app. Please feel free to use any other starter project you are comfortable with.&lt;/p&gt;

&lt;p&gt;Please create a repo by clicking on the &lt;code&gt;Use this template&lt;/code&gt; button of the &lt;code&gt;next-starter-tailwind&lt;/code&gt; repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHvmJx0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963836334/CGyvzhFNu.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHvmJx0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963836334/CGyvzhFNu.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide required details and create a repository from the template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdG19dEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963928403/7fMP3ykgS.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdG19dEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629963928403/7fMP3ykgS.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now clone the repository and browse to the project folder. Open a command prompt or terminal window to install dependencies using the following command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="c"&gt;# Or, yarn install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage, please open the project with your favorite code editor(VS Code, in my case) and make minor code changes. Open the &lt;code&gt;header.js&lt;/code&gt; file under the &lt;code&gt;components&lt;/code&gt; folder and find the &lt;code&gt;Next.js Starter Tailwind&lt;/code&gt; text. Change this text to &lt;code&gt;Newsletter demo powered by Next.js Revue Tailwind&lt;/code&gt;. Additionally, you can change the creator name, GitHub information in the &lt;code&gt;footer.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now save your changes and use this command from your command prompt to launch the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev &lt;span class="c"&gt;# Or, yarn dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access the app using the URL &lt;code&gt;http://localhost:3000&lt;/code&gt;. You should see the initial user interface coming up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8Kd_Yxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629964964534/ZAjQJYCfE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8Kd_Yxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629964964534/ZAjQJYCfE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Initial UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-subscription-form"&gt;
  &lt;/a&gt;
  Create the Subscription Form
&lt;/h2&gt;

&lt;p&gt;Let's create a basic subscription form with a single email field and a button to subscribe. Please create a new file called &lt;code&gt;Subscribe.js&lt;/code&gt; under the &lt;code&gt;components&lt;/code&gt; folder with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border border-gray-200 rounded p-6 my-4 w-full bg-gray-50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-900 mb-6 text-lg md:text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nx"&gt;Want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;keep&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;brain&lt;/span&gt; &lt;span class="nx"&gt;engaged&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;great&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;UX&lt;/span&gt; &lt;span class="nx"&gt;learning&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-800 dark:text-gray-400 mb-10 text-base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Enter&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ll be be added to my email newsletter, of which you can opt out any time.
      &amp;lt;/p&amp;gt;
      &amp;lt;form className="relative my-4"&amp;gt;
        &amp;lt;input
          aria-label="Email for newsletter"
          placeholder="john@email.com"
          type="email"
          autoComplete="email"
          required
          className="py-4 px-0 text-md bg-transparent w-9/12 text-gray-900 border-b-2 border-gray-600 dark:border-gray-400 dark:text-white focus:border-brand focus-visible:outline-none"
        /&amp;gt;
        &amp;lt;button
          className="flex justify-center px-5 py-4 mt-8 bg-green-600 text-white font-bold text-lg"
          type="submit"
        &amp;gt;
          Subscribe
        &amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;

      &amp;lt;p className="text-xl text-gray-800 dark:text-gray-200"&amp;gt;
        14 subscribers . 3 issues
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Subscribe;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a react component with a simple form having one email field and a button. We have also hardcoded the subscribers and issues count. Later, we will make the API calls to fetch those. We have styled the HTML element using &lt;a href="https://tailwindcss.com/docs"&gt;tailwindcss classes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now move over to the &lt;code&gt;index.js&lt;/code&gt; under the &lt;code&gt;pages&lt;/code&gt; folder. Replace the content of the file with the following,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@components/Subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are importing and using the &lt;code&gt;Subscribe&lt;/code&gt; component so that when the app loads, it shows the newsletter subscription form. Let's refresh the page. You should see subscription forms like,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EsJjc4oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630071552191/Kp8AMgDwD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EsJjc4oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630071552191/Kp8AMgDwD.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Subscription Form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-nextjs-api-routes-to-subscribe-and-many-more"&gt;
  &lt;/a&gt;
  Create Next.js API Routes to Subscribe, and Many More
&lt;/h1&gt;

&lt;p&gt;Now it's time to create &lt;code&gt;Next.js API Routes&lt;/code&gt; to register a new subscriber, get the subscriber count, and list of issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-serverless-functions"&gt;
  &lt;/a&gt;
  Next.js Serverless Functions
&lt;/h2&gt;

&lt;p&gt;With Next.js's &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API Routes&lt;/a&gt;, you can easily create API endpoints. In the background, it uses Node.js serverless functions. You need to create these functions inside the &lt;code&gt;pages/api&lt;/code&gt; folder. So, let us first create a folder called &lt;code&gt;api&lt;/code&gt; under the &lt;code&gt;pages&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;We will need the Revue API key now. Please create &lt;code&gt;.env.local&lt;/code&gt; file at the root of the project folder with the following line,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;REVUE_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;REPLACE_THIS_WITH_REVUE_API_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please use your &lt;code&gt;API Key&lt;/code&gt; you have copied from the revue integration page earlier.&lt;/p&gt;

&lt;p&gt;At this stage, you need to restart the local server for the environment variable to get loaded in our app. So stop the server and restart it using the &lt;code&gt;yarn dev&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Let's create the API route to register a new subscriber.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-hold-on-why-cant-we-use-the-revue-api-directly"&gt;
  &lt;/a&gt;
  But, Hold On! Why Can't We use the Revue API Directly?
&lt;/h2&gt;

&lt;p&gt;You can. It is possible to use the Revue APIs directly in your React components. However, there are a few advantages of using it via the Next.js APIs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the future, if you want to use another newsletter service other than Revue, your user interface component code never changes. You just change the serverless function and redeploy.&lt;/li&gt;
&lt;li&gt;There is an abstraction. It helps you to deploy and host just the API separately along with your own business use cases. Alright, let's move on.&lt;/li&gt;
&lt;li&gt;Accessing these APIs directly on the client-side will leave you with the risk of the API key exposed that anyone can obtain easily by inspecting network requests. You do not want that!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-nextjs-api-route-to-register-a-new-subscriber"&gt;
  &lt;/a&gt;
  Create Next.js API Route to Register a New Subscriber
&lt;/h2&gt;

&lt;p&gt;Create a file called &lt;code&gt;subscribe.js&lt;/code&gt; inside &lt;code&gt;pages/api&lt;/code&gt; folder. It means our API route will be accessible from the UI components using the URI &lt;code&gt;/api/subscribe&lt;/code&gt;. Please paste the following content in the &lt;code&gt;subscribe.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. Get the email from the payload and&lt;/span&gt;
    &lt;span class="c1"&gt;// validate if it is empty.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide an email id.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. Use the Revue API Key and create a subscriber using&lt;/span&gt;
    &lt;span class="c1"&gt;// the email we pass to the API. Please note, we pass the&lt;/span&gt;
    &lt;span class="c1"&gt;// API Key in the 'Authorization' header.&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REVUE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`https://www.getrevue.co/api/v2/subscribers`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;double_opt_in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
                &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// 3. We check in the response if the status is 400&lt;/span&gt;
    &lt;span class="c1"&gt;// If so, consider it as error and return. Otherwise a 201&lt;/span&gt;
    &lt;span class="c1"&gt;// for create        &lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Send a JSON response&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hey, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, Please check your email and verify it. Can't wait to get you boarded.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 4. If the control goes inside the catch block&lt;/span&gt;
    &lt;span class="c1"&gt;// let us consider it as a server error(500)  &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things are going on in the above function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When someone invokes this API function, we expect an email part of the payload. So first, get the email from the payload and validate if it is empty.&lt;/li&gt;
&lt;li&gt;Next, use the email and API_KEY to call the Revue API to register a subscriber. Note the payload here. We are passing the email value and &lt;code&gt;double_opt_in&lt;/code&gt; value as &lt;code&gt;false&lt;/code&gt;. In reality, you will NOT pass the double_opt_in value as false as you want your subscribers to verify email before confirming. We are doing it just for the demo's sake.&lt;/li&gt;
&lt;li&gt;Then, we check in the &lt;code&gt;response&lt;/code&gt; if the status is 400. If so, consider it as an error and return with an error message. Otherwise, a 201 for creating and return with a success message.&lt;/li&gt;
&lt;li&gt;Last, If the control goes inside the catch block, let us consider it a server error(500).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#update-the-ui-code-to-register-subscribers"&gt;
  &lt;/a&gt;
  Update the UI Code to Register Subscribers
&lt;/h3&gt;

&lt;p&gt;We will update the &lt;code&gt;Subscribe&lt;/code&gt; component to use the &lt;code&gt;/api/subscribe&lt;/code&gt; API. Open the &lt;code&gt;Subscribe.js&lt;/code&gt; file under the &lt;code&gt;components&lt;/code&gt; folder and make these changes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Import the &lt;code&gt;useState&lt;/code&gt; hook from &lt;code&gt;react&lt;/code&gt; to manage a few states. Add this line at the top of the file.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create three state variables to handle the email from the user input and the error, success message from the API call. Add these three lines at the beginning of the &lt;code&gt;Subscribe&lt;/code&gt; function as,
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;.....&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Rest of the code as is */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;....&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Next, handle two events. One is to capture the user input in the email field, and the second is to handle the for submit.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; ...
 ...
 &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"relative my-4"&lt;/span&gt; &lt;span class="na"&gt;onSubmit=&lt;/span&gt;&lt;span class="s"&gt;{subscribeMe}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{changeEmail}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now is the time to define both &lt;code&gt;subscribeMe&lt;/code&gt; and &lt;code&gt;changeEmail&lt;/code&gt; methods.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;subscribeMe&lt;/code&gt; method, we call the API &lt;code&gt;/api/subscribe&lt;/code&gt;, passing the email value as the payload. Then we handle the error and success message.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Last, let's show the success and error message in the UI. Add this code right after the form element.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   {success 
          ? 
       &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center text-sm font-bold text-green-700"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
            {success}
       &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
          : 
       &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center text-sm font-bold text-red-800"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             {error} 
       &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now go to the app and provide an email id to register. As we have turned off the email verification, you can test it with an arbitrary email id. Please take a look into the entire source file &lt;a href="https://github.com/atapas/next-starter-revue-tailwind/blob/master/components/Subscribe.js"&gt;from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7oLz6xi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082649555/YLQNTgmsf.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7oLz6xi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082649555/YLQNTgmsf.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Register Success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To verify, the email address got added successfully, got to the &lt;a href="https://www.getrevue.co/app/lists"&gt;subscribers&lt;/a&gt; page of your account. You should see this new email id added,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkzKgP14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629973057192/-Webt8GAm.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkzKgP14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629973057192/-Webt8GAm.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Subascriber added"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please make sure to use the email verification by turning on &lt;code&gt;double_opt_in: true&lt;/code&gt; in the API function for production usage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try the same email id again to attempt to register!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbeGN4zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082807675/muZ1jY72r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbeGN4zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630082807675/muZ1jY72r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="register fail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep, you will get that error. That's all. The subscription works well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-the-subscriber-count"&gt;
  &lt;/a&gt;
  Get the Subscriber Count
&lt;/h2&gt;

&lt;p&gt;Alright, let's get the subscriber count. So we will now write a serverless function to fetch the subscriber count. Please create a file called &lt;code&gt;subscribers.js&lt;/code&gt; under the &lt;code&gt;pages/api&lt;/code&gt; folder with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REVUE_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.getrevue.co/api/v2/subscribers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public, s-maxage=1200, stale-while-revalidate=600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the Revue API to fetch the subscriber list and then return the count as a response. So, now we have to use the &lt;code&gt;/api/subscribers&lt;/code&gt; URI to fetch the count. Let's do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-the-ui-code-to-fetch-subscriber-count"&gt;
  &lt;/a&gt;
  Update the UI Code to Fetch Subscriber Count
&lt;/h3&gt;

&lt;p&gt;We need to fetch the subscriber count when the &lt;code&gt;Subscribe&lt;/code&gt; component loads. Also, if there is a new subscriber, we need to show the updated count in the UI. &lt;code&gt;Next.js&lt;/code&gt; supports two kinds of &lt;code&gt;pre-rendering&lt;/code&gt;,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Static Generation(SSG)&lt;/code&gt;: In this case, everything is precompiled, prebuilt and cached. You do not see changes in your content until there is another build. It works best when you deal with static data like blog articles.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Server-Side Rendering(SSR)&lt;/code&gt;: Here, the data for a page generates on demand for each request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We prefer static generation as much as possible but may not avoid the server-side rendering in some cases. For our app, we will use &lt;code&gt;SWR&lt;/code&gt;. As described &lt;a href="https://swr.vercel.app/"&gt;here&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;SWR&lt;/code&gt; is derived from &lt;code&gt;stale-while-revalidate&lt;/code&gt; , a HTTP cache invalidation strategy popularized by &lt;code&gt;HTTP RFC 5861&lt;/code&gt;. SWR is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With Next.js &lt;code&gt;pre-rendering&lt;/code&gt; support and &lt;code&gt;SWR&lt;/code&gt;, you can pre-render the page for SEO and allow caching, revalidation, and re-fetching at intervals on the client side.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;swr&lt;/code&gt; library using the command,
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;swr&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;Or&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;swr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;swr&lt;/code&gt; library gives us a hook called &lt;code&gt;useSWR&lt;/code&gt;. It takes two parameters, a &lt;code&gt;key&lt;/code&gt;  and a fetcher function. The &lt;code&gt;key&lt;/code&gt; is a string value, usually the API URL that we will pass to the &lt;code&gt;fetcher&lt;/code&gt; function, and the &lt;code&gt;fetcher&lt;/code&gt; function can be an asynchronous function. So, let us create a simple fetcher function. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please create a &lt;code&gt;utils&lt;/code&gt; folder at the root of the project and create a &lt;code&gt;fetcher.js&lt;/code&gt; file with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Fetcher&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in the &lt;code&gt;components/Subscribe.js&lt;/code&gt; file, include these two imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/fetcher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use the &lt;code&gt;useSWR&lt;/code&gt; hook to pass the API(&lt;code&gt;api/subscribers&lt;/code&gt;) and the fetcher function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// --- above is old code ---&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/subscribers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscriberCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note, we use the &lt;code&gt;JavaScript optional chaining(?.)&lt;/code&gt; feature to get the count value. It handles the &lt;code&gt;undefined&lt;/code&gt; value much safely.&lt;/p&gt;

&lt;p&gt;Every time the data gets changed at the back-end, the &lt;code&gt;subscriberCount&lt;/code&gt; variable will have the latest count.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Last is to use the &lt;code&gt;subscriberCount&lt;/code&gt; state variable instead of the hardcoded value.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"text-sm text-gray-800 dark:text-gray-200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     { subscriberCount } subscribers . 3 issues
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all. Refresh the app and see the actual count reflecting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MS-uN5Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083167179/SbLVFz4lo.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MS-uN5Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083167179/SbLVFz4lo.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Subscriber count"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-the-issue-list"&gt;
  &lt;/a&gt;
  Get the Issue List
&lt;/h2&gt;

&lt;p&gt;Now we need to get the issue list and the count of published issues. So we have to write a serverless function again to fetch these details. But wait, I'm not going to do that in this tutorial. Please take it as an exercise to try out. &lt;/p&gt;

&lt;p&gt;Hint: You need to use this Revue API to fetch the data =&amp;gt; &lt;code&gt;GET /v2/issues&lt;/code&gt;. If you need help, the &lt;a href="https://github.com/atapas/next-starter-revue-tailwind/blob/master/pages/api/issues.js"&gt;API code is here&lt;/a&gt;, and the &lt;a href="https://github.com/atapas/next-starter-revue-tailwind/blob/master/components/Subscribe.js"&gt;component changes&lt;/a&gt; are here to refer to.&lt;/p&gt;

&lt;p&gt;In the end, the UI should have the actual issue count and a list of published issues like this(I have one test issue).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHp5TtHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083249642/_OUZULeLh.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHp5TtHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630083249642/_OUZULeLh.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="final page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-deploy"&gt;
  &lt;/a&gt;
  Let's Deploy
&lt;/h1&gt;

&lt;p&gt;Congratulations!!! The app is ready to use. But, it is available only with you. Let's deploy it publicly. We will use the &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; platform to deploy our app. It is super easy to deploy a Next.js app on Vercel using a few simple steps. To make it happen, please commit and push all your code changes to the &lt;code&gt;GitHub&lt;/code&gt; repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an account with Vercel, log in and click on the &lt;code&gt;New Project&lt;/code&gt; button to get started.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pg9gMS1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979553563/T5xJig9eN.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pg9gMS1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979553563/T5xJig9eN.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Next, import your project from GitHub.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8mITG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979633056/Lwb0k4SFB.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8mITG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979633056/Lwb0k4SFB.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, you need to configure your project. For a Next.js project, you hardly need to make any changes to the build and other parameters. If your app is depending on any Environment Variables, you need to add them one by one. In our case, we have one. So let's add it. Then, click on the &lt;code&gt;Deploy&lt;/code&gt; button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKbdwi20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979696642/0buvXxOsn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKbdwi20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979696642/0buvXxOsn.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Congratulations!!! You have deployed the app successfully on Vercel. Now you can access the app publicly using the URL generated by the deployment process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZTgRjOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979809143/GeERj2HL8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZTgRjOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629979809143/GeERj2HL8.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Post-deployment, you can perform many checks and additional configurations based on your needs. If your app has one or more serverless functions, you can see the live execution logs from your project's &lt;code&gt;Functions&lt;/code&gt; tab. The image below shows the log for our functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLz2p6xP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629982080277/tl8GRrAec.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLz2p6xP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629982080277/tl8GRrAec.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Next.js&lt;/code&gt; is the future(arguably?) for React-based projects. It is easy to set up, learn, and use. The &lt;code&gt;tailwindcss&lt;/code&gt; is a developer-friendly CSS library to style the app. &lt;code&gt;Revue&lt;/code&gt; is an amazing newsletter service.&lt;/li&gt;
&lt;li&gt;Your users, customers like the &lt;code&gt;oneness&lt;/code&gt; and the &lt;code&gt;belongingness&lt;/code&gt;. Then why not get the newsletter service within the app/site itself and manage it?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Next.js APIs&lt;/code&gt; are the Node.js &lt;code&gt;serverless functions&lt;/code&gt; in the background. It is a great way to fetch, interact with back-end services.&lt;/li&gt;
&lt;li&gt;It is super easy to deploy and maintain your Next.js app(including serverless functions) using &lt;code&gt;Vercel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similar to this, you can integrate many other services like GitHub, your blog, and many more that I'll cover in my upcoming post.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's all. I hope you enjoyed building it with me. Please share/like this article and the video tutorial so that it reaches others as well. &lt;/p&gt;

&lt;p&gt;Let's connect. Please find me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt;, sharing thoughts, tips, and code practices. Would you please give a follow?&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>twitter</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Revealing module pattern is beautiful</title>
      <author>Sudharshaun Mugundan</author>
      <pubDate>Sat, 28 Aug 2021 06:02:59 +0000</pubDate>
      <link>https://dev.to/ididnt_getalong/revealing-module-pattern-is-beautiful-3coi</link>
      <guid>https://dev.to/ididnt_getalong/revealing-module-pattern-is-beautiful-3coi</guid>
      <description>&lt;p&gt;Revealing module pattern is one of the sub pattern of the module pattern. Don't know how many people still use module pattern in javascript, and I have seen a fair amount of code which uses RMP. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-a-module-pattern-anyway"&gt;
  &lt;/a&gt;
  So what is a module pattern anyway?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The public members are exposed in the return function.&lt;/li&gt;
&lt;li&gt;The private members live in the closure.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Natasha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greetHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ! Thanks for signing up!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greetWelcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ! Welcome back!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-rmp-is-different-from-module-pattern"&gt;
  &lt;/a&gt;
  How RMP is different from Module pattern?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All the functions live in the closure.&lt;/li&gt;
&lt;li&gt;Only the functions that should be exposed are made public under return.&lt;/li&gt;
&lt;li&gt;The return functions will not have any function definitions. It will just reference the functions in the private.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Natasha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greetHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ! Thanks for signing up!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greetWelcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ! Welcome back!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;greetHello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;greetWelcome&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Hello Natasha ! Thanks for signing up!&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Hello Natasha ! Welcome back!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It gives a flexibility to reference the function name with our choice. Here greetHello is the function but it is exposed as hello. This helps in a lot of scenarios, let's say you are writing an API and the module would want a function name &lt;strong&gt;saveDetailsToDB&lt;/strong&gt; for understanding the logic but not anyone who wants to use the API need that information, so you can just say

&lt;code&gt;return {save: saveDetailsToDB}&lt;/code&gt;

.&lt;/li&gt;
&lt;li&gt;Removing the key pair from the return object would make the exposed function private. Whereas in module pattern you have to remove the function from return object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have been a big fan of this pattern and it is just an admiration post on how beautiful it is :P &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Git Command That Changed My life</title>
      <author>Tips and Tricks</author>
      <pubDate>Sat, 28 Aug 2021 06:02:41 +0000</pubDate>
      <link>https://dev.to/tips_tricks/git-command-that-changed-my-life-24ed</link>
      <guid>https://dev.to/tips_tricks/git-command-that-changed-my-life-24ed</guid>
      <description>&lt;p&gt;&lt;span&gt;Git is one of the most common version control systems available, and it's used on private systems and publicly hosted websites for all kinds of development work. Regardless of how proficient with Git I become, it seems there are always features left to discover. Here are seven tricks that have changed the way I work with Git.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;h1&gt;&lt;a href="https://www.codelivly.com/git-tricks-that-changed-my-life/"&gt;7 Git tricks that changed my life&lt;/a&gt;&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>Object Oriented Programming 💊 </title>
      <author>Memo Villalta</author>
      <pubDate>Sat, 28 Aug 2021 05:49:39 +0000</pubDate>
      <link>https://dev.to/memoev/oop-35e0</link>
      <guid>https://dev.to/memoev/oop-35e0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;Object-oriented programming is a term that as a developer, you hear a lot and you build into the concept as you write more code, it was until recently that I decided to take a deeper dive into really understanding what it is and the greater advantages of exploiting its benefits.&lt;/p&gt;

&lt;p&gt;Here's a quick example of how an &lt;code&gt;Object&lt;/code&gt; usually looks like in javascript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;myStringProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OOP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myNumberProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myNumberProperty&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  DEFINITION
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS"&gt;OOP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OOP (Object-Oriented Programming) is an &lt;code&gt;approach in programming in which data is encapsulated within objects and the object itself is operated on, rather than its component parts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's important to mention that JavaScript is heavily object-oriented. It follows a prototype-based model (as opposed to class-based). Every single datatype has its own prototype with its own properties and methods, the way to invoke them is using the keyword &lt;code&gt;prototype&lt;/code&gt;, for example: &lt;code&gt;Array.prototype&lt;/code&gt;. With this we just created an instance of an array.&lt;/p&gt;

&lt;p&gt;The best way to put OOP into simple words: box containing characteristics, traits, attributes, features, etc., that define a concept or idea. For example, if we want to describe a car in OOP, we could do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;engineOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;engineOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;engineOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the example above we just modeled a car into an object containing all its key properties and methods, which are functions that a car actually can do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  BENEFITS
&lt;/h3&gt;

&lt;p&gt;Pre-OOP, JavaScript programming was mainly procedural, which basically means, having a lot of variables with a bunch of functions which would alter data in order to achieve a desired output. Which in most cases is "easy" to follow-up and might be straightforward. The problem with this is, as your program grows, so does its complexity, and you might end up with a large number of functions all over the place with repetitive code blocks prone to breaking and bugs, in other words: &lt;code&gt;spaghetti code&lt;/code&gt;, but there's four core concepts that OOP provides, which will help us find ways to manage this issue.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  ENCAPSULATION
&lt;/h4&gt;

&lt;p&gt;The first benefit is the ability of encapsulating information into units, making it easy to access and manipulate. These units are objects, the data/variables is our properties and any manipulations affecting the data is our methods.&lt;/p&gt;

&lt;p&gt;Here's a clear example that brings to light the benefits of encapsulation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;baseSalary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;overtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getWage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseSalary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;overtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;baseSalary&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overtime&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we have procedural code with 3 variables on one side and a function performing an arithmetic calculation returning a result on the other side, you can say that they are decoupled. &lt;/p&gt;

&lt;p&gt;Here's how this code block would look through the eyes of OOP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;baseSalary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;overtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getWage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;baseSalary&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overtime&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getWage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created a new employee object with three properties and a single method which computes the data returning a result. Benefits are clear, if you look at the &lt;code&gt;getWage&lt;/code&gt; function you can notice there's no parameters being passed along; since the &lt;code&gt;employee&lt;/code&gt; object already contains all data within its properties, we can use the scope to use them (&lt;code&gt;this&lt;/code&gt;). All properties and methods inside the &lt;code&gt;employee&lt;/code&gt; object, are highly related and modeled into one single unit. So we can say, one of the symptoms of procedural code it's functions with multiple parameters, but as you write more OOP code, you'll get functions with fewer parameters. The lower the number of parameters, the easier it is to use and maintain.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#abstraction"&gt;
  &lt;/a&gt;
  ABSTRACTION
&lt;/h4&gt;

&lt;p&gt;The main purpose of abstraction is: the ability to remove a complex concept out of sight and mind. You can image a CPU as a black box with buttons, since the case covers the motherboard, cables, power source, graphic cards, fans, etc., people don't really give a lot of thought of all the delicate intricacies that go into the build of having a working computer. From here you can say that the concept of a CPU has been abstracted from the user.&lt;/p&gt;

&lt;p&gt;You can use the same technique in OOP by hiding some of the properties and methods from the outside. Some of the benefits of doing this would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A simpler interface to interact with the object.&lt;/li&gt;
&lt;li&gt;You reduce the impact of change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By having a container unit, you're able to just expose some properties and methods, making it more digestible for the user. As well, if you change these private methods contained within the object, changes won't leak to the outside global scope of our code and affect less of the overall functionality of our program. By this you're avoiding the spaghetti mentioned up top.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  INHERITANCE
&lt;/h4&gt;

&lt;p&gt;By using inheritance, we avoid the need of redundant code. Objects can be modeled into cookie-cutters which will create multiple variables, each having the same properties and methods. With this we're creating multiple clones with different names but with the same functionality. You can later reference these clones in a unique and particular way, affecting one of them but not all. This introduces us to the concept of an &lt;code&gt;object template&lt;/code&gt;, or constructor. By using constructors you can generate object instances that will have the same usability across our program, instead of having to redefine all these properties and methods per element created.&lt;/p&gt;

&lt;p&gt;Constructors are functions which assign features to an object. Here's a quick example of how this looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi! I&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;m &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, and I&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;m &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; years old.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we're creating a person with name and age as properties and a greeting method. In order to use it, we write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jimmy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Jimmy&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// John&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#polymorphism"&gt;
  &lt;/a&gt;
  POLYMORPHISM
&lt;/h4&gt;

&lt;p&gt;To understand Polymorphism better, we're going to look into how the word is compose, &lt;code&gt;poly&lt;/code&gt; means many and &lt;code&gt;morph&lt;/code&gt; means form. In OOP, polymorphism is a core concept that provides a way to perform a single action in different forms. It provides an ability to call the same method on different JavaScript objects. As JavaScript is not a type-safe language (unless you are using either Typescript or strict mode), we can pass any type of data members with our methods.&lt;/p&gt;

&lt;p&gt;Going back to our Person example, we're able to see how the &lt;code&gt;greeting&lt;/code&gt; method returns two different outputs, since it depends on the values on &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hi! I'm Jimmy, and I'm 20 years old.&lt;/span&gt;
&lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hi! I'm John, and I'm 21 years old.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically the advantage of polymorphism is, that as developers, we are able to design objects to share behaviors and to be able to override shared behaviors with specific ones, taking advantage of inheritance to make this happen. If we want to alter the behavior of one specific instance of the person class and create an athlete, we would want to go about it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Athlete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, we want to alter the behavior of the &lt;code&gt;greeting&lt;/code&gt; method, by letting users know how fast our new athlete can go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Athlete&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi! I&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;m &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, I&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;m &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; years old, and I can run up to &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; miles per hour&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Being able to do all this, will provide a user friendly and more elegant way to describe different cases for specific scenarios that demand multiple outcomes depending on the type of the input. That's something that would be written more extensible within switch/case statements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  SUMMARY
&lt;/h3&gt;

&lt;p&gt;Object-oriented programming allows us to model/design our data as units, providing the benefits of &lt;code&gt;Encapsulation&lt;/code&gt;, which allows us to group related variables and functions together, reducing complexity and reusing code along different parts of the program. With &lt;code&gt;Abstraction&lt;/code&gt;, we hide the details and complexity, showing only what's necessary, helping us to isolate the impact of changes. &lt;code&gt;Inheritance&lt;/code&gt; helps us to eliminate redundant code and lastly, with &lt;code&gt;Polymorphism&lt;/code&gt; we are able to avoid overloading our code with multiple case scenarios.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>LetsGrowMore Web Development Internship Experience</title>
      <author>haripriya1110</author>
      <pubDate>Sat, 28 Aug 2021 05:30:27 +0000</pubDate>
      <link>https://dev.to/haripriya1110/letsgrowmore-web-development-internship-experience-efe</link>
      <guid>https://dev.to/haripriya1110/letsgrowmore-web-development-internship-experience-efe</guid>
      <description>&lt;p&gt;Hello everyone, I have successfully completed the web Development Internship at LetsGrowMore by completing the Task-1 and Task-2 assigned by them.&lt;/p&gt;

&lt;p&gt;Task-1:Single-Page Website&lt;br&gt;
Technologies used:HTML,CSS,javascript&lt;br&gt;
Code Editor:Visual Studio Code&lt;/p&gt;

&lt;p&gt;Task-1 Experience:&lt;/p&gt;

&lt;p&gt;I have learnt HTML,CSS and javascript for designing this website. I have learnt so many new things about CSS and its purposes. This Internship helped me to know more about javascript. It was a great learning experience.&lt;/p&gt;

&lt;p&gt;Task-2:Web Application Using Create-React-App&lt;br&gt;
Technologies Used:HTML,React js,Javascript,CSS&lt;br&gt;
Code Editor:CodeSandBox&lt;/p&gt;

&lt;p&gt;Task-2 Experience:&lt;/p&gt;

&lt;p&gt;I have learnt React JS to complete this Web Application. This is a simple web application to display the users of brand while clicking in the get users button. It was a great learing experience.&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;br&gt;
I would like to thank Mr.Aman Kesarwani and LetsGrowMore for giving me this opportunity to work on the projects based on Web Development. Through this Internship I have learnt and gained a lot of practical knowledge in the field of Web Development.&lt;br&gt;
To know more about LetsGrowMore Internships visit the site &lt;a href="https://letsgrowmore.in/"&gt;https://letsgrowmore.in/&lt;/a&gt; and &lt;a href="https://letsgrowmore.in/vip/"&gt;https://letsgrowmore.in/vip/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 16, Summary of the week</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 28 Aug 2021 05:29:42 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-16-summary-of-the-week-17m1</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-16-summary-of-the-week-17m1</guid>
      <description>&lt;p&gt;This week we completed the 'numeric and mathematical modules' by covering three modules, namely &lt;code&gt;Statistics&lt;/code&gt; &lt;code&gt;decimal&lt;/code&gt; and &lt;code&gt;fraction&lt;/code&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-13-the-statistics-module-2bb5"&gt;Day 13, The Statistics Module&lt;/a&gt; In this part, only a single sample program was given, which showed various statistical functions with comments explaining what they did. You will find a more detailed and comprehensive explaination at the &lt;a href="https://dev.toYou%20will%20find%20a%20more%20detailed%20and%20comprehensive%20explaination%20at%20the%20official%20documentation"&gt;official documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-14-introduction-to-the-decimal-module-4ngc"&gt;Day 14, Introduction to the Decimal module&lt;/a&gt; The Decimal module is a way by which faster and accurate floating point arithmetic can be achieved. We can avoid Python errors like 0.1+0.2+0.3-0.7=-0.09999999999999987  by using this module. The decimal module is a very vast module, and only a small gist of it was given in this part. You might like to visit &lt;a href="https://www.tutorialspoint.com/decimal-functions-in-python"&gt;this link&lt;/a&gt; for learning about more functions or check out the &lt;a href="https://docs.python.org/3/library/decimal.html#"&gt;official documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-15-complete-guide-to-the-fractions-module-4ki8"&gt;Day 15, Complete guide to the fractions module&lt;/a&gt; The fractions module is a inbuilt module in Python which is very useful when we have to deal with floating point numbers. The &lt;code&gt;fr.Fraction()&lt;/code&gt; converts a floating number into a fraction object, making it easier to comprehend. In this part, many commented pieces of code examples were provided for getting a full grasp of the subject. Operating on fractions is just like operating on real numbers, and we can use the mathematical operators to calculate them in a very easy way.&lt;br&gt;
We also looked at some useful methods in the module.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note&lt;br&gt;
Not all would require to get the most out of these modules, hence you may feel free to skip these parts. I have tried to give just a brief summary of the modules, especially the decimal module without diving too deep into the details. The documentation of the modules is also very precise and clear, hence rather than explaining facts in depth, I have tried to speeding things up. By covering only the important parts which are more likely to be used, the course aims to cover a gist of the modules in least time possible. &lt;/p&gt;

&lt;p&gt;Thank you ! That was all for this week 👍 Meet you next Tuesday 🤠&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-gui-from-next-week"&gt;
  &lt;/a&gt;
  Python GUI from next week🤩
&lt;/h2&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Follow me on GitHub for updates.......&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>codenewbie</category>
      <category>python</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
