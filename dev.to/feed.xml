<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best CSS Shortcut properties to improve your web application</title>
      <author>Coder</author>
      <pubDate>Wed, 13 Oct 2021 09:26:25 +0000</pubDate>
      <link>https://dev.to/huua/best-css-shortcut-properties-to-improve-your-web-application-34lc</link>
      <guid>https://dev.to/huua/best-css-shortcut-properties-to-improve-your-web-application-34lc</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Why should I care shorthand properties?  CSS is a language for describing the appearance of a web page. Each element in an HTML page can have its location, colors, fonts, and layout customized using CSS. In this blog post, I’ll give you some pointers on how to optimize your CSS code and your web app’s …&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/best-css-shorthand-properties/"&gt;Best CSS Shortcut properties to improve your web application&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>All CSS Properties You Need to Know to Build a Website</title>
      <author>Coder</author>
      <pubDate>Wed, 13 Oct 2021 09:25:31 +0000</pubDate>
      <link>https://dev.to/huua/all-css-properties-you-need-to-know-to-build-a-website-gl7</link>
      <guid>https://dev.to/huua/all-css-properties-you-need-to-know-to-build-a-website-gl7</guid>
      <description>&lt;p&gt;Whether you're at the beginning of your CSS journey or somewhere else, you got to admit - a number of CSS properties is massive.&lt;/p&gt;
&lt;p&gt;And it's easy to confuse yourself in that vast sea. &lt;/p&gt;
&lt;p&gt;You're copying code from StackOverflow until you find a solution that fits. But how will that scale? Why does it even work?&lt;/p&gt;
&lt;p&gt;Most of the time, you don't care about the answer. You just focus on the result.&lt;/p&gt;
&lt;p&gt;When building a website, some of the CSS properties are must-haves; yet, it's hard to recognize them. &lt;/p&gt;
&lt;p&gt;This article exists to help you solve the most common CSS problems while building a website.&lt;/p&gt;
&lt;p&gt;Let's dive into properties you cannot avoid. &lt;/p&gt;

&lt;p&gt;Read More: &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/all-css-properties-you-need-to-know-to-build-a-website/&amp;amp;ved=2ahUKEwj-otjisOfyAhVJyzgGHXG4CUcQFnoECAMQBQ&amp;amp;usg=AOvVaw2_ALco9oEYEYfcDMBxpqL0&amp;amp;cshid=1630829382032"&gt;&lt;b&gt;All CSS Properties You Need to Know to Build a Website&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to copy files in Java? Example</title>
      <author>javinpaul</author>
      <pubDate>Wed, 13 Oct 2021 09:21:04 +0000</pubDate>
      <link>https://dev.to/javinpaul/how-to-copy-files-in-java-example-3clf</link>
      <guid>https://dev.to/javinpaul/how-to-copy-files-in-java-example-3clf</guid>
      <description>&lt;p&gt;Hello folks, I have been programming in Java for a long time and you won't believe but there was &lt;strong&gt;no file copy method in the Java API until Java 7&lt;/strong&gt;. At that time, our options were either write it ourself, using a FileInputStream, a FileOutputStream and a buffer to copy bytes from one to the other - or better yet, use the &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.html"&gt;*&lt;em&gt;FileChannel.transferTo() *&lt;/em&gt;&lt;/a&gt;method or just use the Apache Commons' FileUtils which was a life save those days and even today. &lt;/p&gt;

&lt;p&gt;JDK has evolved now and you have a decent API to copy files from one directory to another. In this article, I'll show you both the pre-Java code for copying files from one directory to another as well post Java 7 code which makes this task a lot easier.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-copying-file-from-directory-to-other-before-java-7"&gt;
  &lt;/a&gt;
  1. Copying File from Directory to other before Java 7
&lt;/h2&gt;

&lt;p&gt;Dependency: Apache Commons IO&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-fileutilscopyfilefile-source-file-destination"&gt;
  &lt;/a&gt;
  1. FileUtils.copyFile(File source, File destination)
&lt;/h3&gt;

&lt;p&gt;This method copies a file to a new location preserving file timestamp&lt;/p&gt;

&lt;p&gt;This method copies the contents of the specified source file to the specified destination file. The directory holding the destination &lt;a href="https://www.java67.com/2014/02/how-to-create-file-and-directory-in-java.html"&gt;file is created if it does not exis&lt;/a&gt;t. If the destination file exists, then this method will overwrite it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.File&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.io.FileUtils&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/*** Java program to copy a file from one directory to another e.g. from src to dest
 ** @author Javin*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileCopyDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
        &lt;span class="c1"&gt;// Using Apache Commons FileUtils class&lt;/span&gt;
        &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;srcFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bin/HelloWorld.class"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;destFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"target/HelloWorld.class"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srcFile&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destFile&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"File successfully copied in Java"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;Output:&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"File successfully copied in Java"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-copies-a-file-to-a-directory-preserving-the-timestamp"&gt;
  &lt;/a&gt;
  1.2 Copies a file to a directory preserving the timestamp
&lt;/h3&gt;

&lt;p&gt;This method copies the contents of the specified source file to a file of the same name in the specified destination directory. The destination &lt;a href="https://javarevisited.blogspot.com/2011/12/create-file-directory-java-example.html"&gt;directory is created if it does not exis&lt;/a&gt;t. If the destination file exists, then this method will overwrite it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.File&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.commons.io.FileUtils&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/*** Java program to copy a file from one directory to another like from src to dest
 ** @author Javin Paul*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Testing&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
        &lt;span class="c1"&gt;// Using Apache Commons FileUtils class&lt;/span&gt;
        &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;srcFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bin/HelloWorld.class"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;destDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"target"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyFileToDirectory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srcFile&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destDir&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"File successfully copied to destination directory in Java"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;Output:&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;successfully&lt;/span&gt; &lt;span class="n"&gt;copied&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nc"&gt;Java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2016/02/how-to-copy-non-empty-directory-in-java.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eooXXODw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dz2cdn1.dzone.com/storage/temp/15253331-how-to-copy-file-from-one-directory-to-other-in-ja.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-copying-files-from-one-directory-to-another-using-java-7-nio-2-api"&gt;
  &lt;/a&gt;
  2. Copying Files from One Directory to Another using Java 7 NIO 2 API
&lt;/h3&gt;

&lt;p&gt;In &lt;a href="https://javarevisited.blogspot.com/2014/04/10-jdk-7-features-to-revisit-before-you.html#google_vignette"&gt;Java 7&lt;/a&gt;, there is a standard method to copy files in java:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filescopy"&gt;
  &lt;/a&gt;
  Files.copy.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;It integrates with O/S native I/O for high performance.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.file.Files&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.file.Path&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;StandardCopyOption&lt;/span&gt;&lt;span class="o"&gt;.*;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LinkOption&lt;/span&gt;&lt;span class="o"&gt;.*;&lt;/span&gt; &lt;span class="cm"&gt;/*** Java program to copy file using Java 7 Files.copy() method** @author Javin Paul*/&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileCopyDemo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bin/HelloWorld.class"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toPath&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"target/HelloWorld.class"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toPath&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="no"&gt;REPLACE_EXISTING&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;COPY_ATTRIBUTES&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;NOFOLLOW_LINKS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"File successfully copied using Java 7 way"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// TODO Auto-generated catch blocke.printStackTrace();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also copy files in Java by writing code using &lt;a href="https://javarevisited.blogspot.com/2014/04/difference-between-fileinputstream-and-filereader-in-java.html"&gt;FileInputStream &lt;/a&gt;and &lt;a href="https://javarevisited.blogspot.com/2012/12/how-to-append-text-into-file-in-java-filewriter-example.html"&gt;FileOuputStream&lt;/a&gt;, but that's just not required, given you have Java 7 installed.&lt;/p&gt;

&lt;p&gt;Alternatively Apache commons IO FileUtils class is also handy. For high-speed file copy and transfer, you can also take advantage of the java.nio and &lt;a href="https://javarevisited.blogspot.com/2016/01/reading-writing-files-using-filechannel-bytebuffer-example.html#axzz6g8q23kRW"&gt;FileChannel &lt;/a&gt;class but beware that there is a bug in Windows, which prevents you to transfer more than 64GB of channel data. Windows bug around the transferFrom not able to copy streams larger than 64MB in one piece?&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Java Programming Articles&lt;/strong&gt; you May like:&lt;br&gt;
Other &lt;strong&gt;Java and Programming articles&lt;/strong&gt; you may like to read.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;The Java Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html"&gt;5 Free Spring  Framework Courses for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html#axzz6JJFPbsyP"&gt;Top 5 Courses to Learn Microservices with Spring Boot&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-5-books-and-courses-to-learn-restful-web-services-in-java-using-spring-mvc-and-spring-boot-79ec4b351d12"&gt;10 Courses to learn RESTful Web Service in Java&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/06/top-6-spring-framework-online-courses-Java-programmers.html"&gt;Top 5 Courses to learn Spring in Depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/5-essential-frameworks-every-java-developer-should-learn-6ed83315f1fb"&gt;5 Essential Frameworks Java Developer should learn &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2017/11/top-5-free-java-courses-for-beginners.html#axzz4zuIICRs9"&gt;5 Online Courses to learn Core Java for Free&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/top-5-java-design-pattern-courses-for-developers.html"&gt;Top 5 Java design patterns courses for experienced Java devs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-microservices-in-java-and-spring-framework-e9fed1ba804d"&gt;Top 7 Courses to learn Microservices in Java&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-spring-security-and-oauth2-with-spring-boot-for-java-developers-8f0222d6066d"&gt;10 Courses to learn Spring Security and OAuth2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/10-courses-to-prepare-for-programming-job-interviews.html"&gt;10 courses for Programming/Coding Job Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd"&gt;10 Advanced Spring Boot Courses for Java developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/04/top-5-spring-cloud-courses-for-java.html"&gt;Top 5 Courses to learn Spring Cloud for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/02/5-courses-to-learn-shell-scripting-in-linux.html"&gt;5 Courses to learn Shell Scripting in Linux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-spring-boot-tutorials-and-courses-for-java-developers-53dfe084587e"&gt;10 Free Spring Boot Tutorials and Courses for Java Devs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you like this Java tutorial, then please share it with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are new to the Java world and looking for free courses to learn Java from scratch then you can also take a look at &lt;strong&gt;&lt;a href="https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915"&gt;my favorite free Java courses&lt;/a&gt;&lt;/strong&gt; on Medium. It has some of the best free Java training courses to learn Java online.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>coding</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🛁 SANORA.BY Зеркала с подсветкой в Минске</title>
      <author>SANORA.BY</author>
      <pubDate>Wed, 13 Oct 2021 09:03:12 +0000</pubDate>
      <link>https://dev.to/sanora_by/sanoraby-zierkala-s-podsvietkoi-v-minskie-klp</link>
      <guid>https://dev.to/sanora_by/sanoraby-zierkala-s-podsvietkoi-v-minskie-klp</guid>
      <description>&lt;p&gt;&lt;a href="https://sanora.by/zerkala/zerkala-s-podsvetkoi/"&gt;SANORA.BY Магазин зеркал с подсветкой в Минске&lt;/a&gt;: зеркала с подсветкой, стильные зеркала в прихожую, зеркальные потолки, модульные системы, шкафчики, &lt;a href="https://sanora.by/polotencesushiteli/"&gt;полотенцесушители&lt;/a&gt;, душевые кабины, зеркало в спальню, прихожая - для вас, вашего дома, вашего комфорта...&lt;/p&gt;

&lt;p&gt;Зеркало в спальню - это стильный аксессуар вашей спальни, который позволит вам визуально увеличить помещение, сделать его светлее и уютней.&lt;/p&gt;

&lt;p&gt;Зеркало для спальни в обрамлении в виде зеркала в прихожей, шкафа или комода.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Free Django Dashboard - MaterialPRO Lite</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 13 Oct 2021 09:02:41 +0000</pubDate>
      <link>https://dev.to/sm0ke/free-django-dashboard-materialpro-lite-450b</link>
      <guid>https://dev.to/sm0ke/free-django-dashboard-materialpro-lite-450b</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;strong&gt;Django Dashboard&lt;/strong&gt; crafted on top of a pixel-perfect &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-material-lite"&gt;Material-Based&lt;/a&gt; design. The product comes with a simple, intuitive codebase, authentication, database, and deployment scripts via Docker. For newcomers, &lt;strong&gt;Django&lt;/strong&gt; is a leading web framework crafted in Python by experienced developers using a batteries-included concept and actively supported by an impressive open-source community. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-material-lite"&gt;Django MaterialPRO Lite&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨&lt;a href="https://django-dashboard-material-lite.appseed.us/"&gt;Django MaterialPRO Lite&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;✨More &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboards&lt;/a&gt; - free &amp;amp; commercial products&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RaZxecZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgddb1m46bu14ok67drd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RaZxecZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgddb1m46bu14ok67drd.jpg" alt="Django MaterialPRO Lite - Open-source seed project crafted in Django."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-features"&gt;
  &lt;/a&gt;
  ✨ Product Features
&lt;/h2&gt;

&lt;p&gt;This open-source &lt;strong&gt;Django Dashboard&lt;/strong&gt; comes with a few useful features that might help beginners (and not only) to code faster a new dashboard project without losing time with a few repetitive tasks like setting up the project, prepare the UI, and code the deployment scripts. &lt;strong&gt;Django MaterialPro Lite&lt;/strong&gt; offers out-of-the-box a short-list with features that solve all the above case-cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Up-to-date dependencies&lt;/code&gt;: &lt;strong&gt;Django 3.2.6 LTS&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SCSS compilation&lt;/strong&gt; via Gulp&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SQLite Database&lt;/code&gt;, Django Native ORM&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Session-Based Authentication&lt;/strong&gt;, Forms validation&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment scripts&lt;/strong&gt;: &lt;code&gt;Docker&lt;/code&gt;, Gunicorn / Nginx&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Probably the most easier way to see this seed project in action is to execute the Docker setup:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the source code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-dashboard-material-lite.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-dashboard-material-lite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Execute in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull   &lt;span class="c"&gt;# download modules&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build  &lt;span class="c"&gt;# execute local set up&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up     &lt;span class="c"&gt;# start the project&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all the above commands are executed, the project should be visible in the browser and we should be able to interact with the UI, create users, and access the private pages.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83I-mHuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6tl75te946d5tkt667z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83I-mHuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6tl75te946d5tkt667z.png" alt="Django MaterialPRO Lite - Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Django MaterialPro Lite - Maps Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9q_84rW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mu8m7c2wo4k2rezda5xt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9q_84rW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mu8m7c2wo4k2rezda5xt.png" alt="Django MaterialPro Lite - Maps Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-compile-from-sources"&gt;
  &lt;/a&gt;
  ✨ How to compile from sources
&lt;/h2&gt;

&lt;p&gt;In case &lt;code&gt;Docker is not installed in the workstation&lt;/code&gt;, we can build the product using the classic workflow: clone sources, install modules, set up the database, and start the app using Django WSGI embedded server. In order to complete this phase, make sure you have a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; installed in the workstation and accessible via the terminal: &lt;strong&gt;Python3&lt;/strong&gt;, &lt;strong&gt;GIT&lt;/strong&gt;, and a modern code editor like &lt;code&gt;Atom&lt;/code&gt; or &lt;code&gt;VsCode&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Step #1 - Clone sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-dashboard-material-lite.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-dashboard-material-lite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Step #2 - Install dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules - SQLite Storage&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Step #3 - Set up the database&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Step #4 - Start app (development mode)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Start the application (development mode)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver &lt;span class="c"&gt;# default port 8000&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the web app in browser: http://127.0.0.1:8000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well we should see the project running in the browser on the address  &lt;a href="http://localhost:8000:"&gt;http://localhost:8000:&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpFLwD_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv58vtc8jga5bnpcwpmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpFLwD_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv58vtc8jga5bnpcwpmd.png" alt="Django MaterialPro Lite - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-Source Dashboards&lt;/a&gt; - index provided by AppSeed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Full-stack &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt;&lt;/strong&gt; - free &amp;amp; commercial products &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>webdev</category>
      <category>dashboards</category>
    </item>
    <item>
      <title>Mockup API With JSON Server</title>
      <author>Linda Sebastian</author>
      <pubDate>Wed, 13 Oct 2021 08:05:37 +0000</pubDate>
      <link>https://dev.to/rocklinda/mockup-api-with-json-server-3kb8</link>
      <guid>https://dev.to/rocklinda/mockup-api-with-json-server-3kb8</guid>
      <description>&lt;h4&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h4&gt;

&lt;p&gt;In a software development project, sometimes the annoying common problem is frontend developer needs to wait until the backend developer finishes working on an API. That's why we need to make a mockup API, therefore both backend and frontend developers can work parallel.&lt;/p&gt;

&lt;p&gt;JSON server is an easy way to make a fake REST API, even a beginner or non-programmer can make it. The only prerequisite is you need to understand JSON structure. Here's a tutorial to make a fake REST API with JSON Server.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Install node js: [&lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Open a terminal (bash/shell/linux)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a directory call mock-api (or whatever you want)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;initial new project. Type &lt;code&gt;npm init&lt;/code&gt; then enter until show like below, and type yes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3jcZk1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvthygvtfdp6abizfzr1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3jcZk1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvthygvtfdp6abizfzr1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#working-with-json-server"&gt;
  &lt;/a&gt;
  Working with JSON Server
&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;install json server npm install -g json-server if you want install globally or npm i json-server if you want install locally. In this tutorial I will install globally&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g json-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;create file db.json&lt;/li&gt;
&lt;li&gt;write this structure json
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "users": [
        {
            "id": 1,
            "first_name": "Sonny",
            "last_name": "Allward",
            "email": "sallward0@umn.edu",
            "gender": "Genderfluid",
            "ip_address": "24.3.199.140"
        },
        {
            "id": 2,
            "first_name": "Manfred",
            "last_name": "Erickson",
            "email": "merickson1d@mapquest.com",
            "gender": "Genderfluid",
            "ip_address": "103.30.222.192"
        }
    ],
    "products": [
        {
            "id": 1,
            "product_name": "Beets",
            "sku": "54949-004",
            "price": 27,
            "category": "Beauty",
            "quantity": 69
        },
        {
            "id": 2,
            "product_name": "Wine - Mondavi Coastal Private",
            "sku": "46122-146",
            "price": 63,
            "category": "Home",
            "quantity": 12
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;running JSON Server
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run json:server --watch db.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pZ0yDVD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpm0uquzggr4yu007vzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZ0yDVD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpm0uquzggr4yu007vzc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#call-request"&gt;
  &lt;/a&gt;
  Call Request
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Get all data
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Get one data, method GET
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Search data, method GET
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/users?first_name=Manfred
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Pagination, method GET
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/users?_limit=10&amp;amp;_page=5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Sorting, method GET
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/users?_sort=id&amp;amp;_order=DESC
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create data, method POST
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/users
body:
{
    "id": 51,
    "first_name": "Itje",
    "last_name": "Juice",
    "email": "itje@yale.edu",
    "gender": "Helicopter",
    "ip_address": "44.73.130.666"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Delete data, method DELETE
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/users/1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github URL: [&lt;a href="https://github.com/rocklinda/mock-api"&gt;https://github.com/rocklinda/mock-api&lt;/a&gt;]&lt;br&gt;
NPM JSON Server: [&lt;a href="https://www.npmjs.com/package/json-server"&gt;https://www.npmjs.com/package/json-server&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is Exception Filter and Explain Custom Exception Filter in ASP.NET MVC?</title>
      <author>Tarun Gurang</author>
      <pubDate>Wed, 13 Oct 2021 07:55:42 +0000</pubDate>
      <link>https://dev.to/tarungurang/what-is-exception-filter-and-explain-custom-exception-filter-in-aspnet-mvc-1l5b</link>
      <guid>https://dev.to/tarungurang/what-is-exception-filter-and-explain-custom-exception-filter-in-aspnet-mvc-1l5b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-an-exception-filter"&gt;
  &lt;/a&gt;
  What is an Exception Filter?
&lt;/h2&gt;

&lt;p&gt;Exception Filter provides an ability to handle the exception for all the method, controller classes in one place. Exception filters execute when some of the exceptions are thrown from an action. The exception can be anything. This is by creating a class that inherits from IExceptionFilter and FileAttribute interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-exception-filter"&gt;
  &lt;/a&gt;
  Custom Exception Filter
&lt;/h3&gt;

&lt;p&gt;Exception Filter provides a built-in HandleError attribute to handle exception filter with the built-in attribute we can’t do the following things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cannot log the Exception using the HandleError attribute&lt;/li&gt;
&lt;li&gt;It is not possible to handle exception occurs outside the controllers.&lt;/li&gt;
&lt;li&gt;Exception handling is not possible, depending on the scenario. For Example, one error page when the request comes through AJAX and a different one is a normal request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look at how to work around these problems by creating a custom exception filter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-custom-exception-filter"&gt;
  &lt;/a&gt;
  Creating Custom Exception Filter
&lt;/h4&gt;

&lt;p&gt;Here I am creating an Employee class for the model inside the model folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Employee. class&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
namespace LIBData
{
   public class Employee  
    {  
        public int Id { 
get; 
set;
 }  

        [Required(ErrorMessage = "Name Required")]  
        public string Name { 
get; 
set;
 }  
        [Required(ErrorMessage = " Designation Required ")]  
        public string Designation{ 
get; 
set;
 }  
        [Required(ErrorMessage = "Salary Required ")]  
        public int Salary { 
get; 
set;
 }  
    }  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add controller class inside the controller folder add.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmployeeController&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;  
using System.Collections.Generic;  
using System.Linq;  
using System.Web;  
using System.Web.Mvc;  
using LIBUser.CustomFilter;  
using LIBUser.Models;  

namespace LIBUser.Controllers
{
    public class EmployeeController: Controller
    {
        public EmployeeContext  db =  new EmployeeContext();
        public ActionResult Index()
        {
            var employee = db .Employees.ToList();
            return View(employee);
        }
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Employee employee = db.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }
        public ActionResult Create()
        {
            return View();
        }
        [HttpPost]
        [CustomExceptionHandlerFilter]
        public ActionResult Create(Employee employee)
        {
            if (ModelState.IsValid)
            {
                if (employee.Designation== "JuniorForntEndDeveloper" &amp;amp;&amp;amp; (employee.Salary &amp;lt; 1000 || employee.Salary &amp;gt; 4000))
                {
                    throw new Exception("Salary is not matching with JuniorForntEndDeveloper.");
                }
                else if (employee.Designation== "WebDeveloper" &amp;amp;&amp;amp; (employee.Salary &amp;lt; 30000 || employee.Salary &amp;gt; 40000))
                {
                    throw new Exception("Salary is not matching with WebDeveloper.");
                }
                else if (employee.Designation== "Marketing Manager")
                {
                    throw new Exception("Salary is not matching with Marketing Manager");
                }
                else
                {
                    db .Employees.Add(employee);
                    db .SaveChanges();
                }
            }
            return RedirectToAction("Index");
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/generate-thumbnail-using-asp-net-mvc"&gt;Generate Thumbnail Using ASP.NET MVC&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following line of code inside the Employee controller.&lt;/p&gt;

&lt;p&gt;In this example, I will just demonstrate how to use a Custom Exception filter you can change your controller as per the requirements.&lt;/p&gt;

&lt;p&gt;Now, we need to add the view for Create action method and Index action method. Right-click on create method and add view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create View&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
@model LIBData.Employee
@{
    ViewBag.Title = &amp;amp;quot;Create&amp;amp;quot;;
    Layout = &amp;amp;quot;~/Views/Shared/LibStudent.cshtml&amp;amp;quot;;
}&amp;lt;div class="container"&amp;gt;&amp;lt;div class="card"&amp;gt;&amp;lt;div class="card-header bg-dark"&amp;gt;
            &amp;lt;strong class="card-title" style="color : white;"&amp;gt; Add Employee Details&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class="card-body"&amp;gt;
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()&amp;lt;div class="form-horizontal"&amp;gt;&amp;lt;h4&amp;gt;Employee&amp;lt;/h4&amp;gt;
&amp;lt;hr /&amp;gt;
                    @Html.ValidationSummary(true, &amp;amp;quot;&amp;amp;quot;, new { @class = &amp;amp;quot;text-danger&amp;amp;quot; })&amp;lt;div class="form-group"&amp;gt;
                        @Html.LabelFor(model =&amp;gt; model.Name, htmlAttributes: new { @class = &amp;amp;quot;control-label col-md-2&amp;amp;quot; })
                        @Html.EditorFor(model =&amp;gt; model.Name, new { htmlAttributes = new { @class = &amp;amp;quot;form-control&amp;amp;quot; } })
                        @Html.ValidationMessageFor(model =&amp;gt; model.Name, &amp;amp;quot;&amp;amp;quot;, new { @class = &amp;amp;quot;text-danger&amp;amp;quot; })&amp;lt;/div&amp;gt;
&amp;lt;div class="form-group"&amp;gt;
                        @Html.LabelFor(model =&amp;gt; model.Designation, htmlAttributes: new { @class = &amp;amp;quot;control-label col-md-2&amp;amp;quot; })
                        @Html.EditorFor(model =&amp;gt; model.Designation, new { htmlAttributes = new { @class = &amp;amp;quot;form-control&amp;amp;quot; } })
                        @Html.ValidationMessageFor(model =&amp;gt; model.Designation, &amp;amp;quot;&amp;amp;quot;, new { @class = &amp;amp;quot;text-danger&amp;amp;quot; })&amp;lt;/div&amp;gt;
&amp;lt;div class="form-group"&amp;gt;
                        @Html.LabelFor(model =&amp;gt; model.Salary, htmlAttributes: new { @class = &amp;amp;quot;control-label col-md-2&amp;amp;quot; })
                        @Html.EditorFor(model =&amp;gt; model.Salary, new { htmlAttributes = new { @class = &amp;amp;quot;form-control&amp;amp;quot; } })
                        @Html.ValidationMessageFor(model =&amp;gt; model.Salary, &amp;amp;quot;&amp;amp;quot;, new { @class = &amp;amp;quot;text-danger&amp;amp;quot; })&amp;lt;/div&amp;gt;
&amp;lt;div class="form-group"&amp;gt;&amp;lt;div class="col-md-offset-2 col-md-10"&amp;gt;
                            &amp;lt;input class="btn btn-default" type="submit" value="Create" /&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
            }&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    @Html.ActionLink(&amp;amp;quot;Back to List&amp;amp;quot;, &amp;amp;quot;Index&amp;amp;quot;)&amp;lt;/div&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the CustomExceptionHandlerFilter class for creating a custom exception handler.&lt;/p&gt;

&lt;p&gt;Implements FilterAttribute and IExceptionFilter and overrides the OnException method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
namespace LIBUser.Controllers
{
    public class CustomExceptionHandlerFilter: FilterAttribute, IExceptionFilter
    {
        public void OnException(ExceptionContext filterContext)
        {
            ExceptionLogger logger = new ExceptionLogger()
            {
                ExceptionMessage = filterContext.Exception.Message,
                ExceptionStackTrack = filterContext.Exception.StackTrace,
                ControllerName = filterContext.RouteData.Values["controller"].ToString(),
                ActionName = filterContext.RouteData.Values["action"].ToString(),
                ExceptionLogTime = DateTime.Now
            };
            EmployeeContext dbContext = new EmployeeContext();
            dbContext.ExceptionLoggers.Add(logger);
            dbContext.SaveChanges();
            filterContext.ExceptionHandled = true;
            filterContext.Result = new ViewResult()
            {
                ViewName = "Error"
            };
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open App_Start folder inside the App_start folder contains FilterConfig class. Inside this class, we add our new CustomExceptionHandlerFilter in the following way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;  
using System.Collections.Generic;  
using System.Linq;  
using System.Web;  
using System.Web.Mvc;  
using Microsoft.ApplicationInsights.DataContracts;  
using MvcCustomExceptionFilter.CustomFilter;  

namespace LIBUser.App_Start
{
    public class FilterConfig
    {
        public static void RegisterGlobalFilter(GlobalFilterCollection filters)
        {
            filters.Add(new CustomExceptionHandlerFilter());
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you create a project, if you have selected the Empty MVC Template then the FilterConfig class will not be available to you, but if you have selected any ready-mate MVC template then the FilterConfig class will be available within your application. If this file is not available, then just simply create a class file with the name FilterConfig inside the App_Start folder. This FilterConfig class is the place where we used to add the Filters globally for our application. It file will be instantiated when our Web application starts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking for Trusted &lt;a href="https://www.ifourtechnolab.com/dot-net-development-company"&gt;ASP.NET Development Company&lt;/a&gt;? Your Search ends here.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now Register our CustomExceptionHandlerFilter in the Global. asax&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Global.aspx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;  
using System.Collections.Generic;  
using System.Linq;  
using System.Web;  
using System.Web.Mvc;  
using System.Web.Routing;  
using MvcCustomExceptionFilter.App_Start;  

namespace MvcCustomExceptionFilter
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            FilterConfig.RegisterGlobalFilter(GlobalFilters.Filters);
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the shared folder of view, it contains the Error. cshtml page modifies the Error. cshtml as per your requirement. If the shared folder does not contain an Error. cshtml you can add a view inside the shared folder and place this code inside the error page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
@{
    ViewBag.Title = &amp;amp;quot;Error&amp;amp;quot;;
}&amp;lt;h1&amp;gt;Error Occured&amp;lt;/h1&amp;gt;
&amp;lt;h1 class="alert alert-danger"&amp;gt;An unknown error occurred while processing your request.&amp;lt;/h1&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the web. config file and add the custom error mode inside the system. web&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;system.web&amp;gt;
&amp;lt;customerrors mode="On"&amp;gt;&amp;lt;/customerrors&amp;gt;
&amp;lt;/system.web&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the application and add the details inside the create view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jkvWaoFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzpc138pcjj7qnfoypb4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jkvWaoFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzpc138pcjj7qnfoypb4.jpg" alt="Add employee details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we can add the salary that is not range to a specific position it will give an error and we will redirect to the Error page instead of yellow screen or exception. Here I insert salary for JuniorForntEndDeveloper 10000 it will get me an error because in code set salary for JuniorForntEndDeveloper between 1000 to 4000.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwq8mEZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4y1zkdann1yrtxj67m4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwq8mEZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4y1zkdann1yrtxj67m4.jpg" alt="error and redirect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After click on create button, it gives an Error and redirects to the error page.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h5&gt;

&lt;p&gt;Exception filter provides the built-in HandleError attribute but we cannot handle the log error and exceptions that occurs inside the controller class, however, with the help of the custom exception we can handle the errors that occur inside the controller class.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Grow Your Business With These Law Firm Marketing Strategies </title>
      <author>Jamesbrown93</author>
      <pubDate>Wed, 13 Oct 2021 07:54:12 +0000</pubDate>
      <link>https://dev.to/jamesbrown93/grow-your-business-with-these-law-firm-marketing-strategies-n6b</link>
      <guid>https://dev.to/jamesbrown93/grow-your-business-with-these-law-firm-marketing-strategies-n6b</guid>
      <description>&lt;p&gt;Do you own a law firm? Or plan to start one? Well, whatever the scenario is you obviously would want to grow it in size and thrive in the competitive market. And to grow you’ll need more clients that would add to your business and profitability. Having a concrete &lt;a href="https://www.janbaskdigitaldesign.com/"&gt;law firm marketing&lt;/a&gt; strategy ensures your firm expands by the use of various law marketing strategies. Moreover, it is important that we update our strategies to keep moving forward in the competitive market. &lt;/p&gt;

&lt;p&gt;In this post, we will be talking about how you can grow your firm to the next level by creating a set of firm marketing strategies and executing them based on your goals.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;9 Law firm Marketing Strategies&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Your law firm’s marketing strategy should be curated according to your firm’s goal and core values. There are certain strategies that will make your firm stand out and add value to your law firm if implied strategically. Some of them are: &lt;/p&gt;

&lt;p&gt;&lt;b&gt;1. Build a Brand&lt;/b&gt;&lt;br&gt;
Your brand is what you want your law firm to be seen as  to the public. It is more than just updating your logo. As a law firm your brand might seem the same as other brands do out there, despite your core values and product might differ.  You know the unique value of your law firm, so you would know how to showcase your law firm differently. You also would want to build a positive brand image that forms trust for your customers. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;2. Design an attractive law firm design&lt;/b&gt; &lt;br&gt;
All other law firm marketing strategies will not be as effective unless you invest into building an amazing website and strengthen your brand on an online platform. Make sure of the following when launching your website: &lt;br&gt;
=&amp;gt; Is it mobile, laptop and tablet friendly&lt;br&gt;
=&amp;gt; Easy to navigate &lt;br&gt;
=&amp;gt; News/blog section&lt;br&gt;
=&amp;gt; Different page for each of your lawyer &lt;br&gt;
=&amp;gt; Built - in - security &lt;br&gt;
=&amp;gt; Professional logo&lt;br&gt;
=&amp;gt; Engaging and informative content &lt;/p&gt;

&lt;p&gt;&lt;b&gt;3. Work on your SEO to improve your search engine ranking&lt;/b&gt;&lt;br&gt;
You need to be seen on the first page of the search engine to get maximum visitors and traffic to your website. You can run SEO or Google Adwords campaigns. Some of the important practices in SEO research are having professionally written content, keyword research, optimal title &amp;amp; description, optimized images, and logical website architecture. Mobile-friendly compatibility of your website also improves your SEO ranking. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;4. Get on Social Media&lt;/b&gt;&lt;br&gt;
Getting your business on social media marketing can be an interesting law firm marketing strategy to grow your business. You don't have to create an account on all social media platforms but maybe only where you have your strongest customer base. It is usually Facebook, LinkedIn, and Google to get your customers engaging in your business. With social media done right it can benefit your business in :&lt;br&gt;
=&amp;gt; Reaching a large audience for little financial investment &lt;br&gt;
=&amp;gt; Building community and brand authority&lt;br&gt;
=&amp;gt; Providing clients alternative ways to reach you&lt;/p&gt;

&lt;p&gt;&lt;b&gt;5. Get into legal directories&lt;/b&gt;&lt;br&gt;
Being listed on legal directories can be very beneficial for your law firm marketing. It is a reputated source of information for potential customers. It also contributes to your SEO as it will help with link building and obtaining traffic. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;6. Try Videos or Webinars&lt;/b&gt;&lt;br&gt;
Every Business longs for attention. They try every possible way to get attention from potential clients. Videos are possibly the best way to grab people’s attention and it is the fastest way to spread your content to a wide audience. They help you build expertise, stand out and generate new clients. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;7. Email Marketing&lt;/b&gt; &lt;br&gt;
Email marketing offers a lot of boost to your law firm marketing for minimal effort. Email marketing is also easy to measure in terms of the recipient’s behavior on the email. It also supports the A/B testing, where you send the same campaign to different sets of recipients in different styles/formats to see the variations in results in two email promotions. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;8. Search Advertising&lt;/b&gt; &lt;br&gt;
While SEO is an organic way to improve your ranking on google search engines. You can also go for a paid online advertising campaign for the same to attract potential clients to your website. There are two types of paid search engine advertising:&lt;br&gt;
=&amp;gt; Pay Per Click (PPC): In this campaign each time a visitor clicks on your ad, advertisers pay a certain amount to the search engine. &lt;br&gt;
=&amp;gt; Google Advertising: Here advertisers bid to be displayed on the search engine as well as non-search websites, mobile apps, blog pages, etc. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;9. Content Marketing&lt;/b&gt; &lt;br&gt;
Content marketing is a marketing tactic where that helps to build your brand expertise, offer value to potential customers and drive traffic to your website. This could include content like blog posts, videos, infographics, or podcasts. The content should depend on your target client’s persona so that readers connect with it and develop an interest in your website. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;KPIs to Monitor your Law firm's Marketing Strategies&lt;/b&gt;&lt;br&gt;
Monitoring your strategies is a crucial part and can’t be overlooked. Without tracking you won’t know what was actually working and what was not. If it's working you might want to work more into it and if it's not, you are simply wasting your time and efforts or you might want to improve. So here’s how you can track those strategies:&lt;br&gt;
=&amp;gt; Ask for clients’ feedback: Ask your firm’s assistant to follow up with clients with a set of questionnaires about how they came across your company. &lt;br&gt;
=&amp;gt; Analyze website analytics: Google analytics can help you gather data like from which website did the visitor come before visiting yours, how long people are spending on your website (bounce rate), and traffic. &lt;br&gt;
=&amp;gt; Source data from your client’s intake software: There is software that lets you identify referral sources for new customers and enables you to make custom reports on lead sources. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion:&lt;/b&gt; &lt;br&gt;
To establish your &lt;a href="https://www.janbaskdigitaldesign.com/industry/law-firm-website-design"&gt;law firm design&lt;/a&gt; in the highly competitive market you need to put yourself out there and implement these law firms' marketing strategies. There are several ways to market your firms but the most success will come when you start with setting your SMART goals. However, agencies like Janbask are very well know how to put all these together and integrate them effectively. &lt;/p&gt;

</description>
      <category>lawfirmdesign</category>
      <category>webdesign</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Upload a File (Image/Pdf/Zip/etc) to Strapi with React </title>
      <author>Melvin Liu</author>
      <pubDate>Wed, 13 Oct 2021 07:52:00 +0000</pubDate>
      <link>https://dev.to/melvnl/how-to-upload-a-file-imagepdfzipetc-to-strapi-with-react-35jd</link>
      <guid>https://dev.to/melvnl/how-to-upload-a-file-imagepdfzipetc-to-strapi-with-react-35jd</guid>
      <description>&lt;p&gt;When I first started using Strapi as a CMS for one of my client, to give them a little freedom to manage their website content, the hardest part of the development was when I need to build a feature where there is a contact form which people can add and send an attachment (pdf/zip/image/etc.)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfzQd20y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i1imon4war4yf1ghqpb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfzQd20y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i1imon4war4yf1ghqpb.jpg" alt="Contact Form Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I'm not mistaken, there is no official documentation regarding this on Strapi website, but after a few research, I discovered the step to do it.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#1-enable-user-permission-to-upload"&gt;
  &lt;/a&gt;
  1. Enable user permission to upload
&lt;/h3&gt;

&lt;p&gt;Strapi has an upload plugin, that can enable user to upload file to strapi, make sure you check the upload checklist like the image below)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qLdKvjo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj3d4u4h92oz2gmho2tz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLdKvjo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj3d4u4h92oz2gmho2tz.png" alt="Strapi Upload Plugin Setting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the section in your-url.com/admin/settings/users-permissions/roles&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-send-file-to-strapi"&gt;
  &lt;/a&gt;
  2. Send file to Strapi
&lt;/h3&gt;

&lt;p&gt;First, you need to send your file first to Strapi before submit the entire form data. Later, you can link the file and your form data using the id of the file that has been uploaded. For the code example I'm using axios to fetch the request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedFile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-strapi-url/upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;

      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//handle error&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-send-the-form-data-to-strapi"&gt;
  &lt;/a&gt;
  3. Send the form data to Strapi
&lt;/h3&gt;

&lt;p&gt;You can use React useState or other method to store your form value, then create a FormData based on those value. Then the whole code will probably look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fullName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;companyName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phoneNumber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;team&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-strapi-url/upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;

        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-strapi-url/contact-submissions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
                    &lt;span class="na"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;companyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;team&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fileId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//handle error&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//handle error&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have uploaded the file before the whole data, hence on the second request we only need to send the Strapi fileId that is attached with the file that we have uploaded previously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: the endpoint "contact-submissions" is my own custom endpoint, where my client can see the data that their costumer has sent through the contact form.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope this short tutorial / article is helpful. Have a good day!&lt;/p&gt;

</description>
      <category>strapi</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Tips to become a great programmer Of All Time</title>
      <author>Coder</author>
      <pubDate>Wed, 13 Oct 2021 07:50:25 +0000</pubDate>
      <link>https://dev.to/huua/tips-to-become-a-great-programmer-5h79</link>
      <guid>https://dev.to/huua/tips-to-become-a-great-programmer-5h79</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/tips-to-become-a-great-programmer/&amp;amp;ved=2ahUKEwins_6s88bzAhXF73MBHfIkDo4QFnoECCsQAQ&amp;amp;usg=AOvVaw2TZoEJ1qtcJHCjk5WDoNUU"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>C++ Concepts and the Core Guidelines</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 13 Oct 2021 07:36:53 +0000</pubDate>
      <link>https://dev.to/sandordargo/c-concepts-and-the-core-guidelines-20mk</link>
      <guid>https://dev.to/sandordargo/c-concepts-and-the-core-guidelines-20mk</guid>
      <description>&lt;p&gt;Let's get back to C++ concepts and have a look at the rules and best practices that the &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-templates"&gt;Core Guidelines&lt;/a&gt; propose.&lt;/p&gt;

&lt;p&gt;Having read them through, I found that they are incomplete (no surprise, concepts are new), yet outdated.&lt;/p&gt;

&lt;p&gt;How is that possible?&lt;/p&gt;

&lt;p&gt;They were written for the Concepts TS, not for the standardized version. So as you'll see, here and there it follows a syntax that is not compilable.&lt;/p&gt;

&lt;p&gt;I'm sure it will take some years to find all the best practices and fill the guidelines. After all, they should not change frequently. &lt;/p&gt;

&lt;p&gt;Let's see what they offer today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-concepts"&gt;
  &lt;/a&gt;
  How to use concepts
&lt;/h2&gt;

&lt;p&gt;Let's start with some rules on how to use concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t10-specify-concepts-for-all-template-arguments"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t10-specify-concepts-for-all-template-arguments"&gt;T.10: Specify concepts for all template arguments&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This rule recommends something we already discussed. You shouldn't use bare &lt;code&gt;typename T&lt;/code&gt;s in the template parameter lists. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;T&lt;/code&gt; is obviously a bad name as it doesn't bring any additional information apart from that it's a template type and you should strive for better names, but the rule mainly suggests not to use these template types without constraining them.&lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we should use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or even better:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#whenever-possible-use-standard-concepts"&gt;
  &lt;/a&gt;
  [Whenever possible use standard concepts
&lt;/h3&gt;

&lt;p&gt;](&lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t11-whenever-possible-use-standard-concepts"&gt;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t11-whenever-possible-use-standard-concepts&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This rule reminds me of something we discussed in &lt;a href="https://www.sandordargo.com/blog/2020/05/13/loops-vs-algorithms"&gt;Loops are bad, algorithms are good! Aren't they?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whenever the standard library offers you what you need, take it and use it. Reinventing the wheel is dangerous and useless.&lt;/p&gt;

&lt;p&gt;Whatever you find in the standard library is better tested, often more expressive and in the vast majority of cases, it provides better performance compared to what you'd write.&lt;/p&gt;

&lt;p&gt;It's the same idea for concepts as for algorithms. Why would it be any different?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t12-prefer-concept-names-over-auto-for-local-variables"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t12-prefer-concept-names-over-auto-for-local-variables"&gt;T.12: Prefer concept names over auto for local variables&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is very similar to T10 which advocates for no bare template parameters, no template parameters without a constraint on them.&lt;/p&gt;

&lt;p&gt;In this case, it's not about the &lt;code&gt;typename&lt;/code&gt; keyword, but about &lt;code&gt;auto&lt;/code&gt;. If we consider &lt;code&gt;typename&lt;/code&gt; an unconstrained template parameter, we can also consider &lt;code&gt;auto&lt;/code&gt; as an unconstrained type. In another word, &lt;code&gt;auto&lt;/code&gt; is the weakest concept.&lt;/p&gt;

&lt;p&gt;Instead of using &lt;code&gt;auto n = calculate();&lt;/code&gt; we use write &lt;code&gt;Number auto n = calculate();&lt;/code&gt;. In this case, it's worth noting that the rule is outdated as it's still using Concepts TS in which one could use a concept not with but instead of &lt;code&gt;auto&lt;/code&gt; which is a bit misleading as it's difficult to know whether what you see is a type or a concept.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t13-prefer-the-shorthand-notation-for-simple-singletype-argument-concepts"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t13-prefer-the-shorthand-notation-for-simple-single-type-argument-concepts"&gt;T.13: Prefer the shorthand notation for simple, single-type argument concepts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As we saw earlier both &lt;a href="https://www.sandordargo.com/blog/2021/02/17/cpp-concepts-4-ways-to-use-them"&gt;for functions&lt;/a&gt; and &lt;a href="https://www.sandordargo.com/blog/2021/02/24/cpp-concepts-with-classes"&gt;classes&lt;/a&gt;, there are several different ways to use concepts, to introduce constraints on your template parameters.&lt;/p&gt;

&lt;p&gt;One way was to use the requires clause:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's quite readable, but it's more verbose than necessary.&lt;/p&gt;

&lt;p&gt;This rule advocates for using the shorthand notation instead, to use what we call today the constrained template parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, when you have the possibility go even further and use the abbreviated function template form of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-define-concepts"&gt;
  &lt;/a&gt;
  How to define concepts
&lt;/h2&gt;

&lt;p&gt;Let's continue with some rules on how to define concepts. With time, this can be the most important section of the core guidelines on concepts. Writing concepts is easy, writing good concepts that are meaningful and carry some semantic meaning is difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t20-avoid-concepts-without-meaningful-semantics"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t20-avoid-concepts-without-meaningful-semantics"&gt;T.20: Avoid “concepts” without meaningful semantics&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A good concept should do more than enforcing the existence of certain functions, it should do more than requiring a certain API.&lt;/p&gt;

&lt;p&gt;A good concept will also communicate semantics.&lt;/p&gt;

&lt;p&gt;For example, it's more than enforcing having the &lt;code&gt;operator+&lt;/code&gt; defined, it's communicating that the type modelling a concept is a &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t21-require-a-complete-set-of-operations-for-a-concept"&gt;
  &lt;/a&gt;
  [T.21: Require a complete set of operations for a concept
&lt;/h3&gt;

&lt;p&gt;](&lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t21-require-a-complete-set-of-operations-for-a-concept"&gt;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t21-require-a-complete-set-of-operations-for-a-concept&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This next rule is closely related to the previous one. If you want to have meaningful semantics it's hardly useful to model a number only supporting addition.&lt;/p&gt;

&lt;p&gt;You need to put in a bit more work and model all the necessary operations, all the necessary comparisons. In general, all the functions that make a type modelling a useable concept.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t22-specify-axioms-for-concepts"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t22-specify-axioms-for-concepts"&gt;T.22: Specify axioms for concepts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First, we have to understand what an axiom is.&lt;/p&gt;

&lt;p&gt;An axiom or assumption is a statement that is taken to be true, it serves as a premise or starting point for further reasoning and arguments. We take an axiom valid without any evidence.&lt;/p&gt;

&lt;p&gt;If you want to express &lt;a href="https://akrzemi1.wordpress.com/2012/01/11/concept-axioms-what-for/"&gt;axioms&lt;/a&gt; in code, they would be Boolean expressions. C++20 doesn't support axioms, but it might change in the future.&lt;/p&gt;

&lt;p&gt;For the time being, you can express axioms as comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// The operators +, -, *, and / for a number are assumed to follow the usual mathematical rules&lt;/span&gt;
    &lt;span class="c1"&gt;// axiom(T a, T b) { a + b == b + a; a - a == 0; a * (b + c) == a * b + a * c; /*...*/ }&lt;/span&gt;
    &lt;span class="n"&gt;concept&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;convertible_to&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// the result of a + b is convertible to T&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;convertible_to&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;convertible_to&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;convertible_to&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#t23-differentiate-a-refined-concept-from-its-more-general-case-by-adding-new-use-patterns"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t23-differentiate-a-refined-concept-from-its-more-general-case-by-adding-new-use-patterns"&gt;T.23: Differentiate a refined concept from its more general case by adding new use patterns&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you have two concepts where one is the refined version of the other, use the general one in the refined pattern and add some additional requirements.&lt;/p&gt;

&lt;p&gt;Let's say we have this concept:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;I&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;concept&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Input_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to define &lt;code&gt;Fwd_iter&lt;/code&gt; correctly, do not write it from scratch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;I&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;concept&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Fwd_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use, the more generic version and add the extra rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;I&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;concept&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Fwd_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input_iter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helps both the reader to understand that they have to deal with a more refined version and the compiler can also find the good concept at overload resolution time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t24-use-tag-classes-or-traits-to-differentiate-concepts-that-differ-only-in-semantics"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t24-use-tag-classes-or-traits-to-differentiate-concepts-that-differ-only-in-semantics"&gt;T.24: Use tag classes or traits to differentiate concepts that differ only in semantics&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As we discussed earlier a good concept does not only express syntactic requirements, but it's also about semantics.&lt;/p&gt;

&lt;p&gt;What if the syntactical requirements are the same for two concepts, but they have different semantics?&lt;/p&gt;

&lt;p&gt;In order to disambiguate them, we have to add some syntactical differences.&lt;/p&gt;

&lt;p&gt;A way of doing this is to write a tag class or a trait (either a standard or a user-defined one) and make a requirement on it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;I&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="c1"&gt;// iterator providing random access&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;RA_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;I&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="c1"&gt;// iterator providing random access to contiguous data&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Contiguous_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;RA_iter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;is_contiguous&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// using is_contiguous trait&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#t25-avoid-complementary-constraints"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t25-avoid-complementary-constraints"&gt;T.25: Avoid complementary constraints&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It's not a good idea to use complementary constraints meaning that in one function overload you make some requirements and in the other, you require its negation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="c1"&gt;// bad&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of the negated one, just use a general template without negated constraints.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="c1"&gt;// general template&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="c1"&gt;// specialization by concept&lt;/span&gt;
    &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why is it a bad idea to use the negated form? As we saw earlier in &lt;a href="https://www.sandordargo.com/blog/2021/05/05/cpp-concepts-and-logical-operators"&gt;C++ Concepts and logical operators&lt;/a&gt;, negations can be more difficult to handle due to subsumption rules. Besides, it's much less readable to achieve the same effect, not to mention maintainability.&lt;/p&gt;

&lt;p&gt;Just keep it stupid simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t26-prefer-to-define-concepts-in-terms-of-usepatterns-rather-than-simple-syntax"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t26-prefer-to-define-concepts-in-terms-of-use-patterns-rather-than-simple-syntax"&gt;T.26: Prefer to define concepts in terms of use-patterns rather than simple syntax&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When I read this title first, I didn't really understand. But the Core guidelines provide a great example.&lt;/p&gt;

&lt;p&gt;You might have some helper concepts or type traits such as &lt;code&gt;has_equal&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;has_not_equal&amp;lt;T&amp;gt;&lt;/code&gt;. They would let you (re)create &lt;code&gt;EqualityComparable&lt;/code&gt; like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;concept&lt;/span&gt; &lt;span class="n"&gt;EqualityComparable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;has_equal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;has_not_equal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not unreadable, but it's better if you use the requires body to express your constraints by writing how you want to use the types modeling the concept:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;concept&lt;/span&gt; &lt;span class="n"&gt;EqualityComparable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;same_as&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;same_as&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, humans are great at following patterns. Use that as a feature!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-rules"&gt;
  &lt;/a&gt;
  Additional rules
&lt;/h2&gt;

&lt;p&gt;As we mentioned, there is plenty of space left in the guidelines for additional rules on concepts. &lt;/p&gt;

&lt;p&gt;At the moment of writing, I found one among &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#template-interfaces"&gt;"Template Interfaces"&lt;/a&gt;. If you found more, let me know so I can include them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t41-require-only-essential-properties-in-a-templates-concepts"&gt;
  &lt;/a&gt;
  &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t41-require-only-essential-properties-in-a-templates-concepts"&gt;T.41: Require only essential properties in a template’s concepts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You might remember from unit testing, that you shouldn't assert every detail, every internal of a class as it makes your tests brittle. Unit tests should assert just to the right level of detail.&lt;/p&gt;

&lt;p&gt;The idea is similar to concepts. A concept should not require too many details and definitely not things that are unrelated.&lt;/p&gt;

&lt;p&gt;For example, a concept modelling sortable types, should not require I/O operations at all. The ability of a project to print itself has nothing to do with sortability. If that is required, it should be modelled in a different concept, such as &lt;code&gt;Printable&lt;/code&gt; or &lt;code&gt;Streamable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A good API is strict enough, but loose at the same time and it's definitely stable. This rule helps to achieve the desired level of looseness and stability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Today, we discussed the already existing best practices and recommendations on concepts in the &lt;a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-templates"&gt;Core Guidelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are already a decent number of rules, even though they are not up to date with C++20, they are still based on the Concepts TS. Nevertheless, they serve as a good basis for further discussion as our experience of writing concepts grows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to learn more details about C++ concepts, &lt;a href="https://leanpub.com/cppconcepts"&gt;check out my book on Leanpub&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me know about your best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>cpp20</category>
      <category>guidelines</category>
      <category>concepts</category>
    </item>
    <item>
      <title>Redis vs MongoDB, fight!</title>
      <author>Rubén Martín Pozo</author>
      <pubDate>Wed, 13 Oct 2021 07:36:28 +0000</pubDate>
      <link>https://dev.to/playtomic/redis-vs-mongodb-fight-1481</link>
      <guid>https://dev.to/playtomic/redis-vs-mongodb-fight-1481</guid>
      <description>&lt;p&gt;Redis is an in-memory, distributed database that has typically been used as a cache in multiple projects. The advantage over other types of databases is that it doesn't persist data to disk, so all the elements are always in memory. That should speed up reads and writes.   &lt;/p&gt;

&lt;p&gt;To understand what having a Redis cluster could offer us, we've run some experiments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#weather-experiment"&gt;
  &lt;/a&gt;
  Weather experiment
&lt;/h1&gt;

&lt;p&gt;The idea behind this experiment is to test if MongoDB and Redis have a significant performance difference when accessing a cache by key. That means writing and reading to and from the cache by a key without further manipulating the value.    &lt;/p&gt;

&lt;p&gt;The weather service uses MongoDB as a cache to store weather forecasts, not to call the weather provider in every single request. We also added a Redis cache using AWS Elasticache. Let's see how those two compare. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9Iwspgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jenm55sjb7po1q8hh59u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9Iwspgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jenm55sjb7po1q8hh59u.png" alt="MongoDB and Redis read time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This image shows MongoDB and Redis read time when retrieving forecasts from the cache. MongoDB shows 12ms for p99, 5ms for p90, and 2ms for p50. Redis shows 5ms for p99, 1ms for p90, and around 600µs for p50.&lt;/p&gt;

&lt;p&gt;Although Redis performs almost 2x as MongoDB, would that difference justify the system's complexity by having another database? Let's see if we can answer these questions with a new experiment.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ranking-experiment"&gt;
  &lt;/a&gt;
  Ranking experiment
&lt;/h1&gt;

&lt;p&gt;In this experiment, we will use Redis to cache the rankings using one of Redis' data structures. In this case, we're going to use a sorted set. This kind of structure allows us to keep a set of elements ordered by a score. In our case, the score will be either the level or the points of a player.  &lt;/p&gt;

&lt;p&gt;What we did was to add pages of the ranking when they are read from Mongo to Redis, and then every time a ranking request is received, we calculate the ranking using both Mongo and Redis. Since we don't have all players in Redis, the page calculated using Mongo is always returned to the client. The same calculation is done using Redis to compare the difference in time.     &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uUY9K1bP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh5845fq4gmxtsigt91z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUY9K1bP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh5845fq4gmxtsigt91z.png" alt="MongoDB and Redis calculating ranking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This image shows MongoDB and Redis read time when calculating the ranking. MongoDB shows 350ms for p99, 40ms for p90, 15ms for p50, while Redis shows 9ms for p99, 2.5ms for p90, and 1.5ms for p50. That means almost 40x for p99, 16x for p90, and 10x for p50 for Redis compared to MongoDB.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;We've seen with these experiments that MongoDB can work pretty decently as a cache when the element is acceded by a key, and MongoDB has an index on that key with a particular TTL. However, Redis' time is always better.&lt;/p&gt;

&lt;p&gt;For those use cases where Redis has its own data structure, Redis has no rival, and we strongly recommend its use. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;p&gt;Should we go then and use Redis in production? That's still to be seen. Using Redis as a cache would imply that we have to store the data somewhere else to ensure we can recreate the cache if something goes wrong. We would also need to keep in sync with both the cache and the underlying storing system. &lt;/p&gt;

&lt;p&gt;What's clear is that Redis is a useful tool that we could end up needing. We're not sure if we need to start using it just right now, though.&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@wacalke?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mateusz Wacławek&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fight?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>redis</category>
      <category>database</category>
      <category>performance</category>
    </item>
  </channel>
</rss>
