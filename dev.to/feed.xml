<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>24 time management tips for students</title>
      <author>CodeXtreame</author>
      <pubDate>Tue, 06 Jul 2021 15:46:43 +0000</pubDate>
      <link>https://dev.to/codextreame/24-time-management-tips-for-students-1hmi</link>
      <guid>https://dev.to/codextreame/24-time-management-tips-for-students-1hmi</guid>
      <description>&lt;ol&gt;
&lt;li&gt;The goal of realization&lt;/li&gt;
&lt;li&gt;Make a daily plan&lt;/li&gt;
&lt;li&gt;Keep your agenda.&lt;/li&gt;
&lt;li&gt;Your curriculum and priorities are ready.&lt;/li&gt;
&lt;li&gt;Set your time limit.&lt;/li&gt;
&lt;li&gt;Demanding work in priority.&lt;/li&gt;
&lt;li&gt;Learn to outsource.&lt;/li&gt;
&lt;li&gt;Configure your setting place.&lt;/li&gt;
&lt;li&gt;Ignore buffer time tasks and other tasks.&lt;/li&gt;
&lt;li&gt;Go offline on social media&lt;/li&gt;
&lt;li&gt;Do not multitask.&lt;/li&gt;
&lt;li&gt;Break Management.&lt;/li&gt;
&lt;li&gt;Don't wait for inspiration to do your work now.&lt;/li&gt;
&lt;li&gt;Follow 80-20 rules&lt;/li&gt;
&lt;li&gt;Use the online calendar.&lt;/li&gt;
&lt;li&gt;Create a TODO list.&lt;/li&gt;
&lt;li&gt;Don't hang on to small things.&lt;/li&gt;
&lt;li&gt;Use your waiting time.&lt;/li&gt;
&lt;li&gt;The rest day is Saturday or Sunday.&lt;/li&gt;
&lt;li&gt;Stop pretending to be perfect.&lt;/li&gt;
&lt;li&gt;Say No&lt;/li&gt;
&lt;li&gt;Be inspired.&lt;/li&gt;
&lt;li&gt;Do the same thing together.&lt;/li&gt;
&lt;li&gt;Sleep Well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All Topic Explanation : &lt;a href="https://rb.gy/rugced"&gt;https://rb.gy/rugced&lt;/a&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>management</category>
      <category>time</category>
      <category>students</category>
    </item>
    <item>
      <title>What is AWS InfiniDash?</title>
      <author>Rain Leander</author>
      <pubDate>Tue, 06 Jul 2021 15:39:42 +0000</pubDate>
      <link>https://dev.to/rainleander/what-is-aws-infinidash-2mjn</link>
      <guid>https://dev.to/rainleander/what-is-aws-infinidash-2mjn</guid>
      <description>&lt;p&gt;TL;DR: AWS InfiniDash is a fake project.&lt;/p&gt;

&lt;p&gt;It started innocently enough, with tweet:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I am convinced that a small and dedicated group of twitter devs could tweet hot takes about a completely made up AWS product, idk AWS Infinidash or something, and it would appear as a requirement on job specs within a week&lt;/p&gt;— Joe Nash (@jna_sh) &lt;a href="https://twitter.com/jna_sh/status/1410178986978775040?ref_src=twsrc%5Etfw"&gt;June 30, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;And it exploded from there.&lt;/p&gt;

&lt;p&gt;Ellen Korbes made an explanatory spoof video:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;hope this helps someone re: infinidash &lt;a href="https://twitter.com/hashtag/i8h?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#i8h&lt;/a&gt; &lt;a href="https://t.co/fmzLt6WH5b"&gt;pic.twitter.com/fmzLt6WH5b&lt;/a&gt;&lt;/p&gt;— @ellenkorbes (@ellenkorbes) &lt;a href="https://twitter.com/ellenkorbes/status/1410796865126346755?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Sy Brand followed up with their own explanation using a bubble machine and their cat:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;AWS Infinidash explained with a bubble machine I found in a cupboard and my cat &lt;a href="https://t.co/h9TToTsDxk"&gt;pic.twitter.com/h9TToTsDxk&lt;/a&gt;&lt;/p&gt;— Sy Brand (&lt;a class="mentioned-user" href="https://dev.to/tartanllama"&gt;@tartanllama&lt;/a&gt;
) &lt;a href="https://twitter.com/TartanLlama/status/1410959645238308866?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;The most AMAZING song was composed and performed:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;An ode to Infinidash - the imaginary AWS service! &lt;a href="https://t.co/3dCntHtUyG"&gt;pic.twitter.com/3dCntHtUyG&lt;/a&gt;&lt;/p&gt;— Forrest Brazeal (&lt;a class="mentioned-user" href="https://dev.to/forrestbrazeal"&gt;@forrestbrazeal&lt;/a&gt;
) &lt;a href="https://twitter.com/forrestbrazeal/status/1410647222853771266?ref_src=twsrc%5Etfw"&gt;July 1, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Massive application developer, Signal, followed up with their own tweet:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Here at Signal we have always placed an emphasis on developer productivity, so Infinidash lifecycle management has been at the core of everything we do from the jump. We hire for it accordingly: &lt;a href="https://t.co/op9ycS9mKM"&gt;&lt;/a&gt;&lt;a href="https://t.co/op9ycS9mKM"&gt;https://t.co/op9ycS9mKM&lt;/a&gt;&lt;/p&gt;— Signal (@signalapp) &lt;a href="https://twitter.com/signalapp/status/1411082628514697217?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;And, yes, a stream with a live demo arrived:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Y'all aren't ready for this AWS &lt;a href="https://twitter.com/hashtag/Infinidash?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Infinidash&lt;/a&gt; live stream&lt;br&gt;&lt;br&gt;Make sure you like and subscribe!🔔&lt;a href="https://t.co/Oj3YGmABEK"&gt;&lt;/a&gt;&lt;a href="https://t.co/Oj3YGmABEK"&gt;https://t.co/Oj3YGmABEK&lt;/a&gt;&lt;/p&gt;— Justin Garrison (&lt;a class="mentioned-user" href="https://dev.to/rothgar"&gt;@rothgar&lt;/a&gt;
) &lt;a href="https://twitter.com/rothgar/status/1411007248965402626?ref_src=twsrc%5Etfw"&gt;July 2, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Now that you understand the joke, too, please don't bash on recruiters, AWS, or anyone who isn't in on the joke.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>infinidash</category>
    </item>
    <item>
      <title>CSS3 Clip-Path Property.</title>
      <author>Swastik Yadav</author>
      <pubDate>Tue, 06 Jul 2021 15:18:54 +0000</pubDate>
      <link>https://dev.to/swastikyadav/css3-clip-path-property-1dne</link>
      <guid>https://dev.to/swastikyadav/css3-clip-path-property-1dne</guid>
      <description>&lt;p&gt;I recently learned about the clip-path property in CSS3.&lt;/p&gt;

&lt;p&gt;The clip-path creates a clipping region that sets what part of an element should be shown.&lt;/p&gt;

&lt;p&gt;This can help in creating really cool slanted Hero sections. The following CSS code snippet will create a slanted hero background section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="nt"&gt;vh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwySrlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFA-ONWuU-jow/article-inline_image-shrink_1000_1488/0/1618950115948%3Fe%3D1631145600%26v%3Dbeta%26t%3D0uSO8ScJiarrf6FUIxo6bRSEEcznXihYSbrK6iZv6v8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwySrlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFA-ONWuU-jow/article-inline_image-shrink_1000_1488/0/1618950115948%3Fe%3D1631145600%26v%3Dbeta%26t%3D0uSO8ScJiarrf6FUIxo6bRSEEcznXihYSbrK6iZv6v8" alt="clip-path-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The polygon shape takes 4 values in a pair of (x y) each for top-left, top-right, bottom-right, and bottom-left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-djQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFpDe6iPFhlAw/article-inline_image-shrink_1500_2232/0/1618950367501%3Fe%3D1631145600%26v%3Dbeta%26t%3DBZciS9FGUspGymZevpHaFwOQLUoRIvng13Y5eSgraYg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-djQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp3.licdn.com/dms/image/C5612AQFpDe6iPFhlAw/article-inline_image-shrink_1500_2232/0/1618950367501%3Fe%3D1631145600%26v%3Dbeta%26t%3DBZciS9FGUspGymZevpHaFwOQLUoRIvng13Y5eSgraYg" alt="clip-path-explanation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But sometimes it can be very tricky to create a clipping path. So, here is a really cool tool for generating a CSS clip-path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go and create your own clip designs, shapes, and backgrounds.&lt;/p&gt;




&lt;p&gt;If you enjoyed reading this little CSS tip then, join my newsletter &lt;a href="https://8020lessons.in/"&gt;here&lt;/a&gt;. There I share more amazing stuff on web-development.&lt;/p&gt;

&lt;p&gt;I also help beginners to Learn CSS in a 7 days workshop without the tutorial hell, with &lt;a href="https://8020lessons.in/"&gt;8020-CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building Scalable Full Stack Apps on Ethereum with Polygon</title>
      <author>Nader Dabit</author>
      <pubDate>Tue, 06 Jul 2021 15:14:09 +0000</pubDate>
      <link>https://dev.to/dabit3/building-scalable-full-stack-apps-on-ethereum-with-polygon-2cfb</link>
      <guid>https://dev.to/dabit3/building-scalable-full-stack-apps-on-ethereum-with-polygon-2cfb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#building-a-digital-marketplace-with-nextjs-tailwind-solidity-hardhat-ethersjs-ipfs-and-polygon"&gt;
  &lt;/a&gt;
  Building a digital marketplace with Next.js, Tailwind, Solidity, Hardhat, Ethers.js, IPFS, and Polygon
&lt;/h3&gt;

&lt;p&gt;In my last end to end Ethereum tutorial, &lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-ethereum-development-3j13"&gt;The Complete Guide to Full Stack Ethereum Development&lt;/a&gt; I introduced how to build a basic app on Ethereum using modern tooling like &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt; and &lt;a href="https://docs.ethers.io/v5/"&gt;Ethers.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing that has become apparent over the past few months is how fast Ethereum scaling solutions like &lt;a href="https://polygon.technology/"&gt;Polygon&lt;/a&gt;, &lt;a href="https://developer.offchainlabs.com/docs/developer_quickstart"&gt;Arbitrum&lt;/a&gt;, and &lt;a href="https://optimism.io/"&gt;Optimism&lt;/a&gt; are gaining momentum and adoption. These technologies enable developers to build the same applications they would directly on Ethereum with the added benefits of lower gas costs and faster transaction speeds among other things.&lt;/p&gt;

&lt;p&gt;Because of the value proposition that these solutions offer combined with the general lack of existing content, I will be building out various example projects and tutorials for full stack applications using these various Ethereum scaling solutions, starting with this one on Polygon.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To view the final source code for this project, visit &lt;a href="https://github.com/dabit3/polygon-ethereum-nextjs-marketplace/settings"&gt;this repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To be successful in this guide, you must have the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Node.js installed on your machine&lt;/li&gt;
&lt;li&gt;Metamask wallet extension installed as a browser extension&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-stack"&gt;
  &lt;/a&gt;
  The stack
&lt;/h3&gt;

&lt;p&gt;In this guide, we will build out a full stack application using:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ethereum Layer&lt;/strong&gt; - &lt;a href="https://polygon.technology/"&gt;Polygon&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Web application framework&lt;/strong&gt; - &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Solidity development environment&lt;/strong&gt; - &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;File Storage&lt;/strong&gt; - &lt;a href="https://ipfs.io/"&gt;IPFS&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Ethereum Web Client Library&lt;/strong&gt; - &lt;a href="https://docs.ethers.io/v5/"&gt;Ethers.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though it will not be part of this guide (coming in a separate post), we will look at how to build a more robust API layer using &lt;a href="https://thegraph.com/"&gt;The Graph Protocol&lt;/a&gt; to get around limitations in the data access patterns provided by the native blockchain layer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#about-the-project"&gt;
  &lt;/a&gt;
  About the project
&lt;/h3&gt;

&lt;p&gt;The project that we will be building will be &lt;strong&gt;Metaverse Marketplace&lt;/strong&gt; - a digital marketplace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8ljara--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx8avrmuwqswx9roub2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8ljara--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx8avrmuwqswx9roub2g.png" alt="Metaverse Marketplace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a user puts an item for sale, the ownership of the item will be transferred from the creator to the marketplace.&lt;/p&gt;

&lt;p&gt;When a user purchases an item, the purchase price will be transferred from the buyer to the seller and the item will be transferred from the marketplace to the buyer.&lt;/p&gt;

&lt;p&gt;The marketplace owner will be able to set a listing fee. This fee will be taken from the seller and transferred to the contract owner upon completion of any sale, enabling the owner of the marketplace to earn recurring revenue from any sale transacted in the marketplace.&lt;/p&gt;

&lt;p&gt;The marketplace logic will consist of two smart contracts:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NFT Contract&lt;/strong&gt; - This contract allows users to mint unique digital assets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketplace Contract&lt;/strong&gt; - This contract allows users to put their digital assets for sale on an open market.&lt;/p&gt;

&lt;p&gt;I believe this is a good project because the tools, techniques, and ideas we will be working with lay the foundation for many other types of applications on this stack – dealing with things like payments, commissions, and transfers of ownership on the contract level as well as how a client-side application would use this smart contract to build a performant and nice-looking user interface.&lt;/p&gt;

&lt;p&gt;In addition to the smart contract, I'll also show you how to build a subgraph to make the querying of data from the smart contract more flexible and efficient. As you will see, creating views on data sets and enabling various and performant data access patterns is hard to do directly from a smart contract. &lt;a href="https://thegraph.com/"&gt;The Graph&lt;/a&gt; makes this much easier.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#about-polygon"&gt;
  &lt;/a&gt;
  About Polygon
&lt;/h3&gt;

&lt;p&gt;From &lt;a href="https://polygon.technology/"&gt;the docs&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;"Polygon is a protocol and a framework for building and connecting Ethereum-compatible blockchain networks. Aggregating scalable solutions on Ethereum supporting a multi-chain Ethereum ecosystem."&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ChainLinkGod/status/1405688790241316864"&gt;Polygon is about 10x faster than Ethereum &amp;amp; yet transactions are more than 10x cheaper&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Ok cool, but what does all that mean?&lt;/p&gt;

&lt;p&gt;To me it means that &lt;em&gt;I can use the same knowledge, tools, and technologies I have been using to build apps on Ethereum to build apps that are faster and cheaper for users&lt;/em&gt;, providing not only a better user experience but also opening the door for many types of applications that just would not be feasible to be built directly on Ethereum.&lt;/p&gt;

&lt;p&gt;As mentioned before, there are many other Ethereum scaling solutions such as &lt;a href="https://developer.offchainlabs.com/docs/developer_quickstart"&gt;Arbitrum&lt;/a&gt;and &lt;a href="https://optimism.io/"&gt;Optimism&lt;/a&gt; that are also in a similar space. Most of these &lt;a href="https://ethereum.org/en/developers/docs/scaling/"&gt;scaling solutions&lt;/a&gt; have technical differences and fall into various categories like &lt;a href="https://ethereum.org/en/developers/docs/scaling/sidechains/"&gt;sidechains&lt;/a&gt; , &lt;a href="https://ethereum.org/en/developers/docs/scaling/layer-2-rollups/"&gt;layer 2s&lt;/a&gt;, and &lt;a href="https://ethereum.org/en/developers/docs/scaling/state-channels/"&gt;state channels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Polygon &lt;a href="https://cointelegraph.com/news/matic-rebrands-to-polygon-in-pursuit-of-polkadot-on-ethereum-strategy"&gt;recently rebranded from Matic&lt;/a&gt; so you will also see the word &lt;strong&gt;Matic&lt;/strong&gt; used interchangeably when referring to various parts of their ecosystem because the name still is being used in various places, like their token and network names.&lt;/p&gt;

&lt;p&gt;To learn more about Polygon, check out &lt;a href="https://medium.com/coinmonks/polygon-matic-could-it-win-the-eth-scaling-race-2c8b4e9baf51"&gt;this post&lt;/a&gt; as well as their documentation &lt;a href="https://docs.matic.network/docs/develop/getting-started"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have an overview of the project and related technologies, let's start building!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h2&gt;

&lt;p&gt;To get started, we'll create a new Next.js app. To do so, open your terminal. Create or change into a new empty directory and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app digital-marketplace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, change into the new directory and install the dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;digital-marketplace

npm &lt;span class="nb"&gt;install &lt;/span&gt;ethers hardhat @nomiclabs/hardhat-waffle &lt;span class="se"&gt;\&lt;/span&gt;
ethereum-waffle chai @nomiclabs/hardhat-ethers &lt;span class="se"&gt;\&lt;/span&gt;
web3modal @openzeppelin/contracts ipfs-http-client &lt;span class="se"&gt;\&lt;/span&gt;
axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-tailwind-css"&gt;
  &lt;/a&gt;
  Setting up Tailwind CSS
&lt;/h3&gt;

&lt;p&gt;We'll be using &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; for styling, we we will set that up in this step.&lt;/p&gt;

&lt;p&gt;Tailwind is a utility-first CSS framework that makes it easy to add styling and create good looking websites without a lot of work.&lt;/p&gt;

&lt;p&gt;Next, install the Tailwind dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we will create the configuration files needed for Tailwind to work with Next.js (&lt;code&gt;tailwind.config.js&lt;/code&gt; and &lt;code&gt;postcss.config.js&lt;/code&gt;) by running the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, delete the code in &lt;strong&gt;styles/globals.css&lt;/strong&gt; and update it with the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#configuring-hardhat"&gt;
  &lt;/a&gt;
  Configuring Hardhat
&lt;/h3&gt;

&lt;p&gt;Next, initialize a new Hardhat development environment from the root of your project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat

? What &lt;span class="k"&gt;do &lt;/span&gt;you want to &lt;span class="k"&gt;do&lt;/span&gt;? Create a sample project
? Hardhat project root: &amp;lt;Choose default path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you should see the following files and folders created for you in your root directory:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hardhat.config.js&lt;/strong&gt; - The entirety of your Hardhat setup (i.e. your config, plugins, and custom tasks) is contained in this file.&lt;br&gt;
&lt;strong&gt;scripts&lt;/strong&gt; - A folder containing a script named sample-script.js that will deploy your smart contract when executed&lt;br&gt;
&lt;strong&gt;test&lt;/strong&gt; - A folder containing an example testing script&lt;br&gt;
&lt;strong&gt;contracts&lt;/strong&gt; - A folder holding an example Solidity smart contract&lt;/p&gt;

&lt;p&gt;Next, update the configuration at &lt;strong&gt;hardhat.config.js&lt;/strong&gt; with the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;In this configuration, we've configured the local Hardhat development environment as well as the &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;&lt;strong&gt;Mumbai testnet&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can read more about both Matic networks &lt;a href="https://docs.matic.network/docs/develop/network-details/network/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, create a file named &lt;strong&gt;.secret&lt;/strong&gt; at the root of your project. For now, we will leave this file empty. Later on, we will populate it with a test wallet private key that will hold some Matic tokens that we will get from the Matic testnet faucet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to never commit any private keys to Git. To be extra safe, consider storing these values in temporary environment variables when working with wallets that contain &lt;strong&gt;real&lt;/strong&gt; tokens. To omit from Git, add &lt;strong&gt;.secret&lt;/strong&gt; to your &lt;strong&gt;.gitignore&lt;/strong&gt; file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  Smart Contracts
&lt;/h3&gt;

&lt;p&gt;Next, we'll create our smart contracts! We'll start with the NFT contract for the unique digital assets.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;strong&gt;contracts&lt;/strong&gt; directory named &lt;strong&gt;NFT.sol&lt;/strong&gt;. Here, add the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This is a pretty straightforward NFT smart contract that allows users to mint unique digital assets and have ownership of them.&lt;/p&gt;

&lt;p&gt;In this contract we are inheriting from the &lt;a href="https://eips.ethereum.org/EIPS/eip-721"&gt;ERC721 standard&lt;/a&gt; implemented by &lt;a href="https://docs.openzeppelin.com/contracts/2.x/api/token/erc721"&gt;OpenZepplin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we'll create the contract for the Marketplace. This is a much larger smart contract. I've done my best to document what each function is doing.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now the smart contract code and environment is complete and we can try testing it out.&lt;/p&gt;

&lt;p&gt;To do so, we can create a local test to run through much of the functionality, like minting a token, putting it up for sale, selling it to a user, and querying for tokens.&lt;/p&gt;

&lt;p&gt;To create the test, open &lt;strong&gt;test/sample-test.js&lt;/strong&gt; and update it with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To run the test, run &lt;code&gt;npx hardhat test&lt;/code&gt; from your command line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZbw3bOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arhf4yzlrex4s8yp9hyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZbw3bOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arhf4yzlrex4s8yp9hyp.png" alt="Running the test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the test runs successfully, it should log out an array containing a single marketplace item.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-front-end"&gt;
  &lt;/a&gt;
  Building the front end
&lt;/h2&gt;

&lt;p&gt;Now that the smart contract is working and ready to go, we can start building out the UI.&lt;/p&gt;

&lt;p&gt;The first thing we might think about is setting up a layout so that we can enable some navigation that will persist across all pages.&lt;/p&gt;

&lt;p&gt;To set this up, open &lt;strong&gt;pages/_app.js&lt;/strong&gt; and update it with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The navigation has links for the home route as well as a page to sell a digital asset, view the assets you have purchased, and a creator dashboard to see the assets you've created as well as the assets you've sold.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#querying-the-contract-for-marketplace-items"&gt;
  &lt;/a&gt;
  Querying the contract for marketplace items
&lt;/h4&gt;

&lt;p&gt;The next page we'll update is &lt;strong&gt;pages/index.js&lt;/strong&gt;. This is the main entry-point of the app, and will be the view where we query for the digital assets for sale and render them to the screen.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When the page loads, we query the smart contract for any items that are still for sale and render them to the screen along with metadata about the items and a button for purchasing them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-and-listing-digital-items"&gt;
  &lt;/a&gt;
  Creating and listing digital items
&lt;/h4&gt;

&lt;p&gt;Next, let's create the page that allows users to create and list digital assets.&lt;/p&gt;

&lt;p&gt;There are a few things happening in this page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user is able to upload and save files to IPFS&lt;/li&gt;
&lt;li&gt;The user is able to create a new unique digital item (NFT)&lt;/li&gt;
&lt;li&gt;The user is able to set metadata and price of item and list it for sale on the marketplace&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After the user creates and lists an item, they are re-routed to the main page to view all of the items for sale.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#viewing-only-the-items-purchased-by-the-user"&gt;
  &lt;/a&gt;
  Viewing only the items purchased by the user
&lt;/h4&gt;

&lt;p&gt;In the &lt;strong&gt;Market.sol&lt;/strong&gt; smart contract, we created a function named &lt;code&gt;fetchMyNFTs&lt;/code&gt; that only returns the items owned by the user.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;pages/my-assets.js&lt;/strong&gt;, we will use that function to fetch and render them.&lt;/p&gt;

&lt;p&gt;This functionality is different than the query main &lt;strong&gt;pages/index.js&lt;/strong&gt; page because we need to ask the user for their address and use it in the contract, so the user will have to sign the transaction for it to be able to fetch them properly.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#creator-dashboard"&gt;
  &lt;/a&gt;
  Creator dashboard
&lt;/h4&gt;

&lt;p&gt;The final page we will be creating is the creator dashboard that will allow them to view both all of the items they have created as well as the items they have sold.&lt;/p&gt;

&lt;p&gt;This page will be using the &lt;code&gt;fetchItemsCreated&lt;/code&gt; function from the &lt;strong&gt;Market.sol&lt;/strong&gt; smart contract which returns only the items that match the address of the user making the function call.&lt;/p&gt;

&lt;p&gt;On the client, we use the &lt;code&gt;sold&lt;/code&gt; boolean to filter the items into another separate array to show the user only the items that have been sold.&lt;/p&gt;

&lt;p&gt;Create a new file called &lt;strong&gt;creator-dashboard.js&lt;/strong&gt; in the &lt;strong&gt;pages&lt;/strong&gt; directory with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the project
&lt;/h3&gt;

&lt;p&gt;To run the project, we will need to have a deploy script to deploy the smart contracts to the blockchain network.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploying-the-contracts-to-a-local-network"&gt;
  &lt;/a&gt;
  Deploying the contracts to a local network
&lt;/h4&gt;

&lt;p&gt;When we created the project, Hardhat created an example deployment script at &lt;strong&gt;scripts/sample-script.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To make the purpose of this script more clear, update the name of &lt;strong&gt;scripts/sample-script.js&lt;/strong&gt; to &lt;strong&gt;scripts/deploy.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, update the &lt;code&gt;main&lt;/code&gt; function in &lt;strong&gt;scripts/deploy.js&lt;/strong&gt; with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NFTMarket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NFTMarket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nftMarket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NFTMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nftMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nftMarket deployed to:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nftMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;hre&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NFT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nftMarket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nft deployed to:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script will deploy both contracts to the blockchain network.&lt;/p&gt;

&lt;p&gt;We will first test this on a local network, then deploy it to the &lt;a href="https://docs.matic.network/docs/develop/network-details/network/"&gt;Mumba testnet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To spin up a local network, open your terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a local network with 19 accounts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TtesD9Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1spai8459exh7looei7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TtesD9Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1spai8459exh7looei7.png" alt="Hardhat node"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, keep the node running and open a separate terminal window to deploy the contract.&lt;/p&gt;

&lt;p&gt;In a separate window, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js &lt;span class="nt"&gt;--network&lt;/span&gt; localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the deployment is complete, the CLI should print out the addresses of the contracts that were deployed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsLMJwFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ixy3zy6gwq2xsrslwmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsLMJwFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ixy3zy6gwq2xsrslwmg.png" alt="Contract addresses"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using these addresses, create a new file at the root of the project named &lt;strong&gt;config.js&lt;/strong&gt; and add the following code, replacing &lt;code&gt;contract-address&lt;/code&gt; with the contract addresses printed out by the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nftmarketaddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contract-address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nftaddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contract-address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#importing-accounts-into-metamask"&gt;
  &lt;/a&gt;
  Importing accounts into MetaMask
&lt;/h4&gt;

&lt;p&gt;You can import the accounts created by the node into your Metamask wallet to try out in the app.&lt;/p&gt;

&lt;p&gt;Each of these accounts is seeded with 10000 ETH.&lt;/p&gt;

&lt;p&gt;To import one of these accounts, first switch your MetaMask wallet network to Localhost 8545.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUoFYips--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgcicglserwmyx6vrexy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUoFYips--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgcicglserwmyx6vrexy.jpeg" alt="Localhost Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, in MetaMask click on &lt;strong&gt;Import Account&lt;/strong&gt; from the accounts menu:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qpxmPp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rv5hdn8s2f7tkslpru.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qpxmPp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rv5hdn8s2f7tkslpru.jpeg" alt="MetaMask import account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy then paste one of the &lt;strong&gt;Private Keys&lt;/strong&gt; logged out by the CLI and click &lt;strong&gt;Import&lt;/strong&gt;. Once the account is imported, you should see some the Eth in the account:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jJBZC6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc5y4xa9htjymncovo2o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jJBZC6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc5y4xa9htjymncovo2o.jpeg" alt="MetaMask account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'd suggest doing this with 2 or 3 accounts so that you have the ability to test out the various functionality between users.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#running-the-app"&gt;
  &lt;/a&gt;
  Running the app
&lt;/h4&gt;

&lt;p&gt;Now we can test out the app!&lt;/p&gt;

&lt;p&gt;To start the app, run the following command in your CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test everything out, try listing an item for sale, then switching to another account and purchasing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-polygon"&gt;
  &lt;/a&gt;
  Deploying to Polygon
&lt;/h2&gt;

&lt;p&gt;Now that we have the project up and running and tested locally, let's deploy to Polygon. We'll start by deploying to &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;Mumbai&lt;/a&gt;, the Matic test network.&lt;/p&gt;

&lt;p&gt;The first thing we will need to do is save one of our &lt;strong&gt;private keys&lt;/strong&gt; from our wallet to the &lt;strong&gt;.secrets&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;To get the private key, you can use one of the private keys given to you by Hardhat or you can export them directly from MetaMask.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6H5cUQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyd4cs7f3czfwyeh5513.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6H5cUQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyd4cs7f3czfwyeh5513.png" alt="Private keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For production apps, I'd suggest never hardcoding private key values in your as we are doing here, but instead setting it as something like an environment variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#configuring-the-network"&gt;
  &lt;/a&gt;
  Configuring the network
&lt;/h3&gt;

&lt;p&gt;Next, we need to switch from the local test network to the &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;Mumbai Testnet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do so, we need to create and set the network configuration.&lt;/p&gt;

&lt;p&gt;First, open MetaMask and click on &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7IT4BJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175kmqy9dp4uw94sk14l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7IT4BJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175kmqy9dp4uw94sk14l.png" alt="MetaMask settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click on &lt;strong&gt;Networks&lt;/strong&gt; and then &lt;strong&gt;Add Network&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7hY_j6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d762mh6l545ce9hexugf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7hY_j6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d762mh6l545ce9hexugf.png" alt="New Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we will add the following configurations for the Mumbai test network as listed &lt;a href="https://docs.matic.network/docs/develop/network-details/network/#mumbai-testnet"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Network Name: &lt;strong&gt;Mumbai TestNet&lt;/strong&gt;&lt;br&gt;
New RPC URL: &lt;strong&gt;&lt;a href="https://rpc-mumbai.matic.today"&gt;https://rpc-mumbai.matic.today&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Chain ID: &lt;strong&gt;80001&lt;/strong&gt;&lt;br&gt;
Currency Symbol: &lt;strong&gt;Matic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Save this, then you should be able to switch to and use the new network!&lt;/p&gt;

&lt;p&gt;Finally, you will need some testnet Matic tokens in order to interact with the applications.&lt;/p&gt;

&lt;p&gt;To get these, you can visit the &lt;a href="https://faucet.matic.network/"&gt;Matic Faucet&lt;/a&gt;, inputting the address of the wallets that you would like to request the tokens.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-to-the-matic-polygon-network"&gt;
  &lt;/a&gt;
  Deploying to the Matic / Polygon network
&lt;/h3&gt;

&lt;p&gt;Now that you have some Matic tokens, you can deploy to the Polygon network!&lt;/p&gt;

&lt;p&gt;To do so, be sure that the address associated with the private key you are deploying your contract with has received some Matic tokens in order to pay the gas fees for the transaction.&lt;/p&gt;

&lt;p&gt;To deploy to Matic, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js &lt;span class="nt"&gt;--network&lt;/span&gt; mumbai
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the contracts have been deployed, you should be able to update the contract addresses in your project and test on the new network 🎉!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deploying-to-mainnet"&gt;
  &lt;/a&gt;
  Deploying to Mainnet
&lt;/h4&gt;

&lt;p&gt;To deploy to the main Matic / Polygon network, you can use the same steps we set up for the Mumbai test network.&lt;/p&gt;

&lt;p&gt;The main difference is that you'll need to use an endpoint for Matic as well as import the network as listed &lt;a href="https://docs.matic.network/docs/develop/network-details/network/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example update in your project to make this happen might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* hardhat.config.js */&lt;/span&gt;

&lt;span class="cm"&gt;/* adding Matic main network config to existing config */&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;matic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rpc-mainnet.maticvigil.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Public RPCs like the one listed above may have traffic or rate-limits depending on usage. You can sign up for a dedicated free RPC URL using services like Infura, MaticVigil, QuickNode, Chainstack, or Ankr.&lt;/p&gt;

&lt;p&gt;For example, using something like Infura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://polygon-mainnet.infura.io/v3/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;infuraId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To view the final source code for this project, visit &lt;a href="https://github.com/dabit3/polygon-ethereum-nextjs-marketplace/settings"&gt;this repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;Congratulations! You've deployed a non-trivial app to Polygon.&lt;/p&gt;

&lt;p&gt;The coolest thing about working with solutions like Polygon is how little extra work or learning I had to do compared to building directly on Ethereum. Almost all of the APIs and tooling in these layer 2's and sidechains remain the same, making any skills transferable across various platforms like Polygon. &lt;/p&gt;

&lt;p&gt;For the next steps, I'd suggest porting over the queries implemented in this app using &lt;a href="https://thegraph.com/"&gt;The Graph&lt;/a&gt;. The Graph will open up many more data access patterns including things like pagination, filtering, and sorting which are necessary for any real-world application.&lt;/p&gt;

&lt;p&gt;I will also be publishing a tutorial showing how to use Polygon with The Graph in the coming weeks.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>blockchain</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>JavaScript Frameworks and Metagaming</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 06 Jul 2021 15:14:07 +0000</pubDate>
      <link>https://dev.to/this-is-learning/javascript-frameworks-and-metagaming-pb5</link>
      <guid>https://dev.to/this-is-learning/javascript-frameworks-and-metagaming-pb5</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ryansolid/solidjs-official-release-the-long-road-to-1-0-4ldd"&gt;Last week we released SolidJS 1.0&lt;/a&gt;. A JavaScript framework built on a foundation of ideas long ago dismissed, that accomplishes what some thought to be impossible. It was also a great personal achievement for me. Years of work realized and put on display.&lt;/p&gt;

&lt;p&gt;And many of you know that. Since 2018 I made the deliberate choice to write about every detail of building a JavaScript framework. That's several dozen articles. In a lot of ways &lt;a href="https://www.solidjs.com/"&gt;Solid&lt;/a&gt; was built in public. And just because we've hit 1.0 doesn't mean I have any intention to stop writing about my experiences and the things I learn in a highly introspective way.&lt;/p&gt;

&lt;p&gt;It's no secret it's been hard to push a new JavaScript framework in such an overcrowded space. And 1.0 release has lead me to reflect further on this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metagaming-in-games"&gt;
  &lt;/a&gt;
  Metagaming in Games
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HS80djn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg8ko3ofi29xkey96xh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HS80djn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg8ko3ofi29xkey96xh9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was an avid &lt;a href="https://magic.wizards.com/en"&gt;Magic the Gathering&lt;/a&gt;(collectable card game) player for several years. I mostly was a deck designer and play-tester. I was not the best technical player but what I did well was understand how the the whole field of possible decks would play against each other and how to take a given strategy and have it invalidate another approach. You can view this as a huge game of Rock Paper Scissors, except there were more than just 3 options.&lt;/p&gt;

&lt;p&gt;What makes Magic interesting is that each match is a best out of 3 games and the person who goes first in a game generally has the advantage. But for game 1 that is random and something you can't control. In games 2 the loser goes first and should it go to game 3 the person who won the first game goes first again.&lt;/p&gt;

&lt;p&gt;But what makes it really interesting is after game 1 either player can swap up to a quarter of the cards in their deck. And depending on each strategy one can change their approach to combat other strategies. This is incredibly deep when you consider the &lt;a href="https://www.youtube.com/watch?v=EZSx3zNZOaU"&gt;Princess Bride leveling game&lt;/a&gt; involved.&lt;/p&gt;

&lt;p&gt;Through Magic I learned lessons on game theory. It's immensely deep. I've applied these sort of patterned thinking to a lot of problems I've faced since. Mark Rosewater, the Head Designer, gives one of my favorite talks on lessons learned when designing.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QHHg99hwQGY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framework-design"&gt;
  &lt;/a&gt;
  Framework Design
&lt;/h2&gt;

&lt;p&gt;So what does this have to do with designing JavaScript Frameworks. Well, features-wise it is just as much about positioning as anything. How to balance a solution with no obvious weakness, yet offer the best offering on average. Sometimes you win in game 1 and there is nothing anyone can reasonably do to catch up. Other times you just need to be able draw it into the deciding game 3 where you will have the advantage.&lt;/p&gt;

&lt;p&gt;While this seems sort of ruthless it has given me a framework for looking at balance. You don't get to change your fundamental identity (or say colors in Magic). Only certain tools can be available to you depending on the choices you make. All you can do is look at maximizing your strengths, and adjusting what is actually the deciding factor that is being fought over.&lt;/p&gt;

&lt;p&gt;In Framework design this means sometimes the solution isn't to solve a known problem, but redefine it to avoid being trapped in solutions that don't suit the toolset. I had to do a lot of work to re-imagine things with VDOM-less JSX and how hydration and SSR could work in a granular reactive library. These technologies had been built on diffing Solid doesn't have.&lt;/p&gt;

&lt;p&gt;Time and time again when I get stuck I don't concede. I go back to the drawing board and see if there is a way to re-imagine the problem.&lt;/p&gt;

&lt;p&gt;Now picture this from another perspective. There is a reason Solid has such an unorthodox combination of elements, between mixing reactivity + JSX, doing some compilation but leaving some to the runtime, adopting uni-directional flow and immutable patterns with mutable internals. These things together edge out existing solutions in all the places they are weakest. Where the common knowledge is that we're reaching the limits of that abstraction.&lt;/p&gt;

&lt;p&gt;I've had framework authors say things like, I'd love to do &lt;em&gt;blank&lt;/em&gt; but it's not worth focusing on incremental improvements. And they are right. But what if the actual base configuration of a framework was setup to live in that space.&lt;/p&gt;

&lt;p&gt;I'm not necessarily claiming Solid's tradeoffs are better. Obviously I have personal bias here and I think at least it provides a unique set of strengths. However, I'm finding that those decisions have bigger implications beyond the technical.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-metagaming"&gt;
  &lt;/a&gt;
  Social Metagaming
&lt;/h2&gt;

&lt;p&gt;Social is not something I had as much experience in. I had MySpace to promote my band, and when Facebook came around, I was like "Pass. I don't need to do this again." I eventually signed up 3 years later. I didn't join Twitter for over a decade after that.&lt;/p&gt;

&lt;p&gt;All I had were articles that I wrote and the output of my work. And you can probably see the flaw in my approach to framework design. That's not how to make friends and influence people.&lt;/p&gt;

&lt;p&gt;Now framework authors live and breathe these problems. They've thought about the tradeoffs. They've chose their place and continue to work to understand these tradeoffs and implications of their decisions. Great video by Evan You on the topic:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ANtSWq-zI0s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This video establishes axis to compare our projects on and clearly states how moving the dial from left to right has different repercussions. It doesn't get super deep here, but decisions on one slide directly impact which options are open to you on the next.&lt;/p&gt;

&lt;p&gt;Now this is the kind of simple message that influencers can carry and amplify out to the masses. It is always an oversimplification, but it serves the purpose. But what if what is in contention are the axis that we make these comparisons on? What if something bends the rules of the established model?&lt;/p&gt;

&lt;p&gt;People are tired. The term JavaScript fatigue has been thrown around a lot. There is this perspective that JavaScript ecosystem as it matures should stabilize and look more like Ruby or Java on the backend. There should be established tools and practices that we make incremental improvements on. &lt;/p&gt;

&lt;p&gt;The last thing any influencer wants is to push more uncertainty on their followers. People trust them because they bring clarity. Things fit into clear buckets. An idea that breaks down those walls has no place.&lt;/p&gt;

&lt;p&gt;I don't expect people to drop what they are doing to change frameworks, but I've repeatedly found myself against an incredible barrier in the mind space. No one wanted JSX to be analyzable. No one wants to hear a well written VDOM scales better than most other solutions. Hell, no one wants to hear that React might as well be considered reactive when you consider how similar all frontend frameworks are. Or so I thought...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reflecting-on-10-release"&gt;
  &lt;/a&gt;
  Reflecting on 1.0 release
&lt;/h2&gt;

&lt;p&gt;I'm used to people seeing &lt;a href="https://www.solidjs.com/"&gt;Solid&lt;/a&gt; and dismissing it. After all it is intentionally designed to be a sleeper. But what I saw was positivity from people around the React community. They saw the release, looked at it, and said "you know this is kind of incredible."&lt;/p&gt;

&lt;p&gt;Isn't Solid some sort of React killer/replacement? Why would the React community welcome it and where others wouldn't?&lt;/p&gt;

&lt;p&gt;Simple. It reaffirms their values. They don't see Solid as a competitor. Maybe just a re-imagining of their favorite framework. Despite the surface story playing up this React vs Solid narrative, there is no reality where they'd feel threatened by this.&lt;/p&gt;

&lt;p&gt;From a cynic's perspective, Solid's existence gives them a gift. Here is the foil in those framework discussions. Touching on topics that compare with other frameworks on compilation, templates, reactivity, they can simply point at Solid as proof that one doesn't need to go through such lengths to get all the benefits.&lt;/p&gt;

&lt;p&gt;One could even argue, if anything Solid re-enforces why you should be using React. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;Well not to disappoint anyone but React isn't going to take this path. Some critics have said, "React is an idea and the VDOM is just an implementation detail." Well, I have it on good authority it's an implementation detail they neither want to nor can escape at this point. This isn't a Vue/AlpineJS scenario where the larger player only has to flex.&lt;/p&gt;

&lt;p&gt;We've had a lot of new exposure from places where we've struggled to get even a nod. They might not all have positive things to say but the acknowledgement is a step in the right direction. That's the important part.&lt;/p&gt;

&lt;p&gt;In my experience, it is the fellow maintainers and contributors that have the greatest understanding and tolerance of different ideas. I'm still learning to work with influencers to not, "well, actually" them all the time. I have a body of work that may contradict what they've been telling people. And I am in a position where I have no choice really in the matter.&lt;/p&gt;

&lt;p&gt;Solid has grown beyond what I singularly can focus on. So I'm going to keep working on the things that I can and have trust in people who continue to share my passion for this great little framework so that we continue to grow. It's come to my attention there are international communities sprouting up and there is already a demand for localization of the documentation into different languages. That's so amazing.&lt;/p&gt;

&lt;p&gt;I've seen renewed interest in people taking their reactive state libraries and trying to skip the framework and see what they can do. That's where &lt;a href="https://ryansolid.medium.com/b-y-o-f-part-1-writing-a-js-framework-in-2018-b02a41026929"&gt;this all started&lt;/a&gt;. I've learned so much a long the way. Watching people take the same steps and making the same discoveries I did years ago is the greatest validation I could hope for.&lt;/p&gt;

&lt;p&gt;Honestly this all is so amazing. So thank you all for being with me on this journey.&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>devjournal</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Laravel: Easily Customize Email Verification URL</title>
      <author>Faruk Nasir</author>
      <pubDate>Tue, 06 Jul 2021 15:12:03 +0000</pubDate>
      <link>https://dev.to/frknasir/laravel-easily-customize-email-verification-url-58f9</link>
      <guid>https://dev.to/frknasir/laravel-easily-customize-email-verification-url-58f9</guid>
      <description>&lt;p&gt;This is not something you'd want to do if you're building an application the &lt;em&gt;traditional laravel way&lt;/em&gt;––that is, a monolithic app. I've had to do this recently while working on a project that has the backend and frontend existing in different code bases.&lt;/p&gt;

&lt;p&gt;Normally, when you setup a laravel project for new users to verify their email, a temporarily signed url is generated and sent to them. The url is generated based on the project's set &lt;code&gt;APP_URL&lt;/code&gt; in the &lt;code&gt;.env&lt;/code&gt; file and, subsequently, in the &lt;code&gt;/config/app.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The problem arises when you are building a SPA front end for a laravel backend api. In that case, you may have your frontend at, say, &lt;code&gt;http://cool-app.com&lt;/code&gt; and the backend at &lt;code&gt;http://api.cool-app.com&lt;/code&gt;. Because the user will not have a direct access to the api endpoints, it won't be ideal to generate a user-clickable link based on the api's base url. What you'd want is a url that is based on the frontend's base url. So, how can that be achieved? Easy.&lt;/p&gt;

&lt;p&gt;Create a custom method for generating the URL and pass it to the &lt;code&gt;createUrlUsing&lt;/code&gt; method of the &lt;code&gt;VerifyEmail&lt;/code&gt; notification class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
* Set a callback that should be used when creating the email verification URL.
*
* @param  \Closure  $callback
* @return void
*/&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createUrlUsing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$createUrlCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$callback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only other step that we have to take is to call this function inside the &lt;code&gt;AuthServiceProvider&lt;/code&gt; passing the callback that returns our custom URL. The complete code is as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
* Register any authentication / authorization services.
*
* @return void
*/&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;

    &lt;span class="nc"&gt;VerifyEmail&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createUrlUsing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$notifiable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$frontendUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://cool-app.com/auth/email/verify'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$verifyUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;temporarySignedRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'verification.verify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth.verification.expire'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$notifiable&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s1"&gt;'hash'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$notifiable&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getEmailForVerification&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$frontendUrl&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'?verify_url='&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$verifyUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the frontend, you can have a page with a logic that makes a &lt;code&gt;GET&lt;/code&gt; http request to the &lt;code&gt;verify_url&lt;/code&gt;. And, there you have it––a customized email verification url!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Next.js and Vercel to instantly load a data-heavy website</title>
      <author>Seif Ghezala 🇩🇿</author>
      <pubDate>Tue, 06 Jul 2021 15:03:43 +0000</pubDate>
      <link>https://dev.to/seif_ghezala/using-next-js-and-vercel-to-instantly-load-a-data-heavy-website-3gn5</link>
      <guid>https://dev.to/seif_ghezala/using-next-js-and-vercel-to-instantly-load-a-data-heavy-website-3gn5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Article originally published on &lt;a href="https://tinloof.com/blog/using-next.js-and-vercel-to-instantly-load-a-data-heavy-website/"&gt;Tinloof&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A React application is JavaScript code that gets transformed into static HTML. This transformation is called "rendering".&lt;/p&gt;

&lt;p&gt;Whenever you build a React application, you're inevitably making a decision on when to render it and you usually have 3 choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-side rendering: the application is rendered on the browser when the script loads.&lt;/li&gt;
&lt;li&gt;Server-side rendering: the application is rendered on the server at every page request.&lt;/li&gt;
&lt;li&gt;Static site generation: the application is rendered on the cloud provider (e.g. &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;, &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;) at every deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A while ago, we faced this scenario when &lt;a href="https://tinloof.com/work/illuminem"&gt;building illuminem&lt;/a&gt;, an energy news aggregator that showcases thousands of posts daily.&lt;/p&gt;

&lt;p&gt;In this article, we'll talk about the performance problems we faced and how we ended up leveraging Next.js and Vercel to solve them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-architecture"&gt;
  &lt;/a&gt;
  The architecture
&lt;/h1&gt;

&lt;p&gt;illuminem's architecture consists of a service that crawls RSS feeds and web pages for energy-related posts, categorizes them, and pushes them to a &lt;a href="https://tinloof.com/blog/explain-like-im-five-headless-cms/"&gt;headless CMS&lt;/a&gt; called &lt;a href="https://www.sanity.io/"&gt;Sanity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the CMS, content managers create collections of these posts based on filters like "category".&lt;/p&gt;

&lt;p&gt;For example, they can create a collection called "Renewables" and use the "category" filter to only include posts that match the "renewables" category:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1mJfykpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277465/blog/vercel-nextjs-data-heavy-product/illuminem%2520renewables%2520carousel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1mJfykpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277465/blog/vercel-nextjs-data-heavy-product/illuminem%2520renewables%2520carousel.png" alt="Renewables category created from the CMS"&gt;&lt;/a&gt;&lt;br&gt;Renewables category created from the CMS
  &lt;/p&gt;

&lt;p&gt;The frontend is a Next.js application that fetches these collections and displays them as carousels.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UynswMCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277641/blog/vercel-nextjs-data-heavy-product/illuminem_code_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UynswMCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277641/blog/vercel-nextjs-data-heavy-product/illuminem_code_architecture.png" alt="illuminem's architecture"&gt;&lt;/a&gt;&lt;br&gt;illuminem's architecture
  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-serverside-rendering-on-all-pages"&gt;
  &lt;/a&gt;
  Using server-side rendering on all pages
&lt;/h1&gt;

&lt;p&gt;Building a product is not easy because requirements change throughout the process, so we played it safe to make sure we can be flexible enough to handle these changes and reach the finish line ahead of time.&lt;/p&gt;

&lt;p&gt;We were not sure how often we'd get new posts from the crawler, so we rendered most of our pages server-side.&lt;/p&gt;

&lt;p&gt;We used &lt;code&gt;getServerSideProps&lt;/code&gt; to fetch pages data from the CMS at every request.&lt;/p&gt;

&lt;p&gt;Here's a simplified example from the homepage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Called on the server after each request&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-problem-with-serverside-rendering"&gt;
  &lt;/a&gt;
  The problem with server-side rendering
&lt;/h1&gt;

&lt;p&gt;By the time we were done, the crawler had been running for 2 months and we started to feel the heavy page load.&lt;/p&gt;

&lt;p&gt;Even after limiting the number of posts per collection, each carousel could have hundreds of posts and most of our pages had dozens of carousels, so we're talking about thousands of posts per page.&lt;/p&gt;

&lt;p&gt;On average, it took 5 seconds to load a page on a very good WiFi connection.&lt;/p&gt;

&lt;p&gt;It was no surprise that our TTFB (Time to First Byte) was heavily impacted since every time a user visits a page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The server had to make a request with a huge query to the CMS.&lt;/li&gt;
&lt;li&gt;The CMS had to parse that query and form the response data.&lt;/li&gt;
&lt;li&gt;Once the server received a response from the CMS with thousands of posts, it had to render the React application before sending it to the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#why-not-making-pages-static"&gt;
  &lt;/a&gt;
  Why not making pages static?
&lt;/h1&gt;

&lt;p&gt;Some of the pages were not making any requests in &lt;code&gt;getServerSideProps&lt;/code&gt; to get data before rendering. Next.js made these pages static by default.&lt;/p&gt;

&lt;p&gt;But what if a page needs to fetch data before building?&lt;/p&gt;

&lt;p&gt;Well, Next.js provides a &lt;code&gt;getStaticProps&lt;/code&gt; that allows to fetch the data and render the page at build time. This would create static pages that load instantly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Called at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, most of the other pages could not be completely static. In fact, most of them have a "Most Trending" carousel to display the most viewed posts in the past 48 hours, so it had to be up-to-date with the actual views metrics.&lt;/p&gt;

&lt;p&gt;If we fetch the data at build time, the "Most Trending" carousel wouldn't be updated until the next build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_o1Edr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277757/blog/vercel-nextjs-data-heavy-product/most_trending_carousel_illuminem_sursys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_o1Edr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624277757/blog/vercel-nextjs-data-heavy-product/most_trending_carousel_illuminem_sursys.png" alt="Most Trending carousel"&gt;&lt;/a&gt;&lt;br&gt;Most Trending carousel
  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-not-making-pages-render-clientside"&gt;
  &lt;/a&gt;
  Why not making pages render client-side?
&lt;/h1&gt;

&lt;p&gt;At this point, we wondered: why not make these pages render client-side?&lt;/p&gt;

&lt;p&gt;The server wouldn't have to make any heavy work querying data and rendering the page.&lt;/p&gt;

&lt;p&gt;Instead, each carousel can make a request to fetch its collection of data and then render it.&lt;/p&gt;

&lt;p&gt;The main advantage would be that the TTFB would drastically decrease, making the page reach the browser pretty fast.&lt;/p&gt;

&lt;p&gt;However, knowing that each page has on average 12-15 carousels, that would result in 12-15 queries per page visit. Our CMS payment plan is based on the number of queries we make, so this would make us reach the limit in no time and would certainly blow up when illuminem picks up more users.&lt;/p&gt;

&lt;p&gt;On top of that, what we gain in performance in the server is lost in the client. The page would reach the browser fast, but it will be mostly a bunch of spinners. Each carousel would yet have to make a request to get its data and then render it.&lt;/p&gt;

&lt;p&gt;Because of these two reasons, client-side rendering was out of the table.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generating-static-pages-dynamically"&gt;
  &lt;/a&gt;
  Generating static pages dynamically
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you prefer video format, &lt;a href="https://www.youtube.com/watch?v=IJkTpR7sSwI&amp;amp;t=119s&amp;amp;ab_channel=AdoKukic"&gt;here's&lt;/a&gt; a video explaining this section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next.js introduced &lt;a href="https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration"&gt;incremental static regeneration&lt;/a&gt; in the 9.5 version release, making it possible to generate static pages at run-time.&lt;/p&gt;

&lt;p&gt;We can now generate static pages at build time, which makes them load instantly.&lt;/p&gt;

&lt;p&gt;But, how can we keep the "Most Trending" carousel content up-to-date?&lt;/p&gt;

&lt;p&gt;Every time a user visits one of these pages, &lt;code&gt;getStaticProps&lt;/code&gt; is run by the Next.js server in the background.&lt;/p&gt;

&lt;p&gt;When the result of &lt;code&gt;getStaticProps&lt;/code&gt; is different from the previous run because the CMS data changed, the stale page is replaced by an updated one.&lt;/p&gt;

&lt;p&gt;The updated page is generated at run-time without affecting the user experience.&lt;/p&gt;

&lt;p&gt;The best part is that we only had to set the &lt;code&gt;revalidate&lt;/code&gt; property to &lt;code&gt;3600&lt;/code&gt; to revalidate the page every hour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Called at build and run-time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// Revalidates the page every hour&lt;/span&gt;
      &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For pages that depend on a route parameter (e.g. &lt;code&gt;/[category]&lt;/code&gt;), we were able to generate a static page for each possible parameter by using the &lt;code&gt;getStaticPaths&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../categories&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CategoryPageContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CategoryPage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchCategoryDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching homepage data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchCategoriesFromCMS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#solving-edgecases-with-clientside-rendering"&gt;
  &lt;/a&gt;
  Solving edge-cases with client-side rendering
&lt;/h1&gt;

&lt;p&gt;Users can click on a post to see its details in a modal and share it on social media.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q65fQNcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278010/blog/vercel-nextjs-data-heavy-product/Modal_social_media_sharing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q65fQNcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278010/blog/vercel-nextjs-data-heavy-product/Modal_social_media_sharing.png" alt="Modal to share social media"&gt;&lt;/a&gt;&lt;br&gt;Modal to share social media
  &lt;/p&gt;

&lt;p&gt;Each post modal has a URL and we could add the &lt;code&gt;meta-data&lt;/code&gt; tags required to show a card preview snippet on the social media platforms.&lt;/p&gt;

&lt;p&gt;Unfortunately, when such URLs are shared, social media platforms could not get the right &lt;code&gt;meta-data&lt;/code&gt; tags since they are only added once the modal appears in the client.&lt;/p&gt;

&lt;p&gt;To fix that, we generated at run-time a static page for each post.&lt;/p&gt;

&lt;p&gt;Such pages only have the post modal rendered statically with the right &lt;code&gt;meta-data.&lt;/code&gt; The rest of the page is rendered client-side.&lt;/p&gt;

&lt;p&gt;We then used the URLs of these pages when sharing on social media.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;homeData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHomeData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchHomeDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setHomeData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;homeData&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;homeData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PostModal&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchPostDataFromCMS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching post data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Fallback to 404 page in case of error&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Nothing is generated at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blocking&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We set &lt;code&gt;fallback&lt;/code&gt; to &lt;code&gt;blocking&lt;/code&gt; in &lt;code&gt;getStaticPaths&lt;/code&gt; to only return the page once it has finished loading. You can read more about the other &lt;code&gt;fallback&lt;/code&gt; possibilities Next.js offers &lt;a href="https://nextjs.org/docs/basic-features/data-fetching"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first request to such pages might be a bit slow, but all the following requests resolve immediately because their static version was already generated.&lt;/p&gt;

&lt;p&gt;Social media platforms display now a proper snippet of the shared post because its required &lt;code&gt;meta-data&lt;/code&gt; tags are available immediately in the HTML response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4UqCQBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278133/blog/vercel-nextjs-data-heavy-product/Twitter_card_validator.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4UqCQBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/https-tinloof-com/image/upload/v1624278133/blog/vercel-nextjs-data-heavy-product/Twitter_card_validator.png" alt="Twitter card validation"&gt;&lt;/a&gt;&lt;br&gt;Twitter card validation
  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#are-you-building-a-product-with-vercel-and-nextjs"&gt;
  &lt;/a&gt;
  Are you building a product with Vercel and Next.js?
&lt;/h1&gt;

&lt;p&gt;If you plan to build or need help building a product using Vercel and Next.js, &lt;a href="https://tinloof.com/contact"&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>vercel</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Can we build Micro VMs with Dockerfile? : Answer is Yes !!!</title>
      <author>manish srivastava</author>
      <pubDate>Tue, 06 Jul 2021 14:59:02 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/can-we-build-micro-vms-with-dockerfile-answer-is-yes-14d3</link>
      <guid>https://dev.to/manishfoodtechs/can-we-build-micro-vms-with-dockerfile-answer-is-yes-14d3</guid>
      <description>&lt;p&gt;Answer is : ####Slim&lt;br&gt;
Slim will build a micro-vm from a Dockerfile. Slim works by building and extracting a rootfs from a Dockerfile, and then merging that filesystem with a small minimal kernel that runs in RAM.&lt;/p&gt;

&lt;p&gt;This results in a real VM that can boot instantly, while using very limited resources. If done properly, slim can allow you to design and build immutable unikernels for running services, or build tiny and embedded development environments.&lt;/p&gt;

&lt;p&gt;Slim currently supports Virtualbox, KVM, and hyperkit (MacOS only) as providers for running VMs. Slim will discover all available providers, defaulting to virtualbox, if more than one provider is available. The -p flag can be used to force Slim to use a specific provider.&lt;/p&gt;

&lt;p&gt;You can find repo here&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ottomatica"&gt;
        ottomatica
      &lt;/a&gt; / &lt;a href="https://github.com/ottomatica/slim"&gt;
        slim
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Build and run tiny vms from Dockerfiles. Small and sleek.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
slim | &lt;a href="https://travis-ci.org/ottomatica/slim" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e739c7896b58a37695dcb773654dbaba1252199b93527e5d9676fae5361849f7/68747470733a2f2f7472617669732d63692e6f72672f6f74746f6d61746963612f736c696d2e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://david-dm.org/ottomatica/slim" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c276d24df8cca34d3591f4a77bd52b2e29dd15d63290b0b44a99de7aebd50c2/68747470733a2f2f64617669642d646d2e6f72672f6f74746f6d61746963612f736c696d2f7374617475732e737667" alt="dependencies Status"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;slim&lt;/code&gt; will build a micro-vm from a Dockerfile. Slim works by building and extracting a rootfs from a Dockerfile, and then merging that filesystem with a small minimal kernel that runs in RAM.&lt;/p&gt;
&lt;p&gt;This results in a real VM that can boot instantly, while using very limited resources. If done properly, slim can allow you to design and build immutable unikernels for running services, or build tiny and embedded development environments.&lt;/p&gt;
&lt;h2&gt;
Using slim&lt;/h2&gt;
&lt;h3&gt;
Build a micro-vm&lt;/h3&gt;
&lt;p&gt;Create a micro-vm from a Dockerfile. Use &lt;code&gt;build&lt;/code&gt; command with a directory containing a Dockerfile.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ slim build images/alpine3.8-simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ottomatica/slim/master/doc/img/build.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9dd-JXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ottomatica/slim/master/doc/img/build.png" alt="build"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will add a bootable iso in the slim registry. &lt;a href="https://github.com/ottomatica/slim/tree/master/images/alpine3.8-simple"&gt;See example Dockerfile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;slim build&lt;/code&gt; will use your &lt;a href="https://raw.githubusercontent.com/ottomatica/slim/master/#running-a-micro-vm"&gt;default provider&lt;/a&gt; unless the &lt;code&gt;-p&lt;/code&gt; flag is specified (ie &lt;code&gt;-p hyperkit&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;
Listing micro-vm images&lt;/h3&gt;
&lt;p&gt;See a list of micro-vm images on your machine.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ slim images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ottomatica/slim/master/doc/img/images.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbOYb-vi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ottomatica/slim/master/doc/img/images.png" alt="images command"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Running a micro-vm&lt;/h3&gt;
&lt;p&gt;Provision a new instance…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ottomatica/slim"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#click-here-for-joining-my-team"&gt;
  &lt;/a&gt;
  &lt;a href="https://forms.gle/pSCALuEWHus3pg9F6"&gt;Click here for joining my team&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>linux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Glassmorphism Sign In Form Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 06 Jul 2021 14:58:16 +0000</pubDate>
      <link>https://dev.to/nikhil27b/glassmorphism-sign-in-form-using-html-css-3a2a</link>
      <guid>https://dev.to/nikhil27b/glassmorphism-sign-in-form-using-html-css-3a2a</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;Today I created a Glassmorphism Sign In form with HTML &amp;amp; CSS. this login form is very simple but looks good I use the Glassmorphism effect to create this Sign In. I hope you like this also comments about your thoughts.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nikhil27b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L13Hplw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DVAuMQ0j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/481802/ff897af1-c333-4e04-8f08-d6d1356a1c14.jpeg" alt="nikhil27b"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nikhil27b/8-amazing-instant-button-hover-effect-2kf9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;8 Amazing Instant Button Hover Effect &lt;/h2&gt;
      &lt;h3&gt;Nikhil Bobade  ・ Jun 25 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/dyWGxyP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>We Received A Grant To Port Our Web App To The Internet Computer</title>
      <author>David Dal Busco</author>
      <pubDate>Tue, 06 Jul 2021 14:53:58 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/we-received-a-grant-to-port-our-web-app-to-the-internet-computer-318o</link>
      <guid>https://dev.to/daviddalbusco/we-received-a-grant-to-port-our-web-app-to-the-internet-computer-318o</guid>
      <description>&lt;p&gt;Exciting news, we received a 25k USD grant from the &lt;a href="https://dfinity.org/"&gt;DFINITY&lt;/a&gt; foundation to port our web editor for slides, &lt;a href="https://deckdeckgo.com"&gt;DeckDeckGo&lt;/a&gt;, to the &lt;a href="https://dfinity.org/faq/what-is-the-internet-computer"&gt;Internet Computer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the coming weeks we will build a proof of concept to validate the feasibility of the project. Here are some insights about the scope, goal and milestones of this inspiring project.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#deckdeckgo"&gt;
  &lt;/a&gt;
  DeckDeckGo
&lt;/h3&gt;

&lt;p&gt;DeckDeckGo is a web &lt;a href="https://github.com/deckgo/deckdeckgo/"&gt;open source&lt;/a&gt; editor for slides. Unlike other tools, presentations can be published and viewed online or shared as Progressive Web Apps (PWA). The editor works on all devices (laptop, mobile, etc.), decks can be remotely controlled and interactions with the audience through live polls are also supported.&lt;/p&gt;

&lt;p&gt;DeckDeckGo is a side project that my friend &lt;a href="https://www.nmattia.com"&gt;Nicolas&lt;/a&gt; and &lt;a href="https://daviddalbusco.com/"&gt;I&lt;/a&gt; - together with our community (2000+ registered users) and help of our contributors - have been working on for the last 2.5 years. Here are our values: open source, transparency and knowledge sharing.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dfinity"&gt;
  &lt;/a&gt;
  DFINITY
&lt;/h3&gt;

&lt;p&gt;The DFINITY Foundation is a not-for-profit scientific research organization based in Zurich, Switzerland, that oversees research centers around the globe. The Foundation’s mission is to build, promote, and maintain the Internet Computer. Its team is committed to building advanced experimental technologies to improve the public internet (&lt;a href="https://dfinity.org/faq"&gt;source&lt;/a&gt;).&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#internet-computer"&gt;
  &lt;/a&gt;
  Internet Computer
&lt;/h3&gt;

&lt;p&gt;The Internet Computer extends the functionality of the public Internet so that it can host backend software, transforming it into a global compute platform.&lt;/p&gt;

&lt;p&gt;It seeks to address serious long-standing problems that bedevil IT, including system security, and to provide a means to reverse and undo the ever increasing monopolization of internet services, user relationships and data, and restore the Internet to its permissionless, innovative and creative roots.&lt;/p&gt;

&lt;p&gt;The Internet Computer is formed by an advanced decentralized protocol called ICP (Internet Computer Protocol) that independent data centers around the world run to combine the power of individual computers into an unstoppable seamless universe where internet native software is hosted and run with the same security guarantees as smart contracts (&lt;a href="https://dfinity.org/faq"&gt;source&lt;/a&gt;).&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#in-other-words"&gt;
  &lt;/a&gt;
  In Other Words
&lt;/h4&gt;

&lt;p&gt;The description above is the official one but, let me try to synthesize my understanding:&lt;/p&gt;

&lt;p&gt;The Internet Computer is a decentralized blockchain network on which you can run smart contracts that can host web applications. To my mum I would even say it is like bitcoin and cloud providers had a baby. In that way, you get best of both worlds and therefore open a new whole area of possibilities, what DFINITY calls the "Blockchain Singularity". In addition, they aim to try to challenge the monopolistic position of the &lt;a href="https://en.wikipedia.org/wiki/Big_Tech"&gt;GAFAM&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h3&gt;

&lt;p&gt;At this stage, our one and only goal is to test the feasibility of the concept: can our platform run and interact** with the Internet Computer? Even if we are really optimistic and everything we read and tried so far seems to validate the hypothesis, the ICP and its infrastructure are still young, it has “only” been officially launched a few weeks ago, on May 7th.&lt;/p&gt;

&lt;p&gt;By run* I mean can we host our Progressive Web Apps, our editor, on the Internet Computer and by interact** I mean can it persist and read data, the decks and slides of the users.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#milestones"&gt;
  &lt;/a&gt;
  Milestones
&lt;/h3&gt;

&lt;p&gt;To fulfill the proof of concept, and to get our grant 😜, we have defined the following three milestones which must be completed to be able to decide if yes, or no, DeckDeckGo can be migrated to the Internet Computer.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#milestone-1-offline-first-amp-hosting"&gt;
  &lt;/a&gt;
  Milestone 1 — Offline First &amp;amp; Hosting
&lt;/h4&gt;

&lt;p&gt;Intrinsically and because it is still young too, we won’t be able to perform as much HTTP queries as we currently do, because they might be, at least for the time being, a bit slower than our current solution with Firestore. That’s why, we will have to approach the persistence of the data differently.&lt;/p&gt;

&lt;p&gt;After some brainstorming, we decided that the most sustainable solution would be to transition from an online first to an offline first strategy. We are going to convert our editor to work primarily with IndexedDB and, to optionally replicate these data to the cloud, ultimately to the Internet Computer.&lt;/p&gt;

&lt;p&gt;This also will have the advantage to let anyone use our editor in standalone mode, for example with a Docker container, and will also make more sense for those getting our application through the &lt;a href="https://play.google.com/store/apps/details?id=com.deckdeckgo.twa&amp;amp;hl=fr&amp;amp;gl=US"&gt;Google Play&lt;/a&gt; or &lt;a href="https://www.microsoft.com/en-us/p/deckdeckgo/9pfr8n0r5gpp?activetab=pivot:overviewtab"&gt;Microsoft&lt;/a&gt; stores.&lt;/p&gt;

&lt;p&gt;Finally, in the same challenging milestone, we also aim to deploy our Progressive Web Apps as a static asset on the Internet Computer.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#milestone-2-authentication"&gt;
  &lt;/a&gt;
  Milestone 2 — Authentication
&lt;/h4&gt;

&lt;p&gt;The Internet Computer introduces a new secure method of cryptographic authentication that eliminates the ability for service providers to steal data, or track movements (&lt;a href="https://dfinity.org/technicals/web-authentication-identity"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In short: no more passwords at all 🤯!&lt;/p&gt;

&lt;p&gt;That is something we are eager to try, because we're super curious about it and because it does sound super cool.&lt;/p&gt;

&lt;p&gt;Of course, from a project perspective, we do need an authentication workflow to persist the users’ data on the network. That’s the cherry on top of the fun 😉.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#milestone-3-data-persistence"&gt;
  &lt;/a&gt;
  Milestone 3 — Data Persistence
&lt;/h4&gt;

&lt;p&gt;Unlike the common web solution to query data through HTTP, there is no such function as &lt;code&gt;fetch&lt;/code&gt; on the Internet Computer.&lt;/p&gt;

&lt;p&gt;The Internet Computer is primarily a distributed and decentralized platform for running software. Therefore, to persist data and run programs on it, the applications have to be deployed as WebAssembly modules. These are executed inside of a conceptual computational unit called a software canister.&lt;/p&gt;

&lt;p&gt;Once deployed, end-users can interact with the software canister by accessing the entry point functions defined for that canister through a front-end client such as a browser (&lt;a href="https://sdk.dfinity.org/docs/developers-guide/concepts/canisters-code.html"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Summarized: We will have to write some WebAssembly functions to get and set our data in the Internet Computer. From our editor developed with &lt;a href="https://stenciljs.com/"&gt;StencilJS&lt;/a&gt;, we will then interact with these through async callbacks.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#keep-in-touch"&gt;
  &lt;/a&gt;
  Keep In Touch
&lt;/h3&gt;

&lt;p&gt;To follow our adventure, you can star  and watch our &lt;a href="https://github.com/deckgo/deckdeckgo"&gt;GitHub repo&lt;/a&gt; ⭐️, join our &lt;a href="https://deckdeckgo.com/en/newsletter"&gt;newsletter&lt;/a&gt; or &lt;a href="https://join.slack.com/t/deckdeckgo/shared_invite/enQtNzM0NjMwOTc3NTI0LTBlNmFhODNhYmRkMWUxZmU4ZTQ2MDJiNjlmYWZiODNjMDU5OGRjYThlZmZjMTc5YmQ3MzUzMDlhMzk0ZDgzMDY"&gt;Slack&lt;/a&gt; channel. We will share some updates following our progress and, as we often do, some of our learning.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I play it cool but, I am fully aware it is quite a tremendous opportunity and challenging project. Time to hack!&lt;/p&gt;

&lt;p&gt;To dfinity and beyond.&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my &lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next presentations!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>motivation</category>
      <category>news</category>
    </item>
    <item>
      <title>Project Showcase - The Journey</title>
      <author>Vighnesh Kulkarni</author>
      <pubDate>Tue, 06 Jul 2021 14:31:30 +0000</pubDate>
      <link>https://dev.to/vighnesh/project-showcase-the-journey-2ai9</link>
      <guid>https://dev.to/vighnesh/project-showcase-the-journey-2ai9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;There's Dribbble, Behance, etc. for Designers; &lt;br&gt;
Codechef, Codeforces, Hackerrank, (*infinity) for Competitive Programmers;&lt;br&gt;
ProductHunt, IndieHacker for Launching Products;&lt;br&gt;
LinkedIn for…guess what? -&amp;gt; Certifications 👀 ;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;And what about Developers ???&lt;/strong&gt; &lt;br&gt;
Here I am, introducing &lt;a href="https://projstemp.herokuapp.com/"&gt;Project Showcase&lt;/a&gt;, a platform for people to showcase their projects, get upvotes and feedback from the community, discover projects by peers and build a project-centric profile!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-it%C2%A0start"&gt;
  &lt;/a&gt;
  How did it start?
&lt;/h2&gt;

&lt;p&gt;I am a part of few discord servers where there's all coding-related stuff going on, and guess what, each one of those servers has a separate channel just for people to showcase their projects. I once observed that some of them had posted the same project on multiple servers to receive as much feedback/reach as they can.&lt;br&gt;
And this is what convinced me to start building this platform.&lt;/p&gt;

&lt;p&gt;Also, on this platform, unlike Product Hunt, the focus would not be on how unique or viable the project is (business-wise), but on how well the project is made as far as technicalities and design go.&lt;/p&gt;

&lt;p&gt;A growing segment of the developer/designer/product market is looking for people with past projects having been made. A portfolio site where projects can be showcased, and also where great projects can be discovered can help foster this community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Now comes the most awaited part, the features this platform provides!&lt;br&gt;
Currently, as an MVP, we can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login with Google&lt;/li&gt;
&lt;li&gt;Upload Projects (with links to GitHub, YouTube, Live site, etc.)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iW8yl9vF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jw59d3v53whro5mf7pl.png" alt="Upload Project Page"&gt;
&lt;/li&gt;
&lt;li&gt;Have a separate page for each project with its details, feedback section and a link to creator's profile.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbC2K34F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlwaub53b1i5a7j5uekh.png" alt="Project Details Page"&gt;
&lt;/li&gt;
&lt;li&gt;Explore projects by filtering them as New, Trending and Popular.&lt;/li&gt;
&lt;li&gt;Get your projects Upvoted and watch them grow in the Trending/Popular list.&lt;/li&gt;
&lt;li&gt;Also, get yourself in the Top Creators List (of the week) depending upon the no. of votes your project(s) have received.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4xZBsXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1tutdo50i1kv08xoihd.png" alt="Project Showcase Page"&gt;
&lt;/li&gt;
&lt;li&gt;A profile page showcasing all the projects uploaded and upvoted.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzNECi1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzczae6qs1rr4hu0630w.png" alt="Profile Page"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This isn't it, there are a lot more features incoming😁 like Badges for various milestones, editing the profile and project details page, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-conclude"&gt;
  &lt;/a&gt;
  To Conclude
&lt;/h2&gt;

&lt;p&gt;A feedback-rich and competitive environment would motivate/help all of us to build projects with much more care and efficacy.&lt;/p&gt;

&lt;p&gt;Also, let's make it easier for both developers(us) and companies looking to hire candidates based on the projects they have made just by having all our projects in one place!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;All your feedbacks/suggestions are very much welcome.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find me on &lt;a href="https://twitter.com/vighnesh192"&gt;Twitter&lt;/a&gt; &lt;a href="https://github.com/vighnesh192"&gt;GitHub&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/vighnesh-kulkarni-vk192/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repos for the Project:-&lt;/strong&gt;&lt;br&gt;
Client Repo - &lt;a href="https://github.com/vighnesh192/project-showcase-client"&gt;https://github.com/vighnesh192/project-showcase-client&lt;/a&gt;&lt;br&gt;
Server Repo - &lt;a href="https://github.com/vighnesh192/project_showcase_server"&gt;https://github.com/vighnesh192/project_showcase_server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to leave a ⭐!! :)&lt;/p&gt;

&lt;p&gt;Thank You!!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>opensource</category>
      <category>community</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Introducing GoldFish : The minimalist Theme</title>
      <author>Pawel</author>
      <pubDate>Tue, 06 Jul 2021 14:25:48 +0000</pubDate>
      <link>https://dev.to/pb/introducing-goldfish-the-minimalist-theme-57km</link>
      <guid>https://dev.to/pb/introducing-goldfish-the-minimalist-theme-57km</guid>
      <description>&lt;p&gt;I would like to thanks for all of you for the immense support you gave to the JellyFish Theme. As it was a success with 6,900 installs and counting. I would like to address some of it's limitations. Since it is a completely dark theme it might be not appealing for the matte loving audience and to address this issue I've came up with idea of GoldFish: The minimalist Theme for visual studio code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some quick shots of it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GoldFish Installation Page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFP-hcc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7wz0d4xjopro8ajpag4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFP-hcc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7wz0d4xjopro8ajpag4.png" alt="Installation Page GoldFish"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Link:&lt;/em&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=PawelBorkar.goldfish"&gt;https://marketplace.visualstudio.com/items?itemName=PawelBorkar.goldfish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJdeGP_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJdeGP_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview1.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Terminal Accent&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvNCCRJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvNCCRJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview2.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Highlighted Selection&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GlU8vVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GlU8vVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview3.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Using Multiple columns in vscode with the GoldFish Theme&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asRoVsKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asRoVsKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview4.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mpjooER---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mpjooER---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview5.png" alt="Preview"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Repository&lt;/em&gt; &lt;a href="https://github.com/pawelborkar/vscode-goldfish"&gt;GoldFish&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pawelborkar"&gt;
        pawelborkar
      &lt;/a&gt; / &lt;a href="https://github.com/pawelborkar/vscode-goldfish"&gt;
        vscode-goldfish
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GoldFish: The minimalist theme
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;h1&gt;
GoldFish&lt;/h1&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pawelborkar/vscode-GoldFish/master/assets/goldfish.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzXb9UwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-GoldFish/master/assets/goldfish.png" height="190px" width="190px"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Theme your code editor will love&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/eb9910a5d2b1e042cd1d2a0639e5cca130775191a17d8f5fd156822ddcbea2c3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5468656d652d476f6c64466973682d253233666630303535"&gt;&lt;img src="https://camo.githubusercontent.com/eb9910a5d2b1e042cd1d2a0639e5cca130775191a17d8f5fd156822ddcbea2c3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5468656d652d476f6c64466973682d253233666630303535" alt="GoldFish"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/24adf43c237970e2b40ebb65580b4f563880fcf6edb64891e1c8a0ec4d818068/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f706177656c626f726b61722f7673636f64652d476f6c64466973683f636f6c6f723d253233666630303535266c6162656c3d4c6963656e7365266c6f676f3d4c6963656e7365267374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/24adf43c237970e2b40ebb65580b4f563880fcf6edb64891e1c8a0ec4d818068/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f706177656c626f726b61722f7673636f64652d476f6c64466973683f636f6c6f723d253233666630303535266c6162656c3d4c6963656e7365266c6f676f3d4c6963656e7365267374796c653d666c6174" alt="GitHub"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4346e7ab88bb56f06ecb224890db5cfcf1d0010668351289a9060f4fef1b54c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f492532302545322539442541342532302d4f70656e536f757263652d253233666630303535"&gt;&lt;img src="https://camo.githubusercontent.com/4346e7ab88bb56f06ecb224890db5cfcf1d0010668351289a9060f4fef1b54c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f492532302545322539442541342532302d4f70656e536f757263652d253233666630303535" alt="Message"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7c232134243701cde5be6673efa94afa3c3603f7bca507a62a96ca18d9f05699/68747470733a2f2f696d672e736869656c64732e696f2f76697375616c2d73747564696f2d6d61726b6574706c6163652f762f706177656c626f726b61722e676f6c64666973683f636f6c6f723d253233666630303535266c6162656c3d4c6174657374266c6f676f3d4c6174657374266c6f676f436f6c6f723d253233666630303535"&gt;&lt;img src="https://camo.githubusercontent.com/7c232134243701cde5be6673efa94afa3c3603f7bca507a62a96ca18d9f05699/68747470733a2f2f696d672e736869656c64732e696f2f76697375616c2d73747564696f2d6d61726b6574706c6163652f762f706177656c626f726b61722e676f6c64666973683f636f6c6f723d253233666630303535266c6162656c3d4c6174657374266c6f676f3d4c6174657374266c6f676f436f6c6f723d253233666630303535" alt="Visual Studio Marketplace Version"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJdeGP_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview1.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvNCCRJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview2.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GlU8vVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview3.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asRoVsKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview4.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mpjooER---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/assets/preview5.png" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h1&gt;
Installation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Open  &lt;em&gt;Extensions&lt;/em&gt; from the Activity Bar  in VS Code. &lt;code&gt;View → Extensions&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;GoldFish&lt;/code&gt;, choose "GoldFish Theme" by &lt;em&gt;Pawel Borkar&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Install&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to File &amp;gt; Preferences &amp;gt; Color Theme &amp;gt;&lt;code&gt;GoldFish&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pawelborkar"&gt;Pawel Borkar&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h1&gt;
License&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/pawelborkar/vscode-goldfish/master/LICENSE"&gt;Apache-2.0 License&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;Copyright (c) 2021 Pawel Borkar&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pawelborkar/vscode-goldfish"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#vote-of-thanks"&gt;
  &lt;/a&gt;
  Vote of Thanks
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading this post and feel free to use the source code for your own projects and to publish your own theme. Create a PR suggesting any changes/improvements I would love to merge them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like my work then you can follow me on twitter &lt;a href="https://twitter.com/pawelsb"&gt;@pawelsb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>vscode</category>
    </item>
  </channel>
</rss>
