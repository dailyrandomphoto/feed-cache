<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I need some advice on Freelancing</title>
      <author>ùêãùêÑùëΩùêàùë®ùêìùêáùêÄùêç Programming</author>
      <pubDate>Mon, 12 Apr 2021 17:38:43 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</link>
      <guid>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</guid>
      <description>&lt;p&gt;Hello everyone, I am going to start freelancing soon and would like some advice on it and an answer for my question below.&lt;/p&gt;

&lt;p&gt;I am a fifteen-year-old fullstack developer and I'm going to be starting to actually put my skills to use, starting with making free websites for people, and then charging little y little until I get much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-charge-your-customers-for-a-domain-name"&gt;
  &lt;/a&gt;
  Do you charge your customers for a domain name?
&lt;/h3&gt;

&lt;p&gt;My question is, Do you buy a domain name yourself and then charge your customer for it?&lt;br&gt;
If you buy the domain for them and link it to the website, you can get a higher control level over it and can manage it in case something goes wrong.&lt;br&gt;
If your customer buys it, they might not be able to link it properly and might not set it up properly.  Linking domains was a very difficult task for me at first.&lt;/p&gt;

&lt;p&gt;Also, I'd appreciate some advice on freelancing if you have any.  Thanks!&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>help</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Demystifying Time Complexity &amp; Big O Notation</title>
      <author>Sai Ashish</author>
      <pubDate>Mon, 12 Apr 2021 17:12:45 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</link>
      <guid>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</guid>
      <description>&lt;p&gt;One of the most important concepts in software development is analysing the time complexity of an algorithm. In technical interviews, you'd often find interviewers asking, "What's the time complexity of this algorithm?" or "Can you improve the time complexity?" If you've no idea what time complexity means or what the fuss about Big O is all about, stick till the end to find out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-time-complexity"&gt;
  &lt;/a&gt;
  What is Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" alt="Time Complexity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time complexity is the &lt;strong&gt;time taken&lt;/strong&gt; by an algorithm as a &lt;strong&gt;function of the length of the input&lt;/strong&gt;. In short, it tells the running time or &lt;strong&gt;performance&lt;/strong&gt; of a program as the size of the input is varied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-understand-time-complexity"&gt;
  &lt;/a&gt;
  Why do we need to understand Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" alt="Understanding Time Complexity"&gt;&lt;/a&gt;&lt;br&gt;
Time complexity helps us to determines the &lt;strong&gt;scalability&lt;/strong&gt; of an algorithm. Suppose, you're at a party and you want to use an Instagram filter to capture the joyous occasion. Alas, the filter takes years to load. Your smiles turn into a frown as your mood gets ruined. So much for a party, huh?&lt;/p&gt;

&lt;p&gt;As a developer, it is necessary to understand which is the most efficient and optimised method to use in an application. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-compare-the-time-complexity-of-an-algorithm"&gt;
  &lt;/a&gt;
  How to compare the time complexity of an algorithm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" alt="Compare time complexity of algorithm"&gt;&lt;/a&gt;&lt;br&gt;
Let us take an example to understand this problem. Ali and Jack were given a task to write a program to find the sum of &lt;em&gt;n&lt;/em&gt; numbers. Jack is a very hardworking guy who has mastered the fundamentals of a programming language. He doesn't pay attention to anything except programming. Here's how he coded the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10, sum = 0;
for(int i=1; i&amp;lt;=n; i++)
{
     sum = sum + i;
}
System.out.println(sum);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ali was smart. He focused on every subject in school and solved problems in a jiffy. When Ali was granted the same problem, he chuckled and used Mathematics to his aid. Here's  how Ali built his program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10;
System.out.println((n*(n+1))/2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see from the above scenario, Ali was much more efficient as he avoided the shackles of using a loop to calculate his answer. If the size of the input increases, Jack's program will start to freeze and eventually int will overflow to present the wrong answer. Ali's magical line saves time and gives the right answer even for larger numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-big-o"&gt;
  &lt;/a&gt;
  What is Big O?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image Source: &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on logic, we have understood time complexity and its comparison but we need something very distinct to compare the performance of different algorithms. If we start comparing the different type of sorting techniques by logic, it would get real tedious for our brain to execute the complexity of our problem. To optimise this, there's a superhero called the Big O.&lt;/p&gt;

&lt;p&gt;As per  &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;Wikipedia&lt;/a&gt;, Big O or asymptotic notation is a &lt;strong&gt;mathematical function&lt;/strong&gt; that describes the &lt;strong&gt;limiting behaviour&lt;/strong&gt; of a function when the argument tends towards a particular value or infinity.&lt;/p&gt;

&lt;p&gt;Big O basically tells us the &lt;strong&gt;time complexity in mathematical terms&lt;/strong&gt; which can be easily compared. Our superhero Big O comes in different forms and sizes. I'll introduce you to them, right away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o1"&gt;
  &lt;/a&gt;
  Understanding O(1)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;constant time complexity&lt;/strong&gt;. O(1) represents that no matter the size of the input, it takes the same amount of time to execute. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int b = {1,2,3,4,5}
System.out.println(b[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter the length of the array, the program will require one unit, constant time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;linear time complexity&lt;/strong&gt;. Linear represents the time takes by the algorithm is directly proportional to the size of the input. One of the most famous examples is the Linear Search algorithm. In linear search, we iterate over each element of the loop until we find a match. In the best-case scenario, the element could be present in the first position itself, thus effectively reducing the time complexity to O(1) as seen above. On the other hand, if the element is present at the end of the array or not at all, the loop has to iterate over all the elements in the array. Hence, the time complexity increases to O(n).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 0, n[] = {1,2,3,4,5};
for(int i = 0; i &amp;lt;n.length; i++)
{
     if(n[i]==a)
     {
          System.out.println("Found");
          break;
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are two for loops in a program, the effective time complexity is still considered as O(n) and not O(2n). We typically ignore the constants in front of the variables in such cases, because they both still represent a linear function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-ologn"&gt;
  &lt;/a&gt;
  Understanding O(logn)
&lt;/h2&gt;

&lt;p&gt;O(logn) also known as &lt;strong&gt;logarithmic time complexity&lt;/strong&gt; denotes the time taken by the program to execute is proportional to the logarithm of the size of the input. The most famous example of this is the Binary Search algorithm. Let's suppose the worst-case scenario in the Binary search algorithm. We keep on halving our search array until we find the element or realise it is not present. In an array of 8 elements it will take maximum of 3 iterations(log28) to execute. If there are 1 million elements, it'll take just 19 iterations. This makes Binary Search so much more powerful than Linear Search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int arr[] = {10,20,30,40,50}; 
int l = 0, r = arr.length - 1;
while (l &amp;lt;= r) {
      int m = l + (r - l) / 2;
      if (arr[m] == x)
          return m;
      if (arr[m] &amp;lt; x)
           l = m + 1;
      else
           r = m - 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understanding-on2"&gt;
  &lt;/a&gt;
  Understanding O(n&lt;sup&gt;2&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) is also known as &lt;strong&gt;Quadratic time complexity&lt;/strong&gt;. It represents that input is proportional to the square of the size of the input. It is most commonly seen in Bubble sort, Insertion sort and Patterns. Nested loops are an easy way to identify the O(n&lt;sup&gt;2&lt;/sup&gt;) complexity. &lt;/p&gt;

&lt;p&gt;As the number of nested loops increases so does the power.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(int i = 1; i&amp;lt;=5; i++)
{
     for(int j = 1; j&amp;lt;=i; j++)
     {
         System.out.print(j);
     }
System.out.println();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are instances of multiple nested loops of different orders only the highest power will contribute to time complexity. For example, if T(n) = 3n&lt;sup&gt;3&lt;/sup&gt; + 2n&lt;sup&gt;2&lt;/sup&gt;+n. The time complexity will be Cubic, O(n&lt;sup&gt;3&lt;/sup&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o2n"&gt;
  &lt;/a&gt;
  Understanding O(2&lt;sup&gt;n&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(2&lt;sup&gt;n&lt;/sup&gt;) represents the &lt;strong&gt;exponential function&lt;/strong&gt;. It is opposite to the logarithmic function. This mostly occurs in the case of Recursive functions, like recursive calculation of Fibonacci numbers. Another famous example of this complexity is the Hanoi Tower Problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void solve_hanoi(int N, string from_peg, string to_peg, string spare_peg)
{
    if (N&amp;lt;1) {
        return;
    }
    if (N&amp;gt;1) {
        solve_hanoi(N-1, from_peg, spare_peg, to_peg);
    }
    print "move from " + from_peg + " to " + to_peg;
    if (N&amp;gt;1) {
        solve_hanoi(N-1, spare_peg, to_peg, from_peg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Program Source: &lt;a href="https://stackoverflow.com/questions/34915869/example-of-big-o-of-2n"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n!)
&lt;/h2&gt;

&lt;p&gt;O(n!) represents that the time complexity is the function of n &lt;strong&gt;factorial.&lt;/strong&gt; This is the costliest it can get. One of the most classic examples is the Travelling Salesman Problem. Another example of O(n!) is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const nFacRuntimeFunc = (n) =&amp;gt; {
  for(let i=0; i&amp;lt;n; i++) {
    nFacRuntimeFunc(n-1);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should at all costs &lt;strong&gt;avoid&lt;/strong&gt; the O(n!) complexity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-recap"&gt;
  &lt;/a&gt;
  Let's Recap:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt; - Constant time complexity (BestüéØ)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt; - Linear time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(log n)&lt;/strong&gt; - Logarithmic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt; - Quadratic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt; - Exponential time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n!)&lt;/strong&gt; - Factorial time complexity (Worstüò≠)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#valuable-resource-big-o-cheatsheet"&gt;
  &lt;/a&gt;
  Valuable Resource:  &lt;a href="https://www.bigocheatsheet.com/"&gt;Big O Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Our superhero deserves a website of his own. I stumbled upon this website called the  &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet.com&lt;/a&gt; made by &lt;a href="https://twitter.com/ericdrowell"&gt;Eric&lt;/a&gt;. It contains an amazing comparison of the time complexity for different data structures and array sorting elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" alt="Time Complexity of common data structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" alt="Time Complexity of various sorting algorithms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In today's world, people are learning various frameworks, libraries &amp;amp; technologies without learning time complexity or Data Structures &amp;amp; Algorithms(DSA). If you ask any developer working in the top MNC's, they'll advise you to master the fundamentals and learn DSA as it greatly helps in problem-solving and writing efficient code. With that said, I hope our superhero continues to be our guardian angel forever. Cheersüçª&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 ways ML is a Game Changer for your Incident Management Lifecycle</title>
      <author>gdcohen</author>
      <pubDate>Mon, 12 Apr 2021 16:55:26 +0000</pubDate>
      <link>https://dev.to/gdcohen/3-ways-ml-is-a-game-changer-for-your-incident-management-lifecycle-55md</link>
      <guid>https://dev.to/gdcohen/3-ways-ml-is-a-game-changer-for-your-incident-management-lifecycle-55md</guid>
      <description>&lt;p&gt;Any developer, SRE or DevOps engineer responsible for an application with users has felt the pain of responding to a high priority incident. There's the immediate stress of mitigating the issue as quickly as possible, often at odd hours and under severe time pressure. There's the bigger challenge of identifying root cause so a durable fix can be put in place. There's the aftermath of postmortems, reviews of your monitoring and observability solutions, and inevitable updates to alert rules. And there's the typical frustration of wondering what could have been done to avoid the problem in the first place.&lt;/p&gt;

&lt;p&gt;In a modern cloud native environment, the complexity of distributed applications and the pace of change make all of this ever harder. Fortunately, AI and ML technologies can help with these human-driven processes. Here are three specific ways:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-drastically-cut-incident-remediation-times"&gt;
  &lt;/a&gt;
  1. Drastically cut incident remediation times
&lt;/h2&gt;

&lt;p&gt;The toughest incidents are ones where the symptoms are obvious, but the root cause is not. In other words, they are easy to detect, but hard to root cause -- as seen in¬†&lt;a href="https://www.zebrium.com/blog/lessons-from-slack-gcp-and-snowflake-outages-zebrium"&gt;recent outages at GCP, Slack and Snowflake&lt;/a&gt;. SREs and engineers can spend hours digging through dashboards, traces, and inevitably -- scan&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2z5ZVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520hunting%2520for%2520root%2520cause.png%3Fwidth%3D234%26name%3Dmanual%2520hunting%2520for%2520root%2520cause.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2z5ZVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520hunting%2520for%2520root%2520cause.png%3Fwidth%3D234%26name%3Dmanual%2520hunting%2520for%2520root%2520cause.png" alt="manual hunting for root cause"&gt;&lt;/a&gt;¬†millions of log lines. There might be clues to narrow the scope of the problem -- perhaps a set of services, containers, or hosts -- but ultimately there is a search for the unknown. Is there a new type of error? Or any unusual events? Or a significant deviation from the normal in event patterns? And when there are many of the above -- how do they relate to each other?&lt;/p&gt;

&lt;p&gt;Really experienced engineers develop instincts to help with this hunt for the unknown. But machine learning is very well suited to this problem -- it can keep tracking the evolving (but healthy) event patterns and their correlations,¬†&lt;a href="https://www.zebrium.com/blog/is-autonomous-monitoring-the-anomaly-detection-you-actually-wanted"&gt;quickly surface unusual ones that explain root cause&lt;/a&gt;, and even¬†&lt;a href="https://www.zebrium.com/blog/real-world-examples-of-gpt-3-plain-language-root-cause-summaries-zebrium"&gt;summarize the problem in plain language&lt;/a&gt;¬†by matching the events against known problems in the public domain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-eliminate-the-alert-rule-hamster-wheel"&gt;
  &lt;/a&gt;
  2. Eliminate the Alert Rule hamster wheel
&lt;/h2&gt;

&lt;p&gt;The second pain point is the need to revise and continually evolve alert rules and settings that give you early warning. While a pure approach might only monitor a narrow set of user-impacting health metrics&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_UD3AE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520alert%2520rules.png%3Fwidth%3D396%26name%3Dmanual%2520alert%2520rules.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_UD3AE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520alert%2520rules.png%3Fwidth%3D396%26name%3Dmanual%2520alert%2520rules.png" alt="manual alert rules"&gt;&lt;/a&gt;¬†and symptoms, that can make it harder to identify root cause. So in reality most organizations set alerts for a blend of user facing symptoms as well as underlying health indicators (errors, latencies, reconnects, resource exhaustion etc.) After a particularly painful incident, it is natural to review and modify alerts --¬†adding new ones or modifying thresholds each time a new type of issue is encountered. The challenge is that as long as new types of problems continue to occur, this is a never ending game of catch up.\&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B70022JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/ML%2520driven%2520alert%2520rules.png%3Fwidth%3D262%26name%3DML%2520driven%2520alert%2520rules.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B70022JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/ML%2520driven%2520alert%2520rules.png%3Fwidth%3D262%26name%3DML%2520driven%2520alert%2520rules.png" alt="ML driven alert rules"&gt;&lt;/a&gt;\&lt;br&gt;
Machine learning can reduce this burden considerably. The simplest approach is to configure a set of¬†"signals" which will trigger ML driven reports. Signals could of course be real incidents, but they could also be symptom alerts. For example, many teams watch for the overall error frequency -- if it spikes relative to recent trends, you know something is wrong, but not necessarily what. Well, you can use the same simple alert as a trigger for machine learning to scan the logs and metrics for that deployment around the time of the alert -- identifying unusual events/sequences and anomalous metrics that could explain the spike in errors. Even better, machine learning can fingerprint these sequences -- so when a particularly noteworthy root cause is detected, you already have a pre-built alert rule you can simply connect to an alert channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-proactively-catch-silent-bugs-and-inform-developers-early-in-the-cycle"&gt;
  &lt;/a&gt;
  3. Proactively catch silent bugs and inform developers early in the cycle
&lt;/h2&gt;

&lt;p&gt;In the not too distant past, new releases were tested extensively before deploying to production. This allowed for deliberately constructed test plans, stress tests and an opportunity to catch bugs that might&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VotKfmXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/proactive%2520detection%2520of%2520incidents.png%3Fwidth%3D234%26name%3Dproactive%2520detection%2520of%2520incidents.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VotKfmXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/proactive%2520detection%2520of%2520incidents.png%3Fwidth%3D234%26name%3Dproactive%2520detection%2520of%2520incidents.png" alt="proactive detection of incidents"&gt;&lt;/a&gt;¬†have potentially nasty downstream consequences. Today, deployment cycles are much faster, drastically shrinking the time to do any of the above. There is now a trend towards "test in production". Although many teams do use staging environments and approaches like chaos tools, it's more likely that subtle bugs will only surface in production when they result in user complaints or visible symptoms.&lt;/p&gt;

&lt;p&gt;By using ML to surface new or unusual errors, event patterns and patterns in the metrics, machine learning can quickly become a developer's best friend in proactively surfacing subtle bugs early, before they impact users. For instance, using our own ML technology, the Zebrium engineering team recently caught a bug related to a malformed middleware SQL query, that under certain conditions prevented users from completing their intended workflow. Another example involved an exception that was handled in a try/catch block which emitted an error log message but was otherwise silently breaking outbound webhook notifications. Our developers have come to appreciate the proactive detection from our internal Zebrium service to catch these kinds of bugs early, before they can do real damage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As more users rely on software applications, the pressure to shrink MTTR and the stress of troubleshooting incidents under pressure all grow proportionally. Over the last decade a rich set of observability tools have emerged to help detect problems easily, but troubleshooting has remained very manual, driven by the instincts and experience of the engineer on call. New approaches that apply machine learning to tackle this problem can help by¬†&lt;a href="https://www.zebrium.com/blog/youve-nailed-incident-detection-what-about-incident-resolution"&gt;drastically reducing MTTR&lt;/a&gt;, catching new bugs early, and reducing the manual effort involved in tasks like creating RCA reports and maintaining alert rules.&lt;/p&gt;

&lt;p&gt;If you're interested in using ML as part of your incident management lifecycle, please &lt;a href="https://www.zebrium.com/"&gt;visit Zebrium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Posted with permission of the Author &lt;a href="https://www.zebrium.com/blog/author/ajay-singh"&gt;Ajay Singh&lt;/a&gt; @ Zebrium&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Presenting TypeIt: A VSCode extension for content creators</title>
      <author>Mauro Garcia</author>
      <pubDate>Mon, 12 Apr 2021 16:43:41 +0000</pubDate>
      <link>https://dev.to/mauro_codes/presenting-typeit-a-vscode-extension-for-content-creators-60d</link>
      <guid>https://dev.to/mauro_codes/presenting-typeit-a-vscode-extension-for-content-creators-60d</guid>
      <description>&lt;p&gt;Today I wanted to share with you a side-project I've been working on with &lt;a class="comment-mentioned-user" href="https://dev.to/paulasantamaria"&gt;@paulasantamaria&lt;/a&gt;
. &lt;/p&gt;

&lt;p&gt;It's called &lt;strong&gt;TypeIt: Typing animations for content creators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TypeIt is a VSCode extension that retypes your code so you can record it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-typeit"&gt;
  &lt;/a&gt;
  Why TypeIt?
&lt;/h1&gt;

&lt;p&gt;Sometimes we just want to write code at our own pace, test it, and, once we are comfortable, share it online as code snippets or tutorials. We may not want to memorize and write the code all over again just to record it. That's when TypeIt comes in. Use it to automatically retype the code you want to share.&lt;/p&gt;

&lt;p&gt;Plus, you can choose different modes, adjust the typing speed and even retype multiple documents in parallel!&lt;/p&gt;

&lt;p&gt;This video demonstrates how TypeIt can be used to create and share content:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1_GBQnNuZ5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More info
&lt;/h1&gt;

&lt;p&gt;If you want to learn more about it, you can visit our &lt;a href="https://typeit.uppernauts.com/"&gt;website&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#we-would-love-to-hear-your-thoughts"&gt;
  &lt;/a&gt;
  We would love to hear your thoughts üí¨
&lt;/h1&gt;

&lt;p&gt;What do you think about TypeIt?&lt;br&gt;
Would you try it?&lt;br&gt;
Let us know if you have any questions or feedback in the comments belowüëá&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>vscode</category>
      <category>plugins</category>
      <category>tools</category>
    </item>
    <item>
      <title>Comparing Flask and Django</title>
      <author>Sophia Iroegbu</author>
      <pubDate>Mon, 12 Apr 2021 16:27:36 +0000</pubDate>
      <link>https://dev.to/sophyia/comparing-flask-and-django-4lao</link>
      <guid>https://dev.to/sophyia/comparing-flask-and-django-4lao</guid>
      <description>&lt;p&gt;Python is one of the most widely used programming languages, thanks to its clean, readable code and adaptability. It is also in high demand due to its wide variety of web frameworks, which can quickly transform your project from a mere concept to an amazing reality. There are numerous frameworks, but only two stand out: &lt;strong&gt;Flask&lt;/strong&gt; and &lt;strong&gt;Django&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now let's compare Flask and Django based on some of the core framework's features:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-database"&gt;
  &lt;/a&gt;
  The Database:
&lt;/h1&gt;

&lt;p&gt;Django has a robust Object Relational Mapping (ORM) framework that supports a variety of relational databases such as SQLite, PostgreSQL, MySQL, and Oracle, as well as managing and generating database migrations.&lt;br&gt;
Flask makes no promises on how data is stored, but there are several libraries and extensions available to assist with this: Flask-SQLAlchemy, Flask-Alembic, Flask-Peewee, and so on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#administrator"&gt;
  &lt;/a&gt;
  Administrator:
&lt;/h1&gt;

&lt;p&gt;Django has a powerful admin screen, which is a desktop application with a user interface for handling data based on the templates. Django excels in this field as well. It enables you to easily execute &lt;em&gt;CRUD operations&lt;/em&gt; on your templates when building out an application without writing any additional code. &lt;br&gt;
Again, Flask does not come with anything like this by itself, but the Flask-Admin extension has the same functionality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#views-and-routing"&gt;
  &lt;/a&gt;
  Views and Routing:
&lt;/h1&gt;

&lt;p&gt;Both frameworks support mapping URLs to views and feature and class-based views, but Django fits a URL pattern, the request object, which contains the HTTP request content.&lt;br&gt;
Flask makes use of Werkzeug to provide URL routing and request/response handling. It requires that the item in Flask be global in order for it to have easy access to it (as long as you import it).&lt;br&gt;
URLs are typically specified alongside the view (via a decorator), but they can be broken out into a centralized position, similar to the Django pattern.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security:
&lt;/h1&gt;

&lt;p&gt;Django has built-in defense against a variety of standard attack vectors such as CSRF, XSS, and SQL injection. This security features help to protect the code from bugs. In addition, the Django development team proactively discloses and promptly patches identified security bugs. Flask, on the other hand, has a much narrower code base, which means there is less surface area to strike. However, when security flaws in your hand-crafted app code emerge, you will need to correct and patch them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;It isn't so much about the right structures as it is about personal preference. Simply enjoy yourself when coding.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>flask</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Announcing "@mswjs/data"‚Äîdata modeling library for testing JavaScript applications</title>
      <author>Artem Zakharchenko</author>
      <pubDate>Mon, 12 Apr 2021 15:59:45 +0000</pubDate>
      <link>https://dev.to/kettanaito/announcing-mswjs-data-data-modeling-library-for-testing-javascript-applications-3290</link>
      <guid>https://dev.to/kettanaito/announcing-mswjs-data-data-modeling-library-for-testing-javascript-applications-3290</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It's been more than a year since &lt;a href="https://mswjs.io"&gt;Mock Service Worker&lt;/a&gt; (MSW) began to appear in people's &lt;code&gt;package.json&lt;/code&gt;, improving the way you write tests, iterate on features, and debug API-related issues. We are incredibly thankful for everybody who supported us and gave the library a chance in their projects. That allowed us to gather a ton of feedback based on the usage scenarios you face every day. It is with that feedback that we can move the project forward to ease your testing and development workflow even more. And it is with that feedback that we are able to make this announcement.&lt;/p&gt;

&lt;p&gt;MSW was deliberately designed with only the essentials of API mocking in mind: interception of requests and response mocking. A huge focus was made on leveraging Service Worker API to enable a one-of-a-kind experience and support the same request handlers across different environments. While some alternative libraries come with built-in assertions or data-modeling options, our team has chosen a horizontal way to scale the project: distribute complimentary, on-demand libraries instead of stuffing dozens of functions and methods into a single package.&lt;/p&gt;

&lt;p&gt;Some of the most popular questions developers have when starting with MSW are related to data. You immediately notice how the library is agnostic to how you create and update data in your handlers. You may use a plain array or &lt;code&gt;Map&lt;/code&gt; to manage resources. Perhaps, you may even design a custom database abstraction that manages those resources in a more standardized way.&lt;/p&gt;

&lt;p&gt;No matter what data-related setup you end up with, it's there to answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to describe data resources?&lt;/li&gt;
&lt;li&gt;How to implement CRUD operations on data?&lt;/li&gt;
&lt;li&gt;How to persist the changes made to the data?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we are proud to announce the &lt;a href="https://github.com/mswjs/data"&gt;Data library&lt;/a&gt;‚Äîa standalone package to model and query data in your tests and beyond. Although the project is at the early stage of development and doesn't solve every problem right away, letting you try it out and gather your feedback is crucial for us to refine and shape the future experience.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/data"&gt;
        data
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Data modeling and relation library for testing JavaScript applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Without further a due, let's talk about what's to become the recommended way to work with data in Mock Service Worker.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#data-modeling"&gt;
  &lt;/a&gt;
  Data modeling
&lt;/h2&gt;

&lt;p&gt;First, let's get acquainted with the two main terms that the Data library operates with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Model&lt;/em&gt;‚Äîdescription of the data. Think of it as a blueprint that describes what properties the data has.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Entity&lt;/em&gt;‚Äîan instance of a particular model. This is the exact data that implements its model description.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When working with Data, you define models and relationships between them, which, effectively, result in a virtual database being created.&lt;/p&gt;

&lt;p&gt;Install the package into your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @mswjs/data 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, let's create a new "user" model:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Models are defined by calling the &lt;code&gt;factory&lt;/code&gt; function and providing it with the object where keys represent &lt;em&gt;model names&lt;/em&gt;, and values stand for &lt;em&gt;model definitions&lt;/em&gt;. Each property in the model definition has an initializer‚Äîa function that seeds a value and infers its type.&lt;/p&gt;

&lt;p&gt;Notice how the &lt;code&gt;id&lt;/code&gt; property equals &lt;code&gt;primaryKey&lt;/code&gt;. Each model &lt;em&gt;must have a primary key&lt;/em&gt;, which acts as a unique ID in a conventional database table. Data exposes the &lt;code&gt;primaryKey&lt;/code&gt; function that you should use to mark a certain property as the model's primary key.&lt;/p&gt;

&lt;p&gt;In the example above, we're using plain functions that return static data. This means that each time a user is created, it will have &lt;code&gt;firstName: "John"&lt;/code&gt; and &lt;code&gt;age: 18&lt;/code&gt;. While this is a good foundation to build upon, the static nature of values may limit your data scenarios. Consider using tools like &lt;a href="https://github.com/marak/Faker.js/"&gt;Faker&lt;/a&gt; to define models with randomly generated realistic data.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;faker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a user model with a random UUID and first name.&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can define multiple models and relationships between them within the same &lt;code&gt;factory&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oneOf&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;faker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// "book.publisher" is a relational property&lt;/span&gt;
    &lt;span class="c1"&gt;// that references an entity of the "publisher" model.&lt;/span&gt;
    &lt;span class="na"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;oneOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;publisher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Learn more about &lt;a href="https://github.com/mswjs/data"&gt;defining model relationships&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#seeding"&gt;
  &lt;/a&gt;
  Seeding
&lt;/h2&gt;

&lt;p&gt;Once the models are defined, create an entity of a particular model by calling the &lt;code&gt;.create()&lt;/code&gt; method on it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Creating an entity without any arguments will fill its properties using the value initializers you've specified in the model definition.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.create()&lt;/code&gt; method accepts an optional argument that stands for the initial values of the entity. For example, if we wish to create a user with a fixed "firstName" value, we can provide that value in the initial values object:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Uses an exact value for the "firstName" property,&lt;/span&gt;
  &lt;span class="c1"&gt;// while seeding the "id" based on its getter.&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#querying-client"&gt;
  &lt;/a&gt;
  Querying client
&lt;/h2&gt;

&lt;p&gt;Apart from the data modeling functionality, this library provides a &lt;em&gt;querying client&lt;/em&gt; that allows you to find, modify, and delete entities on runtime. The querying client brings Data to life, as it enables dynamic scenarios against the generated data.&lt;/p&gt;

&lt;p&gt;Each model supports the following querying methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.findFirst()&lt;/code&gt;, finds the first entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.findMany()&lt;/code&gt;, finds multiple entities that match a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.count()&lt;/code&gt;, returns the number of entities for a model.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.update()&lt;/code&gt;, updates an entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.updateMany()&lt;/code&gt;, updates multiple entities that match a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.delete()&lt;/code&gt;, deletes an entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.deleteMany()&lt;/code&gt;, deletes multiple entities that match a query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most basic example of querying is finding an entity by its primary key. In our case, we can find a user by its "id" like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Find a user with the given "id" (primary key).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's focus on &lt;code&gt;which&lt;/code&gt; part of the query above. When querying entities, &lt;code&gt;which&lt;/code&gt; is a predicate object that describes the criteria against an entity. The structure of that predicate is the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;expectedValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[property]&lt;/code&gt;, a known property of the model. In the case of our "user" model, this can be "id" or "firstName".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[operator]&lt;/code&gt;, an operator function name that compares the actual and expected values of the referenced property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operators depend on the value type that's being queried. When querying a string (like we do with &lt;code&gt;which.id&lt;/code&gt;, where "id" is of the String type), operators like &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;notEquals&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, and others are available. When querying a number, you have access to the &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;lte&lt;/code&gt;, &lt;code&gt;between&lt;/code&gt;, etc. operators instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Querying methods are strongly typed, validating the known model properties and value-based operators on build time. Experiment with your models to learn about all the different options at your disposal!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a similar fashion, we can query multiple entities. Here's how we can get all the users that satisfy a certain age criteria:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Returns all users whose "user.age"&lt;/span&gt;
&lt;span class="c1"&gt;// is greater or equal 18.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Data supports &lt;a href="https://github.com/mswjs/data#cursor-based-pagination"&gt;cursor&lt;/a&gt; and &lt;a href="https://github.com/mswjs/data#offset-based-pagination"&gt;offset&lt;/a&gt; pagination to work with large data sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is much more functionality that Data provides, so don't hesitate to explore the library API. Refer to the &lt;a href="https://github.com/mswjs/data"&gt;documentation&lt;/a&gt; for API definition and usage examples.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#integration-with-mock-service-worker"&gt;
  &lt;/a&gt;
  Integration with Mock Service Worker
&lt;/h2&gt;

&lt;p&gt;Here's a gigantic cherry on top: you can turn any data model into &lt;a href="https://mswjs.io/docs/basics/request-handler"&gt;request handlers&lt;/a&gt; (both REST &lt;em&gt;and&lt;/em&gt; GraphQL) to encapsulate its operations, like creation and querying, under the respective API routes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-rest-api"&gt;
  &lt;/a&gt;
  Generating REST API
&lt;/h3&gt;

&lt;p&gt;Using our &lt;code&gt;db&lt;/code&gt; and its "user" model, we can turn it into a REST API "server" in a single command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/mocks/browser.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Import the "db" object.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Generate REST API request handlers&lt;/span&gt;
  &lt;span class="c1"&gt;// based on the "user" model.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Looks unfamiliar? Learn how to &lt;a href="https://mswjs.io/docs/getting-started/install"&gt;get started with Mock Service Worker&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Calling &lt;code&gt;.toHandlers()&lt;/code&gt; on a model generates CRUD routes for working with that model. In the example above, the following request handlers will be created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET /users/&lt;/code&gt;, returns all users in the database.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /users/:id&lt;/code&gt;, returns a user by their primary key (&lt;code&gt;id&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST /users&lt;/code&gt;, creates a new user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT /users/:id&lt;/code&gt;, updates an existing user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE /users/:id&lt;/code&gt;, deletes a user by their primary key.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how the model name is pluralized ("user*&lt;em&gt;s&lt;/em&gt;*") to reflect the proper semantics when working with the "user" resource.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the handlers established, you can create and query users in your application as you would do against an actual HTTP server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a new user in the database.&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The body is used as the initial entity values.&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Then, query the created user.&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explore this interactive sandbox to learn more about generating REST API handlers from your data models:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/data-rest-api-handlers-i91nv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-graphql-api"&gt;
  &lt;/a&gt;
  Generating GraphQL API
&lt;/h3&gt;

&lt;p&gt;A model can also generate GraphQL handlers:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This command generates the following GraphQL schema with its types based on your model:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQuery&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;updateUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;deleteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;deleteUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;All the generated GraphQL types and their names are based on your model name and properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With your model turned into request handlers, you can query its entities as you would usually do in GraphQL. Here's an example that uses Apollo to get a user entity by ID:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query GetUser {
    # Hey, it's the same query as in the ".findMany()" method!
    user(which: { id: { equals: "abc-123" } }) {
      firstName
      age
    }
  }
`&lt;/span&gt;

&lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_USER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explore the GraphQL example on Codesandbox:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/data-graphql-api-handlers-2xc4i"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#call-for-contributors"&gt;
  &lt;/a&gt;
  Call for Contributors!
&lt;/h2&gt;

&lt;p&gt;Data is a new library that has a long way to go and multiple areas to improve. For instance, these are some of the features we'd love to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-side persistence;&lt;/li&gt;
&lt;li&gt;Server-side rendering support;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.createMany()&lt;/code&gt; method to seed multiple entities at once, respecting their relations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to learn about data modeling or find this area fascinating, &lt;a href="https://github.com/mswjs/data/issues"&gt;&lt;strong&gt;join as a contributor&lt;/strong&gt;&lt;/a&gt; and shape the way developers would model their fixtures.&lt;/p&gt;

&lt;p&gt;You can also support the project financially by &lt;a href="https://opencollective.com/mswjs"&gt;&lt;strong&gt;sponsoring it on Open Collective&lt;/strong&gt;&lt;/a&gt;, allowing the team to work on bug fixes and stunning new features. Your support will not go unnoticed!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#resources-amp-links"&gt;
  &lt;/a&gt;
  Resources &amp;amp; links
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/data"&gt;
        data
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Data modeling and relation library for testing JavaScript applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mswjs/msw"&gt;Mock Service Worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ApiMocking"&gt;Follow on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Create own Blog app in Django [Tutorial]</title>
      <author>CodeSnail üêå</author>
      <pubDate>Mon, 12 Apr 2021 15:57:24 +0000</pubDate>
      <link>https://dev.to/soniarpit/create-own-blog-app-in-django-tutorial-4bb2</link>
      <guid>https://dev.to/soniarpit/create-own-blog-app-in-django-tutorial-4bb2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#blog-features"&gt;
  &lt;/a&gt;
  Blog Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CKEditor in Admin&lt;/li&gt;
&lt;li&gt;Threaded Comment system&lt;/li&gt;
&lt;li&gt;Tagging functionality&lt;/li&gt;
&lt;li&gt;Retrieving similar posts&lt;/li&gt;
&lt;li&gt;Search functionality&lt;/li&gt;
&lt;li&gt;Auto Sitemap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So Let's start&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-environment-setup"&gt;
  &lt;/a&gt;
  Virtual Environment Setup
&lt;/h2&gt;

&lt;p&gt;Virtualenv is a tool used to create an isolated Python environment. This environment has its own installation directories that doesn‚Äôt share libraries with other virtualenv environments (and optionally doesn‚Äôt access the globally installed libraries either).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;to install virtual environment just type following command in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before making a virtual environment we make project directory. Inside it, we make a virtual environment. Type following command in terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir awwblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside awwblog directory we setup virtual environment. Type following command in terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd awwblog/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First find your python installation path of particular version,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;which python3.9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use python3.9 here. By above command you get the path of the python3.9 (of any version)&lt;/p&gt;

&lt;p&gt;I want python3.9 in my virtual environment. So let‚Äôs create virtual environment.&lt;/p&gt;

&lt;p&gt;Using virtualenv command we created env_awwblog virtual environment. Every python installation goes inside that. But before installing python stuff we need to activate the virtual environment.&lt;/p&gt;

&lt;p&gt;Type following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source env_awwblog/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No, we are ready to install Django inside virtual environment. So let‚Äôs go‚Ä¶&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-django"&gt;
  &lt;/a&gt;
  Installing Django
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install Django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Django is installed in our environment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-awwblog-project"&gt;
  &lt;/a&gt;
  Creating awwblog Project
&lt;/h2&gt;

&lt;p&gt;Everything going fine right. Now we start the project using django-admin command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject awwblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command should have created a awwblog directory. Use the command cd awwblog to go into the directory.&lt;/p&gt;

&lt;p&gt;The command should have created a awwblog directory. Use the command cd awwblog to go into the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just hit the url &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; in browser.&lt;br&gt;
Now you can see this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZI1Y0J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-7-1024x529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZI1Y0J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-7-1024x529.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see this in your browser, congratulation!! your Django installation is done successfully. Now we create an app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-blog-app"&gt;
  &lt;/a&gt;
  Creating blog App
&lt;/h2&gt;

&lt;p&gt;Now let‚Äôs create your first Django application. You will create a blog application from scratch. From the project‚Äôs root directory, run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py startapp blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open awwblog directory in your favorite code editor. I am using VS code. Below is the structure of how our project file structure looks like after setting up everything,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WfQ7mPVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WfQ7mPVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now open settings.py in the awwblog directory. The first thing you need to do is to add the created app ‚Äúblog‚Äù in the INSTALLED_APPS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This holds the Django apps you‚Äôll be using in the Django project.&lt;/p&gt;

&lt;p&gt;That‚Äôs it for this article. In next tutorial we will build post modal to store blog posts.&lt;/p&gt;

&lt;p&gt;Hope you like it. Please share this tutorial with your friends.&lt;/p&gt;

&lt;p&gt;Next: &lt;a href="https://www.codesnail.com/designing-the-blog-data-schema-django-blog-2/"&gt;Next: Designing the blog data schema ‚Äì Django Blog #2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>django</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Prevent others sending emails using your domain name</title>
      <author>XCS</author>
      <pubDate>Mon, 12 Apr 2021 15:49:44 +0000</pubDate>
      <link>https://dev.to/xcs/prevent-others-sending-emails-using-your-domain-name-9en</link>
      <guid>https://dev.to/xcs/prevent-others-sending-emails-using-your-domain-name-9en</guid>
      <description>&lt;h1&gt;
  &lt;a href="#prevent-others-sending-emails-using-your-domain-name"&gt;
  &lt;/a&gt;
  Prevent others sending emails using your domain name
&lt;/h1&gt;

&lt;p&gt;Yesterday a user contacted me on &lt;a href="https://twitter.com/XCSme"&gt;Twitter&lt;/a&gt; saying that she has received a scam email sent from an email address originating from my domain, &lt;a href="https://www.usertrack.net"&gt;usertrack.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might know that anyone can set &lt;strong&gt;any address&lt;/strong&gt; in the "&lt;strong&gt;from&lt;/strong&gt;" field when sending an email. I thought there was nothing I could do about it, but upon looking deeper into it I realized that some of my email settings were wrong, which might allow attackers to send &lt;a href="https://en.wikipedia.org/wiki/Spoofing_attack"&gt;spoofed&lt;/a&gt; emails on my behalf.&lt;/p&gt;

&lt;p&gt;I did have &lt;strong&gt;DMARC&lt;/strong&gt; setup, but my &lt;strong&gt;SPF&lt;/strong&gt; and &lt;strong&gt;DKIM&lt;/strong&gt; records were invalid.&lt;/p&gt;

&lt;p&gt;After looking into it, I realized that there's a lot more to learn about it than I thought, so here's a summary of what I learned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-you-do-correctly-setup-dmarc"&gt;
  &lt;/a&gt;
  What should you do? Correctly setup DMARC!
&lt;/h2&gt;

&lt;p&gt;There are some email security policies that can be set at the &lt;strong&gt;DNS&lt;/strong&gt; level. You can specifically allow only some IP addresses (usually your email server) or domains to send emails on your domain's behalf.&lt;/p&gt;

&lt;p&gt;I do think those policies are mostly just a suggestion that tells other email servers and email clients to mark an email as spam or not send it if the authentication checks are failing. That being said, most popular email clients should do a pretty good job of blocking emails that don't respect those policies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-those-email-policies-to-your-dns-txt-records"&gt;
  &lt;/a&gt;
  Add those email policies to your DNS TXT records
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;DMARC&lt;/strong&gt;, &lt;strong&gt;SPF&lt;/strong&gt; and &lt;strong&gt;DKIM&lt;/strong&gt; policies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dmarc"&gt;
  &lt;/a&gt;
  DMARC
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#domainbased-message-authentication-reporting-and-conformance"&gt;
  &lt;/a&gt;
  Domain-based Message Authentication, Reporting and Conformance
&lt;/h4&gt;

&lt;p&gt;Useful for receiving reports about who is sending emails using your domain name. This also enables you to specify what to do with the emails that are not originating from allowed sources (do nothing, flag them, or reject them).&lt;/p&gt;

&lt;p&gt;Here is what DNS record I had added:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TXT record&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Name: &lt;strong&gt;_dmarc&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;v=DMARC1; p=reject; rua=mailto:reports@usertrack.net;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;v = &lt;strong&gt;Version&lt;/strong&gt; - should be DMARC1&lt;/li&gt;
&lt;li&gt;p = &lt;strong&gt;Policy&lt;/strong&gt; - can be &lt;strong&gt;none&lt;/strong&gt;, &lt;strong&gt;quarantine&lt;/strong&gt; and &lt;strong&gt;reject&lt;/strong&gt;.
Reject is recommended once you know your other policies are setup correctly, so the spoofed email won't be delivered.&lt;/li&gt;
&lt;li&gt;rua = &lt;strong&gt;Reporting URI(s) for aggregate data&lt;/strong&gt; - Where to send reports that mail services generate about who tried to send emails from your domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#spf"&gt;
  &lt;/a&gt;
  SPF
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#sender-policy-framework"&gt;
  &lt;/a&gt;
  Sender Policy Framework
&lt;/h4&gt;

&lt;p&gt;With SPF you can say who is allowed to send emails using your domain name. This is the value I used:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TXT record&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Name: &lt;strong&gt;@&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;v=spf1 +mx +ip4:123.456.78.19 +include:websitewelcome.com +include:servers.mcsv.net -all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;v&lt;/strong&gt; = Version - should be spf1&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+mx&lt;/strong&gt; = Allow emails for all domains mentioned in the MX records of this domain&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+ip4:123.456.78.19&lt;/strong&gt; = Allow emails sent from this IP address (this was the address of my mail server, hosted on HostGator)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+include:websitewelcome.com&lt;/strong&gt; = Allow emails sent from this domain (it's the mail server domain of HostGator)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+include:servers.mcsv.net&lt;/strong&gt; = MailChimp, I use them to send newsletters from &lt;a href="mailto:someemail@usertrack.net"&gt;someemail@usertrack.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-all&lt;/strong&gt; = If none of the previous rules are met, deny all other emails.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All those rules are tested left to right, and &lt;strong&gt;"+"&lt;/strong&gt; means allow, &lt;strong&gt;"-"&lt;/strong&gt; means reject and there is also &lt;strong&gt;"~"&lt;/strong&gt; which is like a soft reject (maybe mark as spam or something like that).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dkim"&gt;
  &lt;/a&gt;
  DKIM
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#domainkeys-identified-mail"&gt;
  &lt;/a&gt;
  DomainKeys Identified Mail
&lt;/h4&gt;

&lt;p&gt;Using DKIM all emails sent will be digitally signed using a private key and the DNS record provides a public key to test if the emails are correctly signed. If there is a missmatch, the DKIM policy will fail, and the email won't be sent or marked as spam.&lt;/p&gt;

&lt;p&gt;My &lt;strong&gt;DKIM&lt;/strong&gt; record looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TXT record&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Name: &lt;strong&gt;default._domainkey&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0B...very long key...AB\;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;v&lt;/strong&gt; = Version - should be DKIM1&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;k&lt;/strong&gt; = Key type - encryption algorithm used&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;p&lt;/strong&gt; = Public key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got my DKIM TXT record value from &lt;strong&gt;Hostgator -&amp;gt; cPanel -&amp;gt; Email Authentication&lt;/strong&gt; (my email server provider), but I had some issues making it valid as their TXT record had a limited number of characters and showed my public key (p=...) as two distinct strings that I had to manually remove the quotes around and merge (concatenate) them together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-tools-that-i-used"&gt;
  &lt;/a&gt;
  Some tools that I used
&lt;/h2&gt;

&lt;p&gt;To test if the policies are correct, the tools I found more useful are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MXToolBox - Email Deliverability&lt;/strong&gt; - &lt;a href="https://mxtoolbox.com/deliverability" rel="noopener"&gt;mxtoolbox.com/deliverability&lt;/a&gt;
This allows you to test if your DMARC policies are correct&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MailTester - SPF and DKIM Checker&lt;/strong&gt; - &lt;a href="https://www.mail-tester.com/spf-dkim-check" rel="noopener"&gt;mail-tester.com/spf-dkim-check&lt;/a&gt;
Quickly test if your SPF and DKIM records are valid strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dr0jkK0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QlvusIn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dr0jkK0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QlvusIn.png" alt="dmarc dkim spf policies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that by fixing my email authentication on my domains it will be a lot less likely for phishing emails to be sent using my domain names.&lt;/p&gt;

&lt;p&gt;I hope you found this post useful. I tried to make this as concise as possible and provide examples, as I spent several hours trying to understand all those policies and how to set them up, having a hard time finding a TL:DR; on how to quickly setting up email authentication.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 VSCode Extensions as a Web Developer</title>
      <author>pawanbhayde</author>
      <pubDate>Mon, 12 Apr 2021 15:40:47 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/top-10-vscode-extensions-as-a-web-developer-35bd</link>
      <guid>https://dev.to/pawanbhayde/top-10-vscode-extensions-as-a-web-developer-35bd</guid>
      <description>&lt;p&gt;VSCode or Visual Studio Code is the most popular editor for web development in 2020. One of VSCode's most popular features is its extensions. Every month, people from around the world build open-source extensions to help with the VSCode experience. I will show you my favourite 10 VSCode extensions for web development.&lt;/p&gt;

&lt;p&gt;Installing VSCode and VSCode Extensions&lt;br&gt;
In order to use VSCode's extensions, you need to download it. You can download it here.&lt;/p&gt;

&lt;p&gt;To install extensions click on the extension's icon (shown below) and type in the extension. Once found, click install to install the extension to VSCode.&lt;/p&gt;

&lt;p&gt;1: Prettier&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_uhPJjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19835yw9691dmbub9xvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_uhPJjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19835yw9691dmbub9xvn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here it is. My favourite VSCode extension for web development. Prettier is a lifesaver when it comes to formatting and productivity. Prettier formats your files on a save once you configure it in your settings. Instead of spending hours a day making your code look clean, use Prettier. This extension is by far the most popular on the list with over 8,750,000 downloads at the time of writing this article. This is why Prettier is my favourite VSCode extension for web development. &lt;/p&gt;

&lt;p&gt;2: Auto Rename Tag&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRQKJLhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6a85pelqyopj54h59a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRQKJLhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6a85pelqyopj54h59a.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Auto rename tag is an extension which changes both tags when one is changed (example above). Once again, I love this extension because of its JSX support. This extension is one which will improve your productivity noticeably.&lt;/p&gt;

&lt;p&gt;3: Git Lens&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_FWfw2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he99ntwxdx220e57otif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_FWfw2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he99ntwxdx220e57otif.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Git lens, git with superpowers. This extension is the best one for git and GitHub. Know who contributed each line, seamlessly navigate and explore git repositories, and perform powerful comparisons, and so much more. This is a must-have if you work with git and GitHub.&lt;/p&gt;

&lt;p&gt;4: Live Server&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zAciyw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f9g2hgvy4xmo032oo91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zAciyw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f9g2hgvy4xmo032oo91.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This is the easiest way to get a server up and running in seconds. On a click of a button, your site is up and running locally. The benefits of using this instead of putting your index.html file on Google is that every time you save your file, the changes are directly implemented in front of your eyes (no reloading necessary).&lt;/p&gt;

&lt;p&gt;5: HTML Snippets&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcIz5JF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rqwfe2tuh69ztjtlumd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcIz5JF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rqwfe2tuh69ztjtlumd.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension allows you to type something like div.container and get &lt;/p&gt;. This extension allows you to write HTML super quickly. The main reason why I like this extension so much is its JSX support. I'm a React dev and this makes me much more productive.

&lt;p&gt;6: Material Theme &amp;amp; Material Icon Theme&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7TKi_Bh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m13jhcdppy5g2kam88qz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TKi_Bh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m13jhcdppy5g2kam88qz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension gives you amazing icons for your files and a wonderful theme. My favourite theme in Material theme is the palenight theme (that's a lot of themes). These two extensions our my favourite when it comes to design/themes in VSCode.&lt;/p&gt;

&lt;p&gt;7: Bracket Pair Colorizer 2&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aoN8hszi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m3cfh9zyrync14jrpfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aoN8hszi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m3cfh9zyrync14jrpfl.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension gives the same colour to matching brackets and parenthesis. This extension prevents you from taking too long looking for the correct closing bracket. This is a must-have if you are using a language which uses brackets and not indentation (sorry python users).&lt;/p&gt;

&lt;p&gt;8: Import Cost&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hiVBs4Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn9c2ffjlawkzg8jacpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiVBs4Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn9c2ffjlawkzg8jacpy.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This extension provides the import cost (as the name suggests) next to every module/package you import. It's very important to know if you are optimizing your imports and dependencies so that you can ensure the fastest and most efficient experience for your users. This extension works well with ES6 import and ES5 and below require syntax.&lt;/p&gt;

&lt;p&gt;9: Error Lens&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpWOAJyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjn6djqhg3knam19gwg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpWOAJyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjn6djqhg3knam19gwg2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Error Lens is an extension which shows your errors on the lines where they are present (example above). This extension is a lifesaver when looking for the small bug which crashes your whole application. Additionally, this extension is extremely customizable which enables you to change things like colours, fonts, font size, excluding some errors, and much more.&lt;/p&gt;

&lt;p&gt;10: Better Comments&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDtmp2kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2s41mjae7za0ux07693.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDtmp2kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2s41mjae7za0ux07693.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Better comments is an extension which will help improve your code by commenting by alerts, information, TODOs, questions, and more. This is just an overall great extension to make your code more readable and have comments be sorted neatly.&lt;/p&gt;

&lt;p&gt;Closing&lt;br&gt;
I hope you got some new VSCode extensions to download! Let me know if I missed out on any in the comments.&lt;/p&gt;

&lt;p&gt;Pawan&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>webpack</category>
    </item>
    <item>
      <title>What if you start your own dev blog?</title>
      <author>Andrzej Krzywda</author>
      <pubDate>Mon, 12 Apr 2021 15:38:44 +0000</pubDate>
      <link>https://dev.to/andrzejkrzywda/what-if-you-start-your-own-dev-blog-3g74</link>
      <guid>https://dev.to/andrzejkrzywda/what-if-you-start-your-own-dev-blog-3g74</guid>
      <description>&lt;p&gt;Hello, my name is Andrzej and I think the world needs your own dev blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But WHY the world needs my dev blog?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You're reading this post on the dev.to platform. It's probably not the first time you're benefiting (hopefully!) from the fact that someone shared their content with the world.&lt;/p&gt;

&lt;p&gt;There was nothing and someone made the decision to share what they know. Now you get the chance to read it.&lt;/p&gt;

&lt;p&gt;Every time you google for that weird error in Ruby/Python library you end on someone's explanation. They helped you without even knowing that you'd need it one day. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Andrzej, I'm not an expert - nobody needs my blogposts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yeah, I get it. I was there, for many years. It's easy for me to say to people they could blog. My confidence after 20 years in IT may be higher than someone's with 6 months of experience.&lt;/p&gt;

&lt;p&gt;But guess what - only today, I googled for 4 different problems. You know who helped me? People who are in the Dev world only for months. I still struggle with some JavaScript/GraphQL quirks. This is a hot stack nowadays often used by juniors too. Some of them share what they found on their blog. Thanks to that I was able to solve my problem with GraphQL. Someone completely fresh helped me. &lt;/p&gt;

&lt;p&gt;Are they experts? Nope.&lt;/p&gt;

&lt;p&gt;What if we look at blogging this way:&lt;/p&gt;

&lt;p&gt;Blogging is not about sharing your expertise.&lt;br&gt;
Blogging is about documenting what you just learnt.&lt;/p&gt;

&lt;p&gt;Document, don't create.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Andrzej, I do boring tasks, there's nothing worth documenting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our perspective on what we do is always biased. We do similar things everyday. How come someone would find it interesting?&lt;/p&gt;

&lt;p&gt;Let's say, your job is fairly easy React coding. You receive some requirements how the component should work and you code it according to the company code standards. You use redux, you know how to turn a wireframe into a set of React components. You know how to grab the data from the API using GraphQL. Your team prefers TypeScript so you use TypeScript.&lt;/p&gt;

&lt;p&gt;Jane is working on backend APIs on Rails apps. Mostly boring, CRUDish stuff to expose some data to the mobile/web frontend apps. Every day the same. Take care of caching, take care of the right serialization methods. Sometimes some small refactoring to DRY the code.&lt;/p&gt;

&lt;p&gt;For you the React code is boring. For Jane, it's the boring Rails API.&lt;/p&gt;

&lt;p&gt;But then one day, you get a chance to work on the backend too. Your backend dev got sick and you need to add a new GET API call. You never needed to know what is the backend. Now you know, it's Rails. You're new to Rails. So you start googling. You find yourself on Jane's blog. She wrote about all the boring stuff she does every day. She finds it boring but she knows for others it may sound difficult. So she shares. Now you benefit from it. You're grateful to Jane.&lt;/p&gt;

&lt;p&gt;Now imagine that Jane needs to switch to the React code too. For her React is a foreign world. She speaks JSON not JSX. She speaks Ruby not TypeScript. Even the idea of types is new to her. You see where I'm going?&lt;/p&gt;

&lt;p&gt;Your boring job is fascinating and new to someone else.&lt;/p&gt;

&lt;p&gt;The grass is always greener on the other side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Andrzej, you're right, my blogposts can help people - but I don't have time for blogging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How much do you think is required for one blogpost? &lt;/p&gt;

&lt;p&gt;When I asked some programmers, they said they would need probably full 2 days to write a great blogpost.&lt;/p&gt;

&lt;p&gt;I can see why they think this way.&lt;/p&gt;

&lt;p&gt;That was my thinking too. &lt;/p&gt;

&lt;p&gt;Until I met Michael. &lt;/p&gt;

&lt;p&gt;Michael and I were working at the same company. We practiced pairing so I got to work with Michael very often. In the morning session of pairing we would do some work. Later, just before the lunch break - Michael sat down to his laptop and started typing something quickly. Within the time, which I used to check social media he was up with a new blogpost. &lt;/p&gt;

&lt;p&gt;In 10 minutes a new blogpost!&lt;/p&gt;

&lt;p&gt;That has changed all my perception around blogging.&lt;/p&gt;

&lt;p&gt;Michael has built his brand in the Python community. He's now a frequent speaker at Python conferences, he wrote books. I believe this was mainly thanks to his blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But I still can't imagine how you could write a blogpost in 10 minutes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not all kinds of blogposts can be written in 10 minutes. But here's one of my example blogging sessions:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BBqGwfJj8tk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Great for Michael, but I don't care about a personal brand, I just want to write code. I'm not paid for blogging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Actually, when it comes to money. There are many companies which are more than happy to pay for the blogging time. &lt;/p&gt;

&lt;p&gt;You see, even if you don't care about your brand, you company does care about it. A good brand brings recognition, marketing, sales or especially in the dev world recruitment.&lt;/p&gt;

&lt;p&gt;Would you like to stay in the current company but work with great devs - help your company with a company technical blog. This will attract talent to your team!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'm still not convinced - I don't care about recruitment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How about simplifying your code reviews. Chances are that at your company you do pull requests. They need to be reviewed. Sometimes it's your job. &lt;/p&gt;

&lt;p&gt;Isn't that tedious to repeat the same arguments over and over? Let's say you're into small classes and you know why they're good. Somehow the team around you is almost like against you. They keep adding methods to existing classes, instead of creating new ones.&lt;/p&gt;

&lt;p&gt;You have a choice to nitpick it in every pull request listing the arguments. &lt;/p&gt;

&lt;p&gt;Or you can write that blogpost "This is why small classes are better" and just paste a link. &lt;/p&gt;

&lt;p&gt;Sounds like a time saver?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OK, Andrzej, you're good at convincing but I'm still not sure, what next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My bold promise is this:&lt;/p&gt;

&lt;p&gt;At the end of next week you can have your fully running dev blog with at least 5 blogposts, all reviewed by me or someone from my team. We will check your English and the flow. Sometimes we will also help with promotion.&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;p&gt;You have 2 options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register for the &lt;a href="https://blogconf.arkademy.dev"&gt;Arkademy Blog Conference&lt;/a&gt; which starts April 14th 2021 - Wednesday this week. There are 4 talks, all helping you become a dev blogger.&lt;/li&gt;
&lt;li&gt;If passive watching doesn't do miracles for you - you can join our 5-days-5-blogposts challenge (disclaimer: it's a paid action as part of our &lt;a href="http://arkademy.dev"&gt;Arkademy.dev&lt;/a&gt; community).&lt;/li&gt;
&lt;li&gt;Or there's the 3rd option - just stay a happy developer without a blog - nothing wrong with that if none of the arguments worked for you. You're still amazing and I wish you all the cleanest code possible, have a great day!&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>HAProxy Basic Login Authentication</title>
      <author>Vu Dao</author>
      <pubDate>Mon, 12 Apr 2021 15:19:25 +0000</pubDate>
      <link>https://dev.to/vumdao/haproxy-basic-login-authentication-48l2</link>
      <guid>https://dev.to/vumdao/haproxy-basic-login-authentication-48l2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#-in-haproxy-config-there-is-no-limit-to-the-number-of-httprequest-statements-per-instance-so-we-can-add-the-rules-to-request-basic-login-to-the-site-but-whitelist-specials-ips"&gt;
  &lt;/a&gt;
  - In haproxy config, there is no limit to the number of http-request statements per instance so we can add the rules to request basic login to the site but whitelist specials IPs
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#setup-haproxy-config-which-contains-basic-login-to-access-the-dashboard-and-allow-access-for-special-resource-ip"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;Setup HAProxy config which contains basic login to access the dashboard and allow access for special resource IP&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generate haproxy encrypted password
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;printf "thepassword" | mkpasswd --stdin --method=sha-256
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Modify &lt;a href="https://github.com/vumdao/haproxy-basic-auth/blob/master/haproxy.cfg"&gt;haproxy.cfg&lt;/a&gt; which allow access for requests from source &lt;code&gt;18.69.61.21&lt;/code&gt; but requires login for others
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;userlist AuthUsers
        user haproxyreport password $5$3VeorK1XxvgRseQ$VBkOPCY2enWZsas.C6X9Iif0FPHDknXXXXXXXXX

frontend fe-verify
        bind *:443 ssl crt /etc/certs

        acl haproxy_report hdr(host) haproxy-report.cloudopz.co

        http-request set-header X-Forwarded-Proto https if { ssl_fc }
        use_backend haproxy-report-backend if haproxy_report

# haproxy-report-backend
backend haproxy-report-backend
        acl authorized http_auth(AuthUsers)
        acl nagios src 18.69.61.21
        http-request allow if nagios
        http-request auth realm haproxyreport if !authorized
        server haproxy-report 127.0.0.1:1800
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;More about haproxy&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/how-to-set-http-request-header-in-haproxy-48bd"&gt;How To Set HTTP-Request Header In Haproxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/how-to-block-ip-addresses-in-haproxy-3f84"&gt;How To Block IP Addresses In HAProxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/haproxy-with-resolvers-in-case-of-aws-application-loadbalancer-d1n"&gt;HAProxy With Resolvers In Case Of AWS Application LoadBalancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/vumdao/use-goaccess-to-analyze-haproxy-logs-2m51"&gt;Use GoAccess To Analyze HAProxy Logs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.haproxy.org/download/2.4/doc/configuration.txt"&gt;Reference&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;üå† Blog&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/"&gt;Github&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://vumdao.hashnode.dev/"&gt;Web&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter üå†&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>cloudopz</category>
      <category>devops</category>
      <category>haproxy</category>
      <category>rest</category>
    </item>
    <item>
      <title>Creating a Haskell Application Using Reflex. Part 2</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 12 Apr 2021 15:13:09 +0000</pubDate>
      <link>https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-2-4jaa</link>
      <guid>https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-2-4jaa</guid>
      <description>&lt;p&gt;Author: Nikita Anisimov&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/typeable/creating-a-haskell-application-using-reflex-part-1-3kk3"&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there! Let‚Äôs continue with our series of tutorials devoted to the development of Reflex-based web applications.&lt;br&gt;
In this part, we‚Äôll add the ability to carry out various manipulations on the task list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4gEF0TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4gEF0TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#operations-on-todo"&gt;
  &lt;/a&gt;
  Operations on Todo
&lt;/h1&gt;

&lt;p&gt;Let‚Äôs make it possible to tick the tasks off as completed, as well as edit and delete them.&lt;br&gt;
First of all, we extend the &lt;code&gt;Todo&lt;/code&gt; type by adding the state. If the task is not completed, you can edit it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoDone&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;stateEdit&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;TodoState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we define the events occurring in the system. In our business projects, we used two approaches to this end. The first approach implies enumerating all possible events as individual constructors and implementing the handler function that will update the state depending on the occurred event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NewTodo&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;ToggleTodo&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;StartEditTodo&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;FinishEditTodo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;DeleteTodo&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantages of this approach include the ability to see what event specifically is taking place in the system and the update it‚Äôs carrying (all this is done by the &lt;code&gt;traceEvent&lt;/code&gt; function). Nevertheless, it‚Äôs not always possible to use the advantages, especially when the event carries a lot of data which is eventually hard to analyze. If you still need to see the values change, the events change &lt;code&gt;Dynamic&lt;/code&gt; in any case and you can also trace its value using the function &lt;code&gt;traceDyn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second approach is to use the update functions represented as the monoid &lt;a href="https://hackage.haskell.org/package/endo-0.3.0.1/docs/Data-Monoid-Endo.html#t:Endo"&gt;&lt;code&gt;Endo&lt;/code&gt;&lt;/a&gt; (roughly speaking, this is an abstraction of the functions whose argument  and result types coincide). The essence of this approach is that the value carried by the update event is the function that defines the update logic itself. In this case, we lose the ability to display the event value (as it turns out, this ability is not always useful), but the obvious advantage is that you don‚Äôt need to have access to the current status, create the type including all possible events (which can be quite numerous), or define an individual handler to update the state according to the received event.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will use the second approach.&lt;/p&gt;

&lt;p&gt;Let‚Äôs change the structure of the root widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;rootWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;rootWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;elClass&lt;/span&gt; &lt;span class="s"&gt;"h2"&lt;/span&gt; &lt;span class="s"&gt;"text-center mt-3"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Todos"&lt;/span&gt;
    &lt;span class="n"&gt;newTodoEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newTodoForm&lt;/span&gt;
    &lt;span class="n"&gt;rec&lt;/span&gt;
      &lt;span class="n"&gt;todosDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;foldDyn&lt;/span&gt; &lt;span class="n"&gt;appEndo&lt;/span&gt; &lt;span class="n"&gt;mempty&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newTodoEv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todoEv&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;delimiter&lt;/span&gt;
      &lt;span class="n"&gt;todoEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt;
    &lt;span class="n"&gt;blank&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we see here in the first place is the use of the &lt;code&gt;RecursiveDo&lt;/code&gt; extension (so you need to enable it). This is one of the most widespread practices in the development of &lt;code&gt;reflex&lt;/code&gt; applications because the situations when the event occurring at the bottom of the page affects the elements at the top of the page happen pretty often. In this case, the event &lt;code&gt;todoEv&lt;/code&gt; is used to define &lt;code&gt;todosDyn&lt;/code&gt;, while &lt;code&gt;todosDyn&lt;/code&gt;, in its turn, is the argument for the widget the &lt;code&gt;todoEv&lt;/code&gt; event comes from.&lt;/p&gt;

&lt;p&gt;After that, we see the update of the &lt;code&gt;foldDyn&lt;/code&gt; function parameters. Here the new function &lt;code&gt;leftmost&lt;/code&gt; is used. It accepts the events list and returns the event occurring at the moment when any of the events from the events list occurs. If two events from the list occur at a given moment, the leftmost event will be returned (hence the name). The task list is not a list now but &lt;a href="https://hackage.haskell.org/package/containers-0.6.4.1/docs/Data-IntMap.html"&gt;&lt;code&gt;IntMap&lt;/code&gt;&lt;/a&gt; (for the sake of simplicity, we‚Äôll use &lt;code&gt;type Todos = IntMap Todo&lt;/code&gt;).  In the first place, this is done to allow us to access an element directly by the identifier. &lt;code&gt;appEndo&lt;/code&gt; is used to update the list. If we defined each event as an individual constructor, we‚Äôd have also had to define the handler function, which would look approximately as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;updateTodo&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;
&lt;span class="n"&gt;updateTodo&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
  &lt;span class="kt"&gt;NewTodo&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;           &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;ToggleTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;          &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;StartEditTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;       &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;startEdit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;FinishEditTodo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
  &lt;span class="kt"&gt;DeleteTodo&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;          &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though it‚Äôs not necessary to define this function, we are using several other auxiliary functions here, which we‚Äôll need further, anyway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;startEdit&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;startEdit&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;toggleTodo&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;
&lt;span class="n"&gt;toggleTodo&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toggleState&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;
      &lt;span class="kt"&gt;TodoDone&lt;/span&gt;     &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
      &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TodoDone&lt;/span&gt;

&lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IntMap&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;fst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;maxViewWithKey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function adding a new element has also changed and now returns the event, not the task itself. Let‚Äôs also add the field cleanup after the new task is added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;newTodoForm&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;newTodoForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rowWrapper&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"input-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mdo&lt;/span&gt;
  &lt;span class="n"&gt;iEl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;inputElement&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;initialAttributes&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"form-control"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"placeholder"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"Todo"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inputElementConfig_setValue&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;btnEv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt;
    &lt;span class="n"&gt;addNewTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextKey&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newTodo&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
    &lt;span class="n"&gt;newTodoDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addNewTodo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;iEl&lt;/span&gt;
    &lt;span class="n"&gt;btnAttr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btnEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"input-group-append"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="n"&gt;btnAttr&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Add new entry"&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;btnEv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;btnEl&lt;/span&gt;
  &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tagPromptlyDyn&lt;/span&gt; &lt;span class="n"&gt;newTodoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;btnEl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function &lt;code&gt;todoListWidget&lt;/code&gt; now returns the task change. It has slightly changed, too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoListWidget&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rowWrapper&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;evs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;listWithKey&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromAscList&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;IM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toAscList&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todosDyn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;todoWidget&lt;/span&gt;
  &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;switchDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elems&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;evs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we notice is that the &lt;code&gt;simpleList&lt;/code&gt; function is replaced with &lt;code&gt;listWithKey&lt;/code&gt;. They differ from each other in the type of the first parameter ‚Äì the first function accepts the list &lt;code&gt;[]&lt;/code&gt;, the second one accepts &lt;code&gt;Map&lt;/code&gt;. The list will be sorted by the key. Here the returned value is important. Each task returns an event (deletion, change). In our specific case, the &lt;code&gt;listWithKey&lt;/code&gt; function will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;listWithKey&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: this function is a part of the &lt;code&gt;reflex&lt;/code&gt; package and has a more complex type. Here we show the specialized type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we are using the familiar &lt;code&gt;leftmost&lt;/code&gt; function for all &lt;code&gt;Map&lt;/code&gt; values. The expression &lt;code&gt;leftmost . elems &amp;lt;$&amp;gt; evs&lt;/code&gt; is of the following type: &lt;code&gt;Dynamic t (Event t TodoEvent)&lt;/code&gt;. We use function &lt;code&gt;switchDyn&lt;/code&gt; to retrieve the &lt;code&gt;Event&lt;/code&gt; from the &lt;code&gt;Dynamic&lt;/code&gt;. This function operates in the following way: it returns the event occurring when the internal event takes place. If the &lt;code&gt;Dynamic&lt;/code&gt; and &lt;code&gt;Event&lt;/code&gt; occur simultaneously, the previous &lt;code&gt;Event&lt;/code&gt; will be returned until the event in the &lt;code&gt;Dynamic&lt;/code&gt; is updated. The function &lt;code&gt;switchPromtlyDyn&lt;/code&gt; operates differently: if the &lt;code&gt;Dynamic&lt;/code&gt; update, occurrence of the event existing before the &lt;code&gt;Dynamic&lt;/code&gt; update, and triggering of the event now containing the &lt;code&gt;Dynamic&lt;/code&gt; take place simultaneously, the new event containing the &lt;code&gt;Dynamic&lt;/code&gt; will be returned. If this situation is not possible, it‚Äôs always better to use the &lt;code&gt;switchDyn&lt;/code&gt; because the &lt;code&gt;switchPromtlyDyn&lt;/code&gt; function is more complex, performs additional operations and, moreover, can create cycles.&lt;/p&gt;

&lt;p&gt;The task has acquired different states, which is why the function representing one task has also changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;todoEvEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ffor&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;TodoDone&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;todoEvEv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we‚Äôre using the new function &lt;code&gt;dyn&lt;/code&gt;. It has the following type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;dyn&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Adjustable&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NotReady&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;PostBuild&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It accepts the widget wrapped in the &lt;code&gt;Dynamic&lt;/code&gt; as the input parameter. This means that each update of the &lt;code&gt;Dynamic&lt;/code&gt; will be followed by the &lt;code&gt;DOM&lt;/code&gt; update. The output value is the event carrying the value the widget returns. In our case, the specialized type will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;dyn&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we come across an event nested into another event. Two functions from the &lt;code&gt;reflex&lt;/code&gt; package can perform operations on such type: &lt;code&gt;coincidence&lt;/code&gt; and &lt;code&gt;switchHold&lt;/code&gt;. The first function returns the event occurring only when the external and internal events occur simultaneously. That‚Äôs not our case. Function &lt;code&gt;switchHold&lt;/code&gt; is of the following type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Reflex&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;MonadHold&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function switches to the new event each time the external event occurs. The event passed as the first parameter will hold until the external event occurs for the first time. This is exactly the way we‚Äôre using this function in our example. No event can come from the list until the list is changed for the first time, so we use the &lt;code&gt;never&lt;/code&gt; event. As the name implies, this is a special event that never occurs.&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;todoWidget&lt;/code&gt; uses different widgets for different states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Done"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;editEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Edit"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Drop"&lt;/span&gt;
    &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;startEdit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;editEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;delEl&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="s"&gt;"del"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Undo"&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Drop"&lt;/span&gt;
    &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;leftmost&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&lt;/span&gt; &lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;delEl&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"d-flex border-bottom"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;updTodoDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 flex-grow-1 my-auto"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="n"&gt;editTodoForm&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;divClass&lt;/span&gt; &lt;span class="s"&gt;"p-2 btn-group"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;elAttr'&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"btn btn-outline-secondary"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"Finish edit"&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;updTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;finishEdit&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;
    &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
      &lt;span class="n"&gt;tagPromptlyDyn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updTodos&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;updTodoDyn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domEvent&lt;/span&gt; &lt;span class="kt"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;doneEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;editTodoForm&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;editTodoForm&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;editIEl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;inputElement&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;initialAttributes&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"form-control"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"placeholder"&lt;/span&gt; &lt;span class="o"&gt;=:&lt;/span&gt; &lt;span class="s"&gt;"Todo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inputElementConfig_initialValue&lt;/span&gt; &lt;span class="o"&gt;.~&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;
  &lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;editIEl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All functions used here were described before, so we won‚Äôt go into detail explaining each individual function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimization"&gt;
  &lt;/a&gt;
  Optimization
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs get back to the &lt;code&gt;listWithKey&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;listWithKey&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Map&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function operates in such a way that any update of the transmitted &lt;code&gt;Dynamic&lt;/code&gt; will initiate the update of each individual element. Even if we, say, change a single element, the update will be passed to each element, though it won‚Äôt change the value. Now let‚Äôs get back to the &lt;code&gt;todoWidget&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Endo&lt;/span&gt; &lt;span class="kt"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;todoEvEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ffor&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;TodoDone&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoText&lt;/span&gt;
  &lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;todoEvEv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you remember, the &lt;code&gt;dyn&lt;/code&gt; function updates the &lt;code&gt;DOM&lt;/code&gt; every time the &lt;code&gt;todoDyn&lt;/code&gt; is updated. Considering that the change in one element of the list is passed to each element individually, it turns out that the entire &lt;code&gt;DOM&lt;/code&gt; section which displays our tasks will be rebuilt (you can check this using the developer panel in the browser). Obviously, this is not what we want. This is when the &lt;code&gt;holdUniqDyn&lt;/code&gt; function comes to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vMsgHrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vMsgHrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_2.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWidget&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Dynamic&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="kt"&gt;TodoEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;todoWidget&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;todoDyn'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;holdUniqDyn&lt;/span&gt; &lt;span class="n"&gt;todoDyn'&lt;/span&gt;
  &lt;span class="n"&gt;todoEvEv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ffor&lt;/span&gt; &lt;span class="n"&gt;todoDyn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;todoState&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;TodoDone&lt;/span&gt;         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoDone&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoActive&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;
    &lt;span class="kt"&gt;TodoActive&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;todoEditable&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="n"&gt;td&lt;/span&gt;
  &lt;span class="n"&gt;switchHold&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;todoEvEv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôve added the line &lt;code&gt;todoDyn &amp;lt;- holdUniqDyn todoDyn'&lt;/code&gt;. What‚Äôs going on here? The matter is that though the &lt;code&gt;Dynamic&lt;/code&gt; operates, the value it contains remains unchanged. Function &lt;code&gt;holdUniqDyn&lt;/code&gt; works just this way, so that if the &lt;code&gt;Dynamic&lt;/code&gt; passed to it operates and hasn‚Äôt changed its value, the output &lt;code&gt;Dynamic&lt;/code&gt; won‚Äôt operate and, consequently, in our case, the &lt;code&gt;DOM&lt;/code&gt; won‚Äôt be rebuilt unnecessarily. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qsy1txJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qsy1txJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.typeable.io/images/reflex/2_3.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result we obtained can be viewed &lt;a href="https://github.com/typeable/blog-posts-ru/tree/c6f256e96d24507ea3e3040c3cd490aaec610029/reflex-todo"&gt;in our repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next part, we‚Äôll consider another way of managing the events and the use of the &lt;a href="https://hackage.haskell.org/package/ghcjs-dom"&gt;GHCJS-DOM&lt;/a&gt; library.&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>functional</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
