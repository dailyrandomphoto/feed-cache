<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The EASIEST Way to Lint Any Code - GitHub Super Linter Deep Dive</title>
      <author>Davide Benvegn√π</author>
      <pubDate>Mon, 12 Apr 2021 23:42:47 +0000</pubDate>
      <link>https://dev.to/n3wt0n/the-easiest-way-to-lint-any-code-github-super-linter-deep-dive-53eo</link>
      <guid>https://dev.to/n3wt0n/the-easiest-way-to-lint-any-code-github-super-linter-deep-dive-53eo</guid>
      <description>&lt;p&gt;GitHub Super Linter allows you to lint almost any code with just a single component. Today I'm going to show you how it works, how to set it up and use it for your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;To me, &lt;strong&gt;GitHub Super Linter is the ultimate linter&lt;/strong&gt;, because it allows you to lint almost any kind of code, with a minimal setup.&lt;/p&gt;

&lt;p&gt;If you don't know &lt;strong&gt;what a linter is&lt;/strong&gt; and why you should use one, I'd highly recommend you to check out the &lt;a href="https://dev.to/n3wt0n/what-is-a-linter-and-why-you-should-use-one-linters-explained-hbc"&gt;previous post&lt;/a&gt; or the &lt;a href="https://youtu.be/HDQXWr5TOnI"&gt;video&lt;/a&gt; I've published on the subject.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-github-super-linter"&gt;
  &lt;/a&gt;
  What is GitHub Super Linter?
&lt;/h3&gt;

&lt;p&gt;So, first things first... what is the GitHub Super Linter?&lt;/p&gt;

&lt;p&gt;GitHub Super Linter &lt;strong&gt;is not just a linter&lt;/strong&gt;, it's a very special one. In fact, the Super Linter is &lt;strong&gt;a source code repository that is packaged into a Docker container&lt;/strong&gt; and called by GitHub Actions. This allows for any repository on GitHub.com to call the Super Linter and start utilizing its benefits.&lt;/p&gt;

&lt;p&gt;And it doesn't end here. In fact GitHub Super Linter is unique, &lt;strong&gt;it supports many languages&lt;/strong&gt;. Usually a linter is developed specifically for a Language, but the Super Linter supports almost every programming and scripting language you can think of. Whether you are using C#, Groovy, Kotlin, Python, GO, JavaScript or even IaC languages like Ansible, Terraform, or ARM, or yet XML, JSON and YAML... this linter has you covered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G4t03o7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgns60fn8vjkqcejyhv7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4t03o7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgns60fn8vjkqcejyhv7.png" alt="GitHub Super Linter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To add on this, the end goal of this tool is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent broken code from being uploaded to the default branch (Usually master or main)&lt;/li&gt;
&lt;li&gt;Help establish coding best practices across multiple languages&lt;/li&gt;
&lt;li&gt;Build guidelines for code layout and format&lt;/li&gt;
&lt;li&gt;Automate the process to help streamline code reviews&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-does-github-super-linter-work"&gt;
  &lt;/a&gt;
  How does GitHub Super Linter work?
&lt;/h3&gt;

&lt;p&gt;So, how does this work, you ask. Well, &lt;strong&gt;it's pretty easy actually&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;When you‚Äôve set your repository to start running this action, any time you open a pull request, it &lt;strong&gt;will start linting the code&lt;/strong&gt; and return via the Status API. It will let you know if any of your code changes passed successfully, or, if &lt;strong&gt;any errors were detected&lt;/strong&gt;, where they are, and what they are. This allows you to go back to your branch, fix any issues, and create a new push to the pull request. At that point, the Super Linter will run again and &lt;strong&gt;validate the updated code&lt;/strong&gt; and repeat the process.&lt;/p&gt;

&lt;p&gt;You can configure your &lt;a href="https://youtu.be/gUJ52Shwtm0"&gt;&lt;strong&gt;branch protection rules&lt;/strong&gt;&lt;/a&gt; to make sure all code must pass before being able to merge as an additional measure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-set-up-the-super-linter"&gt;
  &lt;/a&gt;
  How to set up the Super Linter
&lt;/h3&gt;

&lt;p&gt;To show how to set up and use the Super Linter, I created a video in which I have a &lt;strong&gt;full demo&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BCrtoZ04L1Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/BCrtoZ04L1Y"&gt;Link to the video: https://youtu.be/BCrtoZ04L1Y&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/BCrtoZ04L1Y?t=175s"&gt;Click here to jump directly to the demo part&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#customizations-for-the-github-super-linter"&gt;
  &lt;/a&gt;
  Customizations for the GitHub Super Linter
&lt;/h3&gt;

&lt;p&gt;Now that we have our Super Linter set up, let's see how we can customize it.&lt;/p&gt;

&lt;p&gt;We are going to analyze the use of Environment Variables, template rules files, and using your own rules files.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  Environment Variables
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/BCrtoZ04L1Y?t=455s"&gt;Click here to jump directly to the demo part for the Environment Variables&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#template-rules-and-custom-rules"&gt;
  &lt;/a&gt;
  Template Rules and Custom Rules
&lt;/h4&gt;

&lt;p&gt;Let's move to the rules. You can use the GitHub Super-Linter &lt;strong&gt;with or without your own personal rules sets&lt;/strong&gt;. This allows for greater flexibility for each individual code base. &lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;use template rules files&lt;/strong&gt; provided by GitHub, you can copy any or all template rules files from the &lt;em&gt;Templates&lt;/em&gt; folder of the Super Linter repo into the folder &lt;code&gt;.github/linters/&lt;/code&gt; of your repository.&lt;/p&gt;

&lt;p&gt;If your repository does not have rules files, the Super Linter will anyway &lt;strong&gt;fall back to the defaults rules&lt;/strong&gt; contained in the TEMPLATES folder.&lt;/p&gt;

&lt;p&gt;You can of course use those templates as base to develop &lt;strong&gt;your own ruleset&lt;/strong&gt;. And as we have seen before, you can use the Environment variables to tell the Super Linter &lt;strong&gt;where your custom rules files are&lt;/strong&gt;, if you prefer saving them in a different folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-customizations"&gt;
  &lt;/a&gt;
  Other Customizations
&lt;/h4&gt;

&lt;p&gt;There‚Äôs &lt;strong&gt;a ton of other customizations&lt;/strong&gt; with flags and templates that can help you customize the Super Linter to your individual repository. Just follow the detailed directions at the &lt;a href="https://github.com/github/super-linter"&gt;Super Linter repository&lt;/a&gt; and the &lt;a href="https://github.com/github/super-linter/wiki"&gt;Super Linter wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;It is also possible to &lt;strong&gt;use the GitHub Super Linter outside of GitHub&lt;/strong&gt;, for example in Azure, Azure DevOps, GitLab and even locally on your machine. Let me know in the comment section below if you want me to make another post or video showing how to do this.&lt;/p&gt;

&lt;p&gt;Let me also know what you think about the GitHub Super Linter, I truly love it and I'm using it basically in every repo I have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BCrtoZ04L1Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>codenewbie</category>
      <category>lint</category>
    </item>
    <item>
      <title>Deta + FastAPI + JWT Auth Part 1</title>
      <author>Rohan </author>
      <pubDate>Mon, 12 Apr 2021 23:26:56 +0000</pubDate>
      <link>https://dev.to/deta/deta-fastapi-jwt-auth-part-1-4c82</link>
      <guid>https://dev.to/deta/deta-fastapi-jwt-auth-part-1-4c82</guid>
      <description>&lt;p&gt;This is the first of a two part series on implementing authorization in a FastAPI application using Deta. In this article, we will learn about JWT tokens, set up the project, and build the auth logic. In the next article, we will implement the auth logic in a FastAPI application. &lt;a href="https://github.com/rohanshiva/Deta-FastAPI-JWT-Auth-Blog"&gt;The full code is available here.&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Implementing authorization can be useful, as it provides the client access to a specific set of functions, actions, data, etc. Consider an e-commerce website, you would want to make sure users are authorized before they can look at items in the cart. Another example is a chat application where only the owner has the right to add/remove people. &lt;/p&gt;

&lt;p&gt;JWT (or JSON web tokens) are simply encrypted strings that encode some information about the client. These tokens are signed using a secret key or a public/private key. We will implement the former method. Essentially, when the client is logged in, the server sends back a response with a signed token. Subsequently, the client can send requests to the server with the token as a header to access authorized routes, data, functions etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vG4tcbcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/20916697/114433979-15e32f80-9b88-11eb-8bd9-a4bfb5f3b56c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vG4tcbcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/20916697/114433979-15e32f80-9b88-11eb-8bd9-a4bfb5f3b56c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup&lt;/li&gt;
&lt;li&gt;FastAPI app skeleton + Auth logic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;: we are using FastAPI to build the application&lt;/li&gt;
&lt;li&gt;Deta Base (Base) : database for our application&lt;/li&gt;
&lt;li&gt;Deta Micro: host our application&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pyjwt&lt;/code&gt;: library for encoding and decoding JWT tokens&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;passlib[bcrypt]&lt;/code&gt;: password hashing library&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h3&gt;

&lt;p&gt;To get started, create a folder for this project &lt;code&gt;fastapi-jwt&lt;/code&gt; , and create a &lt;code&gt;requirements.txt&lt;/code&gt; file with the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;deta&lt;/span&gt;
&lt;span class="n"&gt;fastapi&lt;/span&gt;
&lt;span class="n"&gt;uvicorn&lt;/span&gt;
&lt;span class="n"&gt;pyjwt&lt;/span&gt;
&lt;span class="n"&gt;passlib&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the following command to install the libraries &lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Before we begin with the project we also need to get a Deta project key to use with Deta Base. We are using Base to store user account information such as username and hashed password.  &lt;/p&gt;

&lt;p&gt;To do that, navigate to the &lt;a href="https://web.deta.sh/"&gt;Deta Console &lt;/a&gt;then click on the arrow on the top left.&lt;br&gt;
If you don't already have a Deta account, &lt;a href="https://web.deta.sh/"&gt;create one for free&lt;/a&gt;. Once you confirm your email, Deta will automatically generate a Project Key, this is the one we need, copy it and  store it securely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVFlYY4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/20916697/114434048-2dbab380-9b88-11eb-8839-22bebae709ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVFlYY4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/20916697/114434048-2dbab380-9b88-11eb-8839-22bebae709ed.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new project and make sure to save the key in a secure place!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tD-dMG3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/20916697/114434122-40cd8380-9b88-11eb-8ddc-7045ce5756ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tD-dMG3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/20916697/114434122-40cd8380-9b88-11eb-8ddc-7045ce5756ba.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the key to your environment variables like this &lt;code&gt;DETA_PROJECT_KEY=YOUR_COPIED_PROJECT_KEY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's it for the setup, we have everything we need to get rolling. Let's go!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fastapi-app-skeleton-and-auth-logic"&gt;
  &lt;/a&gt;
  FastAPI app skeleton and Auth logic
&lt;/h2&gt;

&lt;p&gt;Here is how our folder structure will look like at the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;fastapi-jwt/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;main.py&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;auth.py&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;user_modal.py&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;‚îî‚îÄ‚îÄ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;requirements.txt&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;main.py&lt;/code&gt; , let's set up our FastAPI application, Deta Base, and skeletons for all the endpoints.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Deta&lt;/span&gt;

&lt;span class="n"&gt;deta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Deta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;users_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/signup'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Sign up endpoint'&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/login'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Login user endpoint'&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/secret'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;secret_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Secret data'&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/notsecret'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;not_secret_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Not secret data'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;users_db&lt;/code&gt; is our base where we store the account's hashed password. The schema for &lt;code&gt;users&lt;/code&gt; will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# username
&lt;/span&gt;    &lt;span class="n"&gt;encoded_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's head over to &lt;code&gt;auth.py&lt;/code&gt;, to handle the authentication logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jwt&lt;/span&gt; &lt;span class="c1"&gt;# used for encoding and decoding jwt tokens
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt; &lt;span class="c1"&gt;# used to handle error handling
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;passlib.context&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CryptContext&lt;/span&gt; &lt;span class="c1"&gt;# used for hashing the password 
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt; &lt;span class="c1"&gt;# used to handle expiry time for tokens
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CryptContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schemes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bcrypt'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"APP_SECRET_STRING"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encode_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoded_password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoded_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, we just imported all the tools from the libraries, and we created the &lt;code&gt;Auth&lt;/code&gt; class with two functions. We don't want to store the plain text password in our &lt;code&gt;users&lt;/code&gt; Base. Therefore, we can use the &lt;code&gt;encode_password&lt;/code&gt; function to encode the password using the &lt;code&gt;passlib['bcrypt']&lt;/code&gt; library. We can store this encoded password in our &lt;code&gt;users_db&lt;/code&gt; base when the user makes an account. &lt;/p&gt;

&lt;p&gt;We also have another function &lt;code&gt;verify_password&lt;/code&gt; which checks if the plain password and the encoded password from &lt;code&gt;users_db&lt;/code&gt; match. This can be useful to verify user in the &lt;code&gt;/login&lt;/code&gt; endpoint. &lt;/p&gt;

&lt;p&gt;Notice that we get the variable &lt;code&gt;secret&lt;/code&gt; from our environment, make sure to generate a long secure string and store it in your environment variables under the name &lt;code&gt;APP_SECRET_STRING&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have a way to verify passwords, and hash passwords, it is time to handle the logic for encoding and decoding JSON web tokens. The tokens are the essence of auth logic. &lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;Auth&lt;/code&gt; class, add the following functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encode_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'exp'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;'iat'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;'sub'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'HS256'&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decode_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'HS256'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sub'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpiredSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Token expired'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvalidTokenError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Invalid token'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;encode_token&lt;/code&gt; function takes a username as a parameter and uses &lt;code&gt;pyjwt&lt;/code&gt; to encode the token. We are using &lt;code&gt;timedelta&lt;/code&gt; to set the expiry of the token for 30 mins. We can use this function inside the &lt;code&gt;/login&lt;/code&gt; endpoint, and return a token to the client. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;decode_token&lt;/code&gt; takes a token as a parameter, and attempts to decode it using the &lt;code&gt;secret&lt;/code&gt;. If there are any errors like expired token or an invalid token, we can simply raise an &lt;code&gt;HTTPException&lt;/code&gt;. Otherwise, we can return the username. This will be helpful to us when the client interacts with protected data, functions, etc. We can use this function to simply verify if they have access to the response. &lt;/p&gt;

&lt;p&gt;That is all we need for the auth logic! Here is what the file looks like at the end:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jwt&lt;/span&gt; &lt;span class="c1"&gt;# used for encoding and decoding jwt tokens
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt; &lt;span class="c1"&gt;# used to handle error handling
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;passlib.context&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CryptContext&lt;/span&gt; &lt;span class="c1"&gt;# used for hashing the password 
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt; &lt;span class="c1"&gt;# used to handle expiry time for tokens
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CryptContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schemes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bcrypt'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"APP_SECRET_STRING"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encode_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoded_password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoded_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;encode_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'exp'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;'iat'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;'sub'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'HS256'&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decode_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'HS256'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sub'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpiredSignatureError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Token expired'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvalidTokenError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Invalid token'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the next article, we will implement the logic in a FastAPI application and deploy our app on Deta micros! &lt;a href="https://github.com/rohanshiva/Deta-FastAPI-JWT-Auth-Blog"&gt;The full code is available here.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Get Google Home alarms &amp; timers as notifications</title>
      <author>MHA</author>
      <pubDate>Mon, 12 Apr 2021 22:37:52 +0000</pubDate>
      <link>https://dev.to/mattieha/get-google-home-alarms-timers-as-notifications-i0m</link>
      <guid>https://dev.to/mattieha/get-google-home-alarms-timers-as-notifications-i0m</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;br&gt;
Using Home Assistant and Node-RED I receive actionable notifications on my android phone for Google Home alarms and timers. The notifications show all information, they are grouped and have a countdown.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm a big fan of the Google(Nest) smart devices and have multiple Hub and Mini devices in my smart home setup. Paired with Home Assistant and Node-RED I use them to control every device and automation flow. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alarms-amp-timers"&gt;
  &lt;/a&gt;
  Alarms &amp;amp; Timers
&lt;/h2&gt;

&lt;p&gt;The alarm and timer functions on the devices are the most frequent used by me, I use them every day.&lt;br&gt;
They work fine, but I'm missing some functionality to make them awesome.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They don't show up on my phone&lt;/li&gt;
&lt;li&gt;I can't control them by phone&lt;/li&gt;
&lt;li&gt;When the device rings and I'm not in the same room I won't notice the alarm / timer ringing &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#home-assistant-google-home-integration"&gt;
  &lt;/a&gt;
  Home Assistant Google Home integration
&lt;/h2&gt;

&lt;p&gt;This week I discovered a new community integration called "Google Home" which exposes the alarms and timers as sensors in HA.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/leikoilja"&gt;
        leikoilja
      &lt;/a&gt; / &lt;a href="https://github.com/leikoilja/ha-google-home"&gt;
        ha-google-home
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Home Assistant Google Home custom component 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
I installed it via HACS and it works really nice, the sensor entities for alarms and timers are created per device.

&lt;p&gt;I wondered if I could use it for some new automations which would add more functionality for me, especially have them as notifications on my phone.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--28m78qBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo0pjgsrmo2kjppyxjvg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--28m78qBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo0pjgsrmo2kjppyxjvg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show alarms and timers as notifications on my phone&lt;/li&gt;
&lt;li&gt;Let them countdown to the time they fire&lt;/li&gt;
&lt;li&gt;When they ring the notification should show this&lt;/li&gt;
&lt;li&gt;When I dismiss a notification the alarm / timer should be deleted&lt;/li&gt;
&lt;li&gt;If they are deleted on the google device the notification should be removed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#nodered"&gt;
  &lt;/a&gt;
  Node-RED
&lt;/h2&gt;

&lt;p&gt;I use Node-RED for all my automations, I like the way it visualizes the flows. It's often described as a low code solution, as a developer I like the option to apply code logic as well.&lt;/p&gt;

&lt;p&gt;What you see next is the end result of some trial and error programming, usually I start with just 1 sensor input and a normal flow. Which I then finetune and often convert to a reusable subflow. &lt;/p&gt;

&lt;p&gt;What the main flow will look like:&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5VhVB41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvhhkr2jrnhikq749nj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5VhVB41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvhhkr2jrnhikq749nj6.png" alt="The flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end result I wanted to have just 1 sublfow which would control everything, having multiple alarm and timer sensors as input. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-subflow"&gt;
  &lt;/a&gt;
  The subflow
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ueJBh_OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlv7eode0wtwnz4ae84a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueJBh_OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlv7eode0wtwnz4ae84a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The top flow handles all input.&lt;br&gt;
The bottom flow handles cleared notifications.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#top-flow"&gt;
  &lt;/a&gt;
  Top flow
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Parse the input from the sensors&lt;/li&gt;
&lt;li&gt;Determine if it is an alarm or timer sensor&lt;/li&gt;
&lt;li&gt;Cache the active items (with type and sensor info) in memory&lt;/li&gt;
&lt;li&gt;For every active item create/update a notification message&lt;/li&gt;
&lt;li&gt;For every inactive item make a clear_notification message&lt;/li&gt;
&lt;li&gt;Send the messages to the Call service node &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9a3KvBWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzv7beilqdp5s411rk96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9a3KvBWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzv7beilqdp5s411rk96.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start with the "Parse alarms &amp;amp; timers" function node which does all the heavy lifting.&lt;br&gt;
I use the "Setup" tab of the function node to set some defaults which are used in the flow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Set type defaults&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timer_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚è≥&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Timers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;deleteService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete_timer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alarm_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚è∞&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alarms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alarms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;deleteService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete_alarm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;defaults&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The "Function" tab&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;defaults&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Determine type: alarm or timer&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timers&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;old_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timers&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alarms&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;old_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alarms&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alarm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Create a alarm/timer item ready to be used by the service&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doneTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fire_time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;typeValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;vibration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chronometer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ringing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; RINGING`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; RINGING`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;vibration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100, 1000, 100, 1000, 100, 100, 1000, 100, 1000, 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;chronometer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;doneTime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;doneTime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;typeValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;sensor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;device&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;typeValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="na"&gt;chronometer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chronometer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fire_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;vibrationPattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vibration&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt;            
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entity_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;old_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friendly_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mapItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;new_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;typeValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cachedItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cachedItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Update or create notifications for active items&lt;/span&gt;
&lt;span class="nx"&gt;activeItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;    
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;cachedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Clear expired/deleted notifications&lt;/span&gt;
&lt;span class="nx"&gt;cachedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;activeItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newItem&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;findItem&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sensor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entity_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clear_notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;    
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;cachedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cachedItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cachedItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Send notifications as a stream&lt;/span&gt;
&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// All done&lt;/span&gt;
&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#bottom-flow"&gt;
  &lt;/a&gt;
  Bottom flow
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Detect cleared notifications&lt;/li&gt;
&lt;li&gt;Look it up in the cache&lt;/li&gt;
&lt;li&gt;When found call the delete_alarm/timer service&lt;/li&gt;
&lt;li&gt;Remove the item from the cache
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EidaWMkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdfmlen09i405gbrho7s.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cachedItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cachedItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;defaults&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Find cleared item&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cachedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;findItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;findItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;deleteService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;entity_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;findItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sensor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;findItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;findItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Clean up&lt;/span&gt;
&lt;span class="nx"&gt;cachedItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cachedItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cachedItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        
&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Import the subflow in NR:
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;Then edit the Environment variable for the service:&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XaK1RK1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu95yuuololgswqmgm3q.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Add the subflow and connect some alarm and/or timer sensors as &lt;code&gt;events_state&lt;/code&gt; nodes.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5VhVB41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvhhkr2jrnhikq749nj6.png" alt="The flow"&gt;
&lt;/li&gt;
&lt;li&gt;All done, try it by creating a alarm / timer on the google home device, within a few seconds you should receive the notification on your phone.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>homeassistant</category>
      <category>nodered</category>
      <category>automation</category>
      <category>smarthome</category>
    </item>
    <item>
      <title>Awesome CSS Button Hover | Animation Effects | Using Only HTML &amp; CSS</title>
      <author>Ahmad Emran</author>
      <pubDate>Mon, 12 Apr 2021 22:28:36 +0000</pubDate>
      <link>https://dev.to/ahmadbassamemran/awesome-css-button-hover-animation-effects-using-only-html-css-2k0j</link>
      <guid>https://dev.to/ahmadbassamemran/awesome-css-button-hover-animation-effects-using-only-html-css-2k0j</guid>
      <description>

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Dg-LouCg7FI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/AhmadEmran?sub_confirmation=1"&gt;&lt;strong&gt;Please do not forget to subscribe in my channel:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadbassamemran/embed/eYgMpoe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>üàÇÔ∏è An easy way to translate your Golang application</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Mon, 12 Apr 2021 22:23:08 +0000</pubDate>
      <link>https://dev.to/koddr/an-easy-way-to-translate-your-golang-application-5ege</link>
      <guid>https://dev.to/koddr/an-easy-way-to-translate-your-golang-application-5ege</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;„Çà„ÅÜÁöÜÔºÅ‚úåÔ∏è Let's talk about one of the important topics, if you're preparing a Go application for a multilingual audience or just need support for different languages in the REST APIs. &lt;/p&gt;

&lt;p&gt;This topic is not as simple as it seems. Because each language has its own special elements in terms of the word form when using numerals. For example, in Russian there are &lt;strong&gt;3&lt;/strong&gt; different variants for items quantities: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;one&lt;/code&gt;, 1 item;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;few&lt;/code&gt;, 2 items;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;many&lt;/code&gt;, 3+ items;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;ü§î And this must be understood when translating the application!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't worry, everything will soon fall into place.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#source-code-of-the-project"&gt;Source code of the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#prepare-the-project-for-translation"&gt;Prepare the project for translation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#website-application"&gt;Website application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-for-display"&gt;Template for display&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#extracting-the-original-language"&gt;Extracting the original language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#launch-the-application-and-playing-with-languages"&gt;Launch the application and playing with languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#afterword"&gt;Afterword&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code-of-the-project"&gt;
  &lt;/a&gt;
  Source code of the project
&lt;/h2&gt;

&lt;p&gt;Yeah, for those who like to see the code first, I created a repository on GitHub:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/koddr"&gt;
        koddr
      &lt;/a&gt; / &lt;a href="https://github.com/koddr/tutorial-go-i18n"&gt;
        tutorial-go-i18n
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üìñ Tutorial: An easy way to translate your Golang application
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare-the-project-for-translation"&gt;
  &lt;/a&gt;
  Prepare the project for translation
&lt;/h2&gt;

&lt;p&gt;I've looked at many packages for this operation (including the one built into the Go core), but &lt;a href="https://github.com/nicksnyder/go-i18n"&gt;nicksnyder/go-i18n&lt;/a&gt; was the only one I enjoyed working with in my projects. We will create our demo application using this particular package.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëã Please write in the comments which package for i18n you use and why!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#website-application"&gt;
  &lt;/a&gt;
  Website application
&lt;/h3&gt;

&lt;p&gt;Yes, let's take the &lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt; web framework as the core for our application, which has excellent template support (with smoothly reload function) and is easy to write and read code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üî• Please read comments in code!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./main.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/BurntSushi/toml"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/template/html"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/nicksnyder/go-i18n/v2/i18n"&lt;/span&gt;
    &lt;span class="s"&gt;"golang.org/x/text/language"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a new i18n bundle with default language.&lt;/span&gt;
    &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;i18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewBundle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;English&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Register a toml unmarshal function for i18n bundle.&lt;/span&gt;
    &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterUnmarshalFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"toml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Load translations from toml files for non-default languages.&lt;/span&gt;
    &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustLoadMessageFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./lang/active.es.toml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustLoadMessageFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./lang/active.ru.toml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new engine by passing the template folder&lt;/span&gt;
    &lt;span class="c"&gt;// and template extension.&lt;/span&gt;
    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./templates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Reload the templates on each render, good for development.&lt;/span&gt;
    &lt;span class="c"&gt;// Optional, default is false.&lt;/span&gt;
    &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// After you created your engine, you can pass it&lt;/span&gt;
    &lt;span class="c"&gt;// to Fiber's Views Engine.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Views&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// Register a new route.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lang"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c"&gt;// parse language from query&lt;/span&gt;
        &lt;span class="n"&gt;accept&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accept-Language"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// or, parse from Header&lt;/span&gt;

        &lt;span class="c"&gt;// Create a new localizer.&lt;/span&gt;
        &lt;span class="n"&gt;localizer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;i18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewLocalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Set title message.&lt;/span&gt;
        &lt;span class="n"&gt;helloPerson&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;localizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustLocalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalizeConfig&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DefaultMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;"HelloPerson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c"&gt;// set translation ID&lt;/span&gt;
                &lt;span class="n"&gt;Other&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello {{.Name}}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// set default translation&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;TemplateData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="c"&gt;// Parse and set unread count of emails.&lt;/span&gt;
        &lt;span class="n"&gt;unreadEmailCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unread"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Config for translation of email count.&lt;/span&gt;
        &lt;span class="n"&gt;unreadEmailConfig&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalizeConfig&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DefaultMessage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;"MyUnreadEmails"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;One&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"You have {{.PluralCount}} unread email."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Other&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"You have {{.PluralCount}} unread emails."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;PluralCount&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unreadEmailCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Set localizer for unread emails.&lt;/span&gt;
        &lt;span class="n"&gt;unreadEmails&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;localizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustLocalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unreadEmailConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Return data as JSON.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"json"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;helloPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"unread_emails"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unreadEmails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Return rendered template.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"Title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;helloPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"UnreadEmails"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unreadEmails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// Start server on port 3000.&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":3000"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#template-for-display"&gt;
  &lt;/a&gt;
  Template for display
&lt;/h3&gt;

&lt;p&gt;Normally, I don't like to take pre-made CSS libraries, but for the simplicity and nice look of this demo, I took the &lt;a href="https://getbootstrap.com/"&gt;Bootstrap 5&lt;/a&gt; (&lt;code&gt;v5.0.0-beta3&lt;/code&gt;) library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ./templates/index.html --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{.Title}}&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css"&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-lg-8 mx-auto p-3 py-md-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{.Title}}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row g-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{.UnreadEmails}}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pt-5 my-5 text-muted border-top"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Switch to üá¨üáß &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;English&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;, üá™üá∏
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/?lang=es"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Espa√±ol&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;, üá∑üá∫ &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/?lang=ru"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;–†—É—Å—Å–∫–∏–π&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.
      &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-the-original-language"&gt;
  &lt;/a&gt;
  Extracting the original language
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First, install &lt;code&gt;goi18n&lt;/code&gt; CLI:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get &lt;span class="nt"&gt;-u&lt;/span&gt; github.com/nicksnyder/go-i18n/v2/goi18n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Extract all &lt;code&gt;i18n.Message&lt;/code&gt; struct literals in our Go source files to a message file for translation (by default, &lt;code&gt;active.en.toml&lt;/code&gt;):
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;goi18n extract
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="c"&gt;# ./active.en.toml&lt;/span&gt;

&lt;span class="py"&gt;HelloPerson&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello {{.Name}}"&lt;/span&gt;

&lt;span class="nn"&gt;[MyUnreadEmails]&lt;/span&gt;
&lt;span class="py"&gt;one&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"You have {{.PluralCount}} unread email."&lt;/span&gt;
&lt;span class="py"&gt;other&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"You have {{.PluralCount}} unread emails."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create an empty messages files for the language that you want to add (in this example, &lt;code&gt;translate.es.toml&lt;/code&gt; and &lt;code&gt;translate.ru.toml&lt;/code&gt;).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;translate.es.toml translate.ru.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;goi18n merge&lt;/code&gt; command with this messages files to be translated:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For Espa√±ol:&lt;/span&gt;
goi18n merge active.en.toml translate.es.toml

&lt;span class="c"&gt;# For Russian:&lt;/span&gt;
goi18n merge active.en.toml translate.ru.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open messages files and do the lines translation. As you remember from the beginning of this tutorial, the Russian language has its own peculiarities for displaying the number of objects. Therefore, I will give an example of translation for this language:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="c"&gt;# ./translate.ru.toml&lt;/span&gt;

&lt;span class="nn"&gt;[HelloPerson]&lt;/span&gt;
&lt;span class="py"&gt;hash&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"sha1-5b49bfdad81fedaeefb224b0ffc2acc58b09cff5"&lt;/span&gt;
&lt;span class="py"&gt;other&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"–ü—Ä–∏–≤–µ—Ç, {{.Name}}"&lt;/span&gt;

&lt;span class="nn"&gt;[MyUnreadEmails]&lt;/span&gt;
&lt;span class="py"&gt;hash&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"sha1-6a65d17f53981a3657db1897630e9cb069053ea8"&lt;/span&gt;
&lt;span class="py"&gt;one&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"–£ –≤–∞—Å –µ—Å—Ç—å {{.PluralCount}} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ."&lt;/span&gt;
&lt;span class="py"&gt;other&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"–£ –≤–∞—Å –µ—Å—Ç—å {{.PluralCount}} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º."&lt;/span&gt;
&lt;span class="py"&gt;few&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"–£ –≤–∞—Å –µ—Å—Ç—å {{.PluralCount}} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞."&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;-- new row for "few" count&lt;/span&gt;
&lt;span class="py"&gt;many&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"–£ –≤–∞—Å –µ—Å—Ç—å {{.PluralCount}} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º."&lt;/span&gt; &lt;span class="c"&gt;# &amp;lt;-- new row for "many" count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When all have been translated, rename them to &lt;code&gt;active.es.toml&lt;/code&gt; and &lt;code&gt;active.ru.toml&lt;/code&gt; and place to the &lt;code&gt;./lang&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That's it!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-the-application-and-playing-with-languages"&gt;
  &lt;/a&gt;
  Launch the application and playing with languages
&lt;/h2&gt;

&lt;p&gt;We're finally ready to launch our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go

&lt;span class="c"&gt;# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê &lt;/span&gt;
&lt;span class="c"&gt;# ‚îÇ                    Fiber v2.7.1                   ‚îÇ &lt;/span&gt;
&lt;span class="c"&gt;# ‚îÇ               http://127.0.0.1:3000               ‚îÇ &lt;/span&gt;
&lt;span class="c"&gt;# ‚îÇ       (bound on host 0.0.0.0 and port 3000)       ‚îÇ &lt;/span&gt;
&lt;span class="c"&gt;# ‚îÇ                                                   ‚îÇ &lt;/span&gt;
&lt;span class="c"&gt;# ‚îÇ Handlers ............. 2  Processes ........... 1 ‚îÇ &lt;/span&gt;
&lt;span class="c"&gt;# ‚îÇ Prefork ....... Disabled  PID ............. 64479 ‚îÇ &lt;/span&gt;
&lt;span class="c"&gt;# ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OK. Open &lt;code&gt;http://localhost:3000/&lt;/code&gt; page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P8P5Uavk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrb5z6w7sff8snrjczta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8P5Uavk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrb5z6w7sff8snrjczta.png" alt="go i18n en"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, by default the website will always open in üá¨üáß &lt;strong&gt;English&lt;/strong&gt;, as specified in the application settings. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° In Golang unset &lt;code&gt;int&lt;/code&gt; values will always have &lt;code&gt;0&lt;/code&gt;, not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; as in JavaScript or Python. That's why if we don't specify the &lt;code&gt;unread&lt;/code&gt; parameter in a query, the template will be set it to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let's switch language to the üá™üá∏ &lt;strong&gt;Espa√±ol&lt;/strong&gt;. Click to the link at the page bottom and add query parameter &lt;code&gt;unread&lt;/code&gt; with some integer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rw-q_glA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viq1sdvurvifxd0zrl4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rw-q_glA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viq1sdvurvifxd0zrl4t.png" alt="go i18n es"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, go to another language, üá∑üá∫ &lt;strong&gt;Russian&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KauMNQ1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgnsj9dzqi8y0xgxause.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KauMNQ1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgnsj9dzqi8y0xgxause.png" alt="go i18n ru"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëÜ You can play around with the value of &lt;code&gt;unread&lt;/code&gt; to see how the word form automatically changes after a numeral for these languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, to demonstrate how JSON works, please add &lt;code&gt;format=json&lt;/code&gt; parameter to the query to see how &lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt; web framework will give you the same content, but in JSON format:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G72WhSnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtkzefn2jgixliofksea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G72WhSnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtkzefn2jgixliofksea.png" alt="go i18n json"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;In real web applications, you can create different variants of REST API methods to deliver translations to the frontend. But the main thing to remember is that if you do international projects, think about the specifics of the language of those countries in the first place. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And Golang will help with everything else!&lt;/strong&gt; üéâ&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Sh√≥stak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more ‚Üí write a comment below &amp;amp; follow me. Thanks! üòò&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>The Template tag: using the DRY principle for HTML</title>
      <author>Seth A Burleson</author>
      <pubDate>Mon, 12 Apr 2021 21:29:02 +0000</pubDate>
      <link>https://dev.to/sbrevolution5/the-template-tag-using-the-dry-principle-for-html-4a16</link>
      <guid>https://dev.to/sbrevolution5/the-template-tag-using-the-dry-principle-for-html-4a16</guid>
      <description>&lt;p&gt;Don't repeat yourself.  It's one of the golden rules for good code. for some reason when writing HTML it's almost completely ignored, especially by new devs who try to hardcode everything. &lt;/p&gt;

&lt;p&gt;[This example uses bootstrap 4 for the table, but it is not necessary to use bootstrap for templates]&lt;/p&gt;

&lt;p&gt;What you need to use is the &lt;code&gt;&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Lets say you have a simple program, printing numbers in a range.  You can see the layout of the finished page on &lt;a href="https://github.com/sbrevolution5/TemplateExample"&gt;github&lt;/a&gt;, using index.html (example code below)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function displayData(start, end) {
    let result = ""
    for (let i = start; i &amp;lt;= end; i++) {
        result += ` ${i}`;

    }
    document.getElementById("result").innerHTML = result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can easily do this as I've done above with a string concatenation, but its not impressive.  Since you don't know how many numbers you'll need, you couldn't hardcode a table.... or can you?&lt;br&gt;
Lets add a template element to our HTML page, it can go anywhere, but it should look a bit like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template id="dataTemplate"&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td id="col1"&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td id="col2"&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td id="col3"&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td id="col4"&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td id="col5"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This template is for a table, elsewhere in the HTML I have the body set up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            &amp;lt;table class="table table-striped" id="resultTable"&amp;gt;
                &amp;lt;thead class="thead-dark"&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th colspan="5"&amp;gt;Results&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                &amp;lt;tbody id="resultsBody"&amp;gt;

                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then link these elements together in the javascript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const template = document.getElementById("dataTemplate");
    const resultsBody=document.getElementById("resultsBody")
    resultsBody.innerHTML = ""
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our loop, we setup a datarow constant, and add each element into the textcontent as we loop. Then appending the new datarow as a child to the resultsBody, also incrementing by 5 every loop, since we're adding elements 5 at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let i = start; i &amp;lt;= end; i+=5) {
        const datarow = document.importNode(template.content, true);
        datarow.getElementById("col1").textContent = i;
        datarow.getElementById("col2").textContent = i+1;
        datarow.getElementById("col3").textContent = i+2;
        datarow.getElementById("col4").textContent = i+3;
        datarow.getElementById("col5").textContent = i+4;

        resultsBody.appendChild(datarow)

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can put inputs for 1 through 100 and get 20 rows of numbers!  &lt;/p&gt;

&lt;p&gt;Templates done easily with only vanilla JS.  No complicated frontend frameworks needed.  &lt;/p&gt;

&lt;p&gt;This example does have some problems, if you aren't working in multiples of 5 you'll end up with extra numbers.  Hopefully its showed you that templates are super easy to use.  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Use Python and Blender to Make More Dynamic Training Data</title>
      <author>Hugo</author>
      <pubDate>Mon, 12 Apr 2021 21:25:35 +0000</pubDate>
      <link>https://dev.to/hugop/use-python-and-blender-to-make-more-dynamic-training-data-56jh</link>
      <guid>https://dev.to/hugop/use-python-and-blender-to-make-more-dynamic-training-data-56jh</guid>
      <description>&lt;p&gt;Tools that make synthetic data generation easy are fundamentally changing the way machine learning work is done. Iterating and improving the dataset over the course of a project is more important to project success than iterating the model architecture. That's why we are releasing &lt;a href="https://github.com/ZumoLabs/zpy"&gt;zpy&lt;/a&gt;, an open source synthetic data toolkit. All developers should have the option of working with dynamic data rather than static data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#software-20"&gt;
  &lt;/a&gt;
  Software 2.0
&lt;/h1&gt;

&lt;p&gt;We are undergoing a phase change in the way software programming works [1]. As we replace our collective software stack with deep learning systems, we are going to fundamentally change many of the core abstractions and workflows that have been part of software development for decades.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ExRUQVaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx7nqqb701o6tbupfy76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ExRUQVaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx7nqqb701o6tbupfy76.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1: Machine learning introduces a new programming paradigm [2].&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately many deep learning researchers are still stuck in the old software paradigm: spending the majority of their time and effort designing and iterating the algorithm (‚ÄúRules‚Äù in Figure 1) while using a static dataset like MNIST or ImageNet. Those of us who make machine learning work in the real world though have already come to the realization that the most important part of getting something to work is making a good dataset (‚ÄúData‚Äù and ‚ÄúAnswers‚Äù in Figure 1). The data and the labels are really where we should spend the majority of our time and effort.&lt;/p&gt;

&lt;p&gt;Deep learning algorithms are made of the same building blocks: layers of neurons arranged in clever patterns. The exact arrangement of those neurons and the long list of accompanying tricks and widgets has been described as alchemy [3]. Researchers spend a huge amount of effort discovering the arrangements that work best, often keeping the dataset static so they can compare these arrangements quantitatively. In the real world however, engineers often do the opposite: figuring out how to get better data while simply using whatever arrangement is popular at the time.&lt;/p&gt;

&lt;p&gt;This presents a huge need for tools that make it simple to modify, adjust, and create more training data. A need which is being met by the dynamic nature of synthetic data generation. Synthetic data makes it easy to change the annotation style, or add an additional label which can be used as an additional training loss for the model. It also makes it easy to generate more examples of a specific edge case that may be causing issues in production. Synthetic data generation and iteration should be easy, and used in concert with adjustments to the model in order to achieve one‚Äôs goals.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúFree software‚Äù means software that respects users‚Äô freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. Thus, ‚Äúfree software‚Äù is a matter of liberty, not price. To understand the concept, you should think of ‚Äúfree‚Äù as in ‚Äúfree speech,‚Äù not as in ‚Äúfree beer‚Äù. [4]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People want to be able to shape and influence the tools they use. The best way to empower them to do that is to build those tools out in the open. The future of data creation, and thus the future of software, will be open core tools that are created in part by the developer community.&lt;/p&gt;

&lt;p&gt;The best argument for this type of development is the growing popularity of the open core model in the software startup scene. Open core is based around the idea of having the ‚Äúcore‚Äù of the software stack being open source and freely available online. Startups that adopt this paradigm sustain themselves by selling additional services or features on top of this open core. This stands in contrast to the more popular SaaS business model where all software is proprietary and is effectively rented out to users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dynamic-data"&gt;
  &lt;/a&gt;
  Dynamic Data
&lt;/h1&gt;

&lt;p&gt;Dynamic data is the future of training deep learning systems. Open source is the future of programming. That‚Äôs why we have decided to release &lt;a href="https://github.com/ZumoLabs/zpy"&gt;our data development toolkit zpy&lt;/a&gt; [5] under an open source license. Now everything you need to generate and iterate synthetic data for computer vision is available for free.&lt;/p&gt;

&lt;p&gt;But this is just the beginning of the phase shift we mentioned earlier. Your feedback, commits, and feature requests, will be invaluable as we continue to build a more robust set of tools for generating synthetic data. Meanwhile, if you could use hands on support with a particularly tricky problem, please &lt;a href="https://www.zumolabs.ai/contact?utm_source=dev.to&amp;amp;utm_medium=post"&gt;reach out&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;[1] &lt;a href="https://youtu.be/y57wwucbXR8"&gt;Building the Software 2 0 Stack&lt;/a&gt;. Video Lecture by Andrej Karpathy.&lt;br&gt;
[2] Deep Learning with Python. Book by Francois Chollet.&lt;br&gt;
[3] &lt;a href="https://youtu.be/x7psGHgatGM"&gt;Machine Learning has become Alchemy&lt;/a&gt;. Video Lecture by Ali Rahimi.&lt;br&gt;
[4] &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;‚ÄúWhat is free software?‚Äù&lt;/a&gt;. Article by the GNU Operating System.&lt;br&gt;
[5] &lt;a href="https://github.com/ZumoLabs/zpy"&gt;zpy&lt;/a&gt;: an open source synthetic data toolkit.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
      <category>python</category>
    </item>
    <item>
      <title>What Script Run?</title>
      <author>Ronaldo Hoch</author>
      <pubDate>Mon, 12 Apr 2021 21:09:48 +0000</pubDate>
      <link>https://dev.to/ronaldohoch/what-script-run-33a3</link>
      <guid>https://dev.to/ronaldohoch/what-script-run-33a3</guid>
      <description>&lt;p&gt;Hello guys!&lt;/p&gt;

&lt;p&gt;I'm working on a monorepo with micro frontend architecture and it has many npm scripts to remember, so it is so boring to open an text editor, copy the comand, run one and repeat to another one...&lt;/p&gt;

&lt;p&gt;So I create and publicaded my first npm package, it's a small tool to help us to choose a script to run xD&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;npm install -g what-script-run&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Go to your npm project directory, then, run the command:&lt;br&gt;
&lt;code&gt;wsr&lt;/code&gt;, see the gif bellow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJOPoZV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw6otr7qxn3stsoh6k8x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJOPoZV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw6otr7qxn3stsoh6k8x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the npm link: &lt;a href="https://www.npmjs.com/package/what-script-run"&gt;https://www.npmjs.com/package/what-script-run&lt;/a&gt;&lt;br&gt;
Here, the github link: &lt;a href="https://github.com/ronaldohoch/what-script-run#readme"&gt;https://github.com/ronaldohoch/what-script-run#readme&lt;/a&gt;&lt;br&gt;
It's open source, so, PR's are welcome, you can localize to your language.&lt;/p&gt;

</description>
      <category>npm</category>
      <category>tooling</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bezos' Calculator</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 12 Apr 2021 20:54:18 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/bezos-calculator-4b7h</link>
      <guid>https://dev.to/alvaromontoro/bezos-calculator-4b7h</guid>
      <description>&lt;p&gt;Some developers use their weekends to develop cool and grandiose projects to learn new technologies and to double down as second (or third) sources of income... instead, I used this past weekend, to develop a small and silly project.&lt;/p&gt;

&lt;p&gt;I developed a web page that calculates how much money Jeff Bezos makes while you read it: &lt;strong&gt;&lt;a href="http://bezoscalculator.com/"&gt;Bezos' Calculator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is a mixture of tongue in cheek and social criticism (bubbles pop up with milestones comparing it to other salaries and goods.) The numbers are based on these articles by &lt;a href="https://www.bloomberg.com/news/articles/2020-07-01/bezos-s-wealth-soars-to-171-6-billion-to-top-pre-divorce-record"&gt;Bloomberg&lt;/a&gt; and &lt;a href="https://www.buzzfeed.com/mjs538/jeff-bezos-wealth"&gt;BuzzFeed&lt;/a&gt;, which calculate Jeff Bezos' gains increase by $3,605 every second.&lt;/p&gt;

&lt;p&gt;Initially, the &lt;a href="https://codepen.io/alvaromontoro/pen/ZELrvbo"&gt;counter was animated&lt;/a&gt; like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ZELrvbo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But that animation does not work on Safari, so I opted for going with the non-animated version... for now. I will figure out another animation and replace it.&lt;/p&gt;

&lt;p&gt;One fun thing about the project is how equally it distributed it is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4XpgV2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpmhqh8oifyzwkpsn795.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4XpgV2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpmhqh8oifyzwkpsn795.png" alt="Screenshot of Github showing the project languages distribution: CSS is at 34.9%, JavaScript is at 32.8%, and HTML is at 32.3%"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a tiny thing (just one page), so it makes sense that the percentages of HTML, CSS, and JavaScript are more or less proportional. It's just the first time I see it like that. Normally one of the languages would dominate the project.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>An amazing template for your React application</title>
      <author>Mad Devs</author>
      <pubDate>Mon, 12 Apr 2021 19:49:34 +0000</pubDate>
      <link>https://dev.to/maddevs/an-amazing-template-for-your-react-application-2ai4</link>
      <guid>https://dev.to/maddevs/an-amazing-template-for-your-react-application-2ai4</guid>
      <description>&lt;p&gt;When creating a new React project, I faced the same problems every time. I need to build it manually because &lt;code&gt;create-react-app&lt;/code&gt; do not provide everything that we use in real projects. We need to set up data storage, routing, configure REST, styles, etc. This was quite time-consuming, and our team decided to create some templates to quick-start new projects. We‚Äôre starting to develop templates for different use cases. In this article, I want to present my work to you: a template for a &lt;code&gt;React&lt;/code&gt; application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology-stack"&gt;
  &lt;/a&gt;
  Technology Stack
&lt;/h2&gt;

&lt;p&gt;Here‚Äôs a list of libraries and dependencies used for this template. We‚Äôd decided to use minimal dependencies, and you can add anything if you need.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.React-router-dom: Declarative routing for React.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;2.Styled-components: Use the best bits of ES6 and CSS to style your apps without stress. The best CSS-in-JS library for React.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;3.React-use: Some very simple and useful hooks for components that you can build amazing things with.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;4.Prop-types: Runtime type checking for React props and similar objects.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;5.Axios: The best promise-based HTTP client for Javascript.&lt;br&gt;
6.Jest: Delightful JavaScript Testing Framework with a focus on simplicity.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;7.Testing-library: Simple and complete testing utilities that encourage good testing practices.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;8.ESLint+Prettier: Linter to find and fix problems in your JavaScript code. Prettier for code formatting.&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#first-start"&gt;
  &lt;/a&gt;
  First start
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#using-docker-and-dockercompose"&gt;
  &lt;/a&gt;
  Using docker and docker-compose
&lt;/h3&gt;

&lt;p&gt;This option is good in that you don‚Äôt need to install a lot of dependencies on your working device. Docker just encapsulates all that trash.&lt;/p&gt;

&lt;p&gt;To start the project with this option, you need to install &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/install/"&gt;docker-compose&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, you just need to run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn docker:dev&lt;/code&gt;&lt;br&gt;
When Docker installs all the necessary dependencies and builds your application, you will see Compiled successfully in your console. Your project is available on 3000 port; you can open it and start developing &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-npm"&gt;
  &lt;/a&gt;
  Using npm
&lt;/h3&gt;

&lt;p&gt;If you can‚Äôt or don‚Äôt want to use docker, you can use the default method for starting your project using &lt;a href="https://nodejs.org/en/"&gt;Node.JS and npm(yarn)&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;yarn # or npm i&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start the project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;yarn start # or npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The application is available at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;We use react-router-dom for routing in the application. All the routes are stored in the &lt;code&gt;src/Router.jsx&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { Route, Switch } from 'react-router-dom'
// pages
import { Main, Todo } from './pages'
function Router() {
  return (
    &amp;lt;Switch&amp;gt;
      &amp;lt;Route exact path='/' component={Main} /&amp;gt;
      &amp;lt;Route exact path='/todo' component={Todo} /&amp;gt;
    &amp;lt;/Switch&amp;gt;
  )
}

export default Router
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-new-route"&gt;
  &lt;/a&gt;
  Adding a new route
&lt;/h2&gt;

&lt;p&gt;To create a new route, you need to do the following steps:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.Create the new file in the src/pages folder&lt;/code&gt;&lt;br&gt;
&lt;code&gt;2.Add the new created page in the src/pages/index.js file for better importing.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;3.Add the new page in src/Router.jsx file&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#additional-information"&gt;
  &lt;/a&gt;
  Additional information
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Important&lt;/strong&gt;: The pages are used only to logically separate different parts of the application. You don‚Äôt need to use the pages as components. You can use &lt;a href="https://www.npmjs.com/package/react-helmet"&gt;react-helmet&lt;/a&gt; to set up the page‚Äôs meta-tags (title, description, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;When you work with the components, it‚Äôs recommended to use a modern approach with functional components and hooks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs not recommended to use class components because they work too slowly (performance) and won‚Äôt be supported&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To create the component, you can use the following &lt;code&gt;CLI-script&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create:component MyComponent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After using this script, the folder with your component‚Äôs name will appear in your &lt;code&gt;src/components&lt;/code&gt; folder. In this case, it will be the &lt;code&gt;src/components/MyComponent&lt;/code&gt; folder.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#components-files-description"&gt;
  &lt;/a&gt;
  Component‚Äôs files description
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;index.jsx&lt;/strong&gt;‚Äî core file with logic. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react'
import { useMount, useUpdateEffect } from 'react-use'

// view
import TodoList from './TodoList'

function Wrapper() {
  const [todos, setTodos] = useState([])

  const getInitialTodos = () =&amp;gt; {
    // ...some logic to get initialTodos from localStorage
  }

  const saveTodos = () =&amp;gt; {
    // ...some logic to save todos from localStorage
  }

  const addTodo = todo =&amp;gt; setTodos([...todos, todo])
  const removeTodo = todo =&amp;gt; setTodos([...todos.filter(todo =&amp;gt; todo === todo)]);

  // Use mount-hook for calling getInitialTodos() after mount
  useMount(() =&amp;gt; getInitialTodos())

  // Watch todos and save it in localStorage after updating
  useUpdateEffect(() =&amp;gt; saveTodos(), [todos])

  // return view with some props
  return &amp;lt;TodoList todos={todos} addTodo={addTodo} removeTodo={removeTodo} /&amp;gt;
}

export default Wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;[ComponentName].jsx&lt;/code&gt;‚Ää‚Äî‚Ääview file(markup). Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import PropTypes from 'prop-types'

import TodoItem from '../TodoItem'

// prop-types
const propTypes = {
  todos: PropTypes.arrayOf(PropTypes.object),
}

function TodoList({ todos }) {
  if(!Boolean(todos.length)) return &amp;lt;div className="empty"&amp;gt;No todos :)&amp;lt;/div&amp;gt;
  return (
    &amp;lt;div className="todo-list"&amp;gt;
      {todos.map(todo =&amp;gt; &amp;lt;TodoItem key={todo.id} todo={todo} /&amp;gt;)}
    &amp;lt;/div&amp;gt;
  )
}

TodoList.propTypes = propTypes

export default TodoList
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;[ComponentName].test.jsx&lt;/code&gt;‚Ää‚Äî‚Ääunit tests&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ComponentName].styles.js&lt;/code&gt;‚Äî styles (styled-components by default)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/typechecking-with-proptypes.html"&gt;PropTypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#localstorage"&gt;
  &lt;/a&gt;
  LocalStorage
&lt;/h3&gt;

&lt;p&gt;To work with localStorage you can use additional utilities: &lt;code&gt;loadState&lt;/code&gt; and &lt;code&gt;saveState Example&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { saveState, loadState }  from '../utils/localStorage'
const save = data =&amp;gt; saveState(data, 'key')
const load = () =&amp;gt; loadState('key')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h2&gt;

&lt;p&gt;To build logic within components, people usually use hooks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactuse"&gt;
  &lt;/a&gt;
  React-use
&lt;/h3&gt;

&lt;p&gt;This is a library of additional react hooks that meet most of the needs so that you do not have to reinvent the wheel every time. &lt;a href="https://github.com/streamich/react-use"&gt;All hooks list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most useful hooks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useDebounce.md"&gt;useDebounce&lt;/a&gt;‚Ää‚Äî‚Ääfor use debounce effect in the component&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md"&gt;useLocalStorage&lt;/a&gt;‚Ää‚Äî‚Ääfor working with localStorage in the component&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useMount.md"&gt;useMount&lt;/a&gt;‚Ää‚Äî‚Äämount lifecycle hook&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useUpdateEffect.md"&gt;useUpdateEffect&lt;/a&gt;‚Ää‚Äî‚Ääupdate lifecycle hook&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/usePrevious.md"&gt;usePrevious&lt;/a&gt;‚Ää‚Äî‚Äästore prevState or prevProps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useToggle.md"&gt;useBoolean&lt;/a&gt;‚Ää‚Äî‚Ääsimple state hook for boolean values&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useList.md"&gt;useList&lt;/a&gt;‚Ää‚Äî‚Äästate hook for store arrays with additional utilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#custom-hooks"&gt;
  &lt;/a&gt;
  Custom hooks
&lt;/h4&gt;

&lt;p&gt;Creating custom hooks is a very useful thing as it allows reusing large amounts of code. If you see code that will probably be reused in the future, hook it. This is an example of using a simple custom hook implementing work with API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from 'react'
import { useList, useToggle } from 'react-use'

import fetchImages from './fetchImages'

const useFetchImages = ({ source }) =&amp;gt; {
    const [images, imagesActions] = useList([])
    const [isLoading, toggleLoading] = useToggle(false)
    const [error, setError] = useState(null)

    const fetchImages = async () =&amp;gt; {
        toggleLoading(true)
        try {
            const data = await fetchImages(source)
            imagesActions.set(data)
        } catch(err) {
            setError(err)
        }
        toggleLoading(false)
    }

    return {
        images,
        isLoading,
        error,
        fetchImages,
    }
}

export default useFetchImages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#utilities"&gt;
  &lt;/a&gt;
  Utilities
&lt;/h2&gt;

&lt;p&gt;Utilities are stored in the &lt;code&gt;src/utils&lt;/code&gt; folder in separate files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#available-utilities"&gt;
  &lt;/a&gt;
  Available utilities
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;camelToSnakeCase&lt;/code&gt; and &lt;code&gt;snakeToCamelCase&lt;/code&gt;‚Äî transformation of a string into various styles of writing phrases without spaces or punctuation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;normalizeObjectKeys&lt;/code&gt;‚Ää‚Äî‚Äätransformation of all the object field keys using &lt;code&gt;snakeToCamelCase&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;normalizeCollectionKeys&lt;/code&gt;‚Ää‚Äî‚Äätransformation of all the elements(Element should be an object) of the array using &lt;code&gt;normalizeObjectKeys&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getRequestParams&lt;/code&gt;‚Ää‚Äî‚Ääfunction for getting values of get-parameters from &lt;code&gt;location.search&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;localStorage&lt;/code&gt;‚Ää‚Äî‚Ääutilities for working with localStorage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h2&gt;

&lt;p&gt;In working with API requests, the most useful library is axios with &lt;code&gt;async/await&lt;/code&gt; syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Axios&lt;/code&gt; configuration is in the &lt;code&gt;src/config/api.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-function-setapiheader"&gt;
  &lt;/a&gt;
  Additional function setApiHeader
&lt;/h3&gt;

&lt;p&gt;If you need to add a header in the existing axios instance, you can use &lt;code&gt;setApiHeader&lt;/code&gt; function. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { setApiHeader, api } from '../config'

async function authenticate() {
  // Authorization
  const response = await api.post('/auth')

  // Getting token from response
  const { token } = response

  // Set header for the next authenticated requests
  setApiHeader('Authorization', `Bearer ${token}`)
}

authenticate()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Always try to use async/await syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  Environment variables
&lt;/h3&gt;

&lt;p&gt;To work with environment variables, we need to use some config files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.env.example&lt;/code&gt;‚Ää‚Äî‚Ääfor storing examples of variables&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.env&lt;/code&gt;‚Ää‚Äî‚Ääfor variables
To add a new environment variable, you need to do the following steps:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Add variables into &lt;code&gt;.env.example&lt;/code&gt; file with empty value
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_API_BASE_URL=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add variable with value int &lt;code&gt;.env&lt;/code&gt; file.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_API_BASE_URL=https://google.com/api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Restart the project (required)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the variable into the config (&lt;code&gt;src/config/index.js&lt;/code&gt;) and use it from config&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const config = {
  API_URL: process.env.REACT_APP_API_BASE_URL,
}

axios.get(config.API_URL)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Don‚Äôt forget to restart the project after adding/updating any &amp;gt;variables&lt;/p&gt;

&lt;p&gt;Environment variables should be ALWAYS started by REACT_APP_ ; otherwise, they won‚Äôt work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#styles"&gt;
  &lt;/a&gt;
  Styles
&lt;/h2&gt;

&lt;p&gt;To write styles, we can use several approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scss/BEM‚Ää‚Äî‚Äädefault styling&lt;/li&gt;
&lt;li&gt;Css-In-JS (styled-components)‚Ää‚Äî‚Ääa recommended option that is simpler and more convenient than the previous one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;In testing everything, &lt;code&gt;Jest&lt;/code&gt; and &lt;code&gt;React-testing-library&lt;/code&gt; are used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/en/getting-started"&gt;Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testing-library.com/"&gt;Testing-library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;React-testing library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#unittests-running"&gt;
  &lt;/a&gt;
  Unit-tests running
&lt;/h3&gt;

&lt;p&gt;There are several scripts to run tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;yarn test&lt;/code&gt;‚Ää‚Äî‚Ääwatch-mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yarn test:coverage&lt;/code&gt;‚Ää‚Äî‚Ääwatch-mode+coverage&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yarn test:ci&lt;/code&gt;‚Ää‚Äî‚Ääwithout watch-mode + coverage + disable coloring output&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;p&gt;Coverage generates after running yarn &lt;code&gt;test:coverage command.&lt;/code&gt; You can see expanded coverage in the HTML format in the &lt;code&gt;./coverage&lt;/code&gt; folder.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unit tests also have a minimal coverage threshold. If coverage is less than 80%, the tests will fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#formatting"&gt;
  &lt;/a&gt;
  Formatting
&lt;/h2&gt;

&lt;p&gt;Linters are to keep code clean. They prevent shitcode from getting into a repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; is used for linting Javascript code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/eslint-config-airbnb"&gt;Airbnb&lt;/a&gt; config is used as default.&lt;/p&gt;

&lt;p&gt;To run a linter, you can use the following npm-scripts:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn lint:js&lt;/code&gt; ‚Äîto run a linter&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn lint:js:fix&lt;/code&gt; ‚Äîto run a linter with autofix&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cssstyledcomponents"&gt;
  &lt;/a&gt;
  CSS(styled-components)
&lt;/h3&gt;

&lt;p&gt;To lint css code, &lt;a href="https://stylelint.io/"&gt;stylelint&lt;/a&gt; is used. The linter checks your code for typos and spelling mistakes. To run the linter, you can use &lt;code&gt;yarn lint:css&lt;/code&gt; script&lt;/p&gt;

&lt;p&gt;Find out how best to use SASS extensions for custom CSS variables &lt;a href="https://maddevs.io/blog/how-to-make-better-use-of-sass-extensions-for-custom-css-variables/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#airbnb-styleguide-links"&gt;
  &lt;/a&gt;
  Airbnb styleguide links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;Javascript&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/airbnb/javascript/tree/master/react"&gt;React&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To run both linters, you can use yarn lint:all script&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#jsdoc"&gt;
  &lt;/a&gt;
  JSDoc
&lt;/h2&gt;

&lt;p&gt;The optimal solution to make your code more readable and cleaner is to use JSDoc. The project doesn‚Äôt use JSDoc by default, but you can easily add it using the following helpful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/eslint-plugin-jsdoc"&gt;Eslint-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#running-in-production"&gt;
  &lt;/a&gt;
  Running in production
&lt;/h2&gt;

&lt;p&gt;To run the project in production, you can use yarn docker:prod script. This script does the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download dependencies&lt;/li&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Run nginx to serve static content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#cypress"&gt;
  &lt;/a&gt;
  Cypress
&lt;/h2&gt;

&lt;p&gt;Cypress is a framework for end-to-end testing based on Javascript.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-cypress"&gt;
  &lt;/a&gt;
  Why Cypress?
&lt;/h3&gt;

&lt;p&gt;You can have 100% code coverage with unit tests, which test all your components separately, but your application can still fail when the components start to interact with each other. To prevent possible fails, you need to use e2e tests with Cypress. Cypress can test everything that works in a browser. To install &lt;code&gt;cypress&lt;/code&gt;, you can use the &lt;a href="https://github.com/maddevsio/react-madboiler#cypress"&gt;instructions&lt;/a&gt; in the &lt;a href="https://github.com/maddevsio/react-madboiler"&gt;&lt;code&gt;readme&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h2&gt;

&lt;p&gt;To develop modern, big &lt;code&gt;React&lt;/code&gt; applications, people most often use &lt;code&gt;Typescript&lt;/code&gt; to prevent unexpected errors and problems. &lt;code&gt;Typescript&lt;/code&gt; helps avoid primitive errors and makes &lt;code&gt;Javascript&lt;/code&gt; clearer and more expressive. &lt;code&gt;Typescript&lt;/code&gt; has its disadvantages, but the benefits most often outweigh them. If you want to use &lt;code&gt;Typescript&lt;/code&gt; along with our template, you can use &lt;a href="https://github.com/maddevsio/react-madboiler#how-to-add-typescript"&gt;the instructions&lt;/a&gt; for adding it to a project in &lt;a href="https://github.com/maddevsio/react-madboiler"&gt;&lt;code&gt;readme&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gitlab-ci"&gt;
  &lt;/a&gt;
  Gitlab CI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.gitlab.com/ee/ci/"&gt;Gitlab CI&lt;/a&gt; is one of the easiest and most convenient tools to check and deploy your code anywhere. In our template, we use several steps to make it easy to deliver your code to production:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;install&lt;/code&gt;‚Ää‚Äî‚Ääinstalling dependencies using &lt;code&gt;yarn&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lint&lt;/code&gt;‚Ää‚Äî‚Ääcode linting &lt;code&gt;yarn lint:all&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test&lt;/code&gt;‚Ää‚Äî‚Äärunning unit tests using yarn &lt;code&gt;test:ci script;&lt;/code&gt; building and &lt;strong&gt;displaying&lt;/strong&gt; coverage&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pages&lt;/code&gt;‚Ää‚Äî‚Ääbuilding the project &lt;code&gt;yarn build&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pages:deploy&lt;/code&gt;‚Ää‚Äî‚Äädeploy to gitlab-pages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#additional-tricks"&gt;
  &lt;/a&gt;
  Additional tricks
&lt;/h2&gt;

&lt;p&gt;Here, I‚Äôve collected a few tricks to make the development of your app easier and faster.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h3&gt;

&lt;p&gt;To create the component, you can use the following &lt;code&gt;CLI-script&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create:component MyComponent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you use this script, a folder with your component‚Äôs name will appear in your &lt;code&gt;src/components&lt;/code&gt; folder. In this case, it will be the &lt;code&gt;src/components/MyComponent&lt;/code&gt; folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vscodesnippets"&gt;
  &lt;/a&gt;
  VSCode-snippets
&lt;/h4&gt;

&lt;p&gt;Here is a list of available snippets to quickly create some entities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mdocmp&lt;/code&gt;‚Ää‚Äî‚Ääcomponent&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdstyle&lt;/code&gt;‚Ää‚Äî‚Äästyled-components file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdcompunit&lt;/code&gt;‚Ää‚Äî‚Ääunit tests for component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdpage&lt;/code&gt;‚Äî‚Ääpage&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdhook&lt;/code&gt;‚Ää‚Äî‚Ääcustom hook
These snippets are automatically available in your &lt;code&gt;VSCode&lt;/code&gt; because they are set up for the project. You can see and edit any snippet in the &lt;code&gt;.vscode/madboiler-snippets.code-snippets&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#useful-vscode-extensions"&gt;
  &lt;/a&gt;
  Useful VSCode extensions
&lt;/h4&gt;

&lt;p&gt;Here‚Äôs a list of the most useful VSCode extensions that make developing your &lt;code&gt;React&lt;/code&gt; application easier and faster:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;vscode-styled-components&lt;/code&gt;‚Ää‚Äî‚Äästyled-components support&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Visual Studio IntelliCode&lt;/code&gt;‚Ää‚Äî‚ÄäintelliSense for VSCode (AI-assit)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TODO Highlight&lt;/code&gt;‚Ää‚Äî‚Äähighlight your #todos&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;React PropTypes Intellisense&lt;/code&gt;‚Ää‚Äî‚ÄäintelliSense for PropTypes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Prettier&lt;/code&gt;‚Ää‚Äî‚Ääfor autoformatting&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Path Intellisense&lt;/code&gt;‚Ää‚Äî‚ÄäintelliSense for ES6 imports/exports&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ESLint&lt;/code&gt;‚Ää‚Äî‚Äälint highlight&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%D1%81onclusion"&gt;
  &lt;/a&gt;
  –°onclusion
&lt;/h2&gt;

&lt;p&gt;This article shows you the template that we actively use when creating new projects. The template includes everything you need and describes some additional useful things (such as typescript and cypress). Feel free to use our template, and if you have any questions or problems with it, we promise to help you. Thanks for reading!&lt;/p&gt;

&lt;p&gt;Previously published at &lt;a href="https://maddevs.io/blog/amazing-template-for-react-application/?utm_source=devto&amp;amp;utm_medium=react-application"&gt;maddevs.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ember 3.26 Released</title>
      <author>Ember.js</author>
      <pubDate>Mon, 12 Apr 2021 19:34:53 +0000</pubDate>
      <link>https://dev.to/emberjs/ember-3-26-released-2mef</link>
      <guid>https://dev.to/emberjs/ember-3-26-released-2mef</guid>
      <description>&lt;p&gt;Today the Ember project is releasing version 3.26 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 3.27 beta cycle for all sub-projects. We encourage our community (especially addon authors) to help test these beta builds and report any bugs before they are published as a final release in six weeks' time. The &lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/releases/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/new-ember-release-process/"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/ember-project-at-2-0/"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/announcing-embers-first-lts/"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#emberjs"&gt;
  &lt;/a&gt;
  Ember.js
&lt;/h2&gt;

&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-emberjs-326"&gt;
  &lt;/a&gt;
  Changes in Ember.js 3.26
&lt;/h3&gt;

&lt;p&gt;Ember.js 3.26 is an incremental, backwards compatible release of Ember with bug fixes, performance improvements, and minor deprecations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced 5 bug fixes. Here are a few notable ones:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Ember router and the &lt;code&gt;router&lt;/code&gt; service have been updated so that an infinite recursion does not occur when the &lt;code&gt;router&lt;/code&gt; service is injected into &lt;code&gt;app/router.js&lt;/code&gt;. (&lt;a href="https://github.com/emberjs/ember.js/pull/19405"&gt;#19405&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;You can pass to an observer a dependent key whose name includes a colon. (&lt;a href="https://github.com/emberjs/ember.js/issues/19343"&gt;#19343&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The Glimmer VM has been updated to prevent eagerly consuming arguments during modifier destruction. (&lt;a href="https://github.com/emberjs/ember.js/pull/19469"&gt;#19469&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced 0 features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced several deprecations in preparation for v4.0 release. To learn more how to update your code, please check the provided link to the Deprecations Guide.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Transition methods of controllers and routes have been deprecated. Inject the &lt;code&gt;router&lt;/code&gt; service and use the service's methods instead. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_routing-transition-methods"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19255"&gt;#19255&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Invoking the &lt;code&gt;&amp;lt;LinkTo&amp;gt;&lt;/code&gt; component with positional arguments has been deprecated. Please provide named arguments such as &lt;code&gt;@route&lt;/code&gt;, &lt;code&gt;@model&lt;/code&gt;, &lt;code&gt;@models&lt;/code&gt;, and &lt;code&gt;@query&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_ember-glimmer-link-to-positional-arguments"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19345"&gt;#19345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{with}}&lt;/code&gt; helper has been deprecated, in favor of using &lt;code&gt;{{let}}&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_ember-glimmer-with-syntax"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19346"&gt;#19346&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Implicit injection has been deprecated. In particular, the &lt;code&gt;store&lt;/code&gt; service from Ember Data must be explicitly injected into controllers and routes if they refer to &lt;code&gt;this.store&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_implicit-injections"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19358"&gt;#19358&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Browser support of Internet Explorer 11 has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_3-0-browser-support-policy"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19359"&gt;#19359&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Property fallback for implicit &lt;code&gt;this&lt;/code&gt; has been deprecated. Please review the templates in your app and write &lt;code&gt;this.&lt;/code&gt; when it is appropriate, e.g. change &lt;code&gt;{{localProperty}}&lt;/code&gt; to &lt;code&gt;{{this.localProperty}}&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_this-property-fallback"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19371"&gt;#19371&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ember Classic has been deprecated.&lt;/strong&gt; (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_editions-classic"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19372"&gt;#19372&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In preparation for v4.0 release, developers are encouraged to update their app to Ember Octane by following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;config/optional-features.json&lt;/code&gt;, update the feature flags for Octane.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"application-template-wrapper"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jquery-integration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"template-only-glimmer-components"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Specify the Octane edition in &lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ember"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"edition"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"octane"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check the &lt;a href="https://guides.emberjs.com/release/upgrading/current-edition/"&gt;official upgrade guide&lt;/a&gt; and seek help in the &lt;code&gt;#help&lt;/code&gt; channel on &lt;a href="https://discord.gg/emberjs"&gt;Ember Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(list continued from above)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Component managers that use the &lt;code&gt;v3.4&lt;/code&gt; capabilities should update to the most recent component capabilities available, which is currently &lt;code&gt;v3.13&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_manager-capabilities-components-3-4"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19373"&gt;#19373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Modifier managers that use the &lt;code&gt;v3.13&lt;/code&gt; capabilities should update to the most recent modifier capabilities available, which is currently &lt;code&gt;v3.22&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_manager-capabilities-modifiers-3-13"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19373"&gt;#19373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{hasBlock}}&lt;/code&gt; and &lt;code&gt;{{hasBlockParams}}&lt;/code&gt; properties have been deprecated. Use &lt;code&gt;{{has-block}}&lt;/code&gt; and &lt;code&gt;{{has-block-params}}&lt;/code&gt; helpers instead. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_has-block-and-has-block-params"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19374"&gt;#19374&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Passing &lt;code&gt;classBinding&lt;/code&gt; and &lt;code&gt;classNameBindings&lt;/code&gt; as arguments has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_class-binding-and-class-name-bindings-in-templates"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19375"&gt;#19375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Accessing named arguments via &lt;code&gt;{{attrs}}&lt;/code&gt; has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_attrs-arg-access"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19375"&gt;#19375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Array observers have been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_array-observers"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19381"&gt;#19381&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Deprecations are added to Ember.js when an API will be removed at a later date. Each deprecation has an entry in the deprecation guide describing the migration path to a more stable API. Deprecated public APIs are not removed until a major release of the framework.&lt;/p&gt;

&lt;p&gt;Consider using the &lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt; addon if you would like to upgrade your application without immediately addressing deprecations.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember.js 3.26, please review the &lt;a href="https://github.com/emberjs/ember.js/releases/tag/v3.26.0"&gt;Ember.js 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-data"&gt;
  &lt;/a&gt;
  Ember Data
&lt;/h2&gt;

&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-ember-data-326"&gt;
  &lt;/a&gt;
  Changes in Ember Data 3.26
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 bug fixes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 deprecations.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember Data 3.26, please review the&lt;br&gt;
&lt;a href="https://github.com/emberjs/data/releases/tag/v3.26.0"&gt;Ember Data 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#ember-cli"&gt;
  &lt;/a&gt;
  Ember CLI
&lt;/h2&gt;

&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#upgrading-ember-cli"&gt;
  &lt;/a&gt;
  Upgrading Ember CLI
&lt;/h3&gt;

&lt;p&gt;You may upgrade Ember CLI using the &lt;code&gt;ember-cli-update&lt;/code&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx ember-cli-update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This utility will help you to update your app or addon to the latest Ember CLI version. You will probably encounter merge conflicts, in which the default behavior is to let you resolve conflicts on your own. For more information on the &lt;code&gt;ember-cli-update&lt;/code&gt; project, see &lt;a href="https://github.com/ember-cli/ember-cli-update"&gt;the GitHub README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While it is recommended to keep Ember CLI versions in sync with Ember and Ember Data, this is not required. After updating ember-cli, you can keep your current version(s) of Ember or Ember Data by editing &lt;code&gt;package.json&lt;/code&gt; to revert the changes to the lines containing &lt;code&gt;ember-source&lt;/code&gt; and &lt;code&gt;ember-data&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-ember-cli-326"&gt;
  &lt;/a&gt;
  Changes in Ember CLI 3.26
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 2 bug fixes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Issue a better error message for add-on's missing an entry point. (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9473"&gt;#9473&lt;/a&gt;); and&lt;/li&gt;
&lt;li&gt;Add Prettier files to &lt;code&gt;.npmignore&lt;/code&gt; file in addon blueprint (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9437"&gt;#9437&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 1 feature.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ember-try&lt;/code&gt; test scenarios for &lt;code&gt;embroider-safe&lt;/code&gt; and &lt;code&gt;embroider-optimized&lt;/code&gt; for addons are now enabled using &lt;a href="https://github.com/embroider-build/embroider/tree/master/packages/test-setup"&gt;@embroider/test-setup&lt;/a&gt; allowing Embroider compatibility testing for addons test matrix (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9436"&gt;#9436&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 0 deprecations.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 3.26 and detailed upgrade&lt;br&gt;
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v3.26.0"&gt;Ember CLI 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of these releases serves as a reminder that the Ember project would not have been possible without your continued support. We are extremely grateful to our contributors for their efforts.&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>news</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using "noopener" and ‚Äùnoreferrer‚Äù against Phishing Attacks</title>
      <author>Beto Muniz</author>
      <pubDate>Mon, 12 Apr 2021 19:24:45 +0000</pubDate>
      <link>https://dev.to/obetomuniz/using-noopener-and-noreferrer-against-phishing-attacks-3jj9</link>
      <guid>https://dev.to/obetomuniz/using-noopener-and-noreferrer-against-phishing-attacks-3jj9</guid>
      <description>&lt;p&gt;Want to help users to avoid some Phishing Attacks with &lt;strong&gt;HTML&lt;/strong&gt;? &lt;/p&gt;

&lt;p&gt;üëâ Use &lt;code&gt;rel="noopener noreferrer"&lt;/code&gt; while adding external links to your website to improve user navigation security.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 External Link
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;üêø &lt;strong&gt;noopener&lt;/strong&gt;: tells the browser to remove sensitive data from &lt;code&gt;window.opener&lt;/code&gt; object when the user arrives at the destination website.&lt;/p&gt;

&lt;p&gt;ü§ì &lt;strong&gt;noreferrer&lt;/strong&gt;: protect sensitive data of the origin website removing it from the &lt;code&gt;Referrer&lt;/code&gt; header while the user navigates between origin website and destination website.&lt;/p&gt;




&lt;p&gt;üòã Super easy security strategy to implement. Adopt this recommendation without moderation. &lt;/p&gt;

&lt;p&gt;üíå Also, don't miss content like this &lt;a href="https://www.getrevue.co/profile/obetomuniz"&gt;signing my newsletter&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cybersecurity</category>
      <category>security</category>
      <category>html</category>
    </item>
  </channel>
</rss>
