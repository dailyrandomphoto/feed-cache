<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Simple chat app using Socket.io with NodeJS and ReactJS </title>
      <author>Malik-Idrees</author>
      <pubDate>Sun, 12 Dec 2021 21:16:52 +0000</pubDate>
      <link>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</link>
      <guid>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-used"&gt;
  &lt;/a&gt;
  I have used:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS with Express for server side logic&lt;/li&gt;
&lt;li&gt;ReactJS to build a simple client app&lt;/li&gt;
&lt;li&gt;Socket.io for real-time connection between both sides&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://reactsocket.netlify.app"&gt;Live Preview&lt;/a&gt;&lt;br&gt;
Connect from two different tabs or two different PC's to test it out&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" alt="shows the landing page" width="880" height="349"&gt;&lt;/a&gt;&lt;br&gt;
You can use it to understand how sockets work in react with a bit of touch from Material UI.&lt;/p&gt;

&lt;p&gt;I am a full stack developer and i created this small app to understand working of sockets. Here is another &lt;a href="https://youtu.be/ZwFA3YMfkoc"&gt;resource&lt;/a&gt; to learn about socket by JavaScript Mastery.&lt;/p&gt;

&lt;p&gt;Stay Tuned  for more coming soon! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;A detailed article about creating API's using Node.js and MongoDb along with In-memory testing and optional GitHub actions to test and deploy to Heroku whenever I have free time.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://dev.tomalik-idrees"&gt;https://github.com/malik-Idrees&lt;/a&gt; ⭐&lt;br&gt;
Fiverr: &lt;a href="https://www.fiverr.com/share/27Yy04"&gt;imidrees&lt;/a&gt; ✨&lt;br&gt;
Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>socket</category>
    </item>
    <item>
      <title>Caso de uso: RegEx</title>
      <author>bug_elseif</author>
      <pubDate>Sun, 12 Dec 2021 21:10:45 +0000</pubDate>
      <link>https://dev.to/feministech/caso-de-uso-regex-19bn</link>
      <guid>https://dev.to/feministech/caso-de-uso-regex-19bn</guid>
      <description>&lt;p&gt;Podemos identificar padrões em uma cadeia de caracteres usando Expressões Regulares (&lt;em&gt;Regular Expression&lt;/em&gt; ou RegEx).&lt;/p&gt;

&lt;p&gt;Para validar o formato de um CPF, por exemplo, é necessário que esteja no seguinte padrão:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;xxx.xxx.xxx-xx&lt;/code&gt; (cada &lt;code&gt;x&lt;/code&gt; corresponde à um dígito decimal)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então através de uma RegEx conseguimos identificar se esse padrão foi seguido ou não.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Usando a linguagem de programação Python, importa-se o módulo &lt;code&gt;re&lt;/code&gt; que fornece operações de expressões regulares.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cria-se uma função &lt;code&gt;validar&lt;/code&gt; a qual recebe uma string &lt;code&gt;cpf&lt;/code&gt;, ela retorna &lt;code&gt;válido&lt;/code&gt; ou &lt;code&gt;inválido&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;validador&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expressao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;validador&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'válido'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'inválido'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primeiro-caso"&gt;
  &lt;/a&gt;
  Primeiro caso
&lt;/h2&gt;

&lt;p&gt;Usando a função &lt;code&gt;re.match&lt;/code&gt;, compara-se o &lt;code&gt;cpf&lt;/code&gt; com a expressão regular compilada &lt;code&gt;expressao&lt;/code&gt;, ela retorna um &lt;code&gt;Match Object&lt;/code&gt; caso combine, do contrário retorna &lt;code&gt;None&lt;/code&gt;, o valor é atribuído à variável &lt;code&gt;validador&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A expressão escrita a seguir contém alguns símbolos com significado especial, são eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^&lt;/code&gt; sinaliza o início de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&lt;/code&gt; sinaliza o fim de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\d&lt;/code&gt; corresponde aos dígitos decimais de 0 a 9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um detalhe importante, o uso de &lt;code&gt;.&lt;/code&gt; também possui um significado especial e para retirar esse significado usa-se a &lt;code&gt;\&lt;/code&gt; antes do caracter, assim ele se torna o &lt;code&gt;.&lt;/code&gt; (ponto literal).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d\d\d\.\d\d\d\.\d\d\d-\d\d$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essa expressão é escrita de uma forma simples, repetindo os caracteres no formato esperado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-elementos"&gt;
  &lt;/a&gt;
  Evitando repetição de elementos
&lt;/h2&gt;

&lt;p&gt;Podemos reescrevê-la usando mais recursos implementados no módulo &lt;code&gt;re&lt;/code&gt;, usando o conceito de repetição de elementos da RegEx representados por chaves &lt;code&gt;{}&lt;/code&gt;, aplicando-o ao conjunto de dígitos &lt;code&gt;\d&lt;/code&gt; que é repetido um certo número de vezes, obtem-se:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d{3}\.\d{3}\.\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-trechos"&gt;
  &lt;/a&gt;
  Evitando repetição de trechos
&lt;/h2&gt;

&lt;p&gt;Outra forma de expressar a RegEx é usando o conceito de grupos. Nesse caso podemos agrupar um trecho do formato que se repete, fazendo um grupo de 3 dígitos e um &lt;code&gt;.&lt;/code&gt; (ponto literal), que devem ser repetidos duas vezes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^(\d{3}\.){2}\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exemplos-de-execu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Exemplos de execução
&lt;/h2&gt;

&lt;p&gt;Usaremos três exemplos para testar a validação do CPF:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'111.222.333-44'&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'1234.123.789-88'&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'123.12.789-88'&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'abs.ert.yui.lk'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'''
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    '''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Analisando a saída obtida, notamos que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O exemplo &lt;code&gt;a&lt;/code&gt; está no formato correto.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;b&lt;/code&gt; contém mais dígitos do que o esperado no primeiro trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;c&lt;/code&gt; contém menos dígitos do que o esperado no segundo trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;d&lt;/code&gt; apresenta caracteres não-dígitos, sendo inválido.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    O CPF: 111.222.333-44 é válido
    O CPF: 1234.123.789-88 é inválido
    O CPF: 1234.12.789-88 é inválido
    O CPF: abs.ert.yui.lk é inválido
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Vimos que uma RegEx pode ser escrita de várias formas para validar o mesmo padrão e ainda existem diversas outras maneiras, podendo levar em conta a legibilidade ou complexidade da escrita para fazer sua escolha.&lt;/p&gt;

&lt;p&gt;Aprendendo mais sobre os recursos do &lt;a href="https://docs.python.org/pt-br/3/library/re.html"&gt;módulo &lt;em&gt;re&lt;/em&gt; do Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estudando mais sobre &lt;a href="https://aurelio.net/regex/"&gt;expressões regulares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se escreve &lt;a href="https://www.flip.pt/Duvidas-Linguisticas/Duvida-Linguistica/DID/745"&gt;caracter/caráter/caracteres&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>python</category>
      <category>regex</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Python: The Best Image Processing Libraries</title>
      <author>images.cv</author>
      <pubDate>Sun, 12 Dec 2021 20:48:34 +0000</pubDate>
      <link>https://dev.to/imagescv/python-the-best-image-processing-libraries-1gfl</link>
      <guid>https://dev.to/imagescv/python-the-best-image-processing-libraries-1gfl</guid>
      <description>&lt;p&gt;&lt;strong&gt;In this blog post, we will take a look at some of the best image processing libraries in Python. We'll spend time looking at their strengths and weaknesses to help you pick one that is right for your needs!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html"&gt;OpenCV&lt;/a&gt; &lt;br&gt;
The Open Computer Vision library, or simply OpenCV, is a collection of powerful image processing tools. It was originally developed for use in the video game industry but has since found widespread success outside of it as well! If you are looking for an open source alternative to MATLAB, then this might be your best bet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://matplotlib.org/"&gt;Matplotlib&lt;/a&gt; &lt;br&gt;
The matplotlib library is a plotting library for Python. It can be used to generate plots in either the "matlab" style or the more traditional gnuplot-style, depending on your preference. Best of all, it's actually built into numpy; simply use np.imshow() and youj'll be on your way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://numpy.org/"&gt;Numpy&lt;/a&gt; &lt;br&gt;
While not exactly an image processing library, numpy is one of the most important libraries for scientific computing in Python today. It provides powerful tools like linear algebra and Fourier transforms that make it easier to work with images. If you are doing serious mathematics or data analysis with your images, then this is probably the library you want to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imagemagick.org/script/develop.php"&gt;ImageMagick&lt;/a&gt; &lt;br&gt;
ImageMagick is a software suite for processing images. It has its own programming language that allows users to manipulate their image files in many ways, including resizing, adjusting color balance or applying filters and effects. Image processing with ImageMagick can be done from the command line or through a graphical interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pillow.readthedocs.io/en/stable/"&gt;Pillow&lt;/a&gt; &lt;br&gt;
The Pillow library is a fork of the PIL library that aims to be more user-friendly and maintainable. It includes many of the same features as PIL, but also adds support for animated GIFs, JPEG2000 files, and WebP images. If you are looking for a drop-in replacement for PIL, then this is probably your best bet!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-image.org/"&gt;Scikit-image&lt;/a&gt; &lt;br&gt;
The Scikit-image library is a collection of image processing algorithms that are designed to be easy to use and understand. It includes algorithms for common tasks like edge detection, feature extraction, and image restoration. If you are just starting out in image processing, then this is a good library to check out!&lt;/p&gt;




&lt;p&gt;That's it for our roundup of the best image processing libraries in Python! We hope this gives you a better idea of which one is right for your needs. If you have any questions, feel free to leave a comment below!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size, and data augmentation.&lt;br&gt;
👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>imageprocessing</category>
    </item>
    <item>
      <title>Sentiment Analysis With 🐍. Making Your First Sentiment Analysis Script.</title>
      <author>Code_Jedi</author>
      <pubDate>Sun, 12 Dec 2021 20:22:14 +0000</pubDate>
      <link>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</link>
      <guid>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</guid>
      <description>&lt;p&gt;Do you want to perform sentiment analysis with Python but don't know how to get started? Not to worry. In this article, I'll demonstrate and explain how you can make your own sentiment analysis app, even if you are new to Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-sentiment-analysis"&gt;
  &lt;/a&gt;
  What Exactly Is Sentiment Analysis?
&lt;/h2&gt;

&lt;p&gt;If you've been following programming and data science, you'll probably be familiar with sentiment analysis. If you're not, here the definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The process of computationally identifying and categorizing opinions expressed in a piece of text, especially in order to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sentiment analysis programs have become increasingly popular in the tech world. It's time you make one for yourself!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#educative"&gt;
  &lt;/a&gt;
  Educative
&lt;/h2&gt;

&lt;p&gt;Before I get on with the article, I'd like to recommend &lt;a href="https://bit.ly/3rVIDoN"&gt;Educative&lt;/a&gt; for learners like you.&lt;br&gt;
&lt;strong&gt;Why Educative?&lt;/strong&gt;&lt;br&gt;
It is home to hundreds of development courses, hands on tutorials, guides and demonstrations to help you stay ahead of the curve in your development journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get started with Educative &lt;a href="https://bit.ly/3EeDfAi"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#making-a-simple-sentiment-analysis-script"&gt;
  &lt;/a&gt;
  Making A Simple Sentiment Analysis Script
&lt;/h1&gt;

&lt;p&gt;Let's make a simple sentiment analysis script with Python. What will it do? &lt;br&gt;
It will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scrape news headlines from BBC news.&lt;/li&gt;
&lt;li&gt;Get rid of unwanted scraped elements and duplicates.&lt;/li&gt;
&lt;li&gt;Scan every headline for words that may indicate it's sentiment.&lt;/li&gt;
&lt;li&gt;Based on the found words, determine each headline's sentiment.&lt;/li&gt;
&lt;li&gt;Aggregate the headlines into different arrays based on their sentiment.&lt;/li&gt;
&lt;li&gt;Print the number of scraped headlines and number of headlines with a positive, negative and neutral sentiment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Create a new Python file with your favorite text-editor. You can name it however you want, but I'll name the file &lt;em&gt;main.py&lt;/em&gt; for this tutorial.&lt;br&gt;
Before writing the main code, make sure to install(if not already installed) and import the following libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-dataset"&gt;
  &lt;/a&gt;
  The Dataset
&lt;/h2&gt;

&lt;p&gt;A sentiment analysis script needs a dataset to train on.&lt;br&gt;
Here's &lt;a href="https://github.com/matveynikon/Sentiment-Analysis-With-Python/blob/main/sentiment.csv"&gt;the dataset&lt;/a&gt; that I made for this script. I've tested it and found it to work well.&lt;br&gt;
To work with this tutorial, make sure to download this dataset, move it into your Python file's directory and add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you take a look at this dataset, you'll notice that it's just over 100 lines long. Each line contains a number, 1 or 0 and a word.&lt;br&gt;
The number just gives a way for the Python file to paddle through each word, the word is what is going to indicate a headline's sentiment, and the 1 or 0 indicates whether the word has negative(0) or positive(1) sentiment.&lt;br&gt;
This isn't a lot, but it is enough to perform accurate sentiment analysis on news headlines, which are typically only about 6-10 words long. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scraping-the-news-headlines"&gt;
  &lt;/a&gt;
  Scraping The News Headlines
&lt;/h2&gt;

&lt;p&gt;Here's the code that is going to scrape the news headlines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this is not a web scraping tutorial, you don't have to understand what's happening here. In case you are interested in how this works, here's a tutorial on how to &lt;a href="https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6"&gt;scrape news headlines with Python in &amp;lt;10 lines of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before performing sentiment analysis on the scraped headlines, add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;unwanted&lt;/em&gt; array contains elements that will be scraped from BBC news, that are not news headlines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performing-sentiment-analysis"&gt;
  &lt;/a&gt;
  Performing Sentiment Analysis
&lt;/h2&gt;

&lt;p&gt;It's time to write the code which will perform sentiment analysis on the scraped headlines.&lt;br&gt;
Add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, it defines the &lt;em&gt;neutral&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt; and &lt;em&gt;good&lt;/em&gt; arrays.&lt;/li&gt;
&lt;li&gt;While paddling through every scraped headline element, it checks if it's not inside the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;li&gt;It appends the headline to the &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason why it checks if the headline is in the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array is to exclude non-headline elements and prevent duplicate headlines to be analyzed more than once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's perform sentiment analysis on the news headlines by adding the following code to the &lt;code&gt;if x.text.strip() not in unwanted and x.text.strip() not in news:&lt;/code&gt; condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i in range(len(df['n'])):
        if sen[i] in x.text.strip().lower():
            if cat[i] == 0:
                bad.append(x.text.strip().lower())
            else:
                good.append(x.text.strip().lower())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, the &lt;code&gt;for i in range(len(df["n"])):&lt;/code&gt; loop makes sure to search the headlines for any of the words in the &lt;em&gt;sentiment.csv&lt;/em&gt; dataset.&lt;/li&gt;
&lt;li&gt;If a word from the dataset is found in the headline using the &lt;code&gt;if sen[i] in x.text.strip().lower():&lt;/code&gt; condition, the &lt;code&gt;if cat[i] == 0:&lt;/code&gt; condition then finds if the found word has a negative or positive sentiment and adds the headline to either the &lt;em&gt;bad&lt;/em&gt; or &lt;em&gt;good&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;lower()&lt;/code&gt; function converts all the letters inside the headlines to lowercase. This is done because the word search algorithm is case sensitive.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#theres-one-thing-left-to-do"&gt;
  &lt;/a&gt;
  There's one thing left to do.
&lt;/h3&gt;

&lt;p&gt;Add the following code to the end of your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print the number of scraped headlines and the number of headlines with a bad, good and neutral sentiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The End Result
&lt;/h2&gt;

&lt;p&gt;Here's the full sentiment analysis code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())

badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run your Python file containing the above code, you will see an output similar to the below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" alt="Output" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that this tutorial has successfully demonstrated how you can perform sentiment analysis with Python.&lt;/p&gt;

&lt;p&gt;Byeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>tutorial</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Building a simple alarm clock with Dasha, Express, Ejs and tailwind which force user to wake up</title>
      <author>Muhammad Ali (Nerdjfpb)</author>
      <pubDate>Sun, 12 Dec 2021 19:55:40 +0000</pubDate>
      <link>https://dev.to/nerdjfpb/building-a-simple-alarm-clock-with-dasha-express-ejs-and-tailwind-which-force-user-to-wake-up-5b7a</link>
      <guid>https://dev.to/nerdjfpb/building-a-simple-alarm-clock-with-dasha-express-ejs-and-tailwind-which-force-user-to-wake-up-5b7a</guid>
      <description>&lt;p&gt;Most probably, the title doesn't give a good idea about what we will build together today! We are trying to build an alarm clock that will call users and solve a riddle. It'd not cut the call unless they got it correct. But there is a chance of saying no if they don't want to wake up at that point. This blog will be vast if I complete the full features. So I'll try to make a minimal version where we'll use Dasha(&lt;a href="https://dasha.ai/"&gt;https://dasha.ai/&lt;/a&gt;) to make this. We are going to use &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npm (for installing packages)&lt;/li&gt;
&lt;li&gt;Express js (For the API development) &lt;/li&gt;
&lt;li&gt;Ejs (templating language for HTML)&lt;/li&gt;
&lt;li&gt;TailwindCSS (for styling)&lt;/li&gt;
&lt;li&gt;Dasha (for making alarm clock interesting with the help of conversational AI)&lt;/li&gt;
&lt;li&gt;Vscode (code editor)&lt;/li&gt;
&lt;li&gt;Github (for getting dasha blank app)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start building, but before that, let's learn what it'll look like. Here is the final screenshot - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFgSgEkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6su8s7rfocwjcyeuixfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFgSgEkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6su8s7rfocwjcyeuixfk.png" alt="final screenshot" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By putting the phone number, we'll get a call to give the correct answer to end the call! We will build a short version of it because otherwise, the blog will be vast and hard to follow. &lt;/p&gt;

&lt;p&gt;Let's explore the Dasha first about learning how we can start. For using Dasha, you need to get an account there first. It's straightforward to register an account in Dasha; go to this URL (&lt;a href="https://auth.dasha.ai/account/register"&gt;https://auth.dasha.ai/account/register&lt;/a&gt;) and register your account for your key. It's still in beta mode, so that UI can change from time to time.&lt;/p&gt;

&lt;p&gt;Now, let's install the Dasha to log in and use its features. We are following this URL (&lt;a href="https://docs.dasha.ai/en-us/default"&gt;https://docs.dasha.ai/en-us/default&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g "@dasha.ai/cli@latest"
dasha account login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the login, it'll be better to install Dasha studio in our vscode &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxF4DJ70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibqvbpnjgcu9o3xeyqdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxF4DJ70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibqvbpnjgcu9o3xeyqdd.png" alt="dasha studio" width="880" height="753"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use a blank app from Dasha to build our part! Let clone it from Github.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/dasha-samples/blank-slate-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's install the packages to run it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we install, we've two paths to run this, either we can use chat or phone. I prefer the phone way so we'll run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start PHONE_NUMBER_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this will get me a call on my phone to talk with the Dasha AI bot. But the most exciting part is that there is nothing much to talk about, as this is a small functionality. So let's look at what we've inside &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfd089Nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xom7w9t3ctqvgjctuwpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfd089Nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xom7w9t3ctqvgjctuwpd.png" alt="folder structure" width="237" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The basic app comes with lots of stuff, but first, ignore the index.js file because that one is set up to run the Dasha part. So let's go to the app folder and look into the &lt;code&gt;main.dsl&lt;/code&gt; where things started!&lt;/p&gt;

&lt;p&gt;It quite looks like another programming, but there is some weird thing going on, right? Confusing right? It's a Dasha Scripting Language! So it's a little different from others. &lt;br&gt;
If we look into the first part&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "commonReactions/all.dsl";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's importing something, we can check the common reactions folder, and it'll give us some idea about what is happening here. We are loading some prewritten libraries here. So we can ignore this part for now, and let's go to the second part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;context 
{
    input phone: string;
    input name: string = ""; 
    var1: string = "";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where we are getting the variables and doing stuff; we can create variables as we want from here and use them through this file. &lt;/p&gt;

&lt;p&gt;Below this, you'll find a function like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;external function function1(log: string): string;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also ignore this one because we're not going to use the complex stuff here. Let's check what is happening in the next part (root node)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start node root 
{
    do 
    {
        #connectSafe($phone); 
        #waitForSpeech(1000);
        #say("greeting", {name: $name} );
        wait *;
    }
    transitions 
    {
        yes: goto yes on #messageHasIntent("yes"); 
        no: goto no on #messageHasIntent("no"); 
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;start node root&lt;/code&gt; is the first part where the conversation will start. This node currently has two parts; this has a do &amp;amp; transition. In the &lt;code&gt;do&lt;/code&gt; part, it'll try to run it first; then, based on user talk, it'll go to function from transition. This basic app is a basic one, so it'll just ask if the user can hear the AI voice; if the user says something which has an intent of "yes" then it'll just go to "yes function"; otherwise, this will go in no intent route. &lt;/p&gt;

&lt;p&gt;Before exploring the next node, I'll start building our part because I think it's good enough to understand what's happening here. As we are going to develop the alarm clock, we can have the common reaction for our app, so in our main.dsl, we are going to import the common reaction first. We'll just keep the phone number input because we're going to connect users using the phone. so it'll look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "commonReactions/all.dsl";

context
{
    input phone: string;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to write our main starting root. We are creating two-part of the start node root; the first part is done. Here we'll try to connect with the phone first; then, we'll try to delay a moment for a user to give a time, then AI will start talking. We'll use the #sayText function, where we'll write what AI will ask the user. Then we'll wait for the user to reply. Here the code -&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start node root
{
    do
    {
        #connectSafe($phone);
        #waitForSpeech(1000);
        #sayText("Hello there! I am from Dasha AI and trying to call you as you requested! Are you interested to play a game?");
        wait *;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the user response, we can't go anywhere right now, so we'll create transitions now. For this basic case, we'll either go with yes intention or no intention user.  The new code will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start node root
{
    do
    {
        #connectSafe($phone);
        #waitForSpeech(1000);
        #sayText("Hello there! I am from Dasha AI and trying to call you as you requested! Are you interested to play a game?");
        wait *;
    }
    transitions
    {
        yes: goto yes on #messageHasIntent("yes");
        no: goto no on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you must be thinking about how it's getting the intent of a user? Is this prewritten? Yes! Because we've cloned the blank app repo, now it's time to explore the data.json file. &lt;code&gt;data.json&lt;/code&gt; file has all the intent listed for us. We are using yes &amp;amp; no intent for the first step, so we're not going to change anything right now and go back to our main.dsl file to write the transitions. So let's do the easy part first, suppose the user doesn't want to wake up and say something with no intent. What should we do? We need to on &lt;code&gt;no node&lt;/code&gt; to run the rest. Let's write a &lt;code&gt;no node&lt;/code&gt; for now -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node no
{
    do
    {
        #say("no");
        exit;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are not even writing a transition because we want to end the call when the user is not interested in waking up at this moment. But here, we didn't use any direct text like old-time; instead, we used #say("no"); which is going to data from &lt;code&gt;phrasemap.json&lt;/code&gt; file. Let's have a look in there and change the no text to new text so that it works well with our desired idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"no": 
      {
        "first": 
        [{ "text": "Understandable! Have a nice sleep!" }]
      },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This upper one will be our data in the &lt;code&gt;phrasemap.json&lt;/code&gt; file. If you create a custom phrasemap, don't forget to add that in &lt;code&gt;macros&lt;/code&gt; in the down part of &lt;code&gt;phrasemap.json&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;Now time to build the yes part. So we're going to ask a riddle-type question here to help the user to wake up! Let's keep it simple and use #sayText to tell the text to the user and wait for his response, and based on his response, let's take a transition. The code will look like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node yes
{
    do
    {
        #sayText("I am tall when I am young, and I am short when I am old. What am I?");
        wait *;
    }

    transitions
    {
        correct: goto correct on #messageHasIntent("correctAnswer");
        no: goto no on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using two transitions; the first part is if they got the correct answer, then it'll go to a correct node. Otherwise, it'll repeat the question once (from the importing common reaction part). If the user doesn't guess correctly or try to say no, it'll end the call for now. This question is tricky, so for answering this question, the user needs to be wake &amp;amp; think, and this is the alarm part! Now let's build the final part of the puzzle, the correct answer node.&lt;/p&gt;

&lt;p&gt;The correct node will be really easy to work; we'll just say the answer is correct and end the call. Here is the simple node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node correct
{
    do
    {
        #sayText("This is a correct answer! Have a nice morning!");
        exit;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
'&lt;br&gt;
If it's hard to follow, you can check the whole code from the GitHub link -&amp;gt; (&lt;a href="https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/app/main.dsl"&gt;https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/app/main.dsl&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We can test the app by running it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start PHONE_NUMBER
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we will improve the app and build a view for the app, so first, start with the API. First, we need to import the expressjs, ejs to start the UI part. &lt;br&gt;
For the express API endpoints, we are going to write (in index.js file, delete the dasha code for now)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// importing express js
const express = require('express')
const app = express()

// using for getting json input
app.use(express.json())

// setting the view engine js so that we can load the file from views/pages
app.set('view engine', 'ejs')

// for showing the ui 
app.get('/', (_req, res) =&amp;gt; {
  res.render('pages/index')
})

// post url to send the phone number and run the Dasha part
app.post('/', (req, res) =&amp;gt; {
  // Calling dasha will be happen here
  res.json({ success: true })
})

// port selection to run
const port = process.env.PORT || 3000
app.listen(port, () =&amp;gt; console.log(`listening on port ${port}`))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's write the view part; I'm using tailwindcss as CDN (which is a really bad idea, but I don't want to really install lots of stuff now and this one is mostly for demonstrating this tutorial). For the UI &lt;code&gt;index.ejs&lt;/code&gt; file will look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Alarm Clock By Dasha &amp;amp; Nodejs&amp;lt;/title&amp;gt;
  &amp;lt;script src="https://cdn.tailwindcss.com"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;main class="min-h-screen flex flex-col row-column items-center justify-center text-center"&amp;gt;
    &amp;lt;h1 class="text-4xl font-bold"&amp;gt;
      Alarm Clock With Dasha AI
    &amp;lt;/h1&amp;gt;
    &amp;lt;div class="text-gray-400 text-xs italic py-2"&amp;gt;please add the country code before your number&amp;lt;/div&amp;gt;

    &amp;lt;form class="min-w-[40%]" onsubmit="return handleOnSubmit(event)" method="get" action="#"&amp;gt;
      &amp;lt;input
        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
        id="phone" type="text" placeholder="Enter your number..." /&amp;gt;

      &amp;lt;button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded my-2" type="submit"&amp;gt;
        Alarm Call
      &amp;lt;/button&amp;gt;

    &amp;lt;/form&amp;gt;
  &amp;lt;/main&amp;gt;

  &amp;lt;script&amp;gt;

    function handleOnSubmit(e) {
      e.preventDefault();

      const phone = document.getElementById('phone').value

      if (phone) {
        postData('/', { phone })
          .then(data =&amp;gt; {
            if (data.success) {
              alert('Alarm call is coming on your way! Please wait....')
            } else {
              alert('Something went wrong!')
            }
          });
      }

    }


    async function postData(url = '', data = {}) {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },

        body: JSON.stringify(data)
      });
      return response.json();
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can get the file from here -&amp;gt; &lt;a href="https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/views/pages/index.ejs"&gt;https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/views/pages/index.ejs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are ready to finalize the last part for running the Dasha once the user clicks on the &lt;code&gt;Alarm Call&lt;/code&gt;. First, require the dasha&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dasha = require('@dasha.ai/sdk')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll simply use the things from &lt;code&gt;blank-slate-app&lt;/code&gt; we are not going to use everything from there; we are just going to use it for a phone call, and here is the simple version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
async function dashaCall(phone) {
  const app = await dasha.deploy('./app')

  app.connectionProvider = async (conv) =&amp;gt;
    conv.input.phone === 'chat'
      ? dasha.chat.connect(await dasha.chat.createConsoleChat())
      : dasha.sip.connect(new dasha.sip.Endpoint('default'))

  app.ttsDispatcher = () =&amp;gt; 'dasha'

  app.setExternal('function1', (args) =&amp;gt; {
    console.log(args.log)
  })

  await app.start()

  const conv = app.createConversation({ phone: phone })

  if (conv.input.phone !== 'chat') conv.on('transcription', console.log)

  const result = await conv.execute()

  console.log(result.output)

  await app.stop()
  app.dispose()
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Call this function from the post part of &lt;code&gt;index.js&lt;/code&gt;, which will look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/', (req, res) =&amp;gt; {
  dashaCall(req.body.phone)
  res.json({ success: true })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we are ready to run our app by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will load, and you can put your number here to get a call from AI. &lt;/p&gt;

&lt;p&gt;This app simplifies the overall idea; we can improve a lot. Like&lt;br&gt;
Riddles can be randomize&lt;br&gt;
UI can be rich with a dashboard and alarm time (which I didn't make because this will be really hard to follow if I do that)&lt;br&gt;
Sometimes users can just ignore the call, so if users can't solve a riddle, we should call them again. This feature we can add. We could put a number in the database if they correctly answered. Based on that, we can call again!&lt;/p&gt;

&lt;p&gt;Overall there is a lot of scopes to improve. But this was a plan to demonstrate Dasha's conversational ai, which is fun to play with. I hope you enjoyed this tutorial. &lt;/p&gt;

&lt;p&gt;If you are looking for the whole code, here is the Github repo - &lt;a href="https://github.com/nerdjfpb/Dasha-alarm-clock-example"&gt;https://github.com/nerdjfpb/Dasha-alarm-clock-example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>ai</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Stacks</title>
      <author>sndp</author>
      <pubDate>Sun, 12 Dec 2021 19:44:50 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/stacks-1ian</link>
      <guid>https://dev.to/lizardkinglk/stacks-1ian</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-stacks-"&gt;
  &lt;/a&gt;
  What are stacks ?
&lt;/h1&gt;

&lt;p&gt;A stack is a data structure that serves according to last-in first-out (LIFO) mechanism. To understand this, imagine a scenario where someone putting some objects sequentially in some container to retreive at a later time. But they will happen to take the last object first, and then second to last and so on. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-we-imagine-something-similar"&gt;
  &lt;/a&gt;
  Can we imagine something similar?
&lt;/h3&gt;

&lt;p&gt;A pistol magazine (in a video game) is a correct scenario because last round will be fired first. We can see it works according to stacks. &lt;/p&gt;

&lt;p&gt;In programming scene, a stack has many uses, including,&lt;br&gt;
i. Memory management.&lt;br&gt;
ii. Reversing an array/reordering an array.&lt;br&gt;
iii. To check the validation of an expression.&lt;br&gt;
iv. Implementing rollback option as a function.&lt;/p&gt;

&lt;p&gt;In addition, web browser and windows in operating system also uses stacks to manage memory.&lt;/p&gt;

&lt;p&gt;A stack is an abstract data type which means the logic can be applied to user-defined scenarios by the user itself. &lt;br&gt;
This is similar to implementing an abstract method definition as a concrete function. Therefore imagine abstract data type is a logic and we implement that logic ourself in code for our scenario.&lt;/p&gt;

&lt;p&gt;A stack design has the following methods need to be implemented.&lt;br&gt;
i. push&lt;br&gt;
ii. pop&lt;br&gt;
iii. peek&lt;br&gt;
iv. isEmpty&lt;/p&gt;

&lt;p&gt;We use arrays to implement these methods. I'll refer the array as container and its values as objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the object inside the parameters will be added to the container. Push is like inserting an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the last item entered to the container will be removed and will be sent to user. Pop is like removing an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;seek
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the last item will be returned to the user. It will not get removed from the container. Seek is for displaying the last item in the container when user needed to check.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;isEmpty
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the user will know whether the container is empty or not.&lt;/p&gt;

&lt;p&gt;Know that a container's size can be user-defined or it can be a value of a predefined constant when implemented using arrays.&lt;/p&gt;

&lt;p&gt;Let's assume we have implemented a MyStack class with a container's object type of int to save numbers with a user-defined container size of five.&lt;/p&gt;

&lt;p&gt;So it will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyStack stack = new MyStack(5);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll add some random five numbers and another number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stack.push(11);
stack.push(87);
stack.push(43);
stack.push(117);
stack.push(-96);

stack.push(68);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be possible to insert first five values and after that it will show a message that saying we cannot add further objects to our container. Therefore value 68 will not get pushed.&lt;/p&gt;

&lt;p&gt;Now let's try popping an item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int popped = stack.pop();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we print the variable defined as popped above, it will return the last number inserted which is -96.&lt;/p&gt;

&lt;p&gt;Now remove the next remaining items also and try popping one more time. &lt;br&gt;
Therefore if we called pop four and one more time it will show a message that says we cannot pop any further. At this time our stack is empty and isEmpty will return true.&lt;/p&gt;

&lt;p&gt;If printed the values returned at each time you will see it is the opposite of the inserted order which means we have our stack working correctly and last-in first-out rule is in effect. &lt;/p&gt;

&lt;p&gt;Learn more about stack implementation using following links&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/stack-data-structure-introduction-program/"&gt;https://www.geeksforgeeks.org/stack-data-structure-introduction-program/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
    </item>
    <item>
      <title>Setting-up Angular Routing From Scratch</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sun, 12 Dec 2021 19:26:12 +0000</pubDate>
      <link>https://dev.to/anubhab5/setting-up-angular-routing-from-scratch-1i07</link>
      <guid>https://dev.to/anubhab5/setting-up-angular-routing-from-scratch-1i07</guid>
      <description>&lt;p&gt;According to Wikipedia Routing in layman's language is -&lt;br&gt;
"&lt;strong&gt;... the process of selecting a path for traffic …&lt;/strong&gt;".&lt;br&gt;
If we talk in Angular context, in a large application there will be multiple components combined together to form a feature (e.g. login, dashboard, user profile etc.). But we cannot show all the feature to the user at the same time. Depending on a particular case we will be displaying a specific feature to the user. This process of selecting and displaying a specific feature for a specific path is known as routing. Angular implements routing using a separate module called RoutingModule. So lets quickly dive into how we can set up angular routing in our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; - Creating an angular project&lt;br&gt;
Create an angular project by typing in the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new learn-angular-routing-setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would be prompted with a question like below - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tv99hXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rnt59lj23i0iylz8hx6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tv99hXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rnt59lj23i0iylz8hx6.PNG" alt="Image description" width="569" height="90"&gt;&lt;/a&gt;&lt;br&gt;
You can opt for no by typing in &lt;strong&gt;N&lt;/strong&gt;, as we are learning how to setup Routing from scratch. :P and complete the installation process.&lt;br&gt;
Once the setup is done open the code folder in your favorite code editor. I have chosen VS Code. It would look something like below - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNjSmSSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2fv1axd0do4may9ysuj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNjSmSSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2fv1axd0do4may9ysuj.PNG" alt="Image description" width="600" height="745"&gt;&lt;/a&gt;&lt;br&gt;
Now under _src _&amp;gt; _app _folder we start our real work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; - Create components to be displayed on each route&lt;br&gt;
Now lets create two components by using the below command -&lt;br&gt;
First Component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate component componentOne
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second Component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate component componentTwo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; - Creating the application routing module&lt;br&gt;
Inside the app folder create a file named - &lt;br&gt;
&lt;u&gt;app-routing.module.ts&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; - Setting up the routing module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NgModule } from "@angular/core";
import { RouterModule, Routes } from '@angular/router';
import { ComponentOneComponent } 
        from "./component-one/component-one.component";
import { ComponentTwoComponent } 
        from "./component-two/component-two.component";

const routes: Routes = [
    {
        path: 'one',
        component: ComponentOneComponent
    },
    {
        path: 'two',
        component: ComponentTwoComponent
    }
];

@NgModule({
    declarations: [],
    imports: [
        RouterModule.forRoot(routes)
    ],
    providers: [],
    exports: [
        RouterModule
    ],
    bootstrap: []
})
export class AppRoutingModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, now lets understand the above code piece by piece.&lt;/p&gt;

&lt;p&gt;a. We are declaring and exporting a class AppRoutingModule.&lt;br&gt;
b. Decorating the class with NgModule decorator &lt;br&gt;
c. Declaring a constant &lt;code&gt;routes&lt;/code&gt; array. It contains all the various routes you need in your application. Every route object will contain primarily two items (I would say as of now)&lt;br&gt;
  i. path-to be displayed in the url of the browser&lt;br&gt;
  ii. component-the component to be displayed when the URL is hit&lt;br&gt;
d. In the import array of the NgModule decorator we pass the routes we declared in the step &lt;em&gt;c&lt;/em&gt; using &lt;br&gt;
               &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;&lt;br&gt;
e. In the exports array we pass the &lt;code&gt;RouterModule&lt;/code&gt; so that it can be consumed/ imported by the &lt;code&gt;appModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; - Add the router module in the application module&lt;br&gt;
Next we open the app.module.ts file and import the Routing Module we created just now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---tBtcQGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvch5krqextla1rpp62l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---tBtcQGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvch5krqextla1rpp62l.PNG" alt="Image description" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; Create a placeholder to display the component&lt;br&gt;
So we have done the setup, but we need a placeholder where the component will sit when the particular URL is hit. For this we create a placeholder in our app.component.html by adding the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; that's it. We are done!!!&lt;br&gt;
Now let's start the application by using &lt;code&gt;npm start&lt;/code&gt;. By default the application will open in localhost port 4200. So open your favorite browser and type in &lt;code&gt;http://localhost:4200/one&lt;/code&gt;&lt;br&gt;
You will see the below output -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39VKjnGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2ekqcmdmjejitnlrug.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39VKjnGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2ekqcmdmjejitnlrug.PNG" alt="Image description" width="364" height="179"&gt;&lt;/a&gt;&lt;br&gt;
and when you navigate to &lt;code&gt;http://localhost:4200/two&lt;/code&gt; the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeejDaEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0fpsupr8duvr8txrtr2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeejDaEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0fpsupr8duvr8txrtr2.PNG" alt="Image description" width="303" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you have successfully setup your routing.&lt;/p&gt;

&lt;p&gt;Cheers...&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>typescript</category>
      <category>routing</category>
    </item>
    <item>
      <title>Spell check - Text analysis</title>
      <author>bhagvan kommadi</author>
      <pubDate>Sun, 12 Dec 2021 19:22:21 +0000</pubDate>
      <link>https://dev.to/bhaggu/spell-check-text-analysis-3mm2</link>
      <guid>https://dev.to/bhaggu/spell-check-text-analysis-3mm2</guid>
      <description>&lt;p&gt;Tried spell check for a specific domain data in health care and consumer.  Basic python spell check was not sufficient. The test which was given as an example did not work. Then i started looking at Spacy contextual check. (with large english dataset). &lt;/p&gt;

&lt;p&gt;This had problem with domain specific proper nouns.  Drug names, disease names, electronic brands were not getting corrected.&lt;/p&gt;

&lt;p&gt;please check out:&lt;br&gt;
&lt;a href="https://spacy.io/universe/project/contextualSpellCheck"&gt;https://spacy.io/universe/project/contextualSpellCheck&lt;/a&gt;&lt;/p&gt;

</description>
      <category>spacy</category>
      <category>textanalysis</category>
      <category>nlp</category>
      <category>python</category>
    </item>
    <item>
      <title>LeetCode - Gas Station</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Sun, 12 Dec 2021 18:23:02 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-gas-station-iig</link>
      <guid>https://dev.to/_alkesh26/leetcode-gas-station-iig</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;There are &lt;em&gt;n&lt;/em&gt; gas stations along a circular route, where the amount of gas at the &lt;em&gt;ith&lt;/em&gt; station is &lt;em&gt;gas[i]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You have a car with an unlimited gas tank and, it costs &lt;em&gt;cost[i]*of gas to travel from the *ith&lt;/em&gt; station to its next &lt;em&gt;(i + 1)th&lt;/em&gt; station. You begin the journey with an empty tank at one of the gas stations.&lt;/p&gt;

&lt;p&gt;Given two integer arrays &lt;em&gt;gas&lt;/em&gt; and &lt;em&gt;cost&lt;/em&gt;, return &lt;em&gt;the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise, return -1&lt;/em&gt;. If there exists a solution, it is &lt;strong&gt;guaranteed&lt;/strong&gt; to be &lt;strong&gt;unique&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/gas-station"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/gas-station"&gt;https://leetcode.com/problems/gas-station&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: gas = [1, 2, 3, 4, 5], cost = [3, 4, 5, 1, 2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: gas = [2, 3, 4], cost = [3, 4, 3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 units of gas, but you only have 3.
Therefore, you can't travel around the circuit once, no matter where you start.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- gas.length == n
- cost.length == n
- 1 &amp;lt;= n &amp;lt;= 10^5
- 0 &amp;lt;= gas[i], cost[i] &amp;lt;= 10^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#brute-force-approach"&gt;
  &lt;/a&gt;
  Brute force approach
&lt;/h4&gt;

&lt;p&gt;The brute force solution is to consider every gas station as a starting point&lt;br&gt;
and see if there is a possible complete circuit.&lt;/p&gt;

&lt;p&gt;To check every station, we would use two nested loops.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The time complexity of the above approach is &lt;strong&gt;O(N^2)&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#optimized-solution"&gt;
  &lt;/a&gt;
  Optimized solution
&lt;/h4&gt;

&lt;p&gt;If we look at the problem, our point of concern should be the total amount of gas should be greater than the total cost.&lt;br&gt;
The only factor we need to consider is setting the starting point.&lt;/p&gt;

&lt;p&gt;Let's jump to the algorithm directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- set current, total, start and diff to 0

- loop for i = 0; i &amp;lt; gas.size(); i++
  - diff = gas[i] -  cost[i]

  - total += diff
  - current += diff

  // current value refers to the total gas - total cost till ith station.
  // if that value is negative, this means gas is exhausted, and we cannot complete the circuit.
  // Hence we set the current index as the start.
  - if current &amp;lt; 0
    - start = i + 1
    - current = 0

- if total &amp;gt;= 0
  - return start

- return -1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;canCompleteCircuit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;canCompleteCircuit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gas&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;canCompleteCircuit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: gas = [1, 2, 3, 4, 5], cost = [3, 4, 5, 1, 2]

Step 1: current = 0
        total = 0
        diff = 0
        start = 0

Step 2: loop for i = 0; i &amp;lt; gas.size()
        i &amp;lt; gas.size()
        0 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[0] - cost[0]
             = 1 - 3
             = -2

        total = total + diff
              = 0 - 2
              = -2

        current = current + diff
                = 0 - 2
                = -2

        if current &amp;lt; 0
          - -2 &amp;lt; 0
          - true

            start = i + 1
                  = 0 + 1
                  = 1

            current = 0

        i++
        i = 1

Step 3: i &amp;lt; gas.size()
        1 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[1] - cost[1]
             = 2 - 4
             = -2

        total = total + diff
              = -2 + (-2)
              = -4

        current = current + diff
                = 0 - 2
                = -2

        if current &amp;lt; 0
          - -2 &amp;lt; 0
          - true

            start = i + 1
                  = 1 + 1
                  = 2

            current = 0

        i++
        i = 2

Step 4: i &amp;lt; gas.size()
        2 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[2] - cost[2]
             = 3 - 5
             = -2

        total = total + diff
              = -4 + (-2)
              = -6

        current = current + diff
                = 0 - 2
                = -2

        if current &amp;lt; 0
          - -2 &amp;lt; 0
          - true

            start = i + 1
                  = 2 + 1
                  = 3

            current = 0

        i++
        i = 3

Step 5: i &amp;lt; gas.size()
        3 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[3] - cost[3]
             = 4 - 1
             = 3

        total = total + diff
              = -6 + 3
              = -3

        current = current + diff
                = 0 + 3
                = 3

        if current &amp;lt; 0
          - 3 &amp;lt; 0
          - false

        i++
        i = 4

Step 6: i &amp;lt; gas.size()
        4 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[4] - cost[4]
             = 5 - 2
             = 3

        total = total + diff
              = -3 + 3
              = 0

        current = current + diff
                = 3 + 3
                = 6

        if current &amp;lt; 0
          - 6 &amp;lt; 0
          - false

        i++
        i = 5

Step 7: i &amp;lt; gas.size()
        5 &amp;lt; 5
        false

Step 8: if total &amp;gt;= 0
          - 0 &amp;gt;= 0
          - true

Step 9: return start

So the answer we return is 3.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Week 3 of 100DaysOfCode JavaScript Challenge</title>
      <author>Arif Iqbal</author>
      <pubDate>Sun, 12 Dec 2021 18:20:16 +0000</pubDate>
      <link>https://dev.to/arifiqbal/week-3-of-100daysofcode-javascript-challenge-56p2</link>
      <guid>https://dev.to/arifiqbal/week-3-of-100daysofcode-javascript-challenge-56p2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#day-13-dec-06-2021-monday"&gt;
  &lt;/a&gt;
  Day 13: Dec 06, 2021. Monday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; ES6&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write Concise Object Literal Declarations Using Object Property Shorthand:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ES6 adds support for defining object literals more easily. If you have to write same &lt;code&gt;key:value&lt;/code&gt; pair like &lt;code&gt;name:name&lt;/code&gt;, you can just write &lt;code&gt;name&lt;/code&gt; once and it will be interpreted as &lt;code&gt;name:name&lt;/code&gt;. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is identical to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Write Concise Declarative Functions with ES6:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In ES5 you require to use the keyword &lt;code&gt;function&lt;/code&gt; when declaring functions inside objects, in ES6 not mandatory.&lt;/p&gt;

&lt;p&gt;ES5 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, my name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ES6 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use class Syntax to Define a Constructor Function:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ES5 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carrot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;carrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ES6 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carrot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;carrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use getters and setters to Control Access to an Object:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedAuthor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updatedAuthor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;novel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anonymous&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;novel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;novel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newAuthor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;novel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Create a Module Script:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some time ago, the role of JavaScript in web was not very prominent. Today, it is huge. ES5 introduced modules, files you can import and export.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script type="module" src="path/filename.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use export to Share a Code Block:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or multiple functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export {add, subtract}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Reuse JavaScript Code Using import:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {add, subtract} from './some_functions.js';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#day-14-dec-08-2021-wednesday"&gt;
  &lt;/a&gt;
  Day 14: Dec 08, 2021. Wednesday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; ES6&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use * to Import Everything from a File:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import * as myMathModule from './math_functions.js'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;myMathModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;myMathModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Create an Export Fallback with export default:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Import a Default Export:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import subtract from './math_functions.js'&lt;/code&gt; notice we didn't surround the subtrackt  curly baraces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a JavaScript Promise:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeServerRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Complete a Promise with resolve and reject:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A promise has three states: pending, fulfilled, and rejected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeServerRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CONDITION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition not met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Handle a Fulfilled Promise with then:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeServerRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CONDITION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition not met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Handle a Rejected Promise with catch:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeServerRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#day-15-dec-09-2021-thursday"&gt;
  &lt;/a&gt;
  Day 15: Dec 09, 2021. Thursday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; Regular Expressions&lt;/p&gt;

&lt;p&gt;Regular Expressions often referred to as Regex or Regexp are patterns in programming used for mapping, searching, and replacing text. Regular expressions are very powerful but could be hard to read and understand as they use special characters. In this module we special characters, capture groups, positive, negative lookahead, and other techniques to match any text you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using the Test Method:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;test()&lt;/code&gt; method is one of the many ways used in JavaScript for regular expressions. It takes a regular expression and applies it to a string. It returns true if the match is found, or otherwise returns false.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Literal Strings:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;console.log(/Hello/.test("Hello World"));&lt;/code&gt; will return true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.log(/Hello/.test("hello World"));&lt;/code&gt; will return false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Match a Literal String with Different Possibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The OR operator &lt;code&gt;|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(/dog|cat|hen|fish/.test("James has a fish pet."));&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ignore Case While Matching:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;i&lt;/code&gt; flag you can ignore case. &lt;code&gt;/ignorecase/i&lt;/code&gt; will match all &lt;code&gt;iGnoreCase&lt;/code&gt;, ignoreCase&lt;code&gt;, and&lt;/code&gt;ignorecase`.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extract Matches:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;match()&lt;/code&gt; is the opposite of the &lt;code&gt;test()&lt;/code&gt; method. &lt;code&gt;/Regex/.test('String');&lt;/code&gt; vs &lt;code&gt;'String'.match(/Regex/)&lt;/code&gt;. &lt;code&gt;match()&lt;/code&gt; returns the found string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find More Than the First Match:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;g&lt;/code&gt; flag in Regex &lt;code&gt;/Regex/g&lt;/code&gt; will match all patterns, not the first only. &lt;code&gt;'example string with example repeated'.match(/example/g)&lt;/code&gt; will return &lt;code&gt;[example, example]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Anything with Wildcard Period:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The wildcard character &lt;code&gt;.&lt;/code&gt;, also called &lt;code&gt;dot&lt;/code&gt; or &lt;code&gt;period&lt;/code&gt; matches any character. &lt;code&gt;/.un/.test('String')&lt;/code&gt; will return true for all strings &lt;code&gt;fun&lt;/code&gt;, &lt;code&gt;gun&lt;/code&gt; and &lt;code&gt;nun&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Single Character with Multiple Possibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/litral/&lt;/code&gt; matches the literal string, &lt;code&gt;/./&lt;/code&gt; matches anything. These two are the extremes. There are some options in between. A group or class of characters could be placed inside the brackets &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; to match against a character.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/b[aiu]g/&lt;/code&gt; will match against &lt;code&gt;bag&lt;/code&gt;, &lt;code&gt;big&lt;/code&gt;, and &lt;code&gt;bug&lt;/code&gt; but not &lt;code&gt;bog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Letters of the Alphabet::&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/[a-e]/&lt;/code&gt; will match all letters from a to e.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Numbers and Letters of the Alphabet:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The range character hyphen &lt;code&gt;-&lt;/code&gt; is not limited to letters only. It can also be used to make a range of numbers like &lt;code&gt;[0-5]&lt;/code&gt; will match all numbers between 0 and 5 inclusive both ends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Single Characters Not Specified:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The caret character &lt;code&gt;^&lt;/code&gt; is used to negate characters. So for we have used regex to match characters or character sets. The symbol is used to not match characters. &lt;code&gt;/[^aeiou]/&lt;/code&gt; matches all characters but not the vowels. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-16-dec-10-2021-friday"&gt;
  &lt;/a&gt;
  Day 16: Dec 10, 2021. Friday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; Regular Expressions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Characters that Occur One or More Times:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; sign tries to find one or more occurrences of a character or a group of characters that are repeated consecutively. &lt;code&gt;"use".match(/s+/)&lt;/code&gt; will return &lt;code&gt;["s"]&lt;/code&gt;  and &lt;code&gt;"Mississippi".match(/s+/)&lt;/code&gt; will return &lt;code&gt;["ss"]&lt;/code&gt;, while  &lt;code&gt;"Mississippi".match(/s+/g)&lt;/code&gt; will match &lt;code&gt;"ss"&lt;/code&gt; twice in &lt;code&gt;Mississippi&lt;/code&gt; and will return &lt;code&gt;["ss", "ss"]&lt;/code&gt;. &lt;code&gt;"London".match(/s+/g)&lt;/code&gt; will not match anything and will return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Characters that Occur Zero or More Times:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; sign is used to match one or more characters while the asterisk or star &lt;code&gt;*&lt;/code&gt; character is used to match zero or more characters. &lt;code&gt;"google".match(/go*/)&lt;/code&gt; will return &lt;code&gt;goo&lt;/code&gt;, &lt;code&gt;"gut.match(/go*/)"&lt;/code&gt; will return &lt;code&gt;g&lt;/code&gt; while &lt;code&gt;"ball".match(/go*/)&lt;/code&gt; will return null.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find Characters with Lazy Matching:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Regular expressions are &lt;em&gt;greedy&lt;/em&gt; by default. That means they will always match the longest possible pattern. However, you can change this behavior to &lt;em&gt;Lazy&lt;/em&gt; match by introducing the &lt;code&gt;?&lt;/code&gt; mark in the Regex. &lt;code&gt;"titanic".match(/t[a-z]*i/)&lt;/code&gt; will return &lt;code&gt;["titani"]&lt;/code&gt; while &lt;code&gt;"titanic".match(/t[a-z]*?i/)&lt;/code&gt; will return &lt;code&gt;["ti"]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find One or More Criminals in a Hunt:&lt;/strong&gt; (exercise pre lessons)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"C".match(/C+/)&lt;/code&gt; will catch one criminal while &lt;code&gt;"adfadfaCCCkkkkk".match(/C+/)&lt;/code&gt; will catch three criminals in a row.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Beginning String Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Outside of character groups (&lt;code&gt;[]&lt;/code&gt;), the caret sign &lt;code&gt;^&lt;/code&gt; is used to find pattern at the beginning of a string. /^Cal/.test("Cal likes racing") returns &lt;code&gt;true&lt;/code&gt; while &lt;code&gt;/^Cal/.test("Now Cal is in the mid")&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-17-dec-11-2021-saturday"&gt;
  &lt;/a&gt;
  Day 17: Dec 11, 2021. Saturday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; Regular Expressions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Ending String Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;$&lt;/code&gt; sign at the end of a regular expression will search for that pattern at end of the string. &lt;code&gt;/story$/.test("This is a never-ending story");&lt;/code&gt; will return true while &lt;code&gt;/story$/.test("Sometimes a story ends quickly.");&lt;/code&gt;  will return false.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match All Letters and Numbers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/[a-z]/&lt;/code&gt; matches all lowercase letters&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/[A-Z]/&lt;/code&gt; matches all uppercase letters&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/[0-9]/&lt;/code&gt; matches numbers zero to 9&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/[a-zA-Z0-9]/&lt;/code&gt; matches all the above three&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/\w/&lt;/code&gt; is a shorthand for &lt;code&gt;/[a-zA-Z0-9_]/&lt;/code&gt; that matches all lower/upper case letters, numbers zero to nine, and the underscore character.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Match Everything But Letters and Numbers:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/\W/&lt;/code&gt; is the opposite of the alphanumeric pattern &lt;code&gt;/\w/&lt;/code&gt; that matches everything but not the alphabets, numbers, and the underscore character. This is identical to &lt;code&gt;/[^a-zA-Z0-9_]/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match All Numbers:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;/\d/&lt;/code&gt; is a shortcut for &lt;code&gt;/[0-9]/&lt;/code&gt; character class that matches a single digit from zero to nine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match All Non-Numbers:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/\D/&lt;/code&gt; is equal to &lt;code&gt;/[^0-9]/&lt;/code&gt; character class that matches a single character that is not a digit between zero and nine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restrict Possible Usernames:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apply your Regix skills to restrict usernames.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How To Swap 2 Unique Primary Keys In The Same Table With MySQL</title>
      <author>Devtonight</author>
      <pubDate>Sun, 12 Dec 2021 18:18:13 +0000</pubDate>
      <link>https://dev.to/devtonight/how-to-swap-2-unique-primary-keys-in-the-same-table-with-mysql-2bmn</link>
      <guid>https://dev.to/devtonight/how-to-swap-2-unique-primary-keys-in-the-same-table-with-mysql-2bmn</guid>
      <description>&lt;p&gt;Sometimes, we need to swap two unique primary keys in MySQL database tables. We can use two separate &lt;code&gt;update&lt;/code&gt; queries like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE table_name SET id = 1 WHERE id = 2;
UPDATE table_name SET id = 2 WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it does not work as we expected. The reason is, it tries to create duplicate primary keys. The 1st query tries to change the id value of the 2nd record to 1. But that id = 1 record already exists. So MySQL rejects the execution of the query as there cannot be any duplicate primary key.&lt;/p&gt;

&lt;p&gt;But we can slightly modify the above queries to avoid trying to create duplicate primary keys in 3 steps. First, we can change the id of the first row to a non-existing, temporary value something like 0. Then we can change the 2nd row id to 1. At this moment, it will not make any conflicts like before as the original first row id value is 0. Then, we can change the id of the original first row id to 2.&lt;/p&gt;

&lt;p&gt;Before running this, make sure to replace the &lt;code&gt;table_name&lt;/code&gt;, primary key ids &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; with your related primary key ids.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE table_name SET id = 0 WHERE id = 1;
UPDATE table_name SET id = 1 WHERE id = 2;
UPDATE table_name SET id = 2 WHERE id = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can see both 1st and 2nd row ids have successfully swapped.&lt;/p&gt;

&lt;p&gt;Feel free to visit &lt;a href="https://devtonight.com?utm_source=dev&amp;amp;utm_medium=questions&amp;amp;utm_campaign=how-to-swap-2-unique-primary-keys-in-the-same-table-with-mysql"&gt;devtonight.com&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>sql</category>
      <category>swap</category>
      <category>howto</category>
    </item>
    <item>
      <title>Form Lib 1.9.0 released</title>
      <author>Volker Schukai</author>
      <pubDate>Sun, 12 Dec 2021 18:00:18 +0000</pubDate>
      <link>https://dev.to/schukai/form-lib-180-released-2d5f</link>
      <guid>https://dev.to/schukai/form-lib-180-released-2d5f</guid>
      <description>&lt;p&gt;Today we have released the latest edition of our Form Lib. Our library offers us the possibility to link forms with data. In addition, we have programmed here various controls that are not available in the standard. &lt;/p&gt;

&lt;p&gt;Only the highlights are described here. The full functionality can be found in the &lt;a href="https://monsterjs.org/en/doc/components/form/1.9.0/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This release builds on &lt;a href="https://monsterjs.org"&gt;Monster 1.28&lt;/a&gt; and contains minor improvements in the handling of data sources. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tree-select"&gt;
  &lt;/a&gt;
  Tree Select
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEWIANYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FGbYUSHXwAYkZ8g.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuJ1T6Sw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1442172077356818437/OkFrYQed_normal.png" alt="🎄monster🐊 🦖 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        🎄monster🐊 🦖
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @getthemonster
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ux"&gt;#ux&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ui"&gt;#ui&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:36 PM - 12 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1470100260601180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1470100260601180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1470100260601180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monster-treeselect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;monster&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;treeselect&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;monster&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/monster-treeselect&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;p&gt;We try to minimize breaking changes, but some changes are needed to improve workflows, performance, scalability, and more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new names for the templates of Select and Treeselect are now called &lt;code&gt;labelTemplate&lt;/code&gt; and &lt;code&gt;valueTemplate&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;hope you enjoy it!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//Monster%201.28%20released"&gt;https://dev.to/schukai/monster-128-released-e4b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/schukai/manage-forms-with-monster-4nf5"&gt;Forms, nothing but forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monsterjs.org/en/doc/components/form/1.9.0/"&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monsterjs.org"&gt;project home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monsterjs.org/en/doc/1.25.0/tutorial-form-example.html"&gt;form example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://about.schukai.com/de/jobs/"&gt;we are hiring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>dom</category>
      <category>node</category>
      <category>form</category>
    </item>
  </channel>
</rss>
