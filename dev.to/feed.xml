<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Everything you need to know about AWS re:Invent 2021 Developer &amp; Community Talks</title>
      <author>Sabeen</author>
      <pubDate>Wed, 10 Nov 2021 19:58:49 +0000</pubDate>
      <link>https://dev.to/sabeen_sabeen/everything-you-need-to-know-about-aws-reinvent-2021-developer-community-talks-27do</link>
      <guid>https://dev.to/sabeen_sabeen/everything-you-need-to-know-about-aws-reinvent-2021-developer-community-talks-27do</guid>
      <description>&lt;p&gt;If this is your first or fifth time at re:Invent it's always good to have a handy pocket guide to help you along the way. &lt;/p&gt;

&lt;p&gt;While there's a lot of great content at re:Invent this guide focuses on BuildOn.AWS and Community related events.&lt;/p&gt;

&lt;p&gt;You can find all sessions &lt;a href="https://portal.awsevents.com/events/reInvent2021/dashboard/event/sessions"&gt;here&lt;/a&gt; after you register&amp;gt; Enter the session ID (ex.BOA201) in the search bar&amp;gt; star the session to save it in your favorites&amp;gt; check your schedule for any overlaps. &lt;/p&gt;

&lt;p&gt;There are two ways to attend: In-person &amp;amp; Virtual&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pro-tip-pressed-for-time-attend-chalk-talks-amp-workshops-inperson-watch-breakout-sessions-amp-keynotes-later-on-virtual-reinvent-once-aws-makes-them-available-on-demand"&gt;
  &lt;/a&gt;
  PRO TIP: Pressed for time? Attend Chalk Talks &amp;amp; Workshops in-person, watch Breakout Sessions &amp;amp; Keynotes later on &lt;a href="https://portal.awsevents.com/events/reInvent2021/registration/?regcode=8ghNUuUg&amp;amp;trk=www.google.com"&gt;Virtual re:Invent&lt;/a&gt; once AWS makes them available on demand.
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#what-to-attend"&gt;
  &lt;/a&gt;
  What to attend:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#breakout-sessions-available-on-virtual-reinvent"&gt;
  &lt;/a&gt;
  Breakout Sessions (available on virtual re:Invent)
&lt;/h2&gt;

&lt;p&gt;-BOA201 15 years of AWS with Jeff Barr&lt;br&gt;
-BOA301 Using events and workflows to build distributed apps&lt;br&gt;
-BOA302 Build an app to find your next favorite brew&lt;br&gt;
-BOA306 Twelve-Factor apps on containers, running everywhere&lt;br&gt;
-BOA307 Analyze time-series data in real time and in your data lake&lt;br&gt;
-COM204 Building data  lakes in highly regulated markets&lt;br&gt;
-COM303 Be prepared:  Security is shifting left&lt;br&gt;
-COM203 Enable  continuous delivery and resiliency for a static website&lt;br&gt;
-COM202 Drawing the New  York City skyline with Amazon Aurora Serverless v2&lt;br&gt;
-COM201 Productizing a  serverless MVP&lt;br&gt;
-COM301 Improving  traffic congestion with machine learning&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chalk-talks"&gt;
  &lt;/a&gt;
  Chalk Talks
&lt;/h2&gt;

&lt;p&gt;-BOA202 5 ways to stay on top of your cloud learning journey&lt;br&gt;
-BOA303 Build end-to-end CI/CD pipelines for your iOS apps&lt;br&gt;
-BOA305 Creating an immersive gaming experience with IoT &amp;amp; ML&lt;br&gt;
-BOA308 Build production-ready full-stack apps with GraphQL&lt;br&gt;
-BOA309 Emerging tech for the next 5 years: Future-proof your skills&lt;br&gt;
-BOA312 Do computers dream of code? From human language to applications &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workshops"&gt;
  &lt;/a&gt;
  Workshops
&lt;/h2&gt;

&lt;p&gt;-BOA304 We like to move it (to the cloud)! &lt;br&gt;
-BOA310 Resilient and well-architected apps with chaos engineering&lt;br&gt;
-BOA311 Boost application performance and security at the edge&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go"&gt;
  &lt;/a&gt;
  Where To Go
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#inperon"&gt;
  &lt;/a&gt;
  In-Peron:
&lt;/h4&gt;

&lt;p&gt;-AWS Heroes Lounge @Venetian Expo&lt;br&gt;
-Developers Lounge @Venetian Expo&lt;br&gt;
-&lt;a href="https://reinvent.awsevents.com/play/?trk=www.google.com"&gt;Midnight Madness&lt;/a&gt; Sunday 10:30 PM The Venetian &lt;br&gt;
-&lt;a href="https://reinvent.awsevents.com/play/quirky/?trk=www.google.com"&gt;Quirky activities&lt;/a&gt; 6:00 PM Caesars Forum, The Venetian &lt;br&gt;
-&lt;a href="https://reinvent.awsevents.com/play/?trk=www.google.com"&gt;re:Play party&lt;/a&gt; THU 7:30 PM Las Vegas Festival Grounds &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#virtual"&gt;
  &lt;/a&gt;
  Virtual:
&lt;/h4&gt;

&lt;p&gt;-Follow &lt;a href="https://twitter.com/awsdevelopers"&gt;@awsdevelopers&lt;/a&gt; Twitter for the more updates &lt;br&gt;
-Checkout your local &lt;a href="https://aws.amazon.com/developer/community/usergroups/"&gt;user group&lt;/a&gt;. I know some are doing local watch parties! thats a nice way to still feel part of it.&lt;/p&gt;

&lt;p&gt;Need more? &lt;br&gt;
-Check out Andra Glavan's &lt;a href="https://dev.to/andraglavan"&gt;re:Invent post&lt;/a&gt;&lt;br&gt;
-Check out &lt;a href="https://dev.to/bhuvanas"&gt;Bhuvaneswari Subramani post&lt;/a&gt; for re:Invent Builder sessions&lt;br&gt;
-Watch Mike Chambers' &lt;a href="https://www.youtube.com/watch?v=Zs6RjJd6CD4"&gt;YouTube Video&lt;/a&gt; for Virtual re:Invent tips&lt;br&gt;
-Here's a guide on how &lt;a href="https://reinvent.awsevents.com/static/media/guides/2021_reInvent_Reserved-Seating.pdf"&gt;reserved seating works&lt;/a&gt;&lt;br&gt;
-Check out the AWS Hero Authored &lt;a href="https://reinvent.awsevents.com/how-to-reinvent/attendee-guides/"&gt;re:Invent Guides&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>guide</category>
      <category>reinvent2021</category>
      <category>awscommunity</category>
    </item>
    <item>
      <title>TUTORIAL: Add Text Language Translation To Your App</title>
      <author>Backendless</author>
      <pubDate>Wed, 10 Nov 2021 19:47:07 +0000</pubDate>
      <link>https://dev.to/backendless/tutorial-add-text-language-translation-to-your-app-l43</link>
      <guid>https://dev.to/backendless/tutorial-add-text-language-translation-to-your-app-l43</guid>
      <description>&lt;p&gt;In this article, we show how easy it is to integrate a translation service into a &lt;a href="https://backendless.com/"&gt;Backendless&lt;/a&gt; app using our Zapier integration.&lt;/p&gt;

&lt;p&gt;Backendless is incredibly feature rich, but no platform can cover every niche use case. That’s why we have a &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt; integration, allowing you to access thousands of third-party tools and quickly integrate them into your Backendless app.&lt;/p&gt;

&lt;p&gt;For this demo, we will be building a simple translation app. The purpose of the app is to take user-entered text and translate it into the user’s selected language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backendless-setup"&gt;
  &lt;/a&gt;
  Backendless Setup
&lt;/h2&gt;

&lt;p&gt;We will start on the Backendless side of the equation. Here, we will set up a single-function &lt;a href="https://backendless.com/developers/#ui-builder"&gt;UI Builder&lt;/a&gt; app with a database. You can easily integrate the functionality we show here into another application.&lt;/p&gt;

&lt;p&gt;The demo application’s database table is very simple and consists of two fields: &lt;code&gt;demoText&lt;/code&gt; and &lt;code&gt;language&lt;/code&gt;. The &lt;code&gt;demoText&lt;/code&gt; field will store the text that needs to be translated as well as any text that has already been translated.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;language&lt;/code&gt; field will store the value of the language to which you want to translate the text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fRWgJ27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/01-Create-primary-table-in-Backendless-600x172.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fRWgJ27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/01-Create-primary-table-in-Backendless-600x172.jpg" alt="Create primary table in Backendless" width="600" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app user interface consists of a &lt;strong&gt;Select&lt;/strong&gt; element, an &lt;strong&gt;Input&lt;/strong&gt; element, and “Reset” and “Save and translate” &lt;strong&gt;Buttons&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_laf8gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/02-Basic-online-translator-app-UI.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_laf8gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/02-Basic-online-translator-app-UI.jpg" alt="Basic online translator app UI" width="616" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the “Save and translate” button, the following actions are performed in the logic below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An object with data from the form elements is created and written to the &lt;code&gt;formData&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;The created object is saved in the database table. Saving an object to a table will be a signal (trigger) for Zapier to initiate an action. On this trigger, Zapier will receive the saved object with data and transfer it to the “Translate by Zapier” app. “Translate by Zapier” will translate the text and then the object will be updated in the Backendless database table.&lt;/li&gt;
&lt;li&gt;When the object is updated in the database table, the logic that is in the “RT Data Update Listener” will be executed and the translated text will be displayed in the user interface.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ueWdpbwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/03-Save-and-Translate-button-Codeless-logic.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ueWdpbwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/03-Save-and-Translate-button-Codeless-logic.jpg" alt="Save and Translate button Codeless logic" width="660" height="591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that we also include logic to disable the “Save and translate” button while the translation is in progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zapier-setup"&gt;
  &lt;/a&gt;
  Zapier Setup
&lt;/h2&gt;

&lt;p&gt;Now let’s move to the Zapier side. If you don’t have an account with Zapier, you will first need to register and log into your Zapier account. A free account is all you will need for this demo.&lt;/p&gt;

&lt;p&gt;Creating the automation with Zapier will consist of three steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-define-a-trigger"&gt;
  &lt;/a&gt;
  Step 1 – Define a trigger
&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is to define a Trigger. Triggers are actions Zapier uses to start performing an action. In our case, saving the object to the database will act as a trigger.&lt;/p&gt;

&lt;p&gt;Click on the button “Create Zap”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--denBzHar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/04-Create-new-zap-in-Zapier-1200x359.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--denBzHar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/04-Create-new-zap-in-Zapier-1200x359.jpg" alt="Create new zap in Zapier" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the “App Event” field, select Backendless.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cB-pAPQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/05-Select-Backendless-in-App-Event-field-in-Zapier-600x281.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cB-pAPQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/05-Select-Backendless-in-App-Event-field-in-Zapier-600x281.jpg" alt="Select Backendless in App Event field in Zapier" width="600" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the “Trigger Event” drop-down list, select “Object Created” and click the “Continue” button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAhQqJ0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/06-Assign-Object-Created-as-event-trigger-in-Zapier-600x300.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAhQqJ0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/06-Assign-Object-Created-as-event-trigger-in-Zapier-600x300.jpg" alt="Assign Object Created as event trigger in Zapier" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will need to enter your credentials with which you log into Backendless Console and click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CyFqYrvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07-Add-Backendless-credentials-in-Zapier-582x533.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CyFqYrvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07-Add-Backendless-credentials-in-Zapier-582x533.jpg" alt="Add Backendless credentials in Zapier" width="582" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you used a social account to register with Backendless, you will need to add a password for your account. To add a password, visit your developer profile here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tK9eheDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07a-Add-Password-in-Backendless-600x299.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tK9eheDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/07a-Add-Password-in-Backendless-600x299.png" alt="Add Password in Backendless" width="600" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the trigger settings, you need to select the name of your Backendless app and the name of the table into which the object is saved. Then, click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFxaK-D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/08-Select-app-name-and-table-name-from-Backendless-in-Zapier-600x253.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFxaK-D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/08-Select-app-name-and-table-name-from-Backendless-in-Zapier-600x253.jpg" alt="Select app name and table name from Backendless in Zapier" width="600" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you need to test your trigger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjbFgZhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/09-Test-trigger-in-Zapier-600x287.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjbFgZhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/09-Test-trigger-in-Zapier-600x287.jpg" alt="Test trigger in Zapier" width="600" height="287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the test is successful, the object with the data that was saved to the table will be displayed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0WfkCnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/10-Zapier-trigger-test-response-from-Backendless-600x350.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0WfkCnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/10-Zapier-trigger-test-response-from-Backendless-600x350.jpg" alt="Zapier trigger test response from Backendless" width="600" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-set-up-a-trigger-action"&gt;
  &lt;/a&gt;
  Step 2 – Set up a trigger action
&lt;/h3&gt;

&lt;p&gt;In the next step, we will choose what action should be performed after the trigger is fired.&lt;/p&gt;

&lt;p&gt;Select the “Translate by Zapier” application from the drop-down list and select “Translate Text” from the “Action Event” list. Click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYYQk0XQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/11-Select-Translate-by-Zapier-as-app-and-Translate-Text-as-action-event-768x386.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYYQk0XQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/11-Select-Translate-by-Zapier-as-app-and-Translate-Text-as-action-event-768x386.jpg" alt="Select Translate by Zapier as app and Translate Text as action event" width="768" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure the action as shown below. The “Source Language” field is intentionally left blank to automatically detect the language. The “Text” and “Target Language” fields will contain data from the Backendless database table fields: &lt;code&gt;demoText&lt;/code&gt; and &lt;code&gt;language&lt;/code&gt;. Click the continue button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93hZFRXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/12-Configure-Zapier-translate-action-768x481.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93hZFRXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/12-Configure-Zapier-translate-action-768x481.jpg" alt="Configure Zapier translate action" width="768" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s test again. If you haven’t already, enter some text in the database and a target language. In our case, we used &lt;code&gt;Happy codeless coding&lt;/code&gt; and &lt;code&gt;fr&lt;/code&gt; (for French).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ChExh_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/13-Test-translation-by-Zapier-action-768x408.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ChExh_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/13-Test-translation-by-Zapier-action-768x408.jpg" alt="Test translation by Zapier action" width="768" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the test is successful, you will see the translated text and you can proceed to the third step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QD2_uT0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/14-Successful-translation-test-in-Zapier-768x393.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QD2_uT0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/14-Successful-translation-test-in-Zapier-768x393.jpg" alt="Successful translation test in Zapier" width="768" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To go to the third step, press the “Plus” &lt;code&gt;+&lt;/code&gt; button and then the “Back to setup” button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-define-an-action-to-update-the-database"&gt;
  &lt;/a&gt;
  Step 3 – Define an action to update the database
&lt;/h3&gt;

&lt;p&gt;In the final step, we will define one more action to be performed after the text is translated. In our case, this will be updating the data in the Backendless database table.&lt;/p&gt;

&lt;p&gt;Select the action settings as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U9rmH5Cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/15-Add-Update-Object-in-Backendless-action-in-Zapier-768x420.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U9rmH5Cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/15-Add-Update-Object-in-Backendless-action-in-Zapier-768x420.jpg" alt="Add Update Object in Backendless action in Zapier" width="768" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will again select your Backendless account or enter your credentials (as in the first step). Click the continue button.&lt;/p&gt;

&lt;p&gt;Configure the action settings as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D74Fin1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/16-Configure-Update-in-Backendless-action-in-Zapier-768x686.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D74Fin1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/16-Configure-Update-in-Backendless-action-in-Zapier-768x686.jpg" alt="Configure Update in Backendless action in Zapier" width="768" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note, you need to select “Object id” on the “Custom” tab as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jkTECIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/17-Select-Object-Id-from-Custom-as-object-to-update-in-Zapier-768x467.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jkTECIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/17-Select-Object-Id-from-Custom-as-object-to-update-in-Zapier-768x467.jpg" alt="Select Object Id from Custom as object to update in Zapier" width="768" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, we will do one final test. If the test is successful, then the object that was sent to the Backendless database will be displayed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwp7sdb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/18-Successful-test-of-object-update-action-in-Zapier-768x478.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwp7sdb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/10/18-Successful-test-of-object-update-action-in-Zapier-768x478.jpg" alt="Successful test of object update action in Zapier" width="768" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the “Turn on Zap” button, and you’re all set! Our translation Zap is now up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lovelyguitar.backendless.app/index.html"&gt;Live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be sure to check out our other Zapier demo articles:&lt;br&gt;
*&lt;a href="https://backendless.com/sending-automated-sms-when-registering-a-new-user/"&gt;Send An Automated SMS Message When Registering A New User&lt;/a&gt;&lt;br&gt;
*More coming soon!&lt;/p&gt;

&lt;p&gt;Thanks for reading, and as always, Bon Codage Sans Code!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Processing dates and times with Perl</title>
      <author>Dave Cross</author>
      <pubDate>Wed, 10 Nov 2021 19:33:16 +0000</pubDate>
      <link>https://dev.to/davorg/processing-dates-and-times-with-perl-31gh</link>
      <guid>https://dev.to/davorg/processing-dates-and-times-with-perl-31gh</guid>
      <description>&lt;p&gt;Twenty years ago, I wrote a book called &lt;em&gt;Data Munging with Perl&lt;/em&gt;. People said nice things about it, but the publishers let it go out of print several years ago. That's probably fair - to be honest a lot of its advice is looking a bit dated.&lt;/p&gt;

&lt;p&gt;One of the things I covered was manipulating dates and times with Perl. Back then we didn't have tools like &lt;a href="https://metacpan.org/pod/Time::Piece"&gt;Time::Piece&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/DateTime"&gt;DateTime&lt;/a&gt; so my examples used Perl's built-in date and time functions and the "state of the art" CPAN modules Date::Calc and Date::Manip.&lt;/p&gt;

&lt;p&gt;If there were one section of the book that I could go back and rewrite, it would be this one. Date and time handling in Perl has come on a long way in the last twenty years and it pains me to see people still using things like Date::Manip.&lt;/p&gt;

&lt;p&gt;The book took three common examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finding the date in x days time&lt;/li&gt;
&lt;li&gt;Finding the date of the previous Saturday&lt;/li&gt;
&lt;li&gt;Finding the date of the first Monday in a given year&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following a &lt;a href="https://www.reddit.com/r/perl/comments/qq71g2/meditation_on_calendar_modelling/"&gt;discussion on Reddit&lt;/a&gt;, I thought it would be interesting to reproduce my examples using more modern date and time handling tools.&lt;/p&gt;

&lt;p&gt;So let's see how we'd do those things using modern Perl classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-timepiece"&gt;
  &lt;/a&gt;
  Using Time::Piece
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-date-in-x-days-time"&gt;
  &lt;/a&gt;
  Finding the date in x days time
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Time::Piece;
use Time::Seconds;

my $days = shift // 10;

my $now = localtime;
say $now + ($days * ONE_DAY);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is pretty simple stuff. Time::Piece overrides the standard &lt;code&gt;localtime()&lt;/code&gt; function so that I get a Time::Piece object back. I can then add seconds to that object using one of the constants defined in &lt;a href="https://metacpan.org/pod/Time::Piece"&gt;Time::Seconds&lt;/a&gt; to get the time I want.&lt;/p&gt;

&lt;p&gt;The output I get from running this program is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sat Nov 20 17:02:19 2021
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that by just printing my Time::Piece object, I get a nicely-formatted date/time string. If the format isn't quite to my liking, I could use the &lt;code&gt;strftime()&lt;/code&gt; method to get the format that I want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-date-of-the-previous-saturday"&gt;
  &lt;/a&gt;
  Finding the date of the previous Saturday
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Time::Piece;
use Time::Seconds;

my $now = localtime;
my $days = $now-&amp;gt;day_of_week + 1;
say $now - ($days * ONE_DAY);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is very similar to the previous example. We get a Time::Piece object that contains the current date and time and then work out how many days to go back to get to the previous Saturday. The &lt;code&gt;day_of_week()&lt;/code&gt; method returns a number between 0 and 6, with Sunday being 0. We need to add one to that number to get to Saturday.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-date-of-the-first-monday-in-a-given-year"&gt;
  &lt;/a&gt;
  Finding the date of the first Monday in a given year
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Time::Piece;
use Time::Seconds;

my $year = localtime-&amp;gt;year;

my $first_mon = Time::Piece-&amp;gt;strptime("$year Jan 1", '%Y %b %e');

$first_mon += (8 - $first_mon-&amp;gt;day_of_week) % 7 * ONE_DAY;

say $first_mon;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This also works on a very similar principle. We get the current year and create a Time::Piece object that contains the 1st January from that year. We then just work out how many days (perhaps zero) we need to add to get to a Monday.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-datetime"&gt;
  &lt;/a&gt;
  Using DateTime
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-date-in-x-days-time"&gt;
  &lt;/a&gt;
  Finding the date in x days time
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use DateTime;

my $days = shift // 10;

my $now = DateTime-&amp;gt;now;
say $now-&amp;gt;add(days =&amp;gt; $days);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The form of this is pretty similar to the Time::Piece example. We can use &lt;code&gt;DateTime-&amp;gt;now&lt;/code&gt; to get a DateTime object containing the current date and time and then use the &lt;code&gt;add()&lt;/code&gt; method on that to add a number of days.&lt;/p&gt;

&lt;p&gt;The output I get from running this program is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-11-20T18:51:57
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that, like Time::Piece, we can just print a DateTime object and get a nicely-formatted string. I prefer DateTime's default format as it uses the ISO standard for dates and times. But, as with Time::Piece, there's a method called &lt;code&gt;strftime()&lt;/code&gt; that you can use to produce strings in other formats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-date-of-the-previous-saturday"&gt;
  &lt;/a&gt;
  Finding the date of the previous Saturday
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use DateTime;

my $now = DateTime-&amp;gt;now;;
my $days = $now-&amp;gt;day_of_week + 1;
say $now-&amp;gt;subtract(days =&amp;gt; $days);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is also very similar in shape to the Time::Piece version. We're just converting the same logic to the DateTime syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-date-of-the-first-monday-in-a-given-year"&gt;
  &lt;/a&gt;
  Finding the date of the first Monday in a given year
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use DateTime;

my $year = DateTime-&amp;gt;now-&amp;gt;year;

my $first_mon = DateTime-&amp;gt;new(
  year  =&amp;gt; $year,
  month =&amp;gt; 1,
  day   =&amp;gt; 1,
);

my $days = (8 - $first_mon-&amp;gt;day_of_week) % 7;

say $first_mon-&amp;gt;add(days =&amp;gt; $days);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And this is another case where we're mostly just translating Time::Piece syntax to DateTime syntax. The only other real difference is that DateTime has a real constructor method, whereas to construct a Time::Piece object for an arbitrary date we needed to create a string a parse it using &lt;code&gt;strptime()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;I hope you can see from these examples that using more modern date and time tools can make you code smaller and easier to understand than it would be if you used Perl's built-in functions for this kind of work.&lt;/p&gt;

&lt;p&gt;Here are a few advantages that I think you get from using these libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storing your date and time in a single, structured variable rather than separate scalars for the various parts of a date and time.&lt;/li&gt;
&lt;li&gt;Easy parsing of date and time strings into an object.&lt;/li&gt;
&lt;li&gt;Easy production of many different output formats.&lt;/li&gt;
&lt;li&gt;Easy addition and subtraction of dates and times.&lt;/li&gt;
&lt;li&gt;Objects are easy to compare (and, therefore, sort).&lt;/li&gt;
&lt;li&gt;You no longer need to care that &lt;code&gt;localtime()&lt;/code&gt; gives a month that's between 0 and 11 or a year that is the actual year minus 1900.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven't shown it here, but these classes also understand timezones - so that's another area that will give you far fewer headaches if you switch to using these classes.&lt;/p&gt;

&lt;p&gt;I've covered what are probably the two most popular modern date and time classes for Perl. I expect you're wondering how you would decide which one to use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time::Piece has been included in the standard Perl distribution since version 5.10 was released in 2007. It's therefore good in situations where it's hard to install CPAN modules.&lt;/li&gt;
&lt;li&gt;DateTime needs to be installed from CPAN, but it's an incredibly powerful module and sits at the centre of a massive ecosystem of other date and time classes. If, for example, you want to deal with calendars other than the Gregorian calendar, then there's probably a DateTime add-on that can help you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rule of thumb that I use is this - if it's a simple project and Time::Piece can do the job, then I use that. Otherwise, I reach for DateTime or one of its friends.&lt;/p&gt;

&lt;p&gt;But honestly, learning to use these date and time modules will make your programming life easier.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>dates</category>
      <category>times</category>
    </item>
    <item>
      <title>What you can build with JavaScript</title>
      <author>Liudmila Mzhachikh</author>
      <pubDate>Wed, 10 Nov 2021 19:29:53 +0000</pubDate>
      <link>https://dev.to/lucyhackwrench/what-you-can-build-with-javascript-4ei</link>
      <guid>https://dev.to/lucyhackwrench/what-you-can-build-with-javascript-4ei</guid>
      <description>&lt;p&gt;JavaScript was originally invented to "bring web pages to life". In nowadays JS feels comfortable on a server and continues to explore new areas.&lt;/p&gt;

&lt;p&gt;I was interested in existing non-trivial uses of JavaScript. I have researched the question and made this overview. It includes examples from flying drone controlling to machine learning. In this article you can find links helpful for beginners.&lt;/p&gt;

&lt;p&gt;There probably is much more that could have been mentioned here. Please add other interesting JavaScript use cases in the comments, let's make a complete list.&lt;/p&gt;

&lt;p&gt;Let's Begin 👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#native-and-hybrid-mobile-apps"&gt;
  &lt;/a&gt;
  1️⃣ Native and Hybrid Mobile Apps
&lt;/h3&gt;

&lt;p&gt;You can build cross platform app with &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;, &lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt; or &lt;a href="http://phonegap.com"&gt;PhoneGap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVSynPgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em35fqsxk2uafq0p8jnl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVSynPgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em35fqsxk2uafq0p8jnl.png" alt="Image description" width="880" height="412"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#desktop-apps"&gt;
  &lt;/a&gt;
  2️⃣ Desktop Apps
&lt;/h3&gt;

&lt;p&gt;Desktop applications are built with the &lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; framework. VS Code, Skype, Slack are also written in JS, by the way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T5klQdbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwfe32g5pxs76pjhjyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5klQdbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwfe32g5pxs76pjhjyu.png" alt="Image description" width="880" height="301"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-extensions"&gt;
  &lt;/a&gt;
  3️⃣ Browser Extensions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/"&gt;Writing a browser extension is pretty easy&lt;/a&gt;. You can write your own extension in vanilla JS for your own goals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_7aB7cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8xhg1ro7gurs57fwgam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_7aB7cB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8xhg1ro7gurs57fwgam.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-plugins"&gt;
  &lt;/a&gt;
  4️⃣ Software Plugins
&lt;/h3&gt;

&lt;p&gt;Extensions for Photoshop and Sketch can be written in JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EW1g8sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmxt8a48snyxbmt3u9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EW1g8sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdmxt8a48snyxbmt3u9p.png" alt="Image description" width="880" height="389"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gamedev"&gt;
  &lt;/a&gt;
  5️⃣ GameDev
&lt;/h3&gt;

&lt;p&gt;Nowadays, a lot of games are being developed with JS. Among them are many &lt;a href="https://skillcrush.com/blog/free-coding-games/"&gt;games that help you learn coding&lt;/a&gt;. There is a great &lt;a href="https://developer.mozilla.org/en-US/docs/Games"&gt;article on MDN&lt;/a&gt; with resources for JS game development. You can write games in both vanilla JS and engines like &lt;a href="https://pixijs.com/"&gt;PixiJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Anna1L8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwym2tlaa0zqc8hp1ssx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Anna1L8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwym2tlaa0zqc8hp1ssx.png" alt="Image description" width="800" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d-graphics"&gt;
  &lt;/a&gt;
  6️⃣ 3D Graphics
&lt;/h3&gt;

&lt;p&gt;WebGL can &lt;a href="https://webglsamples.org/"&gt;do really cool things&lt;/a&gt;. The &lt;a href="https://threejs.org/"&gt;Three.js&lt;/a&gt; library is by far the most popular for working with WebGL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwBk-YrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jrd1lw4zaevr25igkkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwBk-YrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jrd1lw4zaevr25igkkg.png" alt="Image description" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-and-audio-players"&gt;
  &lt;/a&gt;
  7️⃣ Video and Audio Players
&lt;/h3&gt;

&lt;p&gt;You can play video and audio in browser using HTML5 and JS. The &lt;a href="https://videojs.com/"&gt;VideoJS&lt;/a&gt; library can be helpful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYJ8N_AU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viam281mj52fav427r3o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYJ8N_AU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viam281mj52fav427r3o.png" alt="Image description" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internet-of-things"&gt;
  &lt;/a&gt;
  8️⃣ Internet of Things
&lt;/h3&gt;

&lt;p&gt;IOT is a plenty of devices controlled over the Internet: a refrigerator that orders products itself, all kinds of sensors and remote monitoring systems - everything that can be automated. Through Node.js, you can interact with robots and other devices. There are even &lt;a href="http://www.nodecopter.com/"&gt;quadcopters&lt;/a&gt; that you can install a Node.js on. There are a lot of &lt;a href="https://blog.bitsrc.io/10-javascript-iot-libraries-to-use-in-your-next-projects-bef5f9136f83"&gt;libraries for IOT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sZsJXoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj7yaxp0dfaghf5s2lyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sZsJXoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xj7yaxp0dfaghf5s2lyx.png" alt="Image description" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-tv"&gt;
  &lt;/a&gt;
  9️⃣ Smart TV
&lt;/h3&gt;

&lt;p&gt;You can write JS applications using the &lt;a href="https://developer.samsung.com/smarttv/develop/legacy-platform-library/art00015/index.html"&gt;Samsung SDK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jJuSL9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrstpvlew8ktewjkls91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jJuSL9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrstpvlew8ktewjkls91.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-watch"&gt;
  &lt;/a&gt;
  1️⃣0️⃣ Smart Watch
&lt;/h3&gt;

&lt;p&gt;The Pebble smartwatch company has released the &lt;a href="https://medium.com/@sejoker/pebble-app-development-with-pebble-js-ab9af8c8ce50"&gt;Pebble.js framework&lt;/a&gt; for writing applications for their platform in JS. You cannot write applications for iOS and Android in JS... but who knows what will happen in the future :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jODFRGy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h4me3l7qlwuif4m5emd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jODFRGy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h4me3l7qlwuif4m5emd.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-columns"&gt;
  &lt;/a&gt;
  1️⃣1️⃣ Smart Columns
&lt;/h3&gt;

&lt;p&gt;Applications (skills) for smart columns (voice assistants) are written in Node.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfq7a9Uk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clg0srxuarmpiza0dgdc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfq7a9Uk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clg0srxuarmpiza0dgdc.png" alt="Image description" width="800" height="449"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payment-terminals"&gt;
  &lt;/a&gt;
  1️⃣2️⃣ Payment Terminals
&lt;/h3&gt;

&lt;p&gt;Interfaces of payment and information terminals and other self-service devices can be built with JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TG3RmAEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cpm2z17y7ggyujk71h3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TG3RmAEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cpm2z17y7ggyujk71h3.png" alt="Image description" width="416" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webrtc"&gt;
  &lt;/a&gt;
  1️⃣3️⃣ WebRTC
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"&gt;WebRTC&lt;/a&gt; is technology that allows Web applications to capture and selectively transmit audio and/or video media streams and exchange data directly between browsers, without additional plugins, in real time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YkBrEgOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjio8dhequns1fm6ag8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YkBrEgOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjio8dhequns1fm6ag8m.png" alt="Image description" width="400" height="300"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arvr"&gt;
  &lt;/a&gt;
  1️⃣4️⃣ AR/VR
&lt;/h3&gt;

&lt;p&gt;Virtual and augmented reality in browser using the WebVR API and 3D graphics. Take a look what &lt;a href="https://medium.com/samsung-internet-dev/eleven-examples-of-how-webvr-is-being-used-today-cbcb214b816c"&gt;cool things&lt;/a&gt; can be done with this technologies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UT68Ilyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtpm18v6f34jh25mpf5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UT68Ilyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtpm18v6f34jh25mpf5d.png" alt="Image description" width="880" height="444"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#machine-learning"&gt;
  &lt;/a&gt;
  1️⃣5️⃣ Machine Learning
&lt;/h3&gt;

&lt;p&gt;With JS you can create and train your own neural networks, as well as use ready-made solution developed in other languages. &lt;a href="https://www.tensorflow.org/js"&gt;TensorFlow.js&lt;/a&gt; is the most popular JS library for ML. Using ML, you can, for example, teach a website to catalog goods for an online store right at the frontend, or show suggestions for you text while typing and do many other cool things.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK3n5ZXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/EX4CuuhWAAkGJK_.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8txDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1049810942882590720/O7WH5RXH_normal.jpg" alt="Jason Mayes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jason Mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jason_mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So &lt;a href="https://twitter.com/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt; just made a tutorial for making fruit ninja in the browser with &lt;a href="https://twitter.com/hashtag/TensorFlowJS"&gt;#TensorFlowJS&lt;/a&gt; - go check it out - it looks super fun! Check the video tutorial here: &lt;a href="https://t.co/64uhWEVsvL"&gt;youtube.com/watch?v=lSMJ-3…&lt;/a&gt;&lt;br&gt;Blog: &lt;a href="https://t.co/Qxp7353fa3"&gt;dev.to/devdevcharlie/…&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/MadeWithTFJS"&gt;#MadeWithTFJS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/FruitNinja"&gt;#FruitNinja&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/JavaScript"&gt;#JavaScript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WebDev"&gt;#WebDev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/JS"&gt;#JS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Creative"&gt;#Creative&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:54 AM - 13 May 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1260448312316084231" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1260448312316084231" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1260448312316084231" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#space"&gt;
  &lt;/a&gt;
  1️⃣6️⃣ Space
&lt;/h3&gt;

&lt;p&gt;And what if I told you that JS flew into space 🤯&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SuQqQZ6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EZYY_gxUwAEtkPa.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8txDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1049810942882590720/O7WH5RXH_normal.jpg" alt="Jason Mayes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jason Mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jason_mayes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So &lt;a href="https://twitter.com/hashtag/JS"&gt;#JS&lt;/a&gt; made it into space! &lt;a href="https://twitter.com/hashtag/SpaceX"&gt;#SpaceX&lt;/a&gt; uses &lt;a href="https://twitter.com/hashtag/Chromium"&gt;#Chromium&lt;/a&gt; + &lt;a href="https://twitter.com/hashtag/JavaScript"&gt;#JavaScript&lt;/a&gt; for the Dragon 2 flight interface along with C++ for flight computers. JavaScript is not a toy folk, time to accept it. &lt;a href="https://twitter.com/hashtag/NASA"&gt;#NASA&lt;/a&gt;  &lt;a href="https://twitter.com/BrendanEich"&gt;@BrendanEich&lt;/a&gt; &lt;a href="https://t.co/yq2C5fnjOG"&gt;space.stackexchange.com/questions/9243…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:53 PM - 31 May 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1267227834096861184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1267227834096861184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1267227834096861184" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;And finally, check this inspirational collection of &lt;a href="https://www.creativebloq.com/web-design/examples-of-javascript-1233964"&gt;JS examples&lt;/a&gt; and &lt;a href="https://github.com/bradtraversy/vanillawebprojects"&gt;vanilla JS projects examples&lt;/a&gt;. They might suggest an idea for your pet project. Also here is the &lt;a href="https://javascript30.com/"&gt;30 Day Vanilla JS Coding Challenge&lt;/a&gt; - 30 tutorials on different JS features.&lt;/p&gt;

&lt;p&gt;Happy Coding! :)&lt;/p&gt;

&lt;p&gt;Follow me ➡️&lt;br&gt;
&lt;a href="https://twitter.com/lucyhackwrench"&gt;https://twitter.com/lucyhackwrench&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tglink.ru/frontend_thoughts"&gt;https://tglink.ru/frontend_thoughts&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>.Net Core vs NodeJS</title>
      <author>Ariel Calix</author>
      <pubDate>Wed, 10 Nov 2021 19:28:51 +0000</pubDate>
      <link>https://dev.to/arielcalix/net-core-vs-nodejs-4c0b</link>
      <guid>https://dev.to/arielcalix/net-core-vs-nodejs-4c0b</guid>
      <description>&lt;p&gt;Hola Amigos y bienvenidos a este vs entre dos tecnologías, hablaremos sobre que son cada una y en que podemos implementarlas y sin más les presento a nuestro primer contendiente &lt;strong&gt;.Net Core&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-sus-inicios"&gt;
  &lt;/a&gt;
  .Net ¿Sus Inicios?
&lt;/h2&gt;

&lt;p&gt;para conocer .Net Core debemos hablar un poco sobre los inicios de .Net.&lt;/p&gt;

&lt;p&gt;.Net nacio en el año 2001, con la publicacion de los primeros estandares (334 y 335) en ECMA para C# y CLR(Common Language Runtime). Y en 2002 se libera .Net Framework 1.&lt;/p&gt;

&lt;p&gt;Para el año 2008 Microsoft da el anuncio que el proyecto ASP.Net MVC será de tipo &lt;a href="https://es.wikipedia.org/wiki/C%C3%B3digo_abierto"&gt;Open Source&lt;/a&gt;, ese mismo año en la conferencia &lt;a href="https://es.wikipedia.org/wiki/Build_(conferencia_desarrolladores)"&gt;//build/&lt;/a&gt; &lt;a href="https://es.wikipedia.org/wiki/Anders_Hejlsberg"&gt;Anders Hejlsberg&lt;/a&gt; anuncia que el compilador Roslyn de C# sera de tipo Open Source. Y es en 2008 que comienza el desarrollo de .Net Core.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-core-qu%C3%A9-es"&gt;
  &lt;/a&gt;
  .Net Core ¿Qué es?
&lt;/h2&gt;

&lt;p&gt;Esta es la plataforma de desarrollo de Microsoft más moderna, su lanzamiento oficial fue en 2016 con .Net Core 1.0. Actualmente nos encontramos con la version 5 lanzada apenas en el año 2020 y en la que se unifican .Net Framework, .Net Core y Mono en una sola plataforma. Es un lenguaje del tipo Open Source, es multiplataforma y de un rendimiento muy alto para crear todo tipo de aplicaciones.&lt;/p&gt;

&lt;p&gt;Dentro de las principales características de .Net Core tenemos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiplataforma y con soporte para uso en contenedores Docker.&lt;/li&gt;
&lt;li&gt;Alto rendimiento (fue diseñado desde 0).&lt;/li&gt;
&lt;li&gt;Asincronia, este patron en todas las librerías comunes para mejorar el rendimiento en las llamadas I/O.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#net-core-en-que-lo-uso"&gt;
  &lt;/a&gt;
  .Net Core ¿En que lo uso?
&lt;/h2&gt;

&lt;p&gt;.Net Core nos permite implementar todo tipo de aplicaciones desde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web, mismas que pueden ser desplegadas en Windows, Linux o Mac OS.&lt;/li&gt;
&lt;li&gt;Aplicaciones con Docker, en cualquiera de las nubes ya sea (Azure, AWS o GCP).&lt;/li&gt;
&lt;li&gt;Aplicaciones de Escritorio UWP lo que permite que tus apps sean ejecutadas en Windows 10, XBOX y HoloLens.&lt;/li&gt;
&lt;li&gt;IoT.&lt;/li&gt;
&lt;li&gt;IA.&lt;/li&gt;
&lt;li&gt;Desarrollo de juegos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#net-core-su-futuro"&gt;
  &lt;/a&gt;
  .Net Core ¿Su Futuro?
&lt;/h2&gt;

&lt;p&gt;A lo largo de muchos años han sido creadas diferentes plataformas de .Net como ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.Net Framework.&lt;/li&gt;
&lt;li&gt;.Net Core.&lt;/li&gt;
&lt;li&gt;Mono.
Y otras como:&lt;/li&gt;
&lt;li&gt;Silverlight&lt;/li&gt;
&lt;li&gt;Windows Phone&lt;/li&gt;
&lt;li&gt;.Net Compact Framework
Mismas que de alguna forma ayudaron a perfilar .Net como lo que es hoy en día.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desde la version 3 de .Net Core no se han continuado con la migracion de características desde .Net Clasico. Por lo que las siguientes tecnologías ya no tienen un equivalente.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Web Forms.&lt;/li&gt;
&lt;li&gt;WCF.&lt;/li&gt;
&lt;li&gt;Workflow Foundation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ahora bien Aunque existe Blazor, mismo que es su sustituto no existe una migración directa. Si quieres migrar tus servicios WCF, tienes que utilizar Web API's.&lt;/p&gt;

&lt;p&gt;Lo anterior no significa que tengas que migrar todas tus aplicaciones actuales a .Net Core si ya son funcionales. Recuerda que son paltaformas diferentes, por lo que migrar puede llevar más tiempo del que crees.&lt;/p&gt;

&lt;p&gt;Abordaremos más sobre .Net en una serie especial para este framework pero por el momento esto es lo que necesitas saber para este versus entre estas dos tecnologías.&lt;/p&gt;

&lt;p&gt;Imagen por &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marius Niveri&lt;/a&gt; en &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
    </item>
    <item>
      <title>Patrón modelo vista controlador</title>
      <author>Marcos</author>
      <pubDate>Wed, 10 Nov 2021 19:22:27 +0000</pubDate>
      <link>https://dev.to/marcodeev/patron-modelo-vista-controlador-4k32</link>
      <guid>https://dev.to/marcodeev/patron-modelo-vista-controlador-4k32</guid>
      <description>&lt;p&gt;Para implementar este modelo vamos utilizar librerías en tareas como el renderizado de vistas o el sistema de rutas con el fin de que la tarea sea mas practica &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/marcodeev/MVC"&gt;Repositorio de la platilla en GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sistema-de-carpetas"&gt;
  &lt;/a&gt;
  Sistema de carpetas
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJLLy1Zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/27PdL48/estructuradecarpetas.png%2522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJLLy1Zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/27PdL48/estructuradecarpetas.png%2522" alt="sistema básico de MVC" width="344" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app"&gt;
  &lt;/a&gt;
  app
&lt;/h3&gt;

&lt;p&gt;Contiene la mayor parte de la lógica de nuestro sistema (modelos y controladores)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controllers"&gt;
  &lt;/a&gt;
  controllers
&lt;/h3&gt;

&lt;p&gt;Contiene los controladores de nuestra aplicación&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#models"&gt;
  &lt;/a&gt;
  models
&lt;/h3&gt;

&lt;p&gt;Contiene los modelos de nuestra aplicación, desde acá manipulamos los datos alojados en nuestra base de datos   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public"&gt;
  &lt;/a&gt;
  public
&lt;/h3&gt;

&lt;p&gt;Esta carpeta poseen los archivos que tendrán un alcance publico. Esta carpeta tiene el índex que esta cumpliendo el patrón de Front Controller (muy importante para un sistema robusto ya que solo permite una sola entrada a los archivos de nuestra solución).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vendor"&gt;
  &lt;/a&gt;
  Vendor
&lt;/h3&gt;

&lt;p&gt;Carpeta creada y gestionada por composer, acá se alojan las librerías implementadas a través de la terminal de composer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  view
&lt;/h3&gt;

&lt;p&gt;Contiene las vistas de nuestra solución &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modelo-vista-controlador"&gt;
  &lt;/a&gt;
  Modelo Vista Controlador
&lt;/h1&gt;

&lt;p&gt;El siguiente esquema muestra el funcionamiento de un sistema funcionando con el patrón de diseño modelo vista controlador &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ChKgioX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Vgm5Gxj/mvc.png%2522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ChKgioX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Vgm5Gxj/mvc.png%2522" alt="Esquema MVC" width="640" height="929"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
    </item>
    <item>
      <title>Add some spice to your HTML file fields with an image preview pane
</title>
      <author>Ayush Newatia</author>
      <pubDate>Wed, 10 Nov 2021 19:20:16 +0000</pubDate>
      <link>https://dev.to/ayushn21/add-some-spice-to-your-html-file-fields-with-an-image-preview-pane-11b7</link>
      <guid>https://dev.to/ayushn21/add-some-spice-to-your-html-file-fields-with-an-image-preview-pane-11b7</guid>
      <description>&lt;p&gt;The default HTML file field is rather boring. It's quite painful to style and not really flexible either.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcd7GOYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1621025515Azu55yPnIAhULLDIcQswwg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcd7GOYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1621025515Azu55yPnIAhULLDIcQswwg" width="368" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a little bit of JavaScript though, we can spice up the file input field a bit and add a preview pane for images; so the user can see the image they've selected before submitting the form.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aiRLsA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/162102562726Fpo3bp9Jz8SaLKOAezQQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aiRLsA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/162102562726Fpo3bp9Jz8SaLKOAezQQ" width="506" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good way to encapsulate the logic for this field is to use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;JavaScript Custom Element&lt;/a&gt;. We'll create a class called &lt;code&gt;ImageInputField&lt;/code&gt; and define it to use the tag name &lt;code&gt;image-input-field&lt;/code&gt;. Let's start with our HTML markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;image-input-field&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;preview&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Select Image&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Remove Image&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/image-input-field&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code should be pretty self explanatory. To bring this to life, we need to create and define our custom element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ImageInputField&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;// Configure click listeners for the two buttons&lt;/span&gt;
    &lt;span class="c1"&gt;// and a change listener for the input field&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureListeners&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// Hide the remove button by default as initially&lt;/span&gt;
    &lt;span class="c1"&gt;// there won't be a file selected&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;// Hide the input field as it's only used under&lt;/span&gt;
    &lt;span class="c1"&gt;// the hood.&lt;/span&gt;
    &lt;span class="c1"&gt;// The user clicks on the "Select Image" button&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;// Restrict the input field to images only&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input[type=file]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;selectButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button[select]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button[remove]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img[preview]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;removeImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Read the image off the disk and set it to our img element&lt;/span&gt;
  &lt;span class="nx"&gt;showPreview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;configureListeners&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showPreview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c1"&gt;// Register our custom element with the CustomElementRegistry&lt;/span&gt;
&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image-input-field&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ImageInputField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;&lt;br&gt;
With the above element, our component is complete. Users will now see a preview of the image they've selected. We're also free to style any of the contained elements as we wish. So for example, we might want to limit the width of the image preview so a large image doesn't mess up the layout of the whole page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;image-input-field&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/ayushn21/pen/KKWzEQj"&gt;Here's a CodePen&lt;/a&gt; demonstrating the component in action! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hacktoberfest Action</title>
      <author>Arya Narayan Tiwari</author>
      <pubDate>Wed, 10 Nov 2021 19:12:08 +0000</pubDate>
      <link>https://dev.to/aryanarayantiwari/hacktoberfest-action-3hig</link>
      <guid>https://dev.to/aryanarayantiwari/hacktoberfest-action-3hig</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I created my workflow by customizing the pr-labeler github action by TimonVS on github action marketplace. This workflow works by matching branch patterns name such that whenever a branch with matching pattern makes a pull request and when that branch is merged and closed it adds the hacktoberfest and hacktoberfest-accepted label to the PRs, which automates the task for hacktoberfest maintainers to manually add the labels. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;When a pull request is closed with the branch name hack/218-add-emoji-support the Action will automatically apply the hacktoberfest and hacktoberfest-acccepted label once the PR is merged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category-maintainer-musthaves"&gt;
  &lt;/a&gt;
  Submission Category: Maintainer Must-Haves
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Github Repository Link&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aryanarayantiwari"&gt;
        aryanarayantiwari
      &lt;/a&gt; / &lt;a href="https://github.com/aryanarayantiwari/hacktoberfest-pr-labeler"&gt;
        hacktoberfest-pr-labeler
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a github action that adds hacktoberfest and hacktoberfest-accepted label to a merged pull request with matching branch name patterns.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Hacktoberfest Action&lt;/h1&gt;
&lt;h2&gt;
&lt;em&gt;Merge pull request with ease&lt;/em&gt;
&lt;/h2&gt;
&lt;p&gt;This is a github action made by using and customizing the &lt;a href="https://github.com/marketplace/actions/pr-labeler"&gt;pr-labeler&lt;/a&gt; github action by TimonVS from the github actions marketplace.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add labels to pull request with matching patterns in branch-name.&lt;/li&gt;
&lt;li&gt;Automatically adds the lables once the PR is merged.&lt;/li&gt;
&lt;li&gt;The current matching pattern for branchname is 'hack/*' but one can customise it by editing the 'pr-labeler.yml' file in .github folder.&lt;/li&gt;
&lt;li&gt;Easy to Use&lt;/li&gt;
&lt;li&gt;Automates the task of adding labels manually to a PR while merging during Hacktoberfest&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Add &lt;code&gt;.github/workflows/pr-labeler.yml&lt;/code&gt; with the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;PR Labeler&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;pull_request&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;types&lt;/span&gt;: &lt;span class="pl-s"&gt;[closed]&lt;/span&gt;

&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;pr-labeler&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;if&lt;/span&gt;: &lt;span class="pl-s"&gt;github.event.pull_request.merged == true&lt;/span&gt;
    &lt;span class="pl-ent"&gt;runs-on&lt;/span&gt;: &lt;span class="pl-s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;steps&lt;/span&gt;:
      - &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;TimonVS/pr-labeler-action@v3&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;configuration-path&lt;/span&gt;: &lt;span class="pl-s"&gt;.github/pr-labeler.yml &lt;/span&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; optional, .github/pr-labeler.yml is the default value&lt;/span&gt;
        &lt;span class="pl-ent"&gt;env&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;GITHUB_TOKEN&lt;/span&gt;: &lt;span class="pl-s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;Configure by creating a &lt;code&gt;.github/pr-labeler.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;hacktoberfest&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aryanarayantiwari/hacktoberfest-pr-labeler"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#yaml-file"&gt;
  &lt;/a&gt;
  Yaml File
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: PR Labeler
on:
  pull_request:
    types: [closed]

jobs:
  pr-labeler:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: TimonVS/pr-labeler-action@v3
        with:
          configuration-path: .github/pr-labeler.yml # optional, .github/pr-labeler.yml is the default value
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/pr-labeler"&gt;TimonVS PR-labeler&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>The Principle of Least Astonishment</title>
      <author>Matthew Lucas</author>
      <pubDate>Wed, 10 Nov 2021 18:58:20 +0000</pubDate>
      <link>https://dev.to/notmattlucas/the-principle-of-least-astonishment-3f9k</link>
      <guid>https://dev.to/notmattlucas/the-principle-of-least-astonishment-3f9k</guid>
      <description>&lt;p&gt;We usually think of a computer system ending at the screen and keyboard, but the user is part of the system. If the computer and user don’t get on the system isn’t working — it’s a frustrating, surprising, and even infuriating experience.&lt;/p&gt;

&lt;p&gt;The principle of least astonishment is a design principle the emphasizes the importance of predictability. Software should behave in ways a user has come to expect.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#in-user-experience-control"&gt;
  &lt;/a&gt;
  In User Experience (Control)
&lt;/h2&gt;

&lt;p&gt;Pick up an entry-level psychology textbook and you’ll learn about the idea of &lt;em&gt;Learned Helplessness&lt;/em&gt;. In short — a bunch of psychologists spent their valuable time zapping maze-imprisoned rats with high voltage tasers. There was no pattern to their zapping, it was done at random. The rats slowly spiralled into a malaise of confusion, frustration and depression due to their inability to control the situation.&lt;/p&gt;

&lt;p&gt;Control is the key factor here. The rats couldn’t start or stop doing something to change the outcome — they had zero control — so they just gave up on their pretty miserable lives.&lt;/p&gt;

&lt;p&gt;A lot of software aligns with this sentiment — although (in most cases) I’m sure it’s unintentional. Users wander around some maze of a programmer’s design, trying to figure out the best way to get their job done. Each time a button doesn’t do what they expect, a search doesn’t return a sensible set of results, or half a day’s work is lost because they forgot to click the save button, a tiny notch of frustration is logged. Over days and weeks, these fragments of frustration build up until, one thankless day, the laptop gets thrown out of the 12th-floor window in an utter rampage!&lt;/p&gt;

&lt;p&gt;Software should be predictable. The user has to feel in control, and unpredictability takes that away. Stick to the usual conventions, and make software as intuitive as possible.&lt;/p&gt;

&lt;p&gt;Software should be transparent. It should be possible to build a simple mental model of what the application is doing. If it has murky corners it’ll sneak up on you by surprise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-programming-side-effects"&gt;
  &lt;/a&gt;
  In Programming (Side Effects)
&lt;/h2&gt;

&lt;p&gt;Take the following (admittedly terrible) function to print everything in a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;print_ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# uh oh! ls is empty
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At a cursory glance, you might think it’s just a harmless function to print the content of your list, but there’s an insidious side-effect lying in wait. By using pop to get the elements from the list the function is stealing all your data! When you go to use it after the print, there’s nothing left.&lt;/p&gt;

&lt;p&gt;Functional programming attempts to combat side effects through immutability. You can’t just change the content of a list. If you want to mutate, you (in general) have to copy the data first. The original copy is left untouched.&lt;/p&gt;

&lt;p&gt;Rust takes a different approach called ownership. To allow a function to change inputs, you have to move the data into that function, transferring ownership of it. Only once owned can a function mutate data.&lt;/p&gt;

&lt;p&gt;But in general, most languages allow unfettered mutation of data. Be a good coder by adhering to the principle of least astonishment. Make it clear, through naming and documentation, when your code mutates an argument. Even better, tread carefully and don’t do it — if you need to change data return a copy instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment"&gt;Principle of Least Astonishment — Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://principles-wiki.net/principles:principle_of_least_surprise"&gt;Principle of Least Surprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uxplanet.org/the-principle-of-least-astonishment-bc3f67991510"&gt;UX Planet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joelonsoftware.com/2000/04/10/controlling-your-environment-makes-you-happy/"&gt;Controlling Your Environment Makes You Happy — Joel on Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-final-word"&gt;
  &lt;/a&gt;
  A final word
&lt;/h2&gt;

&lt;p&gt;This post was written as part of a series on laws of software development for #PragProWriMo 2021 run by the &lt;a href="https://medium.com/@pragprog"&gt;The Pragmatic Programmers&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>design</category>
      <category>architecture</category>
      <category>psychology</category>
    </item>
    <item>
      <title>Cypress Best Practices</title>
      <author>Jordan Powell</author>
      <pubDate>Wed, 10 Nov 2021 18:57:05 +0000</pubDate>
      <link>https://dev.to/cypress/cypress-best-practices-55j0</link>
      <guid>https://dev.to/cypress/cypress-best-practices-55j0</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PPZSySI5ooc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#organizing-tests-logging-in-controlling-state"&gt;
  &lt;/a&gt;
  Organizing Tests, Logging In, Controlling State
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Sharing page objects, using your UI to log in, and not taking shortcuts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Test specs in isolation, programmatically log into your application, and take control of your application's state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#selecting-elements"&gt;
  &lt;/a&gt;
  Selecting Elements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Using highly brittle selectors that are subject to change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Use &lt;code&gt;data-*&lt;/code&gt; attributes to provide context to your selectors and isolate them from CSS or JS changes&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Recommended&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('button').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Never&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Worst - too generic, no context&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('.btn.btn-large').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Never&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Bad. Coupled to styling. Highly subject to change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('#main').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Sparingly&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Better. But still coupled to styling or JS event listeners.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('[name=submission]').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Sparingly&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Coupled to the name attribute which has HTML semantics.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.contains('Submit').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Depends&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Much better. But still coupled to text content that may change.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cy.get('[data-cy=submit]').click()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Always&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Best. Isolated from all changes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#assigning-return-values"&gt;
  &lt;/a&gt;
  Assigning Return Values
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Trying to assign the return value of Commands with &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Use &lt;a href="https://docs.cypress.io/guides/core-concepts/variables-and-aliases"&gt;closures to access and store&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#visiting-external-sites"&gt;
  &lt;/a&gt;
  Visiting External Sites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; trying to visit or interact with sites or servers you do not control&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Only test what you control. Try to avoid requiring a 3rd party server. When necessary, always use &lt;code&gt;cy.request()&lt;/code&gt; to talk to 3rd party servers via their APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#having-tests-rely-on-the-state-of-previous-tests"&gt;
  &lt;/a&gt;
  Having tests rely on the state of previous tests
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Coupling multiple tests together&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Tests should always be able to be run independently from one another &lt;strong&gt;and still pass.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-tiny-tests-with-a-single-assertion"&gt;
  &lt;/a&gt;
  Creating "tiny" tests with a single assertion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Acting like you're writing unit tests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Add multiple assertions and don't worry about it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-after-endraw-or-raw-aftereach-endraw-hooks"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;afterEach&lt;/code&gt; hooks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Using &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;afterEach&lt;/code&gt; hooks to clean up state.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Clean up state &lt;strong&gt;before&lt;/strong&gt; tests run.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#unnecessary-waiting"&gt;
  &lt;/a&gt;
  Unnecessary Waiting
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Waiting for arbitrary time periods using &lt;code&gt;cy.wait(Number)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Use route aliases or assertions to guard Cypress from proceeding until an explicit condition is met&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-servers"&gt;
  &lt;/a&gt;
  Web Servers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Trying to start a web server from within Cypress scripts with &lt;code&gt;cy.exec()&lt;/code&gt; or &lt;code&gt;cy.task()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Start a web server prior to running Cypress&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-a-global-baseurl"&gt;
  &lt;/a&gt;
  Setting a global baseUrl
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Anti-Pattern:&lt;/strong&gt; Using &lt;code&gt;cy.visit()&lt;/code&gt; without setting a &lt;code&gt;baseUrl&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Best Practice:&lt;/strong&gt; Set a &lt;code&gt;baseUrl&lt;/code&gt; in your &lt;a href="https://docs.cypress.io/guides/references/configuration"&gt;configuration file (cypress.json by default)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read our entire Best Practices Guide at &lt;a href="https://docs.cypress.io/guides/references/best-practices"&gt;https://docs.cypress.io/guides/references/best-practices&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>e2e</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Welcome Thread - v150</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 10 Nov 2021 18:54:58 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v150-33go</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v150-33go</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/0N8jZKHBq3smKbyITd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/0N8jZKHBq3smKbyITd/giphy.gif" alt="Howdy" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Adding Radial Gradients to Tailwind CSS</title>
      <author>Mark Mead</author>
      <pubDate>Wed, 10 Nov 2021 18:52:42 +0000</pubDate>
      <link>https://dev.to/markmead/adding-radial-gradients-to-tailwind-css-1pe</link>
      <guid>https://dev.to/markmead/adding-radial-gradients-to-tailwind-css-1pe</guid>
      <description>&lt;p&gt;Recently, I added radial gradient classes to &lt;a href="https://hypercolor.dev/"&gt;Hypercolor&lt;/a&gt;. This is currently not something Tailwind CSS supports and it's unlikely it ever will. &lt;/p&gt;

&lt;p&gt;However, to add radial gradient classes into Tailwind CSS is very easy so don't worry. &lt;/p&gt;

&lt;p&gt;Simply add the following to your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at center, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-t&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at top, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at bottom, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-l&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at left, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-r&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at right, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-tl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at top left, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-tr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at top right, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-bl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at bottom left, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gradient-radial-at-br&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(ellipse at bottom right, var(--tw-gradient-stops))&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;},&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will allow you to write classes like &lt;code&gt;bg-gradient-radial-at-l from-fuchsia-300 via-green-400 to-rose-700&lt;/code&gt;, it's hard to tell if that would look awful or amazing, so I recommend using the &lt;a href="https://hypercolor.dev/generator"&gt;gradient generator on Hypercolor&lt;/a&gt; to see what works and what doesn't.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
