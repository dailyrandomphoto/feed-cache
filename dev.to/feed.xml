<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I made a VS Code theme!</title>
      <author>Virej Dasani</author>
      <pubDate>Thu, 15 Apr 2021 08:32:04 +0000</pubDate>
      <link>https://dev.to/virejdasani/i-made-a-vs-code-theme-1d5c</link>
      <guid>https://dev.to/virejdasani/i-made-a-vs-code-theme-1d5c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-always-wanted-to-have-my-own-theme-for-my-favorite-code-editor-visual-studio-code-so-i-made-one"&gt;
  &lt;/a&gt;
  I always wanted to have my own theme for my favorite code editor, Visual Studio Code, so I made one!
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#meet-hydroxy"&gt;
  &lt;/a&gt;
  Meet &lt;a href="https://marketplace.visualstudio.com/items?itemName=VirejDasani.hydroxy"&gt;Hydroxy&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It is a dark theme with an awesome color scheme&lt;/li&gt;
&lt;li&gt;It comes in two flavors to match your taste!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5iYXT11v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk5jywjuh85wqe3ypcr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iYXT11v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk5jywjuh85wqe3ypcr0.png" alt="Hydroxy Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hydroxy Original (above)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZLNxkBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adkhm3rov2qdxdmxb35p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZLNxkBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adkhm3rov2qdxdmxb35p.png" alt="Hydroxy Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hydroxy Alt Colors (above)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#-hydroxy-is-available-to-download-on-the-visual-studio-marketplace-or-directly-from-the-extensions-tab-inside-vs-code"&gt;
  &lt;/a&gt;
  - Hydroxy is available to download on the &lt;a href="https://marketplace.visualstudio.com/items?itemName=VirejDasani.hydroxy"&gt;Visual Studio marketplace&lt;/a&gt; or directly from the extensions tab inside VS Code.
&lt;/h3&gt;

&lt;p&gt;You can also check out &lt;a href="https://github.com/virejdasani/HydroxyTheme"&gt;Hydroxy on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-how-i-made-it"&gt;
  &lt;/a&gt;
  Here's how I made it
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I found &lt;a href="https://www.youtube.com/watch?v=QCqWzb-9Sy8"&gt;this&lt;/a&gt; YouTube video. It pretty much shows you step by step how you can make your own VS Code theme!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A rating on the &lt;a href="https://marketplace.visualstudio.com/items?itemName=VirejDasani.hydroxy"&gt;Visual Studio marketplace&lt;/a&gt;, a star on the &lt;a href="https://github.com/virejdasani/HydroxyTheme"&gt;GitHub repo&lt;/a&gt; and any feedback is highly appreciated!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out some of my other projects and follow my socials from &lt;a href="https://virejdasani.github.io/virej/"&gt;my website&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>hydroxy</category>
      <category>html</category>
    </item>
    <item>
      <title>SOA vs Microservices</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Thu, 15 Apr 2021 08:20:36 +0000</pubDate>
      <link>https://dev.to/priyanshi_sharma/soa-vs-microservices-59m4</link>
      <guid>https://dev.to/priyanshi_sharma/soa-vs-microservices-59m4</guid>
      <description>&lt;p&gt;&lt;a href="https://www.decipherzone.com/blog-detail/soa-vs-microservices"&gt;SOA (Service oriented architecture) and Microservices&lt;/a&gt; are two different architectures for web application development. Service Oriented architecture focuses on reusing services and components throughout the web application to reduce the amount of effort to write code by reducing redundancy. The services are code and data integrations to build and execute a functionality; for example- syncing an email, validating a logged-in user with cookies, sending notifications. Whereas on the contrary microservices architecture focuses on high reliability and availability of the application even if redundancy in data resources and code has to be adapted. Every functionality in the web application is developed as a service that gets containerized and hosted on a separate server instance. Such an approach enhances the agility of web applications and it keeps on working even if some of the services fail.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://www.decipherzone.com/blog-detail/service-oriented-architecture"&gt;SOA&lt;/a&gt; the whole backend system application is divided into three parts i.e. controller, services and business logic. The whole backend system is hosted on a single server instance and the services in the backend system can communicate with each other directly, however to the external world (frontend and third-party apps) these services are made available via API calls. Whereas in microservices architecture these services are developed and deployed as separate applications on their own server instances. The communication between services is also done via APIs in a microservices architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-soaservice-oriented-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When to use SOA(Service Oriented Architecture)?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Service oriented architecture should be used whenever you are building a web application with the following aspirations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Whose users can bear the downtime?&lt;/li&gt;
&lt;li&gt; When a web application is required in comparatively less budget than highly resilient web apps. &lt;/li&gt;
&lt;li&gt; When the business owner wants to save server and device maintenance cost by migrating every enterprise application on the cloud. &lt;/li&gt;
&lt;li&gt; A large web application needs to be developed in a shorter time frame. &lt;/li&gt;
&lt;li&gt; When Single points of failure are tolerable. &lt;/li&gt;
&lt;li&gt; When Data redundancy is tolerable. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-and-benefits-of-soa-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/service-oriented-architecture"&gt;Advantages and Benefits of SOA architecture&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Since SOA focuses on reusing services throughout the web application so the speed of development is faster. &lt;/li&gt;
&lt;li&gt; Faster development speed consequences in less cost of web application development. &lt;/li&gt;
&lt;li&gt; The code written in SOA is easily readable and manageable. &lt;/li&gt;
&lt;li&gt; The deployment is easier in SOA because web applications are deployed only on a single server instance. &lt;/li&gt;
&lt;li&gt; The cost of servers to run web applications developed in SOA is very less. &lt;/li&gt;
&lt;li&gt; Businesses don’t need to provide support for multiple versions of an application because the rollout of new applications is done on a production server instance so it becomes available to everyone at the same time. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-service-oriented-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Disadvantages of Service Oriented Architecture&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt; 
&lt;li&gt; The extreme reusability of data and services results in extreme dependability which often becomes a single point of failure for the whole web application.&lt;/li&gt;

&lt;li&gt; A Large server instance is required to host the web application which imposes hardware limitations such as data bus and network communication bandwidth. &lt;/li&gt;

&lt;li&gt; The deployment of such bulky web applications built over SOA takes a lot of time to deploy and stabilize the release. It’s the main reason why the deployment of such web applications is scheduled on weekends. &lt;/li&gt;

&lt;li&gt; The web application development in SOA becomes dependent on a single programming language or a framework. It often happens in the development process that an open-source functionality or a better implementation is available in another programming language but the development teams cannot consume it within their application. In such scenarios, the development teams also have to develop that functionality which consequently increases the development cost and time. &lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#why-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/why-microservices-architecture"&gt;Why microservices architecture?&lt;/a&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Microservices architecture works on the principle to decentralize everything within the web application. Microservices architecture offers high resilience and availability by adapting to the redundancy of server instances and data duplication. This redundancy and duplication reduce the cost efficiency of the web application development and deployment process. Since services are deployed as separate applications on their own server instances with backup containers ready to run in case there is a spike in service call requests, the failure threshold gets pushed up. The high availability of hardware resources enables applications to offer high resilience. The workload on applications being distributed over independent services enables high availability because the web application will not fail even if some of the services stop working. The cross-region replication protects the data from hazards and offers low latency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When to use microservices architecture?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Microservices architecture should be used whenever you are building a web application with the following aspirations:&lt;/p&gt;

&lt;ul&gt; 

&lt;li&gt; When zero downtime is desirable.  &lt;/li&gt;
&lt;li&gt; When web application development and deployment cost is less of a concern than high resilience and availability.  &lt;/li&gt;
&lt;li&gt; When single points of failure aren’t tolerable.  &lt;/li&gt;
&lt;li&gt; When you have ample time to develop a web application.  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/benefits-microservices-architecture"&gt;Benefits of Microservices Architecture&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Microservices architecture offers high availability, reliability, resilience and low latency(when application requests are redirected to the closest deployment server). &lt;/li&gt; 

&lt;li&gt; Applications are agile, nimble and easy to scale up. &lt;/li&gt;

&lt;li&gt; The web applications become programming language and framework independent as each and every service can be developed independently. &lt;/li&gt;

&lt;li&gt; The deployment process is smoother as it is done service by service so there is usually no web application downtime. &lt;/li&gt;

&lt;li&gt; The selection of server instances and cloud hosting plans is correlated to the use case and usage frequency of service hence, the dependability on a large server instance is eliminated. &lt;/li&gt;

&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-microservices-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/what-are-microservices"&gt;Disadvantages of microservices architecture&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; The development process is extremely time-consuming and tedious due to the complex structure and deployment is also of the same nature because new feature deployments have to be done service by service. &lt;/li&gt;

&lt;li&gt; Additional infrastructure to observe, monitor and secure the service deployments is required. &lt;/li&gt;

&lt;li&gt; The development and deployment are comparatively very high than the web applications developed over SOA. &lt;/li&gt;

&lt;li&gt; You have to hire developers with a comparatively bigger skillset. &lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;Source: &lt;a href="https://www.decipherzone.com/blog"&gt;Decipher&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>$200 of free AWS credits up for grabs 👀</title>
      <author>lee</author>
      <pubDate>Thu, 15 Apr 2021 08:19:26 +0000</pubDate>
      <link>https://dev.to/leewynne/200-of-free-aws-credits-up-for-grabs-4pj7</link>
      <guid>https://dev.to/leewynne/200-of-free-aws-credits-up-for-grabs-4pj7</guid>
      <description>&lt;p&gt;Hey Dev community, we are giving away $200 of free AWS credits over at &lt;a href="https://www.theelastic.guru/teamelasticguru/200-of-free-aws-credits-up-for-grabs-5hka"&gt;The Elastic Guru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are an up and coming AWS community supported and powered by &lt;a href="https://www.forem.com/discover"&gt;Forem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is Karissa from AWS with a tweet about it:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXTm5XQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ey93bB0VoAAglTp.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUO2LW3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1347321906198843392/_sNDLCJY_normal.jpg" alt="Karissa Wood profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Karissa Wood
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @karissa_wood_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      💰Want to receive $200 in AWS credits? All you need to do is introduce yourself in the &lt;a href="https://twitter.com/theelasticguru"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/theelasticguru"&gt;@theelasticguru&lt;/a&gt; welcome thread and include the text &lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;#freeAWScredits&lt;/a&gt;. &lt;br&gt;&lt;br&gt;👉OR share this post on Twitter with the hashtag &lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/freeAWScredits"&gt;#freeAWScredits&lt;/a&gt; and tag &lt;a href="https://twitter.com/theelasticguru"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/theelasticguru"&gt;@theelasticguru&lt;/a&gt;. 🥳&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/awscommunity"&gt;#awscommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/awsusergroups"&gt;#awsusergroups&lt;/a&gt; &lt;a href="https://t.co/DwkDBKu0cp"&gt;twitter.com/theelasticguru…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:05 PM - 14 Apr 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            The Elastic Guru
          &lt;/span&gt;
          @theelasticguru
        &lt;/div&gt;
        $200 of free AWS credits up for grabs! 👀 #theElasticGuru #awscommunity #awsheroes #awscloud #cloudcomputing #awstraining #awseducate #Kubernetes  https://t.co/s1lcPmRXfC
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1382454923661516800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1382454923661516800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1382454923661516800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Hope to see you there. Any social sharing of our giveaway would be much appreciated 😇&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awsheroes</category>
    </item>
    <item>
      <title>Solution: Fibonacci Number</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 15 Apr 2021 08:13:58 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-fibonacci-number-32a</link>
      <guid>https://dev.to/seanpgallivan/solution-fibonacci-number-32a</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/fibonacci-number/discuss/1159381"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-509-easy-fibonacci-number"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/fibonacci-number/"&gt;Leetcode Problem #509 (&lt;em&gt;Easy&lt;/em&gt;): Fibonacci Number&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Fibonacci numbers&lt;/strong&gt;, commonly denoted &lt;code&gt;F(n)&lt;/code&gt; form a sequence, called the &lt;strong&gt;Fibonacci sequence&lt;/strong&gt;, such that each number is the sum of the two preceding ones, starting from &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. That is,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;F(0) = 0&lt;/code&gt;, &lt;code&gt;F(1) = 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;F(n) = F(n - 1) + F(n - 2)&lt;/code&gt;, for &lt;code&gt;n &amp;gt; 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt;, calculate &lt;code&gt;F(n)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;F(2) = F(1) + F(0) = 1 + 0 = 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;F(3) = F(2) + F(1) = 1 + 1 = 2.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;F(4) = F(3) + F(2) = 2 + 1 = 3.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;0 &amp;lt;= n &amp;lt;= 30&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The naive idea here would be to create an array of Fibonacci numbers by doing as the directions indicate: adding the two previous numbers together to find the next number.&lt;/p&gt;

&lt;p&gt;But we can find the answer here in &lt;strong&gt;O(1) space&lt;/strong&gt; by instead just keeping track of only the previous two numbers (&lt;strong&gt;a, b&lt;/strong&gt;) and rolling over the variable contents in a circular pattern.&lt;/p&gt;

&lt;p&gt;Since our rolling loop can only begin on the third number or later, we'll first have to deal with the early &lt;strong&gt;n&lt;/strong&gt;-value edge cases with a special &lt;strong&gt;return&lt;/strong&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update:&lt;/em&gt;&lt;/strong&gt; Apparently there's a mathematical formula for Fibonacci numbers: &lt;strong&gt;Binet's formula&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Binet's formula for the &lt;strong&gt;n&lt;/strong&gt;'th Fibonacci number:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sV-btww6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/57459135cb5773799fab490a49311b3725df94fd" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sV-btww6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wikimedia.org/api/rest_v1/media/math/render/svg/57459135cb5773799fab490a49311b3725df94fd" alt="Binet's Formula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This formula can compute the solution in &lt;strong&gt;O(1) time&lt;/strong&gt; as well as &lt;strong&gt;O(1) space&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are only minor differences betwen the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;sqrt5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)((&lt;/span&gt;&lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-binets-formula"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Binet's formula:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sqrt5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-on-iteration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(N) iteration:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Why you should make your site accessible</title>
      <author>kaspera</author>
      <pubDate>Thu, 15 Apr 2021 08:03:05 +0000</pubDate>
      <link>https://dev.to/kaspera/why-you-should-make-your-site-accessible-om6</link>
      <guid>https://dev.to/kaspera/why-you-should-make-your-site-accessible-om6</guid>
      <description>&lt;p&gt;When creating websites, it’s easy to think of all users as the same. You often forget that not all users can navigate a website with the same ease as oneself. That’s where accessibility comes into play.&lt;/p&gt;

&lt;p&gt;But what is accessibility? As Victor Tsaran, a Technology Program Manager at Google, who also happens to be blind, puts it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Accessibility is really about making sure that the content and the websites we create are useable to people with various impairments or abilities.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- Victor Tsaran, Technology Program Manager at Google&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your mind might automatically jump to a user who has difficulty using a regular keyboard, mouse, or touch screen. That can be one case, yes. But accessibility also covers all from users with ADHD, who has difficulty focusing, to a person trying to read a screen in direct sunlight.&lt;/p&gt;

&lt;p&gt;There are many categories when it comes to accessibility concerns, but the four main areas are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vision (People with limited vision, low vision, or blindness).&lt;/li&gt;
&lt;li&gt;Motor/dexterity (People who have difficulty or can’t use a mouse / touch screen).&lt;/li&gt;
&lt;li&gt;Auditory (People who have difficulty hearing or are deaf).&lt;/li&gt;
&lt;li&gt;Cognitive (People with ADHD, dyslexia, autism, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might already be out of breath thinking, “Pew, isn’t that a lot of work for just a few people?”.&lt;/p&gt;

&lt;p&gt;Yes. However, all people should be able to access the web, which is why there are also laws &amp;amp; policies for this in place. You can view your country’s law or policy &lt;a href="https://www.w3.org/WAI/policies/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, this isn’t all stick and no carrot. The fruit of your labor also benefits users without any impairment or disability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DBz1pdbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kxcvxewejhqm7xsvj3e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBz1pdbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kxcvxewejhqm7xsvj3e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if told that making your site accessible benefits all users. Not only that, but it can also have a direct impact on your conversion rate and your SEO rankings.&lt;/p&gt;

&lt;p&gt;Sounds too good to be true? Let me explain.&lt;/p&gt;

&lt;p&gt;Say you’re optimizing your content for vision accessibility; what do you do? You make your content easier to digest by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making sure you have a nice font size for your body text (E.g., 16px).&lt;/li&gt;
&lt;li&gt;Ensuring that the font is easy to read and is not disturbing (sorry, Comic Sans).&lt;/li&gt;
&lt;li&gt;Setting a good line-height (E.g., 150%).&lt;/li&gt;
&lt;li&gt;Leaving plenty of white space between paragraphs.&lt;/li&gt;
&lt;li&gt;Selecting the correct contrast for your text (light text on a light background is a no-go).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By optimizing your content, you will increase &lt;a href="https://backlinko.com/hub/seo/dwell-time"&gt;dwell time&lt;/a&gt; and reduce &lt;a href="https://backlinko.com/hub/seo/bounce-rate"&gt;bounce rate&lt;/a&gt; and &lt;a href="https://backlinko.com/hub/seo/pogosticking"&gt;pogo sticking&lt;/a&gt;, which all are part of &lt;a href="https://backlinko.com/google-ranking-factors"&gt;Google’s ranking factors&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Don’t think good typography matters? See if you can find an old website from the early 2000s. Back then, the font and font size of choice was 11px Verdana. Try reading this today, and you will properly be rubbing your eyes afterward.&lt;/p&gt;

&lt;p&gt;Speaking of old websites, remember when we couldn’t get enough animated gifs, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee#examples"&gt;marquee-elements&lt;/a&gt;, and cheesy background images? Do you know why this trend eventually died? Because they were distracting. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7fbWspw_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rz8uytdnrdr321ao8o2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7fbWspw_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rz8uytdnrdr321ao8o2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also claimed that making your website more accessible could directly impact your conversion rate. How?&lt;/p&gt;

&lt;p&gt;Well, the obvious answer is, of course, that the more users who can actually access and use your site, the more likely a conversion is to happen. But this isn’t what I had in mind. Let’s look at optimizing for cognitive accessibility.&lt;/p&gt;

&lt;p&gt;Cognitive accessibility covers many topics but generally speaking, it’s about minimizing distractions.&lt;/p&gt;

&lt;p&gt;To minimize distractions, you should find out what your page’s primary goal is and then remove unnecessary elements (“fluff”) that can distract the user from achieving this goal.&lt;/p&gt;

&lt;p&gt;To illustrate this, I’ve created my very own eCommerce store, TacoTsunami.com, where I sell an organic all-in-one taco kit. &lt;/p&gt;

&lt;p&gt;My main goal? To sell my amazing taco kits! 🌮&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtjAvMqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8o2fwlho1rdh6clyjxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtjAvMqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8o2fwlho1rdh6clyjxe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s my current store. It’s not converting all that well. That’s because a lot is going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want to sell my Taco kit (“Add to cart”-button).&lt;/li&gt;
&lt;li&gt;If they don’t want to buy now, I want them to at least save it for later (“Add to wishlist”-button).&lt;/li&gt;
&lt;li&gt;I want everyone to know about our new, awesome club! (“CHECK OUT OUR NEW TACO CLUB!”-text)&lt;/li&gt;
&lt;li&gt;I want them to sign up for our free newsletter (“Sign up for our newsletter”-box)&lt;/li&gt;
&lt;li&gt;I also want them to like this product on Facebook so all their friends can see it! (The “Like”-button)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s five different “calls to action” – on one single page! 😱&lt;/p&gt;

&lt;p&gt;It’s messy, and it distracts the users from our real goal – to sell our awesome taco kit.&lt;/p&gt;

&lt;p&gt;Now let’s try to remove all the fluff like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3ITBZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwr7s9gxlknrme2vbnvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3ITBZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwr7s9gxlknrme2vbnvb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There can’t be any doubt about what action we want the user to take. Removing distractions not only makes your site more accessible to people with cognitive impairments but also improves your conversion rate.&lt;/p&gt;

&lt;p&gt;As Victor puts it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Improving the experience for users with cognitive impairments makes it a so much better experience for everybody else.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;-Victor Tsaran, Technology Program Manager at Google&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agreed, Victor 👍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-alertdesk-to-keep-track-of-your-pages-accessibility"&gt;
  &lt;/a&gt;
  ♿ Use Alertdesk to keep track of your pages’ accessibility
&lt;/h2&gt;

&lt;p&gt;Alertdesk automatically checks your pages’ accessibility daily – both from a Mobile and a Desktop perspective.&lt;/p&gt;

&lt;p&gt;Our accessibility reports help you to see what needs fixing on how to do it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.alertdesk.com/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=article&amp;amp;utm_content=why-you-should-make-your-site-accessible"&gt;Start tracking your accessibility today with Alertdesk. Try us free for 14 days.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ux</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>development</category>
    </item>
    <item>
      <title>10 Signs of a good Ruby on Rails Developer</title>
      <author>Pramod Shinde</author>
      <pubDate>Thu, 15 Apr 2021 08:02:38 +0000</pubDate>
      <link>https://dev.to/pramodshinde7/10-signs-of-a-good-ruby-on-rails-developer-2nc4</link>
      <guid>https://dev.to/pramodshinde7/10-signs-of-a-good-ruby-on-rails-developer-2nc4</guid>
      <description>&lt;p&gt;I have been working as Ruby on Rails developer since last five years with Josh Software, I felt that I should write down my learnings about the best practices followed by the RoR developer. How I learned …? of course to learn something you need to commit the mistakes, thats how we learn right?&lt;/p&gt;

&lt;p&gt;Let’s see, What all you should follow to be a ‘Good’ Ruby on Rails developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-your-migrations-are-thoughtful-"&gt;
  &lt;/a&gt;
  1. Your migrations are “thoughtful” …
&lt;/h2&gt;

&lt;p&gt;Whenever you come across database table schema design do you think through all the aspects like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The table which is being designed where its going to be used? How much it might grow in terms of the data size? (Imagine the worst future of your design)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have I kept correct data types, defaults, constraints if any? Most of the times we really don’t need integer columns, We can use &lt;code&gt;smallint&lt;/code&gt; instead for smaller set of &lt;code&gt;integers&lt;/code&gt;, similarly &lt;code&gt;varchar(10)&lt;/code&gt; vs &lt;code&gt;varchar(255)&lt;/code&gt; vs &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have I added indexes wherever necessary? Thinking through What kind of the queries this table is going to handle?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A special point&lt;/strong&gt;…Do you write multiple migrations for same table? if yes, it's a bad habit.&lt;/p&gt;

&lt;p&gt;Often we don’t think through all the points mentioned above and end up creating multiple migrations for same table which causes codebase to look scary.&lt;/p&gt;

&lt;p&gt;Instead you should use &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; on the migration to fix or alter the table, change in the requirement is an exception to this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-always-follow-the-single-responsibility-principle"&gt;
  &lt;/a&gt;
  2. You always follow the single responsibility principle
&lt;/h2&gt;

&lt;p&gt;We all know a convention of “&lt;strong&gt;&lt;em&gt;skinny controller and fat model&lt;/em&gt;&lt;/strong&gt;”, some of us already follow this but do we follow it wisely.&lt;/p&gt;

&lt;p&gt;We are living in the Rails 5 era, so Why overload models?&lt;/p&gt;

&lt;p&gt;Why not to follow “&lt;strong&gt;&lt;em&gt;keep everything skinny move extra fat to concerns or service objects from the models&lt;/em&gt;&lt;/strong&gt;”, the classes in the codebase should be designed to handle single responsibility.&lt;/p&gt;

&lt;p&gt;I came across the following posts about how to organise controllers and using service objects in Rails.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/"&gt;How DHH Organizes His Rails Controllers&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.netguru.co/blog/service-objects-in-rails-will-help"&gt;Service objects in Rails&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-you-write-test-cases-to-test-the-code"&gt;
  &lt;/a&gt;
  3. You write test cases to test the “code”
&lt;/h2&gt;

&lt;p&gt;I have seen many applications whose CI builds takes ages to finish, &lt;em&gt;What exactly they are testing&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Your test cases should be testing the “code” not the machine performance, better test suits&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share objects between different examples.&lt;/li&gt;
&lt;li&gt;Uses method stubs and avoid the repetitive calls to the methods.&lt;/li&gt;
&lt;li&gt;Don’t test same code twice, if you have sharable piece of code and used at multiple places then don’t write test cases in multiple places.&lt;/li&gt;
&lt;li&gt;Does not creates unnecessary test records, unknowingly many developers end up creating unnecessary test records.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your are using gems like  &lt;a href="https://github.com/stympy/faker"&gt;faker&lt;/a&gt; ,  &lt;a href="https://github.com/thoughtbot/factory_bot_rails"&gt;factory_bot_rails&lt;/a&gt;  and &lt;a href="https://github.com/DatabaseCleaner/database_cleaner"&gt;database_cleaner&lt;/a&gt; to create and clean test records then creating unnecessary records can cost you time and speed.&lt;/p&gt;

&lt;p&gt;Simple example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  create_list(:user, 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much better will be reduce the list size, if you are not doing anything special with 10 users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  create_list(:user, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-you-keep-production-environment-healthy"&gt;
  &lt;/a&gt;
  4. You keep production environment healthy
&lt;/h2&gt;

&lt;p&gt;If you are an engineer and reduce efforts of others, then you use the utilities of other engineers to reduce your efforts.&lt;/p&gt;

&lt;p&gt;A healthy Rails production environment always have&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://mmonit.com/monit/"&gt;Monit&lt;/a&gt;  – Is everything up and running? if not get notified.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.systutorials.com/docs/linux/man/5-logrotate.conf/"&gt;logrotate&lt;/a&gt; – rotates, compresses, and mails system logs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://crontab.guru/"&gt;crontabs&lt;/a&gt; with &lt;a href="https://github.com/javan/whenever"&gt;whenever&lt;/a&gt;, schedules work for you.&lt;/li&gt;
&lt;li&gt;Database backup scripts running in maintenance window.&lt;/li&gt;
&lt;li&gt;Exception notifiers like &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; or &lt;a href="http://rollbar.com/"&gt;Rollbar&lt;/a&gt; or ‘anything that suits you’.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-you-follow-basic-git-etiquettes"&gt;
  &lt;/a&gt;
  5. You follow basic git etiquettes
&lt;/h2&gt;

&lt;p&gt;If you are working in a team and using git then you follow the git etiquettes like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don’t commit untracked files – we often keep git untracked files like &lt;code&gt;something.swp&lt;/code&gt;, &lt;code&gt;backup.sql&lt;/code&gt;, ‘schema.rb&lt;code&gt;or&lt;/code&gt;structure.sql backups&lt;code&gt;,&lt;/code&gt;some.test.script`, you should not commit such files.&lt;/li&gt;
&lt;li&gt;Branch naming – naming something is always difficult but you have to do it, the feature branches should have sensible names, don’t use names like &lt;code&gt;something-wip&lt;/code&gt;, &lt;code&gt;somthing-test&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Delete the feature branches after merge – no explanation required.&lt;/li&gt;
&lt;li&gt;Commit messages – your commit messages must have &lt;code&gt;Github issue number&lt;/code&gt; or &lt;code&gt;any project management story number/link&lt;/code&gt;,  &lt;code&gt;brief description about feature/task&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-you-dont-ignore-readmemd"&gt;
  &lt;/a&gt;
  6. You don’t ignore README.md
&lt;/h2&gt;

&lt;p&gt;Remember you are not the only one who is going to work on particular application for your lifetime. Someone will takeover you and he should not waste his time in figuring out that how to setup things.&lt;/p&gt;

&lt;p&gt;Your application repository must have updated &lt;code&gt;README.md&lt;/code&gt; with detail steps about setting up an application for the first time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-secrets-are-really-secrets-for-you"&gt;
  &lt;/a&gt;
  7. Secrets are “really” secrets for you
&lt;/h2&gt;

&lt;p&gt;We often use credentials for database configs, secrets.yml, third party api’s like AWS, payment gateway, sentry etc.&lt;/p&gt;

&lt;p&gt;You should not commit such credentials/secrets/environment variables to the Github instead you keep them secure with gems like &lt;a href="https://github.com/bkeepers/dotenv"&gt;dotenv-rails&lt;/a&gt;, &lt;a href="https://github.com/laserlemon/figaro"&gt;figaro&lt;/a&gt; or simple dot files that are not committed to the repository.&lt;/p&gt;

&lt;p&gt;A sample file of such credentials should be committed and updated regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-you-do-code-reviews-and-discuss-feature-with-team"&gt;
  &lt;/a&gt;
  8. You do code reviews and discuss feature with team
&lt;/h2&gt;

&lt;p&gt;While working in a team you should get your feature reviewed from another team mate or before starting on any feature discuss it with the team thoroughly, advantages of the code reviews or feature discussion are you will come across many scenarios that are not thought of.&lt;/p&gt;

&lt;p&gt;If you are the only one who is working on a application then you must criticise your own code and cover all the scenarios in test cases.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-you-are-uptodate-and-keep-updating"&gt;
  &lt;/a&gt;
  9. You are up-to-date and keep updating
&lt;/h2&gt;

&lt;p&gt;In open source community we get frequent updates or releases for ruby, rails and gems, you must keep yourself aware and informed by subscribing to the repositories or mailing lists and update your application libraries.&lt;/p&gt;

&lt;p&gt;Also you should stay alert on security fixes about the production operating system, database so you can take necessary action on time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-need-not-to-say"&gt;
  &lt;/a&gt;
  10. Need not to say…
&lt;/h2&gt;

&lt;p&gt;You write clean and maintainable code and your codebase is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Properly indented&lt;/li&gt;
&lt;li&gt;Only 80 columns wide&lt;/li&gt;
&lt;li&gt;Maintainable with smaller methods, less complexity – To know more on this make a habit of using code analyzer like &lt;a href="https://github.com/bbatsov/rubocop"&gt;rubocop&lt;/a&gt;, &lt;a href="https://codeclimate.com/"&gt;Code Climate&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Codebase follows &lt;a href="https://github.com/bbatsov/ruby-style-guide"&gt;Ruby best practices and style guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well there are many more points that can be included in this list but I feel these are the most important to fill in first into this list, If you find that I have missed anything more important then you can comment on this post.&lt;/p&gt;

&lt;p&gt;Thanks for the reading upto here, hope this will help you to become a ‘Good’ developer.&lt;/p&gt;

&lt;p&gt;PS: I am moving out of wordpress this is a cross post. &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Alerta – Alert Monitoring Tool</title>
      <author>kalilinux</author>
      <pubDate>Thu, 15 Apr 2021 07:58:58 +0000</pubDate>
      <link>https://dev.to/kalilinux/alerta-alert-monitoring-tool-2bi</link>
      <guid>https://dev.to/kalilinux/alerta-alert-monitoring-tool-2bi</guid>
      <description>&lt;p&gt;The Alerta monitoring tool was developed with the following aims in mind:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;distributed and de-coupled so that it is SCALABLE
minimal CONFIGURATION that easily accepts alerts from any source
quick at-a-glance VISUALISATION with drill-down to detail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/alerta-alert-monitoring-tool"&gt;Alert Monitoring Tool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>security</category>
      <category>prometheus</category>
      <category>alert</category>
    </item>
    <item>
      <title>Web Development with Dart is Super Easy</title>
      <author>Michael Charles Aubrey</author>
      <pubDate>Thu, 15 Apr 2021 07:53:00 +0000</pubDate>
      <link>https://dev.to/mcaubrey/web-development-with-dart-is-super-easy-2ied</link>
      <guid>https://dev.to/mcaubrey/web-development-with-dart-is-super-easy-2ied</guid>
      <description>&lt;p&gt;Flutter Web has hit stable support, and is likely that which many people today think of when they hear "using Dart to write web apps." However, not only is it possible to write web apps in Dart without Flutter, it is really easy to get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#preliminaries"&gt;
  &lt;/a&gt;
  Preliminaries
&lt;/h1&gt;

&lt;p&gt;If somehow you're reading this and you don't yet have the Dart SDK, you can get it &lt;a href="https://dart.dev/get-dart"&gt;here&lt;/a&gt;. Follow the instructions for the operating system you have, and come back here when you're done. &lt;/p&gt;

&lt;p&gt;Next, you'll need the &lt;code&gt;webdev&lt;/code&gt; and &lt;code&gt;stagehand&lt;/code&gt; tools available globally from your terminal. To do this, run the two following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pub global activate webdev
pub global activate stagehand
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;stagehand&lt;/code&gt; package makes it really easy to get started on a Dart project, and &lt;code&gt;webdev&lt;/code&gt; lets you easily do things like serve your web app during development and build for production deployment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generate-your-project"&gt;
  &lt;/a&gt;
  Generate your Project
&lt;/h1&gt;

&lt;p&gt;Stagehand has a variety of generators available for making console apps, packages, web servers and web apps. We just want a simple web app starting point, so make a new folder for your project, and from that new folder run the following &lt;code&gt;stagehand web-simple&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir my_new_project
cd my_new_project
stagehand web-simple
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that finishes, make sure to run &lt;code&gt;pub get&lt;/code&gt; to pull in the dependencies that you need. You'll be greeted with a project that looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k6LkCzg6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w6qeziethtte1xqoa4ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6LkCzg6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w6qeziethtte1xqoa4ci.png" alt="A screenshot showing the file structure of a newly created stagehand project."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#serve-and-build-your-project"&gt;
  &lt;/a&gt;
  Serve and Build your Project
&lt;/h1&gt;

&lt;p&gt;Serving your project locally for development is made very easy by the aforementioned &lt;code&gt;webdev&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tuxn9rah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amx636xhlb1mdj533712.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tuxn9rah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amx636xhlb1mdj533712.png" alt="Terminal output from running webdev serve."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply run &lt;code&gt;webdev serve&lt;/code&gt; and you'll be able to view your page at &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ogz8Ci9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7l4bn7bgyin4l8693bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ogz8Ci9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7l4bn7bgyin4l8693bu.png" alt="Your Dart app is running."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are ready to build your app for production, run &lt;code&gt;webdev build&lt;/code&gt;. The resulting static site code will be built and saved into the &lt;code&gt;build&lt;/code&gt; folder. That folder then can be uploaded anywhere that you can serve static websites (such as Github Pages or S3).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-stylish-with-sass"&gt;
  &lt;/a&gt;
  Getting Stylish with Sass
&lt;/h1&gt;

&lt;p&gt;One of my favorite things about this approach to building small, simple websites is that using &lt;code&gt;scss&lt;/code&gt; is nearly effortless.&lt;/p&gt;

&lt;p&gt;First, add the &lt;a href="https://pub.dev/packages/sass_builder"&gt;sass_builder&lt;/a&gt; package to your project. Go to the linked page, take note of the most recent version, and then add it to your &lt;code&gt;pubspec.yaml&lt;/code&gt; file as one of your &lt;code&gt;dev_dependencies&lt;/code&gt; like so,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dev_dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build_runner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^1.10.0&lt;/span&gt;
  &lt;span class="na"&gt;build_web_compilers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^2.11.0&lt;/span&gt;
  &lt;span class="na"&gt;pedantic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^1.9.0&lt;/span&gt;
  &lt;span class="na"&gt;sass_builder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^2.1.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, any &lt;code&gt;scss&lt;/code&gt; or &lt;code&gt;sass&lt;/code&gt; file will be built into a &lt;code&gt;css&lt;/code&gt; file with the corresponding name. So if you have a file called &lt;code&gt;style.scss&lt;/code&gt; in your &lt;code&gt;web&lt;/code&gt; folder, after it is built it will become a &lt;code&gt;style.css&lt;/code&gt; file in your &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Within your html files, be sure to refer to the style files by their &lt;code&gt;css&lt;/code&gt; name. So for example if you have a file named &lt;code&gt;web/style.scss&lt;/code&gt;, in &lt;code&gt;web/index.html&lt;/code&gt; you would include it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because you're referencing the resulting built file, not the source &lt;code&gt;scss&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;So let's prepare a little HTML that we can style (and then later use for demonstrating making HTTP requests).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"good-boy"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"get-good-boy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Good Boy!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And some &lt;code&gt;SCSS&lt;/code&gt; in our &lt;code&gt;styles.scss&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nn"&gt;#app&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#handle-fetch-requests-with-dio"&gt;
  &lt;/a&gt;
  Handle Fetch Requests with Dio
&lt;/h1&gt;

&lt;p&gt;Another great thing about making simple web apps with Dart in this way, is that you have access to the vast assortment of Dart libraries. &lt;/p&gt;

&lt;p&gt;If, for example, you're familiar with using Dio due to working with Flutter, there's no reason why you can't use Dio to handle your fetch requests here.&lt;/p&gt;

&lt;p&gt;First add &lt;a href="https://pub.dev/packages/dio"&gt;Dio&lt;/a&gt; as a dependency in your &lt;code&gt;pubspec.yaml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="na"&gt;dio&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^3.0.10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of your &lt;code&gt;main.dart&lt;/code&gt; file, include these dependenices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:html'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:dio/dio.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;dart:html&lt;/code&gt; will provide the &lt;code&gt;querySelector&lt;/code&gt; method as well as typing for various elements, &lt;code&gt;dart:covert&lt;/code&gt; will be used for turning JSON responses into maps, and &lt;code&gt;dio&lt;/code&gt; of course provides &lt;code&gt;Dio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So within our &lt;code&gt;main&lt;/code&gt; function, let's grab the necessary elements and add an event listener to the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ImageElement&lt;/span&gt; &lt;span class="n"&gt;dogImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;querySelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#good-boy'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;ButtonElement&lt;/span&gt; &lt;span class="n"&gt;dogButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;querySelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#get-good-boy'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;dogButton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addEventListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'click'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dogImage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;getGoodBoy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of the above is pretty straightforward. From there we need to actually create the &lt;code&gt;getGoodBoy&lt;/code&gt; button for grabbing pictures of the goodest of good boys (from a free API of dog pictures).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getGoodBoy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://dog.ceo/api/breed/akita/images/random'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Dio&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you have it! If everything works you should be greeted with something like this upon pressing the "Get Good Boy" button!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yU6f5HNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdqc2rf0o5a01zyc2udq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yU6f5HNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdqc2rf0o5a01zyc2udq.png" alt="The Goodest of Good Boys"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dart</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Resources for building your SaaS product on AWS</title>
      <author>Gunnar Grosch</author>
      <pubDate>Thu, 15 Apr 2021 07:51:01 +0000</pubDate>
      <link>https://dev.to/gunnargrosch/resources-for-building-your-saas-product-on-aws-40ke</link>
      <guid>https://dev.to/gunnargrosch/resources-for-building-your-saas-product-on-aws-40ke</guid>
      <description>&lt;p&gt;This post contains a large collection of code samples, blog posts, and white papers that in-depth explain and show how to build you SaaS product on AWS. If you have any questions, please reach out on &lt;a href="https://twitter.com/GunnarGrosch"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/gunnargrosch/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-samples"&gt;
  &lt;/a&gt;
  Code samples
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#aws-saas-factory-monolith-to-serverless-saas-workshop"&gt;
  &lt;/a&gt;
  AWS SaaS Factory Monolith to Serverless SaaS Workshop
&lt;/h4&gt;

&lt;p&gt;The goal of this lab is to guide you through a monolith to serverless SaaS migration that provides a more in-depth look at the common moving parts of this problem. Certainly, each solution will have its own unique collection of migration challenges. However, seeing a working example can provide you with insights into patterns and strategies that can help shape your approach to moving your monolithic environment to a multi-tenant SaaS model.&lt;br&gt;
&lt;a href="https://github.com/aws-samples/aws-saas-factory-serverless-workshop"&gt;https://github.com/aws-samples/aws-saas-factory-serverless-workshop&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-serverless-saas-with-lambda-layers"&gt;
  &lt;/a&gt;
  Building Serverless SaaS with Lambda layers
&lt;/h4&gt;

&lt;p&gt;One of the key goals of every software-as-a-service (SaaS) architect, is to create an environment where the complexity of multi-tenancy is largely hidden away from developers. The goal of this session is to introduce frameworks, libraries, and tooling that limits a developer’s need to have any awareness of tenant context. This will free up developers to focus on the features and functionality of their system.&lt;br&gt;
&lt;a href="https://github.com/aws-samples/aws-serverless-saas-layers"&gt;https://github.com/aws-samples/aws-serverless-saas-layers&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-saas-solutions-on-aws"&gt;
  &lt;/a&gt;
  Building SaaS Solutions on AWS
&lt;/h4&gt;

&lt;p&gt;This workshop provides a series of activities for attendees to interact with a functional solution, and hands-on exercises that introduce code and configuration to realize and extend the capabilities of this SaaS environment. The combination of lecture and exercises through the lens of a working reference solution give greater insight into SaaS on AWS best practices.&lt;br&gt;
&lt;a href="https://github.com/aws-samples/aws-saas-factory-bootcamp"&gt;https://github.com/aws-samples/aws-saas-factory-bootcamp&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#eks-saas-reference-solution"&gt;
  &lt;/a&gt;
  EKS SaaS - Reference Solution
&lt;/h4&gt;

&lt;p&gt;The code provide here is intended to provide a sample implementation of a SaaS EKS solution. The goal is to provide SaaS developers and architects with working code that will illustrate how multi-tenant SaaS applications can be design and delivered on AWS. The solution covers a broad range of multi-tenant considerations, including tenant isolation, identity, data partitioning, and deployment. It provides developers with a prescriptive approach the the fundamentals of building SaaS solution with EKS. &lt;br&gt;
&lt;a href="https://github.com/aws-samples/aws-saas-factory-eks-reference-architecture"&gt;https://github.com/aws-samples/aws-saas-factory-eks-reference-architecture&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#saas-tenant-isolation-architecture"&gt;
  &lt;/a&gt;
  Saas Tenant Isolation Architecture
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/aws-samples/saas-tenant-isolation-architecture"&gt;https://github.com/aws-samples/saas-tenant-isolation-architecture&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multitenant-data-isolation-using-postgresql-rls"&gt;
  &lt;/a&gt;
  Multi-tenant data isolation using PostgreSQL RLS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/aws-samples/aws-saas-factory-postgresql-rls"&gt;https://github.com/aws-samples/aws-saas-factory-postgresql-rls&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-amazon-sqs-in-a-multitenant-solution"&gt;
  &lt;/a&gt;
  Using Amazon SQS in a Multi-tenant Solution
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/aws-samples/aws-saas-factory-sqs-multi-tenancy"&gt;https://github.com/aws-samples/aws-saas-factory-sqs-multi-tenancy&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#storing-multitenant-data-on-amazon-s3"&gt;
  &lt;/a&gt;
  Storing Multi-Tenant Data on Amazon S3
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/aws-samples/aws-saas-factory-s3-multitenancy"&gt;https://github.com/aws-samples/aws-saas-factory-s3-multitenancy&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference-billingmetering-service"&gt;
  &lt;/a&gt;
  Reference Billing/Metering Service
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/aws-samples/aws-saas-factory-billing-and-metering-reference-implementation"&gt;https://github.com/aws-samples/aws-saas-factory-billing-and-metering-reference-implementation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-posts"&gt;
  &lt;/a&gt;
  Blog posts
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#aws-wellarchitected-saas-lens-helps-customers-transform-to-a-softwareasaservice-model"&gt;
  &lt;/a&gt;
  AWS Well-Architected SaaS Lens Helps Customers Transform to a Software-as-a-Service Model
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/apn/aws-well-architected-saas-lens-helps-customers-transform-to-software-as-a-service-model/"&gt;https://aws.amazon.com/blogs/apn/aws-well-architected-saas-lens-helps-customers-transform-to-software-as-a-service-model/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#assessing-the-reliability-of-your-saas-environment-with-the-aws-wellarchitected-saas-lens"&gt;
  &lt;/a&gt;
  Assessing the Reliability of Your SaaS Environment with the AWS Well-Architected SaaS Lens
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/apn/assessing-the-reliability-of-your-saas-environment-with-the-aws-well-architected-saas-lens/"&gt;https://aws.amazon.com/blogs/apn/assessing-the-reliability-of-your-saas-environment-with-the-aws-well-architected-saas-lens/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-a-multitenant-saas-solution-using-amazon-eks"&gt;
  &lt;/a&gt;
  Building a Multi-Tenant SaaS Solution Using Amazon EKS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/apn/building-a-multi-tenant-saas-solution-using-amazon-eks/"&gt;https://aws.amazon.com/blogs/apn/building-a-multi-tenant-saas-solution-using-amazon-eks/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#storing-multitenant-saas-data-in-a-serverless-environment-with-amazon-keyspaces"&gt;
  &lt;/a&gt;
  Storing Multi-Tenant SaaS Data in a Serverless Environment with Amazon Keyspaces
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/apn/storing-multi-tenant-saas-data-in-a-serverless-environment-with-amazon-keyspaces/"&gt;https://aws.amazon.com/blogs/apn/storing-multi-tenant-saas-data-in-a-serverless-environment-with-amazon-keyspaces/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-saas-tenant-isolation-strategies-in-new-saas-whitepaper"&gt;
  &lt;/a&gt;
  Explore SaaS Tenant Isolation Strategies in New SaaS Whitepaper
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/apn/explore-saas-tenant-isolation-strategies-in-new-saas-whitepaper/"&gt;https://aws.amazon.com/blogs/apn/explore-saas-tenant-isolation-strategies-in-new-saas-whitepaper/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#applying-dynamically-generated-isolation-policies-in-saas-environments"&gt;
  &lt;/a&gt;
  Applying Dynamically Generated Isolation Policies in SaaS Environments
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/apn/applying-dynamically-generated-isolation-policies-in-saas-environments/"&gt;https://aws.amazon.com/blogs/apn/applying-dynamically-generated-isolation-policies-in-saas-environments/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-the-saas-journey-framework-in-new-aws-whitepaper"&gt;
  &lt;/a&gt;
  Explore the SaaS Journey Framework in New AWS Whitepaper
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/apn/explore-the-saas-journey-framework-in-new-aws-whitepaper/"&gt;https://aws.amazon.com/blogs/apn/explore-the-saas-journey-framework-in-new-aws-whitepaper/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#white-papers"&gt;
  &lt;/a&gt;
  White papers
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#saas-tenant-isolation-strategies"&gt;
  &lt;/a&gt;
  SaaS Tenant Isolation Strategies
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/saas-tenant-isolation-strategies.pdf"&gt;https://d1.awsstatic.com/whitepapers/saas-tenant-isolation-strategies.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#saas-journey-framework-building-a-new-saas-solution-on-aws"&gt;
  &lt;/a&gt;
  SaaS Journey Framework: Building a New SaaS Solution on AWS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://amer.resources.awscloud.com/building-saas-on-aws/saas-journey-framework-building-a-new-saas-solution-on-aws"&gt;https://amer.resources.awscloud.com/building-saas-on-aws/saas-journey-framework-building-a-new-saas-solution-on-aws&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>saas</category>
      <category>serverless</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>How To Create A Kickass GitHub Profile Page</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 15 Apr 2021 07:47:22 +0000</pubDate>
      <link>https://dev.to/codeloungedev/how-to-create-a-kickass-github-profile-page-408a</link>
      <guid>https://dev.to/codeloungedev/how-to-create-a-kickass-github-profile-page-408a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This tutorial is also available as a video. Click on the video below or &lt;a href="https://catalins.tech/youtube"&gt;click this link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In this article, you'll see how to create a catchy, good-looking Github profile page. By the end of the tutorial, your README will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;update automatically with your latest blog articles/YouTube videos&lt;/li&gt;
&lt;li&gt;show your GitHub stats&lt;/li&gt;
&lt;li&gt;display the icons of your tech stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can look at &lt;a href="https://github.com/catalinpit"&gt;my GitHub profile&lt;/a&gt; to see how your profile might look after the tutorial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;Before going further, there are some pre-requisites for this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should have a GitHub account&lt;/li&gt;
&lt;li&gt;You should be familiar with markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the only two pre-requisites for this tutorial.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-create-a-special-readme"&gt;
  &lt;/a&gt;
  1. Create a special README
&lt;/h1&gt;

&lt;p&gt;The first step is to go to your GitHub page and then to the repositories tab. After that, click on the green button saying "New" so you create a new repository. Alternatively, use &lt;a href="https://github.com/new"&gt;this link&lt;/a&gt; to create a new repository.&lt;/p&gt;

&lt;p&gt;For the new repository, you need to use the same name as your GitHub username. For instance, my GitHub username is &lt;code&gt;catalinpit&lt;/code&gt;, so the repository name is the same - &lt;code&gt;catalinpit&lt;/code&gt;. In the figure below, you can see that you get a message automatically saying that it's a special repository.&lt;/p&gt;

&lt;p&gt;When it comes to the description, add something that describes the repository. Also, make sure the repository is public and not private.&lt;/p&gt;

&lt;p&gt;Lastly, click on the checkbox saying &lt;code&gt;Add a README file&lt;/code&gt; to initialize your project with an empty README file. The reason is so you can create and customize the profile in the browser rather than downloading it on your machine.&lt;/p&gt;

&lt;p&gt;After that, click on the green button saying "&lt;strong&gt;Create repository&lt;/strong&gt;". In the figure below, you can see what I did to create my GitHub profile.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HgYTjYqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375525250/IYwIc8X9Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgYTjYqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375525250/IYwIc8X9Z.png" alt="Screenshot 2021-04-14 at 07.45.14.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In the image, you can see an error because I already have the repository, so I cannot create it twice. But if you do it for the first time, it will work properly!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-add-the-heading"&gt;
  &lt;/a&gt;
  2. Add the heading
&lt;/h1&gt;

&lt;p&gt;Now that you have the special repository set up, you can start customizing it. The first step is to add a header to the profile. In my case, I use the following title:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Hi there &amp;lt;img src="https://raw.githubusercontent.com/MartinHeinz/MartinHeinz/master/wave.gif" width="30px"&amp;gt;, I am Catalin Pit!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The image is a hand that waves. The screenshot below illustrates how the above line looks in action.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aU8WYbCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375178658/ZPJMghPWn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aU8WYbCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618375178658/ZPJMghPWn.png" alt="Screenshot 2021-04-14 at 07.39.18.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is just an example, and that's what I use on my profile. However, you are not limited to it, and you can create a better headline.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#3-add-social-media-badges"&gt;
  &lt;/a&gt;
  3. Add social media badges
&lt;/h1&gt;

&lt;p&gt;The next step is to add social media badges to your profile, like the ones in the figure below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G6x7O2pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376203077/Ob8tTzBDV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G6x7O2pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376203077/Ob8tTzBDV.png" alt="Screenshot 2021-04-14 at 07.56.26.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a particular site that generates these called &lt;a href="https://shields.io/category/social"&gt;shields.io&lt;/a&gt;. On this website, you can generate such informative badges for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Twitch&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say you want to add your Twitter follower count. Go to the &lt;a href="https://shields.io/category/social"&gt;shields.io&lt;/a&gt; website and click on the "Twitter follow" button, as shown in the image below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QMaDOPXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376560365/dTfvUF2Wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QMaDOPXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376560365/dTfvUF2Wg.png" alt="Screenshot 2021-04-14 at 08.01.55.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on that button, you get a pop-up where you can customize the button and add your details. In the first field, you need to add your Twitter username.&lt;/p&gt;

&lt;p&gt;However, you can leave the other fields blank. Their purpose is to allow you to customize the badge. For instance, you can replace the default text by entering a value in the field &lt;code&gt;override label&lt;/code&gt;. Similarly, you can use other logos and colours by specifying them. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lMqIWO3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376723360/tdfvLxtdU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMqIWO3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618376723360/tdfvLxtdU.png" alt="Screenshot 2021-04-14 at 08.04.55.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you are done with the badge, click on &lt;code&gt;Copy Badge URL&lt;/code&gt; and then choose the option saying &lt;code&gt;Copy Markdown&lt;/code&gt;. Once the badge code is copied to your clipboard, you can add it to your GitHub profile.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-add-bio"&gt;
  &lt;/a&gt;
  4. Add bio
&lt;/h1&gt;

&lt;p&gt;The fourth step is to add your bio. In this step, there is not much I can advise you. I embedded a screenshot of my GitHub profile so you can see an example.&lt;/p&gt;

&lt;p&gt;However, you should add something unique, and that describes yourself the best. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbn7YzQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618377273359/U6NogXiGC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbn7YzQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618377273359/U6NogXiGC.png" alt="Screenshot 2021-04-14 at 08.14.18.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#progress-check"&gt;
  &lt;/a&gt;
  Progress check
&lt;/h1&gt;

&lt;p&gt;Before moving onto the following steps, let's make sure you managed to get up to this point. By this point, your GitHub profile should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### Hi there &amp;lt;img src="https://raw.githubusercontent.com/MartinHeinz/MartinHeinz/master/wave.gif" width="30px"&amp;gt;, I am &amp;lt;enter your name&amp;gt;!

![Twitter Follow](https://img.shields.io/twitter/follow/&amp;lt;your_twitter_username&amp;gt;?style=social)

&amp;lt;your_bio&amp;gt;

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above markdown snippet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line is your heading&lt;/li&gt;
&lt;li&gt;The second line is the badge you generated on the &lt;code&gt;shields.io&lt;/code&gt; website&lt;/li&gt;
&lt;li&gt;The third line is your bio&lt;/li&gt;
&lt;li&gt;The three dashes &lt;code&gt;---&lt;/code&gt; are a section separator&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#5-add-the-toolbox-icons"&gt;
  &lt;/a&gt;
  5. Add the toolbox icons
&lt;/h1&gt;

&lt;p&gt;The fifth step is about adding icons of your tech stack. The image below illustrates the technologies I use and their logos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSsMtnf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378006466/08LqTPswS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSsMtnf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378006466/08LqTPswS.png" alt="download.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two websites you can use to find the logos of almost any technology. They are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/devicons/devicon/tree/master/icons"&gt;Devicons&lt;/a&gt; - "devicon" is a GitHub repository, and it aims to store all logos representing development languages and tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://worldvectorlogo.com/"&gt;WorldVectorLogo&lt;/a&gt; - The "WorldVectorLogo" website has SVG logos for almost any brand you can think of.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After your bio, add the following markdown snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

🧰 Toolbox

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now find the icons you need on the websites mentioned above. Once you have them, copy the SVG URL, and add it under the "Toolbox" heading.&lt;/p&gt;

&lt;p&gt;Let's say you found the JavaScript and CSS SVGs on the "WorldVectorLogo" website. You simply add the logo by using the &lt;code&gt;img&lt;/code&gt; HTML tag, as shown in the snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

🧰 Toolbox

&amp;lt;img src="https://cdn.worldvectorlogo.com/logos/javascript.svg" alt="JavaScript Logo" width="50" height="50"/&amp;gt; &amp;lt;img src="https://cdn.worldvectorlogo.com/logos/css3.svg" alt="CSS Logo" width="50" height="50"/&amp;gt;

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The figure below illustrates how your Toolbox looks after adding the icons. From here, you can add as many you want or the ones that represent your tech stack. The purpose of this section was to get you started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpK6mqUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378821731/fZWKwuR-J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpK6mqUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378821731/fZWKwuR-J.png" alt="Screenshot 2021-04-14 at 08.40.11.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#6-how-to-create-github-actions"&gt;
  &lt;/a&gt;
  6. How to create GitHub actions
&lt;/h1&gt;

&lt;p&gt;Before fetching the latest videos and blog articles, you need to set up two GitHub actions. Thus, in this section, you'll see how to do that.&lt;/p&gt;

&lt;p&gt;The first step is to go to your special repository (the one you created in step 1) and click on the &lt;code&gt;Actions&lt;/code&gt; tab. After that, click on the button saying &lt;code&gt;New workflow&lt;/code&gt;. The image below shows what you should see.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1B8LDWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378968660/I7NrLpe1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1B8LDWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378968660/I7NrLpe1u.png" alt="Screenshot 2021-04-14 at 08.42.21.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on the button saying "new workflow", you are taken to the "Actions" page. There, you can see workflow templates you can use in your repository.&lt;/p&gt;

&lt;p&gt;There is also a suggestion for your repository - "Workflows made for your repository". Choose the "Simple workflow" and click on the button saying &lt;code&gt;Set up this workflow&lt;/code&gt;. The image below illustrates what you should see.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nU80QqK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378978298/Jh73kwY6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nU80QqK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618378978298/Jh73kwY6u.png" alt="Screenshot 2021-04-14 at 08.42.31.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all you need to know to follow this tutorial. You'll use the same steps to create the necessary workflows to fetch both the articles and videos.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#7-fetch-videos-and-articles"&gt;
  &lt;/a&gt;
  7. Fetch videos and articles
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzqAHGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618379456758/ra7YzSI4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzqAHGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618379456758/ra7YzSI4c.png" alt="Screenshot 2021-04-14 at 08.50.45.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above image shows what you see when you set up a new workflow. It comes with a bunch of code you do not need. &lt;/p&gt;

&lt;p&gt;First of all, change the file name at the top (where it says &lt;code&gt;blank&lt;/code&gt;). After that, delete all the code from the file.&lt;/p&gt;

&lt;p&gt;You can find the workflows you need here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-blog-articles.yml"&gt;fetch blog articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-youtube-videos.yml"&gt;fetch YouTube videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You do not need to create the folders &lt;code&gt;.github/workflows/&lt;/code&gt; in your repository. They are created automatically when you set up the GitHub actions. However, because I set up everything before the tutorial, I already have them in place. As a result, you can use them to copy the code needed for your GitHub actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-youtube-videos"&gt;
  &lt;/a&gt;
  Fetch YouTube videos
&lt;/h3&gt;

&lt;p&gt;For this tutorial, I will show you how to create a workflow to fetch your latest YouTube videos. However, the process for fetching the latest blog articles is similar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TfKjHw75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380365799/9dxcwFDqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TfKjHw75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380365799/9dxcwFDqv.png" alt="Screenshot 2021-04-14 at 09.03.56.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The image above shows how to create the YouTube fetching workflow. The blue rectangles show what I modified and where you have to click to start the workflow. The steps are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name the workflow&lt;/li&gt;
&lt;li&gt;Add the code - &lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-youtube-videos.yml"&gt;get it from here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Start commit&lt;/code&gt; and then on &lt;code&gt;Commit new file&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you commit the new file, the workflow runs automatically. Additionally, it will run daily to fetch your new videos.&lt;/p&gt;

&lt;p&gt;To fetch the blog articles, follow the same process but use this &lt;a href="https://github.com/catalinpit/catalinpit/blob/main/.github/workflows/fetch-blog-articles.yml"&gt;code&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#8-set-up-the-template"&gt;
  &lt;/a&gt;
  8. Set up the template
&lt;/h1&gt;

&lt;p&gt;The last step you have to do to display the latest articles/videos is to go to the README and add the following code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

📺 Latest YouTube Videos

&amp;lt;!-- YOUTUBE-VIDEOS-LIST:START --&amp;gt;
&amp;lt;!-- YOUTUBE-VIDEOS-LIST:END --&amp;gt;


▶ [...more YouTube videos](https://www.youtube.com/channel/UCl1IRCSmm74qhcFNPTHcbMg?sub_confirmation=1)

--------

📘 Latest Blog Articles

&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;
&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;

▶ [...more blog articles](https://catalins.tech)

--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above snippet is a simple markdown code with one exception. You can see the tags &lt;code&gt;youtube-videos-list&lt;/code&gt; and &lt;code&gt;blog-post-list&lt;/code&gt;, which are used in the GitHub actions. They tell the actions where the new videos/articles should be added. If you remove them, your README will not be updated anymore. Other than that, the code is self-explanatory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGNnE3Wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618384206031/X_vZXMSxL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGNnE3Wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618384206031/X_vZXMSxL.png" alt="Screenshot 2021-04-14 at 10.09.51.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The image above illustrates how the profile page looks after setting up the GitHub actions. It displays your latest blog articles and/or YouTube videos automatically. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#9-github-stats"&gt;
  &lt;/a&gt;
  9. GitHub stats
&lt;/h1&gt;

&lt;p&gt;The next and last step is to add GitHub statistics to your profile. You can see below how they look like on my profile.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbF4T4OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380743332/7tEMmVflT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbF4T4OA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618380743332/7tEMmVflT.png" alt="Screenshot 2021-04-14 at 09.12.08.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the following snippet to your README.md, but make sure that you change &lt;code&gt;&amp;lt;your_GitHub_username&amp;gt;&lt;/code&gt; to your GitHub username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------

## &amp;amp;#x1f4c8; My GitHub Stats

[![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=&amp;lt;your_GitHub_username&amp;gt;&amp;amp;hide=java,html,css&amp;amp;theme=radical)](https://github.com/anuraghazra/github-readme-stats)

[![Catalin's GitHub stats](https://github-readme-stats.vercel.app/api?username=&amp;lt;your_GitHub_username&amp;gt;&amp;amp;theme=radical)](https://github.com/anuraghazra/github-readme-stats)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look closely at the links, you can see that they have query parameters. They allow you to customize the stats. &lt;/p&gt;

&lt;p&gt;For instance, in the above link, you can see &lt;code&gt;hide=java,html,css&lt;/code&gt;, which hides those programming languages from the stats. Also, you can see &lt;code&gt;theme=radical&lt;/code&gt;, which changes the theme of the images. You can use the following themes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dark&lt;/li&gt;
&lt;li&gt;radical&lt;/li&gt;
&lt;li&gt;merko&lt;/li&gt;
&lt;li&gt;gruvbox&lt;/li&gt;
&lt;li&gt;tokyonight&lt;/li&gt;
&lt;li&gt;onedark&lt;/li&gt;
&lt;li&gt;cobalt&lt;/li&gt;
&lt;li&gt;synthwave&lt;/li&gt;
&lt;li&gt;highcontrast&lt;/li&gt;
&lt;li&gt;dracula&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides hiding programming languages and using custom themes, you can also toggle options on/off, and you can customize other things such as the line height, custom title, and so on. However, for more GitHub stats or customizations, I recommend you to check the &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;official repository&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Well done for creating an awesome GitHub profile! If you want to see other great GitHub profiles and inspire, you can check the website &lt;a href="https://awesomegithubprofile.tech/?ref=producthunt"&gt;Awesome Github Profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are interested in JavaScript tutorials, I recommend &lt;a href="https://catalins.tech/frontend-masters-membership-is-it-worth-it"&gt;Frontend Masters&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to make money with technical writing, check &lt;a href="https://catalins.tech/websites-that-pay-you-to-write-technical-articles"&gt;websites that pay you to write&lt;/a&gt; technical articles!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A quick dive into generators</title>
      <author>Stephan Meijer</author>
      <pubDate>Thu, 15 Apr 2021 07:36:25 +0000</pubDate>
      <link>https://dev.to/smeijer/a-quick-dive-into-generators-o0l</link>
      <guid>https://dev.to/smeijer/a-quick-dive-into-generators-o0l</guid>
      <description>&lt;p&gt;I've briefly mentioned generators earlier in my &lt;a href="https://dev.to/smeijer/three-ways-to-handle-recursion-5g2l"&gt;article about recursion&lt;/a&gt;. Today, I'm going to explain the concept of generators to you, and why I believe that they are an important thing to know. If you haven't read that article, I'd recommend doing so, as this explanation builds upon that one.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Let's take the recursive function and the recursive generator function from the earlier article. Both these functions convert a tree-like structure to a flat list where each item has an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;parent&lt;/code&gt; property:&lt;/p&gt;

&lt;p&gt;The recursive function looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;FlatNode&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FlatNode&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it's generator variant looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FlatNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, most of my projects have an utility that I named &lt;code&gt;ensureArray&lt;/code&gt;. It's a nifty little helper that wraps values in an array, unless it already is an array. Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I share this because this little utility lets me clean up these functions and make the similarities more obvious. I'll also stop annotating the examples with types, to further reduce the noise.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recursive-generators"&gt;
  &lt;/a&gt;
  Recursive generators
&lt;/h1&gt;

&lt;p&gt;In case you've never seen generators before, (overly simplified), generators are functions decorated with an &lt;code&gt;*&lt;/code&gt; and using the &lt;code&gt;yield&lt;/code&gt; keyword to return values. There is a lot to read about them, but the nice thing is that they are executed lazily. Meaning, when we call &lt;code&gt;flatten&lt;/code&gt; here, it's possible to only process the first &lt;code&gt;n&lt;/code&gt; nodes, and ignore the rest. Where the non-generator variant would first process the entire tree, only to discard everything afterward, generators allow us to only process the absolute minimum of what's required for the task at hand. &lt;/p&gt;

&lt;p&gt;We'll come back to that. Let's take a look at the implementation first. I've simplified the examples from above using the &lt;code&gt;ensureArray&lt;/code&gt; helper, and I've added a log statement:&lt;/p&gt;

&lt;p&gt;Recursive function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flatten&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recursive generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flatten&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see the similarities, right? I hope that makes it less daunting.&lt;/p&gt;

&lt;p&gt;Instead of adding the node to an array, we directly &lt;code&gt;yield&lt;/code&gt; (return) it, and instead of pushing nested nodes to that same array, we also &lt;code&gt;yield&lt;/code&gt; those. The &lt;code&gt;*&lt;/code&gt; that you'll see behind that second and third yield, is syntactic sugar to &lt;code&gt;yield&lt;/code&gt; all results in an array/iterator individually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;could just as well be written as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#lazy-evaluation"&gt;
  &lt;/a&gt;
  Lazy evaluation
&lt;/h1&gt;

&lt;p&gt;So the thing I mentioned earlier about the lazy behavior? Imagine we need to do something only for the first three nodes in that tree. We would write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the traditional, non-generator approach, this would result in the following log:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flatten 1
flatten 2
flatten 3
flatten 4
flatten 5
flatten 6
flatten 7
flatten 8
flatten 9
flatten 10
flatten 11
handle 1
handle 2
handle 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That log tells us that the entire tree is processed and converted to the flat array before we can handle the 3 nodes that we need. The processing time that we used for those other 8 nodes, is wasted.&lt;/p&gt;

&lt;p&gt;Now, if we'd do the same with that generator function, we'd need to change the syntax a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We no longer use the &lt;code&gt;idx&lt;/code&gt; property, but instead, call the &lt;code&gt;next&lt;/code&gt; function from the &lt;code&gt;nodes&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;flatten&lt;/code&gt; call itself doesn't do much there. It does not invoke the &lt;code&gt;flatten&lt;/code&gt; function. The log on that first line? It's not printed. Instead, the call prepares the generator and returns an object with a &lt;code&gt;next&lt;/code&gt; method. When we call the &lt;code&gt;next&lt;/code&gt; method, the generator will run till the next &lt;code&gt;yield&lt;/code&gt; inside that function. When it meets that &lt;code&gt;yield&lt;/code&gt;, it will return the value that's being yielded.&lt;/p&gt;

&lt;p&gt;The return value of &lt;code&gt;next&lt;/code&gt; is not just that yielded value. It's an object with a &lt;code&gt;value&lt;/code&gt; prop, holding your yielded value, and a &lt;code&gt;done&lt;/code&gt; property, holding a boolean that will tell you if this generator is done generating values.&lt;/p&gt;

&lt;p&gt;So the output from that last loop?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flatten 1
handle 1
flatten 2
handle 2
flatten 3
handle 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to understand that the output order has changed. We can handle the node, as soon as the generator yields one. It doesn't yield all nodes at once, it yields every node individually, as soon as it has it. We don't need to wait for the entire tree to be processed. In fact, the processing won't continue, until we explicitly ask for the next node.&lt;/p&gt;

&lt;p&gt;Once we've handled our three nodes, we stop our loop, and the tree is not further processed. We haven't wasted any processing time using the generator approach.&lt;/p&gt;

&lt;p&gt;You probably don't always need loops, and sometimes you do want to process all or nothing. In those cases, it's trivial to wrap the call in &lt;code&gt;Array.from&lt;/code&gt;, to get all nodes at once. Just like you would have with the non-generator approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// [{ id:  … }]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've used a simple loop in this example, but you can imagine that this is quite powerful. Without changes to the generator itself, it can be wrapped with logic to only handle the first &lt;code&gt;n&lt;/code&gt; results, or only process until a certain condition is met.&lt;/p&gt;

&lt;p&gt;Also, isn't it just beautiful, how easy it is to write recursive functions this way? No intermediate arrays. No return complexity. Recursive tree parsing, in 3 lines. All it asks is to get familiar with &lt;code&gt;yield&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ensureArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final word
&lt;/h1&gt;

&lt;p&gt;Generators might look a bit scary at first, but they come with a lot of flexibility and power. I can imagine that they look daunting, especially for inexperienced developers. But I would really recommend getting familiar with them. They make a great asset to your utility belt.&lt;/p&gt;

&lt;p&gt;If you have questions related to this subject, please let me know in the comments. I'm happy to explain things in more detail.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;👋 I'm Stephan, and I'm building &lt;a href="http://rake.red"&gt;rake.red&lt;/a&gt;. If you wish to read more of mine, follow me on &lt;a href="https://twitter.com/meijer_s"&gt;Twitter&lt;/a&gt; or check my work at &lt;a href="https://meijer.ws"&gt;meijer.ws&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Senior .NET Developer Skills Set List</title>
      <author>BinalPrajapati123</author>
      <pubDate>Thu, 15 Apr 2021 07:33:37 +0000</pubDate>
      <link>https://dev.to/binalprajapati123/senior-net-developer-skills-set-list-3i22</link>
      <guid>https://dev.to/binalprajapati123/senior-net-developer-skills-set-list-3i22</guid>
      <description>&lt;p&gt;Many businesses hire Senior .Net developers for their project success. I know you may know about some senior .Net developer skills. To ensure project success and to produce functional, scalable applications, senior .Net developers must have powerful managerial skills with advanced problem-solving skills, and extensive experience in Microsoft Frameworks. &lt;/p&gt;

&lt;p&gt;In this blog, I provide you the skill set list of senior .Net developers who help you boost your business and your project success. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#senior-net-developer-skills-set-list"&gt;
  &lt;/a&gt;
  Senior .NET Developer Skills Set List
&lt;/h1&gt;

&lt;p&gt;• Knowledge of .NET languages including J#, Visual Basic .NET, C++/CLI, JScript.NET, and C#. &lt;br&gt;
• Technical skills- Visual Studio, ASP.NET, ASP.NET Core, Entity Framework, Entity Framework Core, Roslyn, Xamarin &lt;br&gt;
• Proficient with front-end development languages, including JavaScript, HTML5, and CSS.&lt;br&gt;
• High-level managerial skills.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#soft-skills-that-every-senior-net-developer-should-have"&gt;
  &lt;/a&gt;
  Soft Skills that every Senior .Net Developer should have
&lt;/h1&gt;

&lt;p&gt;• Logical thinking.&lt;br&gt;
• Ability to project manage.&lt;br&gt;
• Outstanding problem-solving skills.&lt;br&gt;
• Excellent communication skills in both verbal and written.&lt;br&gt;
• Time-management.&lt;br&gt;
• Patience.&lt;br&gt;
• Active listening.&lt;br&gt;
• Teamwork.&lt;br&gt;
• Helpfulness.&lt;br&gt;
• Attention to detail.&lt;br&gt;
• Adaptability to changes in a turbulent environment.&lt;br&gt;
• Curiosity.&lt;/p&gt;

&lt;p&gt;The recruiters and clients looking to &lt;a href="https://www.bacancytechnology.com/hire-dot-net-developer"&gt;hire .Net Developer&lt;/a&gt; are not just looking at the theoretical knowledge .Net but actually, they look for technical skills and soft skills in senior .Net Developer. Yes, above senior .Net developer skills are strong, but it is necessary to add new skills by learning new and more. &lt;/p&gt;

&lt;p&gt;The more skills you add and learn, the more you paid as a senior .Net developer, and it is better for your project success. &lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>skills</category>
      <category>seniordotnetdeveloper</category>
      <category>netdeveloper</category>
    </item>
  </channel>
</rss>
