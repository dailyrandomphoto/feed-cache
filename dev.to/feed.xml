<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Metamask authentication in NextJS with Third Web</title>
      <author>Anurag</author>
      <pubDate>Tue, 11 Jan 2022 13:33:55 +0000</pubDate>
      <link>https://dev.to/byteslash/metamask-authentication-in-nextjs-with-third-web-55ff</link>
      <guid>https://dev.to/byteslash/metamask-authentication-in-nextjs-with-third-web-55ff</guid>
      <description>&lt;p&gt;Hey There! What's up!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/zSHERzpaQ9x8k/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/zSHERzpaQ9x8k/giphy.gif" alt="hello" width="500" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So Web3 has been in total hype these days, and a lot of developers have been trying out web3 lately, including me. &lt;/p&gt;

&lt;p&gt;And, Authentication is one of the most skeptical parts of a Full Stack application! And in Web 3.0, this flow is managed by wallets, and Metamask is the most popular among them. &lt;/p&gt;

&lt;p&gt;So, in this article, I'm going to show how you can integrate Metamask auth with ThirdWeb in NextJS!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo-of-what-we-are-building-today"&gt;
  &lt;/a&gt;
  Demo of what we are building today:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/d28cd1093e8046a8b9475777d3bf65ac"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-a-new-nextjs-app"&gt;
  &lt;/a&gt;
  Installing a new NextJS app
&lt;/h3&gt;

&lt;p&gt;First, create a NextJS app. I'm also using Tailwind CSS as my UI preference. You can use anything that you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;tailwindcss&lt;/span&gt; &lt;span class="nx"&gt;metamask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#clear-up-the-boilerplate"&gt;
  &lt;/a&gt;
  Clear up the boilerplate
&lt;/h4&gt;

&lt;p&gt;Now, clear up the boilerplate in the &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#installing-the-dependencies"&gt;
  &lt;/a&gt;
  Installing the dependencies
&lt;/h4&gt;

&lt;p&gt;Now, we will install the only required dependency for this app, &lt;code&gt;@3rdweb/hooks&lt;/code&gt;. Go ahead and install &lt;code&gt;@3rdweb/hooks&lt;/code&gt; in your project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# for npm
npm i @3rdweb/hooks

# for yarn
yarn add @3rdweb/hooks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-the-third-web-provider"&gt;
  &lt;/a&gt;
  Setting up the Third Web Provider
&lt;/h3&gt;

&lt;p&gt;Now, we are going to set up the &lt;code&gt;ThirdwebWeb3Provider&lt;/code&gt; in our &lt;code&gt;_app.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThirdwebWeb3Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@3rdweb/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;regenerator-runtime/runtime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supportedChainIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;80001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;injected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThirdwebWeb3Provider&lt;/span&gt;
      &lt;span class="na"&gt;supportedChainIds&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;supportedChainIds&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;connectors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;connectors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThirdwebWeb3Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, first, we are going to import the provider and &lt;code&gt;regenerator-runtime/runtime&lt;/code&gt; at the top of the script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThirdwebWeb3Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@3rdweb/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;regenerator-runtime/runtime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in the main function, we are specifying the &lt;code&gt;supportedChainIds&lt;/code&gt; and &lt;code&gt;connectors&lt;/code&gt;. You might be wondering what are these.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;supportedChainIds&lt;/code&gt; contains a list of networks that are supported by our app. Here, &lt;code&gt;80001&lt;/code&gt; is for &lt;code&gt;Mumbai Testnet Network&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; is for &lt;code&gt;Rinkeby Testnet Network&lt;/code&gt;. You can check the list of all networks and their Chain Ids  &lt;a href="https://dev.toLink"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connectors&lt;/code&gt; is basically all the wallet providers we want to support. Here, &lt;code&gt;injected&lt;/code&gt; is for Metamask wallet. This will be used when we are actually making the function to connect wallet.&lt;/p&gt;

&lt;p&gt;Next, we are wrapping our whole app in &lt;code&gt;ThirdwebWeb3Provider&lt;/code&gt; with &lt;code&gt;supportedChainIds&lt;/code&gt; and &lt;code&gt;connectors&lt;/code&gt; props to specify the configuration.&lt;/p&gt;

&lt;p&gt;That's it for the &lt;code&gt;_app.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-ui-in-the-raw-indexjs-endraw-file"&gt;
  &lt;/a&gt;
  Making a UI in the &lt;code&gt;index.js&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;Now, let's first make a UI for the login flow.&lt;/p&gt;

&lt;p&gt;Head over to &lt;code&gt;index.js&lt;/code&gt; file and make a simple &lt;code&gt;button&lt;/code&gt; to connect wallet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col items-center justify-center min-h-screen py-2 bg-slate-100"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Connect Wallet
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, you will have a basic UI like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekyF8qMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641906515845/FMDlG49IA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekyF8qMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641906515845/FMDlG49IA.png" alt="Screenshot (3).png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-connect-wallet-functionality"&gt;
  &lt;/a&gt;
  Building the connect wallet functionality
&lt;/h3&gt;

&lt;p&gt;Now, let's build the &lt;code&gt;connect wallet&lt;/code&gt; functionality.&lt;/p&gt;

&lt;p&gt;First, we will import the &lt;code&gt;useWeb3&lt;/code&gt; hook from &lt;code&gt;@3rdweb/hooks&lt;/code&gt; in our &lt;code&gt;index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useWeb3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@3rdweb/hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, inside the &lt;code&gt;Home&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { connectWallet, address, error } = useWeb3();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we are going to assign the &lt;code&gt;connectWallet&lt;/code&gt; to the connect wallet button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"&lt;/span&gt;
&lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;connectWallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;injected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Connect Wallet
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are passing &lt;code&gt;injected&lt;/code&gt; as a param to the &lt;code&gt;connectWallet&lt;/code&gt; function. If your remember from the above steps, this is used to specify that we are going to use Metamask to authenticate user.&lt;/p&gt;

&lt;p&gt;Now, at this point, you will have a working connect wallet button.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#displaying-user-address"&gt;
  &lt;/a&gt;
  Displaying user address:
&lt;/h4&gt;

&lt;p&gt;Now, in the &lt;code&gt;Home&lt;/code&gt; component, we are going to check if the user is authenticated and then render component based on that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col items-center justify-center min-h-screen py-2 bg-slate-100"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"px-2 py-1 rounded-full bg-gray-200 hover:bg-gray-300 font-mono font-medium cursor-pointer duration-100"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"px-4 py-2 rounded-md bg-purple-600 cursor-pointer hover:bg-purple-500 text-xl font-semibold duration-100 text-white"&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;connectWallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;injected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Connect Wallet
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling:
&lt;/h4&gt;

&lt;p&gt;Sometimes, the app may not work cause of errors, so in that case, we can use the &lt;code&gt;error&lt;/code&gt; object and log its value.&lt;/p&gt;

&lt;p&gt;Below our &lt;code&gt;useWeb3&lt;/code&gt; hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connectWallet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useWeb3&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We have done it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6fJ1BM7R2EBRDnxK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6fJ1BM7R2EBRDnxK/giphy.gif" alt="congrats" width="498" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>blockchain</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to Operational Analytics</title>
      <author>Adit Modi</author>
      <pubDate>Tue, 11 Jan 2022 13:21:05 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-operational-analytics-2fm</link>
      <guid>https://dev.to/aws-builders/introduction-to-operational-analytics-2fm</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Operational analytics refers to inter-disciplinary techniques and methodologies that aim to improve day-to-day business performance in terms of increasing efficiency of internal business processes and improving customer experience and value. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Business analysts used the traditional analytics systems to recognize the business trends and identify the decisions. But by using the operational analytics systems, they can initiate such business actions based on the recommendations that the systems provide. They can also automate the execution processes to reduce the human errors. This makes the system go beyond being descriptive to being more prescriptive and even being predictive in nature.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enterprises often have diverse and complex IT infrastructure. Challenges arise when trying to identify sources to extract from or identify what operational data captures the state of an analytics application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Traditionally this data came from logging information emanating from different parts of the system. Modern environments include trace and metric data along with log data. Trace data captures the user request for resources as it passes through different systems all the way to the destination and the response back to the user. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Metric data contain various measurements that provide insight into the health or operational state of these systems. The combination of these form a rich set of diverse operational data that analytics application can be built on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4ryFwMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy7x097z2ipn01axpy0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4ryFwMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy7x097z2ipn01axpy0g.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Architecture Options for Building an Analytics Application on AWS&lt;/strong&gt; is a Series containing different articles that cover the key scenarios that are common in many analytics applications and how they influence the design and architecture of your analytics environment in AWS. These series present the assumptions made for each of these scenarios, the common drivers for the design, and a reference architecture for how these scenarios should be implemented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Operational analytics is the process of using data analysis and business intelligence to improve efficiency and streamline everyday operations in real time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A subset of business analytics, operational analytics is supported by data mining, artificial intelligence, and machine learning. It requires a robust team of business and data analysts. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#characteristics"&gt;
  &lt;/a&gt;
  Characteristics
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Discoverability&lt;/strong&gt;: The ability of the system to make operational data available for consumption. This involves discovering multiple disparate types of data available within an application that can be used for various ad hoc explorations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Observability&lt;/strong&gt;: The ability to understand internal state from the various signal outputs in the system. By providing a holistic view of these various signals along with a meaningful inference it becomes easy understand how healthy and well performant the overall system is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;User centricity&lt;/strong&gt;: Each analytics application should address a well-defined operational scope and solve a particular problem at hand. Users of the system often won’t understand or care about the analytics process but only see the value the result.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Agility&lt;/strong&gt;: The system must be flexible enough to accommodate changing needs of an analytics application and offer necessary control to bring in additional data with low overhead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference-architecture"&gt;
  &lt;/a&gt;
  Reference architecture
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_worBWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3cfyqfmz2nkq83a5hxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_worBWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3cfyqfmz2nkq83a5hxf.png" alt="Image description" width="797" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Operational analytics reference architecture&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Operational data&lt;/strong&gt;: Operational data originates from various points in the environment and systems. It consists of log data including systems logs, machine logs, applications logs, events logs, audit and other logs; metric data systems metrics, resource utilization metrics, application performance metrics; trace data including request-response profile and other telemetric data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transformation and ingestion&lt;/strong&gt;: This represents a layer that collects the operational data and performs additional dissection or enrichment or other transformation before being ingested into Amazon OpenSearch Service. These include decoration data from additional sources or transforming the data into form required for indexing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Indexing&lt;/strong&gt;: OpenSearch Service performs indexing of incoming transformed data and makes it available for near-real time searching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visualization&lt;/strong&gt;: This layer brings in all the operational data present in the system into a single pane of glass in the forms of graphs, visualization, and other dashboards for the particular analytics application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Downstream application&lt;/strong&gt;: OpenSearch Service also allows operational data indexed to be available for machine learning, alerting, and reporting application. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#configuration-notes"&gt;
  &lt;/a&gt;
  Configuration notes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose data model before ingestion&lt;/strong&gt;: When bringing data in from disparate sources, especially from structured systems into structureless systems such as OpenSearch, special care must be taken to ensure that the chosen data model provides a frictionless search experience for users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decide what data fields will be searchable&lt;/strong&gt;: By default, Amazon OpenSearch Service indexes all data fields. This might not be desirable in situations like fully or partially matching on numeric data types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use tiered storage&lt;/strong&gt;: The value of operational data or any timestamped data generally decreases with the age of the data. Moving aged data into tiered storage can save significant operational cost. Summarized rollups that can condense the data also can help address storage cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monitor all involved components&lt;/strong&gt;: Monitor all involved components with metrics in Amazon CloudWatch.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Hope this guide gives you an Introduction to Operational Analytics, explains the Characteristics and Reference Architecture for Operational Analytics.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section 👇&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;👋 &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🤓 &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🐱‍💻 &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
✍️ &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me 🚀 for more content.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/analytics-lens/operational-analytics.html"&gt;Reference Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>bigdata</category>
      <category>analytics</category>
    </item>
    <item>
      <title>How Can I lower my GitHub Actions Costs?</title>
      <author>Melih Ekinci</author>
      <pubDate>Tue, 11 Jan 2022 13:17:38 +0000</pubDate>
      <link>https://dev.to/pankod/how-can-i-lower-my-github-action-costs-1dm0</link>
      <guid>https://dev.to/pankod/how-can-i-lower-my-github-action-costs-1dm0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-can-i-lower-my-github-actions-costs"&gt;
  &lt;/a&gt;
  How can I lower my GitHub Actions costs?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; charges per minutes spent on CI. There is no charge for the initial 3000 minutes for Team users; once the 3k threshold is passed, pricing is based on the OS used while no fees are charged for open-source projects. If you use your own build runner, there is no charge for it, including private projects. But using your own build runner can incur maintenance costs.&lt;/p&gt;

&lt;p&gt;The pay per minute is a great model because even if you use a lot of CI, you can get the CI service for affordable prices if you optimize your CI processes. Unfortunately, GitHub Actions does not illustrate in detail the minutes used up by your workflows or by the steps pertaining to these workflows when you are working on a project. &lt;/p&gt;

&lt;p&gt;Take a minute of your time to subscribe to &lt;a href="https://meercode.io"&gt;&lt;strong&gt;Meercode.io&lt;/strong&gt;&lt;/a&gt; to get a detailed report of your previous activities on CI, categorized according to the organization, repository, workflow, and workflow step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-realtime-monitoring-important-for-your-devops-processes"&gt;
  &lt;/a&gt;
  Why is real-time monitoring important for your DevOps processes?
&lt;/h2&gt;

&lt;p&gt;The single most important KPI for almost anyone working in a DevOps role is the state of their CI processes. If you have a well-functioning process, this will save you the burden of daily operations. If your CI processes are not working properly and you want to follow it in real-time, you may be up a gum tree. You might want to do the tracking with an internal tool, whose development process can take way too much time, or turn to open-source solutions. You could also try creating your own monitoring tool by using a few of the open-source solutions out there, which is also bound to take up so much of your time.&lt;/p&gt;

&lt;p&gt;What if we told you about a product that allows monitoring of CI status? Did you know that in just 1 minute you can share the status of your CI processes with yourself, your development teams, and your manager? &lt;strong&gt;Meercode&lt;/strong&gt; gives you all of that. You can easily share weekly detailed emails, custom dashboards, and all with the whole team!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#track-your-multiple-ci-products-from-a-single-screen"&gt;
  &lt;/a&gt;
  Track your multiple CI products from a single screen!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msTcbvgo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voijnt9jgwn43d8aa52s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msTcbvgo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voijnt9jgwn43d8aa52s.png" alt="Dashboard" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does your company use GitHub Action, GitLab, Buddy, etc. for your Web/API development CI processes? Or are you having your CI processes transferred from GitLab CI to GitHub Actions? Or are you using a different product for Mobile CI? No need to switch back and forth between multiple screens! &lt;a href="https://meercode.io"&gt;&lt;strong&gt;Meercode.io&lt;/strong&gt;&lt;/a&gt; allows you to keep track of multiple CI tools, get weekly reports, get a detailed view of your usage, and create different dashboards for different teams in a single interface. Spare a minute for &lt;a href="https://meercode.io"&gt;&lt;strong&gt;Meercode.io&lt;/strong&gt;&lt;/a&gt; to see it all. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwXxWF9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu3u77o60iv5gbs8rqv7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwXxWF9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu3u77o60iv5gbs8rqv7.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T6kHIlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anp4qz0fnllxwog82e9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6kHIlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anp4qz0fnllxwog82e9d.png" alt="Image description" width="880" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A great tool for teams and offices based in different locations. Get a handle on your DevOps metrics effortlessly with &lt;a href="https://meercode.io"&gt;&lt;strong&gt;Meercode.io&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>ci</category>
      <category>github</category>
      <category>githubactions</category>
    </item>
    <item>
      <title>Uncomfortable with your theme? Just make one</title>
      <author>Heaven Aldrico</author>
      <pubDate>Tue, 11 Jan 2022 13:09:00 +0000</pubDate>
      <link>https://dev.to/ldriko/uncomfortable-with-your-theme-just-make-one-4i7k</link>
      <guid>https://dev.to/ldriko/uncomfortable-with-your-theme-just-make-one-4i7k</guid>
      <description>&lt;p&gt;Can't find the right theme? or maybe you found one but suddenly found out there's something wrong about the theme and make you feel uncomfortable. It might even affect your productivity&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--upgdzbO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b62m4s28zex1g0krhqvo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--upgdzbO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b62m4s28zex1g0krhqvo.gif" alt="Uncomfortable" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well just make one. Yeah it's easier than I thought.&lt;/p&gt;

&lt;p&gt;I'm not gonna give you a tutorial that &lt;strong&gt;already&lt;/strong&gt; has been made, an information about how easy is it is just enough so &lt;a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension"&gt;here is the link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I just made one myself combining ayu's color scheme and my own prefered colors. &lt;a href="https://marketplace.visualstudio.com/items?itemName=HeavenAldrico.aldrico-s"&gt;Here check it out&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W1sWruQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ldriko/aldrico-s/blob/main/images/sample.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W1sWruQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ldriko/aldrico-s/blob/main/images/sample.png%3Fraw%3Dtrue" alt="Sample" width="880" height="630"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading my first article. Please share your thoughts or share your own theme in the comment below thanks! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>SigNoz Product Update -Deploy SigNoz using Helm charts, 500+ members on our slack community</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 11 Jan 2022 12:42:00 +0000</pubDate>
      <link>https://dev.to/signoz/signoz-product-update-deploy-signoz-using-helm-charts-500-members-on-our-slack-community-809</link>
      <guid>https://dev.to/signoz/signoz-product-update-deploy-signoz-using-helm-charts-500-members-on-our-slack-community-809</guid>
      <description>&lt;p&gt;Welcome to SigNal 08 - SigNoz's monthly product update, and the last SigNal issue of 2021! 🥳&lt;/p&gt;

&lt;p&gt;This month, we made numerous PRs improving our product experience, added new awesome contributors, and launched a new initiative to discover better UX for our users. We also crossed 500+ members on our Slack community! 🥳&lt;/p&gt;

&lt;p&gt;Wrapping up 2021, let’s see what Humans at SigNoz were up to in the month of December!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-shipped"&gt;
  &lt;/a&gt;
  What we shipped?
&lt;/h2&gt;

&lt;p&gt;We made two major releases this month with lots of UI improvements. We also enabled Helm chart support for ClickHouse Setup.&lt;/p&gt;

&lt;p&gt;Latest Release:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/SigNoz/signoz/releases/tag/v0.5.4" rel="noopener noreferrer nofollow"&gt;Release v0.5.4&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#helm-charts-for-clickhouse-setup"&gt;
  &lt;/a&gt;
  Helm Charts for ClickHouse Setup
&lt;/h3&gt;

&lt;p&gt;Related PR - &lt;a href="https://github.com/SigNoz/signoz/pull/479" rel="noopener noreferrer nofollow"&gt;&lt;/a&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/479"&gt;https://github.com/SigNoz/signoz/pull/479&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Helm charts are the preferred way of deploying applications on Kubernetes and our users requested this feature.  You can now get started with SigNoz on Kubernetes using Helm charts. The Helm chart installation installs the following components of SigNoz:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Query Service (Backend service)&lt;/li&gt;
&lt;li&gt;Web UI (Frontend)&lt;/li&gt;
&lt;li&gt;ClickHouse instance (Datastore)&lt;/li&gt;
&lt;li&gt;OpenTelemetry collector&lt;/li&gt;
&lt;li&gt;Alert Manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read detailed instructions from our &lt;a href="https://signoz.io/docs/deployment/helm_chart"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-for-hetzner-cloud-in-helm-charts"&gt;
  &lt;/a&gt;
  Support for Hetzner Cloud in Helm charts
&lt;/h3&gt;

&lt;p&gt;Related PR - &lt;a href="https://github.com/SigNoz/signoz/pull/537" rel="noopener noreferrer nofollow"&gt;&lt;/a&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/537"&gt;https://github.com/SigNoz/signoz/pull/537&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hetzner cloud is a popular hosting service provider from Germany. With this &lt;a href="https://github.com/SigNoz/signoz/pull/537"&gt;PR&lt;/a&gt;, Hetzner users can deploy SigNoz easily using Helm charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mac-m1-support-released-for-clickhouse-setup"&gt;
  &lt;/a&gt;
  Mac M1 support released for ClickHouse setup
&lt;/h3&gt;

&lt;p&gt;Related PR - &lt;a href="https://github.com/SigNoz/signoz/pull/429" rel="noopener noreferrer nofollow"&gt;&lt;/a&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/429"&gt;https://github.com/SigNoz/signoz/pull/429&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our users using Mac M1 chips were not able to install SigNoz. Clickhouse officially works on M1 chips but they don’t provide an official docker build for arm64. We fixed the issue by using arm64 docker build by Altinity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-graphs-and-legends"&gt;
  &lt;/a&gt;
  Better Graphs and Legends
&lt;/h3&gt;

&lt;p&gt;Our out-of-the-box charts on important application metrics like latency, throughput, and error rates are critical to performance monitoring. We improved these graphs and made the legends more user-friendly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrnW4_u8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/graphs_legends.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrnW4_u8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/graphs_legends.webp" alt="Application latency charts on SigNoz dashboard" width="651" height="424"&gt;&lt;/a&gt;Application latency charts on SigNoz metrics tab&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-issue"&gt;
  &lt;/a&gt;
  Featured issue
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/issues/530" rel="noopener noreferrer nofollow"&gt;Tracing Serverless Architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Serverless architecture has become one of the most popular cloud service models. According to market estimates, its market will reach $22 billion by 2025. We are currently exploring OpenTelemetry’s capabilities to trace a serverless architecture like Lambda service provided by AWS.&lt;/p&gt;

&lt;p&gt;We would love to hear your ideas on this, and if you have used distributed tracing for your serverless functions, feel free to share on this &lt;a href="https://github.com/SigNoz/signoz/issues/530"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-upcoming"&gt;
  &lt;/a&gt;
  What's upcoming?
&lt;/h2&gt;

&lt;p&gt;We are redesigning our &lt;code&gt;Traces&lt;/code&gt; tab with much more powerful filters for quicker troubleshooting and root cause analysis of issues in your application.&lt;/p&gt;

&lt;p&gt;Some of the filters that we’ll be incorporating in the revamped page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;li&gt;HTTP Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a sneak peek of our redesign. We are actively looking for feedback on our &lt;code&gt;tracing&lt;/code&gt; user experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5D86Sb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/trace_filters_v2_search.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5D86Sb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/trace_filters_v2_search.webp" alt="Application latency charts on SigNoz dashboard" width="880" height="550"&gt;&lt;/a&gt;Sneak peek of our redesigned Traces tab&lt;/p&gt;

&lt;p&gt;If you have experience using traces of any monitoring tool, please help us out by booking a &lt;a href="https://calendly.com/ankit-signoz/user-feedback"&gt;feedback meeting&lt;/a&gt;. As a token of appreciation, we’re giving out 1000 INR/20 USD Amazon eGift cards to devs who help us out. 🙂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signoz-news"&gt;
  &lt;/a&gt;
  SigNoz News
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#500-members-on-our-slack-community"&gt;
  &lt;/a&gt;
  500+ members on our Slack Community 🥳
&lt;/h3&gt;

&lt;p&gt;This month we crossed an important milestone in our community. We are now 500+ members strong on Slack, a place where we discuss all things open-source and SigNoz.&lt;/p&gt;

&lt;p&gt;If you’re a developer interested in open-source software and APM tools, then we would love to host you there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSs2tC2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/join_slack_cta.png" alt="SigNoz Slack community" width="880" height="118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-shoutout"&gt;
  &lt;/a&gt;
  User shoutout 😊
&lt;/h3&gt;

&lt;p&gt;We are happiest when our users appreciate our product experience. Notes like these keep us going in our vision to create the best open-source APM tool for developer teams of all sizes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/posts/pawan-bhadauria-25980b7_seed-to-scale-podcast-series-by-accel-insights-activity-6877448856892768256-Fapw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WqyIjzgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/user_love.webp" alt="User testimonial for SigNoz" width="574" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of our users also became a contributor. This is the true essence of open-source, especially for a developer tool. Devs don’t need to wait for anyone to make small tweaks to suit their use-case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-interviews"&gt;
  &lt;/a&gt;
  User Interviews
&lt;/h3&gt;

&lt;p&gt;We are talking to backend/devops engineers who have experience working with APM tools to discover challenges they face while monitoring their applications. We have come across numerous insights with this exercise that will help us make SigNoz better!&lt;/p&gt;

&lt;p&gt;If you are a developer who has used monitoring tools for debugging applications and improving performance, feel free to book a 25-30 mins slot with us 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://calendly.com/ankit-signoz/user-feedback"&gt;Help us make SigNoz better!&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;As mentioned earlier, we are also giving out 1000 INR/$20 USD Amazon eGift cards as a token of appreciation. 🙌&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributor-highlight"&gt;
  &lt;/a&gt;
  Contributor Highlight
&lt;/h3&gt;

&lt;p&gt;We want to thank these amazing contributors who made SigNoz better with their contributions. 🤗&lt;/p&gt;

&lt;p&gt;PRs by new contributors in the last month:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/459"&gt;Allow empty input values in settings retention page&lt;/a&gt; and three others by &lt;a href="https://github.com/aryanshridhar"&gt;Aryan Shridhar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/458"&gt;fix: product feedback button&lt;/a&gt; by &lt;a href="https://github.com/Anurag5086"&gt;Anurag Gupta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/537"&gt;build(kubernetes): Support hcloud CSI (Hetzner)&lt;/a&gt; by &lt;a href="https://github.com/ceefour"&gt;Hendy Irawan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, our contributors are loving the swag we ship them. 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/anurag_gupta23/status/1476089058384252929"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gCTPAcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/contributor_swag_love.webp" alt="twitter shoutout by contributor" width="462" height="665"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-our-blog"&gt;
  &lt;/a&gt;
  From our blog
&lt;/h2&gt;

&lt;p&gt;Nestjs is a Nodejs framework for building scalable server-side applications with typescript. It makes use of frameworks like Express and Fastify to enable rapid development. It has gained wide popularity in recent times, and many applications are making use of the Nestjs framework.&lt;/p&gt;

&lt;p&gt;You can monitor your Nestjs application using SigNoz as OpenTelemetry supports nestjs instrumentation. The biggest advantage of using OpenTelemetry is that you don’t get locked into any vendors. It is an open-source project backed by a huge community of developers, cloud and APM vendors. SigNoz is built natively on OpenTelemetry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/opentelemetry-nestjs/"&gt;Monitor your Nestjs application using OpenTelemetry&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thank you for taking out the time to read this issue :) If you have any feedback or want any changes with the format, please create an &lt;a href="https://github.com/SigNoz/signoz/issues"&gt;issue&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>devops</category>
      <category>performance</category>
      <category>microservices</category>
    </item>
    <item>
      <title>IoT-SaaS: Web App using ReactJS, MongoDB Atlas &amp; Realm</title>
      <author>TagorenathV</author>
      <pubDate>Tue, 11 Jan 2022 12:41:56 +0000</pubDate>
      <link>https://dev.to/tagorenathv/iot-saas-web-app-using-reactjs-mongodb-atlas-realm-48gb</link>
      <guid>https://dev.to/tagorenathv/iot-saas-web-app-using-reactjs-mongodb-atlas-realm-48gb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Nowadays, SaaS platforms &amp;amp; IoT devices are gaining popularity in a variety of use-cases. I built a prototype for IoT based SaaS platform for aquaculture. Users can register to the platform, subscribe to a device and get Real-Time alerts and Dashboards on the fly. Importantly, Pay-as-you-use.&lt;/p&gt;

&lt;p&gt;Though IoT use cases primarily focus on Timeseries collections, I tried to include random features as much as possible to experience different MongoDB features with this proto-type project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Prime Time&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/tagorenathv/iot-saas"&gt;https://github.com/tagorenathv/iot-saas&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tool-stack-used"&gt;
  &lt;/a&gt;
  Tool Stack Used
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All data stored in &lt;code&gt;MongoDB Atlas&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Timeseries collection&lt;/code&gt; for storing sensor_data with granularity and expireAfterSeconds defined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Atlas Search&lt;/code&gt;: Search Index on device collection for fields: title with analyzers &amp;amp; mapping defined for Autocompletition functianality&lt;/li&gt;
&lt;li&gt;Text Index on device collection for fields: title and description for &lt;code&gt;Full-Text search&lt;/code&gt; functionality, including spell corrections&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Scheduled-Triggers&lt;/code&gt; for:

&lt;ul&gt;
&lt;li&gt;simulating data &lt;/li&gt;
&lt;li&gt;calculating aggregated sensor data values &lt;/li&gt;
&lt;li&gt;generating bills every month&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Database-Triggers&lt;/code&gt; on every aggregated-value to check alert condition and insert into alert collection if any&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;Realm-Functions&lt;/code&gt; for performing data manipulations present in MongoDB Atlas collections&lt;/li&gt;
&lt;li&gt;Frontend made with React JS, ant.design UI library and used &lt;code&gt;Realm-Web-Client&lt;/code&gt; SDK for calling Realm-Functions&lt;/li&gt;
&lt;li&gt;Used Email/Password provider of &lt;code&gt;Realm-Authentication&lt;/code&gt; for UI authentication&lt;/li&gt;
&lt;li&gt;Applied &lt;code&gt;Realm-DataAccess Rules&lt;/code&gt; for added layer of Authorization for each collection&lt;/li&gt;
&lt;li&gt;Hosted react application on &lt;code&gt;Realm-Hosting&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;To Watch: &lt;a href="https://watch.screencastify.com/v/GIhh6PDvAx6WIoXJ1K6g"&gt;Link-1&lt;/a&gt; or &lt;a href="https://drive.google.com/file/d/1WX0zJvo65LyWddyfbZUBdVFOW58BaP7f/view?usp=sharing"&gt;Link-2&lt;/a&gt;&lt;br&gt;
To Experience: &lt;a href="https://iot-saas-user-umzdm.mongodbstitch.com/"&gt;iot-saas&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wana-try"&gt;
  &lt;/a&gt;
  Wana Try?
&lt;/h3&gt;

&lt;p&gt;Please follow &lt;a href="https://github.com/tagorenathv/iot-saas#setup-guide"&gt;README&lt;/a&gt; file for setup details and also to understand how different MongoDB services are combined together to perform some action in this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Take-Aways
&lt;/h3&gt;

&lt;p&gt;My Take-Aways on MongoDB ecosystem after this project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB ecosystem has evolved at its best, making developers life easy and bringing ideas into existance with matter of clicks! Importantly, no need to go for other services. One stop solution for all your usecases.&lt;/li&gt;
&lt;li&gt;Want Autocomplete feature? Use Atlas-Search. No more replicating data to Elasticsearch&lt;/li&gt;
&lt;li&gt;Want Timeseries feature? Use Timeseries collection. Utilize granularity and expireAfterSeconds for data archivals and performance enhacement Out-of-the-box. (P.S: Use Atlas cluster from v5.0 for Timeseries collections)&lt;/li&gt;
&lt;li&gt;Want Full-Text search feature? Create Text-Index on collection. No more replicating data to Elasticsearch&lt;/li&gt;
&lt;li&gt;Want Authentication? Use Realm-Authentication&lt;/li&gt;
&lt;li&gt;Want Authorization? Use Realm-Rules&lt;/li&gt;
&lt;li&gt;Want Event-Driven triggers both Scheduled &amp;amp; Database? - Use Realm-Triggers&lt;/li&gt;
&lt;li&gt;Want to access data Serverlessly without backend? Use Realm-Client SDKs or Enable HTTP Endpoints&lt;/li&gt;
&lt;li&gt;Want to host your application? Use Realm-Hosting&lt;/li&gt;
&lt;li&gt;and lot lot lot more out-of-the-box&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-else-could-be-better"&gt;
  &lt;/a&gt;
  What else could be better?
&lt;/h3&gt;

&lt;p&gt;PS.: In my opinion&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Times I felt, documentation is misleading. Navigations could be more clear&lt;/li&gt;
&lt;li&gt;Folders uploading not available at Realm-Hosting UI. Need to create folders and upload files individually if needed. Would save time if this is available from UI&lt;/li&gt;
&lt;li&gt;At Realm-Deployment,  it would be helpful to modify all json configuration files and deploy from UI itself. External &amp;amp; Github actions are quite helpful thought.&lt;/li&gt;
&lt;li&gt;Eagerly waiting for Flutter Realm-SDK GA. Can't wait to use two best things for a project 🔥🔥🔥&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React UI library - &lt;a href="https://ant.design/components/overview/"&gt;ant.design&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.atlas.mongodb.com/getting-started/"&gt;MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/functions/"&gt;Realm-Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/triggers/trigger-types/"&gt;Realm-Triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/web/"&gt;Realm-Web Client SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/rules/"&gt;Realm-Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/authentication/"&gt;Realm-Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/hosting/"&gt;Realm-Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/developer/how-to/build-ci-cd-pipelines-realm-apps-github-actions/"&gt;Realm Github CI/CD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; Project is built and hosted with MongoDB ecosystem and ❤️&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>react</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>What is an AWS Lambda function?</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Tue, 11 Jan 2022 12:41:40 +0000</pubDate>
      <link>https://dev.to/dashbird/what-is-an-aws-lambda-function-3fgi</link>
      <guid>https://dev.to/dashbird/what-is-an-aws-lambda-function-3fgi</guid>
      <description>&lt;p&gt;In this article, we will cover the basics of a Lambda function and its functionality in our every day digital lives.&lt;/p&gt;

&lt;p&gt;AWS Lambda, as we already know, is a compute service that allows you to run code without managing servers. AWS Lambda runs the code when it is needed, and it is &lt;a href="https://aws.amazon.com/lambda/features/#Automatic_scaling"&gt;automatically scaled&lt;/a&gt;. The &lt;strong&gt;code you execute on AWS Lambda is called Lambda function&lt;/strong&gt;, and it can be considered, for better understanding, as a formula in a spreadsheet. As you need to make formulas, so it could automatically calculate any data you enter, functions are somewhat similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h2&gt;

&lt;p&gt;Creating simple functions via the Lambda web console is quite easy. Functions allow your code to run smoothly in performing smaller automated tasks. The function is ready to run as soon as it has been triggered. The Lambda function includes your code along with associated configuration information. Lambda functions have nothing to do with the underlying infrastructure. Therefore, Lambda can execute as many copies of the function as needed so it can be scaled to comply with the rate of the incoming events.&lt;/p&gt;

&lt;p&gt;When your code is uploaded to AWS Lambda, your function is commonly associated with some specific AWS resources like an Amazon S3 bucket, an Amazon DynamoDB table, Amazon SNS notifications, or Amazon Kinesis streams. After associating your function with AWS resources, when the resource has changed, Lambda will execute your function and manage the compute resources to achieve success with the incoming requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-lambda-functions"&gt;
  &lt;/a&gt;
  Building Lambda Functions
&lt;/h2&gt;

&lt;p&gt;After uploading your application code in the form of one or even several AWS Lambda functions to AWS Lambda, AWS Lambda will execute the code for you. AWS Lambda takes care of managing the servers to run the code when invoked. The lifecycle of an AWS Lambda-based application includes several sections.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Authoring code for your Lambda function&lt;/strong&gt; in the languages supported by AWS Lambda. The supported languages are Node.js, Java, C#, Python, and Go. These languages use specific tools for authoring code. Some of them are AWS Lambda console, Eclipse IDE, etc.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Deploying code and creating a Lambda function&lt;/strong&gt; requires you first to package your code and dependencies in a deployment package to be able to develop a Lambda function. After doing so, you need to upload the deployment package to AWS Lambda, so it will allow you to create Lambda function. Organizing your code and dependencies in specific ways is the first step towards building the deployment package. Deployment package instructions may vary depending on the language you have chosen to author the code.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Uploading a deployment package&lt;/strong&gt; is allowed by AWS Lambda's CreateFunction operation which is used for creating a Lambda function. You can choose between AWS Lambda console, &lt;a href="https://aws.amazon.com/cli/"&gt;AWS CLI&lt;/a&gt;, and &lt;a href="https://aws.amazon.com/tools/#sdk"&gt;AWS SDKs&lt;/a&gt; to create a lambda function. Providing configuration information after establishing the lambda function including the compute requirements is submitted to your deployment package.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Testing Lambda functions&lt;/strong&gt; can be done by following one of the methods like testing your lambda function in the console or using the AWS CLI or even check it locally using the &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/test-sam-cli.html"&gt;AWS SAM CLI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Monitoring&lt;/strong&gt; of lambda functions becomes automatic after your it is in production while reporting metrics is done through Amazon CloudWatch. This is the main pain-point of lambda functions. Take a look at &lt;a href="https://dashbird.io/"&gt;our site&lt;/a&gt; to get better insight into your Lambda functions.&lt;/li&gt;
&lt;li&gt;  Lambda itself assists in &lt;strong&gt;troubleshooting&lt;/strong&gt; failures in a function. Lambda logs all of the requests that are handled by your function and it also automatically stores all the logs generated by your code in Amazon CloudWatch Logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configuring-lambda-functions"&gt;
  &lt;/a&gt;
  Configuring Lambda Functions
&lt;/h2&gt;

&lt;p&gt;A Lambda function consists of the code and associated dependencies, and it also has configuration information within it. You are the one who's specifying the configuration information when creating a Lambda function. API is also provided so you can update some of the configuration data. Lambda function configuration information comes with critical elements like computing the resources needed, maximum execution time (timeout), IAM role (execution role), and handler name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Calculating the required resources&lt;/strong&gt; is done by specifying the amount of memory that you wish to allocate for your Lambda function. AWS Lambda allocates CPU power in proportion to the memory by the same ratio as a general-purpose Amazon EC2 instance type like an M3 type. In the example, it would mean that if you allocate 1024 MB of memory, your lambda function will get twice the CPU share than if you allocated 512 MB.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Maximum execution time (timeout)&lt;/strong&gt; is specified to prevent the Lambda function from running non-stop. Since you're paying for the AWS resources that are used to run your Lambda function, this comes quite handy. Upon reaching the timeout, AWS Lambda is terminating the execution of your Lambda function. The recommended setting is valued upon the expected execution time.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;IAM role (execution role)&lt;/strong&gt; is the role that AWS Lambda performs on your behalf when executing a lambda function.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Handler name&lt;/strong&gt; is the method of entry point that runs your lambda function code with any event source dependencies included as a part of your lambda function. You will be able to discover more details, and the quality features of monitoring and debugging AWS Lambda and your Lambda functions by exploring our &lt;a href="https://dashbird.io/docs/"&gt;product features&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#triggering-lambda-function"&gt;
  &lt;/a&gt;
  Triggering Lambda Function
&lt;/h2&gt;

&lt;p&gt;AWS Lambda is operated by utilizing one of these two event models.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  a push event model&lt;/li&gt;
&lt;li&gt;  a pull event model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lambda functions can be written in Node.js (or JavaScript) and Java (Java 8 compatible). These are some of the events that can be configured to trigger the Lambda function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Table updates in Amazon DynamoDB&lt;/li&gt;
&lt;li&gt;  Modifying objects in the S3 bucket&lt;/li&gt;
&lt;li&gt;  Messages that arrive at the Amazon Kinesis stream&lt;/li&gt;
&lt;li&gt;  Notifications that are sent from the Amazon SNS&lt;/li&gt;
&lt;li&gt;  HTTP events sent from API Gateway&lt;/li&gt;
&lt;li&gt;  Custom events coming from mobile applications, web applications, or any other web services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lambda functions are small bits of more significant work done, allowing you to perform it seamlessly and effectively. Starting from scratch is always the best option especially for beginners in the field.&lt;/p&gt;

&lt;p&gt;Hopefully, this article managed to find its way to the readers that are eager to learn and obtain some new knowledge about AWS Lambda and lambda functions. Feel free to post any questions in the comment sections below or even start a discussion about this topic.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;How to deploy a Node.js application to AWS Lambda using Serverless Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/lambda-metrics-monitoring-what-matters/"&gt;AWS Lambda metrics you should definitely be monitoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/top-aws-lambda-performance-monitoring-tools/"&gt;Top 6 AWS Lambda monitoring tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/lambda-not-logging-to-cloudwatch/"&gt;Debugging with Dashbird: Lambda not logging to AWS CloudWatch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/what-are-aws-lambda-triggers/"&gt;What are AWS Lambda triggers?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🗨️ Build a WhatsApp API using Node &amp; Express</title>
      <author>Max Programming</author>
      <pubDate>Tue, 11 Jan 2022 12:30:43 +0000</pubDate>
      <link>https://dev.to/maxprogramming/build-a-whatsapp-api-using-node-express-chf</link>
      <guid>https://dev.to/maxprogramming/build-a-whatsapp-api-using-node-express-chf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxVe9Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8GDoVtr9mvQAAAAC/hey-everyone-spider-man.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxVe9Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8GDoVtr9mvQAAAAC/hey-everyone-spider-man.gif" alt="hey.gif" width="498" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, you will be able to build a &lt;strong&gt;WhatsApp REST API&lt;/strong&gt; using Node.js and Express using Puppeteer and web scraping.&lt;/p&gt;

&lt;p&gt;Although we won't be doing any web scraping, we will use a library that does everything for you already and makes it very easy to work with WhatsApp programmatically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#express-server-setup"&gt;
  &lt;/a&gt;
  Express server setup
&lt;/h3&gt;

&lt;p&gt;To set up the express server, we are not going to do it from scratch, we'll use a generator called  &lt;a href="https://npmjs.org/express-draft"&gt;&lt;code&gt;express-draft&lt;/code&gt;&lt;/a&gt;  by  &lt;a href="https://www.youtube.com/c/yoursTRULY267"&gt;YoursTruly&lt;/a&gt;. Firstly, install &lt;code&gt;express-draft&lt;/code&gt; globally and use the following command to generate an express app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; express-draft
exp &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esgEWpjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641634524269/MM1PjxGlU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esgEWpjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641634524269/MM1PjxGlU.png" alt="image.png" width="880" height="917"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-whatsapp-web-library"&gt;
  &lt;/a&gt;
  Install Whatsapp Web library
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: Installing this package will also download Chromium because of Puppeteer. To disable Chromium download, follow the steps on  &lt;a href="https://blog.usman-s.me/how-to-skip-chromium-download-in-puppeteer"&gt;this post&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So there's an awesome open-source Whatsapp client that connects through the Whatsapp Web browser app made by &lt;a href="https://twitter.com/pedroslopez"&gt;Pedro S. Lopez&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pedroslopez"&gt;
        pedroslopez
      &lt;/a&gt; / &lt;a href="https://github.com/pedroslopez/whatsapp-web.js"&gt;
        whatsapp-web.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A WhatsApp client library for NodeJS that connects through the WhatsApp Web browser app
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/whatsapp-web.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/428351067e85ae072bc069b4fe0e2990f4e2de5fd7655855e80d0239cfdac41b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f77686174736170702d7765622e6a732e737667" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://depfu.com/github/pedroslopez/whatsapp-web.js?project_id=9765" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cd080a847d5cb24617ba0c08297978c442357987d4f1010e6ac7f21a154c6958/68747470733a2f2f6261646765732e64657066752e636f6d2f6261646765732f34613635613064653936656365363566646633396532393465306338646362612f6f766572766965772e737667" alt="Depfu"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/182ade54e7d6fe00fceb65f0d3cc8d97c2b981bcfe1e3b8f28c234e692e7c922/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57686174734170705f5765622d322e323134372e31342d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/182ade54e7d6fe00fceb65f0d3cc8d97c2b981bcfe1e3b8f28c234e692e7c922/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57686174734170705f5765622d322e323134372e31342d627269676874677265656e2e737667" alt="WhatsApp_Web 2.2147.14"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/H7DqQs4" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8985d4dcb1ac05c52d0b0c919f708ab3d48b5435e4d2e89d01e996a0318a86c8/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3639383631303437353433323431313139362e7376673f6c6f676f3d646973636f7264" alt="Discord Chat"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
whatsapp-web.js&lt;/h1&gt;
&lt;p&gt;A WhatsApp API client that connects through the WhatsApp Web browser app&lt;/p&gt;
&lt;p&gt;It uses Puppeteer to run a real instance of Whatsapp Web to avoid getting blocked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I can't guarantee you will not be blocked by using this method, although it has worked for me. WhatsApp does not allow bots or unofficial clients on their platform, so this shouldn't be considered totally safe.&lt;/p&gt;
&lt;h2&gt;
Quick Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://wwebjs.dev/guide" rel="nofollow"&gt;Guide / Getting Started&lt;/a&gt; &lt;em&gt;(work in progress)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.wwebjs.dev/" rel="nofollow"&gt;Reference documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pedroslopez/whatsapp-web.js"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://npmjs.org/package/whatsapp-web.js" rel="nofollow"&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;The module is now available on npm! &lt;code&gt;npm i whatsapp-web.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Please note that Node v12+ is required.&lt;/p&gt;
&lt;h2&gt;
Example usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; Client &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'whatsapp-web.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;client&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;Client&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;client&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;on&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'qr'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;qr&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c"&gt;// Generate and scan this code with your phone&lt;/span&gt;
    &lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'QR RECEIVED'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;qr&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;client&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pedroslopez/whatsapp-web.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we'll install it through NPM &lt;em&gt;or yarn&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i whatsapp-web.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we're done with that, we can set it up in our &lt;code&gt;app.js&lt;/code&gt; file by following the given  &lt;a href="https://github.com/pedroslopez/whatsapp-web.js/blob/main/example.js"&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can alter the file as follows,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http-errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;morgan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./session.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sessionCfg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;existsSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sessionCfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// Make headless true or remove to run browser in background&lt;/span&gt;
  &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sessionCfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While using this library, whenever a user logs in, their information will be stored in a &lt;code&gt;session.json&lt;/code&gt; file, which is then used to authenticate the user the next time when the server starts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Create a &lt;code&gt;nodemon.json&lt;/code&gt; file in the root folder and add these contents to ignore the &lt;code&gt;session.json&lt;/code&gt; file whenever it changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$schema"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;omitted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;it's&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IntelliSense.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;REMOVE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;THIS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;COMMENT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://json.schemastore.org/nodemon.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ignore"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"session.json"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-routes-and-user-login"&gt;
  &lt;/a&gt;
  Creating routes and user login
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-events"&gt;
  &lt;/a&gt;
  Using events
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;whatsapp-web.js&lt;/code&gt; has a lot of events to work with, and we'll now use some of them to get the QR code, check the authentication, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add this after express code but before starting the server&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: This event will not be fired if a session is specified.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;QR RECEIVED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getqr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AUTHENTICATED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;sessionCfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth_failure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Fired if session restore was unsuccessfull&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AUTHENTICATION FAILURE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;READY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Listening for the server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`🚀 @ http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code uses events provided by the library to tackle different situations. They are pretty self-explanatory so I am not gonna explain each of them.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;"qr"&lt;/code&gt; method, we create a route that sends the QR code as the response. The QR code is in raw format, meaning it needs to be generated so for the purpose of this tutorial, we'll use a library called &lt;code&gt;qrcode-terminal&lt;/code&gt; to show the QR Code in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Run `npm i qrcode-terminal` before this&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qrcode-terminal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: This event will not be fired if a session is specified.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;QR RECEIVED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;small&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// Add this line&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getqr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-sendmessage-endraw-endpoint"&gt;
  &lt;/a&gt;
  The &lt;code&gt;sendmessage&lt;/code&gt; endpoint
&lt;/h3&gt;

&lt;p&gt;Now that we have everything set up, let's do the most exciting part that is to send a message using our own API.&lt;/p&gt;

&lt;p&gt;For that, we create a route in the &lt;code&gt;app.js&lt;/code&gt; file itself.&lt;/p&gt;

&lt;p&gt;Let's create the POST endpoint for &lt;code&gt;sendmessage&lt;/code&gt; and it will be an &lt;code&gt;async&lt;/code&gt; function with a try-catch block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sendmessage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Magic happens here&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the body of the request, the user has to enter two pieces of data.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mobile number&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll identify those as &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; respectively. Hence, we get them from the request body, and use them to very easily send the message &lt;strong&gt;from the client to the given number&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To send a message, we use the &lt;code&gt;client.sendMessage&lt;/code&gt; method and these are the arguments we need to pass in&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqiT9hcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641641747436/t-Pzomgq-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqiT9hcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641641747436/t-Pzomgq-.png" alt="image.png" width="459" height="192"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sendmessage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Get the body&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@c.us`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Send the message&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// Send the response&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now here, in the &lt;code&gt;sendMessage&lt;/code&gt; method, we pass in the mobile number and the message itself. With the mobile number, we have to attach &lt;code&gt;@c.us&lt;/code&gt; at the very end, so we do that with template literals in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-api"&gt;
  &lt;/a&gt;
  Testing the API
&lt;/h2&gt;

&lt;p&gt;In order to test our API, we first run it using &lt;code&gt;npm run dev&lt;/code&gt;. That will open up a browser (if you've set &lt;code&gt;headless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Running the server will give us the QR Code to authenticate because it's the first time. So, you have to scan it through WhatsApp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9T5t2EwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642355849/9jDhG2-nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9T5t2EwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642355849/9jDhG2-nd.png" alt="image.png" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once authenticated, you will notice that a &lt;code&gt;session.json&lt;/code&gt; file has been created with the following contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiaaUnYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642315529/HTwbVxMBq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiaaUnYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642315529/HTwbVxMBq.png" alt="image.png" width="880" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in VS Code itself, we'll use an extension called &lt;strong&gt;Thunder Client&lt;/strong&gt;, which works like Postman for API testing.  &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;Here's the link&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXYc8tXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642506648/MYLChp2-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXYc8tXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642506648/MYLChp2-l.png" alt="image.png" width="278" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;New Request&lt;/strong&gt; in Thunder Client, and then add the following details. In the &lt;code&gt;number&lt;/code&gt; field, add the mobile number followed by the country code of the number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ0QavDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641645569198/ysdOUnwwE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ0QavDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641645569198/ysdOUnwwE.png" alt="image.png" width="511" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Look at the image carefully&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then hit &lt;strong&gt;Send&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the message is sent successfully, the number you entered will receive it and you will get back the &lt;code&gt;msg&lt;/code&gt; as the response. If not, then an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVf6MzU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641643609398/muQhzRQSn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVf6MzU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641643609398/muQhzRQSn.png" alt="image.png" width="500" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUIUesZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/68a5_Ug62VYAAAAM/success-strong.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUIUesZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/68a5_Ug62VYAAAAM/success-strong.gif" alt="success.gif" width="220" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can read more about the library here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wwebjs.dev/"&gt;https://wwebjs.dev/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed building out the WhatsApp API using Node.js, Express, and &lt;code&gt;whatsapp-web.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on my &lt;a href="https://youtube.com/MaxProgramming"&gt;YouTube channel&lt;/a&gt; and my  &lt;a href="https://twitter.com/maxprogramming1"&gt;Twitter&lt;/a&gt; 😉&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Until next time, keeping awesome ✌️.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating a discord auto threading system</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 11 Jan 2022 12:12:55 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/creating-a-discord-auto-threading-system-433</link>
      <guid>https://dev.to/dailydevtips1/creating-a-discord-auto-threading-system-433</guid>
      <description>&lt;p&gt;In case you missed it, I launched a discord server for technical writers: &lt;a href="https://discord.gg/bfnmNMCTSJ"&gt;Technical Types Community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of this server is to create a dedicated space for technical writers, where we can collaborate, share ideas and ask questions.&lt;/p&gt;

&lt;p&gt;This is an open-sourced free for all and welcoming community.&lt;/p&gt;

&lt;p&gt;I introduced a channel to get feedback on your work with this community. However, the realization quickly was that feedback gets buried if there are a lot of comments.&lt;/p&gt;

&lt;p&gt;Threads would be a fantastic solution. However, it's difficult to force and monitor this behavior.&lt;/p&gt;

&lt;p&gt;That leaves us with only one choice: Automate it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DTtnEeLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093383809/xByZ1tpZK.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DTtnEeLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093383809/xByZ1tpZK.jpeg" alt="Automate all the things" width="289" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-sure-people-cant-spam-the-main-channel"&gt;
  &lt;/a&gt;
  Making sure people can't spam the main channel
&lt;/h2&gt;

&lt;p&gt;The first thing we need to take care of is to make sure people can only post one link per x hours.&lt;/p&gt;

&lt;p&gt;Luckily for us, discord comes with this feature built-in, and it's called "slow mode" this allows a user to only post once per x hours on the main thread.&lt;/p&gt;

&lt;p&gt;This is no longer applicable in the threads created, so ideal for what we want to achieve.&lt;/p&gt;

&lt;p&gt;To enable slow mode for a channel, click the little gear icon next to the channel's name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbkSH8wY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093668608/3Te80oZ58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbkSH8wY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093668608/3Te80oZ58.png" alt="Edit channel in discord" width="556" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you want to set the slow mode slider to the max (6 hours).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN-FqGUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093754940/bGMMVLi3L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN-FqGUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093754940/bGMMVLi3L.png" alt="Slow mode enabled in discord" width="880" height="589"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This setting will make sure a user can only send one message per 6 hours on the main channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-auto-threader-bot"&gt;
  &lt;/a&gt;
  Creating the auto threader bot
&lt;/h2&gt;

&lt;p&gt;We want to make sure a thread is created for every post on this channel.&lt;/p&gt;

&lt;p&gt;We won't be building this bot from scratch as a super awesome one already exists.&lt;/p&gt;

&lt;p&gt;It's this &lt;a href="https://github.com/MarcusOtter/discord-needle"&gt;Discord needle bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I did make my own version of this because I wanted it to work with &lt;code&gt;.env&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;Markus made some changes to his one based on my feedback, and you can use his &lt;code&gt;custom-config&lt;/code&gt; branched version at the point of writing this.&lt;/p&gt;

&lt;p&gt;If you choose to use my version, you must create a &lt;code&gt;.env&lt;/code&gt; file that includes the following two variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;API_TOKEN={DISCORD_API_TOKEN}
CHANNEL={CHANNEL_ID}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-the-channel-id"&gt;
  &lt;/a&gt;
  Find the channel id
&lt;/h3&gt;

&lt;p&gt;To find the discord channel id, you will need to enable developer mode in discord.&lt;/p&gt;

&lt;p&gt;Click your user profile settings by clicking on the gear icon next to your profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUabV04P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094151122/izpMDIHLX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUabV04P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094151122/izpMDIHLX.png" alt="User settings in discord" width="480" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can find the "Advanced" menu and toggle the developer mode on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N__f8qNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094215732/X_q5nfDy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N__f8qNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094215732/X_q5nfDy1.png" alt="Developer mode in discord" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this is on, you can right-click any channel and click the "Copy ID" option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQGC4To9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094288763/K_cR_ehDk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQGC4To9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094288763/K_cR_ehDk.png" alt="Discord copy channel ID" width="692" height="812"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-discord-bot"&gt;
  &lt;/a&gt;
  Creating the discord bot
&lt;/h3&gt;

&lt;p&gt;We have to create the discord bot by visiting the &lt;a href="https://discord.com/developers/applications"&gt;Discord Developer portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a new bot by clicking the "New Application" button.&lt;/p&gt;

&lt;p&gt;Once you've done this, click the "Oauth2" item.&lt;br&gt;
Select "Bot" as the scope and check the following permissions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View channels&lt;/li&gt;
&lt;li&gt;Send messages&lt;/li&gt;
&lt;li&gt;Send messages in threads&lt;/li&gt;
&lt;li&gt;Create public threads&lt;/li&gt;
&lt;li&gt;Read message history&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mb3DcsLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094693993/WfrqSarqM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mb3DcsLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094693993/WfrqSarqM.png" alt="discord bot settings" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the copy button at the bottom and paste this into a new tab.&lt;br&gt;
This will prompt a setup for this bot.&lt;br&gt;
Select the server you want to add this bot to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ng1rva5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094750090/9PYPMpfM6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ng1rva5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094750090/9PYPMpfM6.png" alt="Adding the discord bot" width="756" height="836"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-the-bot"&gt;
  &lt;/a&gt;
  Running the bot
&lt;/h3&gt;

&lt;p&gt;Now it's time to run your bot.&lt;br&gt;
To test the bot, you can run the local version using &lt;code&gt;npm start&lt;/code&gt; in the project.&lt;/p&gt;

&lt;p&gt;Or you can follow my guide on &lt;a href="https://daily-dev-tips.com/posts/hosting-a-discord-bot-on-railway/"&gt;running a bot on Railway app&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out
&lt;/h2&gt;

&lt;p&gt;You should now post on this channel, and a thread will be automatically created for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0bwgJW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094965254/cBbNb8gOm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0bwgJW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094965254/cBbNb8gOm.png" alt="Auto threader bot in action" width="880" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or even better, you can try it in real life on the &lt;a href="https://discord.gg/bfnmNMCTSJ"&gt;Technical Typers Discord server&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discord</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hosting a discord bot on Railway</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 11 Jan 2022 12:10:20 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/hosting-a-discord-bot-on-railway-468d</link>
      <guid>https://dev.to/dailydevtips1/hosting-a-discord-bot-on-railway-468d</guid>
      <description>&lt;p&gt;Now that we have our super cool &lt;a href="https://daily-dev-tips.com/posts/show-and-hide-a-header-based-on-scroll-direction/"&gt;discord bot that can respond to our slash commands&lt;/a&gt;, we need a way to host it.&lt;/p&gt;

&lt;p&gt;Until now, we just used it by starting a local node instance, but this means the process stops every time we close our computer.&lt;/p&gt;

&lt;p&gt;Because I'm Dutch, I went the cheapskate way and found this fantastic hosting service called &lt;a href="https://railway.app/"&gt;Railway&lt;/a&gt;. Their free tier ($5 a month) is enough to host a simple discord bot.&lt;/p&gt;

&lt;p&gt;In this article, I'll guide you through the process of setting this up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting-a-discord-bot-on-railway"&gt;
  &lt;/a&gt;
  Hosting a discord bot on Railway
&lt;/h2&gt;

&lt;p&gt;Make sure you log in with your favorite social provider.&lt;br&gt;
Then we can click the &lt;code&gt;New Project&lt;/code&gt; button to add a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bsyOyOCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641011337459/aj2I65Ezc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bsyOyOCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641011337459/aj2I65Ezc.png" alt="New project on Railway app" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They then provide a couple of cool options we can choose from (including databases).&lt;/p&gt;

&lt;p&gt;We will choose &lt;code&gt;Deploy from repo&lt;/code&gt; from the options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihAlrc1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641011423144/yg6n60C8E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihAlrc1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641011423144/yg6n60C8E.png" alt="Deploy from repo" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the git project from the select field. Once this is done, click the &lt;code&gt;Add Variables&lt;/code&gt; button and add the variables you used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HccPPF7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641014541624/VdFcsuWyT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HccPPF7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641014541624/VdFcsuWyT.png" alt="Add variables to Railway app" width="880" height="934"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the case of the slash command bot, you will need the following two:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APP_ID={APPLICATION_ID}
TOKEN={YOUR_BOT_TOKEN}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've added them click the create button, it will take a minute to set up, and you should see the logs for what's going on.&lt;/p&gt;

&lt;p&gt;And once this is done, your bot is already up and running!&lt;/p&gt;

&lt;p&gt;Yes, it can be that easy 🤯.&lt;/p&gt;

&lt;p&gt;Big shoutout to the Railway app for making this possible and so simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discord</category>
      <category>serverless</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Convert your website into EXE file using Node.JS</title>
      <author>SupremeWyn</author>
      <pubDate>Tue, 11 Jan 2022 12:06:58 +0000</pubDate>
      <link>https://dev.to/supremewyn/convert-your-website-into-exe-file-using-nodejs-2nkg</link>
      <guid>https://dev.to/supremewyn/convert-your-website-into-exe-file-using-nodejs-2nkg</guid>
      <description>&lt;p&gt;Cover designed by KindPng.com&lt;/p&gt;

&lt;p&gt;Hey guys 😁, today I'm gonna be showing you how to convert your website link into exe file&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download node.js&lt;/li&gt;
&lt;li&gt;When you downloading make sure you click the button "Add to PATH", and then you ready to install.&lt;/li&gt;
&lt;li&gt;Open cmd and type "npm install -g nativefier"&lt;/li&gt;
&lt;li&gt;Wait until the installation is finished.&lt;/li&gt;
&lt;li&gt;After that type like this "nativefier --name 'Your App Name' 'myapp.com'"&lt;/li&gt;
&lt;li&gt;Wait until the converting is finish and goto C:/Windows/System32/And search folder with the name "yourappname-win32"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any problem feel free to ask, im gonna answer as fast as i can&lt;/p&gt;

</description>
      <category>node</category>
      <category>nativefier</category>
      <category>tutorial</category>
      <category>npm</category>
    </item>
    <item>
      <title>Join Data Across APIs</title>
      <author>Wundergraph 🚀</author>
      <pubDate>Tue, 11 Jan 2022 11:56:56 +0000</pubDate>
      <link>https://dev.to/wundergraph/join-data-across-apis-35fc</link>
      <guid>https://dev.to/wundergraph/join-data-across-apis-35fc</guid>
      <description>&lt;p&gt;One way to think about APIs is to see them as lego blocks. They might be (Micro-) Services within your company or an API from a third party, but in the end, it's just lego blocks to solve specific problems.&lt;/p&gt;

&lt;p&gt;The number of lego blocks being created is constantly growing, which leads to a few problems.&lt;/p&gt;

&lt;p&gt;How do you make all your lego blocks easily accessible? How should you store them? How do you categorize them? Additionally, how can you combine data from different blocks (APIs) in an easy way?&lt;/p&gt;

&lt;p&gt;In the end, all you want to do is build a small house with your blocks, just like my son. But there's a catch. APIs are not "normed" lego blocks. They don't easily fit together, yet!&lt;/p&gt;

&lt;p&gt;During the last year, we've been working on a protocol and execution engine to "normalize" APIs. Using the WunderGraph framework, you can transform any API (GraphQL, REST, PostgreSQL, MySQL, ...) into a "normed" lego block.&lt;/p&gt;

&lt;p&gt;Additionally, we've recently announced the closed Beta of the WunderHub, a place to share your normed lego blocks.&lt;/p&gt;

&lt;p&gt;This means, it's about time to solve the third problem, JOINing data across APIs! This is what we're going to talk about in this post.&lt;/p&gt;

&lt;p&gt;WunderGraph allows you to join data from different APIs from within a GraphQL Query. You don't need to write any logic, resolvers or create a custom schema. Just Query the data you need and join it across different APIs.&lt;/p&gt;

&lt;p&gt;Before we dive into our solution, let's explore other options to join data across APIs.&lt;/p&gt;

&lt;p&gt;You can join data in the client or on the server using custom integration logic. You could do the join in your database. Finally, we'll cover Apollo Federation and Schema stitching.&lt;/p&gt;

&lt;p&gt;To make this post a bit more applicable, we're using an example scenario where we use two GraphQL APIs and join them together: The first returns the capital of a country, the second returns the weather for the city. Combined, we get the capital of the country and the weather for the city so we can decide where to go for our next trip.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#clientside-applicationlevel-joins"&gt;
  &lt;/a&gt;
  Client-Side Application-Level Joins
&lt;/h1&gt;

&lt;p&gt;First, you need a GraphQL client that allows multi tenancy. That is, many GraphQL clients are designed to work with a single GraphQL API.&lt;/p&gt;

&lt;p&gt;Then we define the two Queries, one to fetch the capital, the other to get the weather data. From the result of the first Query, we use the name of the capital to fetch the weather data.&lt;/p&gt;

&lt;p&gt;Finally, we combine the two results and get our desired result.&lt;/p&gt;

&lt;p&gt;The solution is simple and doesn't require any additional backend. You can deploy the application to a CDN almost for free.&lt;/p&gt;

&lt;p&gt;On the downside, some GraphQL clients struggle to talk to multiple APIs. If you want type safety, you need to generate types for two schemas. It's not an ideal solution to use multiple GraphQL APIs in a single client application.&lt;/p&gt;

&lt;p&gt;Another issue can be the added latency for N+1 joins. Joining a single country with its weather might be fast, but what if we have to join 60 capitals? We'd have to make a lot of round trips which could take a long time, it's probably not the best user experience.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#serverside-applicationlevel-joins"&gt;
  &lt;/a&gt;
  Server-Side Application-Level Joins
&lt;/h1&gt;

&lt;p&gt;Another solution would be to move this logic to the server. Instead of using multiple GraphQL clients in our client application, we move them to our backend and expose the whole operation as a REST API.&lt;/p&gt;

&lt;p&gt;The logic is the same as above, but moving it to the server introduces a few advantages but also drawbacks.&lt;/p&gt;

&lt;p&gt;First, the client gets a lot simpler. It makes a single REST API call to fetch the data. There's no client needed, you can just use "fetch" from the browser.&lt;/p&gt;

&lt;p&gt;However, we now have to run a backend to fetch the data and combine it. So we need to figure out a backend stack and need to decide how and where to deploy it. You also can't just put your backend on a CDN, so this solution will cost you something.&lt;/p&gt;

&lt;p&gt;You might use a third-party service like AWS Lambda or Google Cloud Functions, but even then, you have to write the code, maintain it, deploy it, etc...&lt;/p&gt;

&lt;p&gt;To summarize, the server-side solution is a bit more complex, but this complexity also comes with a few advantages.&lt;/p&gt;

&lt;p&gt;For example, it's not possible to Cache the response across client requests and even use single-flight to only fetch the weather once, even if multiple clients request the same country.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#database-joins"&gt;
  &lt;/a&gt;
  Database Joins
&lt;/h1&gt;

&lt;p&gt;Another way of joining data, probably the most widely known, is to use a database. Although a database join is not really suitable to combine the responses of APIs, it's still worth mentioning here.&lt;/p&gt;

&lt;p&gt;PostgreSQL for example, has the concept of Foreign Data Wrappers (FDW). There are ways to use a FDW to join a table to another database or even using an HTTP call.&lt;/p&gt;

&lt;p&gt;There might be use cases where FDW is suitable, but in general we'd advise against it. Ideally, we keep business logic out of the database and move it into a middleware or the client.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#apollo-federation"&gt;
  &lt;/a&gt;
  Apollo Federation
&lt;/h1&gt;

&lt;p&gt;Another solution to join data from multiple APIs is to use Apollo Federation. Apollo Federation allows you to define the composition of multiple GraphQL (Micro-)Services from within the GraphQL Schema.&lt;/p&gt;

&lt;p&gt;The idea of Federation is to have "one single GraphQL Schema" across the whole organization. An API Gateway that supports Federation will then distribute the requests to the different services.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WunderGraph doesn't just support Apollo Federation as a DataSource. We're also the only service capable of handling GraphQL Subscriptions for Federated APIs.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Federation is a great solution to build GraphQL Microservices at scale. That said, we've found that one single GraphQL Schema is not realistic in a real-world scenario.&lt;/p&gt;

&lt;p&gt;Federation works great "within" a single Organization, but what about integrations across companies?&lt;/p&gt;

&lt;p&gt;In a federated Graph, all services must be aware of each other. That is, all services must be able to contribute to the same GraphQL Schema, meaning that there needs to be communication between all shareholders of the Graph. Without this communication, the Graph might not "compile" because of naming conflicts or inconsistencies.&lt;/p&gt;

&lt;p&gt;Within a single organization, it's already a challenge to scale a single Graph, but it's possible because you can force your own people to collaborate and communicate.&lt;/p&gt;

&lt;p&gt;However, you cannot expect from other companies to respect your naming conventions. Ultimately, Federation is not a solution to build API relationships across boundaries that you don't own.&lt;/p&gt;

&lt;p&gt;From our perspective, it's a great solution to build GraphQL Microservices using Federation, that's why we support it in WunderGraph, but it's only one of the many tools available to solve the problem.&lt;/p&gt;

&lt;p&gt;Coming back to our above example, the two APIs unfortunately don't implement the Federation specification. In fact, no publicly known GraphQL API supports Federation because it's usually only used internally and then exposed as a single composed SuperGraph.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#schema-stitching"&gt;
  &lt;/a&gt;
  Schema Stitching
&lt;/h1&gt;

&lt;p&gt;As we've learned before, Federation is not a solution to implement joins across organizations / Graphs.&lt;/p&gt;

&lt;p&gt;Schema stitching, in contrast to Federation, is a centralized solution to facilitate JOINs across GraphQL APIs. While Federation encourages to share the JOIN configuration across all services that belong to a Graph, Schema stitching moves this logic into a single centralized service.&lt;/p&gt;

&lt;p&gt;This means, services that are being stitched together don't actually know about each other. They are fully separated from each other and unaware that they're being stitched together.&lt;/p&gt;

&lt;p&gt;This method allows for JOINs across organizations, even without any sort of communication between the stakeholders. The "stitch" service in this case is a centralized GraphQL server that decides how the final Graph will look like. If there are naming conflicts, the stitch service has to resolve them. The stitch service can also rename fields, add new fields, remove fields, and even change the type of a field.&lt;/p&gt;

&lt;p&gt;Compared to the other solutions, it's a simple way to combine multiple GraphQL Services into a new GraphQL API without having to go the "hard way" of building a REST API on top.&lt;/p&gt;

&lt;p&gt;The benefit is that the result is a valid GraphQL API that can be consumed by any GraphQL client. This benefit comes at the cost that this stitching services needs to be maintained and deployed. If you're scaling schema stitching, you might run into bottlenecks if too many people or teams contribute to a stitched service.&lt;/p&gt;

&lt;p&gt;If you've got a small team and want to stitch your internal service with another API from a 3rd party, schema stitching might be an excellent solution.&lt;/p&gt;

&lt;p&gt;The big drawback of schema stitching though is that you have to maintain another GraphQL Schema and the stitching definition. Tooling has improved recently to make this easier, but it can still be a challenge at scale.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wundergraph-graphql-query-joins"&gt;
  &lt;/a&gt;
  WunderGraph: GraphQL Query Joins
&lt;/h1&gt;

&lt;p&gt;We've looked at the GraphQL landscape for a while and observed how others have implemented JOINs. The most popular approaches have been discussed above.&lt;/p&gt;

&lt;p&gt;Looking at these existing solutions, we've always felt that they add a lot of complexity. We wanted to find an easier way to JOIN data across APIs, so we've started experimenting.&lt;/p&gt;

&lt;p&gt;For a long time, we thought that the solution needs to be to JOIN the APIs in the GraphQL Schema. This might sound obvious because it's the default way of thinking. When we talk about API design in GraphQL, we're talking about the GraphQL Schema.&lt;/p&gt;

&lt;p&gt;But "integrating" APIs in the GraphQL Schema means complexity, we've been talking about the approaches above.&lt;/p&gt;

&lt;p&gt;It took us a while, but we finally realized that with WunderGraph, you can actually JOIN APIs from within the GraphQL Operation. There's no need to use Federation or Stitching, just write a GraphQL Query with some small additions.&lt;/p&gt;

&lt;p&gt;Why is this possible? It's possible because WunderGraph does one thing fundamentally different than all other GraphQL tools. WunderGraph is a Server-Side Only GraphQL Solution. We're not exposing a GraphQL API. Instead, we're compiling GraphQL Operations into JSON REST(ish) APIs and generate a typesafe client on top of that.&lt;/p&gt;

&lt;p&gt;WunderGraph feels like you're using GraphQL, it looks like you're using GraphQL, but it's not. We're just using GraphQL as a "virtual Graph" to integrate the APIs and expose a REST API.&lt;/p&gt;

&lt;p&gt;So, how does the solution look like?&lt;/p&gt;

&lt;p&gt;First, we need to add the two APIs to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// wundergraph.config.ts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;introspect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiNamespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;countries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://countries.trevorblades.com/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;introspect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiNamespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://graphql-weather-api.herokuapp.com/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We introspect the two APIs and namespace them. If you want to learn more about namespacing and how it helps us to avoid naming conflicts, please check out the Namespacing Docs.&lt;/p&gt;

&lt;p&gt;Now that we've got the two APIs added to our "virtual Graph", let's define our REST API by writing a GraphQL Query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Weather&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;
&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;$code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;$capital&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;internal&lt;/span&gt;
&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;countries_country&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$code&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;code&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;capital&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capital&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;currency&lt;/span&gt;
        &lt;span class="nx"&gt;_join&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;weather_getCityByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$capital&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;weather&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;title&lt;/span&gt;
                        &lt;span class="nx"&gt;description&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;actual&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run wunderctl up and you can use curl to Query your newly created API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;curl&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:9991/api/main/Weather?code=DE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;countries_country&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Germany&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capital&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Berlin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;EUR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weather_getCityByName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;summary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clouds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;broken clouds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;temperature&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actual&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;277.8&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on here? Let's take a look at the Query.&lt;/p&gt;

&lt;p&gt;First, we make a request to the Countries API and fetch the capital. We then "export" the name of the capital into an internal variable, simply a placeholder that is not exposed to the public API.&lt;/p&gt;

&lt;p&gt;Then, we use the field _join which returns the Query type, allowing us to nest a second Query into the result of the first one. Finally, we use the $capital variable to pass the capital to the second Query and fetch the weather.&lt;/p&gt;

&lt;p&gt;No stitching, no federation, just a simple GraphQL Query. If you want to learn more on how this works, have a look at the Docs on Cross API Joins.&lt;/p&gt;

&lt;p&gt;So what are the benefits and drawbacks of this approach?&lt;/p&gt;

&lt;p&gt;First, we don't have to write any code to integrate the APIs. We just need to write a GraphQL Query. This means, we don't have to learn Federation or Schema Stitching.&lt;/p&gt;

&lt;p&gt;Second, we get a secured and optimized REST API with a typesafe client, authentication, authorization, caching and all the other benefits of WunderGraph.&lt;/p&gt;

&lt;p&gt;This solution is actually almost the same as the "Server-Side Application-Level" approach above, just without writing any code.&lt;/p&gt;

&lt;p&gt;Combined with the WunderHub and the Namespacing, this is actually what we wanted to achieve in the first place, turning APIs into simple re-usable lego blocks.&lt;/p&gt;

&lt;p&gt;Okay, enough on the pros. Everything is a tradeoff and so is using WunderGraph.&lt;/p&gt;

&lt;p&gt;In comparison to the first approach, we have to deploy the WunderGraph server (WunderNode) somewhere.&lt;/p&gt;

&lt;p&gt;You have to learn and understand the newly introduced concepts, like @export, @internal and the _join field.&lt;/p&gt;

&lt;p&gt;Another downside is the extra nesting because of the _join field. That's something we'd like to tackle in the future.&lt;/p&gt;

&lt;p&gt;We also don't think that this Query-Joining approach is "better" than e.g. Apollo Federation or Schema Stitching. It's a different solution for a different situation.&lt;/p&gt;

&lt;p&gt;Ideally, you'd use them together. Build your Microservices with Federation and Schema Stitching. Then bring everything together and expose it securely with WunderGraph.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-about-postgresql-mysql-sqlite-sql-server-etc"&gt;
  &lt;/a&gt;
  What about PostgreSQL, MySQL, SQLite, SQL Server etc.?
&lt;/h1&gt;

&lt;p&gt;WunderGraph is more than just another GraphQL Server, we've already got a wide array of connectors for different upstreams:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;li&gt;Apollo Federation&lt;/li&gt;
&lt;li&gt;REST / OpenAPI Specification&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;SQLServer&lt;/li&gt;
&lt;li&gt;Planetscale&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means, using the approach from above, you can easily JOIN data from different Database systems, like PostgreSQL and MySQL, combine them with a REST or GraphQL API, and expose them as a secure REST API with WunderGraph.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h1&gt;

&lt;p&gt;As we've explained, one of the issues with our approach is that the shape of the response could become a bit bloated due to the extra nesting. WunderGraph, being a Server-Side only GraphQL solution, we're able to adopt another approach that is forbidden for APIs that expose a GraphQL API directly.&lt;/p&gt;

&lt;p&gt;We're looking at adopting some ideas from GraphQL lodash, a simple and easy way to modify the response of a GraphQL Query using directives.&lt;/p&gt;

&lt;p&gt;WunderGraph exposes a REST API using JSON Schema as the language for describing the response. That's perfectly aligned with using the "lodash" of modifying the response. When applying a "lodash directive", we don't just modify the response, but also the JSON Schema for that operation. This means, the WunderGraph contract is still the same, we just add a "lodash Middleware" after we've resolved the response.&lt;/p&gt;

&lt;p&gt;This should help us flatten the response and adds other interesting ways of modifying the response, e.g. calculating the max value of a field, aggregating a response or filtering.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You've learned about multiple ways of joining data from different APIs. We talked about the different ways of solving the problem, pros and cons of Federation and Schema Stitching, and when to use which one.&lt;/p&gt;

&lt;p&gt;We've then introduced the concept of joining APIs in the Query, a novel approach by WunderGraph that is possible by doing Server-Side only GraphQL instead of exposing it to the client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interested-in-learning-more-about-wundergraph"&gt;
  &lt;/a&gt;
  Interested in learning more about Wundergraph?
&lt;/h2&gt;

&lt;p&gt;The best place to learn more about Wundergraph is in our Discord channel. You can join using this &lt;a href="https://discord.gg/cnRWwHXbQm"&gt;link&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>graphql</category>
      <category>react</category>
    </item>
  </channel>
</rss>
