<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding How React Works: A Beginner's Guide</title>
      <author>Brandon Marrero üá∫üá∏</author>
      <pubDate>Tue, 27 Apr 2021 17:44:37 +0000</pubDate>
      <link>https://dev.to/branmar97/understanding-how-react-works-a-beginner-s-guide-5f0l</link>
      <guid>https://dev.to/branmar97/understanding-how-react-works-a-beginner-s-guide-5f0l</guid>
      <description>&lt;p&gt;Are you thinking about learning React to build your next web application, but do not understand how it works? &lt;/p&gt;

&lt;p&gt;After reading this brief post, you will have a basic understanding of the React flow to get you headed in the right direction. Your React journey starts here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; is a front-end JavaScript library that helps developers quickly build dynamic user interfaces. In an MVC application (Model View Controller), React is the view layer, which is what the user can see and interact with. The view layer can update without reloading the webpage when changes are made.&lt;br&gt;
It has a component architecture that allows reusable code which can be rendered anywhere.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-format"&gt;
  &lt;/a&gt;
  What is the format?
&lt;/h2&gt;

&lt;p&gt;Using declarative programming, React makes code easy to read and debug. Declarative programming expresses the logic without displaying all the instructions happening in the background. &lt;/p&gt;

&lt;p&gt;Let me break that down...&lt;/p&gt;

&lt;p&gt;A declarative view is like a customer ordering a cake from a bakery. The customer explains how they expect the cake to look and the baker makes it without specific instructions from the customer. This is declarative programming in a nutshell.&lt;/p&gt;

&lt;p&gt;Here is a code sample.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
     return (
          &amp;lt;div className="app"&amp;gt;
               &amp;lt;Nav /&amp;gt;
               &amp;lt;Home /&amp;gt;
               &amp;lt;Footer /&amp;gt;
          &amp;lt;/div&amp;gt;
     );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What can we expect from this output? We are rendering a navigation bar, home screen, and footer. &lt;/p&gt;

&lt;p&gt;You may also notice what looks like an HTML element (div), but this is actually &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;JSX&lt;/a&gt;, a React element or extension of JavaScript. The JSX is compiled by Babel into regular JavaScript.&lt;/p&gt;

&lt;p&gt;This is another example of declarative programming. We specify a React Element, which then gets compiled into JavaScript which creates and appends the HTML element to the DOM. &lt;/p&gt;

&lt;p&gt;Read more on JSX &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-components"&gt;
  &lt;/a&gt;
  What are components?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;Components&lt;/a&gt; are parts that represent pieces of the user interface. Going back to the previous example regarding declarative programming, the components were Nav, Home, and Footer. &lt;/p&gt;

&lt;p&gt;These components are children of the root component, typically called the App component. Combining all the components together makes an application. &lt;/p&gt;

&lt;p&gt;Components are also reusable with different properties. As data changes, a component can update the information it displays and the styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-react-flow"&gt;
  &lt;/a&gt;
  How does React flow?
&lt;/h2&gt;

&lt;p&gt;In React, data flows in one direction, top to bottom. This allows for predictable and maintainable code. Data is passed down from the parent component in the form of &lt;a href="https://reactjs.org/docs/components-and-props.html#gatsby-focus-wrapper"&gt;props&lt;/a&gt;. The data can be used in other forms or passed further down the component tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dG3cCJvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m17ji4j257qh9m6tfjg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dG3cCJvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m17ji4j257qh9m6tfjg0.png" alt="Component Flow Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each component has its own &lt;a href="https://reactjs.org/docs/faq-state.html#gatsby-focus-wrapper"&gt;state&lt;/a&gt;, similar to props but private. It stores property values that belong to a component. Property values can be changed using a method called &lt;code&gt;setState()&lt;/code&gt;. By default, a component will re-render when state is changed.&lt;/p&gt;

&lt;p&gt;Using state and props together allows breaking down of components based on specific behaviors. Let's say a &lt;code&gt;PlantsContainer&lt;/code&gt; has a state property with a list of plants. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;PlantsForm&lt;/code&gt; component would render a form for adding new plants and a &lt;code&gt;Plants&lt;/code&gt; component might render the list of plants to the user interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading my blog post. I hope this post helped you understand the basics of React. If it still seems overwhelming, React can be broken down into 4 key concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;JSX&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Props&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be touching more on these concepts in future posts.&lt;/p&gt;

&lt;p&gt;To learn more about React, I recommend referencing the &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 27 Apr 2021 17:41:54 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-312l</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-312l</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Editorial note:&lt;/strong&gt; I will be on parental leave starting very soon so I can welcome my first child ‚ù§Ô∏è Forem's awesome Content Manager, Gracie Gregory, will be taking over the Top 7 series and our weekly newsletter while I'm gone (starting next week). I hope everyone has a great spring and summer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-to-your-own-beat"&gt;
  &lt;/a&gt;
  Code to your own beat
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/coffeestasia"&gt;@coffeestasia&lt;/a&gt;
 has rounded up some amazing music collections/playlists/channels to help you destress while you debug. üòé &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/coffeestasia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9lVgk9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lXaYQ4Mo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/452501/9bf1251a-c9ff-460b-a2b1-3fd4985d7d04.jpg" alt="coffeestasia image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/coffeestasia/background-music-for-coding-for-every-taste-2oo6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Background Music for Coding for Every Tasteüé∂&lt;/h2&gt;
      &lt;h3&gt;Anastasia üèÑüèª‚Äç‚ôÄÔ∏è „Éª Apr 20 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-internet-decoded"&gt;
  &lt;/a&gt;
  The Internet, decoded
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/rohitrana"&gt;@rohitrana&lt;/a&gt;
 helps us shift from "an average internet user to the person who still uses the internet all the time but knows a little bit about what‚Äôs going on behind the scenes." Sold!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitrana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWDv-vCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NoONcCYq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613035/028fc507-d64d-4a57-a423-62118dc61163.jpeg" alt="rohitrana image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitrana/how-the-web-works-1hd7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How the web works&lt;/h2&gt;
      &lt;h3&gt;Rohit Singh Rana „Éª Apr 24 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#self-promotion-as-a-creator"&gt;
  &lt;/a&gt;
  Self Promotion as a Creator
&lt;/h2&gt;

&lt;p&gt;This is a deeply fascinating and complex read on the topic of promoting one's work as a developer. &lt;a class="mentioned-user" href="https://dev.to/ryansolid"&gt;@ryansolid&lt;/a&gt;
 admits to not having the perfect answer here, but they sure do have a nuanced perspective on the challenges and lessons of creating and learning in public. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ryansolid" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--it1XuNsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zjqjkX6K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186199/a3d1cfed-a1ca-41cd-a146-9db4e65711d4.jpeg" alt="ryansolid image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/this-is-learning/of-chickens-and-pigs-the-dilemma-of-creator-self-promotion-51ea" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Of Chickens and Pigs - The Dilemma of Creator Self Promotion&lt;/h2&gt;
      &lt;h3&gt;Ryan Carniato „Éª Apr 22 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#demystifying-the-developer-advocate"&gt;
  &lt;/a&gt;
  Demystifying the developer advocate
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/wassimchegham"&gt;@wassimchegham&lt;/a&gt;
 provides concrete examples of tasks and activities they do at Microsoft as a Senior Developer Advocate. If you've read developer advocate job descriptions but are still struggling to grasp what these pros truly do, this post is a great resource&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/wassimchegham" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUjA9mUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EouHrMi6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/13081/S93LQYOa.jpg" alt="wassimchegham image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/wassimchegham/the-subtle-art-of-being-a-developer-advocate-gdg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Subtle Art of Being A Developer Advocate&lt;/h2&gt;
      &lt;h3&gt;Wassim Chegham „Éª Apr 21 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devrel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#creating-a-great-experience-for-everyone"&gt;
  &lt;/a&gt;
  Creating a great experience for &lt;em&gt;everyone&lt;/em&gt;.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/hichamelbsi"&gt;@hichamelbsi&lt;/a&gt;
 has some concrete tips for how you can make your sites more accessible ‚Äî because we all need to make this a top priority. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hichamelbsi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mu9ZXmiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j3cRFUdy--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/200546/e6c03961-e926-4bc8-bfae-6d802916360f.jpeg" alt="hichamelbsi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hichamelbsi/accessibility-is-a-priority-3jbf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Accessibility is a priority&lt;/h2&gt;
      &lt;h3&gt;ELABBASSI Hicham „Éª Apr 21 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#broader-applications-for-localstorage"&gt;
  &lt;/a&gt;
  Broader applications for localStorage
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/tolentinoel"&gt;@tolentinoel&lt;/a&gt;
 encountered localStorage back when they were in coding bootcamp. Since then, they learned that there are more applications for localStorage than just tokens! This post will walk you through a few of them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tolentinoel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ-6fwJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mtmjc86Q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/493720/aa51b775-cdb2-4ac0-b15a-24b7b469d6e1.jpeg" alt="tolentinoel image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tolentinoel/what-is-localstorage-3ffh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is localStorage?&lt;/h2&gt;
      &lt;h3&gt;Ellaine Tolentino „Éª Apr 22 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#localstorage&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#unbreaking-authentication"&gt;
  &lt;/a&gt;
  Un-breaking authentication
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/flippedcoding"&gt;@flippedcoding&lt;/a&gt;
 writes, it's crucial to make sure you get the best authentication practices in place as early in the development process as possible. The tactics outlined in this post (through a Node.js app) are super useful üëÄ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flippedcoding" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWt-uaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--D-VsiVuP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77973/be223e4c-dc34-43da-a894-10be8f272316.jpg" alt="flippedcoding image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flippedcoding/implementing-passwordless-authentication-in-node-js-43m0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Implementing Passwordless Authentication in Node.JS&lt;/h2&gt;
      &lt;h3&gt;Milecia „Éª Apr 20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#authentication&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>~/.dotfiles</title>
      <author>Vincent</author>
      <pubDate>Tue, 27 Apr 2021 16:42:38 +0000</pubDate>
      <link>https://dev.to/vibioh/dotfiles-5695</link>
      <guid>https://dev.to/vibioh/dotfiles-5695</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h1&gt;

&lt;p&gt;Suppose you are receiving your brand new computer. You have a bunch of softwares to install (your favorite browser, code editor, windows management tool, etc.) and some configurations and shortcuts tweaks. How long does it take you to be fully productive once unboxed? One hour, one day, one week?&lt;/p&gt;

&lt;p&gt;If you do this manually, you'll make mistakes. Because, we are all human beings.&lt;/p&gt;

&lt;p&gt;You can end up doing it successfully with a well written todo-list but, wait, do you make all the downloads, clicks, configuration by hand? You work in computer science, use computers for doing repetitive and boring tasks.&lt;/p&gt;

&lt;p&gt;Now we suppose your laptop is ready for work. You're happy with it and want the same work environment on your desktop, which has a different operating system, should you start again from a blank page?&lt;/p&gt;

&lt;p&gt;That's why you need installation automation. They are often called "Dotfiles". Let's deep dive into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h1&gt;

&lt;p&gt;We want to put all our configuration for various environments in a place that is easy to share or reuse, and ideally idempotent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;The following guidelines and explanations work on an &lt;a href="https://en.wikipedia.org/wiki/Unix-like"&gt;Unix-like operating systems&lt;/a&gt;. Sorry Microsoft's users, since I've not used this system for a while, I can't talk about it. It would work with &lt;a href="https://fr.wikipedia.org/wiki/Windows_Subsystem_for_Linux"&gt;Windows Subsystem for Linux&lt;/a&gt; because it's a Unix system under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;p&gt;We have two things to take care of: installation of softwares and their configurations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For the installation part, thankfully, most operating-systems have a built-in or mainstream packages manager. Aptitude, Brew, Pacman, you name it. It's a good starting point but not every tool or software are available on it or on each architecture. You may need to download a binary or an archive and to put it at the right place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the configuration part, it's more ~complicated~ diverse. Some tools rely on files, others on environment variables and others are simply not configurable easily, e.g. hidden or binary files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that &lt;a href="https://brew.sh"&gt;Brew&lt;/a&gt;, the package manager for macOS, is not built-in and must be installed manually first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;It looks like we are starting to talk about code, notably infrastructure as code. Code nowadays is in a version control software (VCS). The most broadly use is &lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt;. In order to make it shareable to everyone, you must store your Git repository on GitHub, GitLab, Bitbucket, etc. They are easy to use, well adopted by the community and easy to find.&lt;/p&gt;

&lt;p&gt;Git has many features, the one we'll focus on is branching. With branches, you can handle the &lt;code&gt;architecture x operation-system&lt;/code&gt; matrix with ease. A branch for "personal-macos", a branch for "work-ubuntu", a branch for "home-raspbian", etc. You can also add conditions in your code for doing things based on hostnames, environment variables, etc.&lt;/p&gt;

&lt;p&gt;My Dotfiles are in place for personal and professional contexts, on &lt;code&gt;amd64&lt;/code&gt; and &lt;code&gt;arm64&lt;/code&gt; architectures, on macOS and Linux operating systems. They are all in one repository with only two branches (&lt;code&gt;main&lt;/code&gt; and &lt;code&gt;work&lt;/code&gt;). I normalize many differences of each operating system.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#bash"&gt;
  &lt;/a&gt;
  Bash
&lt;/h2&gt;

&lt;p&gt;You can find &lt;a href="https://github.com/webpro/awesome-dotfiles"&gt;many tools on GitHub&lt;/a&gt; (or elsewhere) to bootstrap your Dotfiles. Some people choose to rely on Ansible, others on some tools you have to install. But how to install a tool that install the tools? Manual installation is not an option. It's like a chicken-egg problem.&lt;/p&gt;

&lt;p&gt;Obviously, you need a starting point and ensure that it's available everywhere. On Unix-like systems, &lt;a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"&gt;Bash&lt;/a&gt; is the common denominator. This responsibility, being the common denominator, is hard when you are a thirty years old software.&lt;/p&gt;

&lt;p&gt;For example, in the latest macOS version, the shipped version of &lt;code&gt;bash&lt;/code&gt; is &lt;code&gt;3.2.57&lt;/code&gt;, a version from 2007, &lt;a href="https://apple.stackexchange.com/a/238281"&gt;because of a licensing change&lt;/a&gt;. I'll not explain all the differences between v3 and v5 (current one in 2021) but you can see below a difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"macOS"&lt;/span&gt;

&lt;span class="c"&gt;# Lower case, works only with bash 4+&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Lower case, the old way, bash 3 compliant&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MY_VARIABLE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"[:upper:]"&lt;/span&gt; &lt;span class="s2"&gt;"[:lower:]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, &lt;em&gt;Bash&lt;/em&gt; is the broader compatible software already installed on most systems. We know how to run our code, but how can we retrieve it then?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#zip-amp-curl"&gt;
  &lt;/a&gt;
  Zip &amp;amp; Curl
&lt;/h2&gt;

&lt;p&gt;We saw before that the best way to store our Dotfiles is in Git, but &lt;code&gt;git&lt;/code&gt; must be installed for cloning the repository, that will install &lt;code&gt;git&lt;/code&gt;. Chicken-egg problem again. Fortunately, solutions like GitHub or Gitlab provide a way to download a repository in a &lt;a href="https://en.wikipedia.org/wiki/ZIP_(file_format)"&gt;Zip&lt;/a&gt; archive. &lt;code&gt;unzip&lt;/code&gt;, like &lt;code&gt;bash&lt;/code&gt;, is present natively on most distributions.&lt;/p&gt;

&lt;p&gt;For fetching datas, we also need a tool. &lt;a href="https://en.wikipedia.org/wiki/CURL"&gt;curl&lt;/a&gt; is the common way to make a request on the Internet from a terminal and, guess what, it's also built-in on most distributions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-golden-triangle"&gt;
  &lt;/a&gt;
  The golden triangle
&lt;/h2&gt;

&lt;p&gt;Thank to &lt;a href="https://linuxhint.com/bash_pipe_tutorial/"&gt;Bash piping&lt;/a&gt;, we can &lt;code&gt;curl&lt;/code&gt; a bootstrap script, pipe it to &lt;code&gt;bash&lt;/code&gt; and start installation by &lt;code&gt;unzip&lt;/code&gt;-ing archive of the repository. All tools are present after installation (tested on macOS, Manjaro, Debian 10).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="s2"&gt;"https://my.bootstrap.script"&lt;/span&gt; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;‚ö†Ô∏è When doing this kind of command, in any case, always check what you are going to run, especially when some "one-liner install scripts" require &lt;code&gt;sudo&lt;/code&gt;. &lt;a href="https://www.youtube.com/watch?v=iDbyYGrswtg"&gt;The Internet&lt;/a&gt; is a cool thing, but not everyone acts as a cool person on it.&lt;/p&gt;

&lt;p&gt;In the bootstrap script, you can choose where the Dotfiles will be (in my case, I place it in &lt;code&gt;${HOME}/code/dotfiles&lt;/code&gt;). I would bring your attention on how the &lt;code&gt;curl&lt;/code&gt; options are written, in their long format. When writing a script, you're not in a terminal trying to be quick and limiting your keyboard input. You write code that will be shared and must be comprehensive by other humans. Be verbose.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; nounset &lt;span class="nt"&gt;-o&lt;/span&gt; pipefail &lt;span class="nt"&gt;-o&lt;/span&gt; errexit

main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/code"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ViBiOh"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dotfiles"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"main"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dotfiles.zip"&lt;/span&gt;

  &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  curl &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--disable&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--show-error&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--max-time&lt;/span&gt; 60 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/archive/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.zip"&lt;/span&gt;
  unzip &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ARCHIVE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;:?&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;mv&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSTALL_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="s2"&gt;"./init"&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;

    git init
    git remote add origin &lt;span class="s2"&gt;"http://github.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GITHUB_USER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.git"&lt;/span&gt;
    git fetch origin
    git checkout &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOTFILES_BRANCH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

main &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The bootstrap script does the "first download" of all needed files. Once done, the &lt;code&gt;init&lt;/code&gt; script takes over. The &lt;code&gt;init&lt;/code&gt; is the script that installs and configures all the things, you'll run it multiple times in the future.&lt;/p&gt;

&lt;p&gt;At the end of the script, you can see that there are &lt;code&gt;git&lt;/code&gt; commands. After a successful installation, Git will be installed, and I reconcile the archive downloaded (without &lt;code&gt;.git&lt;/code&gt; folder) with the Git upstream.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h1&gt;

&lt;p&gt;The first thing we need in our Dotfiles repository is the two scripts described before: &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt;. You'll need also at least 3 folders more: &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;symlinks&lt;/code&gt; and &lt;code&gt;sources&lt;/code&gt;. We are gonna dive into them.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; tree &lt;span class="nt"&gt;-L&lt;/span&gt; 1
&lt;span class="nb"&gt;.&lt;/span&gt;
‚îú‚îÄ‚îÄ bootstrap
‚îú‚îÄ‚îÄ init
‚îú‚îÄ‚îÄ &lt;span class="nb"&gt;install&lt;/span&gt;/
‚îú‚îÄ‚îÄ sources/
‚îî‚îÄ‚îÄ symlinks/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Softwares are most of the time available as a binary and maybe on your favorite package manager. But there are also tasks that are not "software installation" in proper words but need to be run at least once on your computer (e.g. disabling unwanted features of your os, generating configuration file that cannot be symlinked, etc.). From my point of view, it's part of the installation scripts.&lt;/p&gt;

&lt;p&gt;Among the softwares I use, all are not available on the package manager. Package managers often install optional softwares I don't want and install them globally, which can interfere with other users. I tend to download binaries directly from GitHub and put them in my &lt;code&gt;${PATH}&lt;/code&gt; instead of relying on the package manager. It's also easier to stick to a defined version and binaries tend to update faster than package upstreams.&lt;/p&gt;

&lt;p&gt;In an ideal world, Dotfiles should not run any command in &lt;code&gt;sudo&lt;/code&gt;. You install &lt;em&gt;your&lt;/em&gt; configuration on a machine, keep everything in your &lt;code&gt;${HOME}&lt;/code&gt; if you can. For example, I create an &lt;code&gt;${HOME}/opt/&lt;/code&gt; folder for putting my stuff in it (GOPATH, Python packages, etc). I add the &lt;code&gt;${HOME}/opt/bin&lt;/code&gt; in my &lt;code&gt;${PATH}&lt;/code&gt;. If I delete my &lt;code&gt;opt/&lt;/code&gt; folder, I'm the only person impacted.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;scripts/&lt;/code&gt; folder, you can separate concerns of your installation by splitting things in different files. This way, you can disable a script based on an environment variable. e.g. On my server, I don't need to install my code editor. I set an environment variable &lt;code&gt;DOTFILES_NO_EDITOR&lt;/code&gt; and the install script will not try to run the &lt;code&gt;scripts/editor&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I see the installation phase in 3 steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;clean&lt;/code&gt;. Installation must be &lt;strong&gt;idempotent&lt;/strong&gt;, it can require cleaning before installing or simply "resetting" Dotfiles installation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;install&lt;/code&gt;. Installation as you may think of it: running script that download from package manager, put binaries in appropriate folders, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;credentials&lt;/code&gt;. Retrieving secrets from your password-manager and put them in your configuration file. See the &lt;a href="#secrets"&gt;Secrets&lt;/a&gt; section in &lt;code&gt;sources/&lt;/code&gt; for more details. This phase must be done after all installations (you have to install the password manager first).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For running each phase separately, we can rely on the presence of a function in a file. Sourcing a file is easy in Bash and checking that a function is available too.&lt;/p&gt;

&lt;p&gt;If we condense all we have talked before in one function, it will be like the following code, put in the &lt;code&gt;init&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;browse_install&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; file&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;BASENAME_FILE
    &lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;basename&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="nb"&gt;local &lt;/span&gt;UPPERCASE_FILENAME
    &lt;span class="nv"&gt;UPPERCASE_FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"[:lower:]"&lt;/span&gt; &lt;span class="s2"&gt;"[:upper:]"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;DISABLE_VARIABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"DOTFILES_NO_&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;UPPERCASE_FILENAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!DISABLE_VARIABLE_NAME&lt;/span&gt;&lt;span class="k"&gt;:-}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      continue
    fi

    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      for &lt;/span&gt;action &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;unset&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;done

      &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="k"&gt;for &lt;/span&gt;action &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"function"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
          &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s - %s"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
          &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;fi
      done
    fi
  done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/install"&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f &lt;span class="nt"&gt;-print0&lt;/span&gt; | &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;--zero-terminated&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# ${CURRENT_DIR} is the root of the Dotfiles repository&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

browse_install clean &lt;span class="nb"&gt;install
&lt;/span&gt;browse_install credentials
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#symlinks"&gt;
  &lt;/a&gt;
  Symlinks
&lt;/h2&gt;

&lt;p&gt;The easiest tools to configure are the ones that rely on a single file on your home directory, that starts with a dot. That's where the repository takes its name: the famous "dotfiles". You know them: the &lt;code&gt;.bashrc&lt;/code&gt;, the &lt;code&gt;.vimrc&lt;/code&gt; or the &lt;code&gt;.gitconfig&lt;/code&gt;. In order to keep the file under version control system (Git), but not committing your entire &lt;code&gt;${HOME}&lt;/code&gt;, the easy trick is using a &lt;a href="https://en.wikipedia.org/wiki/Symbolic_link"&gt;symlink&lt;/a&gt;. The file exists in the &lt;code&gt;${HOME}&lt;/code&gt; folder, so your tool can read it, but the content remains on the folder under version control. The best of both worlds.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/ &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-la&lt;/span&gt;
.bashrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/bashrc
.curlrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/curlrc
.gitconfig -&amp;gt; /Users/macbook/code/dotfiles/symlinks/gitconfig
.ignore -&amp;gt; /Users/macbook/code/dotfiles/symlinks/ignore
.inputrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/inputrc
.tmux.conf -&amp;gt; /Users/macbook/code/dotfiles/symlinks/tmux.conf
.vimrc -&amp;gt; /Users/macbook/code/dotfiles/symlinks/vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;They are simple to install: put all your &lt;code&gt;.file&lt;/code&gt; in a directory (e.g. symlinks) and link every file in that folder to your &lt;code&gt;${HOME}&lt;/code&gt; folder. Note that my files are named without a dot (e.g. &lt;code&gt;bashrc&lt;/code&gt;) and I add the "dot" during the symlink phase. A dotfile is by default a hidden file on most operting systems. I don't want it to be hidden in code, only when used.&lt;/p&gt;

&lt;p&gt;Creating the symlinks can be done with the following snippet, put in the &lt;code&gt;init&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;create_symlinks&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; file&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;BASENAME_FILE
    &lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;basename&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE_LIMIT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FILE_LIMIT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      continue
    fi

    &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASENAME_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/symlinks"&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f &lt;span class="nt"&gt;-print0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# ${CURRENT_DIR} is the root of the Dotfiles repository&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A gentle reminder on symlinks: they are living "content". When you pull the new version of your Dotfiles repository, the configuration is changed instantaneously.&lt;/p&gt;

&lt;p&gt;üëç It has good side: you pull your code and have nothing to do.&lt;/p&gt;

&lt;p&gt;üëé It has down side: if you have a Git conflict on your &lt;code&gt;symlinks/gitconfig&lt;/code&gt; file, you Git can be broken because your &lt;code&gt;~/.gitconfig&lt;/code&gt; is invalid üòÖ.&lt;/p&gt;

&lt;p&gt;Chicken-egg problem, always.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;p&gt;For configuring you shell environment, the music is a little bit different, in other words, complex! The common way for configuring your shell is the &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;.you-name-it-rc&lt;/code&gt;). That's what we just configured before with symlinks. But putting the configuration of every tools used in the same file makes the file unreadable, with a lot of comments for separating purpose of code. Not a clean way to do it.&lt;/p&gt;

&lt;p&gt;Fortunately, it's up to you to split it correctly. My &lt;code&gt;~/.bashrc&lt;/code&gt; sources every file contained in the &lt;code&gt;dotfiles/sources/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;I don't want to hardcode the path of my Dotfiles folder. Thanks to symlinks already being linked to a folder inside my repository, I'm able to find where my files really are with the &lt;code&gt;${BASH_SOURCE[0]}&lt;/code&gt; trick.&lt;/p&gt;

&lt;p&gt;Sourcing the &lt;code&gt;sources&lt;/code&gt; folder can be done with the following snippet, put in the &lt;code&gt;symlinks/.bashrc&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;source_all&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;SCRIPT_DIR
  &lt;span class="nv"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;dirname&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;for &lt;/span&gt;file &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/../sources/"&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;sources/&lt;/code&gt; folder, you put every terminal configuration you need, e.g. environment variable, function, aliases etc. It's time for a good reminder.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Rule #1 of the Dotfiles Club&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You don't put secrets in your Dotfiles.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rule #2 of the Dotfiles Club&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;YOU DO NOT PUT SECRETS IN YOUR DOTFILES.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1AfLx8dLTVoHK/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1AfLx8dLTVoHK/source.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to have secrets in your environment variables (e.g. a token, a password), put them in the &lt;code&gt;~/.localrc&lt;/code&gt;. Not symlinked anywhere! As its name stands, it remains "local".&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.localrc"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.localrc"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#secrets"&gt;
  &lt;/a&gt;
  Secrets
&lt;/h3&gt;

&lt;p&gt;If you have read the two rules of the &lt;em&gt;Dotfiles Club&lt;/em&gt;, you may wonder how to configure automatically your computer without putting secrets in a repository. The secrets of the secrets management is: a password manager.&lt;/p&gt;

&lt;p&gt;Because we are in Unix environments, I personally use &lt;a&gt;pass&lt;/a&gt; that is easily scriptable, relies on the solid &lt;a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy"&gt;PGP encryption&lt;/a&gt; and stores everything in Git. I need to import my GPG key and it's fine. Security is a serious topic, importing the GPG key is &lt;strong&gt;the sole manual action&lt;/strong&gt; in my process. You can use any other password manager, install the CLI with &lt;code&gt;install/&lt;/code&gt; scripts and you should be able to retrieve your credentials to put it in your configuration file during the &lt;code&gt;credentials&lt;/code&gt; phase.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h2&gt;

&lt;p&gt;Keep in mind that your dotfiles are expected to work on various environments at various stages of installation. Always be backward compatible and lenient on errors.&lt;/p&gt;

&lt;p&gt;When sourcing, you should not use Bash flags &lt;code&gt;-o nounset -o pipefail -o errexit&lt;/code&gt;, because if an error happens, it will crash Bash startup and you can end up being locked outside of your terminal.&lt;/p&gt;

&lt;p&gt;Also, if you use a tool that is not built-in, always check its presence with the following snippet. You may have disabled its installation, it may not be available on your architecture, etc.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; git &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="c"&gt;# do `git` related stuff&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#bashrc"&gt;
  &lt;/a&gt;
  Bashrc
&lt;/h3&gt;

&lt;p&gt;Using a &lt;code&gt;.bashrc&lt;/code&gt; for automatically loading your environment is a good thing, but you don't need it when performing a headless operation (such as &lt;code&gt;rsync&lt;/code&gt;). In that case, it can slow you down. Fortunately, there is this trick for disabling the loading of the &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="k"&gt;:-}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;macOS has a particular case here. By default, it doesn't look for the &lt;code&gt;~/.bashrc&lt;/code&gt; file, but the &lt;code&gt;~/.bash_profile&lt;/code&gt;. You can fix it by creating this file and pointing it to your &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.bashrc"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.bashrc"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  Order
&lt;/h3&gt;

&lt;p&gt;Browsing files must be done in a certain order because you may have dependencies between files (e.g. changing the &lt;code&gt;${PATH}&lt;/code&gt; variable before checking if a software is installed, installing Python before using &lt;code&gt;pip&lt;/code&gt;). You don't have this kind of problems in a single file, because you simply put the line at the right place.&lt;/p&gt;

&lt;p&gt;When iterating on a folder with &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt;, Bash relies on &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Filename-Expansion"&gt;the alphabetic order&lt;/a&gt;, defined by the &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#index-LC_005fALL"&gt;&lt;code&gt;LC_ALL / LC_COLLATE&lt;/code&gt;&lt;/a&gt; environment variables. You can control order of sourcing by ensuring your files are in alphabetical order. Pro-tips: underscore is before any lower case character.&lt;/p&gt;

&lt;p&gt;In order to properly configure your locale, you can add the following snippet before the &lt;code&gt;source_all&lt;/code&gt;, that gracefully sets locale if it's present.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;set_locale&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;LOCALES&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt; &lt;span class="s2"&gt;"en_US.utf8"&lt;/span&gt; &lt;span class="s2"&gt;"C.UTF-8"&lt;/span&gt; &lt;span class="s2"&gt;"C"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;ALL_LOCALES
  &lt;span class="nv"&gt;ALL_LOCALES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;locale &lt;span class="nt"&gt;-a&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;for &lt;/span&gt;locale &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LOCALES&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ALL_LOCALES&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;--count&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-eq&lt;/span&gt; 1 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
      &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANGUAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="k"&gt;return
    fi
  done

  return &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#all-together"&gt;
  &lt;/a&gt;
  All together
&lt;/h2&gt;

&lt;p&gt;I've made the simplest possible dotfiles repository in &lt;a href="https://gist.github.com/ViBiOh/e38aeb07d6d56dfa78256b61781478c5"&gt;this Gist&lt;/a&gt;. It's not possible to create folder on a Gist, so for example &lt;code&gt;symlinks_bashrc&lt;/code&gt; should be &lt;code&gt;symlinks/bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You'll find a snippet for installing Brew and changing the default shell of user on macOS. If you install Bash with Brew, you have two &lt;code&gt;bash&lt;/code&gt;: one in &lt;code&gt;/bin/bash&lt;/code&gt; (3.2.57) and one in &lt;code&gt;/usr/local/bin/bash&lt;/code&gt; (5+).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ViBiOh"&gt;
        ViBiOh
      &lt;/a&gt; / &lt;a href="https://github.com/ViBiOh/dotfiles"&gt;
        dotfiles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Dotfiles for configuring my terminal environment
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
dotfiles&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://sonarcloud.io/dashboard?id=ViBiOh_dotfiles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c6e38f71b09b012bcacd65e311aa0119169d8326593fb67055995a8aaa78ea01/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d566942694f685f646f7466696c6573266d65747269633d616c6572745f737461747573" alt="Quality Gate Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;curl &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://raw.githubusercontent.com/ViBiOh/dotfiles/main/bootstrap&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; bash&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Update&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/code/dotfiles/init&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -a&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;You can set following environment variables for customizing installation behavior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DOTFILES_NO_NODE="true"&lt;/code&gt; doesn't perform install of &lt;code&gt;install/node&lt;/code&gt; file (replace &lt;code&gt;NODE&lt;/code&gt; by any uppercase filename in &lt;code&gt;install/&lt;/code&gt; dir)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#!&lt;/span&gt;/usr/bin/env bash&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Server configuration example&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_ALACRITTY=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_APPLE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_DNSMASQ=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_FIREFOX=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_GOLANG=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_GPG=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_KUBERNETES=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_NODE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PASS=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON_ANSIBLE=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_PYTHON_PGCLI=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SHELLCHECK=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SUBLIME=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_SYNCTHING=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; DOTFILES_NO_TERRAFORM=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
SSH&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;ssh-keygen -t ed25519 -a 100 -C &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;whoami&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;@&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt;hostname&lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; -f &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;${HOME}&lt;/span&gt;/.ssh/id_ed25519&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
GPG&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ViBiOh/dotfiles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My &lt;a href="https://github.com/vibioh/dotfiles"&gt;personal Dotfiles&lt;/a&gt; have more syntactic sugar but are the source of inspiration for writing this article. It's a "template repository", feel free to use it. With near 2k commits, achieving my Dotfiles was a journey and I just wanted to share it. Hope you enjoyed the reading ride!&lt;/p&gt;

&lt;p&gt;PS: English is not my native language and it's my first post here, be kind, I'm open to advice for improving =)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/photos/pUAM5hPaCRI"&gt;cover image from Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>bash</category>
      <category>productivity</category>
      <category>unix</category>
    </item>
    <item>
      <title>Send Mail Using Node.js and gmail in few Simple Steps </title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Tue, 27 Apr 2021 16:37:08 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/send-mail-using-node-js-and-gmail-in-few-simple-steps-4n79</link>
      <guid>https://dev.to/sudarshansb143/send-mail-using-node-js-and-gmail-in-few-simple-steps-4n79</guid>
      <description>&lt;p&gt;We all know how tedious the stuff gets when we wan't to send mail from any automated system.&lt;/p&gt;

&lt;p&gt;For example, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ping someone when CRON job at remote VM Executed *&lt;/li&gt;
&lt;li&gt;Get failure logs of your server in mail*
etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, today we are going to take a look at how can we send mail from nodejs using just a gmail account and third party library node-mailer &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Setting up G-mail :-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For sending mail's through your gmail A/C you must allow the " less secure app" access to your google A/C which is done here &lt;br&gt;
a&lt;br&gt;
&lt;a href="https://myaccount.google.com/lesssecureapps"&gt;https://myaccount.google.com/lesssecureapps&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#step-1-setting-up-nodemailer"&gt;
  &lt;/a&gt;
  Step 1 :- Setting up node-mailer
&lt;/h1&gt;

&lt;p&gt;Install node-mailer using npm or yarn (which is one prefer let me know in comments). I will use npm here because, it comes with node installation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i node-mailer 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-setting-up-nodemailer-and-some-basic-configuration"&gt;
  &lt;/a&gt;
  Step 2 :- Setting up node-mailer and some basic configuration
&lt;/h1&gt;

&lt;p&gt;After installing node-mailer, we have to setup some config's. For sending mail, we are going to use &lt;em&gt;Gmail&lt;/em&gt; as a mail service and create a mail transported object. Which internally handles the SMTP (Simple Mail Transfer Protocol) transactions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mailTransporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yourUserName@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;SecretPassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-create-mail-object"&gt;
  &lt;/a&gt;
  Step 3 :- create mail object
&lt;/h1&gt;

&lt;p&gt;Now it's time to create actual mail payload. It will contain of recipient mail address and other stuff like subject and the string which we want to send with the mail. This is  the basic payload we can alter the stuff with great flexibility&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mailDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yourUserName@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;favPerson@anyDomain.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You Were Hacked 8)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;System failure !&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-4-send-mail"&gt;
  &lt;/a&gt;
  Step 4 :- Send Mail
&lt;/h1&gt;

&lt;p&gt;Now, just hit it. ( I am handling result  with callback, you can also use Promise here)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;mailTransporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error Occurs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email sent successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's It. Now, we can send email to anyone with any email address without setting up out own mail server or anything else &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;I hope you all learnt something new from this post. Let me know if anything else I have to write in my next one&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>ALGORITHMIC TRADING</title>
      <author>Praveen Reddy Pingala</author>
      <pubDate>Tue, 27 Apr 2021 16:27:41 +0000</pubDate>
      <link>https://dev.to/praveenreddy_pingala_111/algorithmic-trading-2694</link>
      <guid>https://dev.to/praveenreddy_pingala_111/algorithmic-trading-2694</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-algorithmic-trading"&gt;
  &lt;/a&gt;
  What is Algorithmic Trading?
&lt;/h2&gt;

&lt;p&gt;Algorithmic trading is a process for executing orders utilizing automated and pre-programmed trading instructions to account for variables such as price, timing and volume. An algorithm is a set of directions for solving a problem.&lt;/p&gt;

&lt;p&gt;Algorithmic trading makes use of complex formulas, combined with mathematical models and human oversight, to make decisions to buy or sell financial securities on an exchange. Algorithmic trading can be used in a wide variety of situations including order execution, arbitrage, and trend trading strategies. The trade, in theory, can generate profits at a speed and frequency that is impossible for a human trader.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algorithmic-trading-in-practice"&gt;
  &lt;/a&gt;
  Algorithmic Trading in Practice
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#suppose-a-trader-follows-these-simple-trade-criteria"&gt;
  &lt;/a&gt;
  Suppose a trader follows these simple trade criteria:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Buy 50 shares of a stock when its 50-day moving average goes above the 200-day moving average. (A moving average is an average of past data points that smooths out day-to-day price fluctuations and thereby identifies trends.)
&lt;/li&gt;
&lt;li&gt;Sell shares of the stock when its 50-day moving average goes below the 200-day moving average.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these two simple instructions, a computer program will automatically monitor the stock price (and the moving average indicators) and place the buy and sell orders when the defined conditions are met. The trader no longer needs to monitor live prices and graphs or put in the orders manually. The algorithmic trading system does this automatically by correctly identifying the trading opportunity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-application-programming-interface-for-traders"&gt;
  &lt;/a&gt;
  API (Application Programming Interface) for Traders:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An application programming interface (API) establishes an online connection between a data provider and an end-user.&lt;/li&gt;
&lt;li&gt;For financial markets APIs interface trading algorithms or models and an exchange's and/or broker's platform.&lt;/li&gt;
&lt;li&gt;An API is essential to implementing an automated trading strategy.&lt;/li&gt;
&lt;li&gt;More brokers are making their platforms available through an API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-algorithmic-trading"&gt;
  &lt;/a&gt;
  Benefits of Algorithmic Trading
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#algotrading-provides-the-following-benefits"&gt;
  &lt;/a&gt;
  Algo-trading provides the following benefits:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Trades are executed at the best possible prices.&lt;/li&gt;
&lt;li&gt;Trade order placement is instant and accurate (there is a high chance of execution at the desired levels).&lt;/li&gt;
&lt;li&gt;Trades are timed correctly and instantly to avoid significant price changes.&lt;/li&gt;
&lt;li&gt;Reduced transaction costs.&lt;/li&gt;
&lt;li&gt;Simultaneous automated checks on multiple market conditions.&lt;/li&gt;
&lt;li&gt;Reduced risk of manual errors when placing trades.&lt;/li&gt;
&lt;li&gt;Algo-trading can be back tested using available historical and 
real-time data to see if it is a viable trading strategy.&lt;/li&gt;
&lt;li&gt;Reduced the possibility of mistakes by human traders based on 
emotional and psychological factors.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technical-requirements-for-algorithmic-trading"&gt;
  &lt;/a&gt;
  Technical Requirements for Algorithmic Trading
&lt;/h2&gt;

&lt;p&gt;Implementing the algorithm using a computer program is the final component of algorithmic trading, accompanied by back testing (trying out the algorithm on historical periods of past stock-market performance to see if using it would have been profitable). The challenge is to transform the identified strategy into an integrated computerized process that has access to a trading account for placing orders. The following are the requirements for algorithmic trading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computer-programming knowledge to program the required trading strategy, hired programmers, or pre-made trading software.&lt;/li&gt;
&lt;li&gt;Network connectivity and access to trading platforms to place orders.&lt;/li&gt;
&lt;li&gt;Access to market data feeds that will be monitored by the algorithm for opportunities to place orders.&lt;/li&gt;
&lt;li&gt;The ability and infrastructure to back test the system once it is built before it goes live on real markets.&lt;/li&gt;
&lt;li&gt;Available historical data for back testing depending on the complexity of rules implemented in the algorithm.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>datascience</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>What is fundamentally wrong about the modern Web?</title>
      <author>Nickolay Platonov</author>
      <pubDate>Tue, 27 Apr 2021 16:25:42 +0000</pubDate>
      <link>https://dev.to/chronograph/what-is-fundamentally-wrong-about-the-modern-web-2j04</link>
      <guid>https://dev.to/chronograph/what-is-fundamentally-wrong-about-the-modern-web-2j04</guid>
      <description>&lt;p&gt;If you are in the web development business, you might thought this post is about Webpack and friends. Nope, its even more fundamental.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Web as a platform is trying to solve an application containerization problem, but the way of solving it - rewriting every piece of code in the world using the "Web API" is extremely dated. Instead, Web should rely on OS-level containerization and create a common standard of interoperable native calls between different languages (something like &lt;a href="https://en.wikipedia.org/wiki/Interface_description_language"&gt;IDL&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Being a programmer, I'll use a 3rd party &lt;del&gt;library&lt;/del&gt; blog post to describe the problem I mention in the title. &lt;a href="https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html"&gt;Please return after reading it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt; the key citation: &lt;em&gt;"The number of W3C specifications grows at an average rate of 200 new specs per year, or about 4 million words, or about one POSIX every 4 to 6 months. How can a new team possibly keep up with this on top of implementing the outrageous scope web browsers already have now?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets try to analyze this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-essentials-of-web"&gt;
  &lt;/a&gt;
  The essentials of web
&lt;/h2&gt;

&lt;p&gt;Web has started as a media for distribution of static content, like plain html pages without JavaScript. That's HTML 1-4 epoch.&lt;/p&gt;

&lt;p&gt;Then people realized, that content can be dynamic, interactive. The border between the content and the application started to fade out. That's the beginning of the "modern" web, back in the days called HTML 5.&lt;/p&gt;

&lt;p&gt;HTML 5 started as a list of improvements to HTML 4. And the more people were able to do with the modern Web, the more things they wanted to do. The improvements list became endless and this is where we are currently.&lt;/p&gt;

&lt;p&gt;But why has the Web become so popular as a media for distributing interactive content (aka applications)? There are regular desktop applications, you can download and run on your computer. Multiple good reasons, I'll mention just few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security. Obviously, running some untrusted code on your machine, you can easily find yourself sending bitcoins to someone, to decrypt your HDD with you work files. Or discover your business-critical files published on every torrent tracker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web acts here as a &lt;em&gt;virtual machine&lt;/em&gt; (&lt;strong&gt;Web VM&lt;/strong&gt;), which sandbox the application and limit the potential harm. In practice this point does not hold, web browsers are still the most common vector of malicious software infection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interoperability. Instead of writing your application for all possible CPU architectures, you write it for "Web VM".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll focus on the security problem below, as most important one, after all, even C++ programs can be cross-platform nowadays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-as-a-virtual-machine"&gt;
  &lt;/a&gt;
  Web as a virtual machine
&lt;/h2&gt;

&lt;p&gt;The main purpose of the Web VM is provide a secure sandbox, to be able to run the arbitrary untrusted code. &lt;/p&gt;

&lt;p&gt;When you open a page with the weather forecast, nowadays it might be showing some 3D scenes of Earth+Moon orbits and whatnot. You do want those 3D scenes, they are very informative. &lt;/p&gt;

&lt;p&gt;The real trouble might begin when you'll decide to check that link, your colleague send to you with a note, like "check out this awesome video". You are curious about the video, but you don't want your machine to be polluted with viruses.&lt;/p&gt;

&lt;p&gt;So, you want a combination of security and versatility in the same time. Why an endless list of extensions and new specs is needed for the Web VM to provide both? &lt;/p&gt;

&lt;p&gt;Because its a closed environment - every new use case or feature requires a new specification, even that already established solutions/libraries exists for it, in the "native" code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internal-demons"&gt;
  &lt;/a&gt;
  Internal demons
&lt;/h2&gt;

&lt;p&gt;Looking from the other viewpoint, the so called "modern Web API" is just a normal wish of every programmer - to rewrite every piece of software in the world in their favorite language/framework, instead of solving the business requirements.&lt;/p&gt;

&lt;p&gt;It is an intrinsic desire of every developer - "I'll rewrite that neat library doing feature X, but I'll do it in the right way, using tabs instead of spaces, or may be, 2 spaces instead of 4, or may be, I'll properly insert semi-colons after every statement, or, I'll remove those noisy semi-colons after every statement, or, I'll use an awesome Web API instead of that C++ lib, &lt;em&gt;please insert your favorite preference here&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;In case of Web VM, this desire is also supported by the rational explanation - "I can't use a library for this purpose - it might be not secure. What is forgotten - "I can't use that native library for this purpose, because WebVM does not support native code".&lt;/p&gt;

&lt;p&gt;Providing a secure application sandbox is a real-world need. Rewriting everything from scratch - internal demon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-done-right"&gt;
  &lt;/a&gt;
  Security, done right
&lt;/h2&gt;

&lt;p&gt;Again, being a developer, I'll use a 3rd party content to demonstrate, why the current Web VM approach to security is not correct.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href="https://groups.google.com/g/nodejs-dev/c/9vApf6IvRxk/m/6rOlU-OyQe4J"&gt;thread in Node.js mailing list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Someone is submitting a PR for the "node-safe-mode" ("hardened" node), that should allow &lt;em&gt;"running third-party-written code"&lt;/em&gt;. The list of improvements includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Each node processes will be given a file system directory, which will contain the JavaScript it runs, ... other than that, the process will have no access to any other part of the file system&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Each node process creates a socket that it uses to receive requests from the server.  To prevent different node processes from communicating with each other directly, the ability of node processes to connect to sockets will be restricted.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;On general principles, Node processes will not be allowed to kill other processes, change their default directory, change their effective user or group id&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;etc..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Wow, this looks pretty much like the security guarantees of the regular web page.&lt;/strong&gt; Must be an excellent addition to the Node.js! Ok, what are the answers to this generous contributor?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"No. I appreciate the effort but it sounds too much like PHP's safe mode and everyone knows how broken that is. Containerization should be done at the OS level, not the application level."&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"The problem with continually restricting things like child processes and native addons, is that these are popular features, and you still face problems like port/fd hijacking. ... In order to prevent fd attacks and port hijacking ... you would want to completely restrict the C++ level access instead of Javascript as well...&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;... I recommend VM level separation if you are serious about security combined with OS level protection"&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"True security containment is not trivial. It's not a feature you add onto a platform later. It's something that you really have to bake into the architecture from the very start, and evaluate all your trade-offs in that light. .... Furthermore, doing multi-tenancy in this way is extremely dated, and unnecessary. There's better technology now."&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Wait, what? A non-trivial PR, which adds a security model to Node, that is similar to a web page security model, is rejected, because &lt;em&gt;"doing multi-tenancy in this way is extremely dated"&lt;/em&gt; and &lt;em&gt;"there's better technology"&lt;/em&gt;? &lt;/p&gt;

&lt;p&gt;Pretty much all those who replied to the PR, said that doing security at the application level is old, unreliable way, which also restricts the "native addons". Then why Web is still using such old-fashioned approach?&lt;/p&gt;

&lt;p&gt;If we combine the citation from one of the replies from the Node.js thread, with the citation from the blog post I mentioned in the beginning, we'll receive exactly the problem, the modern Web is experiencing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"The problem with continually restricting things like child processes and native addons, is that these are popular features, and your specification starts to grow at the speed of one POSIX every 4 to 6 months"&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;The solution is dumb simple. As suggested by Node.js engineers, Web should provide native, OS-level containerization for the pages. Yes, every tab in your browser should run in container. If you recall, when Chrome started running every tab in a separate process, that seemed like something inconceivably new and even frightening. Well, that has proven itself as a reliable solution.&lt;/p&gt;

&lt;p&gt;The next step is to put every of those processes into separate OS-level container. That's just it - you have the proper, real, security for the untrusted code, and that code can use "popular native addons". &lt;/p&gt;

&lt;p&gt;There's no need to write a spec for every library in the world. Especially if those specs are just descriptions of the imperative interfaces, not the formally-verified code.&lt;/p&gt;

&lt;p&gt;Need to mention that "web page as a container" is not a new concept. There were already similar attempts, like &lt;a href="https://en.wikipedia.org/wiki/Java_Web_Start"&gt;Java Web Start&lt;/a&gt;. They were, however, application containers, similar to the "safer-node". The missing piece was OS-level containerization. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vision"&gt;
  &lt;/a&gt;
  Vision
&lt;/h2&gt;

&lt;p&gt;Lets imagine we have this OS-level containerization for web pages and page can be running native code easily. How the Web will look like in this brave new world?&lt;/p&gt;




&lt;p&gt;The role of the JavScript and HTML/CSS will probably reduce somewhat. The WebAssembly hype wave will not be that big, or not happen at all. However, WebAssembly is moving in the right direction, for example with InterfaceTypes proposal.&lt;/p&gt;




&lt;p&gt;The notion of desktop application may start disappearing, why would anyone write a program limited to only one CPU architecture? For example, I imagine all kinds of various editors which are currently desktop applications (like PhotoShop, 3DMax, etc) will have "web" equivalents.&lt;/p&gt;




&lt;p&gt;It should be possible to run a whole OS desktop in the web page. I imagine, if I had to open some &lt;em&gt;really&lt;/em&gt; untrusted page, I'd be using a browser, running inside of such "Web OS" page, to provide an extra level of containerization. Containers may have different virtualization mechanisms - from being a container as we know now, to being a VM emulator (supposedly more secure).&lt;/p&gt;




&lt;p&gt;The border between the web page and mobile application will disappear completely. This is probably not what the owners of the "mobile app stores" want. &lt;/p&gt;




&lt;p&gt;The key piece of the puzzle for this paradigm shift to happen, is providing the really secure containerization solution. The only way of doing it is writing as formally verified code.&lt;/p&gt;




&lt;p&gt;The IOT can benefit from the secure execution sandbox/container a lot. Imagine various devices, too dumb to visualize their interface, but smart enough to upload it to your computer/smartphone for execution. No need for "cloud", every "internet-thing" can carry all needed software onboard.&lt;/p&gt;




&lt;p&gt;The need for formal spec for every use case will reduce a lot. Instead, the need for the robust, mathematically sound, native code interoperability will appear.&lt;/p&gt;




&lt;p&gt;A web page and a desktop application window - these are the equal concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If we look at the Web from a bit more general perspective, we can replace the "web page" concept with the "web node". A universal execution node, combined with other nodes in a distributed network and able to the run untrusted code - this is what probably Ryan Dahl had in mind back in the days, calling his project "Node". &lt;/p&gt;

&lt;p&gt;Hopefully the argumentation in this post is straightforward enough. I believe OS-level containerization is a next logical step in the Web evolution. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Neovim Inside VS Code</title>
      <author>Jimmy McBride</author>
      <pubDate>Tue, 27 Apr 2021 16:14:16 +0000</pubDate>
      <link>https://dev.to/jimmymcbride/how-to-neovim-inside-vs-code-5a1g</link>
      <guid>https://dev.to/jimmymcbride/how-to-neovim-inside-vs-code-5a1g</guid>
      <description>&lt;p&gt;If you've been wanting to try out and learn vim, but don't want to leave the comforts of VS Code behind, this tutorial is for you. In this tutorial, I will show you how to achieve (what I consider to be) the best of both worlds when it comes to using these tools together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;First, we'll start off by adding the &lt;a href="https://marketplace.visualstudio.com/items?itemName=asvetliakov.vscode-neovim"&gt;Neovim extension for VS Code&lt;/a&gt;. Once that extension is installed, we're going to need to point the extension at an instance of neovim. It's very important that we use v0.5.0 instead of anything v0.4 or lower. If you do, you'll experience a hard time with this extension.&lt;/p&gt;

&lt;p&gt;Once you download and install the &lt;a href="https://github.com/neovim/neovim/releases/tag/nightly"&gt;Neovim v0.5.0&lt;/a&gt;, you're going to want to point your Neovim extension at this installation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CM0OUtEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syt5eoupb8fmeetjjnmo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CM0OUtEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syt5eoupb8fmeetjjnmo.png" alt="neovim extension settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;I like to turn the ctrl keys for insert and normal mode off. This means you can still use ctrl + c all the other vs code keybindings will work as expected. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PczX5Ri8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkqefvku6nvj34c5bu7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PczX5Ri8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkqefvku6nvj34c5bu7w.png" alt="ctrl keys off"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also like to double-tap j while in insert mode to escape into normal mode. You can add the following snippet to your &lt;code&gt;keybindings.json&lt;/code&gt; if you'd like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode-neovim.compositeEscape1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"j"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"when"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"neovim.mode == insert &amp;amp;&amp;amp; editorTextFocus"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"j"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoy learning VIM from the comfort of your VS Code editor! &lt;a href="https://www.maketecheasier.com/cheatsheet/vim-keyboard-shortcuts/"&gt;Here's a great VIM cheat sheet&lt;/a&gt; I have bookmarked with a bunch of great and useful keyboard shortcuts for VIM.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Guide to Callbacks &amp; Higher-Order Functions in JavaScript.</title>
      <author>Blessing Hirwa</author>
      <pubDate>Tue, 27 Apr 2021 16:09:45 +0000</pubDate>
      <link>https://dev.to/blessingartcreator/guide-to-callbacks-higher-order-functions-in-javascript-g98</link>
      <guid>https://dev.to/blessingartcreator/guide-to-callbacks-higher-order-functions-in-javascript-g98</guid>
      <description>&lt;p&gt;&lt;strong&gt;Callbacks and Higher Order functions&lt;/strong&gt; are some of the most misunderstood concepts in JavaScript. During this post, we will become familiar with them to write pro-level code as JavaScript engineers.&lt;/p&gt;

&lt;p&gt;Before continuing, let's ask ourselves a question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we even have functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs see why‚Ä¶&lt;/p&gt;

&lt;p&gt;Create a function 10 squared&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Takes no input&lt;/li&gt;
&lt;li&gt;Returns 10*10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;tenSquared&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tenSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;tenSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#what-about-a-9-squared-function"&gt;
  &lt;/a&gt;
  What about a 9 squared function?
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;nineSquared&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nineSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;nineSquared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 81&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;And an 8 squared function? 125 squared?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What principle are we breaking? &lt;strong&gt;DRY (Don‚Äôt Repeat Yourself )&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-can-generalize-the-function-to-make-it-reusable"&gt;
  &lt;/a&gt;
  üëâ We can generalize the function to make it reusable.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 81&lt;/span&gt;
&lt;span class="nx"&gt;squareNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Generalizing functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Parameters (placeholders)&lt;/code&gt; mean we don‚Äôt need to decide what data to run our functionality on until we run the function. Then provide an actual value &lt;code&gt;(argument)&lt;/code&gt; when we run the function. &lt;code&gt;Higher-order functions&lt;/code&gt; follow this same principle, we may not want to decide exactly what some of our functionality is until we run our function.&lt;/p&gt;

&lt;p&gt;Now suppose we have a function &lt;code&gt;copyArrayAndMultiplyBy2&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndMultiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndMultiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if want to copy the array and divide it by 2?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndDivideBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndDivideBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or add 3?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndAdd3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndAdd3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What principle are we breaking? &lt;strong&gt;DRY (Don‚Äôt Repeat Yourself )&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üëâ We could generalize our function, so we pass in our specific instruction only when we run &lt;code&gt;copyArrayAndManipulate&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-was-this-possible"&gt;
  &lt;/a&gt;
  How was this possible?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Functions in javascript = first-class objects&lt;/code&gt;. In addition to this, let's highlight some of the other features of functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They can co-exist with and can be treated like any other javascript object&lt;/li&gt;
&lt;li&gt;Assigned to variables and properties of other objects&lt;/li&gt;
&lt;li&gt;Passed as arguments into functions&lt;/li&gt;
&lt;li&gt;Returned as values from functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this piece of code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;copyArrayAndManipulate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#which-is-our-higher-order-function-%E2%98%9D"&gt;
  &lt;/a&gt;
  Which is our Higher Order Function ‚òù?
&lt;/h4&gt;

&lt;p&gt;The outer function that takes in a function is our higher-order.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#which-is-our-callback-function"&gt;
  &lt;/a&gt;
  Which is our Callback Function
&lt;/h4&gt;

&lt;p&gt;The function we insert is our callback function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Higher-order functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Takes in a function or passes out a function. Just a term to describe these functions - &lt;code&gt;any function that does it we call that -&lt;/code&gt; but there's nothing different about them inherently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we need to master these two concepts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Callbacks and Higher-Order Functions simplify our code &lt;br&gt;
and keep it &lt;code&gt;DRY&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Declarative readable code:&lt;/strong&gt; Map, filter, reduce - the most readable way to write code to work with data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Codesmith &amp;amp; pro interview prep:&lt;/strong&gt; One of the most popular topics to test in an interview both for &lt;a href="https://codesmith.io/"&gt;Codesmith&lt;/a&gt; and other mid/senior-level job interviews.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Asynchronous JavaScript:&lt;/strong&gt; Callbacks are a core aspect of &lt;code&gt;async JavaScript&lt;/code&gt;, and are under the hood of &lt;code&gt;promises&lt;/code&gt;, &lt;code&gt;async/await&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
What's more, there we have it. If you made it here thank you for reading! I hope this post will help you get started with writing pro-level JavaScript codes.&lt;/p&gt;

&lt;p&gt;üëã&lt;strong&gt;Let's be friends!&lt;/strong&gt; Follow me on &lt;a href="https://twitter.com/graphicblessing"&gt;Twitter&lt;/a&gt; and &lt;a href="https://instagram.com/blessingartcreator"&gt;instagram&lt;/a&gt; for more related content. Don't forget to follow me also here on &lt;a href="https://dev.to/blessingartcreator"&gt;Dev&lt;/a&gt; as well to get updated for new content.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why Community is Important for Developers</title>
      <author>Ceora Ford</author>
      <pubDate>Tue, 27 Apr 2021 15:54:36 +0000</pubDate>
      <link>https://dev.to/codesandboxio/why-community-is-important-for-developers-25g8</link>
      <guid>https://dev.to/codesandboxio/why-community-is-important-for-developers-25g8</guid>
      <description>&lt;p&gt;There are a plethora of developer communities out there. Countless times, I've been encouraged to join some online or in-person community for developers and I'm sure you have too. After listening to the  &lt;a href="https://codesandbox.io/podcasts/version-one/Vercel-Guillermo-Rauch"&gt;episode 2 of the Version One podcast&lt;/a&gt;, I was reminded of the value of community.&lt;/p&gt;

&lt;p&gt;The second episode of the Version One podcast features guest &lt;a href="https://twitter.com/rauchg"&gt;Guillermo Rauch&lt;/a&gt;, CEO and Co-founder of &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;. When discussing how he started coding, Guillermo mentioned an online forum which played a huge part in his growth as a developer. As Guillermo's experience demonstrates, community can be a huge catalyst for growth as a developer. By why is that the case? And where can you find said communities? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-need-to-invest-in-community"&gt;
  &lt;/a&gt;
  Why you need to invest in community
&lt;/h2&gt;

&lt;p&gt;Coding isn't always an easy task. There are multiple hurdles that many people confront along their developer journey. Running into difficult errors, dealing with difficult coding concepts, job searching, career growth- the list could go on forever. It becomes so much easier to deal with these things when you have a helpful community to lean on.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I started finding different communities that were helping me figure things out. And that also, whenever I would figure something out, I would contribute back, too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you find a community that fits your interests and career goals, you'll have a place where you can turn to ask questions and get advice from developers all over the world. You can also share your own insights and help others along the way. As time goes on, your developer network will continue to grow and you'll become a better developer. This is why it's so important to invest in community, no matter what skill level you're at.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-find-the-right-community-for-you"&gt;
  &lt;/a&gt;
  Where to find the right community for you
&lt;/h2&gt;

&lt;p&gt;Now that you know community is so valuable, it's time to actually find one for yourself. You don't need to be part of every single one you come across. That can easily become overwhelming. Focus on actively participating in just a few. &lt;/p&gt;

&lt;p&gt;If it's safe to do so in the area where you live, you can look around for local meetups and communities. Check websites like &lt;a href="https://www.meetup.com/"&gt;Meetup&lt;/a&gt; and search for groups using keywords that are related to whatever language or technology you would like to be more involved with.&lt;/p&gt;

&lt;p&gt;Thankfully, we have social media and platforms like Discord and Slack which enable remote community building. Twitter is a developer hot spot. It's a great place to go to share what you're working on and learning and to ask and answer questions. It's good to know, though, that Twitter isn't always a safe space. But it still holds a ton of value. &lt;/p&gt;

&lt;p&gt;To find Discord and Slack communities, search "[insert language or tech stack of interest] communities on Discord/Slack" on Google. It also helps to ask developers you already know for recommendations. When you find a community that matches your interests, keep an eye out for active moderators and a Code of Conduct. Both of these things ensure the safety of community members. Of course, this isn't absolute and people with bad intentions may still slip in. But having moderators and a Code of Conduct that is heavily promoted means that your online safety is being prioritized and that's very important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's clear that being part of a community can do wonders for your growth as a developer. Searching for, joining, and participating in developer communities online or in-person (if it's safe) will be well worth the effort and time you invest. Guillermo's podcast episode reminded me of this. There's much more to learn from his journey to becoming a startup founder. So make sure to give his Version One interview a listen.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3lIxK1Qbi5g0Z5ZBmOCic4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>community</category>
      <category>career</category>
      <category>coding</category>
    </item>
    <item>
      <title>Python YAML configuration with environment variables parsing</title>
      <author>Maria Karanasou</author>
      <pubDate>Tue, 27 Apr 2021 15:51:04 +0000</pubDate>
      <link>https://dev.to/mkaranasou/python-yaml-configuration-with-environment-variables-parsing-2ha6</link>
      <guid>https://dev.to/mkaranasou/python-yaml-configuration-with-environment-variables-parsing-2ha6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#load-a-yaml-configuration-file-and-resolve-any-environment-variables"&gt;
  &lt;/a&gt;
  Load a YAML configuration file and resolve any environment variables
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hoh6t-eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11700/1%2A4s_GrxE5sn2p2PNd8fS-6A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hoh6t-eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11700/1%2A4s_GrxE5sn2p2PNd8fS-6A.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if you want to use this, check the &lt;strong&gt;UPDATE&lt;/strong&gt; at the end of the article :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you‚Äôve worked with Python projects, you‚Äôve probably have stumbled across the many ways to provide configuration. I am not going to go through all the ways here, but a few of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;using .ini files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using a python class&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using .env files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using JSON or XML files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using a yaml file&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on. I‚Äôve put some useful links about the different ways below, in case you are interested in digging deeper.&lt;/p&gt;

&lt;p&gt;My preference is working with yaml configuration because I usually find very handy and easy to use and I really like that yaml files are also used in e.g. docker-compose configuration so it is something most are familiar with.&lt;/p&gt;

&lt;p&gt;For yaml parsing I use the &lt;a href="https://pyyaml.org/wiki/PyYAMLDocumentation"&gt;PyYAML&lt;/a&gt; Python library.&lt;/p&gt;

&lt;p&gt;In this article we‚Äôll talk about the yaml file case and more specifically what you can do to &lt;strong&gt;avoid keeping your secrets, e.g. passwords, hosts, usernames etc, directly on it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we have a very simple example of a yaml file configuration:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;database:
 name: database_name
 user: me
 password: very_secret_and_complex
 host: localhost
 port: 5432

ws:
 user: username
 password: very_secret_and_complex_too
 host: localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;When you come to a point where you need to deploy your project, it is not really safe to have passwords and sensitive data in a plain text configuration file lying around on your production server. That‚Äôs where &lt;a href="https://medium.com/dataseries/hiding-secret-info-in-python-using-environment-variables-a2bab182eea"&gt;**environment variables&lt;/a&gt; **come in handy. So the goal here is to be able to easily replace the very_secret_and_complex password with input from an environment variable, e.g. DB_PASS, so that this variable only exists when you set it and run your program instead of it being hardcoded somewhere.&lt;/p&gt;

&lt;p&gt;For PyYAML to be able to resolve environment variables, we need three main things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A regex pattern for the environment variable identification e.g. pattern = re.compile(‚Äò.&lt;em&gt;?\${(\w+)}.&lt;/em&gt;?‚Äô)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A tag that will signify that there‚Äôs an environment variable (or more) to be parsed, e.g. !ENV.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And a function that the loader will use to resolve the environment variables&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Here‚Äôs a complete example:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Example of a YAML configuration with environment variables:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;database:
 name: database_name
 user: !ENV ${DB_USER}
 password: !ENV ${DB_PASS}
 host: !ENV ${DB_HOST}
 port: 5432

ws:
 user: !ENV ${WS_USER}
 password: !ENV ${WS_PASS}
 host: !ENV ‚Äò[https://${CURR_ENV}.ws.com.local'](https://${CURR_ENV}.ws.com.local')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This can also work &lt;strong&gt;with more than one environment variables&lt;/strong&gt; declared in the same line for the same configuration parameter like this:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ws:
 user: !ENV ${WS_USER}
 password: !ENV ${WS_PASS}
 host: !ENV '[https://${CURR_ENV}.ws.com.](https://${CURR_ENV}.ws.com.local')[${MODE}](https://${CURR_ENV}.ws.com.local')'  # multiple env var
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And how to use this:&lt;/p&gt;

&lt;p&gt;First set the environment variables. For example, for the DB_PASS :&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export DB_PASS=very_secret_and_complex
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Or even better, so that the password is not echoed in the terminal:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;read -s ‚ÄòDatabase password: ‚Äò db_pass
export DB_PASS=$db_pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Then you can run the above script:&lt;/p&gt;

&lt;p&gt;python use_env_variables_in_config_example.py -c /path/to/yaml&lt;/p&gt;

&lt;p&gt;And in your code, do stuff with conf, e.g. access the database password like this: conf['database']['DB_PASS']&lt;/p&gt;

&lt;p&gt;I hope this was helpful. Any thoughts, questions, corrections and suggestions are very welcome :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  UPDATE
&lt;/h2&gt;

&lt;p&gt;Because I ‚Äî and other people ‚Äî have been using this a lot, I created a (very) small library, with tests and some extra features, to make it easier to use this without copy-pasting things all over :)&lt;/p&gt;

&lt;p&gt;You can now just do:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install pyaml-env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And then you can import parse_config to use it in your code.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from pyaml_env import parse_config

config = parse_config('path/to/yaml')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I also added support for default values (thanks &lt;a href="https://medium.com/@jgilewski"&gt;Jaros≈Çaw Gilewski&lt;/a&gt; for the idea!) and will probably add a few other ‚Äî config related things that are getting transferred from one project to another.&lt;/p&gt;

&lt;p&gt;You can find the repo here:&lt;br&gt;
&lt;a href="https://mariakaranasou.com/pyaml_env/"&gt;&lt;strong&gt;Python YAML configuration with environment variables parsing&lt;/strong&gt;&lt;br&gt;
*A very small library that parses a yaml configuration file and it resolves the environment variables, so that no‚Ä¶*mariakaranasou.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/mkaranasou/pyaml_env"&gt;&lt;strong&gt;mkaranasou/pyaml_env&lt;/strong&gt;&lt;br&gt;
*A very small library that parses a yaml configuration file and it resolves the environment variables, so that no‚Ä¶*github.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hackersandslackers.com/simplify-your-python-projects-configuration/"&gt;&lt;strong&gt;The Many Faces and Files of Python Configs&lt;/strong&gt;&lt;br&gt;
*As we cling harder and harder to Dockerfiles, Kubernetes, or any modern preconfigured app environment, our dependency‚Ä¶*hackersandslackers.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hackernoon.com/4-ways-to-manage-the-configuration-in-python-4623049e841b"&gt;&lt;strong&gt;4 Ways to manage the configuration in Python&lt;/strong&gt;&lt;br&gt;
*I‚Äôm not a native speaker. Sorry for my english. Please understand.*hackernoon.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.devdungeon.com/content/python-configuration-files"&gt;&lt;strong&gt;Python configuration files&lt;/strong&gt;&lt;br&gt;
*A common need when writing an application is loading and saving configuration values in a human-readable text format‚Ä¶*www.devdungeon.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://martin-thoma.com/configuration-files-in-python/"&gt;&lt;strong&gt;Configuration files in Python&lt;/strong&gt;&lt;br&gt;
*Most interesting programs need some kind of configuration: Content Management Systems like WordPress blogs, WikiMedia‚Ä¶*martin-thoma.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://medium.com/swlh/python-yaml-configuration-with-environment-variables-parsing-77930f4273ac"&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I could use a &lt;a href="https://www.buymeacoffee.com/mkaranasou"&gt;coffee&lt;/a&gt; to keep me going :) &lt;br&gt;
Thanks!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>yaml</category>
    </item>
    <item>
      <title>Rendering components conditionally with Phoenix LiveView</title>
      <author>Santiago Cardona</author>
      <pubDate>Tue, 27 Apr 2021 15:34:18 +0000</pubDate>
      <link>https://dev.to/santiagocardo/rendering-components-conditionally-with-phoenix-liveview-4p6j</link>
      <guid>https://dev.to/santiagocardo/rendering-components-conditionally-with-phoenix-liveview-4p6j</guid>
      <description>&lt;p&gt;When we come across a view that has many HTML elements, we usually want to separate them into their own components to have a better organization of the code to make it easier to understand and maintain, as well as decouple large logic into smaller pieces, and why not, re-use these components in another view (very much in the style of React.js mental model).  This can be easily achieved by using &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html"&gt;LiveComponent&lt;/a&gt; de &lt;strong&gt;Phoenix LiveView&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that many times these components share some logic between them, and many times they depend on each other to know if it should be rendered or not. This is called conditional rendering, and with &lt;strong&gt;Phoenix LiveView&lt;/strong&gt; we can achieve this by handling the conditional logic in the parent &lt;strong&gt;LiveView&lt;/strong&gt;, through the &lt;strong&gt;handle_info&lt;/strong&gt; callback function.&lt;/p&gt;

&lt;p&gt;You can also see this post in Spanish üá®üá¥ &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/santiagocardo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkPOt6LF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uDvZZEOo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616717/4d670ae5-1bc6-4a63-911c-9f3168ea5631.jpeg" alt="santiagocardo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/santiagocardo/renderizar-componentes-condicionalmente-con-phoenix-liveview-14ih" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Renderizar componentes condicionalmente con Phoenix LiveView&lt;/h2&gt;
      &lt;h3&gt;Santiago Cardona „Éª Apr 27 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#elixir&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#liveview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#phoenix&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h3&gt;

&lt;p&gt;Suppose we have a view for registering a vehicle in a mechanics workshop. This view is composed of two forms, one for the registration of the vehicle owner and one for the registration of the vehicle itself. Each form has its own independent registration view, so we use a &lt;strong&gt;LiveComponent&lt;/strong&gt; for each of these, within which its own business logic is handled independently.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8C1jwc1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12a0yx9e9ktraic1tidi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8C1jwc1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12a0yx9e9ktraic1tidi.png" alt="live componets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These views must be rendered independently and in order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;User registration (&lt;strong&gt;customer_component.ex&lt;/strong&gt;)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCkdh46D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apcsxpheptiwq7z43sce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCkdh46D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apcsxpheptiwq7z43sce.png" alt="Register Customer"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vehicle registration (&lt;strong&gt;vehicle_component.ex&lt;/strong&gt;)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ImceAHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebskxglwjtf0n6xl0t1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImceAHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebskxglwjtf0n6xl0t1t.png" alt="Register Vehicle"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the user is registered, the user's &lt;em&gt;id&lt;/em&gt; must be passed to the vehicle component, so that we can successfully associate the user with the vehicle when we are registering the vehicle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-achieve-this-lets-go-to-the-code"&gt;
  &lt;/a&gt;
  How do we achieve this? Let's go to the code...
&lt;/h3&gt;

&lt;p&gt;The conditional logic is handled in the parent view of the user and vehicle components, in this case, it will be the LiveView &lt;strong&gt;&lt;em&gt;vehicle_live/index.ex&lt;/em&gt;&lt;/strong&gt; and its respective file &lt;strong&gt;&lt;em&gt;vehicle_live/index.html.leex&lt;/em&gt;&lt;/strong&gt; where the HTML elements to be rendered are located.&lt;/p&gt;

&lt;p&gt;In the file &lt;strong&gt;&lt;em&gt;vehicle_live/index.ex&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;VehicleLive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:live_view&lt;/span&gt;

  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;CarWorkshop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;Vehicles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;customer:&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="ss"&gt;view_to_show:&lt;/span&gt; &lt;span class="ss"&gt;:customer_view&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apply_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assigns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;live_action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;apply_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:page_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Register Vehicle"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:vehicle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Vehicle&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:customer_registered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_to_show&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;customer:&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;view_to_show:&lt;/span&gt; &lt;span class="n"&gt;view_to_show&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the &lt;strong&gt;mount&lt;/strong&gt; function, we assign to the socket the property &lt;em&gt;view_to_show&lt;/em&gt; by means of which we will know the component to render in &lt;strong&gt;&lt;em&gt;vehicle_live/index.html.leex&lt;/em&gt;&lt;/strong&gt;. We give it a value of &lt;em&gt;:customer_view&lt;/em&gt;, making the first view to be rendered the one of the user component.&lt;/p&gt;

&lt;p&gt;The callback function &lt;strong&gt;handle_info&lt;/strong&gt; will be in charge of changing the &lt;em&gt;view_to_show&lt;/em&gt; property of the socket, and thus, the conditional rendering of each component will be performed according to the arguments we pass to this function.&lt;/p&gt;

&lt;p&gt;In the file &lt;strong&gt;&lt;em&gt;vehicle_live/index.html.leex&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;@view_to_show&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:vehicle_view&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;live_component&lt;/span&gt; &lt;span class="nv"&gt;@socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;VehicleComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;id:&lt;/span&gt; &lt;span class="nv"&gt;@vehicle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;title:&lt;/span&gt; &lt;span class="s2"&gt;"Register Vehicle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;action:&lt;/span&gt; &lt;span class="nv"&gt;@live_action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;vehicle:&lt;/span&gt; &lt;span class="nv"&gt;@vehicle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;customer_id:&lt;/span&gt; &lt;span class="nv"&gt;@customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;live_component&lt;/span&gt; &lt;span class="nv"&gt;@socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CarWorkshopWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;CustomerComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;id:&lt;/span&gt; &lt;span class="nv"&gt;@customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;title:&lt;/span&gt; &lt;span class="s2"&gt;"Register Customer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;action:&lt;/span&gt; &lt;span class="nv"&gt;@live_action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;customer:&lt;/span&gt; &lt;span class="nv"&gt;@customer&lt;/span&gt;
  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With this, we already have the user view rendered. The only thing missing would be to call the callback &lt;strong&gt;handle_info&lt;/strong&gt; from the user component once all our business logic has been executed, and then allow the rendering of the vehicle view.&lt;/p&gt;

&lt;p&gt;Suppose we want to render the vehicle component immediately after successful user registration. For this, in the file &lt;strong&gt;&lt;em&gt;customer_component.ex&lt;/em&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"save"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"customer"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customer_params&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:customer_registered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:vehicle_view&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Ecto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Changeset&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;changeset:&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Using the &lt;strong&gt;send()&lt;/strong&gt; function we make the parent LiveView execute the &lt;strong&gt;handle_info&lt;/strong&gt; callback that satisfies the &lt;em&gt;{:customer_registered, customer, view_to_show}&lt;/em&gt; parameter contract. From which we will be able to know the identifier of the &lt;strong&gt;handle_info&lt;/strong&gt; to execute (&lt;em&gt;:customer_registered&lt;/em&gt;), the newly created user (&lt;em&gt;customer&lt;/em&gt;), and the view to render (&lt;em&gt;:vehicle_view&lt;/em&gt;).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thats-it-we-have-a-conditional-rendering-of-components"&gt;
  &lt;/a&gt;
  That's it, we have a conditional rendering of components!
&lt;/h3&gt;



&lt;p&gt;To see the full implementation you can visit the repo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/santiagocardo80"&gt;
        santiagocardo80
      &lt;/a&gt; / &lt;a href="https://github.com/santiagocardo80/car-workshop"&gt;
        car-workshop
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Car Workshop Managment Web App
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
CarWorkshop&lt;/h1&gt;
&lt;p&gt;To start your Phoenix server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install dependencies with &lt;code&gt;mix deps.get&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create and migrate your database with &lt;code&gt;mix ecto.setup&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install Node.js dependencies with &lt;code&gt;npm install&lt;/code&gt; inside the &lt;code&gt;assets&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Start Phoenix endpoint with &lt;code&gt;mix phx.server&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can visit &lt;a href="http://localhost:4000" rel="nofollow"&gt;&lt;code&gt;localhost:4000&lt;/code&gt;&lt;/a&gt; from your browser.&lt;/p&gt;
&lt;p&gt;Ready to run in production? Please &lt;a href="https://hexdocs.pm/phoenix/deployment.html" rel="nofollow"&gt;check our deployment guides&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Learn more&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official website: &lt;a href="https://www.phoenixframework.org/" rel="nofollow"&gt;https://www.phoenixframework.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Guides: &lt;a href="https://hexdocs.pm/phoenix/overview.html" rel="nofollow"&gt;https://hexdocs.pm/phoenix/overview.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Docs: &lt;a href="https://hexdocs.pm/phoenix" rel="nofollow"&gt;https://hexdocs.pm/phoenix&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Forum: &lt;a href="https://elixirforum.com/c/phoenix-forum" rel="nofollow"&gt;https://elixirforum.com/c/phoenix-forum&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Source: &lt;a href="https://github.com/phoenixframework/phoenix"&gt;https://github.com/phoenixframework/phoenix&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/santiagocardo80/car-workshop"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>elixir</category>
      <category>liveview</category>
      <category>phoenix</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Create a Phone Wallpaper with Visme</title>
      <author>Sarah Bartley</author>
      <pubDate>Tue, 27 Apr 2021 15:24:32 +0000</pubDate>
      <link>https://dev.to/theoriginalbpc/how-to-create-a-phone-wallpaper-with-visme-957</link>
      <guid>https://dev.to/theoriginalbpc/how-to-create-a-phone-wallpaper-with-visme-957</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published January 12, 2020 on BritishPandaChick Codes. I made tweaks to the original post so it would work for The Practical Dev.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite things to collect is phone wallpapers. Wallpapers are my favorite way to decorate my phone. I love changing the wallpapers for my home and lock screens each month. I often search for new wallpapers on Pinterest.&lt;/p&gt;

&lt;p&gt;Last year, I made updates on my Pinterest profile. During these updates, I made a new board just for all the wallpapers I had saved on my phone. I have a variety of wallpapers on my Pinterest board, but my favorite ones are simple with a positive message on them.&lt;/p&gt;

&lt;p&gt;I find a lot of these wallpapers from The Everygirl website. They release new wallpapers each month. I like to use these wallpapers as my lock screen. When I need a confidence boost or motivation, I just turn on my phone and look at my lock screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theeverygirl.com/category/culture/tech-backgrounds/"&gt;==&amp;gt; Click here to find tech backgrounds on The Everygirl!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the past couple of years, I've thought about making my own phone wallpapers. I've seen many creators and online businesses make their own wallpapers. This got me interested in learning how to create my own wallpapers. However, I hesitated about creating one since I wasn't sure how to make one and I didn't have a design in mind to make.&lt;/p&gt;

&lt;p&gt;When I was working on my post "How to Use Visme to Help Design Projects Stand Out", I was super excited to see that Visme had phone wallpapers as one of the project types. Visme has a big selection of templates creators can use to help them build their very own wallpapers. In today's post, I'm using Visme to create my very own phone wallpaper. I'll walk you through the process I took to create my wallpaper using one of the Visme templates.&lt;/p&gt;

&lt;h2&gt;What is Visme?&lt;/h2&gt;

&lt;p&gt;Visme is an online design tool. They are best known as a tool for creating presentations and infographics, but you can use their platform to create anything you can imagine. They have a huge selection of things you can create.&lt;/p&gt;

&lt;p&gt;Some of the items you can create on  Visme include flyers, scatter plots, and social media graphics. You can also use Visme to publish your survey results in a visual way. You can learn more about these content types on the Visme website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/graph-maker/"&gt;==&amp;gt; Click here to learn how to use Visme to make graphs and charts!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.visme.co/flyer-maker/"&gt;==&amp;gt; Click here to learn how to use Visme to make flyers!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.visme.co/scatter-plot-maker/"&gt;==&amp;gt; Click here to learn how to make scatter plots with Visme!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.visme.co/survey-results-report/"&gt;==&amp;gt; Click here to learn how to publish survey results with Visme!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite things about Visme is the templates. While creators still have the option of just creating whatever they imagine, Visme offers a large selection of pre-made templates to help creators get started. If you would like to learn more about Visme templates, there is a page dedicated just to the templates they offer for all different types of content types. You can see sample templates for all different content items.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/templates/"&gt;==&amp;gt; Click here to learn more about Visme's templates!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Want to learn more?&lt;/h3&gt;

&lt;p&gt;The best place to learn more about Visme is their website. Visme's website has lots of information about their tool and pricing. I definitely visiting the Visme blog on the website. Their blog has lots of great design advice and tips creators can use to make amazing visual content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/"&gt;==&amp;gt; Click here to learn more about Visme!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://visme.co/blog/"&gt;==&amp;gt; Click here to read the Visme blog!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last year, I published "How to Use Visme to Help You Design Projects Stand Out". This post is a guide on how creators can get started with Visme. You can see a tour of the Visme workspace and how to create a project. In this post, I use Visme to create the blog graphic for the post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theoriginalbpc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpElAxir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TALdGAPs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/61140/fa4551ac-4fc2-4ca1-884d-325b97b0277b.jpg" alt="theoriginalbpc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theoriginalbpc/how-to-use-visme-to-help-your-desing-projects-stand-out-2hj0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Use Visme to Help Your Desing Projects Stand Out&lt;/h2&gt;
      &lt;h3&gt;Sarah Bartley „Éª Apr 23 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#visme&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;Preparing the Workspace&lt;/h2&gt;

&lt;p&gt;First thing I'm going to do is create my project. In the Visme dashboard, I click the create button to make a new project. Next, I pick the project I want to create.&lt;/p&gt;

&lt;p&gt;Phone wallpapers are in web graphics. I click on Web Graphics icon in the black navigation menu. When the sub-menu of all the web graphics projects opens up, I click on the phone wallpaper image. This will open all the phone wallpaper templates Visme has available.&lt;/p&gt;

&lt;p&gt;I am going to use a template to create my phone wallpaper. The amount of templates you have available will depend on what kind of account you have. I am using a premium account so I've got access to all the wallpaper templates Visme has created.&lt;/p&gt;

&lt;p&gt;After looking at all the templates, I decided to go with the template that says "Don't let ANYONE dull your sparkle". I've circled this wallpaper below so you can see what the template looks like before I start to customize it. All I need to do now is double click the template I want and Visme will open the template in the workspace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cneRtaYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141600327_a170682ce6_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cneRtaYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141600327_a170682ce6_m.jpg" alt="Don't let ANYONE dull your Sparkle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I would like to change the template at any time, I can click the layout option on the left navigation bar in the workspace and pick a new template. Now that my template is in the workspace, I like to name my project so I can find it very easily on the Visme dashboard later. I'm naming this project blog-phone-wallpaper which lets me know what the project is about and who the project is for. Now I'm ready to transform this template into my very own wallpaper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgXLvJST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141602902_dbaba83d81_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgXLvJST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141602902_dbaba83d81_m.jpg" alt="Theme opened in Visme workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Updating the Text&lt;/h2&gt;

&lt;p&gt;I'm going to start by changing all the text. My plan is to keep this wallpaper very simple with just a little bit of text and graphics. First thing I'm going to do is switch out template text with the words loyal, brave, and true.&lt;/p&gt;

&lt;p&gt;I double-click on each text item to get a blinking cursor so I can highlight and delete the text in the template. Then I just need to write the text I want. If there is any text I'm not planning on using, I'll just delete it from the wallpaper.&lt;/p&gt;

&lt;p&gt;Once I've changed all the text, I can start playing around with the layout of each text item. I just click and drag them around the canvas to make sure everything is centered just right and in the right places. Next, it is time to start playing with the fonts and font size.&lt;/p&gt;

&lt;p&gt;Before I start playing with the fonts, I am going to add a new font I can use for my wallpaper. Visme allows designers to add fonts to use on projects. In this project, I'm using a free version of Mulan's font I found online.&lt;/p&gt;

&lt;p&gt;If you would like to use this font for any projects, you can download the file below. Just make sure after you download the file you extra the files so you can upload them to Visme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.dafont.com/mulan.font"&gt;==&amp;gt; Click here to get the Mulan font!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add my font to Visme, I go back to the dashboard and click My Brand on the black sidebar menu. Inside My Brand, I go to the bottom of the page to the My Fonts section and click the Upload the Fonts button. This will open a window to let me search my computer and add the font I want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---RvyXl5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143389365_4a1ff6f9a8_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---RvyXl5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143389365_4a1ff6f9a8_m.jpg" alt="My Brand in Visme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My font is in my downloads folder so I'll click my extracted font file and press ok. Visme will add my font to the My Fonts section next to the Upload the Fonts button. Once the font is added to My Brand, I can use the preview window to change the text to see how it works with the new fonts I've added.&lt;/p&gt;

&lt;p&gt;You will want to look at the radio buttons are at the bottom of the window. These buttons set the fonts for the header, subheader, and body of my projects. If I no longer want to use this font, I can click the trash can icon in the corner of the window to delete it.&lt;/p&gt;

&lt;p&gt;Once my font is uploaded to Visme, I can now change the font on all the text in my wallpaper. I head back to my project and can start updating all the text with my new font. When I double-click each text item, I just click on the font drop-down menu and will see my new font as one of the options. I just click the font name and my font of my text will change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3pF6K-XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143394395_a8c782c3e5_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3pF6K-XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51143394395_a8c782c3e5_m.jpg" alt="Font window in the Visme workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Changing the Graphics&lt;/h2&gt;

&lt;p&gt;The text is finished so it is time to add the graphics. I added two graphics to my wallpaper. One is a lotus flower while the other is a bow and arrow. I found my graphics in the Visme graphics collection.&lt;/p&gt;

&lt;p&gt;Visme has a big library of graphics designers can use for their projects. Many of these graphics designers have available will depend on what kind of account you have. My premium account gives me complete access of all the graphics in their libraries.&lt;/p&gt;

&lt;p&gt;In my project workspace, I click on the graphics I want to change. This will open the graphics icon from the left sidebar menu. I can also click on the icon and pick replace icon to access the menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGLoQYmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51142505013_5886fd77ca_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGLoQYmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51142505013_5886fd77ca_m.jpg" alt="The replace icon on the menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I search for the icon I am looking for. Visme will then show me icons that match what I'm looking for. I click the icon I want and Visme will change the icon on my canvas to the one I selected.&lt;/p&gt;

&lt;p&gt;Now that my graphics are on the screen, I can fix the size of each icon. I use the selectors in the corner of each graphic to change the size. I can also use the black box underneath the graphics submenu to change the width and height.&lt;/p&gt;

&lt;h2&gt;Adding Colors&lt;/h2&gt;

&lt;p&gt;It is time to start playing with color. This is where I'm going to change the colors for all the elements on my wallpaper. First thing I'm going to change the background.&lt;/p&gt;

&lt;p&gt;I click on the background. This opens a sub-menu at the top of the workspace. I remove the template's background by clicking the trash can icon remove background.&lt;/p&gt;

&lt;p&gt;The background Visme has on the wallpaper will be removed. The sub-menu will change to show only upload background or the color square. I'm going to pick use a background color for my wallpaper.&lt;/p&gt;

&lt;p&gt;In the background sub-menu, I click on the color square next to upload background. A window will open showing tabs for colors, presets, and more palettes. I am going to use a black background for my wallpaper.&lt;/p&gt;

&lt;p&gt;I click on the black color square in the colors tab and the background on my canvas will turn black. Now it is time to change the text color. I double click each of the text items to get a text sub-menu.&lt;/p&gt;

&lt;p&gt;I click on the text color icon on the menu (it is an A with a color line underneath it) to open the color menu. I am going to make my text red on my wallpaper so I just click the red color square. The text color will change to red on the canvas.&lt;/p&gt;

&lt;p&gt;Finally, it is time to start changing the color of the graphics. I click on each of the graphics to get the graphics submenu to open at the top of the workspace. Each graphic will have different color squares designers can customize.&lt;/p&gt;

&lt;p&gt;The arrow graphic only has one color square while the lotus graphic has three color squares. All I need to do for my graphics is click on each color square and pick the colors I want.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;My wallpaper is now finished. After playing around with the position of the text and graphics, I just need to download my wallpaper as a jpg and see how it looks on my phone. I just click the download button in the upper right corner of the workspace and pick what option I want to download.&lt;/p&gt; 

&lt;p&gt;It took me several versions, but below is the final version of my phone wallpaper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDppf2d5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141624147_a757c6a827_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDppf2d5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51141624147_a757c6a827_m.jpg" alt="Loyal Brave True iPhone wallpaper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What projects would you like to see me make with Visme? Are there any Visme features you'd like to see me talk about? Let me know what you'd like to see in the comments and I'll do my best to make it happen.&lt;/p&gt;

</description>
      <category>visme</category>
      <category>design</category>
    </item>
  </channel>
</rss>
