<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>All Pluralsight Courses FREE this weekend</title>
      <author>javinpaul</author>
      <pubDate>Sat, 20 Nov 2021 15:57:04 +0000</pubDate>
      <link>https://dev.to/javinpaul/all-pluralsight-courses-free-this-weekend-566</link>
      <guid>https://dev.to/javinpaul/all-pluralsight-courses-free-this-weekend-566</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs,  I have exciting news to share with you that Pluralsight is running their &lt;a href="https://pluralsight.pxf.io/c/1193463/1192599/7490"&gt;&lt;strong&gt;Free weekend&lt;/strong&gt;&lt;/a&gt; from &lt;strong&gt;19th to 21st November&lt;/strong&gt;, which means all of their 7500+ courses are free this weekend. This is an excellent opportunity to try and see the high-quality courses from Pluralsight. &lt;/p&gt;

&lt;p&gt;If you don't know, Pluralsight is one of the most popular online learning platforms for programmers and developers. Whether you want to learn Java, Python, JavaScript, Web Development, or Data Science, Pluralsight has courses for them. &lt;/p&gt;

&lt;p&gt;The best thing about Pluralsight is that its creators are reputed and authoritative. For example, there are many Java champions like Richard Warburton and Jose Paumard who have created excellent Java courses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-pluralsight-free-weekend"&gt;
  &lt;/a&gt;
  What is  Pluralsight Free Weekend?
&lt;/h3&gt;

&lt;p&gt;Pluralsight promotes free learning every quarter by unlocking their technology skills platform and making all 7,000+ expert-led video courses, 40+ interactive courses, and 20+ projects free for one weekend only.&lt;/p&gt;

&lt;p&gt;This is the 4th and last &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/1192599/7490"&gt;Pluralsight Free Weekend of 2021&lt;/a&gt;&lt;/strong&gt; and you should take advantage of this offer to get your work zone ready for some serious skill development/&lt;/p&gt;

&lt;p&gt;You can use this opportunity to learn for free on the Pluralsight skills platform free for three glorious days, starting Friday.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When is Pluralsight Free Weekend will end?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your free Pluralsight Skills access will expire Sunday, November 21, at 11:59 p.m. MT / Monday, November 22, at 6:59 a.m. GMT&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/1192599/7490"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Sp3I4qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-6FU2XDCNwwA/YZkTPxrh7LI/AAAAAAAAqOU/HG5KxNmZs_o5aRL_S5FOZOFehpGGU9lfgCLcBGAsYHQ/w511-h257/image.png" alt="Pluralsight Free Weekend - All Pluralsight Courses Free" width="511" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you need Credit Card for Pluralsight Free Weekend?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, you don't need a Credit card to join Pluralsight free Weekend. Unlike Pluralsight's &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpricing%2Ffree-trial"&gt;10-day-free trial&lt;/a&gt;&lt;/strong&gt; where you need a credit card, Pluralsight free weekend doesn't require a credit card but yes, you need to create a Pluralsight account to join and access all courses, projects, and assessments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do you get in Pluralsight Free Weekend?&lt;/strong&gt;&lt;br&gt;
Here are things which  you will get access to for free during Pluralsight free weekend&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  free access to their 7500+ courses&lt;/li&gt;
&lt;li&gt;  free access to their 20+ projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Which Pluralsight Courses should I join on Pluralsight Free Weekend?&lt;/strong&gt;&lt;br&gt;
Well, you can join any Pluralsight courses as everything is free but here are my recommended Pluralsight courses for Java developers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fjava-fundamentals-language"&gt;Java Fundamentals: The Java Language&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fjava-fundamentals-object-oriented-design"&gt;Java Fundamentals: Object-oriented Design&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fjava-web-fundamentals"&gt;Java Web Fundamentals By Kevin Jones&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fspring-framework-spring-mvc-fundamentals"&gt;Spring Framework: Spring MVC Fundamentals&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fspring-data-jpa-getting-started"&gt;Spring Framework: Spring Data JPA&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What Can I learn on Pluralsight Free Weekend?&lt;/strong&gt;&lt;br&gt;
You can learn any programming language or tech skills on Pluralsight free Weekend like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  cloud computing&lt;/li&gt;
&lt;li&gt;  Java development&lt;/li&gt;
&lt;li&gt;  Spring framework&lt;/li&gt;
&lt;li&gt;  Python programming&lt;/li&gt;
&lt;li&gt;  JavaScript and web development&lt;/li&gt;
&lt;li&gt;  Data Science and Machine learning etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all about &lt;strong&gt;Pluralsight's free weekend,&lt;/strong&gt; I highly recommend you to take advantage of this and check out the awesome courses, practice tests, assessments, and projects Pluralsight has. &lt;/p&gt;

&lt;p&gt;This is also the last Pluralsight free weekend this year and you need to wait for another year for this opportunity. So what are you waiting for, join Pluralsight free weekend now before it expires?&lt;/p&gt;

&lt;p&gt;All the best with your learning hackathon!!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>development</category>
      <category>javascript</category>
      <category>java</category>
    </item>
    <item>
      <title>PLEASE STOP THIS!!!</title>
      <author>Muneeb Hussain Modi</author>
      <pubDate>Sat, 20 Nov 2021 15:47:35 +0000</pubDate>
      <link>https://dev.to/muneebhdeveloper/please-stop-this-18l6</link>
      <guid>https://dev.to/muneebhdeveloper/please-stop-this-18l6</guid>
      <description>&lt;p&gt;PLEASE STOP THIS!!!&lt;/p&gt;

&lt;p&gt;Node.js is not a Framework or Programming Language but a runtime environment built on top of Chrome's V8 engine to execute JavaScript outside of the browser, SIMPLE!&lt;/p&gt;

&lt;p&gt;I often read articles where the author mentions Node.js as a JavaScript Framework and even compares it with PHP Frameworks, Ruby Frameworks, C# Frameworks, and also with JavaScript frontend frameworks and libraries like Angular, React, and jQuery.&lt;/p&gt;

&lt;p&gt;Kindly stop this and don't misguide the people as this is really confusing for beginners who are trying to understand what Node.js is under the hood as Node.js has a lot to offer than just a Web Framework or JavaScript library.&lt;/p&gt;

&lt;p&gt;Node.js !== JavaScript in the Browser&lt;br&gt;
Node.js !== JavaScript Framework&lt;br&gt;
Node.js !== JavaScript Library&lt;br&gt;
Node.js !== Programming Language&lt;/p&gt;

&lt;p&gt;Node.js === Runtime Environment&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 good posts in "Living with Kubernetes" </title>
      <author>Walter Lee</author>
      <pubDate>Sat, 20 Nov 2021 15:28:21 +0000</pubDate>
      <link>https://dev.to/aws-builders/5-good-posts-in-living-with-kubernetes-30mi</link>
      <guid>https://dev.to/aws-builders/5-good-posts-in-living-with-kubernetes-30mi</guid>
      <description>&lt;p&gt;Thanks a lot to AWS Justin Garrison for this good series of "Living with Kubernetes" ! Recommend read and understand more in kubernetes API versioning, Upgrade strategies, Multi-cluster management (suggest to read new EKS connector &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.html"&gt;Link&lt;/a&gt; too), how to debug cluster and workloads/pods ! &lt;/p&gt;

&lt;p&gt;5 good posts below: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;API Lifecycles and You
&lt;a href="https://thenewstack.io/living-with-kubernetes-api-lifecycles-and-you/"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Cluster Upgrades
&lt;a href="https://thenewstack.io/living-with-kubernetes-cluster-upgrades/"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Multicluster Management
&lt;a href="https://thenewstack.io/living-with-kubernetes-multicluster-management/"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Debug Clusters in 8 Commands
&lt;a href="https://thenewstack.io/living-with-kubernetes-debug-clusters-in-8-commands/"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;12 Commands to Debug Your Workloads
&lt;a href="https://thenewstack.io/living-with-kubernetes-12-commands-to-debug-your-workloads/"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e.g. part 1:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M07XteV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if9s2t2itr8xp07corvp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M07XteV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if9s2t2itr8xp07corvp.jpg" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;part 2:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--42Ldxddo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f73chmsfg32kmhxync7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42Ldxddo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f73chmsfg32kmhxync7.jpg" alt="Image description" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;part 4:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EAmVYEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7919bxorus8eo5tk7vgh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EAmVYEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7919bxorus8eo5tk7vgh.jpg" alt="Image description" width="880" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;part 5:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vxRTYFpZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wejvjcsk2p9j7hba22m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vxRTYFpZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wejvjcsk2p9j7hba22m.jpg" alt="Image description" width="880" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to Create a Notification/Toast using React and Tailwind</title>
      <author>Francisco Mendes</author>
      <pubDate>Sat, 20 Nov 2021 14:58:29 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/how-to-create-a-notificationtoast-using-react-and-tailwind-545o</link>
      <guid>https://dev.to/franciscomendes10866/how-to-create-a-notificationtoast-using-react-and-tailwind-545o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;One of the most important components to communicate something more effectively with the user is notifications. Obviously there are several types of notifications, some can be alerts others can be to communicate a certain operation. And their anatomy differs a lot, for example alerts, toasts and snackbars usually contain your information in a single line, with or without icons.&lt;/p&gt;

&lt;p&gt;But all genres have some aspects in common, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;positioning&lt;/strong&gt; - can be placed in different positions on the screen;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animations&lt;/strong&gt; - taking their placement into account, they all end up following exactly the same patterns;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;actions&lt;/strong&gt; - they all have only one action, whether it's close, dismiss or cancel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the things we have to keep in mind is that notifications tend to be shown above all platform content, so that it is easily noticeable to the user. However, they cannot block other action elements, such as buttons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todays-example"&gt;
  &lt;/a&gt;
  Today's example
&lt;/h2&gt;

&lt;p&gt;In today's example we will create a simple notification using two of my favorite libraries. For component styling we will use Tailwind and to help us create our notification we will use the &lt;a href="https://react-hot-toast.com/"&gt;React Hot Toast&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Our component will consist of four elements, the icon, the title, the text and the action (dismiss). While all the styling and animations will be done with Tailwind, all the hard work of creating a notification will be done entirely by React Hot Toast.&lt;/p&gt;

&lt;p&gt;From the code in this article I hope that you will be able to create several different notifications/toasts, but that you will have a similar result to this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WU8fu02T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1637420291/Kapture_2021-11-20_at_14.57.04_jzyoaa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WU8fu02T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1637420291/Kapture_2021-11-20_at_14.57.04_jzyoaa.gif" alt="final result" width="785" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;First let's install the following dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;classnames react-icons react-hot-toast
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our &lt;code&gt;App.jsx&lt;/code&gt; we will import our dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classNames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Toaster&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-hot-toast&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MdOutlineClose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HiLightningBolt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's create the styles that will be used in our &lt;code&gt;App.jsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* @src/App.module.css */&lt;/span&gt;

&lt;span class="nc"&gt;.notificationWrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;flex-row&lt;/span&gt; &lt;span class="err"&gt;items-center&lt;/span&gt; &lt;span class="err"&gt;justify-between&lt;/span&gt; &lt;span class="err"&gt;w-96&lt;/span&gt; &lt;span class="err"&gt;bg-gray-900&lt;/span&gt; &lt;span class="err"&gt;px-4&lt;/span&gt; &lt;span class="err"&gt;py-6&lt;/span&gt; &lt;span class="err"&gt;text-white&lt;/span&gt; &lt;span class="err"&gt;shadow-2xl&lt;/span&gt; &lt;span class="py"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;shadow-none&lt;/span&gt; &lt;span class="n"&gt;transform-gpu&lt;/span&gt; &lt;span class="n"&gt;translate-y-0&lt;/span&gt; &lt;span class="n"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;translate-y-1&lt;/span&gt; &lt;span class="n"&gt;rounded-xl&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt; &lt;span class="n"&gt;transition-all&lt;/span&gt; &lt;span class="n"&gt;duration-500&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.iconWrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-xl;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contentWrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;flex-col&lt;/span&gt; &lt;span class="err"&gt;items-start&lt;/span&gt; &lt;span class="err"&gt;justify-center&lt;/span&gt; &lt;span class="err"&gt;ml-4&lt;/span&gt; &lt;span class="err"&gt;cursor-default;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contentWrapper&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-base&lt;/span&gt; &lt;span class="err"&gt;text-gray-200&lt;/span&gt; &lt;span class="err"&gt;font-semibold&lt;/span&gt; &lt;span class="err"&gt;leading-none&lt;/span&gt; &lt;span class="err"&gt;tracking-wider;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contentWrapper&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-sm&lt;/span&gt; &lt;span class="err"&gt;text-gray-400&lt;/span&gt; &lt;span class="err"&gt;mt-2&lt;/span&gt; &lt;span class="err"&gt;leading-relaxed&lt;/span&gt; &lt;span class="err"&gt;tracking-wider;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.closeIcon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;absolute&lt;/span&gt; &lt;span class="err"&gt;top-2&lt;/span&gt; &lt;span class="err"&gt;right-2&lt;/span&gt; &lt;span class="err"&gt;cursor-pointer&lt;/span&gt; &lt;span class="err"&gt;text-lg;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can continue to work on our &lt;code&gt;App.jsx&lt;/code&gt;. First we'll import the styles we just created and then we'll start working on our notification component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classNames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Toaster&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-hot-toast&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MdOutlineClose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HiLightningBolt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classNames&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
          &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notificationWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-top-96&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;])}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iconWrapper&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HiLightningBolt&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentWrapper&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;improved&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;VESSEL&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeIcon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MdOutlineClose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unique-notification&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All that's left is to create our App component, which will only contain a button to show the notification and the Toaster component (responsible for rendering all toasts).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classNames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Toaster&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-hot-toast&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MdOutlineClose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HiLightningBolt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classNames&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
          &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notificationWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-top-96&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;])}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iconWrapper&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HiLightningBolt&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentWrapper&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;improved&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;VESSEL&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeIcon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dismiss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MdOutlineClose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unique-notification&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Notify&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toaster&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may have noticed in our notification component, we assign an id so that only one toast is shown in the gift, if you remove it you will notice that the behavior will change. Starting to be rendered several notifications in the dom.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As always, I hope you found it interesting. If you noticed any errors in this article, please mention them in the comments. 🧑🏻‍💻&lt;/p&gt;

&lt;p&gt;Hope you have a great day! 😈&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>One Environment per Project: Manage Directory-Scoped envs with direnv in POSIX Systems</title>
      <author>Otavio Monteagudo</author>
      <pubDate>Sat, 20 Nov 2021 14:41:58 +0000</pubDate>
      <link>https://dev.to/otamm/one-environment-per-project-manage-directory-scoped-envs-with-direnv-in-posix-systems-4n3c</link>
      <guid>https://dev.to/otamm/one-environment-per-project-manage-directory-scoped-envs-with-direnv-in-posix-systems-4n3c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;One of the more common practices in software projects is to keep certain information separated but accessible from the codebase which uses it. This is usually done with secrets such as passwords or private keys, but is also commonly done with user or context-specific info pieces. However, management of environment variables can be confusing. The solutions to deal with it are many, and there are even built-in ones such as &lt;a href="https://www.baeldung.com/linux/bashrc-vs-bash-profile-vs-profile"&gt;bash_profile&lt;/a&gt;. &lt;br&gt;
One solution I've discovered recently and found particularly convenient is &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt;, a shell extension which enables the definition of a list of environment variables scoped by a directory. After installing &amp;amp; hooking the extension, direnv will execute every time you change directories, looking for an &lt;code&gt;.envrc&lt;/code&gt; file in the same or in a superior directory tree level. It will then load the defined variables to the current environment, and unload them if it ceases to detect the same &lt;code&gt;.envrc&lt;/code&gt;.&lt;br&gt;
Also note that direnv will load the first detected &lt;code&gt;.direnv&lt;/code&gt; file, which means that &lt;em&gt;the environment will **not&lt;/em&gt;* inherit values from a &lt;code&gt;.direnv&lt;/code&gt; in a parent directory*.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Here's the &lt;a href="https://dev.tolist%20of%20supported%20systems"&gt;https://direnv.net/docs/installation.html&lt;/a&gt;, but it is very likely your UNIX-based system's main open source package manager has it available. Suppose we are on Debian, we can install direnv by running the standard external package install command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;direnv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;After installation, we must hook direnv to our shell. Supposing we are using bash, we can accomplish this by appending this line to the end of our shell startup config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'eval "$(direnv hook bash)"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Almost the same for ZShell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'eval "$(direnv hook zsh)"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Direnv also supports FISH, TCSH &amp;amp; Elvish. &lt;a href="https://direnv.net/docs/hook.html"&gt;Here are the hooking instructions for each supported shell&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-direnv"&gt;
  &lt;/a&gt;
  Using direnv
&lt;/h2&gt;

&lt;p&gt;Now we must create an &lt;code&gt;.envrc&lt;/code&gt; file for the directory we would like to scope the environment variables to.&lt;br&gt;
Say we create it for the directory &lt;code&gt;~/project&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo export &lt;/span&gt;&lt;span class="nv"&gt;FOO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'I love Linux!'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/project/.envrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of calling mission accomplished, you will instead receive a warning that the current &lt;code&gt;.envrc&lt;/code&gt; was blocked. Direnv will block loading &lt;code&gt;.envrc&lt;/code&gt; every time it detects changes which were not explicitly allowed. Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;direnv allow ~/project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and voila!, you now have a directory-scoped environment.&lt;/p&gt;

&lt;p&gt;Remember when I said that 'direnv will block loading &lt;code&gt;.envrc&lt;/code&gt; every time it detects changes which were not explicitly allowed'? This also includes previously defined variables. So when you&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo export &lt;/span&gt;&lt;span class="nv"&gt;BAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'It is actually called GNU/Linux!'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/project/.envrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will have to run &lt;code&gt;direnv allow ~/project&lt;/code&gt; again. Kinda boring, but biased towards safety.&lt;/p&gt;

&lt;p&gt;Every time an &lt;code&gt;.envrc&lt;/code&gt; is loaded, direnv will output a message with the file path and also the names of the variables loaded, so you don't need to worry about forgetting your setup. It will also tell you whenever an environment was unloaded.&lt;/p&gt;

&lt;p&gt;That's it, pretty simple and I hope you find it as convenient as I did. &lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>unix</category>
      <category>direnv</category>
    </item>
    <item>
      <title>LEMP Stack &amp; Certbot</title>
      <author>skino</author>
      <pubDate>Sat, 20 Nov 2021 14:11:53 +0000</pubDate>
      <link>https://dev.to/skino2020/lemp-stack-certbot-n8k</link>
      <guid>https://dev.to/skino2020/lemp-stack-certbot-n8k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-bit-of-background"&gt;
  &lt;/a&gt;
  A bit of background
&lt;/h2&gt;

&lt;p&gt;Last month i was helping out a friend with some server logs on a &lt;strong&gt;Hetzner Cloud&lt;/strong&gt; Package and was quite impressed with the Hetzner server controls etc... then my buddy told me the price and i was blown away... for cheaper than i was paying he was getting more bang for his buck! so i made the decision to switch servers this month.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nginx-or-apache"&gt;
  &lt;/a&gt;
  Nginx or Apache?
&lt;/h3&gt;

&lt;p&gt;Since i started Web Development i have always used Apache as it was the "go to install" for PHP developers and LAMP was the first i heard to go with.... so stuck with it. On twitter i kept hearing Nginx was a good one to go with, use that... its worth it etc better performance etc.... i don't know how much of it is true but i went with Nginx this time round and so far I'm REALLY liking it. Although Config Syntax is different I'm not finding it difficult to apply the logic from Apache2 stuff to Nginx.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Lets get Started!
&lt;/h3&gt;

&lt;p&gt;I'm going to go through the process i followed in order to install LEMP... i want go through in detail what to do with the commands once they have run but to be honest, the setup is simple enough.&lt;/p&gt;

&lt;p&gt;If your just starting out and need something to help you with the initial Server Setup, Please check out &lt;a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04"&gt;Digital Ocean - Initial Server Setup with Ubuntu 20.04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is a great resource for initial setup !&lt;/p&gt;

&lt;p&gt;LEMP Stack, Basically means &lt;strong&gt;L&lt;/strong&gt;inux, &lt;strong&gt;E&lt;/strong&gt;ngineX, &lt;strong&gt;M&lt;/strong&gt;ySQL &amp;amp; &lt;strong&gt;P&lt;/strong&gt;HP... that's really it. a few things you'll need an understanding of, Basic Linux Command Line tools and how to navigate your Ubuntu installation without issue.&lt;/p&gt;

&lt;p&gt;First things first lets check if the ufw is enabled and if not enable it with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ufw status
sudo ufw enable
sudo ufw status﻿

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UGWeGl3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/qJVzuBBOqpQ2FJIstj9zCPjoT6mZYBrOFHQSf3zd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UGWeGl3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/qJVzuBBOqpQ2FJIstj9zCPjoT6mZYBrOFHQSf3zd.jpg" alt="" width="552" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's the firewall essentially set up.... dead easy right!&lt;/p&gt;

&lt;p&gt;As with any install of software on Ubuntu Server we start with and update to apt followed by the actual software we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update
sudo apt install nginx

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;You will need to answer Y to any prompts you get from the install.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-nginx-through-the-firewall%EF%BB%BF"&gt;
  &lt;/a&gt;
  Enable Nginx through the firewall﻿
&lt;/h3&gt;

&lt;p&gt;The ufw is a great little tool and is quite literally an "Uncomplicated FireWall" which you can enable and disable rules with text alone... Cool right!&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;sudo ufw app&lt;/code&gt;&lt;code&gt;list&lt;/code&gt; it will display a list of applications that can be enabled and disabled easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDpv6L9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/BpRlH1lCsGTtfClYW71cabs38Jjl6CMddJ2HJFyI.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDpv6L9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/BpRlH1lCsGTtfClYW71cabs38Jjl6CMddJ2HJFyI.jpg" alt="" width="399" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable a setting is a piece of cake! simply type the following to enable Nginx (with HTTPS Support)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ufw allow 'Nginx Full'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run &lt;code&gt;sudo ufw status&lt;/code&gt; you will get something like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PoCVhJqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/dCbsiOGZHuE9R98Ui73ZxfLachFzttlFHHRPc3KK.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PoCVhJqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/dCbsiOGZHuE9R98Ui73ZxfLachFzttlFHHRPc3KK.jpg" alt="" width="633" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in my screenshot above i was a bit lazy and haven't disabled the HTTP yet which isn't really required with Nginx Full enabled.&lt;/p&gt;

&lt;p&gt;if you go to http://&lt;em&gt;YOUR_SERVER_IP_HERE&lt;/em&gt; in a browser you will now be faced with the below screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bL7m1_p0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/F7xAITFZjvCnnro7u9tN34uooyEq6rTsLhNKVJhQ.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bL7m1_p0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/F7xAITFZjvCnnro7u9tN34uooyEq6rTsLhNKVJhQ.jpg" alt="" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and that's it... Nginx is now ready to serve up static sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mysql-installation"&gt;
  &lt;/a&gt;
  MySQL Installation
&lt;/h3&gt;

&lt;p&gt;If your coming to this tutorial now you will need to &lt;code&gt;sudo apt&lt;/code&gt;&lt;code&gt;update&lt;/code&gt; to get your packages ready, if your following on from before simply run the following to get MySQL server installed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install mysql-server

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select &lt;code&gt;Y&lt;/code&gt; to the next few prompts.&lt;/p&gt;

&lt;p&gt;Now the next bit has caused me a bit of confusion for a while as it asks if you want to enable the "VALIDATE PASSWORD PLUGIN"... i dont know why but every time i selected no to this... my MySQL installation would complete and i wouldn't be able to login.... dont know why, never got to the bottom of it... so i just enable it with low length security for Dev environment and high level for production. Type the following into your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql_secure_installation

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will launch the SQL Installation. I've screenshot the first bit for clarity the rest you can remove or not as needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGmX4j-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/vfMYvxWifMNbsQtngPsLimKYyt6BidNQSparCFrm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGmX4j-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/vfMYvxWifMNbsQtngPsLimKYyt6BidNQSparCFrm.jpg" alt="" width="806" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the next few questions i tend to answer Y to them all. as i don't want anonymous users, remote root logins or a test DB and finally we need to reload the privileges table. Now your can login to MySQL with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql -u root 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And thats it for MySQL. You can now create new users and tables etc for use, or if you're feeling really spicy install something like phpmyadmin or create a remote user that can hit the server with MySQL Workbench.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-php"&gt;
  &lt;/a&gt;
  Install PHP
&lt;/h3&gt;

&lt;p&gt;Nginx is slightly different to Apache, which comes with PHP support out of the box, for Nginx there is a few little bits we need to install or we aren't going anywhere. &lt;code&gt;PHP-FPM&lt;/code&gt;and &lt;code&gt;PHP-MYSQL&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install php-fpm php-mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Accept any prompts that come up, and that's it for your LEMP environment, You can find NGNIX configs online which you need to put into your &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt; i'm going to write a post on the configs themselves at some point as its a big subject.&lt;/p&gt;

&lt;p&gt;for the examples im going to use a mikej directory as the example for the next bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#certbot"&gt;
  &lt;/a&gt;
  Certbot
&lt;/h3&gt;

&lt;p&gt;Certbot is great as it works for both Nginx and Apache, how i hadnt heard of it before this week il never know. simply head over to &lt;a href="https://certbot.eff.org/lets-encrypt/"&gt;Cerbot Installation page&lt;/a&gt; and pick the OS you're using for installation instructions. in my instance its Ubuntu 20.04. then run the commands from the guide. Mine were:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install --classic certbot
﻿
sudo ln -s /snap/bin/certbot /usr/bin/certbot

sudo certbot --nginx

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the final command will pop up with some questions like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hk3b9_OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/6xm8UyhvuH0YwfnXEFq71CDDXcuTYZk4oSCoAnRP.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hk3b9_OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/6xm8UyhvuH0YwfnXEFq71CDDXcuTYZk4oSCoAnRP.jpg" alt="" width="822" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so in the prompt i'm going to type &lt;code&gt;5,6&lt;/code&gt; for &lt;strong&gt;mikej.rocks&lt;/strong&gt; and &lt;strong&gt;&lt;a href="http://www.mikej.rocks"&gt;www.mikej.rocks&lt;/a&gt;&lt;/strong&gt; and hit enter. if your doing more than one site it make take a short while to finish but what its essentially doing is... calling for a new cert from LetsEncrypt and editing your Nginx config file... yep that's right you don't have to do a thing! When it finishes you should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Spx4R3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/FgOzNX4fIfNvNoGxIUeLFjZqEhMRYLEavQkWJw7M.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Spx4R3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/FgOzNX4fIfNvNoGxIUeLFjZqEhMRYLEavQkWJw7M.jpg" alt="" width="822" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it.... if you visit your site now, it will have an SSL Certificate installed and just work!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final word!
&lt;/h3&gt;

&lt;p&gt;If you found this tutorial helpful please consider following me on twitter &lt;a href="https://twitter.com/skino2020"&gt;@skino2020&lt;/a&gt; for more updates on my blog. And if you really found it helpful, why not buy me a Coffee, Beer or Pizza &lt;a href="https://www.buymeacoffee.com/skino2020"&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Mike&lt;br&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;Raspada-Blog&lt;/h2&gt;  I post on my blog primarily and share the posts via API, please check out &lt;a href="//www.raspada-blog.co.uk"&gt;Raspada-Blog&lt;/a&gt; for more posts and information. If you have any questions please message me on twitter or use my website contact form.

</description>
      <category>server</category>
      <category>nginx</category>
      <category>certbot</category>
    </item>
    <item>
      <title>Python FastAPI crash course</title>
      <author>Eric The Coder</author>
      <pubDate>Sat, 20 Nov 2021 14:11:24 +0000</pubDate>
      <link>https://dev.to/ericchapman/python-fastapi-crash-course-533e</link>
      <guid>https://dev.to/ericchapman/python-fastapi-crash-course-533e</guid>
      <description>&lt;p&gt;Here is a crash course (series of articles) that will allow you to create an API in Python with FastAPI.&lt;/p&gt;

&lt;p&gt;I will publish a new article about every two days and little by little you will learn everything there is to know about FastAPI&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-fastapi"&gt;
  &lt;/a&gt;
  What is FastAPI?
&lt;/h3&gt;

&lt;p&gt;FastAPI is a Python web framework that allows you to quickly build high performance APIs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-fastapi"&gt;
  &lt;/a&gt;
  Why FastAPI?
&lt;/h3&gt;

&lt;p&gt;Before FastAPI there were already several ways to create APIs with Python. Especially with Django Rest Framework and Flask. So why FastAPI?&lt;/p&gt;

&lt;p&gt;Here is the list of the main advantages of FastAPI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very fast: The performance is superior to Django and Flask and is even comparable to the performance of NodeJS and GO&lt;/li&gt;
&lt;li&gt;Fast to code: Build APIs 2-3 times faster&lt;/li&gt;
&lt;li&gt;Easy: Easy to use and learn&lt;/li&gt;
&lt;li&gt;Type annotation (Type hints): Facilitates validation, allows auto-completion and facilitates debugging&lt;/li&gt;
&lt;li&gt;Automatic documentation: FastAPI generates documentation in Swagger UI and ReDoc format automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;To start coding with FastAPI you must have a basic programming knowledge with the Python language.&lt;/p&gt;

&lt;p&gt;You should also make sure that you have an updated version of Python (version 3.6 or +)&lt;/p&gt;

&lt;p&gt;From the terminal type this command to find out the version of Python installed on your machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;

or

&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't have Python or a version earlier than 3.6, you can get the latest version of Python from the official website: &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-editor"&gt;
  &lt;/a&gt;
  Code editor
&lt;/h3&gt;

&lt;p&gt;For this tutorial, I'll be using Visual Studio Code: &lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be easier for you to follow me with this editor but it is really not a requirement.&lt;/p&gt;

&lt;p&gt;Finally, if you are using vscode, make sure the Python extension is installed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creation-of-the-virtual-environment"&gt;
  &lt;/a&gt;
  Creation of the virtual environment
&lt;/h2&gt;

&lt;p&gt;When working on a Python project, we have to work with several libraries like FastAPI, Flask or Django, etc.&lt;/p&gt;

&lt;p&gt;According to the date of creation of the project. It is possible for example that the FastAPI library is not exactly at the same version number in the other projects.&lt;/p&gt;

&lt;p&gt;How to allow each project to have its own version of Python and its own versions of libraries?&lt;/p&gt;

&lt;p&gt;We will be using virtual environments.&lt;/p&gt;

&lt;p&gt;A virtual environment allows you to install Python and python libraries in a folder / project without this affecting the other folders / projects.&lt;/p&gt;

&lt;p&gt;Python provides you with a system that allows you to create virtual environments.&lt;/p&gt;

&lt;p&gt;Once the environment has been created and activated, all the libraries installed can be used only in the environment to which they belong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-virtual-environment"&gt;
  &lt;/a&gt;
  How to create a virtual environment
&lt;/h3&gt;

&lt;p&gt;Normally we place a virtual environment in the project folder.&lt;/p&gt;

&lt;p&gt;Create and access a folder for our project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this folder you can now create the virtual environment that will be attached to the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we launch python3 with the module option venv. env is the name we give to our virtual environment.&lt;/p&gt;

&lt;p&gt;Once the virtual environment has been created, you can activate it:&lt;/p&gt;

&lt;p&gt;MacOS / Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it that's all ! You now have a Python virtual environment created for your project. Normally the terminal will tell you that your environment is activated by displaying its name.&lt;/p&gt;

&lt;p&gt;Note that to deactivate the virtual environment you must run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the rest of the tutorial, make sure the virtual environment is enabled before running any commands in the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-fastapi"&gt;
  &lt;/a&gt;
  Installing FastAPI
&lt;/h2&gt;

&lt;p&gt;From the fastapi-tuto folder and with the virtual environment enabled, run the following installation command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi[all]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will install FastAPI and also install some optional dependencies like local server (uvicorn) to test FastAPi on your machine.&lt;/p&gt;

&lt;p&gt;Once these libraries are installed, you can launch your open code editor on the current folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will launch Visual Studio Code open on the current folder&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reminder-what-is-an-api"&gt;
  &lt;/a&gt;
  Reminder: What is an API?
&lt;/h2&gt;

&lt;p&gt;API stands for Application Programming Interface.&lt;/p&gt;

&lt;p&gt;In short, it is a program that can be used by another program, in order to allow applications to communicate with each other.&lt;/p&gt;

&lt;p&gt;An API allows the server and the client to communicate with each other and to exchange information and data. The data exchanged is in structured text format (JSON).&lt;/p&gt;

&lt;p&gt;The exchanges are made in the form of requests and responses:!&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" alt="Alt Text" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, the browser (client / frontend application) makes a specific request to a server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can the server know how to handle this request? He can't. He won't know what to do with the request.&lt;/p&gt;

&lt;p&gt;That's why we need to create an API. This is a server application that will determine how to respond to various requests for a specific resource.&lt;/p&gt;

&lt;p&gt;Let's go back to the last example query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The customer wishes to obtain the information of the product no 3814&lt;/p&gt;

&lt;p&gt;To respond to this request, we could create an API that would search for the 3814 product in a database and return this response to the customer in structured text (JSON) format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3814&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"qty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;799&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#different-type-of-requests"&gt;
  &lt;/a&gt;
  Different type of requests
&lt;/h3&gt;

&lt;p&gt;Note that all requests to servers are made through HTTP actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-the-most-commonly-used-http-actions"&gt;
  &lt;/a&gt;
  Here are the most commonly used HTTP actions
&lt;/h3&gt;

&lt;p&gt;GET: GET requests are only used to retrieve data.&lt;/p&gt;

&lt;p&gt;POST: POST requests are used to send data.&lt;/p&gt;

&lt;p&gt;PUT: PUT requests are used to modify data.&lt;/p&gt;

&lt;p&gt;PATCH: PATCH requests are used to partially modify data.&lt;/p&gt;

&lt;p&gt;DELETE: DELETE requests are used to delete the specified data.&lt;/p&gt;

&lt;p&gt;When we are dealing with a resource. For example Product. Each action on the Product resource has its own route&lt;/p&gt;

&lt;p&gt;Here is an example route for each of the HTTP actions:&lt;/p&gt;

&lt;p&gt;Create : POST www.example.com/&lt;/p&gt;

&lt;p&gt;Read : GET www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Update : PUT www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Destroy : DELETE www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;The way to name these routes is no accident, it is in fact a convention that is followed by most developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-first-api"&gt;
  &lt;/a&gt;
  Your first API
&lt;/h2&gt;

&lt;p&gt;The theory is over, now let's see how to create your first API&lt;/p&gt;

&lt;p&gt;From the code editor create a file named: first-api.py&lt;/p&gt;

&lt;p&gt;Enter this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app = FastAPI() allows to create an instance of FastAPI&lt;/p&gt;

&lt;p&gt;The @app.get() decorator allows us to specify the url path and the HTTP (GET) action of our api.&lt;/p&gt;

&lt;p&gt;The index() function will be executed each time a user visits the URL path specified by the @app.get() decorator, in this case the "/home" path&lt;/p&gt;

&lt;p&gt;Note that the name of the "index()" function could be any name. It is according to your preference.&lt;/p&gt;

&lt;p&gt;To start the server and test your first API, enter in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uvicorn is the local server. It takes as parameter the name of the file: the name of the FastAPI instance&lt;/p&gt;

&lt;p&gt;The —reload option will restart the server each time the source file is modified.&lt;/p&gt;

&lt;p&gt;So you can then visit: &lt;a href="http://127.0.0.1:8000/home"&gt;http://127.0.0.1:8000/home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following response will be displayed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well done! You have just created your first API&lt;/p&gt;

&lt;p&gt;Last point. The path you created points to "&lt;a href="http://127.0.0.1:8000/home"&gt;http://127.0.0.1:8000/home&lt;/a&gt;". How to make it point to the "root path" aka "&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;"&lt;/p&gt;

&lt;p&gt;You must only use a back slash "/"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;@app.get(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The back slash used alone means "root path"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>python</category>
      <category>fastapi</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Ditching Linux for WSL 2</title>
      <author>Dev Sharma</author>
      <pubDate>Sat, 20 Nov 2021 14:10:28 +0000</pubDate>
      <link>https://dev.to/cryptus_neoxys/ditching-linux-for-wsl-2-2bl6</link>
      <guid>https://dev.to/cryptus_neoxys/ditching-linux-for-wsl-2-2bl6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#wsl-2-microsofts-love-for-linux"&gt;
  &lt;/a&gt;
  WSL 2 == Microsoft's love for Linux
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#development-on-linux"&gt;
  &lt;/a&gt;
  Development on Linux
&lt;/h2&gt;

&lt;p&gt;I switched to Linux last year and shifted my development completely to the Linux ecosystem. Tried out arch, Manjaro, Pop OS!, Ubuntu, MX Linux. Development is really productive with a Linux environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gaming-on-windows"&gt;
  &lt;/a&gt;
  Gaming on Windows
&lt;/h2&gt;

&lt;p&gt;A few months back I upgraded my &lt;em&gt;potato&lt;/em&gt; to a gaming laptop which of course came with Windows pre-installed, I also started gaming. I ended up doing dual boot to run Ubuntu as my daily driver for development, but this eventually meant a redundant set of tools on Windows as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#windows-linux"&gt;
  &lt;/a&gt;
  Windows 💖 Linux
&lt;/h2&gt;

&lt;p&gt;Windows released the Windows Subsystem for Linux 2 in May 2019. WSL 1 was a compatibility layer for running Linux binary executables on Windows. WSL2 built on top is built on the core technology of Hyper-V to provide better support and improved performance running a Linux kernel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-wsl-2-instead-of-native-windows"&gt;
  &lt;/a&gt;
  Why WSL 2 instead of native Windows
&lt;/h2&gt;

&lt;p&gt;Most production environments run on Linux and with WSL 2 environment the tooling available on development become the same as in production. Also WSL 2 is super easy to set up and get started with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-wsl-2-on-windows"&gt;
  &lt;/a&gt;
  Set up WSL 2 on Windows
&lt;/h2&gt;

&lt;p&gt;Open an elevated Powershell (Run as administrator) from the start menu and use the following commands to get WSL 2 up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLNYybEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997262601/15-pKC9Sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLNYybEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997262601/15-pKC9Sg.png" alt="image.png" width="833" height="565"&gt;&lt;/a&gt;&lt;br&gt;
(&lt;em&gt;Note that: WSL 2 is only available in Windows 10, Version 1903, Build 18362 or higher&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Step 1 - Enable the Windows Subsystem for Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2 - Enable the Virtual Machine feature&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pSrpgzxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997360284/rpTUjA7tp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pSrpgzxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997360284/rpTUjA7tp.png" alt="image.png" width="880" height="196"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;You need to restart your PC after this step.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Step 3 - Download &amp;amp; install the Linux kernel update package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTyHmVBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997461686/pCLXEc5hA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTyHmVBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997461686/pCLXEc5hA.png" alt="image.png" width="494" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4 - As a final step set WSL 2 as your default version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--set-default-version&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKymdfsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997519844/YS75xW9gL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKymdfsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997519844/YS75xW9gL.png" alt="image.png" width="748" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can install your favourite Linux distro from the &lt;a href="https://www.microsoft.com/en-in/search?q=linux"&gt;Microsoft Store&lt;/a&gt;. After the installation completes you'll need to restart and complete the setup of your Distro.&lt;/p&gt;

&lt;p&gt;Enter the username and password for root user and you are good to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---mmDe9Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997604504/qjTozpTJj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---mmDe9Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997604504/qjTozpTJj.png" alt="ubuntuinstall.png" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set your default Linux distro for WSL 2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--set-version&lt;/span&gt; &amp;lt;distribution name&amp;gt; &amp;lt;versionNumber&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WA8CyGTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997746604/xhiLRY7Pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WA8CyGTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997746604/xhiLRY7Pi.png" alt="image.png" width="711" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎉🎉🎉That's it you have successfully set up WSL 2 and can now begin your journey to become a 10x Developer.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on Twitter &lt;a href="https://twitter.com/cryptus_neoxys"&gt;@cryptus_neoxys&lt;/a&gt; and connect with me on &lt;a href="https://www.linkedin.com/in/cryptus-neoxys/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#refs-amp-resources"&gt;
  &lt;/a&gt;
  Refs &amp;amp; Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wiki.ubuntu.com/WSL"&gt;Ubuntu Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/D7Em1wjMiak"&gt;ITProTV -YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>windows</category>
      <category>ubuntu</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use CKEditor and its plugins with Nuxt.js</title>
      <author>Mohit Sehgal</author>
      <pubDate>Sat, 20 Nov 2021 14:06:04 +0000</pubDate>
      <link>https://dev.to/mohitsehgal/how-to-use-ckeditor-and-its-plugins-with-nuxtjs-1ojm</link>
      <guid>https://dev.to/mohitsehgal/how-to-use-ckeditor-and-its-plugins-with-nuxtjs-1ojm</guid>
      <description>&lt;p&gt;CKEditor is Javascript based rich text editor. It has clean UX loaded with features makes it a no-brainer choice for your next custom Javascript CMS.&lt;br&gt;
It can be tedious to figure out its integration with Vue.js Framework like Nuxt.js&lt;br&gt;
&lt;strong&gt;Let's jump straight to steps.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-nuxt-app"&gt;
  &lt;/a&gt;
  Create Nuxt App
&lt;/h2&gt;

&lt;p&gt;If you already have ongoing project, then you can skip this step. &lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;create-nuxt-app&lt;/code&gt; package using npx.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nuxt-app ckeditor-nuxt-sample
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose options suitable to you, here are my selection for this article.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVxY31kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6n1916un11r7c1vyxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVxY31kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6n1916un11r7c1vyxf.png" alt="Create Nuxt App for integrating CKEditor" width="825" height="484"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-page-where-you-want-to-use-ckeditor"&gt;
  &lt;/a&gt;
  Create Page where you want to use CKEditor
&lt;/h2&gt;

&lt;p&gt;Create file named &lt;code&gt;sample-editor.vue&lt;/code&gt; in &lt;code&gt;pages&lt;/code&gt; directory in your Nuxt project. You can name it the way you want.&lt;/p&gt;

&lt;p&gt;Here is initial code in the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
 &amp;lt;h1&amp;gt;Sample Editor will go on this page.&amp;lt;/h1&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now see this page at &lt;a href="https://localhost:3000/sample-editor"&gt;https://localhost:3000/sample-editor&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-packages"&gt;
  &lt;/a&gt;
  Install Packages
&lt;/h2&gt;

&lt;p&gt;Install these packages for CKEditor and full build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @ckeditor/ckeditor5-vue@23.0.0 --save
npm i @blowstack/ckeditor5-full-free-build@1.0.2 --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initiate-ckeditor-and-its-config"&gt;
  &lt;/a&gt;
  Initiate CKEditor and its config
&lt;/h2&gt;

&lt;p&gt;The second package mentioned above has CKEditor build contains all the free plugins for CKEditor. Thanks to BlowStack.&lt;br&gt;
Initialize CKEditor and Build in script section of your vue component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let FullFreeBuildEditor;
let CKEditor;
if (process.client) {
  FullFreeBuildEditor = require('@blowstack/ckeditor5-full-free-build');
  CKEditor = require('@ckeditor/ckeditor5-vue')
}else {
  CKEditor = { component : {template:'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'}}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note-  CKEditor can be used only on the client render and not server render hence &lt;code&gt;process.client&lt;/code&gt; check.&lt;/p&gt;

&lt;p&gt;Now you can register the component provided by this package in components section on your page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;components: {
    ckeditor: CKEditor.component
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next you need to pass FullFreeBuildEditor to editor prop of CKEditor component, so that it knows about which features to render.&lt;/p&gt;

&lt;p&gt;We first initialize &lt;code&gt;editor&lt;/code&gt; property in data section like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data() {
  return {
      editor: FullFreeBuildEditor,
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we pass it to ckeditor as a prop. See snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;ckeditor :editor="editor" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this you can see CKEditor like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOoptora--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b6cvgqnvevtcfo2p8ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOoptora--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b6cvgqnvevtcfo2p8ka.png" alt="Basic CKEditor in Nuxt.js" width="794" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Still this is not complete. &lt;br&gt;
How will you bind it to data property of your component? Use &lt;code&gt;v-model&lt;/code&gt;. Here's how.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;ckeditor :editor="editor" v-model="editorInput" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to display the output just below the editor using following snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container mt-3"&amp;gt;
  &amp;lt;div class="row"&amp;gt;
    &amp;lt;h2 class="col-md-12"&amp;gt;Output&amp;lt;/h2&amp;gt;
      &amp;lt;div&amp;gt;{{editorInput}}&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU7SAghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1awgn36o55cd7dz9bfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU7SAghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1awgn36o55cd7dz9bfv.png" alt="Output for CKEditor in Nuxt.js" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to see preview of this output then you can use &lt;code&gt;v-html&lt;/code&gt; directive. Something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container mt-3"&amp;gt;
  &amp;lt;div class="row"&amp;gt;
    &amp;lt;h2 class="col-md-12"&amp;gt;Preview&amp;lt;/h2&amp;gt;
      &amp;lt;div v-html="editorInput"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edit-configuration"&gt;
  &lt;/a&gt;
  Edit Configuration
&lt;/h2&gt;

&lt;p&gt;The number of features which CKEditor supports can be overwhelming for your users. You can modify the look and limit the features if you want. For that &lt;code&gt;config&lt;/code&gt; prop of CKEditor comes into picture.&lt;/p&gt;

&lt;p&gt;Add new data property called &lt;code&gt;editorConfig&lt;/code&gt; to your component and add it as a prop to &lt;code&gt;ckeditor&lt;/code&gt; component. See the snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data(){
  // Other properties
  editorConfig: {
    width: 'auto',
    plugins: [
      'Bold',
      'Link',
      'List',
      'FontSize',
    ],
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CKEditor Line changes as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;ckeditor :editor="editor" :config="editorConfig" v-model="editorInput" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above 2 changes tells &lt;code&gt;ckeditor&lt;/code&gt; to only include &lt;code&gt;bold&lt;/code&gt;,&lt;code&gt;link&lt;/code&gt;,&lt;code&gt;list&lt;/code&gt;,&lt;code&gt;fontSize&lt;/code&gt; plugins and hence only these options. Here is the output.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiF0MQyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xultaflt77batcgknq6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiF0MQyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xultaflt77batcgknq6j.png" alt="Simple CKEditor after making config changes" width="798" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view full list of plugins &lt;a href="https://www.npmjs.com/package/@blowstack/ckeditor-nuxt"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you have integrated CKEditor totally within your Nuxt.js project. &lt;br&gt;
You'd now see that your code for page component is little unclean. Let's see how to tackle this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#refactor-to-separate-component"&gt;
  &lt;/a&gt;
  Refactor to separate component
&lt;/h2&gt;

&lt;p&gt;Now, we'll cleanup some code. Suppose in real world project, you'll need to use this rich editor at multiple pages. Then you should refactor the code into separate component. Let's call it &lt;code&gt;rich-editor&lt;/code&gt;.&lt;br&gt;
For that create &lt;code&gt;rich-editor.vue&lt;/code&gt; inside &lt;code&gt;components&lt;/code&gt; directory. We will encapsulate CKEditor code inside this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip: If you do this refactor step. You can easily replace CKEditor with some other editor if needed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will move editor config to prop of this &lt;code&gt;rich-editor&lt;/code&gt; component. This will allow us to have rich-editor with different configuration and different features at every page where we need it.&lt;/p&gt;

&lt;p&gt;We will also move &lt;code&gt;value&lt;/code&gt; to prop, so that we can pass &lt;code&gt;v-model&lt;/code&gt; on the component and that variable will bind to the input of the rich-editor.&lt;/p&gt;

&lt;p&gt;Here is the code for &lt;code&gt;rich-editor.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;ckeditor
    :editor="editor"
    :value="value"
    :config="config"
    @input="event =&amp;gt; $emit('input', event)"
  /&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
  let FullFreeBuildEditor;
  let CKEditor;
  if (process.client) {
    FullFreeBuildEditor = require('@blowstack/ckeditor5-full-free-build');
    CKEditor = require('@ckeditor/ckeditor5-vue')
  }else {
    CKEditor = { component : {template:'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'}}
  }

  export default {
    name: 'ck-editor',
    components: {
      ckeditor: CKEditor.component
    },
    props: {
      value: {
        type: String,
        required: false
      },
      config: {
       type: Object,
       required: false,
       default: function () {}
     }
    },
    data() {
      return {
        editor: FullFreeBuildEditor,
      }
    },
  };
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mathtype-plugins"&gt;
  &lt;/a&gt;
  MathType Plugins
&lt;/h2&gt;

&lt;p&gt;If you want to type Mathematics Equations or Chemistry Equations, then you need this plugin.&lt;br&gt;
You just need to add &lt;code&gt;MathType&lt;/code&gt; to the array of plugins in editor config prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;editorConfig: {
  width: 'auto',
  plugins: [
    'Bold',
    'Link',
    'List',
    'FontSize',
    `MathType`
  ],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all. Allow any complicated maths equations or chemical reactions into your Nuxt app. See Figure below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyIenDrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57oesehmw8fldmnm1u9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyIenDrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57oesehmw8fldmnm1u9w.png" alt="CKEditor with MathType plugin in Nuxt.js" width="869" height="717"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image-plugins"&gt;
  &lt;/a&gt;
  Image Plugins
&lt;/h2&gt;

&lt;p&gt;Image plugin allows you to upload images into your editor but you need to give an REST Endpoint where images will be posted. This endpoint should return URL to the uploaded image. That URL can be used to store and display the image along with other content. Here's what you change in config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//CKEditor Config for Image Upload
editorConfig: {
  width: 'auto', 
  plugins: ['Bold','Link','List','FontSize', `MathType`,`Image`,`ImageUpload`,'SimpleUploadAdapter'],
    simpleUpload: {
       // The URL that the images are uploaded to.
       uploadUrl: 'https://yourwebsite.com/api/upload-image',
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind &lt;code&gt;simpleUpload&lt;/code&gt; and &lt;code&gt;uploadUrl&lt;/code&gt; should be spelled correct in order for this to work. If you are facing any issues with this. Hit me up on DM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embed-plugin"&gt;
  &lt;/a&gt;
  Embed Plugin
&lt;/h2&gt;

&lt;p&gt;You can embed in video or social media link using &lt;code&gt;MediaEmbed&lt;/code&gt; plugin. Simply push this to plugins array and you have done it. Here is the sample screenshot.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dM4aZVry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0hdd80h4z7xift34mt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dM4aZVry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0hdd80h4z7xift34mt1.png" alt="CKEditor with Embedded Youtube video in Nuxt.js" width="734" height="614"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We integrated CKEditor with our fresh Nuxt.js project. After that we refactored code and played around with some different useful plugins. This can be difficult to figure out but its very powerful tool to have. Let me know if you face any difficulties in any of the above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can also check the whole code on &lt;a href="https://github.com/mohitsehgal/ckeditor-nuxt-sample"&gt;this Github repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;br&gt;
Remember, currently this article works for Vue 2 only.&lt;/p&gt;

</description>
      <category>nuxt</category>
      <category>vue</category>
      <category>javascript</category>
      <category>ckeditor</category>
    </item>
    <item>
      <title>GOLANG- MSSQL CRUD OPERATIONS</title>
      <author>Muhammet Tan</author>
      <pubDate>Sat, 20 Nov 2021 13:55:47 +0000</pubDate>
      <link>https://dev.to/muhammettan28/golang-mssql-crud-operations-3an8</link>
      <guid>https://dev.to/muhammettan28/golang-mssql-crud-operations-3an8</guid>
      <description>&lt;p&gt;In this tutorial, you will learn basic crud operations in golang.&lt;/p&gt;

&lt;p&gt;Project structre looks like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mkx2OYyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaue5nhctwupffex419f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mkx2OYyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaue5nhctwupffex419f.png" alt="Image description" width="186" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sql table design looks like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usSQeRQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us700wc4rsznk9mk4z0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usSQeRQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us700wc4rsznk9mk4z0b.png" alt="Image description" width="391" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the creating pages and table, you need to download sql-golang framework with this github link&lt;br&gt;
 github.com/denisenkom/go-mssqldb&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxxX9pE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz2dw0rn3f97d9nt1vek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxxX9pE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nz2dw0rn3f97d9nt1vek.png" alt="Image description" width="696" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see we have three different go code pages.&lt;br&gt;
in main.go , we call just one function(CheckDbConn())  to  keep our aplication simple and clean.In golang main function entry point of the application we develop. Calling just one function is sufficient right now.&lt;/p&gt;

&lt;p&gt;In db.go&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyIIsZ1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94lxms3erud1zo7cfoh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyIIsZ1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94lxms3erud1zo7cfoh8.png" alt="Image description" width="456" height="154"&gt;&lt;/a&gt;&lt;br&gt;
We need to fill this area to establish connection between our application and sql database.If you get connection error, you had better check sql username, password,sql port number.&lt;/p&gt;

&lt;p&gt;Full code &lt;br&gt;
db.go&lt;/p&gt;

&lt;p&gt;package main&lt;/p&gt;

&lt;p&gt;import (&lt;br&gt;
    "database/sql"&lt;br&gt;
    f "fmt"&lt;br&gt;
    "log"&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_ "github.com/denisenkom/go-mssqldb"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;var (&lt;br&gt;
    Server   = "localhost"&lt;br&gt;
    Port     = 1433&lt;br&gt;
    User     = "sa"&lt;br&gt;
    Password = 1453&lt;br&gt;
    Db       = "Products"&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;func CheckDbConn() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var err error

ConnString := f.Sprintf("server=%s;user id=%s;password=%d;port=%d;database=%s;",
    Server, User, Password, Port, Db)

conn, err := sql.Open("sqlserver", ConnString)
if err != nil {
    log.Fatal("Open connection failed:", err.Error())
}
f.Printf("Connected!\n")
defer conn.Close()
option := 0
f.Println("0.GET \n1.INSERT \n2.UPDATE \n3.DELETE")
f.Scanln(&amp;amp;option)
switch option {
case 0:
    GetProducts(conn)
case 1:
     result,_:= CreateProduct(conn)

    f.Println(result)
case 2:
    UpdateProduct(conn)
case 3:
    DeleteProduct(conn)
default:
    f.Println("Invalid operation request")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;db.handler.go&lt;/p&gt;

&lt;p&gt;package main&lt;/p&gt;

&lt;p&gt;import (&lt;br&gt;
    "database/sql"&lt;br&gt;
    f "fmt"&lt;br&gt;
    "strings"&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;func GetProducts(db *sql.DB) (int, error) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getProduct_sql := "select * from Products"

rows, err := db.Query(getProduct_sql)
if err != nil {
    f.Println("Error reading records: ", err.Error())
}
defer rows.Close()

count := 0
for rows.Next() {
    var name string
    var price float64
    var id int
    err := rows.Scan(&amp;amp;id, &amp;amp;name, &amp;amp;price)
    if err != nil {
        f.Println("Error reading rows: " + err.Error())
        return -1, err
    }
    f.Printf("ID: %d, Name: %s, Price: %f\n", id, name, price)
    count++
}
return count, nil
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;func CreateProduct(db *sql.DB)(int64,error){&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name string
f.Print("Please enter your product name: ")
f.Scanln(&amp;amp;name)

var price float64
f.Print("Please enter your product's price: ")
f.Scanln(&amp;amp;price)

insertProduct_sql := f.Sprintf("INSERT INTO Products (name,price) VALUES ('%s' , %f ); select ID = convert(bigint, SCOPE_IDENTITY()) ",strings.Title(strings.ToLower(name)),price)


rows,err:=db.Query(insertProduct_sql)
if err !=nil{
    f.Println("Error occured while inserting a record", err.Error())
    return -1,err
}


defer rows.Close()
var lastInsertId1 int64
for rows.Next() {
    rows.Scan(&amp;amp;lastInsertId1)

}


return lastInsertId1,err
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;func  InfoMsG(db *sql.DB,id int64)  {&lt;br&gt;
    infoQuery:=f.Sprintf("Select name from Products where id=%d",id)&lt;br&gt;
    rows,err := db.Query(infoQuery)&lt;br&gt;
    if err !=nil{&lt;br&gt;
        f.Println("Error occured while giving info: ", err.Error())&lt;br&gt;
    }&lt;br&gt;
    defer rows.Close()&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for rows.Next(){
    var name string
    var id =id
    err:=rows.Scan(&amp;amp;name)
    if err !=nil {
        f.Println("Error reading end process product id with, " , id, err)
    }else{
        f.Printf(name + " product has been created " )
    }



}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;func UpdateProduct(db *sql.DB)  {&lt;br&gt;
    f.Print("Please enter product id which you want to change: ")&lt;br&gt;
    var id int&lt;br&gt;
    f.Scanln(&amp;amp;id)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;f.Print("Please enter new product name ")
var name string
f.Scanln(&amp;amp;name)

f.Print("Please enter new product'price ")
var price float64
f.Scanln(&amp;amp;price)

update_query := f.Sprintf("UPDATE Products set name='%s', price=%f where id=%d",name,price,id)

_, err := db.Exec(update_query)
if err != nil {
    f.Println("Failed: " + err.Error())
}
f.Println("Product informations updated successfully")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;func DeleteProduct(db *sql.DB){&lt;br&gt;
    f.Print("Please enter product id which you want to delete: ")&lt;br&gt;
    var id int&lt;br&gt;
    f.Scanln(&amp;amp;id)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;delete_query:=f.Sprintf("DELETE FROM Products where id=%d",id)
_, err := db.Exec(delete_query)
if err != nil {
    f.Println("Failed: " + err.Error())
}
f.Println("Product deleted successfully")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;main.go &lt;br&gt;
package main&lt;/p&gt;

&lt;p&gt;func main() {&lt;br&gt;
    CheckDbConn()&lt;br&gt;
}&lt;/p&gt;

</description>
      <category>go</category>
      <category>sql</category>
      <category>crud</category>
    </item>
    <item>
      <title>Things not to forgot while learning coding as a beginner.</title>
      <author>Asim Shrestha</author>
      <pubDate>Sat, 20 Nov 2021 13:42:52 +0000</pubDate>
      <link>https://dev.to/alex1the1great/things-not-to-forgot-while-learning-coding-as-a-beginner-4l46</link>
      <guid>https://dev.to/alex1the1great/things-not-to-forgot-while-learning-coding-as-a-beginner-4l46</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Taking your first tutorial:&lt;/strong&gt;
Complete the tutorial. Understand everything, shallow understanding is fine while starting. Write code by yourself even it feels tedious. Do not copy &amp;amp; paste.
You do not need to understand exactly how the functions work, but you do need to be able to import and use them correctly.
Don't rush to complete the tutorial. If you feel like skipping any topics from the tutorial, take a break and come back later.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It's ok if you don't understand:&lt;/strong&gt; When learning new things, most of the time you might don't understand the stuff, it's ok. You can look that topics from other sources. To become successful you have to cross the difficulties. Just don't runway from it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code every day:&lt;/strong&gt; To become good at coding you have to code every single day. Even if for just 20 minutes a day. You just have to be consistent.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add at least 2 new features to the project after completing the tutorial:&lt;/strong&gt;
If you have understood the tutorial it will not be a problem. If you don't have any ideas for the features, you can recreate the same project from scratch.
Following the tutorial, you are not using your brain. So, you have to use your brain by creating projects by yourself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tutorial Hell&lt;/strong&gt;
When you keep on watching tutorials and not building projects by yourself. So, once you feel like you are in a tutorial hell, then stop watching tutorials and start building projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build a new project &amp;amp; complete it:&lt;/strong&gt;
Starting a new project is easily but completing is difficult. So, the first thing you have to think of is a project which you are interested in creating. If you are not interested in the project which you are building then you will skip or not complete the project if any difficultly occur during building it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Maintaining the project:&lt;/strong&gt;
If we say building and completing a project is level 1, then maintaining the project is level 2. To become a good developer you should start maintaining your project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Creating big project:&lt;/strong&gt;
When you are done creating 3 or 4 simple projects you can start creating complex projects. For example &lt;strong&gt;simple project 1:&lt;/strong&gt; simple todo app, &lt;strong&gt;simple project 2:&lt;/strong&gt; simple digital clock, etc. &lt;strong&gt;Complex project:&lt;/strong&gt; Todo app with crud functionality,
in next iteration adding reminder functionality, and so on.
Add new features to your project one step at a time. If you keep on adding new features to a simple project, then it will start to grow into a big project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Habit of Figuring out your problems:&lt;/strong&gt; Instead of running away from your challenges, face them. You should ask questions to yourself. How can I solve this problem?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get good at GIT:&lt;/strong&gt; Git is a tool to track or capture the history of your project and help to collaborate with other developers remotely.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Read other people's code:&lt;/strong&gt; Read other people's code whose coding level is the same as yours or a little above your level.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Structure and Algorithms:&lt;/strong&gt; Have at least a basic understanding of different commonly used algorithms.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Introduction à FastAPI (Python)</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sat, 20 Nov 2021 13:39:37 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/introduction-a-fastapi-python-5mf</link>
      <guid>https://dev.to/ericlecodeur/introduction-a-fastapi-python-5mf</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra de créer une API en Python avec FastAPI.&lt;/p&gt;

&lt;p&gt;Je vais publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur FastAPI&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#questce-que-fastapi-"&gt;
  &lt;/a&gt;
  Qu'est-ce que FastAPI ?
&lt;/h3&gt;

&lt;p&gt;FastAPI est un framework web Python qui permet de créer rapidement des API de haute performance.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pourquoi-fastapi-"&gt;
  &lt;/a&gt;
  Pourquoi FastAPI ?
&lt;/h3&gt;

&lt;p&gt;Avant FastAPI il existait déjà plusieurs façon de créer des API avec Python. Notamment avec Django Rest Framework et Flask. Alors pourquoi FastAPI ?&lt;/p&gt;

&lt;p&gt;Voici la liste des principaux avantages de FastAPI :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Très rapide : La performance est supérieur à Django et Flask et est même comparable aux performances de NodeJS et GO&lt;/li&gt;
&lt;li&gt;Rapide à coder : Créer des API 2 à 3 fois plus rapidement&lt;/li&gt;
&lt;li&gt;Facile : Facile à utiliser et à apprendre&lt;/li&gt;
&lt;li&gt;Annotation de Type (Type hints) : Facilite la validation, permet l'auto-complétion et facilite le debugging&lt;/li&gt;
&lt;li&gt;Documentation automatique : FastAPI génère la documentation en format Swagger UI et ReDoc automatiquement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequis"&gt;
  &lt;/a&gt;
  Pre-requis
&lt;/h2&gt;

&lt;p&gt;Pour commencer à coder avec FastAPI vous devez  avoir une base en programmation avec le language Python.&lt;/p&gt;

&lt;p&gt;Vous devez également vous assurer que vous avez une version à jour de Python (version 3.6 ou +)&lt;/p&gt;

&lt;p&gt;À partir du terminal taper cette commande pour connaitre la version de Python installé sur votre machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;

ou

&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si vous n'avez pas Python ou une version antérieur à 3.6, vous pouvez obtenir la dernière version de Python le site officiel : &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C3%A9diteur-de-code"&gt;
  &lt;/a&gt;
  Éditeur de code
&lt;/h3&gt;

&lt;p&gt;Pour ce tutoriel, je vais utiliser Visual Studio Code : &lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il vous sera plus facile de me suivre avec cet éditeur mais ce n'est vraiment pas une obligation. &lt;/p&gt;

&lt;p&gt;Enfin, si vous utilisé vscode, assurez-vous que l'extension Python est bel et bien installé.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cr%C3%A9ation-de-lenvironnement-virtuel"&gt;
  &lt;/a&gt;
  Création de l'environnement virtuel
&lt;/h2&gt;

&lt;p&gt;Lorsque l'on travaille sur un projet Python, on est amené à travailler avec plusieurs librairies comme FastAPI, Flask ou Django, etc.&lt;/p&gt;

&lt;p&gt;Selon la date de création du projet. Il est possible par exemple que la librairie FastAPI  ne soit pas exactement au même no de version dans les autres projets.&lt;/p&gt;

&lt;p&gt;Comment faire pour permettre à chaque projet d'avoir sa propre version de Python et ses propres versions de librairies ?&lt;/p&gt;

&lt;p&gt;Nous allons utiliser les environnements virtuels.&lt;/p&gt;

&lt;p&gt;Un environment virtuel permet d'installer Python et des librairies python dans un dossier/projet sans que cela n'affecte les autres dossiers/projets.&lt;/p&gt;

&lt;p&gt;Python met à votre disposition un système qui permet de créer des environnements virtuels.&lt;/p&gt;

&lt;p&gt;Une fois l'environnement créé et activé, toutes les librairies installées pourront être utilisé seulement dans l'environnement auquel ils appartiennent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comment-cr%C3%A9er-un-environnement-virtuel"&gt;
  &lt;/a&gt;
  Comment créer un environnement virtuel
&lt;/h3&gt;

&lt;p&gt;Normalement nous plaçons un environnement virtuel dans le dossier du projet.&lt;/p&gt;

&lt;p&gt;Créer et accéder à un dossier pour notre projet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tuto&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tuto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À partir de ce dossier vous pouvez maintenant créer l'environnement virtuel qui sera attaché au projet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici on lance python3 avec l'option module venv. env est le nom que l'on donne à notre environnement virtuel.&lt;/p&gt;

&lt;p&gt;Une fois l’environnement virtuelle créé vous pouvez l'activer :&lt;/p&gt;

&lt;p&gt;MacOS / Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà c'est tout ! Vous avez maintenant un environnement virtuel Python créé pour votre projet. Normalement le terminal vous indiquera que votre environnement est activé en affichant son nom.&lt;/p&gt;

&lt;p&gt;À noter que pour désactiver l'environnement virtuel vous devez exécuter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour  le reste du tutoriel, assurez-vous que l'environnement virtuel est activé avant de lancer toutes commandes dans le terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-de-fastapi"&gt;
  &lt;/a&gt;
  Installation de FastAPI
&lt;/h2&gt;

&lt;p&gt;À partir du dossier fastapi-tuto et avec l'environnement virtuel activé exécuter la commande d'installation suivante :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi[all]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette commande va installer FastAPI et également installé certaine dépendances optionnelles comme le serveur local (uvicorn) pour tester FastAPi sur votre machine.&lt;/p&gt;

&lt;p&gt;Une fois ces librairies installées vous pouvez lancer votre éditeur de code ouvert sur le dossier en cours&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette commande va lancer Visual Studio Code ouvert sur le dossier en cours&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rappel-questce-quun-api%C2%A0"&gt;
  &lt;/a&gt;
  Rappel : Qu'est-ce qu'un API ?
&lt;/h2&gt;

&lt;p&gt;API signifie Interface de programmation d'applications.&lt;/p&gt;

&lt;p&gt;Bref, c'est un programme qui peut être utilisé par un autre programme, afin de permettre aux applications de dialoguer entre elles.&lt;/p&gt;

&lt;p&gt;Une API permet au serveur et au client de communiquer entre eux et d'échanger des information et des données. Les données échangé le sont en format texte structuré (JSON).&lt;/p&gt;

&lt;p&gt;Les échanges se font sous forme de requêtes et réponses :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWHRSeIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxeavm3631cbwdkj6dc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWHRSeIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxeavm3631cbwdkj6dc0.png" alt="Image description" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Par exemple, le navigateur (client / application frontend) fait une requête spécifique a un serveur :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le serveur peut-il savoir comment gérer cette requête ? Il ne le peut pas. Il ne saura pas quoi faire de la requête. &lt;/p&gt;

&lt;p&gt;C'est pourquoi nous devons créer une API. Il s'agit d'une application serveur qui déterminera comment répondre aux différentes requêtes concernant une ressource spécifique. &lt;/p&gt;

&lt;p&gt;Reprenons le dernier exemple de requête :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le client désire obtenir les informations du produit no 3814&lt;/p&gt;

&lt;p&gt;Pour répondre à cette requête, nous pourrions créer un API qui permettrait de rechercher le produit 3814 dans une base de données et renvoyer cette réponse au client en format texte structuré (JSON)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3814&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"qty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;799&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#diff%C3%A9rent-type-de-requ%C3%AAtes"&gt;
  &lt;/a&gt;
  Différent type de requêtes
&lt;/h3&gt;

&lt;p&gt;Notez que toutes les requêtes aux serveurs sont effectuées via des actions HTTP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voici-les-actions-http-les-plus-couramment-utilis%C3%A9s"&gt;
  &lt;/a&gt;
  Voici les actions HTTP les plus couramment utilisés
&lt;/h3&gt;

&lt;p&gt;GET : Les requêtes GET sont utilisées que pour récupérer des données.&lt;/p&gt;

&lt;p&gt;POST : Les requêtes POST sont utilisées pour envoyer des données.&lt;/p&gt;

&lt;p&gt;PUT : Les requêtes PUT sont utilisées pour modifier des données.&lt;/p&gt;

&lt;p&gt;PATCH : Les requêtes PATCH sont utilisées pour modifier partiellement des données.&lt;/p&gt;

&lt;p&gt;DELETE : Les requêtes DELETE sont utilisées pour supprimer les données indiquées.&lt;/p&gt;

&lt;p&gt;Lorsque nous traitons avec une ressource. Par exemple Produit. Chaque action sur la ressource Produit a sa propre route&lt;/p&gt;

&lt;p&gt;Voici un exemple de route pour chacune des actions HTTP :&lt;/p&gt;

&lt;p&gt;Create : POST www.example.com/&lt;/p&gt;

&lt;p&gt;Read : GET www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Update : PUT www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Destroy : DELETE www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;La façon de nommer ces routes n'est pas un hasard, c'est en faite une convention qui est suivit par la plupart des développeurs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#votre-premier-api"&gt;
  &lt;/a&gt;
  Votre premier API
&lt;/h2&gt;

&lt;p&gt;Fini la théorie, voyons maintenant comment créer votre premier API&lt;/p&gt;

&lt;p&gt;À partir de l'éditeur de code créer un fichier nommé : first-api.py &lt;/p&gt;

&lt;p&gt;Saisir ce code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app = FastAPI() permet de créer une instance de FastAPI&lt;/p&gt;

&lt;p&gt;Le décorateur @app.get() permet de spécifier le chemin url et l'action HTTP (GET) de notre api. &lt;/p&gt;

&lt;p&gt;La fonction index() sera exécuté chaque fois qu'un utilisateur visitera le chemin URL spécifié par le décorateur @app.get() soit dans ce cas ci le path "/home"&lt;/p&gt;

&lt;p&gt;À noter que le nom de la fonction "index()" pourrait être n'importe quel nom. C'est selon votre préférence.&lt;/p&gt;

&lt;p&gt;Pour lancer le serveur et tester votre premier API, saisir dans le terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uvicorn est le serveur local. Il prend comme paramètre le nom du fichier:le nom de l'instance FastAPI&lt;/p&gt;

&lt;p&gt;L'option —reload va relancer le serveur à chaque modification du fichier source&lt;/p&gt;

&lt;p&gt;Vous pouvez donc ensuite visiter : &lt;a href="http://127.0.0.1:8000/home"&gt;http://127.0.0.1:8000/home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La réponse  suivante s'affichera :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bravo! Vous venez de créer votre premier API&lt;/p&gt;

&lt;p&gt;Dernier point. Le path que vous avez créé pointe sur "&lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;home". Comment faire pour qu'il pointe sur le "root path" soit "&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;" &lt;/p&gt;

&lt;p&gt;Il faut utiliser seulement un back slash "/"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;@app.get(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le back slash utilisé seul signifie "root path"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>python</category>
      <category>fastapi</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
