<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free Programming Tutorials!</title>
      <author>CristoferK</author>
      <pubDate>Thu, 08 Apr 2021 17:01:25 +0000</pubDate>
      <link>https://dev.to/cristoferk/free-programming-tutorials-6pf</link>
      <guid>https://dev.to/cristoferk/free-programming-tutorials-6pf</guid>
      <description>&lt;p&gt;Hello!&lt;br&gt;
I have a YouTube channel where I am posting programming tutorials! If you want to support me please like, share and subscribe!&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to enable Tailwind JIT compilation mode in your Angular project.</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Thu, 08 Apr 2021 16:56:20 +0000</pubDate>
      <link>https://dev.to/adisreyaj/how-to-enable-tailwind-jit-compilation-mode-in-your-angular-project-27oc</link>
      <guid>https://dev.to/adisreyaj/how-to-enable-tailwind-jit-compilation-mode-in-your-angular-project-27oc</guid>
      <description>&lt;p&gt;Tailwind, for those living under a rock, is all the buzz among web devs. It is a utility first CSS framework wherein we add a bunch of classes to HTML elements and the rest is taken care of by Tailwind.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full flex-none text-sm font-medium text-gray-500 mt-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   Test
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how your template would look like. I mean not all are a fan of this approach, but for those who like this kind of utility-class approach, Tailwind is the best out there.&lt;/p&gt;

&lt;p&gt;I personally have been using it extensively for all my projects, and I totally love it. You will be writing fewer custom styles, which is a relief. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-getting-to-know-it"&gt;
  &lt;/a&gt;
  Tailwind - Getting to know it
&lt;/h2&gt;

&lt;p&gt;Writing custom styles was totally my thing until I started using  &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;. I was not a fan of bootstrap and always made sure to write plain old CSS for most of the projects. You won't be able to find the real advantage of using utility-first frameworks like these at first or in smaller applications.&lt;br&gt;
The real benefit comes when the application grows and the styles become very difficult to manage. Over time the styles bundle would grow drastically, especially if you are working in a team with a lot of other devs.&lt;/p&gt;

&lt;p&gt;If you are using Tailwind, you would be shipping fewer styles as everything which is not used will be purged, meaning only those classes that you have used will be part of the bundle. This will shave a huge chunk from the styles bundle.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#angular-and-tailwind"&gt;
  &lt;/a&gt;
  Angular and Tailwind
&lt;/h2&gt;

&lt;p&gt;People really started liking Tailwind and using it with other frameworks was so easy. But in the case of Angular, it was a different story. &lt;br&gt;
Tailwind is a  &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt;  plugin, so to make it work, we need access to the PostCSS configuration where we can specify tailwind in the plugins list.&lt;br&gt;
Even though Angular uses PostCSS, it didn't expose the bundler config file making it difficult to use Tailwind in Angular.&lt;/p&gt;

&lt;p&gt;The only way is to eject the webpack config and then manually configure the bundler to utilize Tailwind. It is not something an average developer would do and is not recommended either.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#angular-tailwind-schematics"&gt;
  &lt;/a&gt;
  Angular Tailwind Schematics
&lt;/h2&gt;

&lt;p&gt;Ngneat came up with a super cool schematic for Angular ( &lt;a href="https://github.com/ngneat/tailwind"&gt;NgNeat/Tailwind&lt;/a&gt; ), which would basically do everything and configure all the stuff needed to make Tailwind work with Angular. And it is so damn straightforward.&lt;/p&gt;

&lt;p&gt;The schematics can be accessed via:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng add @ngneat/tailwind
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#angular-official-support-for-tailwind"&gt;
  &lt;/a&gt;
  Angular Official Support for Tailwind
&lt;/h2&gt;

&lt;p&gt;Seeing the hype and the number of user requests, the Angular team was quick to release a version of Angular (&lt;code&gt;v11.2&lt;/code&gt;) which comes with support for Tailwind. If the CLI detects a tailwind configuration in your project, PostCSS will automatically use the tailwind plugin with this config.&lt;/p&gt;

&lt;p&gt;Before Tailwind came up with the JIT compiler, the compiling takes a lot of time. If you have a lot of variants configured in the tailwind config, the styles bundle spitted out in dev mode is too big that it lags the developer console while inspecting elements. &lt;br&gt;
Purge was recommended to be enabled during production build, otherwise compiling would take even more time.&lt;/p&gt;

&lt;p&gt;Here's what you have to do:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h3&gt;

&lt;p&gt;Make sure the Angular CLI version is &amp;gt;= 11.2&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-tailwind-jit"&gt;
  &lt;/a&gt;
  Setting up Tailwind JIT
&lt;/h3&gt;

&lt;p&gt;Tailwind JIT is release in &lt;code&gt;v2.1&lt;/code&gt; so make sure you are installing the latest version&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install tailwind as a dependency
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i tailwindcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create the tailwind config file
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Add these base styles to &lt;code&gt;styles.scss&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"tailwindcss/base"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"tailwindcss/components"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"tailwindcss/utilities"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Edit the &lt;code&gt;tailwind.config.js&lt;/code&gt; file to enable &lt;code&gt;jit&lt;/code&gt; compilation.&lt;/li&gt;
&lt;li&gt;Update the purge array with the path to your components. If purge is not configured, JIT will not simple work.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app/**/*.{ts,html,scss}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the project
&lt;/h3&gt;

&lt;p&gt;For the Tailwind JIT compiler to detect changes to your files, you need to set the &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;development&lt;/code&gt;. Read More Here: &lt;a href="https://tailwindcss.com/docs/just-in-time-mode#watch-mode-and-one-off-builds"&gt;https://tailwindcss.com/docs/just-in-time-mode#watch-mode-and-one-off-builds&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do that by simply setting the env variable before your serve and build scripts.&lt;br&gt;
I am using &lt;code&gt;cross-env&lt;/code&gt; so that we avoid the platform-related shenanigans when setting environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; cross-env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the scripts in &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cross-env NODE_ENV=development ng serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cross-env NODE_ENV=production ng build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're done! Enjoy super-fast reload times when using Tailwind. No more laggy developer consoles, when inspecting elements on your browser.&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href="https://tailwindcss.com/docs/just-in-time-mode"&gt;https://tailwindcss.com/docs/just-in-time-mode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to ping me on Twitter If you would like to connect. Stay Safe ❤️&lt;/p&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Reflexive McLuhanism</title>
      <author>swyx</author>
      <pubDate>Thu, 08 Apr 2021 16:51:38 +0000</pubDate>
      <link>https://dev.to/swyx/reflexive-mcluhanism-kmn</link>
      <guid>https://dev.to/swyx/reflexive-mcluhanism-kmn</guid>
      <description>&lt;p&gt;This post is my attempt at a "red pill" for those who haven't had McLuhanite ideas applied to the world they live in.&lt;/p&gt;

&lt;p&gt;I think people don't appreciate enough how much we are a product of our environment — and how much of our environment is socially constructed. Not only that, it is constructed by a small group of builders who never really thought they'd ever get this far (such is the nature of leverage).&lt;/p&gt;

&lt;p&gt;To paraphrase Churchill: &lt;a href="https://quoteinvestigator.com/2016/06/26/shape/"&gt;First we shape X, then X shapes us&lt;/a&gt;. If a defining characteristic of humanity is making and using tools, then a defining characteristic of society is being shaped by those same tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-everything-optimization"&gt;
  &lt;/a&gt;
  Social Everything Optimization
&lt;/h2&gt;

&lt;p&gt;We are well past debating &lt;a href="https://en.wikipedia.org/wiki/Linguistic_relativity"&gt;linguistic relativity and Sapir-Whorf&lt;/a&gt;. "Language shapes thought"? That's cute. Try &lt;em&gt;everything around us&lt;/em&gt; shaping &lt;em&gt;everything we do&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://florentcrivello.com/index.php/2019/04/29/software-the-tough-tomato-principle-and-the-great-weirdening-of-the-world/"&gt;The Tough Tomato Principle&lt;/a&gt;&lt;/strong&gt; by Florent Crivello, among many things, spotted the impact of Google Maps on names of hotels ("Good Hotel San Francisco"). How long until someone is &lt;em&gt;born&lt;/em&gt; named "Best Lawyer NYC"? &lt;/p&gt;

&lt;p&gt;Once you see it, you see it everywhere. Game developers optimizing for Twitch spectator experience, Museums optimizing for Instagram, &lt;a href="https://switchedonpop.com/episodes/whosafraidoftiktok"&gt;Musicians optimizing for TikTok&lt;/a&gt; and their &lt;a href="https://www.rollingstone.com/pro/features/tik-tok-hits-changing-titles-983383/"&gt;labels too&lt;/a&gt;. We're even &lt;a href="https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates"&gt;renaming human genes because Excel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instagram is God's gift to colorful and niche products. Living in New York, I've personally seen the explosion of color &lt;a href="https://edition.cnn.com/travel/article/best-ice-cream-new-york/index.html"&gt;even in ice cream shops&lt;/a&gt; - I used to work in SoHo, where the Black Tap put out increasingly obnoxiously unrealistic sundaes that work great on Instagram but would be a nightmare to actually eat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6wGbxhC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/108opfwrujxck57njih3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wGbxhC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/108opfwrujxck57njih3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How about clothes? &lt;a href="https://mastersofscale.com/jenn-hyman-the-secret-business-behind-the-business/"&gt;Listen to Jenn Hyman&lt;/a&gt; directly credit Instagram for women's increased desire for more variety in clothing, which helped her business, Rent the Runway.&lt;/p&gt;

&lt;p&gt;A lot of people will deny the influence of media on their own preferences. The illusion of free will and desire for self-determination is strong. &lt;/p&gt;

&lt;p&gt;But you can't deny the impact of media changing the real world/economy. And people who's job it is to reach people (marketers and politicians) are depressingly attuned to how much media shapes us. Alex Danco &lt;a href="https://alexdanco.com/2019/10/17/the-audio-revolution/"&gt;made a strong case&lt;/a&gt; that TV helped elect JFK, Radio helped  Trump. AOC isn't on Tiktok, but you can bet &lt;a href="https://twitter.com/aoc/status/1279438522102013952?lang=en"&gt;she is reaching her voters&lt;/a&gt; in that format.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-is-king"&gt;
  &lt;/a&gt;
  Design is King
&lt;/h2&gt;

&lt;p&gt;I used to call this "Modern McLuhanism", because it was McLuhan that asserted &lt;a href="https://www.oxfordreference.com/view/10.1093/oi/authority.20110803100145151"&gt;the non-neutrality of media&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;He observed that in the 1960s. Fast forward half a century, and we now live in a world where &lt;a href="https://twitter.com/balajis/status/1313587476015935488?lang=en"&gt;every company is a media company&lt;/a&gt; and &lt;a href="https://www.garyvaynerchuk.com/every-single-one-of-you-is-a-media-company/"&gt;every person is a media company&lt;/a&gt;. The modern affliction is not simply that the choice of medium affects us, but also that we are complicit in creating the medium in the first place. &lt;/p&gt;

&lt;p&gt;Modern McLuhanism is &lt;em&gt;reflexive&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In such a world, design is king&lt;/strong&gt;. Thoughtful product design genuinely nudges society forward. Carelessness can tear it apart. Wilson Miner called out the implications of this for software in his classic talk, &lt;a href="https://vimeo.com/34017777"&gt;When We Build&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I'd go so far as to make it required viewing, and this idea required digestion, for all builders. We who have this awesome power, correspondingly have an awesome responsibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Side note: I have previously written about the duality of &lt;a href="https://www.swyx.io/mimicry-reflexivity/"&gt;Mimicry and Reflexivity&lt;/a&gt; exploring more applications of reflexivity on its own.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>reflections</category>
      <category>reflexivity</category>
      <category>mcluhanism</category>
    </item>
    <item>
      <title>Theming with CSS Variables</title>
      <author>Sergio Francisco Montoya Comparan</author>
      <pubDate>Thu, 08 Apr 2021 16:49:52 +0000</pubDate>
      <link>https://dev.to/sergiomontoyac/theming-with-css-variables-48pl</link>
      <guid>https://dev.to/sergiomontoyac/theming-with-css-variables-48pl</guid>
      <description>&lt;p&gt;When developing Frontend, I'm pretty sure most of us make have used something like Bootstrap or Bulma.io, they give us tools to create beautiful interfaces with just a handful of classes added into our HTML elements.&lt;/p&gt;

&lt;p&gt;Among one of the many things we can find are the Themes, that let us change the whole look of our elements with just a few lines of code or just adding a simple class. There are many ways of achieving this but in this case I want to share how I prefer to create these Themes and with the use of CSS Variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-css-variables"&gt;
  &lt;/a&gt;
  What are CSS variables?
&lt;/h2&gt;

&lt;p&gt;CSS variables, as its name implies, are variables that we can assign a value and then use it later, but one of the most important things is that its value can be changed and it will affect in cascade anything that is using it from the point we change the value, just as CSS is supposed to work. CSS variables are completely different from those we have on a preprocessor, so we don't need those preprocessor variables for us to create a simple theme.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-with-our-theme"&gt;
  &lt;/a&gt;
  Let's start with our Theme
&lt;/h2&gt;

&lt;p&gt;Now that we know what a CSS variables is, we can start creating our Theme, so first we are going to create some variables. CSS variables follow this syntaxis &lt;code&gt;--my-var: value&lt;/code&gt;.  To declare our variables as global variables, we have to declare them in the &lt;code&gt;:root&lt;/code&gt; so we declare them as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --main: #110066;
  --secondary: #90CBFB;
  --button-text: #FFF;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can declare variables inside classes, but for now, let's just have this three as global.&lt;/p&gt;

&lt;p&gt;Now that we have our variables declared, we can use them as we please, so we are going to create some buttons using those variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.button {
  padding: .5em 1em;
  border-radius: .5em;
  background-color: var(--main);
  color: var(--button-text);
  display:inline-block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have our main button and to add a secondary button we just change or &lt;code&gt;background-color&lt;/code&gt; and use the &lt;code&gt;--secondary&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.button.secondary {
  background-color: var(--secondary);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to call these classes our default Theme, since they don't need anything else to be styled, just add those classes to the element, so we are going to add just two simple anchors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class='theme'&amp;gt;
  &amp;lt;a class='button'&amp;gt;Main Button&amp;lt;/a&amp;gt;
  &amp;lt;a class='button secondary'&amp;gt;Secondary Button&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything went well, we should see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2svhLqqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h126zvt06zju86p8thss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2svhLqqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h126zvt06zju86p8thss.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we wanted, we could use those variables for anything else, like &lt;code&gt;border-color&lt;/code&gt;, but just to keep it simple we are just changing the &lt;code&gt;background-color&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just to add more variety to our theme we are going to add a message element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class='theme'&amp;gt;  
  .
  .
  .
  &amp;lt;div&amp;gt;
    &amp;lt;span class='message'&amp;gt;
      This is my main Message
    &amp;lt;/span&amp;gt;
    &amp;lt;span class='message secondary'&amp;gt;
      This is my secondary Message
    &amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And its corresponding CSS using our CSS variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.message {
  color: var(--main);
}

.message.secondary {
  color: var(--secondary);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, with our message elements added we should have something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sziQOwrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd6uarbofg27imovh4t8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sziQOwrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd6uarbofg27imovh4t8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to see the power of the CSS variables and why they are something that we should use more often.&lt;/p&gt;

&lt;p&gt;With the use of just a simple class and some variables adjustments, we are able to change the whole look of our components and we do it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.green-theme {
  --main: #485922;
  --secondary: #798C35;  
}

.high-theme {
  --main: #00B2BF;
  --secondary: #FFC20D;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With just those two simple clases, we are able to just slap them into a container element and everything inside will change automatically, cascading all its values. So if we add the &lt;code&gt;.green-theme&lt;/code&gt; class to the element containing all the elements, in our case the element with class &lt;code&gt;.theme&lt;/code&gt; we should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SoYVwVdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfg1acoyhhkxjguqhdsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SoYVwVdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfg1acoyhhkxjguqhdsj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: We actually don't need the class &lt;code&gt;.theme&lt;/code&gt; for all of this to work, we could just use the &lt;code&gt;.green-theme&lt;/code&gt; class and everything should work exactly the same&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if we use our &lt;code&gt;.high-theme&lt;/code&gt; class we should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKqbyMqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd8o4z1o3z9te5c9bwq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKqbyMqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd8o4z1o3z9te5c9bwq4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this point we could continue creating more components/elements that make use of our variables, add more variables and create more stuff, and just by changing the values of our variables inside the &lt;code&gt;.green-theme&lt;/code&gt; and &lt;code&gt;.high-theme&lt;/code&gt; classes, all the values magically adapt.&lt;/p&gt;

&lt;p&gt;If we wanted to do something like this using only SCSS variables, it would be a much longer process, since our SCSS variables won't cascade the same as our native CSS variables.&lt;/p&gt;

&lt;p&gt;In this &lt;a href="https://codepen.io/chekoMC/pen/KKaveQm"&gt;pen&lt;/a&gt; you can see both options and check how the SCSS code won't work if we follow the exact same as native CSS variables.&lt;/p&gt;

&lt;p&gt;What do you think now about CSS variables? Remember that we can use both SCSS variables and native CSS variables in tandem to create amazing stuff, so if we wanted to do that we could have something like this, using both at the same time (&lt;a href="https://codepen.io/chekoMC/pen/VwPrPzZ"&gt;pen&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --main: #022859;
  --secondary: #024873;
  --button-text: #FFF;
}

$main: var(--main);
$secondary: var(--secondary);
$button-text: var(--button-text);

.green-theme {
  --main: #485922;
  --secondary: #798C35;  
}

.high-theme {
  --main: #00B2BF;
  --secondary: #FFC20D;  
}

.button {
  padding: .5em 1em;
  border-radius: .5em;
  display:inline-block;
  background-color: $main;
  color: $button-text;
  margin-bottom: .5em;
  &amp;amp;.secondary {
    background-color: $secondary;  
  }
}

.message {
  color: $main;
  &amp;amp;.secondary {
    color: $secondary;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see and if you've been curious enough, you'll see that this is really similar and pretty much what bootstrap or other CSS frameworks do, just in a small scale.&lt;/p&gt;

&lt;p&gt;I hope you liked this small post and if you find a good use for this in your next project, that will be sweet!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
      <category>theme</category>
    </item>
    <item>
      <title>Simple LocalStorage Project!</title>
      <author>CristoferK</author>
      <pubDate>Thu, 08 Apr 2021 16:30:14 +0000</pubDate>
      <link>https://dev.to/cristoferk/simple-localstorage-project-4d0g</link>
      <guid>https://dev.to/cristoferk/simple-localstorage-project-4d0g</guid>
      <description>&lt;p&gt;I made a simple Simple LocalStorage Project! This is the first time when I used localStorage! I learned this from a beginner tutorial what was very easy to follow.&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;LocalStorage&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;style&amp;gt;
body {
    font-family: sans-serif;
    margin: 0;
    padding: 0;
    color: grey;
}
.container {
    position: absolute;
    top: 10%;
    right: 50%;
    transform: translate(50%, 0%);
    background: white;
    width: 400px;
    height: 500px;
    box-shadow: 0px 0px 20px blue;
    padding: 10px;
    border-radius: 20px;
}
.storage {
    border:0;
    border-bottom: 1px solid #ccc;
    width: 100%;
    margin-top: 20px;
    font-size: 20px;
    outline: none;
}
.text {
    border-radius: 10px;
    padding: 10px;
    box-shadow: 0px 0px 10px blue;
    margin-top: 20px;

}
.button {
    width: 80%;
    box-shadow: 0px 0px 20px blue;
    outline: none;
    border: none;
    background: white;
    padding: 10px;
    border-radius: 20px;
    bottom: 20px;
    position: absolute;
    left: 40px;
    cursor: pointer;
    transition: 0.4s;
}
.button:hover {
    box-shadow: 0px 0px 40px blue;
    transition: 0.4s;
}
label {
    position: absolute;
    width: 45px;
    height: 22px;
    right: 20px;
    top: 20px;
    border: 2px solid;
    border-radius: 20px;
}
label:before {
    position: absolute;
    content: "";
    width: 20px;
    height: 20px;
    left: 1px;
    top: 1px;
    border-radius: 50%;
    cursor: pointer;
    background: #000;
    transition: 0.4s;
}
label.active:before {
    left: 24px;
    background: #fff;
}
body.night {
    background: #000;
    transition: 0.5s;
}
.container.night {
    background: black;
}
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;label id="dark-change"&amp;gt;&amp;lt;/label&amp;gt;
&amp;lt;div class="container"&amp;gt;
    &amp;lt;input type="text" class="storage" placeholder="Write something..."&amp;gt;
    &amp;lt;p class="text"&amp;gt;Text&amp;lt;/p&amp;gt;
    &amp;lt;button class="button"&amp;gt;Save&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
const storageInput = document.querySelector('.storage');
const text = document.querySelector('.text');
const button = document.querySelector('.button');
const storedInput = localStorage.getItem('textinput')

if(storageInput) {
    text.textContent = storedInput
}

storageInput.addEventListener('input', letter =&amp;gt; {
    text.textContent = letter.target.value
})

const saveToLocalStorage = () =&amp;gt; {
    localStorage.setItem('textinput', text.textContent)
}
button.addEventListener('click', saveToLocalStorage)


var content = document.getElementsByTagName('body', 'container')[0];
var darkMode = document.getElementById('dark-change');
darkMode.addEventListener('click', function() {
        darkMode.classList.toggle('active');
        content.classList.toggle('night');
})
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, don't forget to subscribe to my YouTube channel for new videos every week!&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/videos"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/videos&lt;/a&gt;&lt;/p&gt;

</description>
      <category>localstorage</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>#CodepenChallenge Click: Subscribe Call to Action</title>
      <author>Takane Ichinose</author>
      <pubDate>Thu, 08 Apr 2021 15:30:56 +0000</pubDate>
      <link>https://dev.to/takaneichinose/codepenchallenge-click-subscribe-call-to-action-3o7b</link>
      <guid>https://dev.to/takaneichinose/codepenchallenge-click-subscribe-call-to-action-3o7b</guid>
      <description>&lt;p&gt;A micro interaction of a subscription card. When clicked, the card will become a circle, and then a check mark will be drawn.&lt;/p&gt;

&lt;p&gt;This time, I didn't make a separate function for the other functionality of a React component. All are just in a nested function.&lt;/p&gt;

&lt;p&gt;I used GSAP to animate the elements.&lt;/p&gt;

&lt;p&gt;The bell icon came from FontAwesome. I only used one icon from them this time.&lt;/p&gt;

&lt;p&gt;I used the Open Sans font. I directly took it from the Assets part of this pen. Though, the font is uploaded on Google Fonts.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/takaneichinose/embed/RwKLzEG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Liman 1.7 Sürüm Duyurusu</title>
      <author>Baran Sekin</author>
      <pubDate>Thu, 08 Apr 2021 15:21:21 +0000</pubDate>
      <link>https://dev.to/liman/liman-1-7-surum-duyurusu-5gan</link>
      <guid>https://dev.to/liman/liman-1-7-surum-duyurusu-5gan</guid>
      <description>&lt;p&gt;HAVELSAN tarafından geliştirilmekte olan Liman MYS 1.7 sürümü 8 Nisan 2021 tarihinde Havelsan Açıklab Ekibi tarafından duyuruldu.&lt;/p&gt;

&lt;p&gt;Değişim Günlüğü&lt;br&gt;
-Command injection ve XSS gibi güvenlik açıklarına karşı önlem alındı.&lt;br&gt;
-Kullanıcı giriş ekranına Captcha koruması eklendi.&lt;br&gt;
-Kullanıcı giriş ekranında yanlış parola denemeleri için throttle eklendi.&lt;br&gt;
-Form validasyon hatalarının kullanıcıya detaylı gösterilmesi sağlandı.&lt;br&gt;
-Hata düzeltmeleri yapıldı.&lt;br&gt;
-Build operasyonları Github Actions'a taşındı.&lt;/p&gt;

&lt;p&gt;Kurulum için:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rehber.liman.dev/liman-kurulum/"&gt;https://rehber.liman.dev/liman-kurulum/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Django ajax request with axios and vanilla javascript (Tutorial)</title>
      <author>Nikhil Chandra Roy</author>
      <pubDate>Thu, 08 Apr 2021 15:07:29 +0000</pubDate>
      <link>https://dev.to/nikhilroy2/django-ajax-request-with-axios-and-vanilla-javascript-tutorial-37nh</link>
      <guid>https://dev.to/nikhilroy2/django-ajax-request-with-axios-and-vanilla-javascript-tutorial-37nh</guid>
      <description>&lt;p&gt;Hi there Nomosker, &lt;br&gt;
Hope everyone well.&lt;br&gt;
In this short tutorial, I will explain a bit about Django ajax with Axios.&lt;br&gt;
I have seen most of the tutorials used with jquery but in some cases, we are not using jquery so instantly we can use Axios to make it easy to understand.&lt;/p&gt;

&lt;p&gt;Let's do step by step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st app/urls.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path('developer', views.Developer, name="developer")&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2nd app/models.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class DeveloperList(models.Model):
    name = models.CharField(max_length=25)
    email = models.EmailField(max_length=25)
    country = models.CharField(max_length=25)
    def __str__(self):
        return self.name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3rd app/views.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Developer(request):
    developer_list = DeveloperList.objects.all()
    json_data = {}
    if request.method == 'POST':
        # get the input field name
        name = request.POST.get('name')
        email = request.POST.get('email')
        country = request.POST.get('country')

        # set in json 
        json_data['name'] = name
        json_data['email'] = email
        json_data['country'] = country

        # create the model to store in db
        DeveloperList.objects.create(
            name = name,
            email = email,
            country = country
        )
        #return the json
        return JsonResponse(json_data)

    return render(request, 'developer.html', {"developer_list": developer_list})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4th app/templates&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-templates-folder-and-put-developerhtml"&gt;
  &lt;/a&gt;
  create templates folder and put developer.html
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Ajax learning with axios&amp;lt;/title&amp;gt;

&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;


    &amp;lt;form method="post" onsubmit="return formSubmit()"&amp;gt;
        {% csrf_token %}
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="" class="form-label"&amp;gt;Name&amp;lt;/label&amp;gt;
            &amp;lt;input type="text" name="name" class="form-control"&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="" class="form-label"&amp;gt;Email&amp;lt;/label&amp;gt;
            &amp;lt;input type="eamil" name="email" class="form-control"&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="" class="form-label"&amp;gt;Country&amp;lt;/label&amp;gt;
            &amp;lt;input type="text" name="country" class="form-control"&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;Submit&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;

    {% if developer_list %}
    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt; Name &amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt; Email &amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt; Country &amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;tbody id="developer_list"&amp;gt;
            {% for developer in developer_list %}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt; {{developer.name}} &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt; {{developer.email}} &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt; {{developer.country}} &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            {% endfor %}
        &amp;lt;/tbody&amp;gt;
        &amp;lt;/thead&amp;gt;
    &amp;lt;/table&amp;gt;
    {% endif %}


    &amp;lt;script src='https://cdnjs.cloudflare.com/ajax/libs/axios/0.9.1/axios.js'&amp;gt;&amp;lt;/script&amp;gt;


    &amp;lt;script&amp;gt;

        function formSubmit() {
            event.preventDefault()
            axiosSetup()
        }

        function axiosSetup() {
            // for geting the input value to pass at server for collecting there value and save in db
            let data = new FormData()
            data.append('name', document.querySelector('input[name="name"]').value)
            data.append('email', document.querySelector('input[name="email"]').value)
            data.append('country', document.querySelector('input[name="country"]').value)
            data.append('csrfmiddlewaretoken', '{{csrf_token}}') // setup csrf_token as a post request

            // ....axios post request
            let url = '{% url "developer" %}' // self request so we call developer

            axios.post(url, data)
                .then(res =&amp;gt; { 
                    document.getElementById('developer_list').innerHTML += `
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt; ${res.data.name} &amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt; ${res.data.email} &amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt; ${res.data.country} &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    `
                })
                .catch(e =&amp;gt; console.log(e))
        }



    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5th go to terminal&lt;/strong&gt;&lt;br&gt;
run below the command one by one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;everything is ready so now, we can run our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6th run project&lt;/strong&gt;&lt;br&gt;
go to terminal again by &lt;code&gt;ctrl+&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like this short Django tutorial don't forget to like, comment, share.&lt;br&gt;
Thanks all.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>javascript</category>
      <category>axios</category>
    </item>
    <item>
      <title>Flask Command-Line - Open-Source Sample</title>
      <author>Sm0ke</author>
      <pubDate>Thu, 08 Apr 2021 15:04:08 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-command-line-open-source-sample-34m9</link>
      <guid>https://dev.to/sm0ke/flask-command-line-open-source-sample-34m9</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a Flask sample project that implements custom commands on top of &lt;strong&gt;Flask Command-Line&lt;/strong&gt; interface. Custom commands might be useful to implement maintenance tasks, inspect the application state in production, or simply to load new records into the database using a JSON file as input. The code, available on Github, can be extended with ease to cover more useful use-cases.&lt;/p&gt;

&lt;p&gt;Thank you! &lt;strong&gt;Content provided by &lt;a href="https://appseed.us"&gt;AppSeed - App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-command-line-blueprints"&gt;Flask Command-Line&lt;/a&gt; - sample project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-black"&gt;Flask Black Dashboard&lt;/a&gt; - the original starter&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7cyNgCOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8tl0p341t6tucsz8izm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cyNgCOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8tl0p341t6tucsz8izm.png" alt="Flask Command-Line - Sample Project provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;How to use the code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The sample code can be compiled with a few commands typed in the terminal if a Python3 environment is up &amp;amp; running on our workspace.  The first step is to clone the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Get the code&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-command-line.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-command-line
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install modules and set up the environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app is ready to be executed and we can list the registered (new) commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# List the new commands &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands
Usage: flask commands &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARGS]...

Options:
  &lt;span class="nt"&gt;--help&lt;/span&gt;  Show this message and exit.

Commands:
  cfg    List all Config Variables   &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; NEW Command
  hello  Simple Hello                &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; NEW Command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "Commands" node shows two commands that we can invoke and check the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands hello
Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Hello               &amp;lt;- The Output 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first command is fairly simple: prints a "Hello" message. The code can be found in the "&lt;a href="https://github.com/app-generator/flask-command-line-blueprints/blob/master/app/commands.py"&gt;commands&lt;/a&gt;" Blueprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;""" Simple Hello """&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Custom command - Hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the second custom command we are getting closer to something useful: list the configuration variables and optionally filter the output using an input string.&lt;/p&gt;

&lt;p&gt;Here is the code - defined in the same file (&lt;strong&gt;commands.py&lt;/strong&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cfg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'filter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" List all Config Variables """&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Custom command - Cfg(Filter="&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Filtered config
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;'  |- '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' -&amp;gt; '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Unfiltered config
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;'  |- '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' -&amp;gt; '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The above code read an optional parameter "filter" and iterate over the application config variables. If the "filter" parameter is defined, only the keys that match the filter are listed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Unfiltered output (list all keys)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None&lt;span class="o"&gt;)&lt;/span&gt;
  |- ENV -&amp;gt; production
  |- DEBUG -&amp;gt; False
  |- TESTING -&amp;gt; False
  |- PROPAGATE_EXCEPTIONS -&amp;gt; None
  |- PRESERVE_CONTEXT_ON_EXCEPTION -&amp;gt; None
  |- SECRET_KEY -&amp;gt; S3cr3t_K#Key
  |- PERMANENT_SESSION_LIFETIME -&amp;gt; 31 days, 0:00:00
  |- USE_X_SENDFILE -&amp;gt; False
  |- SERVER_NAME -&amp;gt; None
  |- APPLICATION_ROOT -&amp;gt; /
  |- SESSION_COOKIE_NAME -&amp;gt; session
  |- SESSION_COOKIE_DOMAIN -&amp;gt; None
  |- SESSION_COOKIE_PATH -&amp;gt; None
  |- SESSION_COOKIE_HTTPONLY -&amp;gt; True
  |- SESSION_COOKIE_SECURE -&amp;gt; False
  |- SESSION_COOKIE_SAMESITE -&amp;gt; None
...
&lt;span class="o"&gt;(&lt;/span&gt;truncated output&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;To see the filtered configuration keys, we should provide an extra input parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Filter ouput that matches `database`  &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg database
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;database&lt;span class="o"&gt;)&lt;/span&gt;
  |- SQLALCHEMY_DATABASE_URI -&amp;gt; sqlite:///...&lt;span class="se"&gt;\f&lt;/span&gt;lask-command-line-blueprints&lt;span class="se"&gt;\d&lt;/span&gt;b.sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Let's highlight all configuration parameters with "JSON" in their names:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Filter ouput that matches `JSON`&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg JSON
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;JSON&lt;span class="o"&gt;)&lt;/span&gt;
  |- JSON_AS_ASCII -&amp;gt; True
  |- JSON_SORT_KEYS -&amp;gt; True
  |- JSONIFY_PRETTYPRINT_REGULAR -&amp;gt; False
  |- JSONIFY_MIMETYPE -&amp;gt; application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this point, the code can be extended with ease to execute other useful tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;delete inactive user accounts&lt;/li&gt;
&lt;li&gt;extract sales information and other useful statistics&lt;/li&gt;
&lt;li&gt;notify users regarding new products and updates&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resource please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/cli/"&gt;Flask CLI&lt;/a&gt; (command-line interface)   - the official docs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://itnext.io/use-flask-cli-to-create-commands-for-your-postgresql-on-heroku-in-6-simple-steps-e8166c024c8d"&gt;Use Flask CLI to create commands for your PostgreSQL&lt;/a&gt; - blog article&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Starters&lt;/a&gt; - a curated index provided by &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QPr4seB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w9kc5ctl8ht1vrrp8k0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QPr4seB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w9kc5ctl8ht1vrrp8k0.png" alt="Flask Starter - Open-Source project provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>python</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Learn how to add a simple dark/light mode switcher!</title>
      <author>CristoferK</author>
      <pubDate>Thu, 08 Apr 2021 15:03:56 +0000</pubDate>
      <link>https://dev.to/cristoferk/learn-how-to-add-a-simple-dark-light-mode-switcher-29nh</link>
      <guid>https://dev.to/cristoferk/learn-how-to-add-a-simple-dark-light-mode-switcher-29nh</guid>
      <description>&lt;p&gt;Don't forget to subscribe to my YouTube channel! &lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
HTML

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Light/Dark mode&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;header&amp;gt;
    &amp;lt;label id="dark-change"&amp;gt;&amp;lt;/label&amp;gt;

&amp;lt;style&amp;gt;
body {
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}
main {
    margin: Svh 15%;
        align-content: center;
    align-items: center;
}
h1 {
    font-size: 40px;
    font-weight: 400;
    text-align: center;
}
img {
    width: 50%;
    height: auto;
}
p {
    text-align: justify;
    font-size: 18px;
}
label {
    position: absolute;
    width: 45px;
    height: 22px;
    right: 20px;
    top: 20px;
    border: 2px solid;
    border-radius: 20px;
}
label:before {
    position: absolute;
    content: "";
    width: 20px;
    height: 20px;
    left: 1px;
    top: 1px;
    border-radius: 50%;
    cursor: pointer;
    background: #000;
    transition: 0.4s;
}
label.active:before {
    left: 24px;
    background: #fff;
}
body.night {
    background: #000;
    color: #fff;
    transition: 0.5s;
}
&amp;lt;/style&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
    &amp;lt;h1&amp;gt;Easy Light/Dark mode&amp;lt;/h1&amp;gt;
    &amp;lt;div id="respon"&amp;gt;
        &amp;lt;img src="https://www.universityofcalifornia.edu/sites/default/files/night-sky-purple.jpg"&amp;gt;
        &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec malesuada tortor. Ut pharetra, velit ut facilisis scelerisque, tortor ligula imperdiet metus, et ultrices nisi erat at enim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vestibulum et erat in ultricies. Vivamus id nulla elementum, sagittis felis id, aliquet ligula.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/main&amp;gt;
&amp;lt;script&amp;gt;
var content = document.getElementsByTagName('body')[0];
var darkMode = document.getElementById('dark-change');
darkMode.addEventListener('click', function() {
        darkMode.classList.toggle('active');
        content.classList.toggle('night');
})
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
    </item>
    <item>
      <title>Proxying web feeds with Dancer2</title>
      <author>Dave Cross</author>
      <pubDate>Thu, 08 Apr 2021 15:00:18 +0000</pubDate>
      <link>https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1</link>
      <guid>https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1</guid>
      <description>&lt;p&gt;I registered the domain dave.org.uk in March 1999 and I've had a web site set up there since very soon after that. Over those twenty-two years, it's had a &lt;a href="https://web.archive.org/web/19990701000000*/https://dave.org.uk/"&gt;number of different looks&lt;/a&gt; and has been powered by various technologies. For a lot of the time, it was raw HTML; I then think I moved it to Movable Type for a while. But for the last few years, it's been running on WordPress.&lt;/p&gt;

&lt;p&gt;I've got a lot of time for WordPress. It's a nice content management system, but I've started to think that it's rather overcomplicated for a site that has mostly turned into a collection of widgets and web feeds that tell people what I've been doing on various other sites.&lt;/p&gt;

&lt;p&gt;Regular readers will know I've dabbled a bit with &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; and a few weeks ago, I started to wonder if I'd be better off running this site using those. I set up &lt;a href="https://github.com/davorg/dave.org.uk"&gt;a repo&lt;/a&gt; and started to investigate.&lt;/p&gt;

&lt;p&gt;The big limitation with GitHub pages is that it will only serve static pages. &lt;a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g"&gt;GitHub Actions gives us ways to mitigate that slightly&lt;/a&gt;, but that's not what I wanted here. For most of the pages on my site, I wanted to display data from other sites using some kind of Javascript widget.&lt;/p&gt;

&lt;p&gt;There are basically two scenarios to deal with. On the &lt;a href="https://dave.org.uk/reading/"&gt;Reading&lt;/a&gt; page, for example, I'm displaying my recent reading history from my Goodreads account. On the other hand, the &lt;a href="https://dave.org.uk/writing/"&gt;Writing&lt;/a&gt; page just displays the contents of a web feed. In the WordPress world, I just found &lt;a href="https://en-gb.wordpress.org/plugins/"&gt;plugins&lt;/a&gt; that did what I wanted, now I'd need to dig a bit deeper and find (or, perhaps, write) widgets to do this.&lt;/p&gt;

&lt;p&gt;I found a couple of widgets that did what I wanted (one for Goodreads and another for Instagram) but none of the web feed widgets I could find produced output that I was happy with. So I wrote my own. Actually, I wrote two - one for &lt;a href="https://github.com/davorg/rss_widget"&gt;RSS feeds&lt;/a&gt; and another for &lt;a href="https://github.com/davorg/rss_widget"&gt;Atom feeds&lt;/a&gt; (I should really spend the time to combine them into one). And when I was testing my solutions I kept falling over CORS errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;Cross-origin resource sharing&lt;/a&gt; (or CORS) is a mechanism that controls how domains are able to reuse resources from a different domain. And the default setting is that they probably can't.&lt;/p&gt;

&lt;p&gt;If you think about the RSS widget on my writing page, for example, it reads the &lt;a href="https://dev.to/feed/davorg"&gt;RSS feed for my dev.to&lt;/a&gt; posts, parses the data and then formats it into HTML which it then inserts into the page. It reads the RSS feed by making an HTTP request to the dev.to site. But CORS, by default, says that if you're not making a request from the domain that hosts the feed (i.e. dev.to) then you can't get that resource by making a Javascript request. You'll get a CORS error. The way to fix it is for the person hosting the feed you're interested in to add a header to the response saying that reuse is OK. The header looks like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Access-Control-Allow-Origin: http://www.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Or this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Access-Control-Allow-Origin: *
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The first allows reuse by requests from example.com; the second allows reuse by anyone (and is probably a bad idea).&lt;/p&gt;

&lt;p&gt;So I was getting these CORS errors while testing my RSS and Atom widgets. And they can only be fixed by the people who own the resources (i.e. the web feeds). Now, on the writing page, I was lucky. I own most of the sites where I blog - &lt;a href="https://perlhacks.com/"&gt;Perl Hacks&lt;/a&gt; and &lt;a href="https://blog.dave.org.uk"&gt;Davblog&lt;/a&gt; are both WordPress sites that I run. And I found a WordPress plugin that allowed me to add the required headers. I also blog on dev.to (as you'll see from this post!) and, luckily, dev.to already include the correct headers for my widgets to work.&lt;/p&gt;

&lt;p&gt;But not every page was as simple. I use &lt;a href="https://trakt.tv/"&gt;Trakt.tv&lt;/a&gt; to track the films and TV shows that I'm watching. They'll give me an Atom feed of what I've been watching recently, but it comes without the CORS header so I can't use it in my widget.&lt;/p&gt;

&lt;p&gt;And then I had an idea.&lt;/p&gt;

&lt;p&gt;CORS only blocks requests that come from browsers. Requests that come from back-end programs work just as they always have. So I could set up some kind of proxy system where I request a feed from a server that I control but that server then requests the data from another (non-CORS-friendly) site and passes the data back to the original requester with the CORS header added.&lt;/p&gt;

&lt;p&gt;Half an hour dabbling with &lt;a href="https://perldancer.org/"&gt;Dancer2&lt;/a&gt; and a bit of DNS and nginx configuration and &lt;a href="https://feeds.dave.org.uk/"&gt;feeds.dave.org.uk&lt;/a&gt; was working. Currently, it only runs two feeds - the Film and TV one I mentioned above and another which tells you what I've been listening to (through the magic of &lt;a href="https://www.last.fm/"&gt;Last.fm&lt;/a&gt; and their scrobbling service. Last.fm used to provide a web feed of tunes I'd been listening to, but they turned it off a few years ago and now I build a web feed from JSON I get back from their API (&lt;a href="https://github.com/davorg/lastfm-feed"&gt;the code to do it is online&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you go to the &lt;a href="https://feeds.dave.org.uk/"&gt;front page&lt;/a&gt;, you'll get a list of the available feeds. Clicking on one of those links will give you the required feed with the correct CORS feed added.&lt;/p&gt;

&lt;p&gt;The feed proxy code needs a lot of cleaning up, but it does the job. &lt;a href="https://github.com/davorg/feeds"&gt;It's on GitHub&lt;/a&gt; if you think it might be interesting to you.&lt;/p&gt;

&lt;p&gt;And the new version of my site is &lt;a href="https://davorg.dev/dave.org.uk/"&gt;coming together fast&lt;/a&gt;. I haven't switched the domain over yet, but it can't be that far away.&lt;/p&gt;

</description>
      <category>cors</category>
      <category>perl</category>
      <category>feeds</category>
      <category>dancer2</category>
    </item>
    <item>
      <title>How to Create a React.JS Application</title>
      <author>Rithik Samanthula</author>
      <pubDate>Thu, 08 Apr 2021 14:59:16 +0000</pubDate>
      <link>https://dev.to/code2rithik/how-to-create-a-react-js-application-2h8k</link>
      <guid>https://dev.to/code2rithik/how-to-create-a-react-js-application-2h8k</guid>
      <description>&lt;p&gt;Want to set up a local development environment for React.JS? Then this is the blog for you.&lt;/p&gt;

&lt;p&gt;This blog is for MAC and WINDOWS users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#here-are-the-steps"&gt;
  &lt;/a&gt;
  Here are the steps:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEg4zJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cku8mc2kevvdlm7pharx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEg4zJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cku8mc2kevvdlm7pharx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-checking-whether-nodejs-is-uptodate"&gt;
  &lt;/a&gt;
  1. Checking whether Node.JS is up-to-date
&lt;/h1&gt;

&lt;p&gt;First, open your terminal and type &lt;code&gt;node --version&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyPnSJGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyuenaz2tskq3lzteqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyPnSJGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyuenaz2tskq3lzteqm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check if it Matches with the Node.JS &lt;a href="https://nodejs.org"&gt;website&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPD-TxA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsi8b58bx368wqu8gibe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPD-TxA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsi8b58bx368wqu8gibe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-install-visual-studio-code"&gt;
  &lt;/a&gt;
  2. Install Visual Studio Code
&lt;/h1&gt;

&lt;p&gt;For this tutorial, I will be downloading Visual Studio Code because it is much easier to develop React Applications. If you would like to use another text editor, feel free to do so.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://code.visualstudio.com"&gt; Visual Studio Code's &lt;/a&gt; website and choose the operating system that you use&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Bno92fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8l59q51lgodnr897slx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Bno92fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8l59q51lgodnr897slx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, wait for some time for the ZIP file to download.&lt;/p&gt;

&lt;p&gt;After the ZIP file is completed downloading, double click on it.&lt;/p&gt;

&lt;p&gt;It will take a couple of seconds to do so.&lt;/p&gt;

&lt;p&gt;After that, Drag VSCode to your Applications Folder.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-using-createreactapp"&gt;
  &lt;/a&gt;
  3. Using &lt;code&gt;create-react-app&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Open a terminal and type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take a few minutes, so grab a cup of tea or coffee :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OwkVrfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i6bw6wqlnhmme7amphi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OwkVrfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i6bw6wqlnhmme7amphi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it is successful, you should get an image like this. If not, comment down in this blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4usUWFmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jtp5d6eemtgbvz7u8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4usUWFmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jtp5d6eemtgbvz7u8f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, &lt;code&gt;cd&lt;/code&gt; into the directory by using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open it in VSCode by using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQF3SOOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op6tt3kywjlkjpavsews.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQF3SOOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op6tt3kywjlkjpavsews.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, use the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vnYIkVzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gjd9om8idwz4qkxf5qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vnYIkVzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gjd9om8idwz4qkxf5qo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, Open &lt;code&gt;localhost:3000&lt;/code&gt; in your browser and VOILA, it opens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xk6vYpx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idfkmsn7ylow2bnsdif2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xk6vYpx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idfkmsn7ylow2bnsdif2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the page says, if you want to write your own react code, edit the &lt;code&gt;src/App.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Thanks for reading the blog.&lt;/p&gt;

&lt;p&gt;And remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>react</category>
      <category>createreactapp</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
