<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Superando el algoritmo de Infojobs</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 11 Jan 2022 09:02:01 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/superando-el-algoritmo-de-infojobs-9l6</link>
      <guid>https://dev.to/whitehatdevv/superando-el-algoritmo-de-infojobs-9l6</guid>
      <description>&lt;p&gt;Si, lo has le√≠do bien, he superado el algoritmo de Infojobs y he logrado que empresas me llamen para tener una entrevista. Y seguro que te preguntar√°s c√≥mo, o incluso, de que va eso del algoritmo de Infojobs. Empecemos por el principio. üßôüèº‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;Como quiz√°s hayas le√≠do en &lt;a href="https://dev.to/whitehatdevv/what-is-it-really-like-to-look-for-a-job-in-the-21st-century-3h74"&gt;entradas anteriores&lt;/a&gt;, llevo un tiempo metido en esto de buscar trabajo, y para ello, hago uso de todo un sinf√≠n de plataformas de b√∫squeda de trabajo, que en mi opini√≥n, te hacen perder m√°s el tiempo que ayudarte. Y hoy, como puedes leer en el t√≠tulo, me ha tocado pelearme con Infojobs. üí• &lt;/p&gt;

&lt;p&gt;Para el que no lo sepa, Infojobs es una plataforma de empleo que naci√≥ hace m√°s de dos d√©cadas y que se estableci√≥ como la plataforma referente a nivel espa√±ol para la b√∫squeda de trabajo. Pero desde entonces las cosas han cambiado (y mucho), pero parece que Infojobs se ha quedado tan atrasado como los peajes en carretera. Ambos son un proceso largo y tedioso para algo muy simple, y lo √∫nico que consiguen es hacernos perder el tiempo tras una cola infinita de personas. Aunque a pesar de las claras semejanzas, hay una diferencia abrumadora entre ellos dos, y es que en los peajes sabes con seguridad que, tarde o temprano, terminar√°s llegando al otro lado. üôÑ&lt;/p&gt;

&lt;p&gt;Pero no me quiero enrollar con analog√≠as. Yo he venido hoy a contarte la √∫ltima de mis peripecias para conseguir un trabajo en Infojobs (o al menos conseguir entrevistas con empresas). Ver√°s, en el momento que empec√© a buscar empleo, opt√© por utilizar Infojobs, ya que es (o quiz√°s ya podemos decir que era) la plataforma m√°s utilizada para ello. &lt;/p&gt;

&lt;p&gt;Reconozco que todo el proceso en Infojobs es muy sencillo, pero hay un peque√±o detalle en todo ello que siempre me inquietaba un poco, y era la velocidad con la que las empresas me rechazaban. Estoy seguro que a ti tambi√©n te ha pasado, verdad? Aplicar a una oferta y en poco menos de cinco minutos, recibir un mensaje de Infojobs diciendo que el curr√≠culum ha sido descartado, y lo peor de todo, sin saber el motivo. Pero vaya, que te rechace una empresa tampoco es algo extra√±o, lo extra√±o es cuando est√°s aplicando a ofertas a las 2 de la madrugada y recibes la respuesta de que no has sido seleccionado, y piensas: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúOk, vale, o yo tengo el reloj mal configurado o aqu√≠ pasa algo raro, porque no me creo que haya nadie de RRHH trabajando a estas horas&lt;/em&gt;‚Äù&lt;/p&gt;

&lt;p&gt;Y ah√≠ es cuando empieza toda la investigaci√≥n y descubro que no son las empresas quien te descartan, sino el programa de clasificaci√≥n de Infojobs. As√≠ es. Parece ser que desde hace un tiempo, empresas y plataformas emplean programas de escaneado para revisar los curr√≠culums de los candidatos en busca de coincidencias llamadas keywords (palabras clave). Si en tu curr√≠culum no aparecen las palabras que buscan, es casi seguro que te vas a ir directo a la carpeta de spam juntos con los mensajes de ‚ÄúEnhorabuena, has ganado un Iphone 8. Click aqu√≠!‚Äù üò±  &lt;/p&gt;

&lt;p&gt;Pero quiz√°s te preguntes, y c√≥mo logr√© superar este algoritmo de clasificaci√≥n? Pues modificando las palabras clave, amigo m√≠o. Como si fuera un cient√≠fico, me dediqu√© a realizar experimentos de prueba y error, en los que iba modificando determinadas palabras para as√≠ calibrar el algoritmo. Y cu√°l fue la conclusi√≥n de este experimento? Termin√© a√±adiendo en mi curr√≠culum casi toda la informaci√≥n de la oferta publicada. Incluso en el mismo orden! De esta forma, Infojobs al escanear mi curr√≠culum, me permite saltar al siguiente paso del proceso sin miedo a ser rechazado cinco minutos despu√©s de aplicar a cualquier oferta. üíÉüèº&lt;/p&gt;

&lt;p&gt;Este proceso no es una ciencia exacta, para que enga√±arnos, pero si existieran otras plataformas que se enfocasen en mejorar todo este proceso, personas como yo no tendr√≠amos que perder el tiempo en como lograr traspasar absurdos algoritmos y podr√≠amos invertir nuestro tiempo en lo que realmente importa de todo esto: encontrar un empleo. üí™&lt;/p&gt;

&lt;p&gt;Las cosas deben cambiar, eso est√° claro. Y cambiar√°n. Manteneros al tanto.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Open Source Chakra UI / Material UI Dashboard featured on Product Hunt</title>
      <author>Fredy Andrei</author>
      <pubDate>Tue, 11 Jan 2022 08:32:36 +0000</pubDate>
      <link>https://dev.to/fredy/open-source-chakra-ui-material-ui-dashboard-featured-on-product-hunt-2g1i</link>
      <guid>https://dev.to/fredy/open-source-chakra-ui-material-ui-dashboard-featured-on-product-hunt-2g1i</guid>
      <description>&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/vision-ui-dashboard/"&gt;https://www.producthunt.com/posts/vision-ui-dashboard/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>css</category>
    </item>
    <item>
      <title>Side Projects: React Digital Display - Part 1 </title>
      <author>Kamil Trusiak</author>
      <pubDate>Tue, 11 Jan 2022 07:20:00 +0000</pubDate>
      <link>https://dev.to/kamil7x/side-projects-react-digital-display-part-1-3g2m</link>
      <guid>https://dev.to/kamil7x/side-projects-react-digital-display-part-1-3g2m</guid>
      <description>&lt;p&gt;&lt;strong&gt;Think about this for a moment. You can find a great deal of reasons to make side projects ‚Äì such as learning, having fun or creating something that will be used and appreciated by others. It requires an ample amount of creativity and hard work.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Even though some may disagree, I think that there is way more pros than cons to this. In this series, we are going to write a little bit of code together and see what can be accomplished.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our first project is called React Digital Display. As the name suggests, it is a React component, which displays text. Although it looks quite simple, we will add one lovely feature: it will be able to take different components as display modules and use them under the hood. For example, it can be a 7-segment module, or a dot matrix, or anything you can imagine. It does not even have to look like LED.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qC2PVoL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94vki6pq1aevpsxk1ort.png" alt="Final component" width="880" height="139"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Our component in two versions: 7-segment module and 5x7 dot matrix&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#warming-up-before-the-main-course"&gt;
  &lt;/a&gt;
  Warming Up Before the Main Course
&lt;/h2&gt;

&lt;p&gt;Firstly, let's prepare the necessary list of requirements. Obviously, I have many more ideas in store, but we will start with the basic ones. As far as I can see it, the user should be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the text to display&lt;/li&gt;
&lt;li&gt;Choose the display module type&lt;/li&gt;
&lt;li&gt;Set the display size (how many modules are in a row)&lt;/li&gt;
&lt;li&gt;Set the display height&lt;/li&gt;
&lt;li&gt;Choose how to proceed if the module does not support certain characters:

&lt;ul&gt;
&lt;li&gt;display an empty space&lt;/li&gt;
&lt;li&gt;omit a character and display the next one&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we can write the first interface that describes the props of the component. It will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ReactDigitalDisplayProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DisplayModule&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;unknownCharacterMode&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UnknownCharacterMode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are looking at this, you probably have some questions. Let me explain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why are we using &lt;code&gt;string | string[]&lt;/code&gt; for &lt;code&gt;text&lt;/code&gt;, if there is only one row?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The answer is simple. Module will display "character", but it doesn't need to be defined by single ASCII character. For example, we will use the special &lt;code&gt;EMPTY&lt;/code&gt; character to indicate that there is nothing to display. This is useful for &lt;code&gt;unknownCharacterMode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is &lt;code&gt;UnknownCharacterMode&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a simple union of two strings, which are our methods for handling unsupported characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UnknownCharacterMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;omit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;empty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It could be an enum, but in this case it is not necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is &lt;code&gt;DisplayModule&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The answer to this question is a little more complicated. I will  deal with it later in this text.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-define-a-module"&gt;
  &lt;/a&gt;
  How to define a module
&lt;/h2&gt;

&lt;p&gt;The display module is a component whose only job is to display the character. We can write a simple interface for it, and any module created by us or anyone else should implement that interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DisplayModuleProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;char&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each module needs a list of supported characters and information about how to display them. We will call this a charset, and that's also the name of our interface that describes it. Let us take a quick look at it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Charset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DataType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SpecialChar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMPTY&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;SpecialChar&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different modules have different needs, that's why we need to use a generic here. For example, the 7-segment module will use an array of 7 booleans as its &lt;code&gt;DataType&lt;/code&gt;, while the dot matrix will require a 2-dimensional array. The only character required is &lt;code&gt;EMPTY&lt;/code&gt;, which describes how the empty state of the display module should be represented. I also added the possibility to define other special characters, but this is the only one at the moment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-exactly-is-raw-displaymodule-endraw-"&gt;
  &lt;/a&gt;
  What exactly is &lt;code&gt;DisplayModule&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Our main component will have two responsibilities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Taking care of unsupported characters&lt;/li&gt;
&lt;li&gt;Scaling of the module for a given height&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to do this, it needs to know what characters are supported and what the dimensions of the module are. And this information must be provided by the module itself. Here you can see how it is done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DisplayModule&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DataType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ElementType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DisplayModuleProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Charset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DataType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, it's a &lt;code&gt;React.ElementType&lt;/code&gt; (it allows the use of function and class components) with additional static properties for metadata, required by the &lt;code&gt;ReactDigitalDisplay&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Now we can move on to the more interesting part - writing the actual components.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#first-module"&gt;
  &lt;/a&gt;
  First module
&lt;/h2&gt;

&lt;p&gt;Before we write the main component, let us create our first module. We will start with 7-segment display. As the name suggests, it consists of seven segments. In real life, these displays also have a dot, but we will leave that out for now. The segments are named from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;g&lt;/code&gt;, as shown below:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfhzXDIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhhhpr2x9btkav5pot41.png" alt="Single 7-segment display module" width="150" height="200"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;(picture from &lt;a href="https://en.wikipedia.org/wiki/Seven-segment_display"&gt;https://en.wikipedia.org/wiki/Seven-segment_display&lt;/a&gt;)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To begin, we will define the &lt;code&gt;DataType&lt;/code&gt; of the module. As I said before, it will be an array of 7 boolean values and we can use tuple for it. Tuple is a fixed length array where you can define the type for each element. They could be different, but that is not the case. We can also add labels for each element to help us understand the meaning of these booleans. You can read more about tuples &lt;a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Module7SegmentsDataType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the data type, now we can start creating a module. It will be a &lt;code&gt;DisplayModule&lt;/code&gt; with basic markup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Module7Segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DisplayModule&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Module7SegmentsDataType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Module7Segments&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we implement the whole module, we have to create a single segment component. It can be either horizontal or vertical - and we also need its active state. The last property will be &lt;code&gt;className&lt;/code&gt; for positioning. &lt;/p&gt;

&lt;p&gt;I will not go into the details of full implementation at the moment. In short, the segment is a single &lt;code&gt;div&lt;/code&gt; element. We use its &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo-elements to create two halves. After we apply colour to one of the borders and transparency to two others, each half will look like a trapezoid. We just need to position it correctly to make it look like a proper segment.&lt;/p&gt;

&lt;p&gt;You can find the full code at &lt;a href="https://github.com/kamil7x/side-project/blob/blog-part-1/libs/react-digital-display/src/lib/module-7-segments/module-7-segments.module.scss"&gt;this link&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SegmentProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horizontal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Segment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SegmentProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horizontal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have segments and we have an empty module component. Let us put this together. We start with a list of segments with key (the same as for the tuple label) and orientation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SEGMENTS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SegmentProps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horizontal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horizontal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horizontal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After defining our segments, we can render them and add positoning via CSS. Now our component looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;SEGMENTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Segment&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;isActive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Module7Segments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`segment-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;segment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, we need to define the character set for our display module. Currently it is only the digits 0-9, but in the future it can be extended to other characters. At the end, we need to append the charset to our module so that it is available to the &lt;code&gt;ReactDigitalDisplay&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Module7SegmentsCharset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Charset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Module7SegmentsDataType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SpecialChar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMPTY&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;Module7Segments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Module7SegmentsCharset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the styling is complete, we can calculate the final dimensions of the module in pixels and assign them to the module as static properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Module7Segments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;164&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Module7Segments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below you can see what our module looks like.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_doP483W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqh755l6x6h88zjxo9va.png" alt="Single display module" width="152" height="253"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Final view of 7-segment module&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#all-in-a-nutshell"&gt;
  &lt;/a&gt;
  All in a nutshell
&lt;/h2&gt;

&lt;p&gt;That's all for today. We have planned our work and created the first module for our component. The full code is available in &lt;a href="https://github.com/kamil7x/side-project/tree/blog-part-1/libs/react-digital-display"&gt;this repository&lt;/a&gt;. Next time we will implement the main component and use the newly created module to display text.&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Striver's SDE Sheet Journey - #12 Count inversions in an array</title>
      <author>sachin26</author>
      <pubDate>Tue, 11 Jan 2022 07:17:33 +0000</pubDate>
      <link>https://dev.to/sachin26/strivers-sde-sheet-journey-12-count-inversions-in-an-array-4phl</link>
      <guid>https://dev.to/sachin26/strivers-sde-sheet-journey-12-count-inversions-in-an-array-4phl</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem Statement&lt;/u&gt; :-&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Given an array of N integers, count the inversion of the array.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;An inversion is defined for a pair of integers in the array when the following two conditions are met.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ARR[i] &amp;gt; ARR[j]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i &amp;lt; j&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt; :  &lt;code&gt;array = [2, 5, 1, 3, 4]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt; : &lt;code&gt;4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: &lt;em&gt;We have a total of 4 pairs which satisfy the condition of inversion. (2, 1), (5, 1), (5, 3) and (5, 4).&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 1&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;we can solve this problem by using two nested loop,but it will cost &lt;code&gt;n^2&lt;/code&gt; time complexity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; initialise a variable &lt;code&gt;pairs=0&lt;/code&gt; .&lt;br&gt;
&lt;strong&gt;step-2&lt;/strong&gt; run a loop from &lt;code&gt;i=0&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; run another loop from &lt;code&gt;j=i+1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;check, if &lt;code&gt;arr[i] &amp;gt; arr[j]&lt;/code&gt; is true, then increase the inversion count.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;step-3&lt;/strong&gt; end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;getInversions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

     &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;

          &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;

              &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 2&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;we can also solve this problem by using the &lt;strong&gt;Merge Sort&lt;/strong&gt; algorithm. if you know, how we merge two sorted subarrays in the merge sort algorithm then you can easily understand this solution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;while merging the subarrays, count inversion pairs, &lt;br&gt;
if an element of the left subarray is greater than an element of the right subarray.&lt;/p&gt;

&lt;p&gt;let's visually understand how we solve this problem while merging two subarrays.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array = [5,3,2,1,4]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--95QM_F-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/878b9aimaz5megwmyvjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--95QM_F-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/878b9aimaz5megwmyvjh.png" alt="Count inversions in an array" width="400" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see &lt;code&gt;5&lt;/code&gt; is greater than &lt;code&gt;3&lt;/code&gt; which means it satisfies the first condition of inversion pairs and it also satisfies the second one,&lt;code&gt;i&amp;lt;j&lt;/code&gt;.&lt;br&gt;
we have found the first inversion pair while merging two subarrays.&lt;br&gt;
pairs - &lt;code&gt;(5,3)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUZIT_C8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijbu41uyz8iqvfvcorpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUZIT_C8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijbu41uyz8iqvfvcorpa.png" alt="Count inversions in an array" width="400" height="500"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;3 &amp;gt; 2&lt;/code&gt; &amp;amp;&lt;code&gt;5 &amp;gt; 2&lt;/code&gt; this pairs also satisfy the both conditions then we will count them as inversion pairs.&lt;br&gt;
pairs - &lt;code&gt;(3,2)&lt;/code&gt; &lt;code&gt;(5,2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzE7VhwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ztzsljsq0um8s1rwh5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzE7VhwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ztzsljsq0um8s1rwh5j.png" alt="Count inversions in an array" width="400" height="500"&gt;&lt;/a&gt;&lt;br&gt;
now this time, the left subarray element &lt;code&gt;1&lt;/code&gt; is not greater than the right subarray element &lt;code&gt;4&lt;/code&gt;, which does not satisfy the first condition of the inversion pairs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h33tPqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5jqcri3ou8tjcwzdnui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h33tPqgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5jqcri3ou8tjcwzdnui.png" alt="Count inversions in an array" width="400" height="500"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;2 &amp;gt; 1&lt;/code&gt; then we can makes - &lt;code&gt;(2,1)&lt;/code&gt; &lt;code&gt;(3,1)&lt;/code&gt; &lt;code&gt;(5,1)&lt;/code&gt; pairs.&lt;br&gt;
&lt;code&gt;2 &amp;lt; 4&lt;/code&gt; doesn't satisfy the conditions.&lt;br&gt;
&lt;code&gt;3 &amp;lt; 4&lt;/code&gt; doesn't satisfy the conditions.&lt;br&gt;
&lt;code&gt;5 &amp;gt; 4&lt;/code&gt; then - &lt;code&gt;(5,4)&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;getInversions&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Write your code here.&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;mergeSort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mergeSort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

    &lt;span class="c1"&gt;// return if arr size becomes 1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


    &lt;span class="c1"&gt;// calculate the mid&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


    &lt;span class="n"&gt;mergeSort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mergeSort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

   &lt;span class="o"&gt;}&lt;/span&gt;

     &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

    &lt;span class="c1"&gt;// calculate the size of left &amp;amp; right subarrays&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;leftArrSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rightArrSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// initialise temp subarrays&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;leftArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leftArrSize&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rightArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rightArrSize&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// copy left &amp;amp; right array into temp arrays&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;leftArrSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;leftArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rightArrSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rightArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// set initial indexes of subarrays&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;leftPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rightPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arrPointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// copy temp subarrays, in ascending order&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPointer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;leftArrSize&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rightPointer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rightArrSize&lt;/span&gt; &lt;span class="o"&gt;){&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leftPointer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;rightArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rightPointer&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leftPointer&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="n"&gt;leftPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rightPointer&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="n"&gt;rightPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
         &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;leftArrSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;leftPointer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="c1"&gt;// copy the remaining elements of left subarray into a marge array&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftPointer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;leftArrSize&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leftPointer&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
      &lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
      &lt;span class="n"&gt;leftPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// copy the remaining elements of right subarray into a merge array&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightPointer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rightArrSize&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightArr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rightPointer&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
      &lt;span class="n"&gt;arrPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
      &lt;span class="n"&gt;rightPointer&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;



   &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The Time &amp;amp; Space complexity will be the same as the Merge Sort algorithm, &lt;strong&gt;O(Nlogn)&lt;/strong&gt;, bcoz we add some lines of code for counting the inversion pairs.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;thank you for reading this article, if you find any mistakes, let me know in the comment section and save it for future use.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>dsa</category>
      <category>java</category>
    </item>
    <item>
      <title>How to Create a Button in JavaScript</title>
      <author>Ga√´l Thomas</author>
      <pubDate>Tue, 11 Jan 2022 07:09:25 +0000</pubDate>
      <link>https://dev.to/gaelgthomas/how-to-create-a-button-in-javascript-2cf</link>
      <guid>https://dev.to/gaelgthomas/how-to-create-a-button-in-javascript-2cf</guid>
      <description>&lt;p&gt;Learn how to create a button in JavaScript and add it to your HTML page.&lt;/p&gt;




&lt;p&gt;As a web developer, you should probably create buttons and add them to your HTML page programmatically.&lt;/p&gt;

&lt;p&gt;A typical workflow is to validate some data in your JavaScript code before displaying a button in HTML to your users.&lt;/p&gt;

&lt;p&gt;Before starting, let me show you what you will achieve!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Can you click me?&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJFdZ6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3wmdforfzz3du0ju18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJFdZ6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3wmdforfzz3du0ju18.png" alt="HTML button in JS" width="268" height="62"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the button, your JavaScript code will trigger an alert.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwyE6jK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nl6v4nzrnxrpn8o9ejk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwyE6jK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nl6v4nzrnxrpn8o9ejk.png" alt="Button in JavaScript with on click Alert" width="852" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's dive into that tutorial!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-button-using-document-raw-createelement-endraw-"&gt;
  &lt;/a&gt;
  1. Create a button using document &lt;code&gt;createElement&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;To create a button in JavaScript, you must use the &lt;code&gt;createElement&lt;/code&gt; function available by default in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document"&gt;the Document interface&lt;/a&gt; of your web page.&lt;/p&gt;

&lt;p&gt;Then, you will configure the button with a "Can you click me?" text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a button element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Set the button text to 'Can you click me?'&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can you click me?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a side note, you can add a lot of properties to a button when creating it. This tutorial only sets the &lt;code&gt;innerText&lt;/code&gt; because we don't need the other properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-add-an-event-listener-on-your-button"&gt;
  &lt;/a&gt;
  2. Add an event listener on your button
&lt;/h2&gt;

&lt;p&gt;The next step is to create &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener"&gt;an event listener&lt;/a&gt; on your button. It will allow you to detect when a user clicks on it.&lt;/p&gt;

&lt;p&gt;Whenever the "click" event is detected, the arrow function (second parameter) is launched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Attach the "click" event to your button&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// When there is a "click"&lt;/span&gt;
  &lt;span class="c1"&gt;// it shows an alert in the browser&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oh, you clicked me!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-add-your-js-button-to-your-html"&gt;
  &lt;/a&gt;
  3. Add your JS button to your HTML
&lt;/h2&gt;

&lt;p&gt;The last step is to add your button to the HTML body.&lt;/p&gt;

&lt;p&gt;After that, you will have the same result as the beginning example!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add the button to your HTML &amp;lt;body&amp;gt; tag&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-code-to-create-a-button-in-js"&gt;
  &lt;/a&gt;
  Full code to create a button in JS üëá
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Create a Button in JavaScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Empty &amp;lt;body&amp;gt; HTML (the JavaScript code in &amp;lt;script&amp;gt; will generate a button here)--&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// Create a button element&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;// Set the button text to 'Can you click me?'&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can you click me?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mainButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="c1"&gt;// Attach the "click" event to your button&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// When there is a "click"&lt;/span&gt;
        &lt;span class="c1"&gt;// it shows an alert in the browser&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oh, you clicked me!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congrats! üéâ Now you know how to programmatically create buttons using JavaScript. You can go a bit further by learning &lt;a href="https://herewecode.io/blog/enable-and-disable-button-javascript/"&gt;how to enable and disable a button in JavaScript&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;‚û°Ô∏è I'm starting to tweet more consistently. If you want to get more tips and resources about web development, developer tips, and my journey as a Full-stack Engineer -&amp;gt; &lt;a href="https://twitter.com/gaelgthomas/"&gt;Find me on my Twitter üê¶&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Get JavaScript Objects from a JSON File</title>
      <author>nikhil sharma</author>
      <pubDate>Tue, 11 Jan 2022 06:44:09 +0000</pubDate>
      <link>https://dev.to/sharma2288/get-javascript-objects-from-a-json-file-2c86</link>
      <guid>https://dev.to/sharma2288/get-javascript-objects-from-a-json-file-2c86</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;JSON stands for JavaScript Object Notation.JSON is a lightweight format for storing and transporting data.JSON is often used when data is sent from a server to a web page.JSON is "self-describing" and easy to understand. JavaScript objects are an integral part of the React app, so they need to get accessed from JSON files/data to be uses in components.&lt;/p&gt;

&lt;p&gt;This blog will demonstrate how to get a JavaScript object from a JSON file or access it using a fetch() HTTP request.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rendering-values-from-a-json-file"&gt;
  &lt;/a&gt;
  Rendering Values from a JSON File
&lt;/h4&gt;

&lt;p&gt;Create one sample JSON file as given below, and save it as data.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"employees":{
"employee1": {"firstName":"John", "lastName":"Doe"},
"employee2": {"firstName":"Anna", "lastName":"Smith"},
"employee3": {"firstName":"Peter", "lastName":"Jones"}
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you want to render any of the key-value pairs from the JSON, the .map() function would be useful to iterate the objects; the example is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from "react";
// Import local JSON file
import Data from "./data";

export class Sample extends Component {
  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h3&amp;gt;Using local JSON file&amp;lt;/h3&amp;gt;
          {Object.keys(Data.employees).map((item, i) =&amp;gt; (
            &amp;lt;li key={i}&amp;gt;
              &amp;lt;span&amp;gt;Key name : {item}&amp;lt;/span&amp;gt;
            &amp;lt;/li&amp;gt;
          ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/&amp;gt;
    );
  }
}

export default Sample;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, to use the local JSON file needs to be consumed using the import statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Data from "./data";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you can access all the JSON data using Data in your component by using Object.keys() along with the .map() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{Object.keys(Data.employees).map((item, i) =&amp;gt; ())}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a local JSON file in the React app is a common approach when you want to render some static data, maintain server config, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rendering-json-objects-from-an-api-call"&gt;
  &lt;/a&gt;
  Rendering JSON Objects from an API Call
&lt;/h4&gt;

&lt;p&gt;You have seen the example where a local JSON file is used, but at the same time you may need to access JSON data from the server.&lt;/p&gt;

&lt;p&gt;Implement the API call as demonstrated below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;componentDidMount() {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res =&amp;gt; res.json())
      .then(
        result =&amp;gt; {
          this.setState({
            data: result
          });
        },
        error =&amp;gt; {
          console.log(error);
        }
      );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After implementing the API call, you can access the JSON data for the rendering as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h3&amp;gt;Using API call&amp;lt;/h3&amp;gt;
          {this.state.data &amp;amp;&amp;amp;
            this.state.data.length &amp;gt; 0 &amp;amp;&amp;amp;
            this.state.data.map((item, i) =&amp;gt; (
              &amp;lt;li key={i}&amp;gt;
                &amp;lt;span&amp;gt;Email : {item.email}&amp;lt;/span&amp;gt;
              &amp;lt;/li&amp;gt;
            ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Along with the state this.state.data, the additional function used is .map(), which iterates the array items from the state and renders them into the DOM.&lt;/p&gt;

&lt;p&gt;Hope ou enjoyed the blog post!!&lt;/p&gt;

&lt;p&gt;Please feel free to like, save and comment your thoughts!!&lt;/p&gt;

&lt;p&gt;Happy Reading!!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is Amazon S3 bucket</title>
      <author>Abhishek Ramesh Pakhare</author>
      <pubDate>Tue, 11 Jan 2022 06:44:00 +0000</pubDate>
      <link>https://dev.to/abhishekpakhare97/what-is-amazon-s3-bucket-5dof</link>
      <guid>https://dev.to/abhishekpakhare97/what-is-amazon-s3-bucket-5dof</guid>
      <description>&lt;p&gt;S3 is relatively different from normal storage. It is an &lt;strong&gt;object storage&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is an Object storage ?&lt;br&gt;
 Object storage is a data storage architecture for large stores of unstructured data. It designates each piece of data as an object, keeps it in a separate storehouse, and bundles it with metadata and a unique identifier for easy access and retrieval.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;S3 is an unstructured data that eliminates the problem scaling of limitless storage.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-bucket-"&gt;
  &lt;/a&gt;
  what is bucket ?
&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;bucket&lt;/strong&gt; is a container for objects. An object is a file and any metadata that describes that file.&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;Bucket can be consider as folder and the object can be considered as file that you upload&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#things-to-keep-in-mind-while-working-with-s3-"&gt;
  &lt;/a&gt;
  Things to keep in mind while working with S3 :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you want to modify a file on S3 then you need to modify that file on local and reupload it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bucket name should be globally unique across the AWS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;maximum size of a single object can be 5TB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;by default you can create 100 buckets per account but you can increase it upto 1000 according to your need&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS will keep your data in 3 AZ(Availability Zone) for security purpose.&lt;br&gt;
For some reason if one of the AZ is down or crashed then you data is still secure in other two.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-s3-storage-"&gt;
  &lt;/a&gt;
  Types of S3 storage :
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-amazon-s3-standard-"&gt;
  &lt;/a&gt;
  1. Amazon S3 Standard :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you frequently want to do I/O operations or on hourly basis then S3 standard is best option.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-amazon-s3-standardinfrequent-access-amazon-s3-standardia-"&gt;
  &lt;/a&gt;
  2. Amazon S3 Standard-Infrequent Access (Amazon S3 Standard-IA) :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you are access data less frequently like in a week or in a month then S3 standard infrequent is best.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#3-amazon-s3-intelligenttiering-"&gt;
  &lt;/a&gt;
  3. Amazon S3 intelligent-Tiering :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At the time of storing the data you don't know how frequently you are going to access it then you can.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will analyze the access pattern and then according that it will store the to S3 standard or on S3 standard-infrequent Access because it is costly to store data in S3 standard compare to S3 infrequent&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#4-amazon-s3-one-zoneinfrequent-access-amazon-s3-one-zoneia-"&gt;
  &lt;/a&gt;
  4. Amazon S3 One Zone-Infrequent Access (Amazon S3 One Zone-IA) :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you store data in a Region it will replicate your data in three availability zone in a region. but class won't store your data in 3 AZ's.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can store non critical data in this.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#5-amazon-s3-glacier-"&gt;
  &lt;/a&gt;
  5. Amazon S3 Glacier :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you want to access data in a month or a year then you can prefer this locations&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#6-amazon-s3-glacier-deep-archive-"&gt;
  &lt;/a&gt;
  6. Amazon S3 Glacier Deep Archive :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you want to store data for 7 to 10 years or more then that you can go with it&lt;/li&gt;
&lt;li&gt;it is the cheapest option in all the S3 classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be posting more content regarding AWS and many more make sure to follow me.&lt;/p&gt;

&lt;p&gt;Dev.to : &lt;a href="https://dev.to/abhishekpakhare97"&gt;https://dev.to/abhishekpakhare97&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github : &lt;a href="https://github.com/AbhiPakhare"&gt;https://github.com/AbhiPakhare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/abhi_pakhare_"&gt;https://twitter.com/abhi_pakhare_&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linkedin : &lt;a href="https://www.linkedin.com/in/abhishek-pakhare/"&gt;https://www.linkedin.com/in/abhishek-pakhare/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>s3</category>
      <category>cloud</category>
      <category>storage</category>
    </item>
    <item>
      <title>99% –æ—à–∏–±–æ–∫ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</title>
      <author>Savchenko Alexander</author>
      <pubDate>Tue, 11 Jan 2022 06:40:43 +0000</pubDate>
      <link>https://dev.to/savchenko91/99-oshibok-my-pokazyvaiem-polzovatieliu-14kl</link>
      <guid>https://dev.to/savchenko91/99-oshibok-my-pokazyvaiem-polzovatieliu-14kl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%BD%D0%B0%D1%8F-%D1%87%D0%B0%D1%81%D1%82%D1%8C"&gt;
  &lt;/a&gt;
  –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#%D1%87%D0%B0%D1%81%D1%82%D1%8C-1"&gt;
  &lt;/a&gt;
  –ß–∞—Å—Ç—å 1
&lt;/h2&gt;

&lt;p&gt;99% –æ—à–∏–±–æ–∫ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û–±—ã—á–Ω–æ –º—ã –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –ø–æ–ª–µ–º. –ß—Ç–æ –∂–µ —Ç–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è? –ï—Å–ª–∏ –º—ã 99% –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –Ω–∏—Ö –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç? –ö–∞–∫ –¥–ª—è –±—ç–∫–∞, —Ç–∞–∫ –∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞?&lt;br&gt;
–ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–∏–µ –ø–æ–ª—è –±—É–¥—É—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å?&lt;/p&gt;

&lt;p&gt;–î–∞–≤–∞–π—Ç–µ –Ω–∞–∑–æ–≤–µ–º –Ω–∞—à—É –æ—à–∏–±–∫—É &lt;code&gt;BaseError&lt;/code&gt; –∏ —É–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Error. –ü–µ—Ä–≤–æ–µ —á—Ç–æ –≤ –Ω–µ–π —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç —Ç–∞–∫ —ç—Ç–æ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ message.&lt;br&gt;
–≠—Ç–æ –æ—à–∏–±–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º—ã –µ–µ –Ω–∏–∫–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ–º! &lt;/p&gt;

&lt;p&gt;–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–ª–µ &lt;code&gt;errorCode&lt;/code&gt;. &lt;br&gt;
–ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;uniqConstraint&lt;/li&gt;
&lt;li&gt;formatConstraint&lt;/li&gt;
&lt;li&gt;connection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–¢–µ–ø–µ—Ä—å –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—è –º—ã —Å–º–æ–∂–µ–º —Å–º–∞–ø–∏—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏&lt;/li&gt;
&lt;li&gt;–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç&lt;/li&gt;
&lt;li&gt;–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Db error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"connection"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∏–Ω–∏–º—É–º&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%D1%87%D0%B0%D1%81%D1%82%D1%8C-2"&gt;
  &lt;/a&gt;
  –ß–∞—Å—Ç—å 2
&lt;/h2&gt;

&lt;p&gt;–ß—Ç–æ –µ—Å–ª–∏ –Ω–∞–º –Ω–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞? &lt;br&gt;
–î–æ–±–∞–≤–∏–º –ø–æ–ª–µ &lt;code&gt;key&lt;/code&gt;. &lt;br&gt;
–ê –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ —ç—Ç–æ–º –±—ã–ª–æ? &lt;br&gt;
–î–æ–±–∞–≤–∏–º –ø–æ–ª–µ &lt;code&gt;value&lt;/code&gt;.&lt;br&gt;
–Ø –±—ã –Ω–∞–∑–≤–∞–ª —ç—Ç—É –æ—à–∏–±–∫—É &lt;code&gt;CollectableError&lt;/code&gt;.&lt;br&gt;
–¢–∞–∫ –∂–µ –¥–æ–±–∞–≤–∏–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ errors –≤ &lt;code&gt;BaseError&lt;/code&gt;, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–∞–¥–æ –∫—É–¥–∞-—Ç–æ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–∞—à–∏ &lt;code&gt;CollectableError&lt;/code&gt;—ã.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Validation error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"invalid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"errors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"validateNotUndefined"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"required"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"validateString"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"not string"&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;–í—ã–≤–æ–¥–∏–º: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;–ü–æ–ª–µ "username" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ&lt;/li&gt;
&lt;li&gt;–§–æ—Ä–º–∞—Ç "password" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –∞ –ø–æ–ª—É—á–µ–Ω–æ —á–∏—Å–ª–æ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–í–∏–¥–∏—Ç–µ! –ù–∞–º —Ç–µ–ø–µ—Ä—å message –≤–æ–æ–±—â–µ –Ω–µ –Ω—É–∂–µ–Ω! –ú—ã —Ç–µ–ø–µ—Ä—å —Å –ª–µ–≥–∫–æ—Å—Ç—å—é —Å–∞–º–∏ –º–æ–∂–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π –Ω–∞–º —Ç–µ–∫—Å—Ç.&lt;/p&gt;

&lt;p&gt;–Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ —Å—Ç–∞–ª –∫–ª–∞—Å—Ç—å &lt;code&gt;CollectableError&lt;/code&gt; –≤ –º–∞—Å—Å–∏–≤, –∞ –ø–æ–ª–æ–∂–∏–ª –≤ –æ–±—å–µ–∫—Ç –ø–æ –∫–ª—é—á—É –¥—É–±–ª–∏—Ä—É—é—â–∏–π &lt;code&gt;key&lt;/code&gt;: —Ç–∞–∫ –Ω–∞–º–Ω–æ–≥–æ —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—à–∏–±–∫–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D1%87%D0%B0%D1%81%D1%82%D1%8C-3"&gt;
  &lt;/a&gt;
  –ß–∞—Å—Ç—å 3
&lt;/h2&gt;

&lt;p&gt;–ß–∞—Å—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç –Ω–µ–≥–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ/–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω. &lt;br&gt;
–î–ª—è —ç—Ç–æ–≥–æ –¥–æ–±–∞–≤–∏–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º &lt;code&gt;key2&lt;/code&gt; –∏ &lt;code&gt;value2&lt;/code&gt;.&lt;br&gt;
–í –º–∞–ª–µ–Ω—å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–µ &lt;code&gt;key2&lt;/code&gt; —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω: pattern, max, min.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Validation error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"invalid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"errors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nick"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"min"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"validateNotLessThan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"too less symbols"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nick@com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"key2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pattern"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"value2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@.*?."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"validateByPattern"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"does not match the pattern"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;–í—ã–≤–æ–¥–∏–º:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;–ü–æ–ª–µ "username" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ 4&lt;/li&gt;
&lt;li&gt;–ü–æ–ª–µ "email" –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—É: @.*?.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#%D0%BA%D0%BB%D0%B8%D0%B5%D0%BD%D1%82%D1%81%D0%BA%D0%B0%D1%8F-%D1%87%D0%B0%D1%81%D1%82%D1%8C"&gt;
  &lt;/a&gt;
  –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å
&lt;/h1&gt;

&lt;p&gt;–ê —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. &lt;/p&gt;

&lt;p&gt;–í–∏–¥–µ–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –ø—Ä–∏–º–µ—Ä–∞? –ß—Ç–æ –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∫–∏–¥—ã–≤–∞—é—Ç —ç—Ç–∏ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? –ú–∏–Ω–∏–º—É–º –ª–∏—à–Ω–∏—Ö —Ç–µ–ª–æ–¥–≤–∏–∂–µ–Ω–∏–π! –ò –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã –∑–∞–±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∏ –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç–æ –≤—Å—ë –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –±—É–¥—Ç–æ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–ª–µ—Ç–∏—Ç —Ç–∞–∫–æ–π –∂–µ errorCode –∏ –º–∞–ø–∏—Ç—å—Å—è –æ–Ω –±—É–¥–µ—Ç —Ç–∞–∫ –∂–µ.&lt;/p&gt;

&lt;p&gt;–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤ (–≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –æ—à–∏–±–∫–∞—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –º–∞–ø–∞ —Å —è–∑—ã–∫–∞–º–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ)&lt;/li&gt;
&lt;li&gt;–•—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ&lt;/li&gt;
&lt;li&gt;–ù–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∏ –Ω–∞ –≤—ã–¥—É–º—ã–≤–∞–Ω–∏–µ —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –¢–û–ß–ù–û –ø–æ–Ω—è—Ç–Ω–æ&lt;/li&gt;
&lt;li&gt;–≠—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ —á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¢–û–ß–ù–û –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ&lt;/li&gt;
&lt;li&gt;–í—Å—ë –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫—É—Ä—Å–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∞—à–µ–π –æ—à–∏–±–∫–∏&lt;/li&gt;
&lt;li&gt;–ü—Ä–æ—Å—Ç–æ—Ç–∞&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–ö–æ–≥–¥–∞ –∂–µ —Å—Ç–æ–∏—Ç –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å Error? –ù–∞–≤–µ—Ä–Ω–æ–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%D0%B4%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE"&gt;
  &lt;/a&gt;
  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#%D0%BF%D0%B5%D1%80%D0%B5%D1%85%D0%B2%D0%B0%D1%82-%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA"&gt;
  &lt;/a&gt;
  –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
&lt;/h2&gt;

&lt;p&gt;–î–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ø—Ä–æ—á–∏—Ö –æ—à–∏–±–æ–∫ (–±–∞–∑—ã, —è–∑—ã–∫–∞) –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –º–∏–¥–ª–≤–∞—Ä –¥–ª—è &lt;code&gt;koa&lt;/code&gt; –∏–ª–∏ &lt;a href="https://docs.nestjs.com/exception-filters"&gt;—Ñ–∏–ª—å—Ç—Ä&lt;/a&gt; –¥–ª—è &lt;code&gt;nest&lt;/code&gt;. –í –Ω–∏—Ö –º—ã –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É–≥–æ–¥–Ω—ã–π –Ω–∞–º —Ñ–æ—Ä–º–∞—Ç –æ—à–∏–±–æ–∫ –≤ –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D0%B2%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D0%B8"&gt;
  &lt;/a&gt;
  –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
&lt;/h2&gt;

&lt;p&gt;–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫ —è –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –¥–µ–ª–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å—Ç—ç–π—Ç–∞ —Ñ–æ—Ä–º—ã. &lt;br&gt;
–ü—Ä–∏–º–µ—Ä –¥–ª—è final-form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"errors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
     &lt;/span&gt;&lt;span class="nl"&gt;"address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"postcode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"postcode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;446303&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"errorCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"validateString"&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø: –µ—Å–ª–∏ –≤–∞—à–µ –ø–æ–ª–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∏–º—è "key", —Ç–æ –æ–Ω–æ –±—É–¥–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –ø–æ–ª–µ–º –æ—à–∏–±–∫–∏ "key", –ø–æ—ç—Ç–æ–º—É —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å —Ç–∞–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–ª–µ –≤ –æ—à–∏–±–∫–µ –∫–∞–∫ "_key".&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to read file from test resources in java unit test</title>
      <author>Adrian Matei </author>
      <pubDate>Tue, 11 Jan 2022 06:16:44 +0000</pubDate>
      <link>https://dev.to/codever/how-to-read-file-from-test-resources-in-java-unit-test-43b7</link>
      <guid>https://dev.to/codever/how-to-read-file-from-test-resources-in-java-unit-test-43b7</guid>
      <description>&lt;p&gt;Use the &lt;strong&gt;&lt;code&gt;getClass().getClassLoader().getResourceAsStream()&lt;/code&gt;&lt;/strong&gt; to get an &lt;code&gt;InputStream&lt;/code&gt; for the wanted resource. In the following snippet we access the &lt;code&gt;bookmark-example.xml&lt;/code&gt; file resource, which is placed directly in the  &lt;code&gt;src/test/resources&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shouldUnmarshallXmlToJava&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;JAXBException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;JAXBContext&lt;/span&gt; &lt;span class="n"&gt;jaxbContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;JAXBContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dev.codepal.bookmark"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;jaxbUnmarshaller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jaxbContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createUnmarshaller&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="nc"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;inStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getClassLoader&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getResourceAsStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"bookmark-example.xml"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nc"&gt;JAXBElement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Bookmark&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;JAXBElement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Bookmark&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="n"&gt;jaxbUnmarshaller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unmarshal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;Bookmark&lt;/span&gt; &lt;span class="n"&gt;bookmark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bookmark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTitle&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CodepediaOrg"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Shared with ‚ù§Ô∏è from &lt;a href="https://www.codever.land/snippets/605d86a3cfab4d6247615acf/details"&gt;Codever&lt;/a&gt;. Use üëâ &lt;a href="https://www.codever.land/snippets/605d86a3cfab4d6247615acf/details"&gt;&lt;strong&gt;copy to mine&lt;/strong&gt;&lt;/a&gt; functionality to add it to your personal snippets collection.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>testing</category>
      <category>codever</category>
      <category>snippets</category>
    </item>
    <item>
      <title>These cryptocurrencies combined have given returns of over 2,400% in 2021</title>
      <author>Shivashish Yadav</author>
      <pubDate>Tue, 11 Jan 2022 05:55:04 +0000</pubDate>
      <link>https://dev.to/shivashish/these-cryptocurrencies-combined-have-given-returns-of-over-2400-in-2021-4cdl</link>
      <guid>https://dev.to/shivashish/these-cryptocurrencies-combined-have-given-returns-of-over-2400-in-2021-4cdl</guid>
      <description>&lt;p&gt;While crypto investors expected that the month of December will see some decent jump in crypto, but nothing like this happened. After touching, it's All-Time High (ATH) on 10th November, Bitcoin will see a lot of declines has been found.&lt;/p&gt;

&lt;p&gt;Even amid such an upsurge, from the beginning of 2021 till now, a lot of cryptocurrencies have made very good returns to their investors. According to data from Coinmatrics, there are 35 cryptocurrencies that have given an average return of 2,400% this year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-hAfYkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641844170969/DL8-jRduy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-hAfYkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641844170969/DL8-jRduy.png" alt="https___bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com_public_images_62b1d980-a9fb-4b30-a238-94bb6a583dcc_1436x1216.png" width="880" height="745"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On top of this comes the name of Axie infinity, which is a Play To Earn Blockchain game that has given a tremendous 17,213% returns this year, same category Blockchain gaming project Sandbox has also given 13,832% returns.&lt;/p&gt;

&lt;p&gt;Matic, which is working on Ethereum's Layer 2 Solution, has given 12,133% to its investors. Investors' eyes are very much on Matic as it is contributing hugely to scaling Ethereum and right now Matic is also working on many projects. It is working, due to which the investor expects it will increase further.&lt;/p&gt;

&lt;p&gt;During so many difficulties, the world's largest cryptocurrency, Bitcoin, did not anger people too much, from the beginning of this year to the end, Bitcoin has given a return of 62%, while the second number cryptocurrency Ethereum has given a return of 433%.&lt;/p&gt;

&lt;p&gt;As awareness is increasing among people about NFT, DeFi, its biggest advantage will be the leader cryptocurrency of this category, Ethereum. Everyone is eagerly waiting for Ethereum 2.0. With its arrival, Ethereum's network will see a lot of booms, and people will get rid of the high gas fees and its slow transaction speed.&lt;/p&gt;

&lt;p&gt;Its developers are working on Ethereum 2.0, it is expected that it will be completed by 2022, after which there will be no one to compete with Ethereum.&lt;/p&gt;

&lt;h2 id="heading-disclaimer"&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;Do not invest your money in any cryptocurrency without doing your own research, as you will find many crypto projects that will lure you to give you high returns, but you should not invest money anywhere without doing research.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Complete Amazon SEO Guide for Sellers 2022</title>
      <author>Bhavyashah</author>
      <pubDate>Tue, 11 Jan 2022 05:35:05 +0000</pubDate>
      <link>https://dev.to/bhavyashah/complete-amazon-seo-guide-for-sellers-2022-16ge</link>
      <guid>https://dev.to/bhavyashah/complete-amazon-seo-guide-for-sellers-2022-16ge</guid>
      <description>&lt;p&gt;Source Image was taken by this website: &lt;a href="https://www.blogtriggers.com/2022/01/complete-seo-guide-for-sellers-2022.html"&gt;Complete Amazon Guide for sellers 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon is the big wheel of eCommerce. In 2021, it had more than 146,396 million U.S. dollars sales, which is expected to grow over 162K million U.S. Dollars by 2022. All the amazon businesses dream of being on page one, and it is obvious that the company listed on page one will have more visibility, so have more leads to convert. But how to hold a place on Amazon page one? The answer is- Amazon SEO. You need to learn and master Amazon Search Engine Optimization (SEO). This is the most reliable method to generate sales compared to Amazon PPC, influencer partnerships, other paid ads, etc. &lt;/p&gt;

&lt;p&gt;Today‚Äôs post will discuss all the steps you need to know to master Amazon SEO. but before that, let us see what Amazon SEO is-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Does Amazon SEO Entail?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon SEO is all about optimizing your product listings to get as much organic search traffic as possible. The main purpose is to place the business in top Amazon search results for various search queries. This will increase the visibility of your goods in the eyes of Amazon customers, resulting in more clicks and sales.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Steps to Run Amazon SEO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following are the steps involved in Amazon SEO:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A9 algorithm from Amazon&lt;/li&gt;
&lt;li&gt;Keyword for Amazon Product listing&lt;/li&gt;
&lt;li&gt;Product title &lt;/li&gt;
&lt;li&gt;Product Description&lt;/li&gt;
&lt;li&gt;Image of the products&lt;/li&gt;
&lt;li&gt;Strategy for Pricing&lt;/li&gt;
&lt;li&gt;Reviews &amp;amp; Ratings from Customers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1) A9 algorithm from Amazon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon's product search algorithm is called A9. The Amazon A9 algorithm is a ranking system that determines where products appear on the Amazon SERPs for a given phrase. This ranks products depending on the likelihood of the searcher purchasing the item. But how does Amazon's algorithm determine this? &lt;/p&gt;

&lt;p&gt;The shopper's search query terms are the first thing Amazon looks at. Because keyword optimization is an important part of Amazon SEO, it's unlikely to appear in the search results if your product listing doesn't include every keyword in the search query. &lt;/p&gt;

&lt;p&gt;Then, based on how well your product has performed in the past, Amazon attempts to assess purchase likelihood. The algorithm considers the click-through rate and total sales on the keyword level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A10 Amazon Algorithm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2H-SnEva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hs9d7snppl7lmeiopq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2H-SnEva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hs9d7snppl7lmeiopq6.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember that the A9 algorithm is updated regularly. In reality, many people now refer to it as the "A10" algorithm. The purpose of the search algorithm is to generate satisfied, repeat consumers. It has recently modified its search criteria to place a greater emphasis on consumer behavior, resulting in which it has tied in several aspects. Your product will most likely be ranked higher in search results if it has a high sales velocity and generates more traffic than similar listings, while less popular items will get a place below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Best Keywords for Amazon Product Listings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z_1hUx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xibjab4yk6tno4hy11my.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z_1hUx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xibjab4yk6tno4hy11my.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use an Amazon SEO tool to find keywords for Amazon product listings. These types of tools can inform you what customers are looking for on Amazon when they want to buy your goods. You should also look for the keyword for which your competitors are ranking. &lt;/p&gt;

&lt;p&gt;At the same time, backend keywords inform Amazon's algorithm that a certain product listing is aimed towards a specific keyword on the site. These are like meta tags that tell Google what your page is about, allowing the search engine to determine when to show the page to visitors looking for specific information. &lt;/p&gt;

&lt;p&gt;With their backend keywords, merchants can fill out five fields. If you exceed the limit, each line is limited to 50 characters and will not index your back-end keyword. Also, avoid repeating words, commas, excess variations, quotation marks, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Product Title&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGTMFc2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70kgm5osj20apx8vmoi8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGTMFc2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70kgm5osj20apx8vmoi8.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a consumer searches for specific keywords, the product title of a listing will carry the most weight; according to Amazon's criteria for product title design, these should be around 60 characters long and should accurately reflect the contents of the item packing. &lt;/p&gt;

&lt;p&gt;When customers search for a product on Amazon, they will match their preferred keywords with those in the title, with the top results receiving the most attention. &lt;/p&gt;

&lt;p&gt;It needs to be brief enough to catch a customer's attention when reading a big list of search results, yet long enough to explain exactly what you're selling correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Bullet Points &amp;amp; Product Descriptions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzXXltmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp2it97v9u4bbhv35r5m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzXXltmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp2it97v9u4bbhv35r5m.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The product description is the priceless real estate where you compose the screenplay and persuade potential buyers to part with their money. The use of bullet points in the product description is a method that many consumers agree on and that Amazon advises.&lt;/p&gt;

&lt;p&gt;Bullet points are short, concise statements that should create a persuasive case for your product while being easy to read. &lt;/p&gt;

&lt;p&gt;A customer's attention will be drawn to bullet points rather than a full text. Incorporating it in a bullet point is a good deal if your product has a specific function that people seek out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Images of the Products&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7kb60WPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly881fegg4jz81m3ovsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kb60WPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly881fegg4jz81m3ovsx.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using high-quality photos to accompany your title and description is another crucial aspect of improving your Amazon listings. When picking one product out of many, product photos are frequently the deciding factor. &lt;/p&gt;

&lt;p&gt;While the title, description, and even reviews provide detailed and compelling information about a product, &lt;/p&gt;

&lt;p&gt;Amazon customers will focus on the product itself in photographs. Seeing an object before buying might help a client decide whether or not to buy it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Strategy for Pricing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHlQ7o-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0j5brc81mjkw7ndcqrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHlQ7o-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0j5brc81mjkw7ndcqrc.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maintaining competitive prices is critical to improving click-through and conversion rates. Amazon is more likely to rank these listings higher if the conversion rate and, as a result, the sales volume improves.&lt;/p&gt;

&lt;p&gt;It is crucial to research rival pricing before putting your products on the market. This will ensure that your pricing is reasonable while remaining competitive, resulting in more visitors and sales.&lt;/p&gt;

&lt;p&gt;You can use an Amazon Repricer or any other pricing tool to fully automate your pricing to stay competitive, which will help with your listing's A10 ranking on Amazon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) Reviews &amp;amp; Ratings from Customers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoTLSxBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmtq0nikz2grm57exyht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoTLSxBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmtq0nikz2grm57exyht.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While you have less control over client feedback, you have a say in how they are treated overall. You need to aim at least for 4 or 5-star ratings, as the Amazon A10 algorithm might not recognize the lower ratings. &lt;/p&gt;

&lt;p&gt;According to Amazon's emphasis on customer satisfaction and ratings, customers directly impact the performance and ranking of your listings. As a result, it's necessary to promptly check your products' reviews and replies to unfavorable feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At last, we can say that now you have good knowledge about major factors to focus on achieving a high ranking in Amazon SERPs. You need to master writing great product listings with titles displaying brand, model, version, category, and other relevant details.&lt;/p&gt;

&lt;p&gt;Additionally, give clear and concise descriptions, choose the right photos to convey the right messages, and use Amazon tools and services wherever needed. For sellers on Amazon, it is important to maintain a fine-tuning of all Amazon SEO elements to get desired results.&lt;/p&gt;

&lt;p&gt;If you Find any suggestion then please comment us.&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>25 Day Check-In -- #100 Days of Code</title>
      <author>Josh Smith</author>
      <pubDate>Tue, 11 Jan 2022 05:24:54 +0000</pubDate>
      <link>https://dev.to/joshdevhub/25-day-check-in-100-days-of-code-837</link>
      <guid>https://dev.to/joshdevhub/25-day-check-in-100-days-of-code-837</guid>
      <description>&lt;p&gt;Hello again. Back with another update on my 100 days of code progress. I feel like I've gotten a lot done over these 5 days and have been feeling quite motivated and excited about coding coming off the holidays. So here's what's new:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-enumerables"&gt;
  &lt;/a&gt;
  Custom Enumerables
&lt;/h2&gt;

&lt;p&gt;I mentioned this in my last update, but now I have a finished &lt;a href="https://github.com/JoshDevHub/Custom-Enumerables"&gt;product&lt;/a&gt;. Like the other projects I'll mention in this update, this was done as part of &lt;a href="https://theodinproject.com"&gt;The Odin Project&lt;/a&gt;. It's essentially a custom building of Ruby's built in &lt;a href="https://ruby-doc.org/core-3.1.0/Enumerable.html"&gt;enumerable module&lt;/a&gt;, which is a mixin that's included with 'iterable' standard classes like &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Hash&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Technically each class that includes &lt;code&gt;Enumerable&lt;/code&gt; implements its own &lt;code&gt;#each&lt;/code&gt;. It wasn't in the specifications of the project to go about developing all that, so mine was mostly built with arrays in mind (and it's basically all I tested anything with).&lt;/p&gt;

&lt;p&gt;A few features of the Ruby language really came together for me while making this -- blocks, the &lt;code&gt;yield&lt;/code&gt; keyword, procs, and a little pattern matching. Excellent project for demystifying some of these mechanics for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linked-list"&gt;
  &lt;/a&gt;
  Linked List
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://github.com/JoshDevHub/linked-list"&gt;project&lt;/a&gt; involved building a Linked List Class in Ruby. A &lt;a href="https://en.wikipedia.org/wiki/Linked_list"&gt;linked list&lt;/a&gt; is a data structure where each node points to the next node in the list, and nodes are accessed through these chained pointers from one node to the next -- unlike in an array or a hash where data is accessed through indices or keys, respectively. This project was good fun and also a surprising challenge, as I'd never really thought of data structures outside of what's built into standard Ruby and JavaScript. So building this required doing away with a lot of silly assumptions.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;LinkedList&lt;/code&gt; class, I not only developed a way to create a linked list structure, but I also have several methods on the class for manipulating and traversing the data held in a linked list. Really excellent project -- can't recommend Odin enough&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#balanced-binary-search-tree"&gt;
  &lt;/a&gt;
  Balanced Binary Search Tree
&lt;/h2&gt;

&lt;p&gt;Now this one was a doozy. With this &lt;a href="https://github.com/JoshDevHub/Balanced-BST"&gt;project&lt;/a&gt;, I built an implementation of another new-to-me data structure: the &lt;a href="https://en.wikipedia.org/wiki/Binary_search_tree"&gt;binary search tree&lt;/a&gt;. My &lt;code&gt;Tree&lt;/code&gt; class can build a balanced BST from an array of numbers. Also implemented are several methods for changing or reading the tree's data. This involved quite a bit of study on different traversal orders and also really tested my understanding of recursion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upcoming"&gt;
  &lt;/a&gt;
  Upcoming
&lt;/h2&gt;

&lt;p&gt;Tomorrow I will begin tackling the infamous &lt;a href="https://en.wikipedia.org/wiki/Knight's_tour"&gt;knight's tour&lt;/a&gt; problem. Hopefully I can get through it somewhat quickly as the next thing in the works is testing with rspec, something I'm quite excited for. In any case, I'll hopefully be back next Monday with another progress update. Happy coding&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
  </channel>
</rss>
