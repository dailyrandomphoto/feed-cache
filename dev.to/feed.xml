<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Modern Navigation Menu using css üöÄ</title>
      <author>Shubham Jadhav</author>
      <pubDate>Fri, 01 Oct 2021 05:36:20 +0000</pubDate>
      <link>https://dev.to/dev_shubham/modern-navigation-menu-using-css-38aa</link>
      <guid>https://dev.to/dev_shubham/modern-navigation-menu-using-css-38aa</guid>
      <description>&lt;p&gt;üëâ Modern navigation menu using only css üöÄ &lt;/p&gt;

&lt;p&gt;see below üëá&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubham-web2144/embed/abWevWP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Encryption Using Playfair Cipher In Python</title>
      <author>Karan-Munjani</author>
      <pubDate>Fri, 01 Oct 2021 05:08:49 +0000</pubDate>
      <link>https://dev.to/karanmunjani/encryption-using-playfair-cipher-in-python-24l4</link>
      <guid>https://dev.to/karanmunjani/encryption-using-playfair-cipher-in-python-24l4</guid>
      <description>&lt;p&gt;In this post I'm going to explain you how to code playfair cipher to encrypt plaintext to cipher. So this post is all about encryption program and will soon add decryption program in this series also so stay tuned!&lt;/p&gt;

&lt;p&gt;If you don't know how the algorithm works checkout previous post in this series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Without further ado, LET'S BEGIN!!üë®‚Äçüíªüë©‚Äçüíª&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-you-recall-what-were-the-steps-of-algorithm"&gt;
  &lt;/a&gt;
  Can you recall what were the steps of algorithm?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes, You're right!&lt;/strong&gt; &lt;br&gt;
The Algorithm was consist of &lt;strong&gt;three&lt;/strong&gt; steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert plaintext into digraphs (i.e., into pair of two letters)&lt;/li&gt;
&lt;li&gt;Generate a Cipher Key Matrix&lt;/li&gt;
&lt;li&gt;Encrypt plaintext using Cipher Key Matrix and get ciphertext.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-creating-function-to-convert-plaintext-into-digraphs"&gt;
  &lt;/a&gt;
  Step: 1 Creating function to convert plaintext into digraphs
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-function-to-generate-a-cipher-key-matrix"&gt;
  &lt;/a&gt;
  Step: 2 Function to generate a cipher key matrix
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-we-need-to-locate-index-of-particular-character-inside-cipher-key-matrix-to-perform-encryption"&gt;
  &lt;/a&gt;
  Now we need to locate index of particular character inside cipher key matrix to perform encryption:
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-encrypt-plaintext-using-cipher-key-matrix-and-get-ciphertext"&gt;
  &lt;/a&gt;
  Step: 3 Encrypt plaintext using cipher key matrix and get ciphertext
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-step-running-our-code-from-main-method"&gt;
  &lt;/a&gt;
  Final Step! Running our code from main method:
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-a-lot-for-reading-out"&gt;
  &lt;/a&gt;
  Thanks a lot for reading out!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;I hope the code with comments was actually sufficient to understand the logic.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here's the repository link to the whole code file &lt;a href="https://github.com/Karan-Munjani/Cryptography_Using_Python/blob/main/Playfair%20Cipher.py"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you still have any doubts feel free to mention below in discussion section, I would love to answer them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also drop a heart ‚ù§ if you gained some knowledge!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>python</category>
      <category>programming</category>
      <category>security</category>
    </item>
    <item>
      <title>Best Website Every Developers should know</title>
      <author>CoderZ90</author>
      <pubDate>Fri, 01 Oct 2021 04:53:00 +0000</pubDate>
      <link>https://dev.to/official_fire/best-website-every-developers-should-know-42e2</link>
      <guid>https://dev.to/official_fire/best-website-every-developers-should-know-42e2</guid>
      <description>&lt;p&gt;Hello guys üëã so in this blog i will tell some very cool websites every developer should know. &lt;/p&gt;

&lt;p&gt;I have my own youtube channel please üôèüôÇ subscribe&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/codingfire?sub_confirmation=1"&gt;https://youtube.com/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have divided this blog into three sections&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Section 01&lt;/strong&gt; - Best websites to get images from&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section 02&lt;/strong&gt; - Best websites to get svg images from&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section 03&lt;/strong&gt; - Best websites to get icons from&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#section-01-images-websites"&gt;
  &lt;/a&gt;
  Section 01 - Images Websites
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;these are the websites to get images from&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-pexels"&gt;
  &lt;/a&gt;
  ‚Ä¢ Pexels
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YQ-wbJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.screnter.com/wp-content/uploads/2021/01/pexels-logo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YQ-wbJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.screnter.com/wp-content/uploads/2021/01/pexels-logo.jpg" alt="pexels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pexels provides high quality and completely free stock photos licensed under the Pexels license. All photos are nicely tagged, searchable and also easy to discover through our discover pages.&lt;/p&gt;

&lt;p&gt;Link to the website - &lt;a href="https://pexels.com"&gt;Pexels.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-pixabay"&gt;
  &lt;/a&gt;
  ‚Ä¢ Pixabay
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4LuhN4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.pixabay.com/photo/2020/06/21/19/02/pixabay-5326292_960_720.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4LuhN4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.pixabay.com/photo/2020/06/21/19/02/pixabay-5326292_960_720.png" alt="pixa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now another cool website to get high quality best images from is pixabay. Pixabay is a vibrant community of creatives, sharing &lt;strong&gt;copyright free&lt;/strong&gt; images, videos and music. All contents are released under the Pixabay License, which makes them safe to use without asking for permission or giving credit to the artist - even for commercial purposes.&lt;/p&gt;

&lt;p&gt;Link to the website - &lt;a href="https://pixabay.com/"&gt;Pixabay.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i only know these two websites which provide very good, high quality images but do let me know if you know more üòä&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#section-02-svg-images-websites"&gt;
  &lt;/a&gt;
  Section 02 - SVG Images Websites
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;these are the websites to get SVG images from&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-undrawco"&gt;
  &lt;/a&gt;
  ‚Ä¢ Undraw.co
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqXd1jj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5c30f2e81213426a020265c4/5c63087c2d5dc817dfe52ee1_Undraw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqXd1jj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5c30f2e81213426a020265c4/5c63087c2d5dc817dfe52ee1_Undraw.png" alt="un"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SVGs are a big part of designing a modern websites, many people use SVGs in their websites but finding them is kinda difficult sometimes but here are so cool svg website, the no 1 is undraw.co&lt;/p&gt;

&lt;p&gt;Open-source illustrations for any idea you can imagine and create&lt;/p&gt;

&lt;p&gt;it is A constantly updated design project with beautiful SVG images that you can use completely free and without attribution.&lt;/p&gt;

&lt;p&gt;That means You can use the illustrations in any project, commercial or personal without attribution or any costs. A truly open license, babe! Just don‚Äôt try to replicate unDraw, re-distribute the illustrations or create integrations for it.&lt;/p&gt;

&lt;p&gt;Link to the website - &lt;a href="https://undraw.co"&gt;Undraw.co&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-flaticon"&gt;
  &lt;/a&gt;
  ‚Ä¢ Flaticon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIOWSq4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.flaticon.com/share/flaticon-generic.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIOWSq4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.flaticon.com/share/flaticon-generic.jpg" alt="flat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website is my favourite for svg actually, one more good thing about this website is that it have colorful SVGs too and also SVGs with gradient colors&lt;/p&gt;

&lt;p&gt;Flaticon offers a wide catalogue of free icons. When you perform a search, there will be a few options shown on the top left corner of the screen, where you can filter by ‚ÄúFree‚Äù, for content free of charge, or by ‚ÄúPremium‚Äù, for icons available only to Premium users.&lt;/p&gt;

&lt;p&gt;Link to the website - &lt;a href="https://www.flaticon.com/"&gt;Flaticon.com&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#section-03-icons"&gt;
  &lt;/a&gt;
  Section 03 - Icons
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;these are the websites to get icons from&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-fontawesome"&gt;
  &lt;/a&gt;
  ‚Ä¢ Fontawesome
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eSNYXpP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fontawesome.com/images/open-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eSNYXpP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fontawesome.com/images/open-graph.png" alt="d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Font Awesome is a font and icon toolkit based on CSS and Less. As of 2020, Font Awesome was used by 38% of sites that use third-party font scripts, placing Font Awesome in second place after Google Fonts. üî•&lt;/p&gt;

&lt;p&gt;Link to the website - &lt;a href="https://fontawesome.com"&gt;Fontawesome.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-boxicons"&gt;
  &lt;/a&gt;
  ‚Ä¢ Boxicons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PwOm8PBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://theprotoolbox.com/wp-content/uploads/2020/04/box-icons-vectors-free-set.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PwOm8PBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://theprotoolbox.com/wp-content/uploads/2020/04/box-icons-vectors-free-set.png" alt="box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Boxicons is my favourite website to get icons from because Switching to boxicons is easy and can be done in 2 steps. There are more features than just the icons set. Boxicons also follows the official Google Material Design guidelines&lt;/p&gt;

&lt;p&gt;Link to the website - &lt;a href="https://boxicons.com"&gt;Boxicons.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-remixicons"&gt;
  &lt;/a&gt;
  ‚Ä¢ Remixicons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--An_Sadqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/161979323/ce941d00-7ee3-11e9-8ed2-6a3770b22cd8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--An_Sadqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/161979323/ce941d00-7ee3-11e9-8ed2-6a3770b22cd8" alt="remix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remix Icon is a set of open-source neutral-style system symbols elaborately crafted for designers and developers.&lt;br&gt;
All of the icons are free for both personal and commercial use.&lt;/p&gt;

&lt;p&gt;Link to the website - &lt;a href="https://remixicon.com"&gt;Remixicons.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üòä Thankyou for giving your time to read this blog hope you found it useful and interesting&lt;/p&gt;

&lt;p&gt;I have my own youtube channel please üôèüôÇsubscribe&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/codingfire?sub_confirmation=1"&gt;https://youtube.com/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Web 3 Community - Hacktoberfest 2021</title>
      <author>Ritvik Shukla</author>
      <pubDate>Fri, 01 Oct 2021 04:46:29 +0000</pubDate>
      <link>https://dev.to/web3community/web-3-community-hacktoberfest-2021-41mi</link>
      <guid>https://dev.to/web3community/web-3-community-hacktoberfest-2021-41mi</guid>
      <description>&lt;p&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; starts today. This year &lt;a href="https://github.com/web3community"&gt;Web3Community&lt;/a&gt; is excited to take part in the fest for the first time. &lt;/p&gt;

&lt;p&gt;An excellent opportunity for everyone to learn more about the open-source environment, meet active contributors and win a t-shirt or have a tree planted in your name!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hacktober"&gt;
  &lt;/a&gt;
  What is Hacktober?
&lt;/h2&gt;

&lt;p&gt;Hacktoberfest is a month-long celebration of open source software run by DigitalOcean. Hacktoberfest is open to everyone in our global community!. You can sign up anytime between October 1 and October 31. &lt;/p&gt;

&lt;p&gt;Making four or more contributions between October 1-31 will allow you to get a memorable t-shirt as a token of appreciation, or you can choose to have a tree planted in your name and help make Hacktoberfest 2021 more carbon neutral.&lt;/p&gt;

&lt;p&gt;You can follow this &lt;a href="https://hacktoberfest.digitalocean.com/resources/participation"&gt;guide&lt;/a&gt; for rules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-contribute-to-web3community"&gt;
  &lt;/a&gt;
  Why contribute to Web3Community?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/web3community"&gt;Web3Community&lt;/a&gt; is an Open Source Community that focuses on decentralized applications, web 3, and blockchain technologies ‚ú®&lt;/p&gt;

&lt;p&gt;Here you will get to interact with some awesome folks. ü§ì&lt;br&gt;
No one is expert, we all are learning, you can join us and Learn blockchain tech together, develop some great Open Source Projects. &lt;/p&gt;

&lt;p&gt;Every single contribution matters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-contribute"&gt;
  &lt;/a&gt;
  How can I contribute?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create an issue first before creating a Pull request.&lt;/li&gt;
&lt;li&gt;Fork the Repository and create a Branch for any Issue that you are working upon.&lt;/li&gt;
&lt;li&gt;Create a Pull Request which will be promptly reviewed and suggestions would be added to improve it.&lt;/li&gt;
&lt;li&gt;Add Screenshots to help us know what changes you have done.&lt;/li&gt;
&lt;li&gt;Once you receive the approval from the team, the contribution is ready to be merged and taken into account for the overall Hacktoberfest activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For help you can join our &lt;a href="https://discord.gg/3EN2UVE9mH"&gt;Discord&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>web3</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>How to make a good `git commit`</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 01 Oct 2021 04:17:18 +0000</pubDate>
      <link>https://dev.to/mishmanners/how-to-make-a-good-git-commit-1ed7</link>
      <guid>https://dev.to/mishmanners/how-to-make-a-good-git-commit-1ed7</guid>
      <description>&lt;p&gt;At my recent &lt;a href="https://gitkon.com/sessions/using-git-for-ultimate-teamwork/"&gt;GitKon talk&lt;/a&gt;, I spoke about &lt;code&gt;git commit&lt;/code&gt; and what it means to have good commits.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; is a command used to commit your code to a specific location; local, cloud, branch, main etc. Most developers use it when wanting to commit a fix, chunk of code, typo, or similar. When making changes to a file or files, once you are happy with them, you make a commit. It's basically like saving a file to your project. Only, instead of hitting the "save" button, you write &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2J8r9gSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idff1kjgza886ykxj7cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2J8r9gSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idff1kjgza886ykxj7cx.png" alt="Commit updated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But sometimes commits are all over the place. No one knows what they mean, what files have been changed, or how often you should make commits.&lt;/p&gt;

&lt;p&gt;I answered a few of these questions on how to make good commits, and how good commits make you a great team player.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-its-important"&gt;
  &lt;/a&gt;
  Why it's important
&lt;/h2&gt;

&lt;p&gt;Before I dive into some of the cool things you can do with commits, and what you should do, let's look at &lt;em&gt;why&lt;/em&gt; it's important.&lt;/p&gt;

&lt;p&gt;When writing code, many people are working in a team. Whether you're coding for your company, or committing to open source projects, you need to be mindful of your team. The key to teamwork is collaboration. If you don't know what your team is doing you can't be successful.&lt;/p&gt;

&lt;p&gt;Your commits help tell your team (and remind you) about what you're doing. What code you are writing, features you are working on, and bugs fixed.&lt;/p&gt;

&lt;p&gt;If your commit messages are all over the place it's hard to know what's going on. Projects take more time to get off the ground, and your bus factor is SUPER high. For example, this is a mess:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBc-pVN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlbipqydsuvkuogr7twu.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBc-pVN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlbipqydsuvkuogr7twu.JPG" alt="No commit messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's all committed on the same day, and there's very little information about what the commit is.&lt;/p&gt;

&lt;p&gt;Instead, if your commits are good, then everyone is on the same page, products are shipped quicker, and your customers are happier... and so are you!&lt;/p&gt;

&lt;p&gt;So what makes a good commit?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-commits"&gt;
  &lt;/a&gt;
  Good commits
&lt;/h2&gt;

&lt;p&gt;It's important to keep a few things in mind when making commits. &lt;/p&gt;

&lt;p&gt;Firstly, you want to make regular commits. Your commit history allows you to go back to a specific 'save' point in your project. If there are horrible bugs or breakages in your code, you can revert to a 'previously known stable version'. If you haven't made regular commits, then you won't be able to do this easily.&lt;/p&gt;

&lt;p&gt;When making commits, it's also important to be specific, and understandable. This is where we come to commit messages. When you make a commit, unlike simply "saving" a file like a Word doc, you add messages to your commits. These are called commit messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-commit-messages"&gt;
  &lt;/a&gt;
  Writing commit messages
&lt;/h2&gt;

&lt;p&gt;When you save a file on your computer, it just 'saves'. You can't add information to it. The beauty of git is you can add notes to your 'saves'. Every time you commit your code you should add a commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5pYkq0rV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd979eu0pz8nnsgph8r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5pYkq0rV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd979eu0pz8nnsgph8r0.png" alt="carbon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Commit messages help you and your team understand what your code is doing. Why are you 'saving' your code at this point in time? What lines are you adding? What do they do? And yes, as in the example above, you can write lines of commit comments using &lt;code&gt;-m&lt;/code&gt; multiple times.&lt;/p&gt;

&lt;p&gt;Writing good commit messages helps you and your team understand what that save point is. This is helpful if you need to revert to a previous 'save' version. Or if you happen to go away on holidays everyone knows what you committed without you asking.&lt;/p&gt;

&lt;p&gt;Someone asked during my session for some good commit examples. You might already have best practices within your organisation or community for what to write in a commit message. Short descriptions with a line or two about what you've done are helpful.&lt;/p&gt;

&lt;p&gt;Here's a couple of my commit messages as examples:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vVHp0h0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30ddvlb5x83a5qjbaeif.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVHp0h0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30ddvlb5x83a5qjbaeif.JPG" alt="Detailed messages"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tldr"&gt;
  &lt;/a&gt;
  The TL;DR
&lt;/h2&gt;

&lt;p&gt;If you don't have time to read all this, just remember three things when you make commits. That is to make your commits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timely&lt;/li&gt;
&lt;li&gt;Specific&lt;/li&gt;
&lt;li&gt;Understandable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#take-the-raw-commit-endraw-challenge"&gt;
  &lt;/a&gt;
  Take the &lt;code&gt;commit&lt;/code&gt; challenge
&lt;/h2&gt;

&lt;p&gt;Next time you are writing a commit message, ask yourself some questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚ÄúWill my team understand what I‚Äôve done?"&lt;/li&gt;
&lt;li&gt;‚ÄúWill I understand what I‚Äôve done?"&lt;/li&gt;
&lt;li&gt;‚ÄúCan everyone in my team, including non-developers understand what I‚Äôve done?"&lt;/li&gt;
&lt;li&gt;‚ÄúAm I being a good team player?‚Äù
‚ÄúAm I communicating well?‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you ask these questions, then you should have amazing commit messages ‚ù§Ô∏è Everyone will love you for it, and your projects will be much tidier and understandable.&lt;/p&gt;

&lt;p&gt;Now, go make the world better, one commit at a time.&lt;/p&gt;

&lt;p&gt;Header image by Arian Darvishi via &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>How to enter full-screen mode in browser using JS</title>
      <author>Leonardo Schmitt </author>
      <pubDate>Fri, 01 Oct 2021 03:09:49 +0000</pubDate>
      <link>https://dev.to/leonardoschmittk/how-to-enter-full-screen-mode-in-browser-using-js-40pp</link>
      <guid>https://dev.to/leonardoschmittk/how-to-enter-full-screen-mode-in-browser-using-js-40pp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-there"&gt;
  &lt;/a&gt;
  Hi there!
&lt;/h3&gt;

&lt;p&gt;üìå  Today, I'll show a straightforward way to enter and exit fullscreen mode on main browsers. I'll try to explain as much as I can, so introducing a subtle pace. You can open the pen below on Codepen and check by yourself.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Leoschmittk/embed/gOREOpJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is also the fullscreen related to the video HTML element, which will be properly covered.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;To get started, we'll just need to create a HTML file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
 &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"fsManager.checkForFullscreen()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         Enter fullscreen
 &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is, a simple &lt;strong&gt;button&lt;/strong&gt; element that will execute the &lt;strong&gt;checkForFullscreen()&lt;/strong&gt; function wherever the user clicks on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;To do the magic wanted we need JavaScript. The whole script is down below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;fullScreenManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;checkForFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enterFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
               &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
               &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="nx"&gt;enterFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitRequestFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msRequestFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;exitFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitExitFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msExitFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fsManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;fullScreenManager&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here what's going on: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; we create a &lt;strong&gt;class&lt;/strong&gt; called fullscreenManager. Within it there are two private variables: &lt;strong&gt;isFullscreen&lt;/strong&gt; and &lt;strong&gt;docEl&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;The first carries a &lt;strong&gt;false&lt;/strong&gt; value because initially the fullscreen isn't enabled. &lt;/li&gt;
&lt;li&gt;The second is just a streamline name to refer to &lt;strong&gt;document.documentElement&lt;/strong&gt;, that is, the HTML element in itself.&lt;/li&gt;
&lt;li&gt;There is the &lt;strong&gt;checkForFullscreen&lt;/strong&gt; method that is used to check wheter the fullscreen is enabled or not. If it is, execute &lt;strong&gt;enterFullscreen()&lt;/strong&gt;. If not, execute &lt;strong&gt;exitFullscreen()&lt;/strong&gt;. Moreover, the variable that's responsible for carry the state (false or true) of the screen has to change to the opposite value. If it's not opened yet (if it's false) then turn it to true, and vice-versa, logic shown in &lt;strong&gt;this.isFullscreen = !this.isFullscreen&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;To be able to open the fullscreen, we can call three methods that do the same, all of them associated with the &lt;strong&gt;docEl&lt;/strong&gt; variable. Depending on the user's browser, certain methods don't work out due to its browser engine. To solve that, the logic is basically checking if the given browser "accepts" &lt;strong&gt;requestFullscreen&lt;/strong&gt;, or &lt;strong&gt;webkitRequestFullscreen&lt;/strong&gt; or even &lt;strong&gt;msRequestFullscreen&lt;/strong&gt;. To do that I'm using the  &lt;strong&gt;||&lt;/strong&gt;  logic operator. One of them has to work in almost every browser, something that you can easily check over &lt;a href="https://caniuse.com/?search=requestFullscreen"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On the other hand, if the user presses again the button, &lt;strong&gt;isFullscreen&lt;/strong&gt; turns to false and the &lt;strong&gt;exitFullscreen&lt;/strong&gt; is executed pretty much the same way as the &lt;strong&gt;enterFullscreen&lt;/strong&gt; by using the methods to exit the fullscreen. In fact, to exit we're using the &lt;strong&gt;document&lt;/strong&gt; instead of &lt;em&gt;document.documentElement&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;To wrap it up, we declare a global varible called &lt;strong&gt;fsManager&lt;/strong&gt; and attach to it a new instance of the &lt;strong&gt;fullscreenManager&lt;/strong&gt; class, allowing us to call its methods, like we did in the HTML button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#video-element"&gt;
  &lt;/a&gt;
  Video element
&lt;/h2&gt;

&lt;p&gt;If you want to make the same functionality but for associating it with videos, the methods used are the same, but since you're dealing with the video element, don't use &lt;em&gt;document&lt;/em&gt; or &lt;strong&gt;document.documentElement&lt;/strong&gt;. Rather, there should be something like &lt;strong&gt;document.querySelector('.video-class-example').requestFullscreen()&lt;/strong&gt; and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;But that's all, anyway. I hope you enjoyed as much I did writing this out.&lt;/p&gt;

&lt;p&gt;If you happen to have any suggestion, I'll be pleased to modify the code for the better.&lt;/p&gt;

&lt;p&gt;Farewell üëã üëã üëã üëã &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to send message to specific discord channel from your server application?</title>
      <author>John Melody Me</author>
      <pubDate>Fri, 01 Oct 2021 02:07:34 +0000</pubDate>
      <link>https://dev.to/johnmelodyme/how-to-send-message-to-specific-discord-channel-from-your-server-application-2n6h</link>
      <guid>https://dev.to/johnmelodyme/how-to-send-message-to-specific-discord-channel-from-your-server-application-2n6h</guid>
      <description>&lt;h4&gt;
  &lt;a href="#how-to-send-message-to-specific-discords-channel-from-your-server-application"&gt;
  &lt;/a&gt;
  How to send message to specific discord's channel from your server application?
&lt;/h4&gt;

&lt;p&gt;Had you wonder how to send the log / messages from the server application to discord channel? In my personal poject I use &lt;code&gt;NodeJs&lt;/code&gt; for the server side, each of the important details from the server will be sent to my discord's channel. For instance, each time my user made a payment or register for my app. I am about to demonstrate how exactly I did it.&lt;/p&gt;

&lt;p&gt;I use the ES6 dicipline for my application.&lt;/p&gt;

&lt;p&gt;Packages I will be using are &lt;code&gt;axios&lt;/code&gt;, and &lt;code&gt;nodemon&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initiate a project by &lt;code&gt;npm init -y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;get the webhok url by going to your channel's settings -&amp;gt; integration -&amp;gt; create webhook.&lt;/li&gt;
&lt;li&gt;start coding.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this case I will use the method of HTTP POST request to the webhook.&lt;br&gt;
As in &lt;code&gt;bash&lt;/code&gt; you can simply do :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
url &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"thewebhookurl"&lt;/span&gt;

curl &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"content":"'&lt;/span&gt;&lt;span class="s2"&gt;"YOUR WHAT EVER MESSAGE "&lt;/span&gt;&lt;span class="s1"&gt;'"}'&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but in &lt;code&gt;nodejs&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;webhook_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;thewebhoooklink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ABC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;webhook_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and it should work but calling the function &lt;code&gt;log('something something');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HAPPY CODING!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IDTNZdo-fqU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>node</category>
      <category>discord</category>
      <category>webhook</category>
    </item>
    <item>
      <title>Junior Front-end Developer Roadmap</title>
      <author>Michael Myers</author>
      <pubDate>Fri, 01 Oct 2021 02:05:30 +0000</pubDate>
      <link>https://dev.to/devmoek/junior-front-end-developer-roadmap-4m0g</link>
      <guid>https://dev.to/devmoek/junior-front-end-developer-roadmap-4m0g</guid>
      <description>&lt;p&gt;&lt;strong&gt;Junior Frontend Developer&lt;/strong&gt; ‚Äî Freshman in web development with over one year of experience. He has to know the internet basics, HTML, CSS, JavaScript, Git, Web Security Knowledge, package managers, CSS preprocessors, frameworks. It will be great if he knows react.js, vue.js, angular. Simply it‚Äôs a middle developer working on a junior position. It‚Äôs a joke, but sometimes people want all of these from junior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#who-is-junior-frontend-developer"&gt;Who is Junior Frontend Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#my-story-about-php"&gt;About PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-start"&gt;How to start in Web Dev?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6enHUILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322698114/pkb0-rO-v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6enHUILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322698114/pkb0-rO-v.png" alt="meme from Reddit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-is-junior-frontend-developer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Who is Junior Frontend Developer?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It‚Äôs a developer with basic knowledge of Web Development and the Internet as well. He knows HTML, CSS, the basics of JS, and understands how a browser works. And that‚Äôs it. He knows how to build a simple web page from scratch. Maybe he knows CSS frameworks and preprocessors such as Bootstrap, SCSS. It‚Äôs a basic that might take up to 1 year if you learn smoothly and don‚Äôt rush. In some cases, you can learn PHP as I did.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-story-about-php"&gt;
  &lt;/a&gt;
  &lt;strong&gt;My story about PHP&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I‚Äôve learned PHP for my school project. I needed a database, working form, and administrator panel to change/delete/add rows in a database. That was kind of hard, changing and deleting the script is not working. But still, I don‚Äôt learn PHP before this project. This project took 7 months. It was a dental clinic website with 7 pages, without design layout, logo file, text, pictures. I made and found it all by myself. I have developed it by HTML, CSS, JS, PHP without frameworks or preprocessors. That was a nice experience to work with. I‚Äôve never done something like that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to start?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To start your journey in frontend development you need to understand, do you like it? Try to build a website in HTML and CSS. Just a simple static page. Of course, it‚Äôs not a frontend development for 100%, it‚Äôs basics. If you like basics you going to like to go deep. You can take courses to provide smooth learning. I have had to learn on &lt;a href="https://www.freecodecamp.org/"&gt;free–°ode–°amp&lt;/a&gt;. It‚Äôs a free course that contains a lot of useful information with a certificate at the end of each course. Also, free–°ode–°amp has a big learners base in Facebook, Reddit, Twitter, free–°ode–°amp‚Äôs blog. You can ask a question if you don‚Äôt understand how to pass a challenge or answer if you know a solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2a-IwyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322700015/ojJdixeMai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2a-IwyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322700015/ojJdixeMai.png" alt="A non-profit organization that consists of an interactive learning web platform"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;A non-profit organization that consists of an interactive learning web platform.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After you understand it‚Äôs yours. You need to go deep. If you are already know HTML, CSS, basics of JS and Git. Your next stage is npm packages or yarn. You can pick both as well. Then learn Webpack technology. After that pick a Framework such as React.js (Redux, MobX), Vue.js (VueX), Angular.js (RxJS, NgRx). You can check the roadmap &lt;a href="https://www.instagram.com/p/CTBYVPSoAIk/"&gt;here&lt;/a&gt;. If you would like to see more than I did, you can visit &lt;a href="https://roadmap.sh/frontend"&gt;this website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlgrdVPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322701701/0zAuNp64T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlgrdVPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322701701/0zAuNp64T.png" alt="Frontend Roadmap"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Frontend Roadmap&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thank you for reading. Those were my thoughts about the junior frontend developer roadmap. What do you think about the roadmap? If you are a junior, what do you learn right now? If you just want to start it‚Äôs a great time to do it! Do not forget that programming means forever studying. Don‚Äôt stop at what you have learned right now, keep moving.&lt;/p&gt;

&lt;p&gt;I hope you being well guys. As for me, I have a pretty hard time in my life. I don‚Äôt know what will be in 1 month. I live in Russia and the army here is mandatory. I can‚Äôt move or do something because I‚Äôm broke. Find a job I can‚Äôt too, they just bring me to the army if I‚Äôll try to find a job. I will post articles here for long as I can. I like writing and sharing thoughts helps me to forget about the army.&lt;/p&gt;

&lt;p&gt;UPD 10/1/2021: I got a job :) And the doctor found a diagnosis that maybe I will not go to the army.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8UmQCWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1443576101930881040/zdrsTnU0_normal.jpg" alt="Michael Myers üßë‚Äçüíª profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michael Myers üßë‚Äçüíª
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/devmoek"&gt;@devmoek&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today is one of the most great day in 2021 üéâüéâüéâ&lt;br&gt;&lt;br&gt;First things first, I have an issue with army. The army in Russia is mandatory, but today I found a diagnosis and move in the right wayüòÅ&lt;br&gt;&lt;br&gt;The second, I got an offer in a tech company. I‚Äôm so excited about it üéäü•≥
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:07 PM - 29 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443215906407071744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443215906407071744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443215906407071744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Mi nueva startup - Mensajer√≠a y paqueter√≠a express en M√©rida, Yucat√°n</title>
      <author>g7b</author>
      <pubDate>Fri, 01 Oct 2021 01:54:57 +0000</pubDate>
      <link>https://dev.to/g7b/mi-nueva-startup-mensajeria-y-paqueteria-express-en-merida-yucatan-3on2</link>
      <guid>https://dev.to/g7b/mi-nueva-startup-mensajeria-y-paqueteria-express-en-merida-yucatan-3on2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ahora-me-voy-a-rifar-un-servicio-de-paqueter%C3%ADa-y-mensajer%C3%ADa-express-y-una-app-para-delivery-en-m%C3%A9rida-yucat%C3%A1n"&gt;
  &lt;/a&gt;
  Ahora me voy a rifar un servicio de paqueter√≠a y mensajer√≠a express y una app para delivery en M√©rida, Yucat√°n.
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#por-qu%C3%A9"&gt;
  &lt;/a&gt;
  ¬øPor qu√©?
&lt;/h3&gt;

&lt;p&gt;Pues la ciudad esta creciendo bastante y servicios como iVoy o 99minutos no dan servicio en esta ciudad y aunque estuvieran me vale madres.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qu%C3%A9-creo-que-se-necesita"&gt;
  &lt;/a&gt;
  ¬øQu√© creo que se necesita?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clientes, jaja&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#no-ya-en-serio"&gt;
  &lt;/a&gt;
  No ya en serio,
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Una landing page para ofrecer la info de los servicios.&lt;/li&gt;
&lt;li&gt;Una landing para que se registren los repartidores.&lt;/li&gt;
&lt;li&gt;Una app para rastreo de entregas y solicitud de recolecci√≥n.&lt;/li&gt;
&lt;li&gt;App para repartidores, para asignar los servicios y hacer el tracking en tiempo real.&lt;/li&gt;
&lt;li&gt;Redes sociales, para esta startup chance con LinkedIn y Face la armamos.&lt;/li&gt;
&lt;li&gt;Un help desk y centro de atenci√≥n a clientes.&lt;/li&gt;
&lt;li&gt;Unas 2 motos propias para las entregas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#de-rh-qu%C3%A9-se-necesita"&gt;
  &lt;/a&gt;
  De RH, ¬øqu√© se necesita?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2 personas que entreguen&lt;/li&gt;
&lt;li&gt;1 persona de atenci√≥n a clientes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1nto-se-va-a-cobrar"&gt;
  &lt;/a&gt;
  ¬øCu√°nto se va a cobrar?
&lt;/h3&gt;

&lt;p&gt;M√≠nimo $35 MXN hasta 4 km y $10 varitos el km extra.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0la-plataforma-qu%C3%A9-debe-tener"&gt;
  &lt;/a&gt;
  ¬†La plataforma, ¬øqu√© debe tener?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;En el home toda la info del servicio, qu√© se ofrece, d√≥nde, por qu√©, c√≥mo y cu√°nto cuesta.&lt;/li&gt;
&lt;li&gt;Rastreo,&lt;/li&gt;
&lt;li&gt;Solicitar recolecci√≥n,&lt;/li&gt;
&lt;li&gt;Para E-commerce,&lt;/li&gt;
&lt;li&gt;Para Empresas,&lt;/li&gt;
&lt;li&gt;Reg√≠strate como mensajero o repartidor,&lt;/li&gt;
&lt;li&gt;Mensajer√≠a express,&lt;/li&gt;
&lt;li&gt;Contacto y ayuda,&lt;/li&gt;
&lt;li&gt;Pol√≠ticas y &lt;/li&gt;
&lt;li&gt;T√©rminos y condiciones.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-se-va-a-llamar"&gt;
  &lt;/a&gt;
  ¬øC√≥mo se va a llamar?
&lt;/h3&gt;

&lt;p&gt;Ya lo tengo pero todav√≠a no lo pongo aqu√≠ hasta que compre el dominio, capaz que lo compran nom√°s por chingar.&lt;/p&gt;

&lt;p&gt;Ya con eso...&lt;/p&gt;

&lt;p&gt;Todo lo que me falte ah√≠ lo voy poniendo o lo ponen aqu√≠ abajo ‚Üì&lt;/p&gt;

</description>
      <category>startup</category>
      <category>react</category>
      <category>aws</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>6502 Assembly Language Practice</title>
      <author>Qiwen Yu</author>
      <pubDate>Fri, 01 Oct 2021 01:44:59 +0000</pubDate>
      <link>https://dev.to/qiwenyu/6502-assembly-language-practice-379</link>
      <guid>https://dev.to/qiwenyu/6502-assembly-language-practice-379</guid>
      <description>&lt;p&gt;In this blog, I would like to present simple 6502 assembly code and give a brief explanation/comments on how it works.&lt;br&gt;
The Bitmap code is the basic code I use, which will paint the whole page to yellow. And I will try to create line across the page locate on different places.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bitmap-code"&gt;
  &lt;/a&gt;
  Bitmap Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$00    ; set a pointer at $40 to point to $0200
sta $40
lda #$02
sta $41

lda #$07    ; colour number

ldy #$00    ; set index to 0

loop:   sta ($40),y ; set pixel at the address (pointer)+Y

iny     ; increment index
bne loop    ; continue until done the page

inc $41     ; increment the page
ldx $41     ; get the current page number
cpx #$06    ; compare with 6
bne loop    ; continue until done all pages

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#draw-a-green-line-across-the-top"&gt;
  &lt;/a&gt;
  Draw a green line across the top
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$00             ; set a pointer at $40 to point to $0200
sta $40
lda #$02
sta $41

lda #$05             ; set color green

ldy #$00             ; set index to 0
top:sta ($40), y         ; set pixel

iny                  ; increment index

cpy #$20            ; compare y value with 20. If the index is 20, end the loop

bne top    

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUBTja6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9esj52q5bkxtpovzm1pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUBTja6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9esj52q5bkxtpovzm1pf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#draw-a-blue-line-across-the-bottom"&gt;
  &lt;/a&gt;
  Draw a blue line across the bottom
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$05
sta $41   
lda #$03             ; set color blue

ldy #$e0             ; set the index to last line

bottom:  sta ($40), y      ; set pixel
iny                      ; increment index
bne bottom         ; continue until done the line

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUZr4hNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5whu63zwzb1b76ouxkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUZr4hNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5whu63zwzb1b76ouxkr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#draw-a-yellow-line-down-the-left-side-and-a-purple-line-down-the-right-side"&gt;
  &lt;/a&gt;
  Draw a yellow line down the left side, and a purple line down the right side
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$00             ; set a pointer at $40 to point to $0200
sta $40
lda #$02
sta $41

both_side: lda #$07         ;set the color yellow

sta ($40), y  

tax                       ; transfer A to X
tya                       ; transfer Y to A
clc                       ; clear carry flag to do ADC (add with carry)
adc #$1f              ; add with #$1f to indicates the last line

tay                       ; transfer A to Y
txa                       ; transfer X to A

lda #$04              ; set the color purple

sta ($40), y          ; 
iny                       ; increment index y
bne both_side      ; continue until done the page

inc $41                ; increment the page
ldx $41                ; get the page
cpx #$06             ; compare with 6, the last page is 05, when it reaches to 06, it means all pages are already painted
bne both_side       ; continue until done all page

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITHpfeNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3bz234ydel5vakzp3nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITHpfeNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3bz234ydel5vakzp3nq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thoughts-about-6502-assembly-language"&gt;
  &lt;/a&gt;
  Thoughts about 6502 Assembly Language
&lt;/h2&gt;

&lt;p&gt;Assembly language is the only low-level language I have learned so far. This language is a symbolic representation of machine language. Learning this language makes me understand more on how to communicate with machine. I think assembly language is a necessary bridge between the underlying hardware of a computer and the higher-level programming languages like Python. This language helps programmers to write human-readable code that is almost similar to machine language. After having a basic knowledge of this kind of machine language actually helps me to get rid of the fear of writing code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tya-command"&gt;
  &lt;/a&gt;
  TYA Command
&lt;/h3&gt;

&lt;p&gt;"tya" stands for "Transfer Y to A". It means that every time the value in Y register is increased, the value in A register is incremented as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lsa-command"&gt;
  &lt;/a&gt;
  LSA Command
&lt;/h3&gt;

&lt;p&gt;"lsa" stands for "Logically Shift Right". This command shifts the color one bit to the right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asl-command"&gt;
  &lt;/a&gt;
  ASL Command
&lt;/h3&gt;

&lt;p&gt;"asl" stands for "Arithmetically Shift Left". ASL shifts all bits left one position. &lt;/p&gt;

</description>
      <category>assembly</category>
    </item>
    <item>
      <title>Fetching data in React: Quick guide</title>
      <author>jideabdqudus</author>
      <pubDate>Fri, 01 Oct 2021 01:04:59 +0000</pubDate>
      <link>https://dev.to/jideabdqudus/fetching-data-in-react-quick-guide-4fba</link>
      <guid>https://dev.to/jideabdqudus/fetching-data-in-react-quick-guide-4fba</guid>
      <description>&lt;p&gt;Fetching data from an API either from an external source or from the Backend of your application can be done in many ways.&lt;/p&gt;

&lt;p&gt;In this Quick guide, I would show you how to fetch data in a react app by making an HTTP request to a REST API using 4 different patterns.&lt;/p&gt;

&lt;p&gt;Before I begin, let‚Äôs have a refresher on what REST APIs are:&lt;/p&gt;

&lt;p&gt;What is a REST API?&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://restfulapi.net"&gt;REST API&lt;/a&gt; (also known as &lt;strong&gt;RESTful API&lt;/strong&gt;) is an application programming interface (&lt;strong&gt;API&lt;/strong&gt; or &lt;strong&gt;web API&lt;/strong&gt;) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for ‚Äú&lt;strong&gt;RE&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer‚Äù.&lt;/p&gt;

&lt;p&gt;In this guide, we would be making use of the &lt;a href="https://docs.github.com/en/rest"&gt;Github REST API&lt;/a&gt; and its sample response looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"login": "jideabdqudus",
"id": 45945474,
"node_id": "MDQ6VXNlcjQ1OTQ1NDc0",
"avatar_url": "https://avatars.githubusercontent.com/u/45945474?v=4",
"gravatar_id": "",
"url": "https://api.github.com/users/jideabdqudus",
"html_url": "https://github.com/jideabdqudus",
"followers_url": "https://api.github.com/users/jideabdqudus/followers",
"following_url": "https://api.github.com/users/jideabdqudus/following{/other_user}",
"gists_url": "https://api.github.com/users/jideabdqudus/gists{/gist_id}",
"starred_url": "https://api.github.com/users/jideabdqudus/starred{/owner}{/repo}",
"subscriptions_url": "https://api.github.com/users/jideabdqudus/subscriptions",
"organizations_url": "https://api.github.com/users/jideabdqudus/orgs",
"repos_url": "https://api.github.com/users/jideabdqudus/repos",
"events_url": "https://api.github.com/users/jideabdqudus/events{/privacy}",
"received_events_url": "https://api.github.com/users/jideabdqudus/received_events",
"type": "User",
"site_admin": false,
"name": "Jide Abdul-Qudus.",
"company": null,
"blog": "www.abdulqudus.com",
"location": "Lagos, Nigeria.",
"email": null,
"hireable": true,
"bio": "Software Engineer.",
"twitter_username": null,
"public_repos": 57,
"public_gists": 0,
"followers": 12,
"following": 0,
"created_at": "2018-12-17T15:57:35Z",
"updated_at": "2021-04-06T20:48:07Z"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever a GET request is made to this &lt;a href="https://api.github.com/users/jideabdqudus"&gt;(api.github.com/users/jideabdqudus)&lt;/a&gt; endpoint it returns this Javascript Object as its response &amp;amp; we can decide to use this data in our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetching-data-using-the-fetch-api"&gt;
  &lt;/a&gt;
  Fetching data using the Fetch API
&lt;/h3&gt;

&lt;p&gt;The Fetch API is an inbuilt JavaScript method for getting resources from a server or an API endpoint. It s a tool that‚Äôs built into most modern browsers on the window object (&lt;code&gt;window.fetch&lt;/code&gt;) and enables us to make HTTP requests very easily using JavaScript promises.&lt;/p&gt;

&lt;p&gt;To make a simple GET request with fetch we just need to include the URL endpoint which is a compulsory argument. It returns a promise that points to the response from the request. We want to make this request once our React component has mounted hence we would be making use of a Hook called &lt;em&gt;useEffect&lt;/em&gt; for &lt;em&gt;functional-based&lt;/em&gt; components or &lt;em&gt;componentDidMount&lt;/em&gt; for &lt;em&gt;class-based&lt;/em&gt; components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react";
export default function App() {

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() =&amp;gt; {
    fetch("https://api.github.com/users/jideabdqudus")
      .then((response) =&amp;gt; {
        if (response.ok) {
          return response.json();
        }
        throw response;
      })
      .then((data) =&amp;gt; {
        setData(data);
      })
      .catch((error) =&amp;gt; {
        console.error("Error fetching data: ", error);
        setError(error);
      })
      .finally(() =&amp;gt; {
        setLoading(false);
      });
  }, []);

  if (loading) return "Loading...";
  if (error) return "Error!";
  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we have created a very simple functional component that makes a fetch request once the component gets mounted and sends back the response to us in the data state.&lt;/p&gt;

&lt;p&gt;Within the useEffect we declare the API endpoint inside of our fetch function, the &lt;code&gt;.then()&lt;/code&gt; callback, was used to see if the response was okay (&lt;code&gt;response.ok&lt;/code&gt;). We call back a response as JSON data if the response is ok.&lt;/p&gt;

&lt;p&gt;If it‚Äôs not an okay response, we assume there was an error making the request. Using fetch, for us to handle the errors, we throw &lt;code&gt;response&lt;/code&gt; as an error for it to handled by our &lt;code&gt;catch&lt;/code&gt; callback.&lt;/p&gt;

&lt;p&gt;Here in our example, we are putting our error data in state with setError. If there's an error we return the text "Error!".&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.finally()&lt;/code&gt; callback is a function that is called when our promise has resolved successfully or not. In it, we set loading to false, so that we no longer see our &lt;code&gt;loading&lt;/code&gt; text.&lt;/p&gt;

&lt;p&gt;Instead we see either our data on the page if the request was made successfully, or that there was an error in making the request if not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-fetch-data-in-react-using-axios"&gt;
  &lt;/a&gt;
  How to Fetch Data in React Using Axios
&lt;/h3&gt;

&lt;p&gt;The second pattern is by making use of Axios. Axios is an easy to use promise-based HTTP client for the browser and node.js. With Axios, we get the ability to intercept and cancel request, it also has a built-in feature that provides client-side protection against cross-site request forgery.&lt;/p&gt;

&lt;p&gt;Axios is a React/Javascript library, so for us to use it in our app we would need to install it first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios or yarn add axios

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After which we import it at the top of the component that it would be used in. Making HTTP request with Axios is quite easy, and it‚Äôs one of the most popular ways of fetching data in React. We would be converting the previous Fetch example to an axios request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react";
import axios from "axios";
export default function App() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  useEffect(() =&amp;gt; {
    axios("https://api.github.com/users/jideabdqudus")
      .then((response) =&amp;gt; {
        setData(response.data);
      })
      .catch((error) =&amp;gt; {
        console.error("Error fetching data: ", error);
        setError(error);
      })
      .finally(() =&amp;gt; {
        setLoading(false);
      });
  }, []);

  if (loading) return "Loading...";
  if (error) return "Error!";
  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What Axios enables us to do is to use the exact same promise syntax as fetch ‚Äî but instead of using our first then callback to manually determine whether the response is okay and throw an error, Axios takes care of that for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-data-in-react-using-raw-async-await-endraw-syntax"&gt;
  &lt;/a&gt;
  Fetch Data in React Using &lt;code&gt;async / await&lt;/code&gt; syntax
&lt;/h3&gt;

&lt;p&gt;In ES7, it became possible to resolve promises using the async / await syntax. Async/await is a relatively new way to write asynchronous code in Javascript.&lt;/p&gt;

&lt;p&gt;The benefit of this is that it enables us to remove our &lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt;, and &lt;code&gt;.finally()&lt;/code&gt; callbacks, promises andsimply get back our asynchronously resolved data as if we were writing synchronous code without promises altogether.&lt;/p&gt;

&lt;p&gt;Why &lt;code&gt;async/await&lt;/code&gt; ? Well, simply put, async/await allows us to write asynchronous code in a synchronous manner. The one thing you need to know about async functions is that; they always returns a promise.&lt;/p&gt;

&lt;p&gt;We have to be aware of the fact that when we use &lt;code&gt;useEffect&lt;/code&gt; the effect function (the first argument) cannot be made an &lt;code&gt;async&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;To create an &lt;code&gt;async&lt;/code&gt; function all we need to do is add the &lt;code&gt;async&lt;/code&gt; keyword before the function definition, we would be converting our previous example to an async/await syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react";
import axios from "axios";
export default function App() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  useEffect(() =&amp;gt; {
    getData();
  }, []);

  async function getData() {
    await axios("https://api.github.com/users/jideabdqudus")
      .then((response) =&amp;gt; {
        setData(response.data);
      })
      .catch((error) =&amp;gt; {
        console.error("Error fetching data: ", error);
        setError(error);
      })
      .finally(() =&amp;gt; {
        setLoading(false);
      });
  }

  if (loading) return "Loading...";
  if (error) return "Error!";
  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In summary, &lt;code&gt;async/await&lt;/code&gt; is a cleaner syntax to write asynchronous Javascript code. It enhances readability and flow of your code.&lt;/p&gt;

&lt;p&gt;Things to keep in mind while using &lt;code&gt;async/await&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Async functions return a promise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Await can only be used inside an async block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Await waits until the function(‚Äúpromise‚Äù) resolves or rejects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-fetch-data-in-react-using-a-custom-react-hook-usefetch"&gt;
  &lt;/a&gt;
  How to Fetch Data in React Using a Custom React Hook (useFetch)
&lt;/h3&gt;

&lt;p&gt;Over time, you may realize that it gets a bit tedious and time-consuming to keep writing the useEffect hook with all of its boilerplate within every component in which you want to fetch data.&lt;/p&gt;

&lt;p&gt;To cut down on our reused code, we can use a custom hook as a special abstraction, which we can write ourselves from a third party library (like we are here, using the library &lt;code&gt;react-fetch-hook&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;useFetch is an isomorphic fetch hook. That means it works with SSR (server side rendering).&lt;/p&gt;

&lt;p&gt;A custom hook that makes our HTTP request allows us to make our components much more concise. All we have to do is call our hook at the top of our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import useFetch from "react-fetch-hook"

export default function App() {
  const { isLoading, error, data } = useFetch("https://api.github.com/users/jideabdqudus");
  if (isLoading) return "Loading...";
  if (error) return "Error!";

  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The 4 different patterns shown above are great ways of consuming APIs but fetch is mainly used when building relatively small applications and Axios/useFetch when building large applications for scalability reasons.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this guide, I‚Äôll be happy to answer any comment or questions you leave down below!&lt;/p&gt;

&lt;p&gt;Check out more articles on my website: &lt;a href="//blog.abdulqudus.com"&gt;blog.abdulqudus.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>No YAML Needed! Create GitHub Actions Workflows from VS and CLI</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Fri, 01 Oct 2021 00:14:28 +0000</pubDate>
      <link>https://dev.to/n3wt0n/no-yaml-needed-create-github-actions-workflows-from-vs-and-cli-50kp</link>
      <guid>https://dev.to/n3wt0n/no-yaml-needed-create-github-actions-workflows-from-vs-and-cli-50kp</guid>
      <description>&lt;p&gt;Today I'm going to show you two very easy ways to create your GitHub &lt;strong&gt;Actions CI&lt;/strong&gt; Workflow for .NET Applications, &lt;strong&gt;without writing a single line of YAML&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Getting started with GitHub Actions may not be always easy. Especially when the alternatives for deployment are so easy (like the right-click publish in Visual Studio, for example). What if we could create our CI workflows with Actions in the same way?&lt;/p&gt;

&lt;p&gt;Btw, I'd be curious to know how you create your GitHub Actions workflow. Let me know in the comment section below if you do it directly in the GitHub UI, or in VSCode perhaps with some extension, or however else you do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N2ELIqLWz0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/N2ELIqLWz0k"&gt;Link to the video: https://youtu.be/N2ELIqLWz0k&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tools"&gt;
  &lt;/a&gt;
  The Tools
&lt;/h3&gt;

&lt;p&gt;The first tool we are going to take a look at is &lt;strong&gt;integrated in Visual Studio&lt;/strong&gt;, so it works on Windows, while the second one requires the &lt;strong&gt;use of the CLI&lt;/strong&gt; and therefore can be used in MacOS and Linux as well.&lt;/p&gt;

&lt;p&gt;Let's jump into VS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#from-visual-studio"&gt;
  &lt;/a&gt;
  From Visual Studio
&lt;/h4&gt;

&lt;p&gt;Doing it from Visual Studio is pretty straight forward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HY_FxW0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9zzkq0tc5qqzdg00zwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HY_FxW0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9zzkq0tc5qqzdg00zwa.png" alt="Deployment Type"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just right-click on the &lt;strong&gt;Project Name&lt;/strong&gt;, select &lt;em&gt;__Publish&lt;/em&gt;&lt;em&gt;, choose your deployment target, and then you have the new _&lt;/em&gt;&lt;em&gt;Deployment Type&lt;/em&gt;_ selection.&lt;/p&gt;

&lt;p&gt;You can either deploy directly, as usual, or create a YAML file for the GitHub Actions CI/CD.&lt;/p&gt;

&lt;p&gt;After confirmation, Visual Studio will take care of the rest and create the YAML file for you in the &lt;code&gt;.github/workflows&lt;/code&gt; folder, named as your deployment target.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzbJANW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oefpiafjskopdjgtccqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzbJANW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oefpiafjskopdjgtccqm.png" alt="YAML Generated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image, the workflow takes care of both CI and CD for your application&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are on Visual Studio 2019 and you don't see the deployment type selection, make sure the feature is enabled. Go to &lt;em&gt;Tools &amp;gt; Options &amp;gt; Environment &amp;gt; Preview Features&lt;/em&gt; and make sure the &lt;strong&gt;&lt;em&gt;GitHub Actions support in Publish&lt;/em&gt;&lt;/strong&gt; is checked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#from-the-cli"&gt;
  &lt;/a&gt;
  From The CLI
&lt;/h4&gt;

&lt;p&gt;As I've said, the second way I have for you to generate a GitHub Actions Workflow without writing the YAML is using the &lt;strong&gt;dotnet CLI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://timheuer.com"&gt;Tim Heuer&lt;/a&gt; has in fact created an &lt;strong&gt;awesome template&lt;/strong&gt; that generates the workflow files for GitHub Actions from the CLI.&lt;/p&gt;

&lt;p&gt;First thing, we need to &lt;strong&gt;install the template&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new &lt;span class="nt"&gt;-i&lt;/span&gt; TimHeuer.GitHubActions.Templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add the feature we want to use. Then just execute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new workflow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in the root folder of your project and you are done.&lt;/p&gt;

&lt;p&gt;What you‚Äôll get is a straightforward GitHub Actions workflow to &lt;strong&gt;build and test&lt;/strong&gt; your .NET application. Keep in mind this is a starting point. It‚Äôs not going to do everything you might want, but it‚Äôs a solid base to build from.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Cool right? Let me know down below what you think about this, and as I've said before also how you usually create your Actions workflows.&lt;/p&gt;

&lt;p&gt;Also, speaking of GitHub Actions, checkout &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt;, where I talk about creating and using templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N2ELIqLWz0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>yaml</category>
      <category>cicd</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
