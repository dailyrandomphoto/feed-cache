<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>You are an array</title>
      <author>Volker Schukai</author>
      <pubDate>Sat, 27 Nov 2021 18:11:20 +0000</pubDate>
      <link>https://dev.to/schukai/you-are-an-array-25l3</link>
      <guid>https://dev.to/schukai/you-are-an-array-25l3</guid>
      <description>&lt;p&gt;Javascript always has some surprises in store. for example, &lt;code&gt;typeof []&lt;/code&gt; return &lt;strong&gt;object&lt;/strong&gt; and not &lt;strong&gt;array&lt;/strong&gt;. This has historical reasons. But this can be very confusing&lt;/p&gt;

&lt;p&gt;How can you then properly check if something is an array?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constructor"&gt;
  &lt;/a&gt;
  Constructor
&lt;/h2&gt;

&lt;p&gt;For example, you could check if the constructor is an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;([]).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this has a problem. With null and undefined a TypeError is thrown. &lt;/p&gt;

&lt;p&gt;You could catch this for example with a try/catch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But you don't want that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exotic"&gt;
  &lt;/a&gt;
  Exotic
&lt;/h2&gt;

&lt;p&gt;There is also this exotic possibility to check if it is an array. You can missuse the &lt;code&gt;toString()&lt;/code&gt; method for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([]).&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="c1"&gt;// =&amp;gt; false Object.prototype.toString.call(undefined).indexOf('Array')!==-1&lt;/span&gt;
   &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it doesn't just look awkward, it is awkward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instanceof"&gt;
  &lt;/a&gt;
  instanceOf
&lt;/h2&gt;

&lt;p&gt;Alternatively, the instanceof operator, which is also known from other languages, can of course be used here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Already looks pretty good. But there is also a problem here.&lt;/p&gt;

&lt;p&gt;All these checks work only if the array was created by the original array constructor in the current environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iframe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iframeArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;iframeArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the two array instances do not match.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there is a real solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrayisarray"&gt;
  &lt;/a&gt;
  Array.isArray
&lt;/h2&gt;

&lt;p&gt;For these reasons, since ECMAScript 5 there is a method &lt;code&gt;Array.isArray()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also works with different instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; true&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; surprise; true&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it (isArray) is supported, it is the solution!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;hope you enjoy it!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"&gt;MSN isArray()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://about.schukai.com/de/jobs/"&gt;we are hiring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>array</category>
      <category>browser</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Aggregate Functions in SQL</title>
      <author>Onyinyechi Ofondu</author>
      <pubDate>Sat, 27 Nov 2021 17:46:27 +0000</pubDate>
      <link>https://dev.to/onyii/aggregate-functions-in-sql-164d</link>
      <guid>https://dev.to/onyii/aggregate-functions-in-sql-164d</guid>
      <description>&lt;p&gt;Aggregate functions are mathematical computations that return a single value from a range of values which expresses the significance of the aggregated data. They are used to derive descriptive statistics and provide key numbers in different sectors like the health, economic, and business sectors.&lt;br&gt;
The diagram below shows the typical operation on an aggregate function on a specific column and what the result looks like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dY-78kar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xb8ezjif1z2r5zvll2x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dY-78kar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xb8ezjif1z2r5zvll2x.PNG" alt="Image showing  the application of aggregate functions visually" width="287" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the diagram above we can see the dataset with two columns (column 1 &amp;amp; column 2). Using the SUM function on column 2 we can see that it adds up all the values in that column and returns a single value in the "result" column.&lt;br&gt;
For this article, we shall be using PostgreSQL and Pgadmin4 as the GUI which is one of the best Graphical user interface platforms for PostgreSQL and is very beginner-friendly. You can download it &lt;a href="https://www.pgadmin.org/download/"&gt;here&lt;/a&gt; for your PostgreSQL needs.&lt;/p&gt;

&lt;p&gt;Getting back into it, the different aggregate functions are:&lt;br&gt;
&lt;strong&gt;SUM&lt;/strong&gt;: adds up all the values of a specified column.&lt;br&gt;
&lt;strong&gt;MIN&lt;/strong&gt;: the minimum value of a specified column.&lt;br&gt;
&lt;strong&gt;MAX&lt;/strong&gt;: the maximum value of a specified column.&lt;br&gt;
&lt;strong&gt;AVG&lt;/strong&gt;: the average number of values of a specified column.&lt;br&gt;
&lt;strong&gt;COUNT&lt;/strong&gt;: the number of values (rows) of a specified column/table.&lt;/p&gt;

&lt;p&gt;Aggregate functions can only be used in the SELECT  and HAVING clause where:&lt;br&gt;
The &lt;strong&gt;SELECT&lt;/strong&gt; clause lists or specifies the column that will be returned for the SQL query and &lt;br&gt;
The &lt;strong&gt;HAVING&lt;/strong&gt; clause specifies a search condition for a group or an aggregate.&lt;/p&gt;

&lt;p&gt;I created a dataset of movie downloads for this article which contains certain movie names, genres, and the number of downloads. This can be created using the SQL statement below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2vWkf_ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs0t5slqrv6egswekhbt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2vWkf_ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs0t5slqrv6egswekhbt.PNG" alt="article_movies: a dataset created for this article" width="269" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the dataset above, we will look at the applications of the different aggregate functions.&lt;br&gt;
🔥Let's go!!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#count"&gt;
  &lt;/a&gt;
  COUNT()
&lt;/h3&gt;

&lt;p&gt;The COUNT function is the most straightforward function and the best to start with:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The "COUNT(*)" in &lt;em&gt;line 1&lt;/em&gt; above is used to count all the rows in the dataset. This gives the result in the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0PU9jJWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aetm1zn0ueq1utbu7srr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0PU9jJWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aetm1zn0ueq1utbu7srr.PNG" alt="count_aggregate_function_1_output" width="52" height="53"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, when the COUNT function is used on a column, it counts only the values in that column that are, &lt;strong&gt;not NULL&lt;/strong&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;looking at the &lt;em&gt;count_aggregate_function_2&lt;/em&gt; snippet of code above and the &lt;em&gt;count_aggregate_function_1&lt;/em&gt; snippet before that, we can see that the only difference is the "genre" column which is in the COUNT function and not "*" which denotes all the columns in the table.&lt;br&gt;
The result as seen in the image below is not the same as the COUNT  for the entire table because that column contains two NULL values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pp6xGjEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cb657lq07v60yvwipr86.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pp6xGjEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cb657lq07v60yvwipr86.PNG" alt="count_aggregate_function_2_output" width="57" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from the COUNT function, &lt;strong&gt;all the other aggregate functions are only used on one column at a time&lt;/strong&gt;. Following this, let's look at the other functions!!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sum"&gt;
  &lt;/a&gt;
  SUM()
&lt;/h3&gt;

&lt;p&gt;The SUM function was used to illustrate aggregate functions visually in the image at the start of this article, so it's pretty clear that it adds up the values of a column. Unlike the COUNT function, the SUM function can only be used on columns with a numeric data type:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjnDpNDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ntkqrm4z9fguw6mvphh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjnDpNDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ntkqrm4z9fguw6mvphh.PNG" alt="sum_aggegate_function_output" width="55" height="46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;line 1&lt;/em&gt; in the code snippet above, we can see that the SUM function is applied to the downloads column (a numeric data type column).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avg"&gt;
  &lt;/a&gt;
  AVG()
&lt;/h3&gt;

&lt;p&gt;The AVG function gets the mean of all values of a specified column. The mean of a set of numbers is the sum of all the numbers in that set divided by the number of values (count) in the set.&lt;br&gt;
Same as the SUM function, the AVG function can only be used on  numeric columns:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uhKDkf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3kdird4vwms8vp03u0y.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uhKDkf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3kdird4vwms8vp03u0y.PNG" alt="avg_aggegate_function_output" width="56" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#min-amp-max"&gt;
  &lt;/a&gt;
  MIN() &amp;amp; MAX()
&lt;/h3&gt;

&lt;p&gt;The MIN and MAX functions are opposites of the same coin in that the MIN function gets the lowest value of a specified column and the MAX function gets the highest value of a specified column. Unlike the other two functions above, the MIN and MAX functions can be used on columns with numerical, date-time, and even character/string data types as seen below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q23gTqAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pkfigk7qdxiukuxbi37.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q23gTqAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pkfigk7qdxiukuxbi37.PNG" alt="min_and_max_aggregate_functions_output" width="94" height="53"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's take a look at some helpful clauses - AS, GROUP BY and ORDER BY clause.&lt;br&gt;
Take a look at this code below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T06daxb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj1fpnp0lna5q4mqwm3o.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T06daxb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj1fpnp0lna5q4mqwm3o.PNG" alt="count_aggregate_function_3_output" width="98" height="49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result for the snippet of code above is confusing without the code.&lt;/p&gt;

&lt;p&gt;Now look at this one:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBCd3PUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1x4jqa2s2fz6bcoh7mp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBCd3PUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1x4jqa2s2fz6bcoh7mp.PNG" alt="as_command" width="178" height="54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is better, isn't it? 😉&lt;br&gt;
The &lt;strong&gt;AS&lt;/strong&gt; command is used to rename a column or table with an alias (which only exists for the duration of the query). &lt;br&gt;
The result for the snippet is easier to understand with the AS command added in. This can be used for all sorts of queries to make your output easier to understand.&lt;/p&gt;

&lt;p&gt;There are cases when aggregate functions &lt;em&gt;does not return a single value per column&lt;/em&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBelKM4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzk78ljeh8fi7dqmpthi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBelKM4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzk78ljeh8fi7dqmpthi.PNG" alt="group_by_clause" width="117" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;line 3&lt;/em&gt; above, the &lt;strong&gt;GROUP BY&lt;/strong&gt; clause is introduced. It groups the SUM of the downloads according to the different genres. &lt;br&gt;
The GROUP BY clause groups rows with the same values into summary rows. It is used on categorical columns.&lt;br&gt;
Now let's take a look at the URDER BY clause:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--czu2t6Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luip1ixexnvbkzwhj5d6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czu2t6Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luip1ixexnvbkzwhj5d6.PNG" alt="order_by_clause" width="109" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ORDER BY&lt;/strong&gt; clause is introduced in &lt;em&gt;line 4&lt;/em&gt; above. It is used to order the output of a column(s) in a table in either ascending (ASC) or descending (DESC) order.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#having"&gt;
  &lt;/a&gt;
  HAVING()
&lt;/h3&gt;

&lt;p&gt;The HAVING clause is used as a conditional statement for aggregate functions or/and arithmetic. It is used with the GROUP BY clause to filter groups or aggregates based on a specific condition(s).&lt;br&gt;
It is very similar to the WHERE clause to filter/restrict the results of a query. However, unlike the WHERE clause, it can only be used with the SELECT statement and must be used with the GROUP BY clause.&lt;/p&gt;

&lt;p&gt;In this case, we will see how aggregate functions are used to filter a table using the HAVING clause:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qytWr_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mekjrpai154x41d30cyi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qytWr_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mekjrpai154x41d30cyi.PNG" alt="having_clause" width="116" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the snippet above, the GROUP BY clause returns the rows grouped according to the "genre" column and the &lt;strong&gt;HAVING&lt;/strong&gt; clause specifies the condition to filter the groups.&lt;/p&gt;

&lt;p&gt;Now let's dive into using aggregate functions as window functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aggregate-functions-in-window-functions"&gt;
  &lt;/a&gt;
  Aggregate Functions in Window functions
&lt;/h2&gt;

&lt;p&gt;Window functions are functions that perform operations across a set of rows that are related to the row the function is currently operating on. There are different window functions and they are used to simplify complex operations.&lt;br&gt;
To understand the different window functions and how they are used in SQL, check out &lt;a href="https://dev.to/onyii/window-functions-in-sql-part-1-lin"&gt;Window Functions in SQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we shall look at window functions and aggregate functions. &lt;br&gt;
All the aggregate functions can be used as window functions and they each give awesome and unique results depending on what you are looking for.&lt;br&gt;
Let's look at the &lt;strong&gt;SUM()&lt;/strong&gt; as a window function that gives running totals:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeUJSZtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yumpzzrwb5tbn4ky8eq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeUJSZtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yumpzzrwb5tbn4ky8eq.PNG" alt="sum_aggregate_window_function_output" width="418" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The aggregate window function was used to get the running totals for the number of downloads per genre.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;em&gt;Line 1&lt;/em&gt;, all the columns were selected because aggregate window functions do not return a single value as a result. They behave completely like window functions whilst retaining their computational qualities.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Line 2&lt;/em&gt;, is where the aggregate window function &lt;strong&gt;SUM() OVER()&lt;/strong&gt; is introduced as a brand new column named &lt;em&gt;"genre_running_total"&lt;/em&gt;. 
This new column is a running total on all the downloads that are split into partitions by their genres and ordered by both the name of the movies and their genres.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Aggregate functions either on their own (SUM(), COUNT(), e.t.c) or as a filter (with the HAVING clause) or as a window function (SUM() OVER()) gives different results. &lt;br&gt;
They are very useful and make SQL coding and data presentation as well as analysis a lot easier.&lt;/p&gt;

&lt;p&gt;I hope this has answered some of your questions and given you some new ideas!!&lt;br&gt;
I'll be Back 😎&lt;br&gt;
Bye for now.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>sql</category>
      <category>datascience</category>
      <category>database</category>
    </item>
    <item>
      <title>Best Black Friday Offer - 100% Open-Source and Free Starters</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 27 Nov 2021 17:28:21 +0000</pubDate>
      <link>https://dev.to/sm0ke/best-black-friday-offer-100-open-source-and-free-starters-2825</link>
      <guid>https://dev.to/sm0ke/best-black-friday-offer-100-open-source-and-free-starters-2825</guid>
      <description>&lt;p&gt;Hello Guys!&lt;/p&gt;

&lt;p&gt;These days we are flooded from all directions with BF offers and &lt;code&gt;amazing&lt;/code&gt; discounts from &lt;code&gt;50%&lt;/code&gt; up to &lt;code&gt;95%&lt;/code&gt; for all sort of services, digital and physical products. Well, this list aims to provide another kind of &lt;strong&gt;Black Friday&lt;/strong&gt; offer: &lt;code&gt;100% Free products&lt;/code&gt; published on Github - &lt;code&gt;NO registration lock&lt;/code&gt; or newsletters subscription required to access the products. On top of this, all mentioned templates are &lt;code&gt;actively versioned and supported&lt;/code&gt; by their vendors. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; Feel free to suggest more &lt;strong&gt;free&lt;/strong&gt; deals in the comments.  &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#soft-ui-dashboard-react"&gt;
  &lt;/a&gt;
  ✨ Soft UI Dashboard React
&lt;/h2&gt;

&lt;p&gt;Start your Development with an Innovative Admin Template for MUI and React. If you like the look &amp;amp; feel of the hottest design trend right now, Soft UI, you will fall in love with this dashboard! It features a huge number of components built to fit together and look amazing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/creativetimofficial/soft-ui-dashboard-react"&gt;Soft UI Dashboard React&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-react/#/dashboard"&gt;Soft UI Dashboard React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Soft UI Dashboard React&lt;/strong&gt; is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using MUI styled api and sx prop. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ws-JC5Qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqynuv0t1bgvsy3sc2ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ws-JC5Qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqynuv0t1bgvsy3sc2ye.png" alt="Best Black Friday Offer - Soft UI Dashboard React." width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-berry-dashboard"&gt;
  &lt;/a&gt;
  ✨ React Berry Dashboard
&lt;/h2&gt;

&lt;p&gt;Berry is a free react admin template build using the M-UI. It is meant to be the best User Experience with highly customizable feature-riched pages. It is a complete React Dashboard Template with easy and intuitive responsive design as on retina screens or laptops.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;React Berry Dashboard&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://berrydashboard.io/free/"&gt;React Berry Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Berry brings everything you need for dashboard development. We have added the following high-end features like modern aesthetics UI design, Material-UI components, easy to use code structure.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lecHXZd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6mhh0iee3lhrbc5bl1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lecHXZd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6mhh0iee3lhrbc5bl1f.png" alt="Best Black Friday Offer - React Berry Dashboard." width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pixel-ui-kit"&gt;
  &lt;/a&gt;
  ✨ Pixel UI Kit
&lt;/h2&gt;

&lt;p&gt;Pixel is a free, fully responsive, modern Bootstrap UI Kit that will help you build creative and professional websites. Use our components and sections, switch some Sass variables to build and arrange pages to best suit your needs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/themesberg/pixel-bootstrap-ui-kit"&gt;Pixel UI Kit - Bootstrap 5&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://demo.themesberg.com/pixel-bootstrap-5-ui-kit/"&gt;Pixel UI Kit - Bootstrap 5&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pixel is a premium extension of the famous Bootstrap CSS Framework featuring pricing cards, profile cards, timelines and many more and additional plugins for datepickers and input sliders which Bootstrap does not have by default.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJhkMIbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wltbncmleyxwklbml21h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJhkMIbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wltbncmleyxwklbml21h.png" alt="Best Black Friday Offer - Pixel UI Kit, Bootstrap 5." width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adminkit"&gt;
  &lt;/a&gt;
  ✨ AdminKit
&lt;/h2&gt;

&lt;p&gt;A professional Admin &amp;amp; Dashboard template based on Bootstrap 5 that comes with hundreds of UI components, forms, tables, charts, pages and icons. AdminKit does not require jQuery and neither does one of the 3rd party libraries AdminKit is using.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/adminkit/adminkit"&gt;AdminKit&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://demo.adminkit.io/"&gt;AdminKit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The theme includes a custom Webpack file, which can be used to quickly recompile and minify theme assets while developing or for deployment. You'll need to install Node.js before using Webpack.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ReLh2MbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7zblc9g73my062dvpgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReLh2MbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7zblc9g73my062dvpgz.png" alt="Best Black Friday Offer - AdminKit, Bootstrap 5 Desing." width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#material-kit-2"&gt;
  &lt;/a&gt;
  ✨ Material Kit 2
&lt;/h2&gt;

&lt;p&gt;Material Kit is a Free Bootstrap 5 UI Kit with a fresh, new design inspired by Google's material design. You asked for it, so we built it. It's a great pleasure to introduce to you the material concepts in an easy to use and beautiful set of components. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/creativetimofficial/material-kit"&gt;Material Kit 2&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://demos.creative-tim.com/material-kit/index.html"&gt;Material Kit 2&lt;/a&gt; - LIVE Demo &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Material Kit makes use of light, surface, and movement. It uses a deliberate color choice, edge-to-edge imagery, and large scale typography. The general layout resembles sheets of paper following multiple different layers so that the depth and order are obvious. The navigation stays mainly on the left and the actions on the right.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoCqaY6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsa2fifqs7z3uzdokjwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoCqaY6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsa2fifqs7z3uzdokjwe.png" alt="Best Black Friday Offer - Material Kit 2, Bootstrap 5." width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#django-bootstrap-5-volt"&gt;
  &lt;/a&gt;
  ✨ Django Bootstrap 5 Volt
&lt;/h2&gt;

&lt;p&gt;Open-source dashboard crafted in  Django Framework. Volt Dashboard is a free and open source Bootstrap 5 Admin Dashboard featuring over 100 components, 11 example pages and 3 plugins with Vanilla JS. There are more than 100 free Bootstrap 5 components included some of them being buttons, alerts, modals, datepickers and so on.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://github.com/app-generator/django-volt-dashboard"&gt;Django Bootstrap 5 Volt&lt;/a&gt; - source code&lt;br&gt;
👉 &lt;a href="https://django-volt-dashboard.appseed-srv1.com/"&gt;Django Bootstrap 5 Volt&lt;/a&gt; - LIVE deployment&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lB0u8o07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51070104/143471374-aa0e1ee3-ec50-46bc-971b-c990f5562ade.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lB0u8o07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51070104/143471374-aa0e1ee3-ec50-46bc-971b-c990f5562ade.gif" alt="DBest Black Friday Offer - Django Bootstrap 5 Volt." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to make this list more useful, feel free to submit more &lt;code&gt;open-source&lt;/code&gt; &amp;amp; &lt;code&gt;free&lt;/code&gt; BF deals in the comments. &lt;/p&gt;

&lt;p&gt;The best ones will be added to the list.  &lt;/p&gt;

</description>
      <category>blackfriday</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Sat, 27 Nov 2021 17:24:37 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-30gf</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-30gf</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Enjoying time with family or friends... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your accomplishments this week! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3oz8xAFtqoOUUrsh7W/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oz8xAFtqoOUUrsh7W/giphy.gif" alt="Dancing flower" width="480" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Best thing about Symbl.ai Docs</title>
      <author>Asian Cat</author>
      <pubDate>Sat, 27 Nov 2021 17:20:28 +0000</pubDate>
      <link>https://dev.to/asiancat54x/best-thing-about-symblai-docs-43em</link>
      <guid>https://dev.to/asiancat54x/best-thing-about-symblai-docs-43em</guid>
      <description>&lt;p&gt;Hi, as you have probably known symbl.ai, it is a very powerful tool that you can use for conversation intellisence.&lt;/p&gt;

&lt;p&gt;The thing I loved is how they added different requests methods which can be very helpful for other devs.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>symbl</category>
      <category>buildwithsymbl</category>
    </item>
    <item>
      <title>Reduce code complexity: Guard clauses</title>
      <author>RockAndNull</author>
      <pubDate>Sat, 27 Nov 2021 16:39:20 +0000</pubDate>
      <link>https://dev.to/rockandnull/reduce-code-complexity-guard-clauses-57ae</link>
      <guid>https://dev.to/rockandnull/reduce-code-complexity-guard-clauses-57ae</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1_PGcbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1554279652-51eee9372f32%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dmax%26fm%3Djpg%26ixid%3DMnwxMTc3M3wwfDF8c2VhcmNofDIxfHxndWFyZHxlbnwwfHx8fDE2MzgwMzA5Njc%26ixlib%3Drb-1.2.1%26q%3D80%26w%3D2000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1_PGcbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1554279652-51eee9372f32%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dmax%26fm%3Djpg%26ixid%3DMnwxMTc3M3wwfDF8c2VhcmNofDIxfHxndWFyZHxlbnwwfHx8fDE2MzgwMzA5Njc%26ixlib%3Drb-1.2.1%26q%3D80%26w%3D2000" alt="Reduce code complexity: Guard clauses" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost every software engineer fights a never-ending fight: we strive to make our codebase simpler and thus more readable every day.&lt;/p&gt;

&lt;p&gt;Complexity is added almost every time we interact with the codebase. A simple feature addition would probably result in added complexity and there's nothing we can do about it.&lt;/p&gt;

&lt;p&gt;But there are patterns we can follow to keep complexity to the minimum. The simplest pattern you can start applying today and has an impressive impact on complexity is the &lt;a href="https://en.wikipedia.org/wiki/Guard_(computer_science)"&gt;guard clause&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at the following 2 snippets that have the same result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fun nested() {
    if (condition1) {
        doThings1()
        if (condition2) {
            doThings2()
            if (condition3) {
                doThings3()
            } else {
                throw Exception3()
            }
        } else {
            throw Exception2()
        }
    } else {
        throw Exception1()
    }
}

fun guard() {
    if (!condition1) {
        throw Exception1()
    }
    doThings1()

    if (!condition2) {
        throw Exception2()
    }
    doThings2()

    if (!condition3) {
        throw Exception3()
    }
    doThings3()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that the same code using guard clauses is easier to read and easier to reason.&lt;/p&gt;

&lt;p&gt;In a nutshell, nesting adds complexity. Our code base, full of if statements are full of nesting. Avoid unnecessary nesting and you will reduce complexity.&lt;/p&gt;

&lt;p&gt;When there's deep nesting you need more "mental" processing to keep everything in your head.&lt;/p&gt;

&lt;p&gt;In addition, things are now more "local". The appropriate exception is thrown as soon as the error happens. No need to chase curly braces to figure out when something is thrown.&lt;/p&gt;

&lt;p&gt;Hopefully, this simple trick can make your code a bit more readable with minimum effort.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>softwareengineering</category>
    </item>
    <item>
      <title>How To Implement OAuth2 Social Login(Single Sign-On)Using Facebook &amp; Spring Boot — Part 2</title>
      <author>ROHAN KADAM</author>
      <pubDate>Sat, 27 Nov 2021 16:29:18 +0000</pubDate>
      <link>https://dev.to/rohan2596/how-to-implement-oauth2-social-loginsingle-sign-onusing-facebook-spring-boot-part-2-33mf</link>
      <guid>https://dev.to/rohan2596/how-to-implement-oauth2-social-loginsingle-sign-onusing-facebook-spring-boot-part-2-33mf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#oauth2-facebook"&gt;
  &lt;/a&gt;
  OAuth2 Facebook
&lt;/h2&gt;

&lt;p&gt;Hello, Its &lt;strong&gt;Rohan Kadam&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hello All, Hope you are doing well. Today we are going to understand how we can implement OAuth2 Social Login Using Facebook and &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-spring-boot-in-2020-best-of-lot-6ffce88a1b6e?source=---------39------------------"&gt;Spring Boot&lt;/a&gt;. Let us start coding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XLc5Npkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2Af5N7ntA9r7r6BStch93tww.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XLc5Npkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2Af5N7ntA9r7r6BStch93tww.jpeg" alt="**Social Login Using Facebook and Spring Boot**" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before going forward implementing Part 2. I request to go into taking a look in Part 1 — &lt;strong&gt;How To Implement OAuth2 Social Login Using Facebook&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://medium.com/@rohankadam965/how-to-implement-oauth2-social-login-using-facebook-part-1-e7995f30774e"&gt;&lt;strong&gt;How To Implement OAuth2 Social Login Using Facebook — Part 1&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-create-a-spring-boot-project-using-spring-initializer"&gt;
  &lt;/a&gt;
  **Step 1: **Create a Spring Boot Project using Spring initializer.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://start.spring.io/"&gt;&lt;strong&gt;Spring Initializr&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-add-the-following-dependencies-in-your-project-pomxml"&gt;
  &lt;/a&gt;
  **Step 2: **Add the following dependencies in your project pom.xml
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-security-oauth2-client&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#step-3-create-a-configuration-file-for-implementing-oauth2"&gt;
  &lt;/a&gt;
  **Step 3: **Create a Configuration File for implementing &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-spring-security-and-oauth2-with-spring-boot-for-java-developers-8f0222d6066d?source=---------5-----------------------"&gt;OAuth2.&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#step-4-create-application-yml-which-will-consist-of-facebook-configuration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 4:-&lt;/strong&gt; Create Application Yml which will consist of Facebook Configuration.
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#step-5-create-a-rest-controller-which-consists-of-two-endpoints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 5:-&lt;/strong&gt; Create a &lt;a href="https://javarevisited.blogspot.com/2017/08/difference-between-restcontroller-and-controller-annotations-spring-mvc-rest.html#axzz6grO2U4Lp"&gt;Rest Controller&lt;/a&gt; which consists of two endpoints.
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Note:-&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Principal Object contains username, email, and profile image depending on scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an &lt;strong&gt;error&lt;/strong&gt; occurs regarding an incorrect &lt;strong&gt;redirect Url&lt;/strong&gt; add the following URL &lt;a href="https://localhost:8080/oauth2/callback/google"&gt;**https://localhost:8080/oauth2/callback/facebook&lt;/a&gt;**&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Test Endpoints for localhost:-&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#httplocalhost8080oauth2authorizefacebookredirecturihttplocalhost8080oauth2callbackfacebook"&gt;
  &lt;/a&gt;
  &lt;a href="http://localhost:8080/oauth2/authorize/google?redirect_uri=http://localhost:8080/oauth2/redirect"&gt;**http://localhost:8080/oauth2/authorize/facebook?redirect_uri=http://localhost:8080/oauth2/callback/facebook&lt;/a&gt;**
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" alt="Thank You, Viewers" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Simple Machine Translation: Yorùbá to English</title>
      <author>Abid</author>
      <pubDate>Sat, 27 Nov 2021 16:07:02 +0000</pubDate>
      <link>https://dev.to/kingabzpro/simple-machine-translation-yoruba-to-english-gjd</link>
      <guid>https://dev.to/kingabzpro/simple-machine-translation-yoruba-to-english-gjd</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Finetuning Helsinki NLP Multilanguage model to translate text from Yorùbá to English.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, we will build a machine translation model to translate sentences from the Yorùbá language to the English language. These sentences are from various resources such as news articles, conversations on social media, spoken transcripts, and books written purely in the Yorùbá language.&lt;/p&gt;

&lt;p&gt;Machine translation for low resource language is quite rare, and its quite hard to get accurate results due to the limited size of available training data for these languages. We have a dataset available for Yoruba text (JW300), but that is used to train in the religions domain. We need a model that is generalized and can be used in multiple domains. This is where ai4d.ai comes in with more generalized data, and all we have to do is train our model on this data and produce an accurate result to secure the top position in AI4D Yorùbá Machine Translation Challenge — Zindi.&lt;/p&gt;

&lt;p&gt;In this project we will be using the Helsinki NLP Model, so let's talk about them as an organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🤩🚀 Check out how he got his top 20 ranking on the leaderboard, and try it out yourself!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;#KeepLearning👉&lt;a href="https://bit.ly/310Ah3O"&gt;https://bit.ly/310Ah3O&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>transformers</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>Understanding React's UI Rendering Process (understanding virtual dom in depth)</title>
      <author>Pratik Tiwari</author>
      <pubDate>Sat, 27 Nov 2021 16:04:38 +0000</pubDate>
      <link>https://dev.to/pratikcodes/understanding-reacts-ui-rendering-process-understanding-virtual-dom-in-depth-2842</link>
      <guid>https://dev.to/pratikcodes/understanding-reacts-ui-rendering-process-understanding-virtual-dom-in-depth-2842</guid>
      <description>&lt;p&gt;Before getting started let's discuss this basic question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does react do?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React allows you to write maintainable and performant code by using the concept of components. Components allow you to focus on describing the UI you want. rather than focusing on the details of how the UI actually gets inserted into the page.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#simple-component-using-jsx"&gt;
  &lt;/a&gt;
  Simple Component using JSX
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kjmW0KZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/967sd3n7r7bgo49cvgg9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kjmW0KZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/967sd3n7r7bgo49cvgg9.jpg" alt="Image description" width="428" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This component internally returns a react entity called elements which kind of looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lPKLqs9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92f3bf0npxhp2gs7powm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPKLqs9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92f3bf0npxhp2gs7powm.jpg" alt="Image description" width="644" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's just a plain object. Let's understand the properties one after another.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;br&gt;
The type property is a string reference to the HTML tag. React internally calls it a Component Element.&lt;br&gt;
When we do import &lt;strong&gt;main&lt;/strong&gt; from "../components/main" the name of the component becomes the type that is imported.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;key&lt;/strong&gt;&lt;br&gt;
Used to uniquely identify elements among siblings.&lt;br&gt;
This is created when we are manually creating a bunch of children's i.e when we map through the array and render a bunch of components with different data. We use a key while rendering those and hence the key is substituted to this property.&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ref&lt;/strong&gt;&lt;br&gt;
ref is reference to a actual DOM node. If you ever have used the create ref function or the useRef hook that's where this values end up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;$$typeof&lt;/strong&gt;&lt;br&gt;
This is actually a safety feature. Its values are always a symbol. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;What is a symbol?&lt;/a&gt;&lt;br&gt;
So if you have a compromised server that you are making an API call and you get back some data and you try to render it through your components. React will straight up reject that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Props&lt;/strong&gt;&lt;br&gt;
In our case, we just had 1 child that is an h1 hence type is an h1. key and ref are null&lt;br&gt;
And its children was a text string with "look ma!" and with id title.&lt;br&gt;
Children can be an object or array of an objects.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#review"&gt;
  &lt;/a&gt;
  Review
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;So writing to DOM and rendering DOM is a very expensive task. This is where react comes in.&lt;/li&gt;
&lt;li&gt;This object and its children that is known as &lt;strong&gt;virtual dom&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Is it really expensive to write to the dom but its really easy to generate these objects and they can do it super fast.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#reconciliation"&gt;
  &lt;/a&gt;
  Reconciliation.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reconciliation is &lt;strong&gt;the process through which React updates the DOM&lt;/strong&gt;. When a component's state changes, React has to calculate if it is necessary to update the DOM. It does this by creating a virtual DOM and comparing it with the current DOM. In this context, the virtual DOM will contain the new state of the component.&lt;/li&gt;
&lt;li&gt;React creates a tree of elements every time the render function is called. So to be efficient we need a way to tell what's the difference between the DOM and the virtual DOM so that we are only changing the Elements in the DOM that needs to be changed.&lt;/li&gt;
&lt;li&gt;Reconciliation houses the diffing algorithm to understand what part of the DOM needs to be replaced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n59zvHVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axmrtm0taf1kkthz8pck.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n59zvHVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axmrtm0taf1kkthz8pck.jpg" alt="Image description" width="656" height="143"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Suppose we have a list of product list and we clicked to get one individual product.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As we clicked the element product list goes away hence it's also removed from the DOM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a difference between the native DOM element and the component element.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reconciliation - DOM element:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d9HuUKig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfg63u359zki2v6y6rc6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d9HuUKig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfg63u359zki2v6y6rc6.jpg" alt="Image description" width="583" height="122"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Over here as the DOM element class name is changed. React find the DOM node and update the class name and nothing else and it will recurse on any children if there are any.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reconciliation- Component element:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsydDmcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f40gzflcgrhvsncqx5y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsydDmcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f40gzflcgrhvsncqx5y.jpg" alt="Image description" width="592" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React updates the prop of the underlying component instance to match the new element. And the render method is called. The diff algorithm recurses on the old result and the new result until the end of the tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reconciliation - Children&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sDeBNDYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tlli7tvttocgf1xi061.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sDeBNDYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tlli7tvttocgf1xi061.jpg" alt="Image description" width="560" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this scenario reacts goes and see for the first and element and checks in the old result both are the same and hence moves to next the next again same now when it moves to next it sees third these were not present in the DOM before hence react appends it to the DOM.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if we change the sequence?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ly-S3kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7950w72yg9w2xjxgjzln.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ly-S3kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7950w72yg9w2xjxgjzln.jpg" alt="Image description" width="599" height="148"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Over here we see the sequence the older items are there is just we have added a new DOM node and changed the sequence but react doesn't understand this. It goes and sees the first node is changed and remove the previous DOM node that is star wars and replace it with Spaceballs similarly for the second and sees the third has been added hence adding the third one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here we see we are rendering all of the elements again and again but we can save these things with keys.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iS834VBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf1t0n3ps5sd8hgp5rgt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iS834VBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf1t0n3ps5sd8hgp5rgt.jpg" alt="Image description" width="444" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;over here it has keys with it now lets see what happens if we append 1 DOM element to the beginning of this unordered list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lF07ms5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmtajflyfzgl1ndldbpo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lF07ms5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmtajflyfzgl1ndldbpo.jpg" alt="Image description" width="487" height="157"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now react goes down the tree and sees key best has start wars which was already present, second best with star trek is also present but actual best with spaceballs was not present and it as been added hence we will add that to the DOM node.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#rendering"&gt;
  &lt;/a&gt;
  Rendering
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqgN1qlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5ow0kseuoplsrg7mjw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqgN1qlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5ow0kseuoplsrg7mjw.jpg" alt="Image description" width="430" height="219"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;so here the render function of the React DOM is responsible for creating the react virtual DOM create the element tree which we discussed in the beginning and add that to the actual DOM.&lt;/li&gt;
&lt;li&gt;FYI react and react dom is two different library hence react work is just to do the diffing part not anything more than that. React DOM creates the virtual DOM and append to the actual DOM.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#react-fiber"&gt;
  &lt;/a&gt;
  React Fiber
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The actual render happens with react fiber.&lt;/li&gt;
&lt;li&gt;React fiber sits between the the element and the DOM node and inserts the element to the DOM node.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;We write a component.&lt;/li&gt;
&lt;li&gt;We get a component instance.&lt;/li&gt;
&lt;li&gt;Its has state it takes props it computes it.&lt;/li&gt;
&lt;li&gt;Then it generates a tree of elements. That tree of element is our virtual dom.&lt;/li&gt;
&lt;li&gt;And with that the reconciliation process starts.&lt;/li&gt;
&lt;li&gt;Then its handed of to the rendering process.&lt;/li&gt;
&lt;li&gt;Then the react DOM takes it and actually generates the DOM node with React fiber.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=i793Qm6kv3U"&gt;https://www.youtube.com/watch?v=i793Qm6kv3U&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extra-materials-to-learn-from-about-the-topic"&gt;
  &lt;/a&gt;
  Extra Materials to learn from about the topic:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.velotio.com/engineering-blog/react-fiber-algorithm"&gt;An Introduction to React Fiber - The Algorithm Behind React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/reactjs-reconciliation/"&gt;ReactJS Reconciliation - GeeksforGeeks&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactdom</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to use with another exciting framework</title>
      <author>Sean van Zuidam</author>
      <pubDate>Sat, 27 Nov 2021 15:33:52 +0000</pubDate>
      <link>https://dev.to/fylgja/how-to-use-with-another-exciting-framework-3cd2</link>
      <guid>https://dev.to/fylgja/how-to-use-with-another-exciting-framework-3cd2</guid>
      <description>&lt;p&gt;As we mention multiple times, on our site 😅, Fylgja is component based framework, meaning you can download and use each CSS component separately.&lt;/p&gt;

&lt;p&gt;Making it easier to combine and use with other CSS frameworks or to add it to an existing project.&lt;/p&gt;

&lt;p&gt;So how do you actually do this?&lt;/p&gt;

&lt;p&gt;First make sure to understand what compiler your running. There are 2 use cases;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SCSS based&lt;/li&gt;
&lt;li&gt;PostCSS based with postcss-import&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;most other tools have no impact with using Fylgja.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-with-utility-based-frameworks-like-tailwindcss"&gt;
  &lt;/a&gt;
  How to use with Utility based frameworks, like TailwindCSS
&lt;/h2&gt;

&lt;p&gt;So for example if you are running a &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; or other utility CSS based framework, like &lt;a href="https://windicss.org/"&gt;WindiCSS&lt;/a&gt;, thats one of the easiest use cases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The only components that might conflict are the Utilpack, Transition and Transform components, since these are also utility based CSS components.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So if you are using TailwindCSS you can simply install the &lt;code&gt;@fylgja/form&lt;/code&gt; component and include it in your CSS like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"tailwindcss/base"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"tailwindcss/components"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"@fylgja/form"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"tailwindcss/utilities"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now you don't need to add any CSS classes for your form elements, since the &lt;code&gt;@fylgja/form&lt;/code&gt; component styles them directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FlVNHfdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fylgja.dev/images/noice.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FlVNHfdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fylgja.dev/images/noice.webp" alt="Noice" width="440" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this way you can also add more and more Fylgja CSS components without having to create them with utility classes.&lt;/p&gt;

&lt;p&gt;So instead having to us &lt;code&gt;@apply&lt;/code&gt; to create a Card component, You can just include it, just as with the form. The only difference is the Fylgja Card component uses classes, but that is just wat we want, moving to a more DRY approach and still using the flexibly of utility classes. 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-with-component-based-frameworks-like-bootstrap"&gt;
  &lt;/a&gt;
  How to use with Component based frameworks, like Bootstrap
&lt;/h2&gt;

&lt;p&gt;This is a little harder since some components already exists, so make sure to disable the CSS Component you want to replace.&lt;/p&gt;

&lt;p&gt;So you can add CSS Components that don't exist in Bootstrap, or replace existing ones with Fylgja CSS components.&lt;/p&gt;

&lt;p&gt;For Bootstrap you could extend the utilities with our Utilpack component, adding more utility power, or add some Native CSS components like the form to simplify the HTML.&lt;/p&gt;

&lt;p&gt;So how do you actually remove CSS components from Bootstrap?&lt;/p&gt;

&lt;p&gt;First make sure that you don't import Bootstrap using a single import. Instead load everything from the &lt;code&gt;bootstrap.scss&lt;/code&gt; file separately,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"bootstrap"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;load everything separately, like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Configuration&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"functions"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"variables"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"mixins"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"utilities"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Layout&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;components&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"root"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"reboot"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"offcanvas"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"placeholders"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Helpers&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"helpers"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Utilities&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;"utilities/api"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and include this in your &lt;code&gt;main.css&lt;/code&gt; with the newer &lt;code&gt;@use&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;Now in your &lt;code&gt;main.css&lt;/code&gt; add your Fylgja Components like you normally do. And in your custom Bootstrap import, you can disable unused components or components you want to replace with Fylgja Components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://fylgja.dev/guides/using-fylgja-with-exciting-framework/"&gt;This Post and Guide&lt;/a&gt; is originally from the Fylgja site&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>fylgjacss</category>
      <category>css</category>
      <category>framework</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Create Custom Scroll Bar Using CSS</title>
      <author>Muhammad Rauf</author>
      <pubDate>Sat, 27 Nov 2021 15:33:47 +0000</pubDate>
      <link>https://dev.to/softcodeon/create-custom-scroll-bar-using-css-8b3</link>
      <guid>https://dev.to/softcodeon/create-custom-scroll-bar-using-css-8b3</guid>
      <description>&lt;p&gt;If you are thinking about styling the browser’s scrollbar then you are in the right place. You may have tried to make a custom scrollbar but did not get the actual output that you were wanted. In this tutorial, you’ll come to know how to create a custom scrollbar for all browsers using pure CSS.&lt;/p&gt;

&lt;p&gt;Yes! you heard it right, we are not going to use any scrollbar plugin or custom scrolling function. We’ll just explore the ways to style the browser’s default scrollbar using CSS properties. Well! the benefit of using pure CSS is that the page scrolling will remain smooth as compare to scrolling plugins.&lt;/p&gt;

&lt;p&gt;The scrollbar styles that we are going to share replace the browser’s default scrollbar styles whether it is a horizontal or vertical scrollbar. You can check this custom scrollbar on the demo page. There you will see two scroll bars, one of them is a page scrollbar and the other is a scrollable section.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-create-custom-scrollbar"&gt;
  &lt;/a&gt;
  How to Create Custom Scrollbar
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--es7uKxkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tyt4nowh32e7g1ngu3t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--es7uKxkx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tyt4nowh32e7g1ngu3t.jpg" alt="Image description" width="600" height="300"&gt;&lt;/a&gt;&lt;br&gt;
In order to create a custom scrollbar, you just need to have some scrollable content on your webpage. Basically, you don’t need to create any special HTML for the custom scrollbar. If you have already a scrollbar in your webpage then simply skip the HTML and read the CSS styling guide. Anyhow, if you don’t have any element on your page, you may try the following scrollable box. Just keep some content inside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"scrollable"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"height: 1000px; width: 400px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
This is a scrollable div.
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides this, we created three classes for horizontal, vertical, and both horizontal and vertical scroll. You may add the "horizontal-scroll" class to a div element to make a horizontal scrollable box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"horizontal-scroll"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Place your div content here...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, you can use the "vertical-scroll" class for the vertical scrollable box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"vertical-scroll"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Place your div content here...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add a class name "scrollable" that we styled a 500px both horizontal and vertical scrollable box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"scrollable"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Place your div content here...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#styling-browsers-scrollbar-with-css"&gt;
  &lt;/a&gt;
  Styling Browsers Scrollbar with CSS
&lt;/h1&gt;

&lt;p&gt;In order to style the scrollbar, we’ll use the CSS -WebKit- extension and target the browser’s built-in selector for the scrollbar. So, select the scrollbar with the -webkit- prefix and define the width of the scrollbar. It will set the thickness of the scrollbar. You can define the custom value for the CSS width property (that we defined 15px) according to your needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* scrollbar width */&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#best-designed-web-scroll-bar"&gt;
  &lt;/a&gt;
  Best Designed Web Scroll bar.
&lt;/h1&gt;

&lt;p&gt;If you want to add custom scroll bar with hover effect just copy below code and add it to your webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;/* width */&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Track */&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Handle */&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Handle on hover */&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar-thumb:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e30d00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want to read in detail from our official website &lt;a href="https://softcodeon.com/tutorials/create-custom-scroll-bar-using-css.htm"&gt;Create Custom Scroll Bar&lt;/a&gt;&lt;br&gt;
To SEE &lt;a href="https://codepen.io/softcodeon/pen/dyVbYOd"&gt;DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all! I hope you have successfully designed browsers' custom scrollbar using CSS. If you have any questions or suggestions, let me know by discuss below.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Simplest Drag and Drop setup in React, in 10 lines of code with SortableJS</title>
      <author>Arnaud Ambroselli</author>
      <pubDate>Sat, 27 Nov 2021 14:36:37 +0000</pubDate>
      <link>https://dev.to/arnaudambro/simplest-drag-and-drop-setup-in-react-in-10-lines-of-code-with-sortablejs-3dmi</link>
      <guid>https://dev.to/arnaudambro/simplest-drag-and-drop-setup-in-react-in-10-lines-of-code-with-sortablejs-3dmi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tdlr"&gt;
  &lt;/a&gt;
  TDLR
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/SortableJS/Sortable"&gt;SortableJS&lt;/a&gt; make things really easy !&lt;br&gt;
For those who just want the final result, here is the code and a demo just below&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Sortable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sortablejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SortableGrid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gridRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortableJsRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-grid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;initData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onListChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;gridRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-grid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sortableJsRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sortable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gridRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;onEnd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;onListChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gridRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"gridDemo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"grid-square"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SortableGrid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Demo available &lt;a href="https://www.javolution.io/simple-dragging-grid-react/#demo"&gt;on my personal blog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-many-dragndrop-libs-out-int-the-react-ecosystem"&gt;
  &lt;/a&gt;
  So many DragNDrop libs out int the react ecosystem...
&lt;/h2&gt;

&lt;p&gt;...and yet no easy solution for any of them !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/atlassian/react-beautiful-dnd"&gt;React Beautiful Dnd&lt;/a&gt;: build by Atlassian for Trello, it's reliable BUT&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This library continues to be relied upon heavily by Atlassian products, but we are focused on other priorities right now and have no current plans for further feature development or improvements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and also, not so easy to setup for someone who just want easy drag and drop&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/react-grid-layout/react-grid-layout"&gt;React Grid Layout&lt;/a&gt;: quite easy to setup, and quite powerful also. But I wanted to be able to move items in a grid so that it takes the position of another item in the grid and the grid keeps the same shape at the end of the drag/drop action - the defauilt behavior of this lib being to "make space" for the dragged item and break the grid layout. After spending one hour on it, I still couldn't find the way to achieve my goal, I quit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&lt;a href="https://react-dnd.github.io/react-dnd/about"&gt;React DND&lt;/a&gt;: it seems also a powerful lib, but the API is sooooo ccomplicated ! And you have to &lt;a href="https://react-dnd.github.io/react-dnd/docs/tutorial"&gt;read their tutorial&lt;/a&gt; to setup anything, which is also giving headaches... I tried to implement the API, but after 200 lines of coding and 1 hours spent, I was lost, I tried something else&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://www.npmjs.com/package/react-draggable"&gt;react-draggable&lt;/a&gt;: I must say I didn't see that one, and didn't try.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://github.com/bmcmahen/react-grid-dnd"&gt;react-grid-dnd&lt;/a&gt;: it looked like an easy setup and exactly want I was looking for, but... it's not maintained, and not working with npm7+ because it has react 16 as a dependency. So I had all the code setup before installing the lib, and I was quite fed up and tired when I discovered I would need to change my npm version to use it, or do some tricks here and there...&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://github.com/SortableJS/react-sortablejs"&gt;react-sortablejs&lt;/a&gt;: I didn't try because it says as an introduction&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that this is not considered ready for production, as there are still a number of bugs being sent through.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I thought : damn, there &lt;em&gt;should&lt;/em&gt; be out there a JavaScript library doing the simple thing I've asked for ! And I saw in this last &lt;a href="https://github.com/SortableJS/react-sortablejs"&gt;react-sortablejs&lt;/a&gt; that it was a "React bindings to SortableJS".&lt;/p&gt;

&lt;p&gt;I went to look for &lt;a href="https://github.com/SortableJS/Sortable"&gt;SortableJS&lt;/a&gt;, clicked on the &lt;a href="https://sortablejs.github.io/Sortable/"&gt;demo&lt;/a&gt;, scrolled to the &lt;a href="http://sortablejs.github.io/Sortable/#grid"&gt;grid example&lt;/a&gt; which was doing &lt;em&gt;exactly&lt;/em&gt; the simple stuff I was looking for.&lt;/p&gt;

&lt;p&gt;I checked in the dev tools, there was nothing else than a &lt;code&gt;div#gridDemo&lt;/code&gt; and some &lt;code&gt;div.square-items&lt;/code&gt; inside. I checkd for &lt;code&gt;gridDemo&lt;/code&gt; in the source code, and found out the code for that example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Grid demo&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sortable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gridDemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ghostClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue-background-class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I couldn't believe it... only those three lines of code and that's it ?&lt;br&gt;
And the &lt;a href="https://github.com/SortableJS/Sortable#options"&gt;api&lt;/a&gt; looks straight forward too : the &lt;code&gt;onEnd&lt;/code&gt; function seems doing the job I needed.&lt;/p&gt;

&lt;p&gt;I had to try it by myself !&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#start-with-a-simple-grid-and-just-add-a-few-more-lines"&gt;
  &lt;/a&gt;
  Start with a simple grid, and just add a few more lines
&lt;/h2&gt;

&lt;p&gt;I wrote the React initial code : an array of items display in a grid layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Sortable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sortablejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SortableGrid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"gridDemo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"grid-square"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SortableGrid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then just added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one ref for the grid container&lt;/li&gt;
&lt;li&gt;one ref for the SortableJS element&lt;/li&gt;
&lt;li&gt;one Effect to initiate SortableJs&lt;/li&gt;
&lt;li&gt;one function to handle the drag and drop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;data-id&lt;/code&gt; to all of the items in the grid layout&lt;/li&gt;
&lt;li&gt;a bit of refacto to save the new layout in storage (or in your back-end most probably)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so that the code would be the &lt;a href="#code"&gt;one I wrote at the beginning&lt;/a&gt;, and as you can see, &lt;a href="#demo"&gt;it works !&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dragndrop</category>
      <category>react</category>
      <category>sortablejs</category>
      <category>grid</category>
    </item>
  </channel>
</rss>
