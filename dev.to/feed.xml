<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Php Datatables Delete Multiple Selected Rows Tutorial
</title>
      <author>Dharmik Tank</author>
      <pubDate>Fri, 30 Apr 2021 09:47:30 +0000</pubDate>
      <link>https://dev.to/dharmik_tank/php-datatables-delete-multiple-selected-rows-tutorial-4c6j</link>
      <guid>https://dev.to/dharmik_tank/php-datatables-delete-multiple-selected-rows-tutorial-4c6j</guid>
      <description>&lt;p&gt;Hi Dev,&lt;/p&gt;

&lt;p&gt;In this blog, I will explain you how to delete multiple selected records useing datatables in php. We will show delete multiple selected records in php. you can easy delete multiple selected records useing datatables in php. we will show datatables delete multiple selected rows example in php.&lt;/p&gt;

&lt;p&gt;I will give fulll example of php delete multiple selected records in datatables.&lt;br&gt;
more ...&lt;br&gt;
&lt;a href="https://itwebtuts.blogspot.com/2021/04/php-datatables-delete-multiple-selected.html"&gt;https://itwebtuts.blogspot.com/2021/04/php-datatables-delete-multiple-selected.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>blog</category>
    </item>
    <item>
      <title>12 Iconic developer types</title>
      <author> 🐤🥇 Jasper de Jager</author>
      <pubDate>Fri, 30 Apr 2021 09:37:18 +0000</pubDate>
      <link>https://dev.to/jmdejager/12-iconic-developer-types-10gd</link>
      <guid>https://dev.to/jmdejager/12-iconic-developer-types-10gd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#weve-made-it-to-twelve"&gt;
  &lt;/a&gt;
  We've made it to twelve! 🎉
&lt;/h1&gt;

&lt;p&gt;🧐🤠🤪🤓🦄🚫🏹🎅😳🤷‍♀️🐙🤑 &lt;/p&gt;

&lt;p&gt;Already twelve iconic developer types created 😎&lt;br&gt;
I noticed a lot of types were recognized by the readers, so I came up with the following questions for you:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What developer type(s) do you relate to the most?&lt;br&gt;
What developer types do you have in your team?&lt;br&gt;
What developer types could you use in your team?&lt;br&gt;
What is your favorite iconic developer type?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If, by thinking about this, you get some inspiration to write a new iconic developer profile please leave it in the comments!&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/jmdejager" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8W7sdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LKoll5jw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmdejager/iconic-developers-51m5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Iconic developers  🧐🤠🤪&lt;/h2&gt;
      &lt;h3&gt; 🐤🥇 Jasper de Jager ・ Apr 14 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
1) 🧐 The know-it-all&lt;br&gt;
2) 🤠 The cowboy&lt;br&gt;
3) 🤪 The funny one





&lt;div class="ltag__link"&gt;
  &lt;a href="/jmdejager" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8W7sdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LKoll5jw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmdejager/iconic-developers-part-2-250j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Iconic developers | part 2 🤓🦄🚫&lt;/h2&gt;
      &lt;h3&gt; 🐤🥇 Jasper de Jager ・ Apr 15 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
4) 🤓 The perfectionist&lt;br&gt;
5) 🦄 The Unicorn&lt;br&gt;
6) 🚫 Doctor no





&lt;div class="ltag__link"&gt;
  &lt;a href="/jmdejager" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8W7sdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LKoll5jw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmdejager/iconic-developers-part-3-47fc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Iconic developers | part 3 🏹🎅😳&lt;/h2&gt;
      &lt;h3&gt; 🐤🥇 Jasper de Jager ・ Apr 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
7) 🏹 The Bug Buster&lt;br&gt;
8) 🎅 The tools Santa&lt;br&gt;
9) 😳 The branch breaker





&lt;div class="ltag__link"&gt;
  &lt;a href="/jmdejager" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8W7sdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LKoll5jw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmdejager/iconic-developers-part-4-50nb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Iconic developers | part 4  🤷‍♀️🐙🤑&lt;/h2&gt;
      &lt;h3&gt; 🐤🥇 Jasper de Jager ・ Apr 23 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
10) 🤷‍♂️ The WOMM developer&lt;br&gt;
11) 🐙 The unfortunate full-stack&lt;br&gt;
12) 🤑 The Client's Butler




&lt;h2&gt;
  &lt;a href="#so-please-tell-me"&gt;
  &lt;/a&gt;
  So please tell me 😎
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;What developer type(s) do you relate to the most?&lt;br&gt;
What developer types do you have in your team?&lt;br&gt;
What developer types could you use in your team?&lt;br&gt;
What is your favorite iconic developer type?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Winkler&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/emoji?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Use Reseter.css Instead Of Normalize and Reset.css. To Improve Cross Browser Experience.</title>
      <author>Krish Dev DB</author>
      <pubDate>Fri, 30 Apr 2021 09:06:49 +0000</pubDate>
      <link>https://dev.to/krishdevdb/use-reseter-css-instead-of-normalize-and-reset-css-to-improve-cross-browser-experience-13gn</link>
      <guid>https://dev.to/krishdevdb/use-reseter-css-instead-of-normalize-and-reset-css-to-improve-cross-browser-experience-13gn</guid>
      <description>&lt;p&gt;With the current web production, I think that the existing Reset.css and Normalize.css have fewer features and lack many things. I am introducing you to a new CSS Normalizer created as a futuristic alternative to normalize.css and reset.css.&lt;/p&gt;

&lt;p&gt;Reseter.css has customizable browser support, which is by default all not dead browsers. It has also taken accessibility into concern. It's also packed with modern CSS techniques.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-resetercss"&gt;
  &lt;/a&gt;
  Features of Reseter.css
&lt;/h2&gt;

&lt;p&gt;It unifies all of your browser default styles by redefining premade styles. That's a big difference where normalize tries to preserve and reseter.css redefines for even more browser support. Normalize works with the browsers kept in mind while building it. Reseter.css supports every single browser. Reseter.css improves cross-browser support. &lt;/p&gt;

&lt;p&gt;Fixed bugs and browser inconsistencies&lt;br&gt;
Reboots various element styles&lt;br&gt;
Available in Sass, Scss, Less, Stylus, Styled Components (js, mjs, ts)&lt;br&gt;
The file size is 2.59Kb&lt;br&gt;
Includes normalization of all elements&lt;br&gt;
box-sizing: border-box; set&lt;br&gt;
Validated on all browsers using BrowserStack&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eG4oCAIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618639406018/tPvFRnOBQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eG4oCAIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618639406018/tPvFRnOBQ.png" alt="Reseter.css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPEuf5Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618639508069/PKzGVnzNE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPEuf5Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618639508069/PKzGVnzNE.png" alt="Reseter.css Compared To Other CSS Reset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Down is the result of the same HTML file of 3 browsers. All of the chrome's headings are bolded nicely. Firefox ones are also bolded, but IE ones are bolded too much. The font on paragraphs is also bolded in IE. The border of the button is blue in IE. There's A little thinner border on buttons in Firefox. Below are only &lt;strong&gt;three browsers&lt;/strong&gt; and &lt;strong&gt;5 HTML tags&lt;/strong&gt;. There are more than 100 browsers available to the public. There are plenty of tags there too. No one knows how many of them are not public. 1000's versions of these 100's of browsers are available. How to keep us with these browsers? The answer is &lt;strong&gt;Reseter.css&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6sVmL9X8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618639682600/4T-OtBk37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sVmL9X8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618639682600/4T-OtBk37.png" alt="Difference In Browsers"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/gh/krishdevdb/reseter.css/css/reseter.min.css&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Unpkg, CDNJS, Github, and many more CDNs are also available. Check the &lt;a href="https://github.com/krishdevdb/reseter.css"&gt;GitHub Repository&lt;/a&gt;. Of course, the files can also be downloaded and used, and package managers such as NPM, Yarn, PNPM, and Bower are also available.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# NPM&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;reseter.css
&lt;span class="c"&gt;# YARN&lt;/span&gt;
yarn add reseter.css
&lt;span class="c"&gt;# PNPM&lt;/span&gt;
pnpm &lt;span class="nb"&gt;install &lt;/span&gt;reseter.css
&lt;span class="c"&gt;# Bower&lt;/span&gt;
bower &lt;span class="nb"&gt;install &lt;/span&gt;krishdevdb/reseter.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Go Check The GitHub&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/krishdevdb"&gt;
        krishdevdb
      &lt;/a&gt; / &lt;a href="https://github.com/krishdevdb/reseter.css"&gt;
        reseter.css
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Reseter.css - A Futuristic Alternative To Normalize.css And CSS Resets
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://www.codefactor.io/repository/github/krishdevdb/reseter.css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2fede2b44501f497a2691de3b8b7b11ebf8f7a9c9ea66f61947dd77dec7701f/68747470733a2f2f696d672e736869656c64732e696f2f636f6465666163746f722f67726164652f6769746875622f6b7269736864657664622f726573657465722e6373733f7374796c653d666c61742d737175617265266c6f676f3d636f6465666163746f72"&gt;&lt;/a&gt; &lt;a href="https://bundlephobia.com/result?p=reseter.css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/29b708c0ed8384ab58d50b884ff2ccef2b5ecf575ed0175efbe548d6c6caef16/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f726573657465722e6373733f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt; &lt;a href="https://github.com/krishdevdb/reseter.css/commits/master"&gt;&lt;img src="https://camo.githubusercontent.com/05c44c52429302f7c2f40cf932851f8fe0830c287db702e040dabe4d61e57c6c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6b7269736864657664622f726573657465722e6373733f7374796c653d666c61742d737175617265266c6f676f3d676974"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#contributors"&gt;&lt;img src="https://camo.githubusercontent.com/5a8ea4a11056968ed6325b3b97e4321f6d02243c0f3aacfb6285d3bcac5451d6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616c6c2d636f6e7472696275746f72732f6b7269736864657664622f726573657465722e6373733f7374796c653d666c61742d737175617265266c6f676f3d676974687562"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.com/github/krishdevdb/reseter.css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d17ce4977c6410fd6461d2c3ae1b5d32c82992515d6c1ad70fe284d5af69f10d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f6b7269736864657664622f726573657465722e6373733f7374796c653d666c61742d737175617265266c6f676f3d7472617669732d6369"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/xqh38kb6sv" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/14a89e119890ee2da249d6c8b202ea235f8da094ffb3c0dd3e257cadb7f0de00/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3831343730313738363932303931303930393f7374796c653d666c61742d737175617265266c6f676f3d646973636f7264"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/krishdevdb/reseter.css/raw/master/logo.png"&gt;&lt;img height="100px" width="100px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LERtZEbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/krishdevdb/reseter.css/raw/master/logo.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;h1&gt;
Reseter.css&lt;/h1&gt;
&lt;h5&gt;
A Futuristic Alternative To Normalize.css And CSS Resets&lt;/h5&gt;
&lt;a href="https://twitter.com/intent/tweet?url=https://github.com/krishdevdb/reseter.css&amp;amp;text=Reseter.css%20helped%20me%20out%20in%20my%20website%20by%20normalizing%20everything.%20And%20Reseting%20The%20Browser%20Default%20Styles.%20Now%20My%20Website%20Looks%20The%20Same%20Across%20All%20Browsers" rel="nofollow"&gt;&lt;img alt="Twitter URL" src="https://camo.githubusercontent.com/7324ebbea2468b0720e11275d57bbce60155f408873d8ba7b0b29adc71b1c35a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c3f636f6c6f723d2532336666666666663030266c6f676f3d74776974746572267374796c653d666f722d7468652d62616467652675726c3d68747470732533412532462532466769746875622e636f6d2532466b726973686465766462253246726573657465722e637373"&gt;&lt;/a&gt;
&lt;a href="https://github.com/krishdevdb/reseter.css/stargazers"&gt;&lt;img alt="GitHub Repo stars" src="https://camo.githubusercontent.com/71f4e7fb710e6ac587c58ac7bb7c8a906b5cbe0370c982e314eaadd08d5c1a1c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6b7269736864657664622f726573657465722e6373733f6c6f676f3d476974687562267374796c653d666f722d7468652d6261646765"&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;&lt;a rel="noopener noreferrer" href="https://github.com/krishdevdb/reseter.css/raw/master/.github/assets/showcase.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NqvBpcXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/krishdevdb/reseter.css/raw/master/.github/assets/showcase.png" height="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://krishdevdb.github.io/reseter.css" rel="nofollow"&gt;Website&lt;/a&gt; · &lt;a href="https://github.com/krishdevdb/reseter.css/issues/new?assignees=krishdevdb%27&amp;amp;labels=feature+request&amp;amp;template=feature-request.md&amp;amp;title=Request%3A+"&gt;Request A Feature&lt;/a&gt; · &lt;a href="https://github.com/krishdevdb/reseter.css/issues/new?assignees=krishdevdb&amp;amp;labels=bug&amp;amp;template=bug-report.md&amp;amp;title=Bug%3A+"&gt;Report A Bug&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#quick-start"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;br&gt;
Already Used And Trusted By 45k Developers&lt;/h3&gt;


Table Of Contents
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#features"&gt;Features&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#resetercss-vs-normalizecss-vs-sanitizecss-vs-resetcss"&gt;&lt;em&gt;Reseter.css&lt;/em&gt; vs &lt;em&gt;Normalize.css&lt;/em&gt; vs &lt;em&gt;Sanitize.css&lt;/em&gt; vs &lt;em&gt;Reset.css&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#why-use-resetercss-must-read"&gt;Why Use Reseter.css (Must Read)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#manual"&gt;Manual&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#codepen"&gt;CodePen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#codesandbox"&gt;CodeSandBox&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#installation"&gt;Installation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#package-managers"&gt;Package Managers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#cdn"&gt;CDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#downloads"&gt;Downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#clone-repository"&gt;Clone Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#usage"&gt;Usage&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#import-in-css"&gt;Import In CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#link-tag"&gt;Link Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#styled-components"&gt;Styled-Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#vue"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#nextjs"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#get-support"&gt;Get Support&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#support-us"&gt;Support Us&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#review"&gt;Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#spread"&gt;Spread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#sponsor"&gt;Sponsor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#authors"&gt;Authors&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#contributors"&gt;Contributors&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#supporters"&gt;Supporters&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#stargazers"&gt;Stargazers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#forks"&gt;Forks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#special-mentions"&gt;Special Mentions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#stars"&gt;Stars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#license"&gt;License&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#status"&gt;Status&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adds New Better Styles For Elements&lt;/li&gt;
&lt;li&gt;Source In 4 Different Formats&lt;/li&gt;
&lt;li&gt;Reboots styles for a wide range of elements.&lt;/li&gt;
&lt;li&gt;Corrects bugs and browser inconsistencies.&lt;/li&gt;
&lt;li&gt;Sized 2.6kb&lt;/li&gt;
&lt;li&gt;Includes all normalizations&lt;/li&gt;
&lt;li&gt;Sets `box-sizing: border-box&lt;/li&gt;
&lt;li&gt;Fully tested&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/krishdevdb/reseter.css/master/readme.md/#resetercss"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;em&gt;Reseter.css&lt;/em&gt; vs &lt;em&gt;Normalize.css&lt;/em&gt; vs &lt;em&gt;Sanitize.css&lt;/em&gt; vs &lt;em&gt;Reset.css&lt;/em&gt;
&lt;/h2&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;br&gt;
&lt;thead&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Reseter.css&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Normalize.css&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Sanitize.css&lt;/th&gt;
&lt;br&gt;
&lt;th&gt;Reset.css&lt;/th&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/thead&gt;
&lt;br&gt;
&lt;tbody&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;Normalizations&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;Basic Elemental Styles&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;⭕&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;Size (By &lt;a href="http://bundlephobia.com/" rel="nofollow"&gt;Bundlephobia&lt;/a&gt;)&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b3242f10cef6e3d27641a2df9be98c1505a4dca4956d1bd3e07d04652bcc24b2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f6b7269736864657664622f726573657465722e6373732f6373732f726573657465722e6373733f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/b3242f10cef6e3d27641a2df9be98c1505a4dca4956d1bd3e07d04652bcc24b2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f6b7269736864657664622f726573657465722e6373732f6373732f726573657465722e6373733f7374796c653d666c61742d737175617265" alt="GitHub file size in bytes"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3ec036cdc252f30c4c40c8d320682244271fc01fb974cafb37fd5d6708bd1987/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f6e65636f6c61732f6e6f726d616c697a652e6373732f6e6f726d616c697a652e6373733f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/3ec036cdc252f30c4c40c8d320682244271fc01fb974cafb37fd5d6708bd1987/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f6e65636f6c61732f6e6f726d616c697a652e6373732f6e6f726d616c697a652e6373733f7374796c653d666c61742d737175617265" alt="GitHub file size in bytes"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fd1146044686bbdaba232bf5e35d6e35b254a4eefa70bd8738ae0db84b43f6e1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f637373746f6f6c732f73616e6974697a652e6373732f73616e6974697a652e6373733f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/fd1146044686bbdaba232bf5e35d6e35b254a4eefa70bd8738ae0db84b43f6e1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f637373746f6f6c732f73616e6974697a652e6373732f73616e6974697a652e6373733f7374796c653d666c61742d737175617265" alt="GitHub file size in bytes"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d118adf363acd8f7d83f6565e48b8c0ed59ecf5202e8eef73d23960b50adfaac/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f7368616e6e6f6e6d6f656c6c65722f72657365742d6373732f72657365742e6373733f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/d118adf363acd8f7d83f6565e48b8c0ed59ecf5202e8eef73d23960b50adfaac/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73697a652f7368616e6e6f6e6d6f656c6c65722f72657365742d6373732f72657365742e6373733f7374796c653d666c61742d737175617265" alt="GitHub file size in bytes"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;Minified Version&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/dae093bebd5e8aceb58a4b032e52c6a1984fadbc1352dc6af1e56ccce97f70ad/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f726573657465722e6373733f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/dae093bebd5e8aceb58a4b032e52c6a1984fadbc1352dc6af1e56ccce97f70ad/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f726573657465722e6373733f7374796c653d666c61742d737175617265" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;
&lt;br&gt;
❌ (Minify Yourself)&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/tbody&gt;
&lt;br&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/krishdevdb/reseter.css"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>opensource</category>
      <category>githunt</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Kraken CI, New Kid on the CI Block</title>
      <author>Michal Nowikowski</author>
      <pubDate>Fri, 30 Apr 2021 08:41:39 +0000</pubDate>
      <link>https://dev.to/godfryd/kraken-ci-new-kid-on-the-ci-block-4imo</link>
      <guid>https://dev.to/godfryd/kraken-ci-new-kid-on-the-ci-block-4imo</guid>
      <description>&lt;p&gt;&lt;a href="https://kraken.ci"&gt;Kraken CI&lt;/a&gt; is a new Continuous Integration tool. It is a modern, open-source, on-premise CI/CD system that is highly scalable and focused on testing. It is licensed under Apache 2.0 license. Its source code is available on &lt;a href="https://github.com/kraken-ci/kraken"&gt;Kraken CI GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main features of the system are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flexible workflow planning using Starlark/Python&lt;/li&gt;
&lt;li&gt;distributed building and testing&lt;/li&gt;
&lt;li&gt;various executors: bare metal, Docker, LXD&lt;/li&gt;
&lt;li&gt;highly scalable to thousands of executors&lt;/li&gt;
&lt;li&gt;sophisticated test results analysis&lt;/li&gt;
&lt;li&gt;email and Slack notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-download-kraken-files-for-docker-compose"&gt;
  &lt;/a&gt;
  1. Download Kraken Files for Docker Compose
&lt;/h3&gt;

&lt;p&gt;Download configuration files for Docker Compose from &lt;a href="https://github.com/Kraken-CI/kraken/releases"&gt;Kraken GitHub releases page&lt;/a&gt;.&lt;br&gt;
They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;kraken-docker-compose-X.Y.yaml&lt;/strong&gt; - a services configuration file for Docker Compose&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;kraken-X.Y.env&lt;/strong&gt; - an example configuration for Kraken services that is used by Docker Compose file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-start-kraken-services"&gt;
  &lt;/a&gt;
  2. Start Kraken Services
&lt;/h3&gt;

&lt;p&gt;In a terminal, in the folder where downloaded files are located, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker-compose --env-file kraken-X.Y.env -f kraken-docker-compose-X.Y.yaml up
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should see lots of logs. They will not stop. First, Docker&lt;br&gt;
images are downloaded, and then services are started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8H5I8NkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/034ed3wyxqwgv6jt2fn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8H5I8NkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/034ed3wyxqwgv6jt2fn5.png" alt="Logs after starting docker-compose"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try to get to the web page on &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-log-in"&gt;
  &lt;/a&gt;
  3. Log In
&lt;/h3&gt;

&lt;p&gt;On the main page, log in as admin using &lt;code&gt;admin/admin&lt;/code&gt; credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSyPy-fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x26abuhrx5jl5cuz0dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSyPy-fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x26abuhrx5jl5cuz0dx.png" alt="Login page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After logging in, the dashboard page will appear. It shows tiles with&lt;br&gt;
projects and their branches.  There is already a prepared project&lt;br&gt;
called &lt;code&gt;Demo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But first, a built-in agent that will be executing jobs needs to be&lt;br&gt;
authorized.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-authorize-agent"&gt;
  &lt;/a&gt;
  4. Authorize Agent
&lt;/h3&gt;

&lt;p&gt;Go to the menu Agents -&amp;gt; Discovered. The Discovered Agents page shows&lt;br&gt;
agents that try to connect to the Kraken server but were not yet&lt;br&gt;
authorized by an admin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3J2jA0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzxgxy0cd48ihj78yu7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3J2jA0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzxgxy0cd48ihj78yu7i.png" alt="Dashboard page and a menu to Discovered Agents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the checkbox and click the &lt;code&gt;Authorized&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;Now we can go back to the main page (the dashboard) and explore&lt;br&gt;
&lt;code&gt;Demo&lt;/code&gt; project. Click on the Kraken logo in the top left corner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-the-first-project-and-its-branch"&gt;
  &lt;/a&gt;
  5. The First Project and its Branch
&lt;/h3&gt;

&lt;p&gt;Click the cog icon on the right side of &lt;code&gt;Project Demo&lt;/code&gt;. It leads to&lt;br&gt;
the project settings page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---nUSZ5Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo2qhjsf81olwo0cciwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---nUSZ5Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo2qhjsf81olwo0cciwq.png" alt="Dashboard page and a cog link to project settings page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the project page, there is a list of branches. Let's go to the&lt;br&gt;
already prepared &lt;code&gt;Master&lt;/code&gt; branch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vhJJeHc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfhzllbxxh21qhjq26zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vhJJeHc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfhzllbxxh21qhjq26zq.png" alt="Project settings page and a link to branch page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the branch page, there is a defined workflow that consists of stages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElhQrbEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40fly35p0xzvuxo0z5bf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElhQrbEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40fly35p0xzvuxo0z5bf.png" alt="Branch page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the screen, on the left, there is visible one stage, &lt;code&gt;Tests&lt;/code&gt;. The&lt;br&gt;
right side presents details of this stage. The black box shows the&lt;br&gt;
critical part of the stage: it is a workflow schema that is written in&lt;br&gt;
Starlark/Python.&lt;/p&gt;

&lt;p&gt;Currently, the stage's workflow pulls a sample project from&lt;br&gt;
&lt;a href="https://github.com/Kraken-CI/sample-project-python.git"&gt;https://github.com/Kraken-CI/sample-project-python.git&lt;/a&gt; and then run&lt;br&gt;
&lt;code&gt;pytest&lt;/code&gt; tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-trigger-the-first-flow"&gt;
  &lt;/a&gt;
  6. Trigger the First Flow
&lt;/h3&gt;

&lt;p&gt;Click the &lt;code&gt;Run CI Flow&lt;/code&gt; button to trigger the first flow of the branch&lt;br&gt;
workflow, and then confirm it by clicking the &lt;code&gt;Submit&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;The next page shows triggered flow details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysuJzU8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpozn9pwqsai44usvimz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysuJzU8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpozn9pwqsai44usvimz.png" alt="Flow page and a link to Stage Run page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left side, there is a list of runs of stages (currently there is&lt;br&gt;
only one run: &lt;code&gt;Tests&lt;/code&gt;), and on the right, there are details of this&lt;br&gt;
stage run. All is green, so it means that all completed successfully.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-results-of-the-run"&gt;
  &lt;/a&gt;
  7. Results of The Run
&lt;/h3&gt;

&lt;p&gt;Click the &lt;code&gt;Tests&lt;/code&gt; run link to get to results of the run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7axb0heY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rc61q2vvy59imzecnhl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7axb0heY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rc61q2vvy59imzecnhl.png" alt="Run page and Jobs tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first tab, Jobs, on the run results page, shows a list of executed&lt;br&gt;
jobs. Our job was pretty quick, so we see the final results. If a&lt;br&gt;
job takes more time, then here will be presented its live status and&lt;br&gt;
logs.&lt;/p&gt;

&lt;p&gt;The next tab, Test Results, presents a table with test cases and their&lt;br&gt;
status (passed, failed, etc.).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4VmcEJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rymreichu4sajgpv5irk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4VmcEJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rymreichu4sajgpv5irk.png" alt="Run page and Test Results tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We may conclude the quick start guide here. We encourage you to try&lt;br&gt;
play with the workflow schema and check what can be accomplished more.&lt;/p&gt;

</description>
      <category>ci</category>
      <category>cd</category>
      <category>buildautomation</category>
    </item>
    <item>
      <title>Setup Go with VSCode in Docker and Air for debugging</title>
      <author>Andrei Dascalu</author>
      <pubDate>Fri, 30 Apr 2021 08:29:02 +0000</pubDate>
      <link>https://dev.to/andreidascalu/setup-go-with-vscode-in-docker-for-debugging-24ch</link>
      <guid>https://dev.to/andreidascalu/setup-go-with-vscode-in-docker-for-debugging-24ch</guid>
      <description>&lt;p&gt;I have to say that Visual Studio Code, for all its pros and cons for various language, it's a totally awesome IDE for Go. Sure, Golang is great in itself but there's little there to justify the EUR 200 price for a year. I'd rather pay a more moderate amount for the Go VSCode extension.&lt;/p&gt;

&lt;p&gt;Between the Docker extension, the Remote Docker (which allows you the use of a container as if it were a local environment) and official Go extension (that also brings you all the Go tooling if you don't already have that) the development experience is top notch. &lt;/p&gt;

&lt;p&gt;The debugging though is a mixed bag. If you're working locally, using Go's top debug tool (Delve) is straightforward. If you're developing in/for containers though, it gets a bit more complicated. Should you also want hot reloading (which you do when using Docker, otherwise you need to stop/restart containers and the debug session manually on every change).&lt;/p&gt;

&lt;p&gt;Before getting hands-on, I'll go over my use case and what makes it a bit different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;I need to be able to develop with VSCode on a local codebase (to reuse Git credentials mainly) but the code should run on a Docker Compose development stack with lots of moving parts. So many, in fact, that the Docker Compose for my Go project is but a small part of a project spanning over 18 sub-projects, each with a Compose stack where all stacks connect on the same Compose network so that you can start locally just the services you need so they can communicate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;p&gt;This means I can't use Remote Containers in the intended way, as I can't port all my tooling inside the container / git credentials / etc. With Go is easy, but Go is just one of the tools used - I wanted a way that's in line with everyone else (Typescript / PHP and others)&lt;/p&gt;

&lt;p&gt;The closest working solution I found &lt;a href="https://medium.com/@hananrok/debugging-hot-reloading-go-app-within-docker-container-b44d2929e8bd"&gt;was here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But for hot reloading I was already using Air, so why should I script my solution like a barbarian? However, on Air github there's a discussion around using Delve with Air with no definitive solution (also because some people use it locally while others remotely and yet more people use it in Docker).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-well-need"&gt;
  &lt;/a&gt;
  What we'll need
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;VSCode with the official Go extension &lt;/li&gt;
&lt;li&gt;Go installed (duh) - since modules went GA I've only been using it with modules so no more GOPATH headaches&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/go-delve/delve"&gt;Delve&lt;/a&gt; - nowadays it comes as part of the tooling which the Go extension asks you to install on first run. If that's not the case, you can install it manually&lt;/li&gt;
&lt;li&gt;Docker - well, duh, it's right there in the title&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cosmtrek/air"&gt;Air&lt;/a&gt; - there are many reloading modules, but Air allows you to customize the commands for building and executing, which we'll need&lt;/li&gt;
&lt;li&gt;a Go project - otherwise what are we here for, right?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;A Dockerfile. It needs Air &amp;amp; Delve installed as well, so that will be part of the solution. You can also use Air like a barbarian and reload you whole Compose stack on changes but I prefer to just rebuild inside the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.16-alpine AS base&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GO111MODULE="on"&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GOOS="linux"&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GOARCH="amd64"&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; CGO_ENABLED=0&lt;/span&gt;

&lt;span class="c"&gt;# System dependencies&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk update &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    ca-certificates &lt;span class="se"&gt;\
&lt;/span&gt;    git &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; update-ca-certificates

&lt;span class="c"&gt;### Development&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; base AS dev&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Hot reloading mod&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go get &lt;span class="nt"&gt;-u&lt;/span&gt; github.com/cosmtrek/air &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; go &lt;span class="nb"&gt;install &lt;/span&gt;github.com/go-delve/delve/cmd/dlv@latest
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 2345&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["air"]&lt;/span&gt;

&lt;span class="c"&gt;### Executable builder&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; base AS builder&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Application dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go mod download &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; go mod verify

&lt;span class="k"&gt;RUN &lt;/span&gt;go build &lt;span class="nt"&gt;-o&lt;/span&gt; my-great-program &lt;span class="nt"&gt;-a&lt;/span&gt; .

&lt;span class="c"&gt;### Production&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:latest&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk update &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    ca-certificates &lt;span class="se"&gt;\
&lt;/span&gt;    curl &lt;span class="se"&gt;\
&lt;/span&gt;    tzdata &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; update-ca-certificates

&lt;span class="c"&gt;# Copy executable and use an unprivileged user&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder /app/ems-fish-proxy /usr/local/bin/my-great-program&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/usr/local/bin/my-great-program"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's nothing too fancy. We setup a base Docker step with shared dependencies. There are two steps that depend on base: one development step that also needs Air &amp;amp; Delve and a generic builder for the prod-ready version. The last step is the production one which clean-copies the binary into a minimalistic Alpine image so that we don't bring all the dev dependencies along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;A compose stack. You may or may not need a compose stack. This works just as well with a plain docker run command which exposes the ports relevant for your application + port 2345 for Delve. While the example only has the Go app in it, I am using it as my case was based on compose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;my-service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-service&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app:rw,delegated&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;my_network&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8181:8080&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2345:2345&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;my_network&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main things here are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am naming my container to make it easier on the eyes and not allow compose to generate it by naming convention&lt;/li&gt;
&lt;li&gt;I am targeting the dev step. This means the container build will build the base and the dev steps, without the builder and the final production&lt;/li&gt;
&lt;li&gt;I am exposing ports 8080 to my localhost:8181 and port 2345 to the same port on my local. This is dealer's choice.&lt;/li&gt;
&lt;li&gt;I am mapping my local (project) folder entirely as /app with "delegated" sync. This is so that changes are reflected ASAP to be detected by Air.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;Air configuration TOML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="c"&gt;# Config file for [Air](https://github.com/cosmtrek/air) in TOML format&lt;/span&gt;

&lt;span class="c"&gt;# Working directory&lt;/span&gt;
&lt;span class="c"&gt;# . or absolute path, please note that the directories following must be under root.&lt;/span&gt;
&lt;span class="py"&gt;root&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;span class="py"&gt;tmp_dir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"tmp"&lt;/span&gt;

&lt;span class="nn"&gt;[build]&lt;/span&gt;
&lt;span class="c"&gt;# Just plain old shell command. You could use `make` as well.&lt;/span&gt;
&lt;span class="py"&gt;cmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"go build -gcflags='all=-N -l' -o ./tmp/main ."&lt;/span&gt;
&lt;span class="c"&gt;# Binary file yields from `cmd`.&lt;/span&gt;
&lt;span class="py"&gt;bin&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"tmp/main"&lt;/span&gt;
&lt;span class="c"&gt;# Customize binary.&lt;/span&gt;
&lt;span class="py"&gt;full_bin&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dlv exec --accept-multiclient --log --headless --continue --listen :2345 --api-version 2 ./tmp/main"&lt;/span&gt;
&lt;span class="c"&gt;# Watch these filename extensions.&lt;/span&gt;
&lt;span class="py"&gt;include_ext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tpl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tmpl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am just focusing on what's needed for customization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"root" - Air will watch the current folder recursively&lt;/li&gt;
&lt;li&gt;"cmd" the initial command to execute on refresh/build. We set gcflags as required by debugger to prevent all the Go optimizations and save the binary to ./tmp/main&lt;/li&gt;
&lt;li&gt;"full_bin" - This is what Air will execute on refresh. Normally it's just the compiled binary but in this case we set it to execute Delve. Since the binary is there, we ask Delve to execute it, in a headless mode (and not block the execution of the binary - without it we need to start the session for the program to actually run), listen for debug instructions on port 2345 from all hosts and accept multiple clients.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;VSCode launch configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IntelliSense&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;learn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;possible&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;attributes.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Hover&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;descriptions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;existing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;attributes.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;more&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;information&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;visit:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;https://go.microsoft.com/fwlink/?linkid=&lt;/span&gt;&lt;span class="mi"&gt;830387&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Delve into Docker"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"attach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"mode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"remote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"substitutePath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"from"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;full absolute path to project&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"to"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/app/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"showLog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"apiVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"trace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"verbose"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the project will be running in Docker, we ask the debugger to attach to a running instance to be found locally on port 2345 (which will point to Docker). We must (I had lots of trouble to discover this) provide a list of substitute paths (local to remote), which need to be absolute. You can also use the predefined variable &lt;code&gt;"${workspaceFolder}/"&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execution"&gt;
  &lt;/a&gt;
  Execution
&lt;/h3&gt;

&lt;p&gt;Once your Compose stack is up, you can do a  ( on Mac) to launch the debugger. You can switch to debug console in VSCode to check messages exchanged with the Debugger. Beyond that, you can setup breakpoints by clicking on the left side of line numbers (as a red dot appears).&lt;/p&gt;

&lt;p&gt;You can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check in scope variables (top left screen by default)&lt;/li&gt;
&lt;li&gt;add watches (below variables)&lt;/li&gt;
&lt;li&gt;check the call stack and errors &lt;/li&gt;
&lt;li&gt;list breakpoints (bottom left)&lt;/li&gt;
&lt;li&gt;use the debug console to execute instructions in the current break scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h3&gt;

&lt;p&gt;Editing a file will automatically rebuild and restart your program inside the container, but the debugger doesn't take kindly to the procedure. Despite the "continue" flag, it can happen that you may need to refresh the debug session from the debug minibar (the curled green arrow).&lt;/p&gt;

&lt;p&gt;That should be it to get you started! Now on the the hard part ...&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>go</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Make A Modern Registration Form Using HTML And CSS</title>
      <author>Innocent Coder</author>
      <pubDate>Fri, 30 Apr 2021 08:12:38 +0000</pubDate>
      <link>https://dev.to/innocentcoder/make-a-modern-registration-form-using-html-and-css-1ag4</link>
      <guid>https://dev.to/innocentcoder/make-a-modern-registration-form-using-html-and-css-1ag4</guid>
      <description>&lt;p&gt;Designing an HTML sign-up form for a website or blog can be hard. Here we have listed down the most useful and unique CSS3 sign-up and registration form templates that are easy to download and use.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_EnfdlGhg_s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A well-designed registration form is vital for any website to capture new users with ease. Whether it is an eCommerce-related project, social network, blog, portal, or anything, these below templates can be used regardless of the type of your website.&lt;/p&gt;

&lt;p&gt;Download Source Code:-  &lt;a href="https://www.websitemakers.xyz/2021/04/make-modern-registration-form-using.html"&gt;https://www.websitemakers.xyz/2021/04/make-modern-registration-form-using.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section class="row"&amp;gt;
        &amp;lt;div class="column"&amp;gt;
            &amp;lt;div  class="left-container"&amp;gt;
                &amp;lt;h3&amp;gt;Simple way to sharing bill with friends&amp;lt;/h3&amp;gt;
                &amp;lt;p&amp;gt;
                    Lorem ipsum dolor sit amet consectetur adipisicing 
                    elit. Quo in sapiente adipisc.
                &amp;lt;/p&amp;gt;
                &amp;lt;div class="registration-container"&amp;gt;
                    &amp;lt;div class="register-content"&amp;gt;
                        &amp;lt;div class="input-content"&amp;gt;
                            &amp;lt;label for="register"&amp;gt;
                                Register with email address
                            &amp;lt;/label&amp;gt;
                            &amp;lt;input type="email" name="register" /&amp;gt; 
                        &amp;lt;/div&amp;gt;
                        &amp;lt;button&amp;gt;Register Now&amp;lt;/button&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;img src="./images/dots-10.png" alt=""&amp;gt;
                &amp;lt;/div&amp;gt;  
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="column"&amp;gt;
            &amp;lt;div  class="right-container"&amp;gt;
               &amp;lt;img class="image1" src="./images/model1.png" alt=""&amp;gt;
               &amp;lt;span class="green-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;img class="image2" src="./images/dots-10 white.png" alt=""&amp;gt;
               &amp;lt;img class="image3" src="./images/model2.png" alt=""&amp;gt;
               &amp;lt;span class="blue-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;img class="image4" src="./images/model3.png" alt=""&amp;gt;
               &amp;lt;span class="purple-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;span class="pink-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;span class="neon-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;span class="dark-blue-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;img class="image5" src="./images/dots-10 white-4.png" alt=""&amp;gt;
               &amp;lt;img class="wave" src="./images/wave.png" alt=""&amp;gt;
               &amp;lt;img class="image6" src="./images/model4.png" alt=""&amp;gt;
               &amp;lt;span class="yellow-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;span class="dark-purple-dot"&amp;gt;&amp;lt;/span&amp;gt;
               &amp;lt;img class="wave1" src="./images/wave.png" alt=""&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600&amp;amp;display=swap');
*{
    margin: 0;
    padding: 0;
    font-family: 'Poppins', sans-serif;
}
body{
    background: #DFE3EF;
}
.column {
    float: left;
    width: 50%;
    height: 100vh;
}
.row{
    overflow: hidden;
}
.row:after {
    content: "";
    display: table;
    clear: both;
}
.left-container{
    background-color: #fff;
    display: flex;
    justify-content: center;
    flex-direction: column;
    padding-left: 230px;
    position: relative;
    height: 100vh; 
}
.left-container h3{
    font-size: 45px;
    width: 70%;
    line-height: 60px;
    color: #0e1318;
    margin-top: -10px;
}
.left-container p{
    width: 58%;
    font-size: 13px;
    font-weight: 500;
    color: #727272;
    margin-top: 19px;
}
.left-container .register-content{
    width: 450px;
    box-shadow: 2px 2px 15px rgba(0,0,0,.2);
    padding: 15px 30px 20px;
    display: flex;
    align-items: center;
    margin-top: 40px;
    position: absolute;
    left: 5%;
    background-color: #fff;
    z-index: 10;
} 
.left-container .register-content .input-content{
    display: flex;
    flex-direction: column;
    width: 70%;
}
.input-content label{
    font-size: 13px;
    color: #727272;
    margin-bottom: 11px;
}
.input-content input{
    border: none;
    border-bottom: 1px solid #a7a7a7;
    padding-bottom: 2px;
}
.input-content input:focus{
    outline: none;
}
.registration-container{
    position: relative;
}
.register-content button{
    width: 140px;
    height: 45px;
    margin-top: 9px;
    margin-left: 10px;
    background-color: #FF7240;
    outline: none;
    border: none;
    color: #fff;
    font-size: 12px;
    cursor: pointer;
}
.registration-container img{
    width: 60px;
    margin-top: 100px;
    margin-left: -5px;
}
.right-container{
    background-color: #0E243C;
    height: 100vh; 
    position: relative;
    z-index: 1;
}
.right-container .image1{
    width: 140px;
    position: absolute;
    left: -10%;
    top: 6%;
}
.right-container .image2{
    width: 60px;
    position: absolute;
    left: 2%;
    top: 40%;
}
.right-container .green-dot{
    width: 70px;
    height: 70px;
    background-color: #19e49d;
    position: absolute;
    left: -5%;
    top: 35%;
    border-radius: 50%;
}
.right-container .image3{
    width: 100px;
    position: absolute;
    left: 15%;
    bottom: 30%;
    transform: rotate(-10deg);
}
.right-container .blue-dot{
    width: 10px;
    height: 10px;
    background-color: #3c69f0;
    position: absolute;
    left: 20%;
    bottom: 25%;
    border-radius: 50%;
}
.right-container .image4{
    width: 190px;
    position: absolute;
    left: 35%;
    top: 20%;
}
.right-container .purple-dot{
    width: 10px;
    height: 10px;
    background-color: #7c66c4;
    position: absolute;
    left: 22%;
    top: 20%;
    border-radius: 50%;
}
.right-container .pink-dot{
    width: 30px;
    height: 30px;
    background-color: #f35636;
    position: absolute;
    left: 30%;
    top: -2%;
    border-radius: 50%;
}
.right-container .neon-dot{
    width: 10px;
    height: 10px;
    background-color: #19e49d;
    position: absolute;
    right: 25%;
    top: 18%;
    border-radius: 50%;
}
.right-container .dark-blue-dot{
    width: 60px;
    height: 60px;
    background-color: #346BEF;
    position: absolute;
    right: -1%;
    top: 0%;
    transform: rotate(35deg);
}
.right-container .image5{
    width: 50px;
    position: absolute;
    right: 5%;
    top: 5%;
}
.right-container .wave{
    width: 70px;
    position: absolute;
    right: 25%;
    top: 40%;
}
.right-container .wave1{
    width: 70px;
    position: absolute;
    left: 35%;
    bottom: 15%;
}
.right-container .image6{
    width: 150px;
    position: absolute;
    right: 17%;
    bottom: 10%;
}
.right-container .yellow-dot{
    width: 10px;
    height: 10px;
    background-color: #f5c34e;
    position: absolute;
    right: 40%;
    top: 55%;
    border-radius: 50%;
}
.right-container .dark-purple-dot{
    width: 40px;
    height: 40px;
    background-color: #8949E3;
    position: absolute;
    right: -3%;
    top: 50%;
    border-radius: 50%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/free-3d-illustration-libraries-5d6c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;FREE 3D ILLUSTRATION LIBRARIES &lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ Apr 29 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#illustration&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#freebies&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Solution: Powerful Integers</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 30 Apr 2021 08:05:23 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-powerful-integers-1o2p</link>
      <guid>https://dev.to/seanpgallivan/solution-powerful-integers-1o2p</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/powerful-integers/discuss/1183595"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-970-medium-powerful-integers"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/powerful-integers/"&gt;Leetcode Problem #970 (&lt;em&gt;Medium&lt;/em&gt;): Powerful Integers&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given three integers &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;bound&lt;/code&gt;, &lt;em&gt;return a list of all the &lt;strong&gt;powerful integers&lt;/strong&gt; that have a value less than or equal to &lt;code&gt;bound&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An integer is &lt;strong&gt;powerful&lt;/strong&gt; if it can be represented as &lt;code&gt;xi + yj&lt;/code&gt; for some integers &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;j &amp;gt;= 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may return the answer in any order. In your answer, each value should occur &lt;strong&gt;at most once&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;x = 2, y = 3, bound = 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[2,3,4,5,7,9,10]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;2 = 20 + 30&lt;br&gt;3 = 21 + 30&lt;br&gt;4 = 20 + 31&lt;br&gt;5 = 21 + 31&lt;br&gt;7 = 22 + 31&lt;br&gt;9 = 23 + 30&lt;br&gt;10 = 20 + 32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;x = 3, y = 5, bound = 15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[2,4,6,8,10,14]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= x, y &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= bound &amp;lt;= 10^6&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem is a pretty straightforward one. Since we need to return all powerful integers and not just a count of them, there aren't many shortcuts we can take; we'll have to actually come up with the solution iteratively with nested loops.&lt;/p&gt;

&lt;p&gt;First, we can use a &lt;strong&gt;set&lt;/strong&gt; structure (&lt;strong&gt;ans&lt;/strong&gt;) to prevent duplicate answers. Then we can have our nested loops increment the power of the &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; values while adding the appropriate results to our set.&lt;/p&gt;

&lt;p&gt;One somewhat tricky situation occurs when one or more of the values is a &lt;strong&gt;1&lt;/strong&gt;, as that power will continue to be &lt;strong&gt;1&lt;/strong&gt; forever, regardless of the exponent. To deal with that, we can force each nested loop to &lt;strong&gt;break&lt;/strong&gt; after the first iteration if its original value was a &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once we've iterated over all possible combinations, we can convert &lt;strong&gt;ans&lt;/strong&gt; to an array and &lt;strong&gt;return&lt;/strong&gt; it.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences in the code of each language.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;powerfulIntegers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;powerfulIntegers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;powerfulIntegers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;powerfulIntegers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;unordered_set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>TOP 10 MOBILE APP DEVELOPMENT TRENDS TO WATCH OUT FOR IN 2021</title>
      <author>LogicRays Technologies Pvt. Ltd.</author>
      <pubDate>Fri, 30 Apr 2021 08:05:06 +0000</pubDate>
      <link>https://dev.to/logicraystech/top-10-mobile-app-development-trends-to-watch-out-for-in-2021-3382</link>
      <guid>https://dev.to/logicraystech/top-10-mobile-app-development-trends-to-watch-out-for-in-2021-3382</guid>
      <description>&lt;p&gt;The mobile app development trends are evolving at a rapid speed every single day, there is no turning back in this industry. Every day there is a new trend in technology. Everything that took place in technology is beyond even the wildest delusions. In some years, smartphones have taken a very important position in our lives, and that’s the reason why mobile app development businesses are touching the heights of success.&lt;/p&gt;

&lt;p&gt;You will be astonished to know that the Mobile App Market Revenue will Reach $693 Billion. Ain’t that amazing?&lt;/p&gt;

&lt;p&gt;Since the Pandemic of Covid-19 took place in 2019, every business or organization is striving to reach their audience on their phone.&lt;/p&gt;

&lt;p&gt;To better support their customers, mobile app resellers must keep up with new trends. Content creators and developers who want to take their products to the next stage with mobile production are in the same boat.&lt;/p&gt;

&lt;p&gt;With the radical growth in competition, you need to make your mobile app development game stronger. To make it strong, you need to keep yourself updated with the top mobile app development trends in 2021.&lt;/p&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;p&gt;TABLE OF CONTENT&lt;br&gt;
Internet of Things (IoT)&lt;br&gt;
Artificial Intelligence &amp;amp; Machine Learning&lt;br&gt;
5G Mobile Network&lt;br&gt;
Virtual Reality &amp;amp; Augmented Reality&lt;br&gt;
Creating App for Foldable&lt;br&gt;
Smart Watch / Wearable App Integration&lt;br&gt;
Mobile Wallet App&lt;br&gt;
Enterprise Mobile App&lt;br&gt;
Blockchain Technology&lt;br&gt;
Geolocation Based App&lt;br&gt;
Wrapping up!&lt;br&gt;
INTERNET OF THINGS (IOT) APP INTEGRATION&lt;br&gt;
People’s daily life is now dependant on the Internet. If we believe the internet cannot regulate our bedroom, house, kitchen, we should be aware of the Internet of Things (IoT). The Internet of Things (IoT) is booming, and people are quite enthusiastic about it. &lt;/p&gt;

&lt;p&gt;It’s essential in a variety of fields, smart home protection systems, including wireless appliances, wearable health monitors, auto farming equipment, smart factory equipment, wireless inventory trackers, and biometric Cyber Security scanners, among others.&lt;/p&gt;

&lt;p&gt;People are growing faster to using technology to bring improvement in their life. Even brands like Google and Amazon have fully utilized this technology to strengthen the competition by introducing “Echo” and “Google Home Voice Controller” respectively.&lt;/p&gt;

&lt;p&gt;Internet of Things&lt;br&gt;
FUTURE TRENDS OF IOT:&lt;br&gt;
Smart Cities and Smart Home&lt;br&gt;
AI-powered IoT Devices&lt;br&gt;
AI-powered Filters for Instagram and Snapchat&lt;br&gt;
IoT in Healthcare&lt;br&gt;
ARTIFICIAL INTELLIGENCE &amp;amp; MACHINE LEARNING&lt;br&gt;
Artificial Intelligence (AI) and Machine Learning (ML) have already begun to appear in mobile apps and laptops. Voice Search, Chatbots, Face Unlock, and other similar examples may have caught our attention. Face App, Instagram Filter, Prisma, and other AI-powered photo filtering apps have brought AI to new heights.&lt;/p&gt;

&lt;p&gt;Modern search engines, virtual assistant solutions, marketplaces, business automation, and user preference identification are all now widely come in use of mobile economy. Indeed, the integration of AI and ML solutions into mobile is a factor that has aided and will continue to aid the mobile segment’s performance.&lt;/p&gt;

&lt;p&gt;Artificial intelligence can make apps smarter and, as a result, boost overall efficiency.&lt;br&gt;
From the backend creation phase to the frontend user interface, AI will shift the way apps are developed in 2021,&lt;/p&gt;

&lt;p&gt;Camila Queiroz Big Smile GIF - CamilaQueiroz Camila BigSmile GIFs&lt;br&gt;
Source: &lt;a href="https://tenor.com/view/camila-queiroz-camila-big-smile-instagram-filter-face-warp-gif-17789806"&gt;https://tenor.com/view/camila-queiroz-camila-big-smile-instagram-filter-face-warp-gif-17789806&lt;/a&gt;&lt;br&gt;
FUTURE TRENDS OF AI OF ML:&lt;br&gt;
Image recognition, Tagging, and Classification&lt;br&gt;
Predictive Maintenance&lt;br&gt;
Object Identification, Detection, Tracking, and Classification&lt;br&gt;
Content Distribution on Social Media&lt;br&gt;
Automated geophysical detection&lt;br&gt;
Commentary Prediction&lt;br&gt;
5G MOBILE INTERNET NETWORK&lt;br&gt;
We all know what is the current situation where 4G is leading over the world. Now just imagine, what will happen when everyone gets an introduction to 5G technology? By 2025, the number of 5G connections worldwide will reach 1.1 billion. The prediction says that 5G will alter the way to create an app.&lt;/p&gt;

&lt;p&gt;The speed and reliability of the process will greatly improve. In reality, 5G is project to reduce latency by a factor of ten while still increasing network reliability and traffic capacity. Depending on the mobile network provider, 5G can be up to 100 times faster than 4G.&lt;/p&gt;

&lt;p&gt;The adoption of 5G would improve the accessibility of mobile applications in the long run. This will allow app developers to add new features without compromising the app’s efficiency.&lt;/p&gt;

&lt;p&gt;Likeabosch 5g GIF - Likeabosch Bosch 5g GIFs&lt;br&gt;
Source: &lt;a href="https://tenor.com/view/likeabosch-bosch-5g-warp-gif-19353463"&gt;https://tenor.com/view/likeabosch-bosch-5g-warp-gif-19353463&lt;/a&gt;&lt;br&gt;
FUTURE TRENDS OF 5G NETWORK:&lt;br&gt;
Cloud Computing&lt;br&gt;
Reduced inequality&lt;br&gt;
More Jobs&lt;br&gt;
Fully-Automatic/ Driverless Vehicles&lt;br&gt;
VIRTUAL REALITY (VR) &amp;amp; AUGMENTED REALITY (AR)&lt;br&gt;
There was a time where everyone Drooled over ‘Pokemon Go’. Although it was a temporary trend that came like a wave in everyone’s life and went. But the thing is, VR and AR are here to stay.&lt;/p&gt;

&lt;p&gt;Theres APokemon Right Behind You Pokemon Game GIF - TheresAPokemonRightBehindYou Pokemon PokemonGame GIFs&lt;br&gt;
Source: &lt;a href="https://tenor.com/view/theres-apokemon-right-behind-you-pokemon-pokemon-game-game-pokemon-go-gif-15179719"&gt;https://tenor.com/view/theres-apokemon-right-behind-you-pokemon-pokemon-game-game-pokemon-go-gif-15179719&lt;/a&gt;&lt;br&gt;
AR and VR technology are the most common mobile app development trends, that come in use to prepare and improve high-quality gaming apps; these are actively chosen for a variety of other applications.&lt;/p&gt;

&lt;p&gt;AR is already coming in use for many technological behemoths such as Apple and Google to develop a slew of new applications. Google, for example, is about to launch a new AR feature for Google Maps that will provide people with real-time directions from their camera phones.&lt;/p&gt;

&lt;p&gt;Tech experts say that in 2021, AR integration in the mobile app development trend will become a necessity. It will shape the mobile industry in a way that the mobile industry will offer a seamless experience for every user.&lt;/p&gt;

&lt;p&gt;Many AR-dependant app ideas will develop into fully functional mobile applications. This would support industries such as tourism, healthcare, interior designing, education, real estate, e-commerce, and so on.&lt;/p&gt;

&lt;p&gt;For content developers, AR adaptation is a top app creation trend. You can use this technology to be innovative filters using AR for Instagram and Snapchat.&lt;/p&gt;

&lt;p&gt;FUTURE OF AR &amp;amp; VR:&lt;br&gt;
Virtual Training Simulation&lt;br&gt;
Instagram and Snapchat Filters&lt;br&gt;
AR-based Destination Navigator&lt;br&gt;
AR &amp;amp; VR Based Visual Learning&lt;br&gt;
Live Music Concerts and Festivals&lt;br&gt;
CREATING APP FOR FOLDABLE&lt;br&gt;
With the release of Samsung’s foldable OLED display, operating systems are preparing to use this technology to transform mobile experiences. Google officially declared foldable support on Android phones in 2018 by using its ‘screen continuity’ API.&lt;/p&gt;

&lt;p&gt;According to Samsung, hundreds of top Android apps including Amazon Prime Video, Facebook, Twitter, Spotify, VSCO, and Microsoft Office, have been optimized for the Galaxy Fold.&lt;/p&gt;

&lt;p&gt;‘Foldable Phone’ became a buzzword in the year 2020. Since this is trending, you should start scheduling your mobile app development strategy so that it runs smoothly on foldable devices — a daunting mobile app development trend in 2021.&lt;/p&gt;

&lt;p&gt;Video streaming and gaming applications can gain the most from foldable devices by simply increasing the size of their screens – or by using the extra spoace to provide additional details and controls.&lt;/p&gt;

&lt;p&gt;Creating App for foldable&lt;br&gt;
SMART WATCH / WEARABLE APP INTEGRATION&lt;br&gt;
Wearables have already created quite a hype among consumers. They are commercially available in the form of smartwatches, display devices (Google Glass), smart jewelry, body sensors, and so on. We should expect wearable applications to become an integral part of our daily lives as technology advances.&lt;/p&gt;

&lt;p&gt;Apple recently revealed its WatchOS update at the WWDC meeting. Apple Watch applications will no longer require to use a compatible iOS app and will have their own App Store. This clearly indicates the emergence of wearable technology, which will be one of the most significant mobile app development developments in 2021.&lt;/p&gt;

&lt;p&gt;With applications that run independently of the iPhone, Apple has elevated the Apple Watch to the status of a standalone unit that consumers can use for their digital needs.&lt;/p&gt;

&lt;p&gt;In other words, Application developers and companies should prepare applications that offer an outstanding digital experience to Apple Watch customers, giving them a distinct advantage over those that do not.&lt;/p&gt;

&lt;p&gt;These wearables can track and evaluate body movements, heartbeats, steps, body temperature, and other parameters. In 2021, we will see increased demand for wearable app growth.&lt;/p&gt;

&lt;p&gt;Apple Applewatch GIF - Apple Applewatch SmartWatch GIFs&lt;br&gt;
Source: &lt;a href="https://tenor.com/view/apple-applewatch-smart-watch-gif-12509437"&gt;https://tenor.com/view/apple-applewatch-smart-watch-gif-12509437&lt;/a&gt;&lt;br&gt;
FUTURE TRENDS OF WEARABLES:&lt;br&gt;
Virtual Assistant in Lenses&lt;br&gt;
Virtual Keyboards&lt;br&gt;
MOBILE WALLET APP&lt;br&gt;
Given the pervasiveness of smartphones and consumers’ desire to move to smartwatches. Mobile wallets such as Apple Pay and Google Wallet would undoubtedly push purchases through 2021. As a result, demand for mobile wallet apps (a key mobile app growth trend in 2021) will increase over the next year.&lt;/p&gt;

&lt;p&gt;Mobile wallets are coming in use by major brands such as Samsung, Apple, and Google. These major brands provide their users with a safe and easy forum for money transfers and bill payments.&lt;/p&gt;

&lt;p&gt;By integrating popular payment gateways with mobile wallets, the payment process becomes rapid and smoother.&lt;/p&gt;

&lt;p&gt;Mobile wallets like Google Pay, PhonePe, Amazon Pay, Paytm, and others have grown in popularity. Since the market has not yet reached saturation, there is still room for growth in the future.&lt;/p&gt;

&lt;p&gt;Mobile Wallet App&lt;br&gt;
Mobile Wallets&lt;br&gt;
FUTURE TRENDS OF MOBILE WALLETS:&lt;br&gt;
Audio Based Wallet&lt;br&gt;
Near-field communication-based payments&lt;br&gt;
Radio-frequency identification payments&lt;br&gt;
ENTERPRISE MOBILE APP&lt;br&gt;
Enterprise Mobile apps created by specific organizations for their employees to carry out tasks and functions necessary for the organization’s operation. Creating enterprise mobile applications is becoming a major trend all over the world. According to some statistics, businesses make more money when their workers have access to corporate mobile applications.&lt;/p&gt;

&lt;p&gt;Enterprise mobile applications boost internal connectivity within organizations, as well as employee satisfaction and productivity. In 2021, we will see a large number of businesses requesting the creation of an enterprise mobile app for their business.&lt;/p&gt;

&lt;p&gt;BLOCKCHAIN TECHNOLOGY&lt;br&gt;
Not everybody is aware of blockchain technology. This technology stores information in such a way that changing or hacking the device is extremely difficult or impossible. We’ve seen it in the form of cryptocurrency and smart contracts.&lt;/p&gt;

&lt;p&gt;If Bitcoin introduced us to cryptocurrency, Ethereum demonstrated the true potential of Blockchain. Another example of Blockchain is decentralized applications. Dapps do not need a middleman to manage their data. It has the ability to link users and providers directly. As a result, no one else can access the data.&lt;/p&gt;

&lt;p&gt;Dapps are now available in a wide range of sectors, including healthcare, banking, and trading. Dapps will explore other markets in 2021, indicating that the blockchain technology revolution is just around the corner.&lt;/p&gt;

&lt;p&gt;Marshall Hayner Proton Chain GIF - MarshallHayner ProtonChain MetalPay GIFs&lt;br&gt;
Source: &lt;a href="https://tenor.com/view/marshall-hayner-proton-chain-metal-pay-first-blockchain-fbb-gif-20560873"&gt;https://tenor.com/view/marshall-hayner-proton-chain-metal-pay-first-blockchain-fbb-gif-20560873&lt;/a&gt;&lt;br&gt;
FUTURE TRENDS OF BLOCKCHAIN TECHNOLOGY:&lt;br&gt;
Robotics&lt;br&gt;
In Anti-Piracy&lt;br&gt;
Secure Public Elections&lt;br&gt;
Blockchain as a Service(BaaS)&lt;br&gt;
GEOLOCATION BASED APP&lt;br&gt;
Geolocation mobile app creation is already a common trend that will only grow in the coming years. It enables mobile applications to provide consumers with a highly customized experience.&lt;/p&gt;

&lt;p&gt;Thus, apps that capture user geolocation can include location-based services, better marketing strategies, and so on. It also aids in the analysis of usage trends and gaining insight into user behavior and place.&lt;/p&gt;

&lt;p&gt;Geo-location Based App&lt;br&gt;
FUTURE TRENDS IF GEOLOCATION BASED APP:&lt;br&gt;
AR in astronomy or geography&lt;br&gt;
Better Suggestions&lt;br&gt;
Personalized Recommendations&lt;br&gt;
WRAPPING UP!&lt;br&gt;
There are already a plethora of smartphone applications available on Google Play, Apple App Store, Windows Store, and Amazon App Store. With all of these mobile app development trends, the mobile app market will continue to grow rapidly.&lt;/p&gt;

&lt;p&gt;Thus, in order to stand out in the increasingly competitive mobile app development market, business leaders must keep up to date on the latest developments and technologies. The evolution of mobile apps will be driven by evolving mobile app development technologies, rising backend architectures, and microservices, as well as new hardware capabilities. Also , when you develop app for any purpose, make sure that your Mobile app is secure and safe. It is necessary!&lt;/p&gt;

&lt;p&gt;It doesn’t matter which trend you go with or which platform you choose to develop your application on (iOS Mobile App or Android Mobile App). All the Mobile app trend mentioned above will give a boom to your application. Just make sure that whatever you create is best, unique, and giving a solution to any problem.&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>android</category>
      <category>ios</category>
    </item>
    <item>
      <title>Avoid defective nouns when naming things</title>
      <author>Malte Riechmann</author>
      <pubDate>Fri, 30 Apr 2021 08:01:22 +0000</pubDate>
      <link>https://dev.to/visuellverstehen/avoid-defective-nouns-when-naming-things-47jm</link>
      <guid>https://dev.to/visuellverstehen/avoid-defective-nouns-when-naming-things-47jm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#naming-things-is-hard"&gt;
  &lt;/a&gt;
  Naming things is hard
&lt;/h2&gt;

&lt;p&gt;You always have to keep in mind, software developers spend more time reading source code than actually writing it. A lot of other people will someday read the source code you are writing today. Better make sure to write it clear, consistent, and well structured. I can recommend reading &lt;a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/"&gt;Clean Code&lt;/a&gt; by &lt;a href="https://twitter.com/unclebobmartin"&gt;Robert C. Martin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Naming things is one part of writing clean code and often it is quite hard to find the right names. In the following, I just want to show you one easy step to improve your source code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-defective-nouns"&gt;
  &lt;/a&gt;
  Avoid defective nouns
&lt;/h2&gt;

&lt;p&gt;Defective nouns are nouns without singulars, nouns without plurals, or nouns that have the same singular and plural (e. g. information, music, or news). See &lt;a href="https://en.wikipedia.org/wiki/English_plurals#Defective_nouns"&gt;Wikipedia&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Usually, in software development, you will need a noun that differs in singular and plural. So you are well-advised not to use defective nouns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Think about the list of posts on &lt;a href="https://dev.to"&gt;DEV&lt;/a&gt;. How would you name those? There are multiple options, but you should definitely avoid a defective noun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bad-newssnews"&gt;
  &lt;/a&gt;
  ❌ Bad: newss/news
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;newss.forEach(function(news) {
    news.doSomething();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bad-newslistnews"&gt;
  &lt;/a&gt;
  ❌ Bad: newsList/news
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;newsList.forEach(function(news) {
    news.doSomething();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bad-newssinglenews"&gt;
  &lt;/a&gt;
  ❌ Bad: news/singleNews
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;news.forEach(function(singleNews) {
    currentNews.doSomething();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#good-postspost"&gt;
  &lt;/a&gt;
  ✅ Good: posts/post
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;posts.forEach(function(post) {
    post.doSomething();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-irregular-plural-nouns"&gt;
  &lt;/a&gt;
  Bonus: Irregular plural nouns
&lt;/h2&gt;

&lt;p&gt;I will tell you a little secret. This might be a bit fussy, but I try to avoid irregular plural nouns, too. I do not like medium and media, child and children, or radius and radii. I just like good ol' regular plural nouns like post and posts, user and users, list and lists.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How many unfinished projects do you have?</title>
      <author>Madza</author>
      <pubDate>Fri, 30 Apr 2021 07:49:41 +0000</pubDate>
      <link>https://dev.to/madza/how-many-unfinished-projects-do-you-have-56fg</link>
      <guid>https://dev.to/madza/how-many-unfinished-projects-do-you-have-56fg</guid>
      <description>&lt;p&gt;Could you estimate how many projects are you normally working on simultaneously? Are you the type of person who works on a "start-to-finish" basis or do you like to switch between the projects in the making?&lt;/p&gt;

&lt;p&gt;For example, I usually keep around like 10 projects. Out of those 2-3 are normally larger scale projects and 5-7 are for learning/testing purposes.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>✔||🤢 Commit or Vomit | function currying 🍛</title>
      <author> 🐤🥇 Jasper de Jager</author>
      <pubDate>Fri, 30 Apr 2021 07:48:14 +0000</pubDate>
      <link>https://dev.to/jmdejager/commit-or-vomit-function-currying-4m17</link>
      <guid>https://dev.to/jmdejager/commit-or-vomit-function-currying-4m17</guid>
      <description>&lt;h1&gt;
  &lt;a href="#function-currying"&gt;
  &lt;/a&gt;
  Function currying
&lt;/h1&gt;

&lt;p&gt;Hard to put vomit and curry together in a title, but I had to ask 😁&lt;br&gt;&lt;br&gt;
I see this posted a lot on dev.to, function currying, but I find it not that readable myself TBH. What do you think? &lt;br&gt;
And please tell me why 😊&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#function-currying-%E2%9C%94"&gt;
  &lt;/a&gt;
  function currying  ✔||🤢?
&lt;/h4&gt;

&lt;p&gt;❤: Commit (I'd commit something like this)&lt;br&gt;
🏷: Vomit (we all know unicorns don't vomit)&lt;br&gt;
🦄: Like your post please continue this series!&lt;/p&gt;

&lt;p&gt;Let's vote! 😊&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ninjason?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jason Leung&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/curry?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javacript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Improve your unit tests with AssertJ</title>
      <author>Pavel Polívka</author>
      <pubDate>Fri, 30 Apr 2021 07:32:19 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/improve-your-unit-tests-with-assertj-35m2</link>
      <guid>https://dev.to/pavel_polivka/improve-your-unit-tests-with-assertj-35m2</guid>
      <description>&lt;p&gt;You are probably writing unit tests, if not you probably should. Over the years of my career, I did a lot of workshops, speaks, etc about how to write those correctly. One of the points I always make is to have understandable outputs of those tests. Nothing is worst than failing a unit test with a message like&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;Failed. True != False&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 what are you supposed to do with that? With standard assertions functions provided by all testing frameworks, you can improve this a bit by using correct functions, providing additional messages, etc... It's not perfect and it sometimes is a lot of work. &lt;/p&gt;

&lt;p&gt;Here comes &lt;a href="https://assertj.github.io/doc/"&gt;AssertJ&lt;/a&gt;. It's a simple library designed to improve your assertions. I would consider it essential for my testing needs. It provides a vast variety of assertions, state of the art error messages. Also, it improves code readability, it's super simple to understand what you want to assert. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;AssertJ is available on Maven central so installation is as simple as adding a test dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.assertj&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;assertj-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.19.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;In this article, I will go over few examples of how awesome AssertJ is. These examples will be done in JUnit5 with the following structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DtoComparisonTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="nd"&gt;@Test&lt;/span&gt;
 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testComparison&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

 &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="nd"&gt;@Data&lt;/span&gt;
 &lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;firstString&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;secondString&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="nd"&gt;@Data&lt;/span&gt;
 &lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;firstInt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;secondInt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example compares the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; objects and prints the following error messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org.opentest4j.AssertionFailedError: 
Expecting:
 &amp;lt;DtoComparisonTest.TestedDto(firstString=a, secondString=c, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2))&amp;gt;
to be equal to:
 &amp;lt;DtoComparisonTest.TestedDto(firstString=a, secondString=b, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=3))&amp;gt;
but was not.
Expected :DtoComparisonTest.TestedDto(firstString=a, secondString=b, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=3))
Actual :DtoComparisonTest.TestedDto(firstString=a, secondString=c, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How awesome is that? &lt;/p&gt;

&lt;p&gt;It has a lot of built-in assertions for String. Let's see some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt; &lt;span class="nd"&gt;@Test&lt;/span&gt;
 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testComparison&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dragon"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Goblin"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

 &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFirstString&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"D"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLowerCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.AssertionError: 
Expecting &amp;lt;"Dragon"&amp;gt; to be a lowercase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine doing this and having the same output with normal assertions. &lt;/p&gt;

&lt;p&gt;It also has tons of built-ins for collections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt; &lt;span class="nd"&gt;@Test&lt;/span&gt;
 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testComparison&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;allMatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tested&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNested&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFirstInt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyMatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tested&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSecondString&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsNull&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prints this error message&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.AssertionError: 
Expecting:
 &amp;lt;[DtoComparisonTest.TestedDto(firstString=a, secondString=b, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2)),
 DtoComparisonTest.TestedDto(firstString=c, secondString=d, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2))]&amp;gt;
to contain a &amp;lt;null&amp;gt; element
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am pretty much in love with this library. It's super simple to start with and improves your tests so much. I recommend you to start using it today (also dive into their documentation, there is so much more to AssertJ). &lt;/p&gt;

&lt;p&gt;... &lt;/p&gt;

&lt;p&gt;For more tips like this, you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>testing</category>
    </item>
  </channel>
</rss>
