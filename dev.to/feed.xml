<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Move Custom Fields’ Data to Custom Tables</title>
      <author>WP Meta Box Plugin</author>
      <pubDate>Wed, 07 Apr 2021 02:50:07 +0000</pubDate>
      <link>https://dev.to/wpmetabox/how-to-move-custom-fields-data-to-custom-tables-4lg2</link>
      <guid>https://dev.to/wpmetabox/how-to-move-custom-fields-data-to-custom-tables-4lg2</guid>
      <description>&lt;p&gt;As you all may know, custom fields are definitely so powerful and effective in WordPress. However, if your website has too many custom fields' data, your database will be bloated considerably. So, to solve this problem, you should try moving your custom fields' data to a custom table.&lt;/p&gt;

&lt;p&gt;Read till the end to watch our video tutorial.&lt;/p&gt;

&lt;h2&gt;Why You Need to Move Custom Fields' Data to Custom Tables&lt;/h2&gt;

&lt;p&gt;By default, WordPress saves custom fields' values in the &lt;code&gt;wp_postmeta&lt;/code&gt; table in the database, in which each row stores a custom field's data. If you move these data of &lt;a href="https://metabox.io/series/custom-fields"&gt;custom fields&lt;/a&gt; to a custom table, all fields will be saved in&lt;strong&gt; only ONE row.&lt;/strong&gt; Therefore, you can release the burden of your database and improve your website performance dramatically!&lt;/p&gt;

&lt;p&gt;Ok, now we will do it in action:&lt;/p&gt;

&lt;h2&gt;Preparation&lt;/h2&gt;

&lt;p&gt;To move your custom fields' data to a custom table, here are the tools you need:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;
&lt;a href="https://metabox.io/"&gt;Meta Box&lt;/a&gt; core plugin to have a custom fields framework. It empowers you to create custom fields so quickly and easily. Just download it from &lt;a href="https://wordpress.org/plugins/meta-box/"&gt;wordpress.org&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;
&lt;a href="https://metabox.io/plugins/mb-custom-table/"&gt;MB Custom Table&lt;/a&gt; is a premium extension of Meta Box to save custom fields' data in a custom table instead of in term / post / user meta tables like default WordPress.&lt;/li&gt;

&lt;li&gt;
&lt;a href="https://metabox.io/plugins/meta-box-builder/"&gt;Meta Box Builder&lt;/a&gt; is also a premium extension of Meta Box. It gives you a UI to create and manage custom fields right on the backend.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Next, take a look at the custom fields that we're going to move.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But please note that&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You definitely can move all the custom fields' data in a website to an only row. However, saving custom fields' values of all custom post types in one table will make it difficult to manage, categorize, and may cause confusion for you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thus, we're going to move the data of each post type to a separate custom table. This method is a bit more time-consuming, but in a long run, it will be more beneficial. That's because the custom fields' data of different post types are saved in different tables.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here, we already have a post type named &lt;strong&gt;Companies&lt;/strong&gt; with &lt;strong&gt;Company name&lt;/strong&gt;, &lt;strong&gt;Address&lt;/strong&gt;, and &lt;strong&gt;Start day&lt;/strong&gt; custom fields. This is the field group of these fields in Meta Box Builder:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6O8quOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rHoumB6.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6O8quOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rHoumB6.png" alt="The field group for the Companies post type in Meta Box Builder plugin" width="1352" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These custom fields are displayed in the &lt;strong&gt;Companies&lt;/strong&gt; post type like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--flrhfc7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WapcPoq.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--flrhfc7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WapcPoq.png" alt="The custom fields are displayed in the Companies post type." width="1333" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you move it, the custom field's data above is still saved in the &lt;code&gt;wp_postmeta&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aORZRBqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ntTFIwh.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--aORZRBqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ntTFIwh.png" alt="The custom field's data is still saved in the wp_postmeta table." width="1000" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To move this custom field's data to a custom table, follow these steps:&lt;/p&gt;

&lt;h2&gt;Step 1: Create a Custom Table&lt;/h2&gt;

&lt;p&gt;Now, go to &lt;strong&gt;Meta Box&lt;/strong&gt; &amp;gt; &lt;strong&gt;Custom Fields&lt;/strong&gt; and edit the field group I mentioned above:&lt;/p&gt;

&lt;p&gt;Go to the &lt;strong&gt;Settings&lt;/strong&gt; tab and just choose &lt;strong&gt;Save data in a custom table&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uYSXlKe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3VOC2zd.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uYSXlKe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3VOC2zd.png" alt="Create a custom table in field group settings" width="1347" height="904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, some options will appear, and then you have to choose &lt;strong&gt;Create table automatically &lt;/strong&gt;and enter the name of the custom table. I'll name it &lt;code&gt;wp_custom_company&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-VqQTfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K0nd0vy.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-VqQTfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K0nd0vy.png" alt="Enter the name of the new custom table" width="1387" height="999"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, you have just created a custom table automatically with Meta Box Builder. And now, in your database, you will see a new table named &lt;code&gt;wp_custom_company&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ps3SoA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zolJh3a.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ps3SoA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zolJh3a.png" alt="A new custom table shows up in the database of the WordPress website" width="1342" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From now on, the new data will be automatically saved in the custom table whenever you update. How about the old data of this post type? It is still in the &lt;code&gt;wp_postmeta&lt;/code&gt; table, so we need to use some code to move it to the new &lt;code&gt;wp_custom_company&lt;/code&gt; table.&lt;/p&gt;

&lt;h2&gt;Step 2: Move the Data to the New Custom Table&lt;/h2&gt;

&lt;p&gt;Here is the script to copy the custom fields' data in the &lt;code&gt;wp_postmeta&lt;/code&gt; table and paste it to the &lt;code&gt;wp_custom_company&lt;/code&gt;. Then, it will delete the old data in the &lt;code&gt;wp_postmeta&lt;/code&gt; table. Just insert this code into the &lt;code&gt;functions.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This script runs on the backend and only the admin can run it.&lt;/p&gt;

&lt;pre class="wp-block-preformatted"&gt;function estar_child_data_company() {

if ( empty( $_GET['move-data-companies'] ) || ! current_user_can( 'manage_options' ) ) {

return;

}

$paged = isset( $_GET['estar-child-paged'] ) ? $_GET['scf-paged'] : 0;

$paged += 1;

$url = add_query_arg( 'estar-child-paged', $paged, 'http://yourwebsite/wp-admin/?move-data-companies=1' );

$posts = estar_child_admin_records_get_companies( $paged );

if ( empty( $posts ) ) {

die( 'Done' );

}

foreach ( $posts as $post ) {

estar_child_move_data_company( $post );

}

echo "

&amp;lt;script&amp;gt;

setTimeout( () =&amp;gt; {

window.location.href = '$url';

}, 3000 );

&amp;lt;/script&amp;gt;

";

die;

}

add_action( 'admin_init', 'estar_child_data_company' );&lt;/pre&gt;

&lt;p&gt;In this code:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;
&lt;code&gt;estar&lt;/code&gt; is the prefix name of the theme I'm using (eStar). You can download this free theme &lt;a href="https://gretathemes.com/wordpress-themes/estar/" rel="follow"&gt;here&lt;/a&gt;;&lt;/li&gt;

&lt;li&gt;
&lt;code&gt;http://yourwebsite/wp-admin/?move-data-companies=1&lt;/code&gt;: replace it with your own website URL;&lt;/li&gt;

&lt;li&gt;We will run the script when the URL has the &lt;code&gt;move-data-companies=1&lt;/code&gt; parameter. It means when you click the URL &lt;em&gt;http://yourwebsite.com/wp-admin/?move-data-companies=1&lt;/em&gt;, it will automatically move the data.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;After that, we need to write these 2 functions:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;
&lt;code&gt;star_child_admin_records_get_companies()&lt;/code&gt;: to take the list of posts&lt;/li&gt;

&lt;li&gt;
&lt;code&gt;estar_child_move_data_company()&lt;/code&gt;: to move data for each post&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Now, put this code to your &lt;code&gt;functions.php&lt;/code&gt; file:&lt;/p&gt;

&lt;pre class="wp-block-preformatted"&gt;function estar_child_admin_records_get_companies( $paged = 1 ) {

$args = [

'post_type'      =&amp;gt; 'companies',

'posts_per_page' =&amp;gt; 100,

'paged'          =&amp;gt; $paged,

'fields'         =&amp;gt; 'ids',

'orderby'        =&amp;gt; 'ID',

];

$query = new WP_Query( $args );

return $query-&amp;gt;posts;

}

function estar_child_move_data_company( $post_id ) {

global $wpdb;

echo 'Migrating company ', $post_id, '&amp;lt;br&amp;gt;';

$data = [];

$data['ID'] = $post_id;

$data['company_name'] = get_post_meta( $post_id, 'company_name', true );

$data['address'] = get_post_meta( $post_id, 'address', true );

$data['start_day'] = get_post_meta( $post_id, 'start_day', true );

$data = array_filter( $data ); 

if ( $data ) {

$wpdb-&amp;gt;insert( 'wp_custom_company', $data );

}

$meta_key_array = [

'company_name',

'address',

'start_day',

];

$meta_key = "'" . implode( "','", $meta_key_array ) . "'";

$wpdb-&amp;gt;query( $wpdb-&amp;gt;prepare( "

DELETE FROM wpqq_postmeta

WHERE post_id = %d AND meta_key IN ( $meta_key )",

$post_id

) );

}&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;

&lt;tbody&gt;

&lt;tr&gt;

&lt;td&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/td&gt;

&lt;td&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;'company_name', 'address', 'start_day'&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The ID of 3 custom fields in the &lt;strong&gt;Companies&lt;/strong&gt; post type&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;$wpdb-&amp;gt;insert( 'wp_custom_company', $data ) &lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The function to insert data to the &lt;code&gt;wp_custom_company&lt;/code&gt; table we created in the step 1&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;$wpdb-&amp;gt;query( $wpdb-&amp;gt;prepare( "DELETE FROM wpqq_postmetaWHERE post_id = %d AND meta_key IN ( $meta_key )",$post_id&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;This code is to delete the old data in the &lt;code&gt;wp_postmeta&lt;/code&gt; table&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;'Companies'&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The slug of the post type&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;&lt;code&gt;'posts_per_page' =&amp;gt; 100&lt;/code&gt;&lt;/td&gt;

&lt;td&gt;The number of the posts that is handled when we run the script. To run the script at best, we should handle only 100 posts each time. After each time, the script will be automatically refreshed and handle the next 100 posts.&lt;/td&gt;

&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;After adding code, you can go to this URL: &lt;em&gt;http://yourwebsite/wp-admin/?move-data-companies=1&lt;/em&gt; to enable moving the custom fields' data to the custom table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh6lO7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M0JQhXM.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh6lO7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/M0JQhXM.png" alt="Enable moving the custom fields' data to the custom table with Meta Box plugin." width="856" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running the script, I go to the &lt;code&gt;wp_custom_company&lt;/code&gt; custom table to check. And here is the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hP9XUJAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JkBQPEK.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hP9XUJAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JkBQPEK.png" alt="The old data of custom fields is on the new custom table" width="1074" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the custom fields' data of the &lt;strong&gt;Companies&lt;/strong&gt; post type is now moved to the &lt;code&gt;wp_custom_company&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb08iLN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tRqgKhA.png" class="article-body-image-wrapper"&gt;&lt;img class="aligncenter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yb08iLN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tRqgKhA.png" alt="The custom fields' data of the Companies post type is moved to the custom table." width="723" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also is deleted from the &lt;code&gt;wp_postmeta&lt;/code&gt; table at the same time.&lt;/p&gt;

&lt;p&gt;Ok, we've done it!&lt;/p&gt;

&lt;h2&gt;Video Tutorial&lt;/h2&gt;

&lt;p&gt;This video tutorial will help you move custom fields' data to custom tables more easily. And don't forget to like and subscribe to our channel to have more video.&lt;/p&gt;

&lt;p&gt;https://youtu.be/JaEvtYa4Hcg&lt;/p&gt;

&lt;h2&gt;Final Words&lt;/h2&gt;

&lt;p&gt;This work means a lot if you have a website with lots of data inputted into the fields. So, take advantage of this special feature from Meta Box now to make your site faster and more performative.&lt;/p&gt;

&lt;p&gt;As I said at the beginning, you may think that following my method (move the data of the custom fields of each post type at one time) may take a bit more than moving custom fields' data for all post types at once. However, we highly recommend it because that will be more beneficial in the long run and help you manage your data more easily.&lt;/p&gt;

&lt;p&gt;Good luck and have a "field" day!&lt;/p&gt;

</description>
      <category>wordpress</category>
    </item>
    <item>
      <title>XPATH for Scraping</title>
      <author>Halcolo</author>
      <pubDate>Wed, 07 Apr 2021 01:49:02 +0000</pubDate>
      <link>https://dev.to/halcolo/xpath-for-scraping-1h5g</link>
      <guid>https://dev.to/halcolo/xpath-for-scraping-1h5g</guid>
      <description>&lt;p&gt;Xpath use path syntax to search parts of a XML document but as well allows you to find data identifying matches in an HTML file, if I compares with something similar are regular expressions but in trees later you will understand, in this case we will learn how to search data in a Webpage or scrap any web page with this syntax from scratch.&lt;/p&gt;

&lt;p&gt;Before starts, is important you learn something about web scraping, you can't scrap all web pages because all web pages have a rules (Legal reules for bots), almost all web pages need be scraped, as you imagine Google is a king of scraping, web scrapin is only one of the tools they use in their big algorithm. &lt;/p&gt;

&lt;p&gt;Now ¿How can I recognice which rules have a webpages?&lt;br&gt;
All web pages need to have a &lt;code&gt;robots.txt&lt;/code&gt; file in their root directory, if you don't believe me try search after any URL the &lt;code&gt;robots.txt&lt;/code&gt;, some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/robots.txt"&gt;https://www.google.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/robots.txt"&gt;https://unsplash.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/robots.txt"&gt;https://stackoverflow.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/robots.txt"&gt;https://www.facebook.com/robots.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically the &lt;code&gt;robots.txt&lt;/code&gt; provides some rules to any bot which parts of your page are accesible and which will be disabled.&lt;/p&gt;

&lt;p&gt;If you want learn more about how can you create a robots.txt you can see it in this &lt;a href="https://developers.google.com/search/docs/advanced/robots/create-robots-txt?hl=fr"&gt;Google tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#note" class="anchor"&gt;
  &lt;/a&gt;
  NOTE
&lt;/h2&gt;

&lt;p&gt;This tutorial search teach you or gives you a simple guide of basic web scraping with a global syntax no matter if you codes in python, javascript or any programing language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-lets-start" class="anchor"&gt;
  &lt;/a&gt;
  Now, let's start!
&lt;/h2&gt;

&lt;p&gt;In your browser is possible use Xpath inside the console using this expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This expression allows you to start Xpath and start a HTML tree search, in this case we will be do inside the Web page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quotes.toscrape.com/"&gt;Quotes to scrape Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is possible to see the tree structure of this page by viewing its HTML source code in the &lt;code&gt;F12&lt;/code&gt; browser console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJqZ0mJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paur86e0b97c1qmkcpz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJqZ0mJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/paur86e0b97c1qmkcpz0.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;With the following it will return the information of the div with &lt;code&gt;class = "container"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Calling the tree in this way will be limited to bringing the information it finds and if we want to reach the branch that is &lt;code&gt;class =" quote "&lt;/code&gt; we could arrive in this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/div/div/div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it will be unreliable and on many occasions it is very difficult to reach some of the children of the trees.&lt;/p&gt;

&lt;p&gt;It is for this reason that we will begin to create filters to make sure what we are looking for what we want, we will start filtering by classes.&lt;/p&gt;

&lt;p&gt;It is possible to filter the classes of each of the HTML tags that exist in the web page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//div[class = "container"]'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you compare the expression with the previous ones you will notice that it has many changes, initially &lt;code&gt;//&lt;/code&gt; that allows us skip all elements to be able to reach a specific tag in HTML in this case a &lt;code&gt;div&lt;/code&gt; later with the squares brackets &lt;code&gt;[]&lt;/code&gt; we can select a property of the tag either a class, an id, a src or any other by referencing it with an &lt;code&gt;@&lt;/code&gt; e.g. &lt;code&gt;[@class]&lt;/code&gt;, &lt;code&gt;[@href]&lt;/code&gt;, &lt;code&gt;[@id]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//div[@class="quote"]'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the previous script we can identify that we arrive in a few words at the div tags with class quote, now we reduce it to a few words but we can be even more specific.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//div[@class="quote"]/..'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The previous expression allows to bring the parent of a tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/self::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;x &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/.'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two expressions allow to bring the current node, the &lt;code&gt;.&lt;/code&gt; is only syntactic sugar or a way to simplify the &lt;code&gt;self::&amp;lt;tag&amp;gt;&lt;/code&gt; this expresion refers to the axes later i will talk about it &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wildcards" class="anchor"&gt;
  &lt;/a&gt;
  Wildcards
&lt;/h2&gt;

&lt;p&gt;There are some wildcards that we can use to indicate that we want any object in which we know its position but we do not know.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With an asterisk (*) we can bring nodes of which we know their name but their position, in this case we will bring the HTML tag but without their nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the double slash as in the previous example, we are going to tell Xpath that we want all the nodes and it will bring us an array with the requested nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//span[@class="text"]/@*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example it is possible to see something new at the end of the line, the first thing is that it is possible to call attributes outside the '[]' and with * you can bring all the attributes that have the text class spans.&lt;/p&gt;

&lt;p&gt;Other examples can be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body//div/@*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us now compare the following expressions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//span[@class="text"and@itemprop="text"] / node ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//span[@class="text" and @itemprop="text"]/*'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; is not going to help us if the node we are consulting does not have child nodes, however the expression &lt;code&gt;node ()&lt;/code&gt; identifies not only the child nodes that the queried node has but also everything that is not nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and starts-with(., "A")] / text()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.map&lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and contains(., "Ro")]/text ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.map&lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# The ends-with and matches expression only works with Xpath versions 2.0 of XPATH,&lt;/span&gt;
&lt;span class="c"&gt;# current browsers only support up to version 1.1&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and ends-with(., "t")]/text ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.map&lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'//small[@class="author" and matches(., "A.*n")] / text ()'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; map &lt;span class="o"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; x.wholeText&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#axes" class="anchor"&gt;
  &lt;/a&gt;
  AXES
&lt;/h2&gt;

&lt;p&gt;The axes allow the nodes to be obtained in all directions, from the child that has this node, the ansesters that follow, even bringing both the ansesters as the node itself and the parents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/self::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/child::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/descendant::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/html/body/div/descendant-or-self::div'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#challenge" class="anchor"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;From the WebPage &lt;a href="http://books.toscrape.com/"&gt;http://books.toscrape.com/&lt;/a&gt; obtain the titles and preciousness of each book, and within one of the books obtain the categories and their descriptions and if it is in stock, in the next chapter we will obtain the information with a script of all these books with Python. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-links" class="anchor"&gt;
  &lt;/a&gt;
  Other links.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://devhints.io/xpath"&gt;https://devhints.io/xpath&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Rust no_std template</title>
      <author>ender minyard</author>
      <pubDate>Wed, 07 Apr 2021 01:48:41 +0000</pubDate>
      <link>https://dev.to/ender_minyard/rust-nostd-template-23j0</link>
      <guid>https://dev.to/ender_minyard/rust-nostd-template-23j0</guid>
      <description>&lt;p&gt;There are &lt;a href="https://fasterthanli.me/series/making-our-own-executable-packer/part-12"&gt;many&lt;/a&gt; &lt;a href="https://docs.rust-embedded.org/book/intro/no-std.html"&gt;in-depth&lt;/a&gt; &lt;a href="https://os.phil-opp.com/freestanding-rust-binary/"&gt;tutorials&lt;/a&gt; that explain how to write a &lt;code&gt;#![no_std]&lt;/code&gt; binary. This is just a simple, reusable bare-bones template that works for me.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;src/main.rs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#![no_std]&lt;/span&gt;
&lt;span class="nd"&gt;#![no_main]&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PanicInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[panic_handler]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PanicInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[no_mangle]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;"C"&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;profile.dev&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;panic = "abort"&lt;/span&gt;

&lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;profile.release&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;panic = "abort"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of simply running &lt;code&gt;cargo build&lt;/code&gt; to generate a binary like usual, you need to jump through some hoops to generate a binary.&lt;/p&gt;

&lt;p&gt;If you are compiling this binary for Linux, you can run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cargo rustc -- -C link-arg=-nostartfiles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For Windows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cargo rustc -- -C link-args="/ENTRY:_start /SUBSYSTEM:console"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For macOS: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cargo rustc -- -C link-args="-e __start -static -nostartfiles"&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;All of this is useful if you plan on running the resulting binary on bare metal. If you're compiling Rust to WebAssembly, none of this is &lt;em&gt;necessary&lt;/em&gt; - simply &lt;em&gt;not&lt;/em&gt; using the &lt;code&gt;std&lt;/code&gt; library is enough for that use case. &lt;/p&gt;

&lt;p&gt;If you're targeting the &lt;a href="https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-documents.md"&gt;WebAssembly System Interface&lt;/a&gt;, it's more simple and you can even use Rust's &lt;code&gt;std&lt;/code&gt; library for that use case.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>tutorial</category>
      <category>os</category>
      <category>embedded</category>
    </item>
    <item>
      <title>Confusing JS Explained</title>
      <author>ahmedgaafer</author>
      <pubDate>Wed, 07 Apr 2021 01:29:21 +0000</pubDate>
      <link>https://dev.to/ahmedgaafer/confusing-js-explained-ng9</link>
      <guid>https://dev.to/ahmedgaafer/confusing-js-explained-ng9</guid>
      <description>&lt;p&gt;JavaScript, often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. JavaScript is high-level, often just-in-time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object orientation, and first-class functions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-confusing-parts" class="anchor"&gt;
  &lt;/a&gt;
  Some confusing parts
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(([]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;{})[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// outputs  OMG&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But how is this happening&lt;/p&gt;

&lt;p&gt;We will go into a little depth on how JS interprets stuff&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am using chrome console to test all of this&lt;/p&gt;


&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-explain-how-the-line-above-first" class="anchor"&gt;
  &lt;/a&gt;
  Let's Explain how the line above first
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the '+' sign converts the parameters to strings by using the 'toPrimitive' method&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;so, toString([]) returns an empty string ''&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and toString({}) returns to this '[object Object]'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;then the result is '' + '[object Object]' = '[object Object]'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the rest is simple, I am picking the character at index 1 'o' and just adding the 'mg' and converting all to upper case&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drum roll ........&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get "OMG"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#toprimitive" class="anchor"&gt;
  &lt;/a&gt;
  ToPrimitive:
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;ToPrimitive(input, PreferredType?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The optional parameter PreferredType is either Number or String. It only expresses a preference, the result can always be any primitive value. If PreferredType is Number, the following steps are performed to convert a value input (§9.1):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the input is primitive, return it as is.&lt;/li&gt;
&lt;li&gt;Otherwise, input is an object. Call obj.valueOf(). If the result is primitive, return it.&lt;/li&gt;
&lt;li&gt;Otherwise, call obj.toString(). If the result is primitive, return it.&lt;/li&gt;
&lt;li&gt;Otherwise, throw a TypeError.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If PreferredType is String, steps 2 and 3 are swapped. If PreferredType is missing then it is set to Number for any numeric values and to string for all other values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="c1"&gt;//    2    &amp;lt;= Number&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;//   '21'  &amp;lt;= String&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;//    '2'  &amp;lt;= String&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some unique examples that behave differently&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;// 1 &amp;lt;= Number&lt;/span&gt;

&lt;span class="c1"&gt;// JS treats the '{}' in this case as its own line &lt;/span&gt;

&lt;span class="p"&gt;({});&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="p"&gt;({})&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[object Object]1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can apply this principle to any addition in JS and always know the answer without being confused&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  references:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://javascript.info/object-toprimitive"&gt;JSInfo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive"&gt;MDN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>7 new features, 51.3 new bugs added 😋, the DEV.TO 👩‍💻👨‍💻 editor [PART DEUX!]</title>
      <author>InHuOfficial</author>
      <pubDate>Wed, 07 Apr 2021 00:48:53 +0000</pubDate>
      <link>https://dev.to/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp</link>
      <guid>https://dev.to/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp</guid>
      <description>&lt;p&gt;Welcome to the dev.to editor version 0.02! My attempt at creating an editor for dev.to to make writing articles easier!&lt;/p&gt;

&lt;p&gt;If you didn't read my first post on this then take a couple of minutes to go play with that&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/wysiwyg-for-dev-to-jfp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Write faster in the dev.to editor - adding a WYSIWYG and keyboard shortcuts! [hack 2]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Mar 29 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;All caught up? Great, let's see what improvements have been made!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#just-let-me-play-with-it-i-dont-want-to-read" class="anchor"&gt;
  &lt;/a&gt;
  Just let me play with it, I don't want to read!
&lt;/h2&gt;

&lt;p&gt;Feeling impatient? I have a quick link to &lt;a href="#demo"&gt;jump to the instructions for how to try it yourself&lt;/a&gt; just for you!&lt;/p&gt;

&lt;p&gt;However if you do &lt;strong&gt;stick around&lt;/strong&gt; I do have a load of pretty GIFs showing off some of the features!&lt;/p&gt;




&lt;p&gt;Anyway, I bet you are wondering, what has changed in version 0.02?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-interface-got-a-facelift" class="anchor"&gt;
  &lt;/a&gt;
  The interface got a facelift!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo0xcmbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pm4b3vx4nf71j2t9xus.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo0xcmbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pm4b3vx4nf71j2t9xus.jpg" alt="Custom iconset designed in illustrator for dev.to"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I designed a set of custom icons just for dev.to.&lt;/p&gt;

&lt;p&gt;They are rough around the edges but overall I think the general aesthetic is pretty close to that of dev.to.&lt;/p&gt;

&lt;p&gt;With regards to the modals and other interface items...they aren't styled yet! This is a long way from a polished product but hopefully you can see where this is going!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-complete-code-redesign" class="anchor"&gt;
  &lt;/a&gt;
  A complete code redesign
&lt;/h2&gt;

&lt;p&gt;The original editor used a "wrap" function to wrap selected text in markdown.&lt;/p&gt;

&lt;p&gt;Now this was fine for basic stuff like bold text &lt;code&gt;**bold**&lt;/code&gt; but for more complex things it started getting a bit "janky" (yes, that is a technical term!)&lt;/p&gt;

&lt;p&gt;So instead we now have a template based system with regions that can be replaced with user content.&lt;/p&gt;

&lt;p&gt;Still a long way to go in tidying the code up but adding new markdown features is easy now.&lt;/p&gt;

&lt;p&gt;The other thing that was (and still is to some extent) an issue was the way that changes were applied. There is no choice but to update the whole &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; which means a lot of focus management. However I have improved the way items are handled and introduced a "undo" feature, just in case things go very wrong!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-features" class="anchor"&gt;
  &lt;/a&gt;
  New features
&lt;/h3&gt;

&lt;p&gt;Oh there are loads of things:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#headings-26" class="anchor"&gt;
  &lt;/a&gt;
  headings 2-6
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I071cczv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l833tiz7ue7r4e5v32p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I071cczv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l833tiz7ue7r4e5v32p.gif" alt="adding headings demonstration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The issue I had previously was that headings were assigned to the numbers 2-4 and I couldn't add level 5 and 6 as I used those numbers for other features.&lt;/p&gt;

&lt;p&gt;I now have a system where instead of Ctrl + {number}, you now press Ctrl + H and then immediately after the heading number you want. &lt;/p&gt;

&lt;p&gt;This has freed up all of the number keys for other uses (still working on the keyboard shortcuts!&lt;/p&gt;

&lt;p&gt;Why no heading level 1 I hear you ask? Accessibility. &lt;/p&gt;

&lt;p&gt;Despite being allowed under HTML standards and WCAG multiple &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;s are not ideal for screen reader users as it is not expected behaviour. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#further-text-decoration" class="anchor"&gt;
  &lt;/a&gt;
  Further text decoration!
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" alt="formatting text bold, italic, underlined and with a strikethrough demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had &lt;strong&gt;bold&lt;/strong&gt; and &lt;em&gt;italic&lt;/em&gt; text all worked out, but now I have added  &lt;del&gt;strikethrough&lt;/del&gt; and &lt;u&gt;underline&lt;/u&gt; to make life even easier!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ordered-and-unordered-lists" class="anchor"&gt;
  &lt;/a&gt;
  ordered and unordered lists
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyNEC4oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bc43ox4nhpm7zvogh25.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyNEC4oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bc43ox4nhpm7zvogh25.gif" alt="adding ordered lists demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding an ordered list is simple now with automatic numbering! &lt;/p&gt;

&lt;p&gt;It also removes white space between list items to keep everything clean!&lt;/p&gt;

&lt;p&gt;I also added unordered lists for ease.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tables" class="anchor"&gt;
  &lt;/a&gt;
  Tables!
&lt;/h4&gt;

&lt;p&gt;This one I am particularly proud of.&lt;/p&gt;

&lt;p&gt;Tables are annoying to create in Markdown. &lt;/p&gt;

&lt;p&gt;With the editor you simply click the tables button and a popup asks how many rows and columns you want and then inserts the table for you.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#updating-tables" class="anchor"&gt;
  &lt;/a&gt;
  Updating tables
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ObNIxJgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9durnha1hgd87aae97y0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObNIxJgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9durnha1hgd87aae97y0.gif" alt="adding a table and then adding 2 rows and then adding 2 columns using the editor demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even better, the editor lets you position your cursor within a table and then &lt;strong&gt;add rows&lt;/strong&gt; or even &lt;strong&gt;add columns&lt;/strong&gt; in a couple of clicks. As tables are unruly in Markdown this can really make a difference.&lt;/p&gt;

&lt;p&gt;I have a further improvement for tables coming in version 0.03 to make them even easier!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnotes" class="anchor"&gt;
  &lt;/a&gt;
  Footnotes
&lt;/h4&gt;

&lt;p&gt;Automatic footnotes in just one click&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#liquid-tags" class="anchor"&gt;
  &lt;/a&gt;
  Liquid Tags
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mog0kqZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i09es7ofx4e0wt8rbhvp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mog0kqZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i09es7ofx4e0wt8rbhvp.gif" alt="showing how to embed a tweet, a youtube video and a dev.to comment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The previous version handled a couple of liquid tags, such as jsFiddles and codepens.&lt;/p&gt;

&lt;p&gt;This version can handle:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://jsfiddle.net/"&gt;jsfiddles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/"&gt;codepens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://glitch.com/"&gt;glitch&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Dev.to links to other articles&lt;/li&gt;
&lt;li&gt;Dev.to links to user profiles&lt;/li&gt;
&lt;li&gt;Dev.to links to tags&lt;/li&gt;
&lt;li&gt;Dev.to links to comments&lt;/li&gt;
&lt;li&gt;Dev.to links to podcasts&lt;/li&gt;
&lt;li&gt;Dev.to spoiler / collapsible section blocks &lt;/li&gt;
&lt;li&gt;Tweet Embeds&lt;/li&gt;
&lt;li&gt;Github Repo cards&lt;/li&gt;
&lt;li&gt;Github issues, PR and comment cards&lt;/li&gt;
&lt;li&gt;Github Gists&lt;/li&gt;
&lt;li&gt;YouTube video insertion&lt;/li&gt;
&lt;li&gt;Twitch video insertion &lt;/li&gt;
&lt;li&gt;Vimeo Video insertion&lt;/li&gt;
&lt;li&gt;Medium article links &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are still about 15 more liquid tags to add in but that is a decent start!&lt;/p&gt;

&lt;p&gt;There is also some simple logic in place to select the correct parts from URLs that a liquid tag expects to see. (for example adding a card for a dev.to user only expects their username, the editor will strip that from a full URL for you)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#images" class="anchor"&gt;
  &lt;/a&gt;
  Images!!!!!!
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hq6xS3op--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxaaie03hlo4jvup21tl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hq6xS3op--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxaaie03hlo4jvup21tl.gif" alt="adding images with alt text prompts and image preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one was a fun one to implement. Instead of having to upload an image and then copy it where you want I built a whole interface for adding images.&lt;/p&gt;

&lt;p&gt;Also to try and persuade people to be more mindful of accessibility I added an image preview and &lt;code&gt;alt&lt;/code&gt; description screen where we prompt the user to enter a meaningful description of the image.&lt;/p&gt;

&lt;p&gt;And above all else....it actually just places the image directly in the Markdown at your current cursor position, no more fiddling with copying the URL!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-considerations" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility Considerations
&lt;/h2&gt;

&lt;p&gt;Now it still isn't fully accessible, but it is a lot better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preword on sticky keys....my key choice was dumb AF!&lt;/strong&gt; - the "\" key is obviously very useful when writing if you want to escape anything, I will be changing this to another key / key sequence so it doesn't make the editor unusable!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sticky-keys" class="anchor"&gt;
  &lt;/a&gt;
  sticky keys
&lt;/h3&gt;

&lt;p&gt;The main thing I have created is a one-handed operation mode with sticky keys.&lt;/p&gt;

&lt;p&gt;Pressing "\" on your keyboard puts sticky keys on temporarily (until an action is performed).&lt;/p&gt;

&lt;p&gt;This allows you to press "\" and then press "o" separately to add an ordered list item for example. At this point sticky keys switches itself off so you can write freely.&lt;/p&gt;

&lt;p&gt;However if you press "\" twice sticky keys is fixed on, meaning you could press o multiple times to set up an ordered list ready for populating.&lt;/p&gt;

&lt;p&gt;You can always switch it off again by pressing "\" one more time!&lt;/p&gt;

&lt;p&gt;One handed operation has a second benefit. When I get to the mobile version of the editor it becomes usable with shortcuts as we can set a sticky key instead of using Ctrl + {key} for shortcuts!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-else-are-you-going-to-do-for-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  What else are you going to do for accessibility?
&lt;/h3&gt;

&lt;p&gt;I also plan to allow toggling between different modes for the buttons for people who struggle with icon comprehension so that they use text instead.&lt;/p&gt;

&lt;p&gt;I am going to fix the tooltips so they show when buttons are focused.&lt;/p&gt;

&lt;p&gt;I am also going to make sure the editor buttons follow colour themes on the site as at the moment they only work on white theme!&lt;/p&gt;

&lt;p&gt;Finally as I said I am going to make a mobile version of it with some clever text selection features that should make it usable for people with dexterity / accuracy issues!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-it-looks-great-how-can-i-use-it" class="anchor"&gt;
  &lt;/a&gt;
  OK it looks great, how can I use it?
&lt;/h2&gt;

&lt;p&gt;At the moment the only way to use it is via a bookmarklet. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;drag the link in the fiddle to your bookmarks bar&lt;/li&gt;
&lt;li&gt;navigate to &lt;a href="https://dev.to/new"&gt;https://dev.to/new&lt;/a&gt; and click the bookmark you just added&lt;/li&gt;
&lt;li&gt;the editor will magically appear ready for you to experience all the bugs!&lt;/li&gt;
&lt;li&gt;Try out "Ctrl" + (B, I, E, L, Q, R, H (then 2-6), O and U) or click the buttons! Also with some features select text first (i.e. select some text, press "Ctrl" + "B" and it will be wrapped in &lt;code&gt;**&lt;/code&gt; to be bold...simples!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/or2pebka//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Alternatively create a new bookmark, click "more" and paste the following code into the "URL" field and save the bookmark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://inhu.co/dev_to/experiments/bookmarklet/bookmarklet-v2.js?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;();}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#i-found-a-bug" class="anchor"&gt;
  &lt;/a&gt;
  I found a bug
&lt;/h2&gt;

&lt;p&gt;I am &lt;strong&gt;really&lt;/strong&gt; not surprised, it is all held together with bubblegum and sticky tape at the moment.&lt;/p&gt;

&lt;p&gt;However I would really appreciate it if you could drop a comment letting me know what you found so I can see if I can fix it.&lt;/p&gt;

&lt;p&gt;p.s. Chrome bugs only at the moment please, I will fix "the Fox" etc. later once the Chrome version is stable.&lt;/p&gt;

&lt;p&gt;Bugs I am aware of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if you preview the page and then come back to the editor the editor is lost. &lt;/li&gt;
&lt;li&gt;If the editor is lost pressing the bookmark again causes a variety of bugs so you have to reload the page.&lt;/li&gt;
&lt;li&gt;tables can really go wrong if you accidentally select some text.&lt;/li&gt;
&lt;li&gt;editing items towards the top of the page cause the page to jump to the bottom due to replacing all the text.&lt;/li&gt;
&lt;li&gt;numerous "niggles" with strange positioning of focus indicator or weird behaviour with certain selections. Feel free to point out any you find just in case I missed some!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;I am working on fixes for all of them!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#are-you-going-to-make-this-a-plugin-extension" class="anchor"&gt;
  &lt;/a&gt;
  Are you going to make this a plugin / extension?
&lt;/h2&gt;

&lt;p&gt;I am indeed! As was suggested in the comments I am going to make it into a user script and then ultimately a chrome extension!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/afif"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0f-EwtOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--apy3IWsG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/afif"&gt;
        &lt;span class="comment-username"&gt;Temani Afif&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/afif/comment/1cp3h" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Mar 29
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;You can also consider creating a user script that can be used with tools like: &lt;a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=fr" rel="nofollow"&gt;chrome.google.com/webstore/detail/...&lt;/a&gt; .. it would be more convenient for many of us&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Either that or if enough of you "@" ben and jess they may decide to implement this themselves as part of dev.to (so it should be a lot less buggy! 🤣).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see it is a long way from finished but I am thoroughly enjoying the challenges this project is throwing at me.&lt;/p&gt;

&lt;p&gt;I mean, I wrote this whole article using the editor and it was....well let's just say it was easier than remembering all the liquid tags but still not ideal with the preview bit breaking things 🤣.&lt;/p&gt;

&lt;p&gt;It will probably be at least a month before I have something that is fully usable but I will keep putting updates up as I make improvements.&lt;/p&gt;

&lt;p&gt;If you have made it this far then you deserve to know the next thing I am working on.....a live preview pane to the right that is synced to the editor pane (which will move over to the left). That is also a way to solve the "preview problem" in the short term 😋.&lt;/p&gt;

&lt;p&gt;Follow me if not having to switch backwards and forwards between panels excites you as much as it excites me! &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;See, what did I tell you, a footnote! &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I Built a Developer Productivity Tool!</title>
      <author>Tyrel Chambers</author>
      <pubDate>Wed, 07 Apr 2021 00:28:04 +0000</pubDate>
      <link>https://dev.to/imtyrelchambers/i-built-a-developer-productivity-tool-3m24</link>
      <guid>https://dev.to/imtyrelchambers/i-built-a-developer-productivity-tool-3m24</guid>
      <description>&lt;p&gt;Hey everyone!&lt;/p&gt;

&lt;p&gt;After many failed interviews absolutely nuked my self-confidence and love for programming, I decided I didn't really like the idea of working for someone else on their product. It's not that I never would, but I instead decided to focus on making my own ideas. &lt;/p&gt;

&lt;p&gt;For the past handful of months I've been working on this little thing called &lt;a href="https://kanlen.ca"&gt;Kanlen&lt;/a&gt;. I'm still figuring out exactly what "it is".&lt;/p&gt;

&lt;p&gt;I'm not a fan of wasting too much time on repetitive tasks even though I repeat myself often, but, here we are.&lt;/p&gt;

&lt;p&gt;I had an idea one day. What if there was a way, to build our your CLI command using a GUI of sorts? That would take the guesswork out of figuring out the correct syntax for the CLIs you use. For me, it's a lot of CRA.&lt;/p&gt;

&lt;p&gt;It might also be nice to know what flags I have available to use in this command. I sure can't remember all that.&lt;/p&gt;

&lt;p&gt;I'm going to briefly explain what Kanlen does and maybe from that, an idea of the app will form, but for now let's think of it like a developer's productivity tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-it-do" class="anchor"&gt;
  &lt;/a&gt;
  What does it do?
&lt;/h2&gt;

&lt;p&gt;Well, we already spoke about the whole CLI thing, so on we go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  Save Environment Variables
&lt;/h3&gt;

&lt;p&gt;If you're like me, sometimes you get a new development computer and forget to jot down the environment variables you're using. That happened to me while building Reddex. Losing those variables was super annoying.&lt;/p&gt;

&lt;p&gt;I thought it might be cool if you could store them somewhere online. Then if you switch machines, it crashes, or spontaneously combusts, you'll have a backup of those variables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-your-code-like-gists" class="anchor"&gt;
  &lt;/a&gt;
  Save your code like Gists
&lt;/h3&gt;

&lt;p&gt;Perhaps the bread and butter of Kanlen, well, at least the main idea of it since the beginning, was being able to save your favourite functions.&lt;/p&gt;

&lt;p&gt;I have a few pieces of code that I like to bring between projects and if I could save them in a spot that's easily accessible, obviously that would be pretty alright.&lt;/p&gt;

&lt;p&gt;These pieces of code are sharable and if you download the Kanlen VSCode extension, you can import your saved snippets right into your editor. On the flip-side, if you want to create a snippet, you can do that by selecting a block of code and running a specific command. It's pretty neat in my humble opinion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-on" class="anchor"&gt;
  &lt;/a&gt;
  Moving on
&lt;/h2&gt;

&lt;p&gt;Those are a couple things it does, it you're interested in reading more about it, check out the main page &lt;a href="https://kanlen.ca"&gt;Kanlen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is just a little side project I've been playing with since late 2020. It's still in development, but I love where it's going and maybe it'll help you too someday.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>sideprojects</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Follow me on my journey as I complete 100 UI/UX design challenges in 100 days!</title>
      <author>Matthew Marquise</author>
      <pubDate>Wed, 07 Apr 2021 00:01:45 +0000</pubDate>
      <link>https://dev.to/mattmarquise/follow-me-on-my-journey-as-i-complete-100-ui-ux-design-challenges-in-100-days-jgb</link>
      <guid>https://dev.to/mattmarquise/follow-me-on-my-journey-as-i-complete-100-ui-ux-design-challenges-in-100-days-jgb</guid>
      <description>&lt;p&gt;Today I started the very first day of Daily UI's 100 day UI &amp;amp; UX design challenge! Every day, except on weekends, for the next 100 days I'll be completing each daily project. Depending on the complexity of each project I will likely try and do multiple different takes on each days challenge. Follow me on DEV, Medium, Bēhance, Dribbble, and check out my personal website for updates as I achieve each day's challenges!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>📬 Asynq: simple, reliable &amp; efficient distributed task queue for your next Go project</title>
      <author>Vic Shóstak</author>
      <pubDate>Tue, 06 Apr 2021 23:53:12 +0000</pubDate>
      <link>https://dev.to/koddr/asynq-simple-reliable-efficient-distributed-task-queue-for-your-next-go-project-4jhg</link>
      <guid>https://dev.to/koddr/asynq-simple-reliable-efficient-distributed-task-queue-for-your-next-go-project-4jhg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi, DEV friends! 😉 It's time to share a great find that you must try in your next project. I'm talking about simple, reliable and efficient distributed task queue written on Go and called &lt;a href="https://github.com/hibiken/asynq"&gt;Asynq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I already have experience using Asynq in production on one of my work projects (&lt;em&gt;microservice for sending scheduled messages to subscribers of Telegram bot&lt;/em&gt;). After using it successfully, I wanted to tell you more about it so you can appreciate it too!&lt;/p&gt;

&lt;p&gt;All right, let's get started! 👇&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-asynq"&gt;What is Asynq?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-project-we-will-create"&gt;The project we will create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-code-of-this-project"&gt;Full code of this project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#lets-write-some-code"&gt;Let's write some code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-tasks-payloads"&gt;Creating tasks payloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-tasks-handlers"&gt;Creating tasks handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-asynq-worker-server"&gt;Creating Asynq worker server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-asynq-client"&gt;Creating Asynq client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#asynq-web-ui"&gt;Asynq web UI&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#list-of-servers-and-workers"&gt;List of servers and workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redis-server-information"&gt;Redis server information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adaptive-dark-theme"&gt;Adaptive dark theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#asynq-cli"&gt;Asynq CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-asynq" class="anchor"&gt;
  &lt;/a&gt;
  What is Asynq?
&lt;/h2&gt;

&lt;p&gt;Follow official &lt;a href="https://github.com/hibiken/asynq"&gt;Asynq&lt;/a&gt; GitHub page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Asynq is a Go library for queueing tasks and processing them asynchronously with workers. It's backed by Redis and is designed to be scalable yet easy to get started. [...] Task queues are used as a mechanism to distribute work across multiple machines. A system can consist of multiple worker servers and brokers, giving way to high availability and horizontal scaling.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asynq is developed and maintained by &lt;a href="https://github.com/hibiken"&gt;Ken Hibino&lt;/a&gt;, who works as a software engineer at Google. So you can be sure of the quality of the code.&lt;/p&gt;

&lt;p&gt;Most awesome queueing tasks features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guaranteed at least one execution of a task&lt;/li&gt;
&lt;li&gt;Scheduling of tasks&lt;/li&gt;
&lt;li&gt;Durability since tasks are written to Redis&lt;/li&gt;
&lt;li&gt;Retries of failed tasks&lt;/li&gt;
&lt;li&gt;Automatic recovery of tasks in the event of a worker crash&lt;/li&gt;
&lt;li&gt;Weighted priority queues&lt;/li&gt;
&lt;li&gt;Strict priority queues&lt;/li&gt;
&lt;li&gt;Low latency to add a task since writes are fast in Redis&lt;/li&gt;
&lt;li&gt;De-duplication of tasks using unique option&lt;/li&gt;
&lt;li&gt;Allow timeout and deadline per task&lt;/li&gt;
&lt;li&gt;Flexible handler interface with support for middlewares&lt;/li&gt;
&lt;li&gt;Ability to pause queue to stop processing tasks from the queue&lt;/li&gt;
&lt;li&gt;Periodic Tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in scaling tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support Redis Cluster for automatic sharding and high availability&lt;/li&gt;
&lt;li&gt;Support Redis Sentinels for high availability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, of course, useful tools for admins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web UI to inspect and remote-control queues and tasks&lt;/li&gt;
&lt;li&gt;CLI to inspect and remote-control queues and tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;👍 At this moment, I'm working on creating an official logo for Asynq. &lt;em&gt;If you have an idea, you're welcome to &lt;a href="https://github.com/hibiken/asynq/issues/260"&gt;discussion&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project-we-will-create" class="anchor"&gt;
  &lt;/a&gt;
  The project we will create
&lt;/h2&gt;

&lt;p&gt;I would like to show with a simple example how you can easily work with Asynq in your Golang project. Suppose we have the task of sending a welcome email as soon as the user registers and, after a while, sending another reminder email to the user about something.&lt;/p&gt;

&lt;p&gt;Here are the points we will stick to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Three queues for tasks with different priorities;&lt;/li&gt;
&lt;li&gt;Generating multiple tasks of different types at once and for different queues on the client;&lt;/li&gt;
&lt;li&gt;Separation into task handlers and payloads;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code-of-this-project" class="anchor"&gt;
  &lt;/a&gt;
  Full code of this project
&lt;/h2&gt;

&lt;p&gt;For clarity, you can download the full example and run it on your machine. Especially for you, I put it on GitHub:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/koddr"&gt;
        koddr
      &lt;/a&gt; / &lt;a href="https://github.com/koddr/tutorial-go-asynq"&gt;
        tutorial-go-asynq
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📖 Tutorial: Asynq. Simple, reliable &amp;amp; efficient distributed task queue for your next Go project
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-some-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's write some code
&lt;/h2&gt;

&lt;p&gt;Okay! We'll move on to the most interesting part, the writing of the code. I have supplied the code examples with detailed comments, so I won't dwell on them too much in the text of the article. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🔥 Please look at the code!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-tasks-payloads" class="anchor"&gt;
  &lt;/a&gt;
  Creating tasks payloads
&lt;/h3&gt;

&lt;p&gt;Let's define the payloads of our tasks. Let's create two types to send a message to Email: a welcome message (&lt;em&gt;comes right away&lt;/em&gt;) and a reminder message (&lt;em&gt;comes after a while&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./tasks/payloads.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;// TypeWelcomeEmail is a name of the task type&lt;/span&gt;
    &lt;span class="c"&gt;// for sending a welcome email.&lt;/span&gt;
    &lt;span class="n"&gt;TypeWelcomeEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email:welcome"&lt;/span&gt;

    &lt;span class="c"&gt;// TypeReminderEmail is a name of the task type&lt;/span&gt;
    &lt;span class="c"&gt;// for sending a reminder email.&lt;/span&gt;
    &lt;span class="n"&gt;TypeReminderEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email:reminder"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// NewWelcomeEmailTask task payload for a new welcome email.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Specify task payload.&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;
        &lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// set user ID&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Return a new task with given type and payload.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeWelcomeEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// NewReminderEmailTask task payload for a reminder email.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Specify task payload.&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;
        &lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c"&gt;// set user ID&lt;/span&gt;
        &lt;span class="s"&gt;"sent_in"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c"&gt;// set time to sending&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Return a new task with given type and payload.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeReminderEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-tasks-handlers" class="anchor"&gt;
  &lt;/a&gt;
  Creating tasks handlers
&lt;/h3&gt;

&lt;p&gt;Task handlers are our business logic, which is responsible for the specific behavior of tasks when triggered. To keep it simple, I will display a normal message in the console of the Asynq worker server.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./tasks/handlers.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// HandleWelcomeEmailTask handler for welcome email task.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HandleWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Get user ID from given task.&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Dummy message to the worker's output.&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Send Welcome Email to User ID %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// HandleReminderEmailTask for reminder email task.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HandleReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Get int with the user ID from the given task.&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Get string with the sent time from the given task.&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sent_in"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Dummy message to the worker's output.&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Send Reminder Email to User ID %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Reason: time is up (%v)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-asynq-worker-server" class="anchor"&gt;
  &lt;/a&gt;
  Creating Asynq worker server
&lt;/h3&gt;

&lt;p&gt;The central part of our project. It is this component that will be responsible for the logic of sending messages and queuing them (if we need it).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./worker/server.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="s"&gt;"tutorial-go-asynq/tasks"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create and configuring Redis connection.&lt;/span&gt;
    &lt;span class="n"&gt;redisConnection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedisClientOpt&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"localhost:6379"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// Redis server address&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Create and configuring Asynq worker server.&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redisConnection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Specify how many concurrent workers to use.&lt;/span&gt;
        &lt;span class="n"&gt;Concurrency&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;// Specify multiple queues with different priority.&lt;/span&gt;
        &lt;span class="n"&gt;Queues&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"critical"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// processed 60% of the time&lt;/span&gt;
            &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// processed 30% of the time&lt;/span&gt;
            &lt;span class="s"&gt;"low"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// processed 10% of the time&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new task's mux instance.&lt;/span&gt;
    &lt;span class="n"&gt;mux&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServeMux&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Define a task handler for the welcome email task.&lt;/span&gt;
    &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeWelcomeEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c"&gt;// task type&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// handler function&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Define a task handler for the reminder email task.&lt;/span&gt;
    &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeReminderEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c"&gt;// task type&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// handler function&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Run worker server.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And my favorite part of Asynq. If your application is going to grow, you will definitely want to make a more scalable system and Asynq can help you with that perfectly, because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can create a personal Asynq worker server for each queue;&lt;/li&gt;
&lt;li&gt;Each Asynq worker server can be configured with any number of concurrent active workers to use;&lt;/li&gt;
&lt;li&gt;Next, you can use a simple Docker Compose &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#deploy"&gt;solution&lt;/a&gt; to automatically start the right amount of each Asynq worker server replicas, when needed;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if that's not enough anyway, you can easily start a &lt;a href="https://redis.io/topics/cluster-tutorial"&gt;Redis Cluster&lt;/a&gt; using Asynq built-in adapter... literally in a couple of minutes!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ I won't describe the configuration process, since the Wiki page of the project has &lt;a href="https://github.com/hibiken/asynq/wiki/Redis-Cluster"&gt;detailed instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-asynq-client" class="anchor"&gt;
  &lt;/a&gt;
  Creating Asynq client
&lt;/h3&gt;

&lt;p&gt;The client part can be anything, really. The main thing is that it can create new tasks and send them to the queue:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./client/main.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"tutorial-go-asynq/tasks"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a new Redis connection for the client.&lt;/span&gt;
    &lt;span class="n"&gt;redisConnection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedisClientOpt&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"localhost:6379"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// Redis server address&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new Asynq client.&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redisConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Infinite loop to create tasks as Asynq client.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Generate a random user ID.&lt;/span&gt;
        &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

        &lt;span class="c"&gt;// Set a delay duration to 2 minutes.&lt;/span&gt;
        &lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minute&lt;/span&gt;

        &lt;span class="c"&gt;// Define tasks.&lt;/span&gt;
        &lt;span class="n"&gt;task1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;task2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c"&gt;// Process the task immediately in critical queue.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c"&gt;// task payload&lt;/span&gt;
            &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"critical"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// set queue for task&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Process the task 2 minutes later in low queue.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c"&gt;// task payload&lt;/span&gt;
            &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"low"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     &lt;span class="c"&gt;// set queue for task&lt;/span&gt;
            &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProcessIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// set time to process task&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#asynq-web-ui" class="anchor"&gt;
  &lt;/a&gt;
  Asynq web UI
&lt;/h2&gt;

&lt;p&gt;Unfortunately, at the moment, the Asyncq web UI installation is only available by copying the repository and building from source or by creating a Docker image. In the meantime, to install, you need to make a clone of this repository and follow the instructions in the README:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hibiken"&gt;
        hibiken
      &lt;/a&gt; / &lt;a href="https://github.com/hibiken/asynqmon"&gt;
        asynqmon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Real-time monitor and web admin for Asynq distributed task queue
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;👋 Author of Asyncq and myself are already working on simplifying this process for a future version (hopefully &lt;code&gt;v1.0.0&lt;/code&gt;). &lt;em&gt;If you have a desire to help, you are welcome!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The installed and running web UI will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TSyudZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zypiuxa7xewqngun7j4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TSyudZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zypiuxa7xewqngun7j4j.png" alt="web ui hover charts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-servers-and-workers" class="anchor"&gt;
  &lt;/a&gt;
  List of servers and workers
&lt;/h3&gt;

&lt;p&gt;Shows Asynq worker server statistics with detailed information about queues and active workers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--shR2igky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a0mcs5gqlktjuhdppo2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shR2igky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a0mcs5gqlktjuhdppo2.png" alt="web ui servers and workers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Supports mass operations with tasks in a convenient tabular list with information on a given queue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udcU13FP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xziuix8jeclkg3pzf5e6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udcU13FP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xziuix8jeclkg3pzf5e6.png" alt="web ui servers and workers mass operations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redis-server-information" class="anchor"&gt;
  &lt;/a&gt;
  Redis server information
&lt;/h3&gt;

&lt;p&gt;It graphically displays all the necessary information about memory usage, server uptime, the number of connected clients at the moment and much more:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SmedgmVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36cngx300e9raf8z2uvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SmedgmVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36cngx300e9raf8z2uvf.png" alt="web ui redis information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, a full list of your Redis server configuration can be found at &lt;em&gt;INFO Command Output&lt;/em&gt; section at the bottom of this page (&lt;em&gt;data will be updated automatically&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adaptive-dark-theme" class="anchor"&gt;
  &lt;/a&gt;
  Adaptive dark theme
&lt;/h3&gt;

&lt;p&gt;Oh, yes! &lt;strong&gt;The future has arrived&lt;/strong&gt;. A dark theme with an adaptive mode for the most fashionable Asynq users 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKMfxW68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z349wynfk3kr7iwrirfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKMfxW68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z349wynfk3kr7iwrirfe.png" alt="dark theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynq-cli" class="anchor"&gt;
  &lt;/a&gt;
  Asynq CLI
&lt;/h2&gt;

&lt;p&gt;Install the Asynq CLI tool by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get &lt;span class="nt"&gt;-u&lt;/span&gt; github.com/hibiken/asynq/tools/asynq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the current state of the queues and their statistics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;asynq stats
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOjOWyg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz26z9h9r3kxbwimt017.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOjOWyg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz26z9h9r3kxbwimt017.gif" alt="asynq stats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by" class="anchor"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Shóstak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ken Hibino &lt;a href="https://github.com/hibiken"&gt;https://github.com/hibiken&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps" class="anchor"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more → write a comment below &amp;amp; follow me. Thanks! 😘&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Simple Music Player UI</title>
      <author>annie.exe</author>
      <pubDate>Tue, 06 Apr 2021 23:47:49 +0000</pubDate>
      <link>https://dev.to/anniedotexe/simple-music-player-ui-4nn1</link>
      <guid>https://dev.to/anniedotexe/simple-music-player-ui-4nn1</guid>
      <description>&lt;p&gt;This is a minimal and simple music player UI design made with HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;This project was created to practice my frontend dev skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interactions" class="anchor"&gt;
  &lt;/a&gt;
  Interactions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Favorite song button&lt;/li&gt;
&lt;li&gt;Repeat / Shuffle buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-toggle-a-color-change-on-svg-buttons" class="anchor"&gt;
  &lt;/a&gt;
  How to toggle a color change on SVG buttons
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h4&gt;

&lt;p&gt;Create a &lt;code&gt;.active&lt;/code&gt; ruleset to set the path's fill to the toggled color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-LSUzOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1wur35zybqb5gqzntc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-LSUzOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1wur35zybqb5gqzntc.png" alt="CSS Code Block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h4&gt;

&lt;p&gt;Have a function that gets the &lt;code&gt;div&lt;/code&gt; element by &lt;code&gt;id&lt;/code&gt; and toggles an 'active' class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-j2VBTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3xl5nyt0p4sx4b9dtp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-j2VBTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3xl5nyt0p4sx4b9dtp6.png" alt="JavaScript Code Block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h4&gt;

&lt;p&gt;Surround the SVG with a div with an &lt;code&gt;id&lt;/code&gt; and an &lt;code&gt;onclick&lt;/code&gt; with the JavaScript function. &lt;em&gt;The div is also used for easier spacing out of elements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gZk71FV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgd2wpxds6lpt168ns8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gZk71FV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgd2wpxds6lpt168ns8.png" alt="HTML Code Block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-with" class="anchor"&gt;
  &lt;/a&gt;
  Built With
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;CSS3&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code" class="anchor"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/anniedotexe"&gt;
        anniedotexe
      &lt;/a&gt; / &lt;a href="https://github.com/anniedotexe/music-player"&gt;
        music-player
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a minimal and simple music player UI design made with HTML, CSS, and Javascript.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#live-demo" class="anchor"&gt;
  &lt;/a&gt;
  Live Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://musicplayer.anniew.xyz/"&gt;Music Player&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--US1jEedj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hrmp4damcoiiyq8jzyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--US1jEedj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hrmp4damcoiiyq8jzyg.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback" class="anchor"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;Any type of feedback is welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/vnGlErQHuF9BK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vnGlErQHuF9BK/giphy.gif" alt="Dancing Pikachu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The end,&lt;br&gt;
annie.exe&lt;/p&gt;




&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>The Top 5 Python Frameworks for Web Development</title>
      <author>jones268</author>
      <pubDate>Tue, 06 Apr 2021 23:04:02 +0000</pubDate>
      <link>https://dev.to/jones268/the-top-5-python-frameworks-for-web-development-glg</link>
      <guid>https://dev.to/jones268/the-top-5-python-frameworks-for-web-development-glg</guid>
      <description>&lt;p&gt;&lt;a href="https://python.org"&gt;Python&lt;/a&gt; is a great programming language, and is often used to create web apps. It's one of the more popular open source languages in use today, and continues to be a favorite of developers all over the world.&lt;/p&gt;

&lt;p&gt;There are numerous Python frameworks that allow you to quickly create an app with minimal coding, and this has made it one of the most popular choices for those looking to create web applications. &lt;/p&gt;

&lt;p&gt;One advantage of Python is that a web app is very &lt;a href="https://www.pythonanywhere.com/?affiliate_id=00535ced"&gt;easy to deploy&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask" class="anchor"&gt;
  &lt;/a&gt;
  Flask
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pythonbasics.org/what-is-flask-python/"&gt;Flask&lt;/a&gt; is intended for getting started very quickly and was developed with best intentions in mind. With that in mind, here are some things that are noteworthy:&lt;/p&gt;

&lt;p&gt;Flask embraces the philosophy of best practices, which means we're not going to constrain ourselves to decisions that are based solely on history or personal preferences. If there is no logical or technical reason for a certain methodology, we'll try something else. &lt;/p&gt;

&lt;p&gt;It may not be the "coolest" but it will be what works best and allow you to deliver a stable product. You can use Flask in conjunction with other modules, like &lt;a href="https://python-commandments.org/flask-crud/"&gt;SQLAlchemy&lt;/a&gt; if you need a database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django" class="anchor"&gt;
  &lt;/a&gt;
  Django
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; is one of the most popular Python frameworks for &lt;a href="https://pythonspot.com/python-web-development/"&gt;web development&lt;/a&gt;. Best known for its ease of use, many developers choose it as their first framework due to its simplicity and ease of implementation. &lt;/p&gt;

&lt;p&gt;Django comes pre-packaged with many tools that help you to develop apps quickly, and also covers some security areas that many don't. Because of this, Django is considered by some as the go-to framework of choice for beginners.&lt;/p&gt;

&lt;p&gt;However, Django does have a longer learning curve than Flask. That is because it introduces you to many concepts and there is the Django way of doing things. Nevertheless, setting up the &lt;a href="https://pythonprogramminglanguage.com/django-hello-world/"&gt;"hello world"&lt;/a&gt; app should be easy even for a beginner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pyramid" class="anchor"&gt;
  &lt;/a&gt;
  Pyramid
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt; is an excellent web framework. It's one of the original web frameworks, and has been around a long time. It's got dozens of contributors, thousands of users, and is built by a group you can trust. Pyramid combines solid software engineering, smart development practices, and sensible defaults to make real-world web application development enjoyable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottle" class="anchor"&gt;
  &lt;/a&gt;
  Bottle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bottlepy.org/"&gt;Bottle&lt;/a&gt; is an easy to use, fast, and reliable WSGI implementation for Python. It allows you to quickly write web applications/services that require zero or minimal configuration. Your application can live entirely in a single file, making deployment simple.&lt;/p&gt;

&lt;p&gt;By offering a lightweight framework for building web applications, Bottle makes it easy to create scalable, secure and highly-available web applications that can run on any WSGI-compliant web server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#falcon" class="anchor"&gt;
  &lt;/a&gt;
  Falcon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://falconframework.org/"&gt;Falcon&lt;/a&gt; is a Python Web framework for building large-scale app backends and microservices. It encourages the REST architectural style, and tries to do as little as possible while remaining highly effective.&lt;/p&gt;

&lt;p&gt;Falcon is a high-performance, minimalist WSGI library that puts the "fac" in "HTTP". It's built on top of Tornado, asyncio, and aiohttp. The goal of this library is to make building request/response APIs as fast and easy as possible.&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>django</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Beginner-Friendly Coding Livestreams to Learn Programming</title>
      <author>Amruta Ranade</author>
      <pubDate>Tue, 06 Apr 2021 22:55:26 +0000</pubDate>
      <link>https://dev.to/amrutaranade/5-beginner-friendly-coding-livestreams-to-learn-programming-1a2</link>
      <guid>https://dev.to/amrutaranade/5-beginner-friendly-coding-livestreams-to-learn-programming-1a2</guid>
      <description>&lt;p&gt;2020 has been a great year for code livestreams. Stuck at home, developers took to their OBS setups to share their coding projects with their peers. And viewers tuned in to watch a fellow developer struggle through a programming issue, get stuck, google things, and eventually figure things out, and found their coding communities in the process.&lt;/p&gt;

&lt;p&gt;But if you are a code newbie, you might find it daunting to follow along with the experienced developers' livestreams. Fear not, for you have your own peers learning new tech stacks live! Here are five of our favorite beginner-friendly streamers that you can watch to learn programming:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-fullstack-web-development-with-leon" class="anchor"&gt;
  &lt;/a&gt;
  Learn full-stack web development with Leon
&lt;/h2&gt;

&lt;p&gt;Leon Noel (&lt;a href="https://www.twitch.tv/learnwithleon"&gt;https://www.twitch.tv/learnwithleon&lt;/a&gt;) runs a free Web Dev Bootcamp live on Twitch every Tuesday and Thursday at 6:30 PM EST. The goal of the bootcamp is to help those affected by the pandemic as well as help underrepresented folks learn web development and get hired as software engineers. You can also bring your questions to the Office Hours on Saturdays at 12 PM EST.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-python-with-pachi" class="anchor"&gt;
  &lt;/a&gt;
  Learn Python with Pachi
&lt;/h2&gt;

&lt;p&gt;Pachi Carlson is currently learning Python live on her Twitch channel (&lt;a href="https://www.twitch.tv/pachicodes"&gt;https://www.twitch.tv/pachicodes&lt;/a&gt;) on Mondays and Wednesdays at 10 AM EST.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-golang-with-paul" class="anchor"&gt;
  &lt;/a&gt;
  Learn Golang with Paul
&lt;/h2&gt;

&lt;p&gt;Paul Kernfeld is currently learning Golang from scratch every Friday at 12 PM EST on Cockroach Labs' Twitch channel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-rust-with-prince" class="anchor"&gt;
  &lt;/a&gt;
  Learn Rust with Prince
&lt;/h2&gt;

&lt;p&gt;Prince Wilson is currently learning Rust with Exercism.io on his Twitch channel (&lt;a href="https://www.twitch.tv/maxcellw"&gt;https://www.twitch.tv/maxcellw&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-javascript-with-cj" class="anchor"&gt;
  &lt;/a&gt;
  Learn Javascript with CJ
&lt;/h2&gt;

&lt;p&gt;The creator of the popular coding YouTube channel (Coding Garden) also has an excellent Twitch channel (&lt;a href="https://www.twitch.tv/codinggarden"&gt;https://www.twitch.tv/codinggarden&lt;/a&gt;) for full-stack app projects, tutorials, and Q&amp;amp;A sessions (mostly featuring Javascript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-streams" class="anchor"&gt;
  &lt;/a&gt;
  Bonus streams
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Follow along Jeseekia Vaughn's awesome journey through 100 Days of Code: &lt;a href="https://www.twitch.tv/metadevgirl"&gt;https://www.twitch.tv/metadevgirl&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Want to get some of your own coding done? Join Mayuko (&lt;a href="https://www.twitch.tv/hellomayuko"&gt;https://www.twitch.tv/hellomayuko&lt;/a&gt;) for a chill co-working stream for pomodoro coding sprints.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Enterprise DevOps Mindset</title>
      <author>Dylan Watson</author>
      <pubDate>Tue, 06 Apr 2021 22:43:29 +0000</pubDate>
      <link>https://dev.to/dylanwatsonsoftware/the-enterprise-devops-mindset-49g2</link>
      <guid>https://dev.to/dylanwatsonsoftware/the-enterprise-devops-mindset-49g2</guid>
      <description>&lt;p&gt;Firstly, let's start with 2 commonly heard statements:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Enterprise doesn't do DevOps&lt;br&gt;
Or&lt;br&gt;
Releasing is hard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- signed, every enterprise developer ever&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Whilst Enterprise companies tend to have a lot of bureaucracy (especially around releasing), we should still look to improve the pace at which we deliver working software to our customers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-this-apply-to-my-enterprise-org" class="anchor"&gt;
  &lt;/a&gt;
  Does this apply to my Enterprise org?
&lt;/h1&gt;

&lt;p&gt;Yep. Any organisation whose customers, regulators, and developers appreciate faster, more reliable software releases with less risk can employ these thought processes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-devops" class="anchor"&gt;
  &lt;/a&gt;
  What is DevOps?
&lt;/h1&gt;

&lt;p&gt;Let's start with a simple shared vision of what DevOps actually is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps is&lt;br&gt;
a set of practices&lt;br&gt;
that works to&lt;br&gt;
&lt;strong&gt;automate processes&lt;/strong&gt;&lt;br&gt;
so software teams can&lt;br&gt;
&lt;strong&gt;build, test, and release&lt;/strong&gt;&lt;br&gt;
software &lt;strong&gt;faster and more reliably.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://www.atlassian.com/devops"&gt;Atlassian DevOps&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-target" class="anchor"&gt;
  &lt;/a&gt;
  The target
&lt;/h2&gt;

&lt;p&gt;What are we looking to achieve here?&lt;br&gt;
We are hoping to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce the time it takes for our work (including bug fixes) to land in our user's hands&lt;/li&gt;
&lt;li&gt;Reduce the time it takes to become aware of a problem in Production&lt;/li&gt;
&lt;li&gt;Reduce the risk and longevity of downtime due to a release&lt;/li&gt;
&lt;li&gt;Reduce the impact of any particular bug introduced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, but how?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-git-master-is-sacred" class="anchor"&gt;
  &lt;/a&gt;
  Make git master is sacred
&lt;/h2&gt;

&lt;p&gt;You must ensure that the latest version of your code is always deployable. If you need to "cut a release" and branch off master, you will be less inclined to release on a regular basis.&lt;/p&gt;

&lt;p&gt;If your code is not "ready to release" at any time, your ability to safely respond when &lt;em&gt;shit hits the fan&lt;/em&gt; is heavily affected.&lt;/p&gt;

&lt;p&gt;Think about it, if you first need to rollback your code to a "known" safe place, then this is yet another step in the process before you can even begin fixing your production incident.&lt;/p&gt;

&lt;p&gt;In order to keep master "production-ready", all merges to master must also be ready for production. &lt;/p&gt;

&lt;p&gt;This is achieved by 2 key things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Automation

&lt;ul&gt;
&lt;li&gt;Anything that gives you the confidence to release, should be automated and it should prevent branches from merging to master if they fail&lt;/li&gt;
&lt;li&gt;Your automation should make it VERY hard to accidentally break production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding Practices

&lt;ul&gt;
&lt;li&gt;Write your code in a way that allows you to deploy to production safely without causing an outage due to a mistake.
&lt;/li&gt;
&lt;li&gt;Feature Toggles, Keystones, and backward compatibility are just some of the techniques that can help maintain prod readiness.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part 3 of this series "Coding Practices will give some examples of ways to ensure your code is production-ready.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-build-it-you-run-it" class="anchor"&gt;
  &lt;/a&gt;
  You build it, you run it
&lt;/h2&gt;

&lt;p&gt;The person best placed to fix issues with a feature is the person that just wrote code for it.&lt;br&gt;
If that person is in charge of dealing with any customer issues with that piece of work they will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better understand the problems when they occur&lt;/li&gt;
&lt;li&gt;Be more inclined to take care when writing the code&lt;/li&gt;
&lt;li&gt;Have better context and incentive to improve the supportability of that code in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By getting your Devs at least involved in this process, your software quality will be given a good chance to improve, if only through empathy for the user and themselves.&lt;/p&gt;

&lt;p&gt;See Atlassian's take on &lt;a href="https://www.atlassian.com/incident-management/devops/you-built-it-you-run-it"&gt;You build it, you run it&lt;/a&gt; and another on some of their ideas around &lt;a href="https://www.atlassian.com/incident-management/devops/sre"&gt;site reliability engineering&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#small-releases-are-best" class="anchor"&gt;
  &lt;/a&gt;
  Small releases are best
&lt;/h2&gt;

&lt;p&gt;If you spend a year developing software before giving it to a user, you are spending a year building up risk. Any piece of that years (or even months) development could (and likely does) have an undiscovered bug.&lt;/p&gt;

&lt;p&gt;If anything goes wrong (and it will), you will have to sift through a whole year of code and features to discover the issue.&lt;/p&gt;

&lt;p&gt;On the other hand, if you make a single change and deploy it to production you will likely have much more confidence about deploying to production. Why? Well, if it breaks, it is much easier to have confidence around which change caused the issue... And you can simply rollback to the previous version (or even write a test, fix the bug, and redeploy).&lt;/p&gt;

&lt;p&gt;Due to our new confidence in finding issues and rolling back changes quickly, the &lt;em&gt;risk&lt;/em&gt; of any 1 change is &lt;em&gt;drastically reduced&lt;/em&gt;.  We also &lt;em&gt;massively increase&lt;/em&gt; our ability to avoid downtime due to an introduced bug.&lt;/p&gt;

&lt;p&gt;With additional confidence, we can release faster which gives us much better context when things do go wrong since, we have only just finished working on that section of the code.&lt;br&gt;
This only helps give us the confidence we need to release at an even faster cadence and so on.&lt;/p&gt;

&lt;p&gt;Simply stated: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Small change == less risk == faster to release&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For further reading here is an interesting Kent Beck article about taking small changes to the extreme: &lt;a href="https://increment.com/testing/testing-the-boundaries-of-collaboration/"&gt;Testing the boundaries of collaboration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is also an interesting read on the &lt;a href="https://betterprogramming.pub/are-pull-requests-holding-back-your-team-e8aec48986c2"&gt;usefulness of pull-requests&lt;/a&gt;, I think the key takeaway here should be that small, very short-lived branches are best. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automated-testing-is-the-key" class="anchor"&gt;
  &lt;/a&gt;
  Automated testing is the key
&lt;/h2&gt;

&lt;p&gt;The other lynchpin in our DevOps plan is testing. If we don't have sufficient automated testing to give us the confidence to release then the plan falls apart. If we rely on manual testing for this confidence, and this manual testing is performed AFTER merging to master, then your manual testing becomes a blocker to production. However, because you have merged to master, you don't just block the code your code for being released but any code merged after yours. This puts pressure on the QAs causing unnecessary delays or forcing them to drop their testing standards.. or just putting unnecessary stress on them.&lt;/p&gt;

&lt;p&gt;This is not to say that manual exploratory testing doesn't have its place. It can do.&lt;br&gt;
Just that with sufficient automated testing, manual testing shouldn't block a release. If used correctly however, it can be used to validate functionality (often best done by someone with first-hand experience in the business). Manual testing should never be used for anything that you ever want to run more than once to give you confidence you haven't broken something.&lt;/p&gt;

&lt;p&gt;For 2 very interesting points of view on appropriate automated testing levels, check out these articles by:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kent Beck&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://m.facebook.com/nt/screen/?params=%7B%22note_id%22%3A387720532357705%7D&amp;amp;path=%2Fnotes%2Fnote%2F&amp;amp;_rdr"&gt;”Unit” tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Kent C. Dodds.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kentcdodds.com/blog/write-tests"&gt;Write tests. Not too many. Mostly integration.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Apparently, all Kents have strong feelings about tests!)&lt;/p&gt;

&lt;p&gt;However, if your QAs are finding issues that if deployed to production would impact users, then you are in luck! The next post in this series "DevOps Coding Practices" will take you through several techniques to avoid blocking production deployments, whilst still maintaining safe and reliable production environments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-put-it-into-practice" class="anchor"&gt;
  &lt;/a&gt;
  Let's put it into practice
&lt;/h1&gt;

&lt;p&gt;Next up are some simple DevOps coding practices to follow to ensure master is ready to release at any time. (Link coming soon)&lt;/p&gt;

</description>
      <category>devops</category>
      <category>mindset</category>
      <category>enterprise</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
