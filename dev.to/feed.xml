<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why mentorship?</title>
      <author>Kirk Fernandes</author>
      <pubDate>Tue, 11 Jan 2022 20:44:55 +0000</pubDate>
      <link>https://dev.to/merit/why-mentorship-230o</link>
      <guid>https://dev.to/merit/why-mentorship-230o</guid>
      <description>&lt;p&gt;Growing your career in tech is hard, but it’s a lot more manageable when you have people to talk to about problems and get advice. There is where mentors come in. A mentor can be anyone who has some experience and wants to talk to you.&lt;/p&gt;

&lt;p&gt;But often finding a mentor and getting the most out of mentorship is harder than it needs to be. After facilitating thousands of hours of mentorship, &lt;a href="https://www.get-merit.com/"&gt;Merit&lt;/a&gt; has collected some tips and tricks for getting the most out of mentorship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is mentorship?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mentorship is a way to grow your career and a more meaningful way to network in the industry.&lt;/p&gt;

&lt;p&gt;But “mentorship” is also a loaded term. It could mean anything from asking for help in one difficult situation to building a long-term relationship where the mentor coaches and leads the mentee. The type of relationship or structure is dependent on what you want to get out of it: a session to get feedback, a long-term mentor over a period of months, or to chat every week or month.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to pick a mentor?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Talk to many people; sometimes you won’t know who will be helpful until you talk to them. It takes multiple perspectives and people to grow your career.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having multiple mentors also takes the pressure off anyone single person to be responsible for your progress or momentum.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be flexible on the role — sometimes people outside your role and discipline can still have great advice.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Where to find mentors?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you already have an established network:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Current or former coworkers&lt;/strong&gt;: Especially if they are someone more senior whom you admire.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;School or alumni groups&lt;/strong&gt;: People who’ve graduated or even peers can make good mentors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Community groups&lt;/strong&gt;: There are lots of community groups that are based around roles, location, or identities (e.g., Out in Tech, Ladies Get Paid, Black Girls Code) that have lots of senior people to talk to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are looking to expand your network, here are some places to explore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LinkedIn&lt;/strong&gt;: This is the largest network but the hardest to navigate and connect with. The odds of someone responding to your cold DMs are low, but everyone has a LinkedIn profile.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href="https://hanamakhlouf.medium.com/4-reasons-to-get-on-tech-twitter-now-cafc020ad5d8"&gt;There is tech twitter&lt;/a&gt;. Tech Twitter is smaller than LinkedIn, but you can still get a sense of someone’s thinking and personality. Like on LinkedIn, you can still DM folks. &lt;br&gt;
Here there’s a higher chance of them responding, but the odds are still low.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mentorship platforms&lt;/strong&gt;: On mentorship platforms, mentors have profiles, topics they’re happy to discuss with you, and a schedule of their availability. These platforms have fewer people than other social networks, but the folks on these platforms are specifically there to mentor so you’re much more likely to hear back after reaching out.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How do I approach mentorship sessions?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be specific&lt;/strong&gt;: With the time (e.g., 30 minutes) and the topic (i.e., “I would love some advice on how to ask my boss for a promotion to Senior PM”). This allows the other person to prepare but also approach the session with ideas before it starts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Share context&lt;/strong&gt;: When asking for advice on a problem or situation, provide background on the issue and what you’ve tried as well as the context of your team and company. All this information helps the mentor adjust and tune their advice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Respect people’s time&lt;/strong&gt;: Once you commit to a date and time, send any relevant materials in advance and be sure to arrive and end on time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Listen&lt;/strong&gt;: This is the most important part! People want to help people who listen to advice and suggestions. Try to soak in as much as possible. Ask follow-up and clarifying questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Say thanks and follow up&lt;/strong&gt;: This is a very common thing that most people don’t do. First, just send a note to say thank you. Follow up in a week or month after you’ve tried the things your mentor suggested. It doesn’t have to always be good news or major things but just a simple note is enough to help close the loop.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How to maintain mentorship longer term?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over a long period of time, we are all co-workers. Mentorship never truly ends; it just transforms. Sometimes you talk to someone once or twice, or regularly for a few months, or once in a while over many years. There is no one-size-fits-all approach to mentorship. A good way to think about it is to give more than you take and to approach each interaction with empathy and openness.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Offer to help&lt;/strong&gt;: Just because you are a junior doesn’t mean you can’t help. Often times more senior folks want to learn from you, your process, your insights, and your network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mentorship and recruiting overlap&lt;/strong&gt;: Hiring managers and tech workers are getting more hip to taking a longer view on these kinds of relationships. Your mentees or mentors now could be someone you work for or works for you later. The line between recruiting and mentorship is being blurred.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are looking for a mentor in product, design, or engineering. &lt;a href="https://www.get-merit.com/"&gt;Merit&lt;/a&gt; has hundreds of mentors that are available to talk to.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CommonJS vs. ES modules in Node.js</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 11 Jan 2022 20:31:16 +0000</pubDate>
      <link>https://dev.to/logrocket/commonjs-vs-es-modules-in-nodejs-2eo1</link>
      <guid>https://dev.to/logrocket/commonjs-vs-es-modules-in-nodejs-2eo1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/kingsleyubah/"&gt;Kingsley Ubah&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;In modern software development, modules organize software code into self-contained chunks that together make up a larger, more complex application.&lt;/p&gt;

&lt;p&gt;In the browser JavaScript ecosystem, the use of JavaScript modules depends on the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements; these statements load and export EMCAScript modules (or ES modules), respectively.&lt;/p&gt;

&lt;p&gt;The ES module format is the official standard format to package JavaScript code for reuse and most modern web browsers natively support the modules.&lt;/p&gt;

&lt;p&gt;Node.js, however, supports the CommonJS module format by default. CommonJS modules load using &lt;code&gt;require()&lt;/code&gt;, and variables and functions export from a CommonJS module with &lt;code&gt;module.exports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The ES module format was introduced in &lt;a href="https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V8.md#8.5.0"&gt;Node.js v8.5.0&lt;/a&gt; as the JavaScript module system was standardized. Being an experimental module, the &lt;code&gt;--experimental-modules&lt;/code&gt; flag was required to successfully run an ES module in a Node.js environment.&lt;/p&gt;

&lt;p&gt;However, starting with version 13.2.0, Node.js has stable support of ES modules.&lt;/p&gt;

&lt;p&gt;This article won’t to cover much on the usage of both module formats, but rather how CommonJS compares to ES modules and why you might want to use one over the other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-commonjs-modules-and-es-modules-syntax"&gt;
  &lt;/a&gt;
  Comparing CommonJS modules and ES modules syntax
&lt;/h2&gt;

&lt;p&gt;By default, Node.js treats JavaScript code as CommonJS modules. Because of this, CommonJS modules are characterized by the &lt;code&gt;require()&lt;/code&gt; statement for module imports and &lt;code&gt;module.exports&lt;/code&gt; for module exports.&lt;/p&gt;

&lt;p&gt;For example, this is a CommonJS module that exports two functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also import the public functions into another Node.js script using &lt;code&gt;require()&lt;/code&gt;, just as we do here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are looking for a more in-depth &lt;a href="https://blog.logrocket.com/es-modules-in-node-today/#commonjsmodulesystem"&gt;tutorial on CommonJS modules, check this out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, library authors can also simply enable ES modules in a Node.js package by changing the file extensions from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.mjs.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example, here's a simple ES module (with an &lt;code&gt;.mjs&lt;/code&gt; extension) exporting two functions for public use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// util.mjs&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then import both functions using the &lt;code&gt;import&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.mjs&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./util.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way to enable ES modules in your project can be done by adding a &lt;code&gt;"type: module"&lt;/code&gt; field inside the nearest &lt;code&gt;package.json&lt;/code&gt; file (the same folder as the package you’re making):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-library&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that inclusion, Node.js treats all files inside that package as ES modules, and you won’t have to change the file to &lt;code&gt;.mjs&lt;/code&gt; extension. You can &lt;a href="https://blog.logrocket.com/how-to-use-ecmascript-modules-with-node-js/"&gt;learn more about ES modules here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, you can install and set up a &lt;a href="https://www.youtube.com/watch?v=7vGk8vFDGfA"&gt;transpiler like Babel to compile your ES module syntax down to CommonJS syntax&lt;/a&gt;. Projects like React and Vue support ES modules because they use &lt;a href="https://blog.logrocket.com/babel-vs-typescript/"&gt;Babel under the hood to compile the code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons-of-using-es-modules-and-commonjs-modules-in-nodejs"&gt;
  &lt;/a&gt;
  Pros and cons of using ES modules and CommonJS modules in Node.js
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#es-modules-are-the-standard-for-javascript-while-commonjs-is-the-default-in-nodejs"&gt;
  &lt;/a&gt;
  ES modules are the standard for JavaScript, while CommonJS is the default in Node.js
&lt;/h3&gt;

&lt;p&gt;The ES module format was created to standardize the JavaScript module system. It has become the standard format for encapsulating JavaScript code for reuse.&lt;/p&gt;

&lt;p&gt;The CommonJS module system, on the other hand, is built into Node.js. Prior to the introduction of the ES module in Node.js, CommonJS was the standard for Node.js modules. As a result, there are plenty of Node.js libraries and modules written with CommonJS.&lt;/p&gt;

&lt;p&gt;For browser support, all major browsers support the ES module syntax and you can use &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt; in frameworks like React and Vue.js. These frameworks uses a transpiler like Babel to compile the &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt; syntax down to &lt;code&gt;require()&lt;/code&gt;, which older Node.js versions natively support.&lt;/p&gt;

&lt;p&gt;Apart from being the standard for JavaScript modules, the ES module syntax is also much more readable compared to &lt;code&gt;require()&lt;/code&gt;. Web developers who primarily write JavaScript on the client will have no issues working with Node.js modules thanks to the identical syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-support-for-es-modules"&gt;
  &lt;/a&gt;
  Node.js support for ES modules
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#older-nodejs-versions-dont-support-es-modules"&gt;
  &lt;/a&gt;
  Older Node.js versions don’t support ES modules
&lt;/h4&gt;

&lt;p&gt;While ES modules have become the standard module format in JavaScript, developers should consider that older versions of Node.js lack support (specifically Node.js v9 and under).&lt;/p&gt;

&lt;p&gt;In other words, using ES modules render an application incompatible with earlier versions of Node.js that only support CommonJS modules (that is, the &lt;code&gt;require()&lt;/code&gt; syntax).&lt;/p&gt;

&lt;p&gt;But with the new conditional exports, we can build dual-mode libraries. These are libraries that are composed of the newer ES modules, but they are also backward-compatible with the CommonJS module format supported by older Node.js versions.&lt;/p&gt;

&lt;p&gt;In other words, we can build a library that supports both &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;require()&lt;/code&gt;, allowing us solve the issue of incompatibility.&lt;/p&gt;

&lt;p&gt;Consider the following Node.js project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;library&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iife&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;commonjs&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mjs&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;es6&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="kr"&gt;private&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;       &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;       &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mjs&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside &lt;code&gt;package.json&lt;/code&gt;, we can use the &lt;code&gt;exports&lt;/code&gt; field to export the public module (&lt;code&gt;module-a&lt;/code&gt;) in two different module formats while resticting access to the private module (&lt;code&gt;module-b&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-library&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;browser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./lib/browser-module.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;import&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./lib/module-a.mjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;require&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./lib/module-a.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By providing the following information about our &lt;code&gt;my-library&lt;/code&gt; package, we can now use it anywhere it is supported like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// For CommonJS &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moduleA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-library/module-a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// For ES6 Module&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;moduleA&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-library/module-a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moduleA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-library/lib/module-a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;moduleA&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-awesome-lib/lib/public-module-a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moduleB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-library/private/module-b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;moduleB&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-library/private/module-b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because of the paths in &lt;code&gt;exports&lt;/code&gt;, we can import (and &lt;code&gt;require()&lt;/code&gt;) our public modules without specifying absolute paths.&lt;/p&gt;

&lt;p&gt;By including paths for &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.mjs&lt;/code&gt;, we can solve the issue of incompatibility; we can map package modules for different environments like the browser and Node.js while restricting access to private modules.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#newer-nodejs-versions-fully-support-es-modules"&gt;
  &lt;/a&gt;
  Newer Node.js versions fully support ES modules
&lt;/h4&gt;

&lt;p&gt;In most lower Node.js versions, the ES module is marked as experimental. This means that the module lacks some features and is behind the &lt;code&gt;--experimental-modules&lt;/code&gt; flag. Newer versions of Node.js do have stable support for ES modules.&lt;/p&gt;

&lt;p&gt;However, it’s important to remember that for Node.js to treat a module as an ES module, one of the following must happen: either the module’s file extension must convert from &lt;code&gt;.js&lt;/code&gt; (for CommonJS) to &lt;code&gt;.mjs&lt;/code&gt; (for ES modules) or we must set a &lt;code&gt;{"type":&lt;/code&gt; &lt;code&gt;"module"}&lt;/code&gt; field in the nearest &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;In this case, all code in that package will be treated as ES modules and the &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt; statements should be used instead of &lt;code&gt;require()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commonjs-offers-flexibility-with-module-imports"&gt;
  &lt;/a&gt;
  CommonJS offers flexibility with module imports
&lt;/h3&gt;

&lt;p&gt;In an ES module, the import statement can only be called at the beginning of the file. Calling it anywhere else automatically shifts the expression to the file beginning or can even throw an error.&lt;/p&gt;

&lt;p&gt;On the other hand, with &lt;code&gt;require()&lt;/code&gt; as a function, gets parsed at runtime. As a result, &lt;code&gt;require()&lt;/code&gt; can be called anywhere in the code. You can use it to load modules conditionally or dynamically from &lt;code&gt;if&lt;/code&gt; statements, conditional loops, and functions.&lt;/p&gt;

&lt;p&gt;For example, you can call &lt;code&gt;require()&lt;/code&gt; inside a conditional statement like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something ..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we load a module called &lt;code&gt;userDetails&lt;/code&gt; only if a user is present.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commonjs-loads-modules-synchronously-es-modules-are-asynchronous"&gt;
  &lt;/a&gt;
  CommonJS loads modules synchronously, ES modules are asynchronous
&lt;/h3&gt;

&lt;p&gt;One of the limitations of using &lt;code&gt;require()&lt;/code&gt; is that it loads modules synchronously. This means that modules are loaded and processed one by one.&lt;/p&gt;

&lt;p&gt;As you might have guessed, this can pose a few performance issues for large-scale applications that hundreds of modules. In such a case, &lt;code&gt;import&lt;/code&gt; might outperform &lt;code&gt;require()&lt;/code&gt; based on its asynchronous behavior.&lt;/p&gt;

&lt;p&gt;However, the synchronous nature of &lt;code&gt;require()&lt;/code&gt; might not be much of a problem for a small-scale application using a couple of modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-commonjs-or-es-modules"&gt;
  &lt;/a&gt;
  Conclusion: CommonJS or ES modules?
&lt;/h2&gt;

&lt;p&gt;For developers who still use an older version of Node.js, using the new ES module would be impractical.&lt;/p&gt;

&lt;p&gt;Because of the sketchy support, converting an existing project to the ES modules would render the application incompatible with earlier versions of Node.js that only support CommonJS modules (that is, the &lt;code&gt;require()&lt;/code&gt; syntax).&lt;/p&gt;

&lt;p&gt;Thus, migrating your project to use ES modules may not be particularly beneficial.&lt;/p&gt;

&lt;p&gt;As a beginner, it can be beneficial and convenient to learn about ES modules given that they are becoming the standard format for defining modules in JavaScript for both client side (browser) and server side (Node.js).&lt;/p&gt;

&lt;p&gt;For new Node.js projects, ES modules provide an alternative to CommonJS. The ES modules format does offer an easier route to writing isomorphic JavaScript, which can run in either the browser or on a server.&lt;/p&gt;

&lt;p&gt;In all, EMCAScript modules are the future of JavaScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#200s-only-heavycheckmark-monitor-failed-and-slow-network-requests-in-production"&gt;
  &lt;/a&gt;
  200’s only ✔️ Monitor failed and slow network requests in production
&lt;/h2&gt;

&lt;p&gt;Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup/"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1zhbpx-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" alt="LogRocket Network Request Monitoring" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>discuss</category>
    </item>
    <item>
      <title>React State Pattern | Day 8</title>
      <author>Web.Developer.io</author>
      <pubDate>Tue, 11 Jan 2022 19:28:02 +0000</pubDate>
      <link>https://dev.to/developerioweb/react-state-pattern-day-8-5e03</link>
      <guid>https://dev.to/developerioweb/react-state-pattern-day-8-5e03</guid>
      <description>&lt;h3&gt;
  &lt;a href="#recap-%E2%86%92"&gt;
  &lt;/a&gt;
  Recap →
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;State&lt;/code&gt; → It is a Collection of mutable values that can change over time.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It is similar to the props whereas state can be changed but props can’t be changed.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWgBFx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ywwp8a791hkfc1fhg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWgBFx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2ywwp8a791hkfc1fhg5.png" alt="Goals" width="880" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-existing-state-%E2%86%92"&gt;
  &lt;/a&gt;
  Updating Existing State →
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Earlier we are Just Changing/Altering the values of State but not changing them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s took an example u have a &lt;strong&gt;&lt;code&gt;Scorekepper&lt;/code&gt; component&lt;/strong&gt; which Increases as which make the kills ⬇️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Scorekeeper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onKill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onKill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;onKill&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Score is : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onKill&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;One KILL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;So every time we click on the button it will update the score by 1.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But, this is not the convenient way of doing this.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;why??&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s have a look to the Below example In this we have button called &lt;code&gt;Three kill&lt;/code&gt; when we click on this Score only Increases by 1.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Scorekeeper&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;threeKill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;threeKill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;threeKill&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Score is : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;threeKill&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Three KILL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But why this is not working ??&lt;/p&gt;

&lt;p&gt;🎯 &lt;strong&gt;setState is Asynchronous is nature. So it is risky to assume that the previous call has finished. Also react will sometime batch(squash together) calls to setState together into one for Performance reasons.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So as the all 3 calls were updating the same thing so on the priority basis the last one is only executed.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Look at this&lt;/strong&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;threeKill&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The last call will run.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If a call to setState() depends on current state it’s better to use the “callbacks”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;But What are the &lt;code&gt;Callbacks ?&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are the Function which are passed as a Argument to the another function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Like&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;works&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your work of Day is to plant the Trees&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Good Morning &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; `&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;works&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Like in this above example we passed the log function as the callback.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When the Greet function have completes it’s execution then at the end the log function is called.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When u pass the callback not pass it with the parenths cuz we don’t want to run it now.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why we need Callbacks ??&lt;/strong&gt;&lt;br&gt;
When we are Requesting some data from the API or Database , we don’t know when the data will come , so all these process are called Asynchronous cuz they are not executed immediately.&lt;/p&gt;

&lt;p&gt;So we pass the callbacks when the function executed the the callback is called and we came to know that it has been updated.&lt;/p&gt;

&lt;p&gt;Same in the case of React the &lt;code&gt;setState&lt;/code&gt; method is Asynchronous so we can use the callbacks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;threekill&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDvB74xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx417cgnpafjmi4y3ub3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDvB74xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx417cgnpafjmi4y3ub3.png" alt="State" width="880" height="443"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;IncTo3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;currState&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;threeKill&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IncTo3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IncTo3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IncTo3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;I know some of u are thinking that we can just do like this 😅&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;threeKill&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;But this only a example to tell u that &lt;code&gt;If a call to setState() depends on current state it’s better to use the “callbacks”&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97xnug9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mtxr5h29qyekmfxkuyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97xnug9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mtxr5h29qyekmfxkuyd.png" alt="Setting State" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mutating-state-the-safe-way-%E2%86%92"&gt;
  &lt;/a&gt;
  Mutating State the safe Way →
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0QX68qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32enwl5hv95bciiq9a6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0QX68qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32enwl5hv95bciiq9a6h.png" alt="Mutable" width="880" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;we can also define the Arrays in the state.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;u have to be extra careful while modifying the Array.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Like I have a random Number Picker which picks out the Random name and keeps them.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NumPicker&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;names&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jayant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dushyant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nitin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gaurav&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kartik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sam &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;Randomizer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="c1"&gt;//It will make a copy of the arr object with an extra name.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]]})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Random Names are :&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Randomizer&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Randomizer&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So when u want to make changes in the Arrays , make a copy of the that and made changes in that and then pass it , to the setState.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TiuseGsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfkp6hd7pcfmtmoyfyyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TiuseGsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfkp6hd7pcfmtmoyfyyp.png" alt="React State Summary" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwzCScUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaot9ehj5v16zns2jir1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwzCScUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaot9ehj5v16zns2jir1.png" alt="React" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For More Info u can Read this Article&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5/"&gt;Handling State in React: Four Immutable Approaches to Consider&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-state"&gt;
  &lt;/a&gt;
  Designing State 😁
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkrtHPt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zqdi5ev20k57r497k5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkrtHPt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zqdi5ev20k57r497k5q.png" alt="Designing" width="880" height="215"&gt;&lt;/a&gt;&lt;br&gt;
                                                                &lt;strong&gt;Minimizing State&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnX8k4Jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uegu5gctneu2lgnv828v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnX8k4Jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uegu5gctneu2lgnv828v.png" alt="React" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BklzPvON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr5bb5o4oxhfoyub9p0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BklzPvON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr5bb5o4oxhfoyub9p0r.png" alt="React" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2nOSsnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wheu5cle6t1dsmj96g7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2nOSsnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wheu5cle6t1dsmj96g7g.png" alt="React" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Down-ward Data Flow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JRt0c1xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjgtnf4ws4ja2t7z8qc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JRt0c1xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjgtnf4ws4ja2t7z8qc8.png" alt="React" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The parent has to be More Statefull.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Parents should have the most of the state and they are passed using the state.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s take an example of to-do list&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It will have a &lt;code&gt;To-do list&lt;/code&gt; component , a &lt;code&gt;To-do&lt;/code&gt; component and in the To-do component their are many smaller Component. So what we can do is to keep all that changing data in state and pass it as a props.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sks2WjEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6f2udoc9upquwns7oum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sks2WjEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6f2udoc9upquwns7oum.png" alt="React Design" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding&lt;/strong&gt; 😄&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploying a Git Subdirectory to Heroku</title>
      <author>Rodrigo Rojas</author>
      <pubDate>Tue, 11 Jan 2022 19:26:11 +0000</pubDate>
      <link>https://dev.to/crrojas88/deploying-a-git-subdirectory-to-heroku-23ld</link>
      <guid>https://dev.to/crrojas88/deploying-a-git-subdirectory-to-heroku-23ld</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qJHXSYxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fxelxnsr5iusf3fiwal.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qJHXSYxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fxelxnsr5iusf3fiwal.jpg" alt="Mutombo No Image"&gt;&lt;/a&gt;&lt;/p&gt;
Not in Heroku's house



&lt;p&gt;Deploying your app to Heroku is stressful enough. If you have a subdirectory that you want to deploy by trying to push the whole repo you're gonna have a bad time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well why can't I deploy the whole repo?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, for starters, Heroku doesn't like that, and it'll let you know exactly why by showing you the following errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5S2-0_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ucwc70h74soptprzypk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5S2-0_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ucwc70h74soptprzypk.png" alt="Buildpack Error"&gt;&lt;/a&gt;&lt;/p&gt;
It's not you it's your buildpack



&lt;p&gt;My first instinct was to (cry) manually set the appropriate buildpack for a node.js server as mentioned by Heroku's &lt;a href="https://devcenter.heroku.com/articles/buildpacks"&gt;Dev Center&lt;/a&gt;. However, Heroku states that...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By default, these buildpacks will be searched in this order until a match is detected and used to compile your app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So there really isn't any need for me to manually set the buildpack (I did it anyways bc I'm paranoid like that).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku buildpacks:set heroku/nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now I've manually set the buildpack to Node.js and tried pushing this bad boy to Heroku (After committing of course). &lt;em&gt;Fingers crossed&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TybZD2ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uencpl11m3etwegd1i7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TybZD2ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uencpl11m3etwegd1i7w.png" alt="Push rejected error"&gt;&lt;/a&gt;&lt;/p&gt;
Feelsbadman



&lt;p&gt;Luckily, the errors give us a clue as to what the problem is. In this case, it looks like I'm trying to deploy a repo with multiple directories. If you look at Heroku's &lt;a href="https://devcenter.heroku.com/articles/deploying-nodejs"&gt;Dev Center&lt;/a&gt; once again you'll see that:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Heroku Node.js support will only be applied when the application has a &lt;code&gt;package.json&lt;/code&gt; file in the &lt;u&gt;root directory&lt;/u&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cu0IDq3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl69ckbpafpjr7c9ikc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cu0IDq3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl69ckbpafpjr7c9ikc2.png" alt="Directory errors"&gt;&lt;/a&gt;&lt;/p&gt;
That's a lot of red...



&lt;p&gt;So in my case, I want to deploy one specific subdirectory that has a &lt;code&gt;package.json&lt;/code&gt; file. But instead I'm trying to deploy the entire repo which doesn't have a &lt;code&gt;package.json&lt;/code&gt; file in it and in effect making Heroku bug out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-fix"&gt;
  &lt;/a&gt;
  The Fix
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Can you just tell me what to do pls?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sure! Let's start by assuming you've completed all the Heroku prerequisites:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g heroku
heroku login
heroku create
heroku git:remote -a my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I was given a random name for my app by Heroku so I decided to change it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku apps:rename my-new-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jfOIfKDP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm0c1d2p3b12x5qrum2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jfOIfKDP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm0c1d2p3b12x5qrum2g.png" alt="Heroku rename"&gt;&lt;/a&gt;&lt;/p&gt;
What's in a name?



&lt;p&gt;Once renamed I make sure to update my git remotes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku git:remote -a my-new-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6toBJv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcqfjf4xat3ogl9hrjle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6toBJv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcqfjf4xat3ogl9hrjle.png" alt="Update git remote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the haymaker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git subtree push --prefix path/to/subdirectory heroku main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBlGOPt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bywatx3ikyz8wmv18mek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBlGOPt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bywatx3ikyz8wmv18mek.png" alt="Git subtree error"&gt;&lt;/a&gt;&lt;/p&gt;
sigh



&lt;p&gt;Well this is embarrassing. Looks like I need to run this command from the top level of the working tree. A couple of &lt;code&gt;cd ..&lt;/code&gt;'s later and...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAG37YoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxj79stdxzp7c8qei8k0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAG37YoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxj79stdxzp7c8qei8k0.png" alt="Heroku enumerating"&gt;&lt;/a&gt;&lt;/p&gt;
Looking good so far...



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqGppFpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/artb0fk23pbjwb319djz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqGppFpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/artb0fk23pbjwb319djz.png" alt="Node.js detected"&gt;&lt;/a&gt;&lt;/p&gt;
Heroku you so smart bb



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ER5RhqG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtxe9t1obqzohut8nbq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ER5RhqG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtxe9t1obqzohut8nbq6.png" alt="Heroku success"&gt;&lt;/a&gt;&lt;/p&gt;
Success!



&lt;p&gt;You have now successfully deployed your subdirectory to Heroku! Thanks for reading!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUPc9LLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/49/b8/14/49b814d695051f4b35d0ffb6d4d4b9c7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUPc9LLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/49/b8/14/49b814d695051f4b35d0ffb6d4d4b9c7.gif" alt="Jim Carey beautiful"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#extra-credit-npmscripts"&gt;
  &lt;/a&gt;
  Extra Credit: npm-scripts
&lt;/h2&gt;

&lt;p&gt;Kudos if you're still reading. Let's say that I want to make changes to my app's frontend and backend and deploy to Heroku. Writing...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git subtree push --prefix path/to/subdirectory heroku main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...is too verbose for my taste so I'm going to add some npm-scripts to the &lt;code&gt;package.json&lt;/code&gt; of my backend repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build:ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rm -rf build &amp;amp;&amp;amp; cd ../../part2/phonebook-frontend &amp;amp;&amp;amp; npm run build --prod &amp;amp;&amp;amp; cp -r build ../../part3/phonebook-backend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deploy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git subtree push --prefix part3/phonebook-backend heroku main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deploy:full&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;npm run build:ui &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m uibuild &amp;amp;&amp;amp; git push &amp;amp;&amp;amp; npm run deploy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logs:prod&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;heroku logs --tail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The script &lt;code&gt;npm run build:ui&lt;/code&gt; builds the frontend, then copies the production version under the backend repository.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run deploy&lt;/code&gt; pushes the current backend to Heroku.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run deploy:full&lt;/code&gt; combines the two and has the necessary git commands to update the backend repository.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run logs:prod&lt;/code&gt; shows the heroku logs which comes in handy for debugging.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that the paths in the script &lt;code&gt;build:ui&lt;/code&gt; &amp;amp; &lt;code&gt;deploy&lt;/code&gt; depend on the location of repositories in your file system!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-and-shoutouts"&gt;
  &lt;/a&gt;
  Resources and Shoutouts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/deploying-nodejs"&gt;Deploying Node JS to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/buildpacks"&gt;Heroku Buildpacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@porteneuve/mastering-git-subtrees-943d29a798ec"&gt;Mastering Git Subtrees&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>tutorial</category>
      <category>git</category>
      <category>heroku</category>
    </item>
    <item>
      <title>How I've set up my new Windows development environment in 2022</title>
      <author>Tim Deschryver</author>
      <pubDate>Tue, 11 Jan 2022 19:13:15 +0000</pubDate>
      <link>https://dev.to/this-is-learning/how-ive-set-up-my-new-windows-development-environment-in-2022-5h42</link>
      <guid>https://dev.to/this-is-learning/how-ive-set-up-my-new-windows-development-environment-in-2022-5h42</guid>
      <description>&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;In the first week of 2022, I had the joy to receive a new machine from my new employer &lt;a href="https://www.dotnetlab.eu/"&gt;dotNET lab&lt;/a&gt;. In just a few hours I was up and running, let's take a look at my setup as a full-stack .NET and Angular developer.&lt;/p&gt;

&lt;p&gt;Getting a new "toy" is always exciting but it's a double feeling because a new development environment involves manual work (remember what software to download, browse to the download page, step-through the install wizard), which is time-consuming. The last time that I configured my machine is a couple of years ago, and I remember that there were lots of sighs involved.&lt;br&gt;
This time, a lot in the Windows eco-system has changed. In comparison to the previous time, it was a breeze, making this a fun experience!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-software-with-raw-winget-endraw-"&gt;
  &lt;/a&gt;
  Install Software with &lt;code&gt;winget&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;After the initial installation (and updates), the first step is to make sure that &lt;code&gt;winget&lt;/code&gt; is installed, and that it's updated to the latest version. You can do this by going to the Microsoft Store and searching for &lt;code&gt;winget&lt;/code&gt; (in the store it's listed as "App Installer").&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSurqI0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/winget.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSurqI0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/winget.png" alt="Installing winget via the Microsoft Store" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;winget&lt;/code&gt; has two important commands &lt;code&gt;winget search&lt;/code&gt; to search for software, and &lt;code&gt;winget install&lt;/code&gt; to install the software. When using the &lt;code&gt;install&lt;/code&gt; command, note that you can pass it the &lt;code&gt;interactive&lt;/code&gt; flag to intervene with the installation details by changing the defaults.&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;winget&lt;/code&gt; is installed, open a new command prompt and copy-paste the next script.&lt;br&gt;
This script installs all of the software that I've used throughout the last month in a single command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Browser&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.Edge.Beta
winget &lt;span class="nb"&gt;install &lt;/span&gt;Google.Chrome.Beta
winget &lt;span class="nb"&gt;install &lt;/span&gt;Mozilla.Firefox.DeveloperEdition

&lt;span class="c"&gt;# Chat&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.Teams
winget &lt;span class="nb"&gt;install &lt;/span&gt;Discord.Discord.Canary

&lt;span class="c"&gt;# Windows and CLI&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.PowerToys &lt;span class="c"&gt;# https://github.com/microsoft/PowerToys&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.WindowsTerminal.Preview
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.PowerShell.Preview
winget &lt;span class="nb"&gt;install &lt;/span&gt;JanDeDobbeleer.OhMyPosh

&lt;span class="c"&gt;# Git&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;Git.Git
winget &lt;span class="nb"&gt;install &lt;/span&gt;GitHub.cli

&lt;span class="c"&gt;# Development Enviroment&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.dotnet
winget &lt;span class="nb"&gt;install &lt;/span&gt;OpenJS.NodeJS
winget &lt;span class="nb"&gt;install &lt;/span&gt;Yarn.Yarn

&lt;span class="c"&gt;# IDE&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.VisualStudio.2022.Enterprise-Preview
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.VisualStudioCode.Insiders
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.SQLServer.2019.Developer
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.SQLServerManagementStudio
winget &lt;span class="nb"&gt;install &lt;/span&gt;Microsoft.AzureDataStudio.Insiders

winget &lt;span class="nb"&gt;install &lt;/span&gt;JetBrains.ReSharper
winget &lt;span class="nb"&gt;install &lt;/span&gt;JetBrains.Rider
winget &lt;span class="nb"&gt;install &lt;/span&gt;JetBrains.WebStorm
winget &lt;span class="nb"&gt;install &lt;/span&gt;JetBrains.DataGrip

&lt;span class="c"&gt;# Miscellaneous&lt;/span&gt;
winget &lt;span class="nb"&gt;install &lt;/span&gt;7zip.7zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above script installs the majority, but there are a few programs that need to be installed manually because they aren't available on &lt;code&gt;winget&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/coreybutler/nvm-windows/releases"&gt;NVM for Windows&lt;/a&gt;, easily switch between different Node.JS versions with a single command&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gpg4win.org/download.html"&gt;Gpg4win&lt;/a&gt;, to sign git commits&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#multiple-nodejs-versions-with-raw-nvm-endraw-"&gt;
  &lt;/a&gt;
  Multiple Node.JS versions with &lt;code&gt;NVM&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;I use &lt;code&gt;nvm&lt;/code&gt; because I need to work within multiple Node.JS versions.&lt;br&gt;
Via its CLI, I can install (&lt;code&gt;nvm install&lt;/code&gt;) the required versions and easily switch (&lt;code&gt;nvm use&lt;/code&gt;) between these versions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;install &lt;/span&gt;14
nvm use 14.18.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to start the command prompt with administrator privileges enabled when you're getting errors while executing the &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;use&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dotnet-tools"&gt;
  &lt;/a&gt;
  dotNET Tools
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/dotnet/tye"&gt;Tye&lt;/a&gt; has been indispensable in my toolkit for the past year.&lt;br&gt;
I was immediately hooked from the first time when I heard about this tool.&lt;/p&gt;

&lt;p&gt;Tye makes the development experience a lot smoother when it's required to run more than one application at once.&lt;br&gt;
With a single command, all of the development instances (services, applications) are spawned locally (and can be debugged), making it effortless to run a development environment. For example, a .NET Web API and an Angular frontend.&lt;/p&gt;

&lt;p&gt;To install Tye, use the &lt;code&gt;dotnet tool install&lt;/code&gt; command and install Tye globally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet tool &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--global&lt;/span&gt; Microsoft.Tye &lt;span class="nt"&gt;--version&lt;/span&gt; 0.10.0-alpha.21420.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run Tye, a configuration file is required, so let's create one.&lt;br&gt;
The following example configures two projects (project1 and project2) that have a .NET backend and an Angular frontend.&lt;/p&gt;

&lt;p&gt;For the .NET instance, we can simply point to the &lt;code&gt;csproj&lt;/code&gt; to run the API.&lt;br&gt;
The Angular frontend is served by navigating to the Angular directory and running the serve command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MyAwesomeProject&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;project1-backend&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;C:/Users/timde/dev/Project1/src/Project1.Api/Project1.Api.csproj&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;project1&lt;/span&gt;
    &lt;span class="na"&gt;bindings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https&lt;/span&gt;
        &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4061&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;project1-frontend&lt;/span&gt;
    &lt;span class="na"&gt;executable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cmd&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;project1&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;/c&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;cd&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;C:/Users/timde/dev/Project1-Frontend&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;start'&lt;/span&gt;
    &lt;span class="na"&gt;bindings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https&lt;/span&gt;
        &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4200&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;project2-backend&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;C:/Users/timde/dev/Project2/src/Project2.Api/Project2.Api.csproj&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;project2&lt;/span&gt;
    &lt;span class="na"&gt;bindings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https&lt;/span&gt;
        &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4062&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;project2-frontend&lt;/span&gt;
    &lt;span class="na"&gt;executable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cmd&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;project2&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;/c&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;cd&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;C:/Users/timde/dev/Project2-Frontend&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;start'&lt;/span&gt;
    &lt;span class="na"&gt;bindings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https&lt;/span&gt;
        &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I can use the &lt;code&gt;tye run&lt;/code&gt; command to run one specific project or all projects.&lt;br&gt;
By using the &lt;code&gt;watch&lt;/code&gt; flag, the application also hot reloads when a change is made to a file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# run all&lt;/span&gt;
tye run &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;span class="c"&gt;# run a specific project&lt;/span&gt;
tye run &lt;span class="nt"&gt;--tags&lt;/span&gt; project1 &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run Tye from all directories, specify the tye config path.&lt;br&gt;
This allows me to start my development environment from everywhere, without that I have to navigate to the directory where the tye config exists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# run all&lt;/span&gt;
tye run &lt;span class="s2"&gt;"C:&lt;/span&gt;&lt;span class="se"&gt;\U&lt;/span&gt;&lt;span class="s2"&gt;sers&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;imde&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="s2"&gt;ev&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="s2"&gt;ork&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;ye.yaml"&lt;/span&gt; &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;span class="c"&gt;# run a specific project&lt;/span&gt;
tye run &lt;span class="s2"&gt;"C:&lt;/span&gt;&lt;span class="se"&gt;\U&lt;/span&gt;&lt;span class="s2"&gt;sers&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;imde&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="s2"&gt;ev&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="s2"&gt;ork&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;ye.yaml"&lt;/span&gt; &lt;span class="nt"&gt;--tags&lt;/span&gt; project1 &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tye also comes with a dashboard to see all the instances that are up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uoFHG42f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/tye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uoFHG42f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/tye.png" alt="Tye dashboard showing that project 1 is running" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enhancing-the-terminal"&gt;
  &lt;/a&gt;
  Enhancing the Terminal
&lt;/h2&gt;

&lt;p&gt;To make the terminal awesome, I'm using the &lt;a href="https://docs.microsoft.com/en-us/windows/terminal/"&gt;Windows Terminal&lt;/a&gt; together with &lt;a href="https://ohmyposh.dev/"&gt;Oh My Posh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I compare the Windows Terminal as the default Command Prompt on steroids that has built-in tabs, and it can be tweaked to my preferences. This makes me feel happy, resulting in an increased productivity.&lt;/p&gt;

&lt;p&gt;Via the settings of the Windows Terminal, I set the default font and the default profile, which uses PowershellCore.&lt;br&gt;
I've also added a few shortcuts to open (ctrl+t) and close (ctrl+w) tabs.&lt;/p&gt;

&lt;p&gt;I've set the font to a font family from &lt;a href="https://www.nerdfonts.com/"&gt;Nerd Fonts&lt;/a&gt; to display the beautiful icons that are used with Oh My Posh. This font, or an alternative one, can be downloaded from the Nerd Fonts &lt;a href="https://www.nerdfonts.com/font-downloads"&gt;download page&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://aka.ms/terminal-profiles-schema"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"actions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"copy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"singleLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+c"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"paste"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+v"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"newTab"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+t"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"find"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+shift+f"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"splitPane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"split"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"splitMode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"duplicate"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"alt+shift+d"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"closeTab"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+w"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"copyFormatting"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"copyOnSelect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"defaultProfile"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{574e775e-4f2a-5b96-ac1e-a2962a402336}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"profiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"defaults"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"font"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"face"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"CaskaydiaCove Nerd Font Mono"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"list"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"guid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{574e775e-4f2a-5b96-ac1e-a2962a402336}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"hidden"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PowerShell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Windows.Terminal.PowershellCore"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"commandline"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"powershell.exe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"guid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"hidden"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Windows PowerShell"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"commandline"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cmd.exe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"guid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"hidden"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Command Prompt"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"guid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{b453ae62-4e3d-5e58-b989-0a998ec441b8}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"hidden"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Azure Cloud Shell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Windows.Terminal.Azure"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"guid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{2ece5bfe-50ed-5f3a-ab87-5cd4baafed2b}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"hidden"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Git Bash"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Git"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"schemes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make the terminal cozy and pretty, I'm using &lt;a href="https://ohmyposh.dev/"&gt;Oh My Posh&lt;/a&gt;.&lt;br&gt;
Oh My Posh also allows me to add key information to my prompt, making it more useful than the normal prompt. For example, my modified Oh My Posh theme (based on the Pure theme) shows the git status, the .NET, and Angular versions. Spoiler, Oh My Posh can do a lot more! For some inspiration, take a look at the &lt;a href="https://ohmyposh.dev/docs/themes"&gt;default themes&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"console_title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"console_title_style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"console_title_template"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{{if .Root}}(Admin){{end}} {{.Path}}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"blocks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prompt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"alignment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"newline"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"segments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#f8c400"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"full"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prompt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"alignment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"segments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#ffe893"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"fetch_stash_count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"fetch_status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"fetch_upstream_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"branch_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"github_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"branch_ahead_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;#88C0D0&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;21e1 &amp;lt;/&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"branch_behind_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;#88C0D0&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;21e3 &amp;lt;/&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"local_working_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;#FFAFD7&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;002a&amp;lt;/&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"template"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{{ .UpstreamIcon }}{{ .HEAD }}{{ .BranchStatus }}{{ if .Working.Changed }} &lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;F044 {{ .Working.String }}{{ end }}{{ if and (.Working.Changed) (.Staging.Changed) }} |{{ end }}{{ if .Staging.Changed }} &lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;F046 {{ .Staging.String }}{{ end }}{{ if gt .StashCount 0 }} &lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;F692 {{ .StashCount }}{{ end }}"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prompt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"alignment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"segments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dotnet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#512bd4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"leading_diamond"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"trailing_diamond"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"display_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"  "&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"angular"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#dd0031"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"display_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;" &lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s2"&gt;E753 "&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"exit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"diamond"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"always_enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To also render the icons Visual Studio Code, set the terminal's font of Visual Studio Code (via &lt;code&gt;terminal.integrated.fontFamily&lt;/code&gt;) to the same font from the Windows Terminal config. By doing this, you'll get the same experience no matter where you are.&lt;/p&gt;

&lt;p&gt;For example, the experience within an Angular repository looks as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBjl1CpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/angular-terminal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBjl1CpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/angular-terminal.png" alt="The terminal shows the path, the current branch, and the installed Angular version" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more details and options about the terminal, I highly recommend &lt;a href="https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal"&gt;My Ultimate PowerShell prompt with Oh My Posh and the Windows Terminal&lt;/a&gt; by &lt;a href="https://twitter.com/shanselman"&gt;Scott Hanselman&lt;/a&gt;, or the recorded version &lt;a href="https://www.youtube.com/watch?v=VT2L1SXFq9U"&gt;How to make the ultimate Terminal Prompt on Windows 11&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#powershell-profile"&gt;
  &lt;/a&gt;
  Powershell Profile
&lt;/h2&gt;

&lt;p&gt;Here's where things get interesting, and this part often raises eyebrows while I'm pair programming.&lt;/p&gt;

&lt;p&gt;Because the default terminal uses Powershell a lot of tasks can be scripted. To reduce my keystrokes, I like to create aliases and shortcuts to quickly get done what I want to do. The best part is that these tasks are at my disposal when I'm in the terminal.&lt;/p&gt;

&lt;p&gt;The Powershell scripts are created in a &lt;a href="(https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2#the-profile-variable)"&gt;Powershell profile&lt;/a&gt;, accessible via the &lt;code&gt;$PROFILE&lt;/code&gt; variable.&lt;br&gt;
To create the profile, either manually create the file at &lt;code&gt;"C:\Users\USER\Documents\PowerShell\Microsoft.PowerShell_profile.ps1"&lt;/code&gt;, or use a command to create and open the file, e.g. &lt;code&gt;code-insiders $PROFILE&lt;/code&gt; (if you're using the normal Visual Studio Code, use &lt;code&gt;code $PROFILE&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;My profile, which can be found below, creates a couple of functions and aliases to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;navigate to frequent folders&lt;/li&gt;
&lt;li&gt;add a wrapper and some templates to the most common git commands&lt;/li&gt;
&lt;li&gt;keep a history for used commands&lt;/li&gt;
&lt;li&gt;register shortcuts so I don't have to type the whole command
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight postscript"&gt;&lt;code&gt;&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;For&lt;/span&gt; &lt;span class="nf"&gt;the&lt;/span&gt; &lt;span class="nf"&gt;first&lt;/span&gt; &lt;span class="nf"&gt;time&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="nf"&gt;Terminal-Icons&lt;/span&gt; &lt;span class="nf"&gt;with&lt;/span&gt;
&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;Install-Module&lt;/span&gt; &lt;span class="nf"&gt;-Name&lt;/span&gt; &lt;span class="nf"&gt;Terminal-Icons&lt;/span&gt; &lt;span class="nf"&gt;-Repository&lt;/span&gt; &lt;span class="nf"&gt;PSGallery&lt;/span&gt;
&lt;span class="nf"&gt;Import-Module&lt;/span&gt; &lt;span class="nf"&gt;Terminal-Icons&lt;/span&gt;

&lt;span class="nf"&gt;oh-my-posh&lt;/span&gt; &lt;span class="nf"&gt;--init&lt;/span&gt; &lt;span class="nf"&gt;--shell&lt;/span&gt; &lt;span class="nf"&gt;pwsh&lt;/span&gt; &lt;span class="nf"&gt;--config&lt;/span&gt; &lt;span class="nf"&gt;~&lt;/span&gt;&lt;span class="nv"&gt;/ohmyposh-theme.omp.json&lt;/span&gt; &lt;span class="nf"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;Invoke-Expression&lt;/span&gt;

&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;History&lt;/span&gt;

&lt;span class="nf"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="nf"&gt;-PredictionSource&lt;/span&gt; &lt;span class="nf"&gt;History&lt;/span&gt;
&lt;span class="nf"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="nf"&gt;-PredictionViewStyle&lt;/span&gt; &lt;span class="nf"&gt;ListView&lt;/span&gt;
&lt;span class="nf"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="nf"&gt;-EditMode&lt;/span&gt; &lt;span class="nf"&gt;Windows&lt;/span&gt;

&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;Alias&lt;/span&gt;

&lt;span class="nf"&gt;Set-Alias&lt;/span&gt; &lt;span class="nf"&gt;-Name&lt;/span&gt; &lt;span class="nf"&gt;code&lt;/span&gt; &lt;span class="nf"&gt;-Value&lt;/span&gt; &lt;span class="nf"&gt;code-insiders&lt;/span&gt;

&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;Directory&lt;/span&gt; &lt;span class="nf"&gt;Alias&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;oss&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;cd&lt;/span&gt; &lt;span class="nf"&gt;"~&lt;/span&gt;&lt;span class="nv"&gt;/dev/oss/$args"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;work&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;cd&lt;/span&gt; &lt;span class="nf"&gt;"~&lt;/span&gt;&lt;span class="nv"&gt;/dev/work/$args"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;Git&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;checkout&lt;/span&gt; &lt;span class="nf"&gt;-b&lt;/span&gt; &lt;span class="nf"&gt;$args&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gbt&lt;/span&gt; &lt;span class="s"&gt;([string] $taskid)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;checkout&lt;/span&gt; &lt;span class="nf"&gt;-b&lt;/span&gt; &lt;span class="nf"&gt;"task&lt;/span&gt;&lt;span class="nv"&gt;/$taskid"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;checkout&lt;/span&gt; &lt;span class="nf"&gt;$args&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gmaster&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;gs&lt;/span&gt; &lt;span class="nf"&gt;'master'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gmain&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;gs&lt;/span&gt; &lt;span class="nf"&gt;'main'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gdev&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;gs&lt;/span&gt; &lt;span class="nf"&gt;'develop'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="nf"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;commit&lt;/span&gt; &lt;span class="nf"&gt;-m&lt;/span&gt; &lt;span class="nf"&gt;$args&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gfeat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;($null -eq $args[1])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"feat:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[0])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"feat&lt;/span&gt;&lt;span class="s"&gt;($($args[0]))&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[1])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gfix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;($null -eq $args[1])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"fix:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[0])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"fix&lt;/span&gt;&lt;span class="s"&gt;($($args[0]))&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[1])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gdocs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;($null -eq $args[1])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"docs:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[0])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"docs&lt;/span&gt;&lt;span class="s"&gt;($($args[0]))&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[1])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gstyle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;($null -eq $args[1])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"style:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[0])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"style&lt;/span&gt;&lt;span class="s"&gt;($($args[0]))&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[1])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;grefactor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;($null -eq $args[1])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"refactor:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[0])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"refactor&lt;/span&gt;&lt;span class="s"&gt;($($args[0]))&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[1])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gperf&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;($null -eq $args[1])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"perf:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[0])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"perf&lt;/span&gt;&lt;span class="s"&gt;($($args[0]))&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[1])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gchore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;($null -eq $args[1])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"chore:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[0])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;gco&lt;/span&gt; &lt;span class="nf"&gt;"chore&lt;/span&gt;&lt;span class="s"&gt;($($args[0]))&lt;/span&gt;&lt;span class="nf"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$&lt;/span&gt;&lt;span class="s"&gt;($args[1])&lt;/span&gt;&lt;span class="nf"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gpu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;goops&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="nf"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;commit&lt;/span&gt; &lt;span class="nf"&gt;--amend&lt;/span&gt; &lt;span class="nf"&gt;--no-edit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gfp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="nf"&gt;--force-with-lease&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;gr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;reset&lt;/span&gt; &lt;span class="nf"&gt;--hard&lt;/span&gt;
    &lt;span class="nf"&gt;git&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt; &lt;span class="nf"&gt;-f&lt;/span&gt; &lt;span class="nf"&gt;-d&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;Macros&lt;/span&gt;

&lt;span class="nf"&gt;#&lt;/span&gt; &lt;span class="nf"&gt;Inspired&lt;/span&gt; &lt;span class="nf"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;Scott's&lt;/span&gt; &lt;span class="nf"&gt;profile&lt;/span&gt; &lt;span class="nf"&gt;https:&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;/gist.github.com/shanselman/25f5550ad186189e0e68916c6d7f44c3&lt;/span&gt;
&lt;span class="nf"&gt;Set-PSReadLineKeyHandler&lt;/span&gt; &lt;span class="nf"&gt;-Key&lt;/span&gt; &lt;span class="nf"&gt;Ctrl+Shift+b&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-BriefDescription&lt;/span&gt; &lt;span class="nf"&gt;BuildCurrentDirectory&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-LongDescription&lt;/span&gt; &lt;span class="nf"&gt;"Build&lt;/span&gt; &lt;span class="nf"&gt;the&lt;/span&gt; &lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="nf"&gt;directory"&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-ScriptBlock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::RevertLine&lt;/span&gt;&lt;span class="s"&gt;()&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;(Test-Path -Path ".&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="err"&gt;package.jso&lt;/span&gt;&lt;span class="se"&gt;n&lt;/span&gt;&lt;span class="s"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::Insert&lt;/span&gt;&lt;span class="s"&gt;("npm run build")&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::Insert&lt;/span&gt;&lt;span class="s"&gt;("dotnet build")&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::AcceptLine&lt;/span&gt;&lt;span class="s"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;Set-PSReadLineKeyHandler&lt;/span&gt; &lt;span class="nf"&gt;-Key&lt;/span&gt; &lt;span class="nf"&gt;Ctrl+Shift+t&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-BriefDescription&lt;/span&gt; &lt;span class="nf"&gt;BuildCurrentDirectory&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-LongDescription&lt;/span&gt; &lt;span class="nf"&gt;"Build&lt;/span&gt; &lt;span class="nf"&gt;the&lt;/span&gt; &lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="nf"&gt;directory"&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-ScriptBlock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::RevertLine&lt;/span&gt;&lt;span class="s"&gt;()&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;(Test-Path -Path ".&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="err"&gt;package.jso&lt;/span&gt;&lt;span class="se"&gt;n&lt;/span&gt;&lt;span class="s"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::Insert&lt;/span&gt;&lt;span class="s"&gt;("npm run test")&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::Insert&lt;/span&gt;&lt;span class="s"&gt;("dotnet test")&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::AcceptLine&lt;/span&gt;&lt;span class="s"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;Set-PSReadLineKeyHandler&lt;/span&gt; &lt;span class="nf"&gt;-Key&lt;/span&gt; &lt;span class="nf"&gt;Ctrl+Shift+s&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-BriefDescription&lt;/span&gt; &lt;span class="nf"&gt;StartCurrentDirectory&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-LongDescription&lt;/span&gt; &lt;span class="nf"&gt;"Start&lt;/span&gt; &lt;span class="nf"&gt;the&lt;/span&gt; &lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="nf"&gt;directory"&lt;/span&gt; &lt;span class="nf"&gt;`&lt;/span&gt;
    &lt;span class="nf"&gt;-ScriptBlock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::RevertLine&lt;/span&gt;&lt;span class="s"&gt;()&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt;&lt;span class="s"&gt;(Test-Path -Path ".&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="err"&gt;package.jso&lt;/span&gt;&lt;span class="se"&gt;n&lt;/span&gt;&lt;span class="s"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::Insert&lt;/span&gt;&lt;span class="s"&gt;("npm start")&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::Insert&lt;/span&gt;&lt;span class="s"&gt;("dotnet run")&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Microsoft.PowerShell.PSConsoleReadLine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;::AcceptLine&lt;/span&gt;&lt;span class="s"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI_9MDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/terminal-history.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI_9MDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/terminal-history.png" alt='Shows a history of npm run commands when I type "npm run", I can also browse through this list' width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-defaults"&gt;
  &lt;/a&gt;
  Git Defaults
&lt;/h2&gt;

&lt;p&gt;The following script sets a git identity and configures git to behave the way that I want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"first last"&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"name@example.com"&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; push.default current
git config &lt;span class="nt"&gt;--global&lt;/span&gt; pull.rebase &lt;span class="nb"&gt;true
&lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; core.editor code-insiders
git config &lt;span class="nt"&gt;--global&lt;/span&gt; init.defaultBranch main
&lt;span class="c"&gt;# sign commits&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; gpg.program &lt;span class="s2"&gt;"C:/Program Files (x86)/GnuPG/bin/gpg.exe"&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; commit.gpgsign &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sign commits I've followed the blogpost &lt;a href="https://www.ankursheel.com/blog/securing-git-commits-windows"&gt;A guide to securing git commits from tricking you on Windows&lt;/a&gt; by &lt;a href="https://twitter.com/ankur_sheel"&gt;Ankur Sheel&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-studio-code-plugins-and-settings"&gt;
  &lt;/a&gt;
  Visual Studio Code Plugins and Settings
&lt;/h2&gt;

&lt;p&gt;If you know me, you already know that I like to customize my Visual Studio Code setup.&lt;br&gt;
The following scripts don't include (color or icon) themes because I like to frequently rotate between them, depending on my mood.&lt;/p&gt;

&lt;p&gt;However, the next script installs all of the mandatory extensions to be productive.&lt;br&gt;
Because I'm using the Insiders version of Visual Studio Code, I'm using &lt;code&gt;code-insiders&lt;/code&gt; instead of &lt;code&gt;code&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Formatting and Rules&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; dbaeumer.vscode-eslint &lt;span class="nt"&gt;--force&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; esbenp.prettier-vscode &lt;span class="nt"&gt;--force&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; formulahendry.auto-rename-tag &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# Git&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; github.vscode-pull-request-github &lt;span class="nt"&gt;--force&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; eamodio.gitlens-insiders &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# Angular&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; angular.ng-template &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# .NET&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; ms-dotnettools.csharp &lt;span class="nt"&gt;--force&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; visualstudioexptteam.vscodeintellicode &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# Markdown&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; yzhang.markdown-all-in-one &lt;span class="nt"&gt;--force&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; davidanson.vscode-markdownlint &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# Rest Client&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; rangav.vscode-thunder-client &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# Miscellaneous&lt;/span&gt;
code-insiders &lt;span class="nt"&gt;--install-extension&lt;/span&gt; github.copilot &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the completion, here's my entire &lt;code&gt;settings.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Cascadia Code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.lineHeight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.fontLigatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.dragAndDrop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.cursorSmoothCaretAnimation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.smoothScrolling"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"files.defaultLanguage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"markdown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"CaskaydiaCove NF"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"workbench.list.smoothScrolling"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visual-studio-exceptions-settings"&gt;
  &lt;/a&gt;
  Visual Studio Exceptions Settings
&lt;/h2&gt;

&lt;p&gt;A setting that has saved me a lot of time is the "Common Language Runtime Exceptions" setting.&lt;br&gt;
By default, the setting is partially enabled but I always enable it because it immediately points me to the source of the exception rather than I have to debug the entire stack to find the exception. When the setting is enabled, the debugger breaks on all exceptions and it navigates to the source. This makes it straightforward to find and fix bugs.&lt;/p&gt;

&lt;p&gt;To enable the setting, use the &lt;code&gt;ctrl+alt+e&lt;/code&gt; shortcut and tick the "Common Language Runtime Exceptions" checkbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo_g27Iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/vs-exception-settings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo_g27Iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/vs-exception-settings.png" alt='Enable "Common Language Runtime Exceptions"' width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-explorer-options"&gt;
  &lt;/a&gt;
  File Explorer Options
&lt;/h2&gt;

&lt;p&gt;As a software developer, seeing hidden files and more importantly, the file extension is a must. Via the "File Explorer Options" window these two options can be enabled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsCW1maK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/file-explorer-options.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsCW1maK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/file-explorer-options.png" alt="Modified file exploring options" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#allow-insecure-localhost"&gt;
  &lt;/a&gt;
  Allow Insecure Localhost
&lt;/h2&gt;

&lt;p&gt;To run an Angular application on HTTPS locally you can &lt;a href="https://medium.com/@richardr39/using-angular-cli-to-serve-over-https-locally-70dab07417c8"&gt;create a self-signed certificate&lt;/a&gt;, but I find it easier to allow invalid certificates on localhost. This is a flag that can be enabled via the browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edge: &lt;a href="https://dev.toedge://flags/#allow-insecure-localhost"&gt;edge://flags/#allow-insecure-localhost&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Chrome: &lt;a href="https://dev.tochrome://flags/#allow-insecure-localhost"&gt;chrome://flags/#allow-insecure-localhost&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qtDsz0wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/allow-insecure-localhost.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qtDsz0wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022/images/allow-insecure-localhost.png" alt="Enable invalid certifactes for localhost development" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From my recent experience, it's painless and swift to set up a new Windows machine anno 2022.&lt;br&gt;
To make our daily work more enjoyable, the Terminal and the IDE are configured to our needs and preferences.&lt;br&gt;
I've created PowerShell profile to script frequent tasks, making them easy and fast to run, often with only a few keystrokes. While these seem small, it definitely is a productivity boost.&lt;/p&gt;

&lt;p&gt;The last step is to clone your Git repository and start working.&lt;/p&gt;

&lt;p&gt;Enjoy your new device!&lt;/p&gt;




&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/how-i-have-set-up-my-new-windows-development-environment-in-2022"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>windows</category>
      <category>dotnet</category>
      <category>angular</category>
    </item>
    <item>
      <title>Local Shop Search - Search shop near you</title>
      <author>Nithin I Bhandari</author>
      <pubDate>Tue, 11 Jan 2022 18:43:44 +0000</pubDate>
      <link>https://dev.to/nithinibhandari1999/local-shop-search-search-shop-near-you-1135</link>
      <guid>https://dev.to/nithinibhandari1999/local-shop-search-search-shop-near-you-1135</guid>
      <description>&lt;p&gt;Local Shop Search is used to search a shop near you by a map.&lt;br&gt;
Shop keeper can add a shop and list his product.&lt;br&gt;
End-User can Search Products and can visit his shop to purchase the product.&lt;/p&gt;

&lt;p&gt;Live Website: &lt;a href="https://local-shop-search.netlify.app/search/"&gt;https://local-shop-search.netlify.app/search/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2MlhSu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt9ef1wmgwts7p6q1lqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2MlhSu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt9ef1wmgwts7p6q1lqe.png" alt="Website Demo" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB and MongoDB Autocomplete&lt;/li&gt;
&lt;li&gt;Node JS&lt;/li&gt;
&lt;li&gt;Express JS&lt;/li&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;Leaflet JS&lt;/li&gt;
&lt;li&gt;Netlify for frontend and Netlify serverless backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-search-functionality-works"&gt;
  &lt;/a&gt;
  How search functionality works
&lt;/h4&gt;

&lt;p&gt;Here i am using MongoDB autocomplete nGram which offer autocomplete search and location index to search query by location.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#aggregate-query-example"&gt;
  &lt;/a&gt;
  Aggregate query example
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client/blob/main/info/mongodbAggregateFunction.json"&gt;Code Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ls95c6Dr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00gpmpdqup15k9587mbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ls95c6Dr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00gpmpdqup15k9587mbn.png" alt="MongoDB Autocomplete Query Example" width="880" height="1192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#mongodb-autocomplete-index"&gt;
  &lt;/a&gt;
  MongoDB Autocomplete index
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client/blob/main/info/mongodbSearchIndex.json"&gt;Code Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CM-8aGF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1rph770xlkp03mr1zm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CM-8aGF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1rph770xlkp03mr1zm2.png" alt="MongoDB Autocomplete Index Example" width="624" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Live Link: &lt;a href="https://local-shop-search.netlify.app/search/"&gt;Visit Now&lt;/a&gt;&lt;br&gt;
Read Me: &lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client/blob/main/README.md"&gt;Visit Now&lt;/a&gt;&lt;br&gt;
Local Shop Search Front end: &lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client"&gt;Visit Now&lt;/a&gt;&lt;br&gt;
Local Shop Search Back end: &lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_api"&gt;Visit Now&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#how-to-deploy"&gt;
  &lt;/a&gt;
  How to deploy
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Clone frontend and backend code.&lt;/li&gt;
&lt;li&gt;Create an Imagekit account.&lt;/li&gt;
&lt;li&gt;Visit to Netlify and deploy the code, add all env variable.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Simple Text Editor with main functions (using Node.js)</title>
      <author>Lucifer25x</author>
      <pubDate>Tue, 11 Jan 2022 18:41:16 +0000</pubDate>
      <link>https://dev.to/lucifer25x/simple-text-editor-with-main-functions-using-nodejs-14h6</link>
      <guid>https://dev.to/lucifer25x/simple-text-editor-with-main-functions-using-nodejs-14h6</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/Lucifer25x/simple-text-editor"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBI1rch3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy53lef0ku3kq62yf42s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBI1rch3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy53lef0ku3kq62yf42s.png" alt="Image description" width="803" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open File&lt;/li&gt;
&lt;li&gt;Open Folder&lt;/li&gt;
&lt;li&gt;Edit File&lt;/li&gt;
&lt;li&gt;Save File&lt;/li&gt;
&lt;li&gt;Rename File/Folder&lt;/li&gt;
&lt;li&gt;Delete File/Folder&lt;/li&gt;
&lt;li&gt;Create New File&lt;/li&gt;
&lt;li&gt;Create New Folder&lt;/li&gt;
&lt;li&gt;Get location of files and folders&lt;/li&gt;
&lt;li&gt;Make Window title with file path&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#packages"&gt;
  &lt;/a&gt;
  Packages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Electron.js&lt;/li&gt;
&lt;li&gt;Node-fs&lt;/li&gt;
&lt;li&gt;Node-path&lt;/li&gt;
&lt;li&gt;Ace.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#please-give-star-to-repository-and-follow"&gt;
  &lt;/a&gt;
  Please give star to repository and follow.
&lt;/h4&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>linux</category>
      <category>programming</category>
    </item>
    <item>
      <title>Uni-Tab - One Tab, Many Uses</title>
      <author>Amogh Singh</author>
      <pubDate>Tue, 11 Jan 2022 18:31:45 +0000</pubDate>
      <link>https://dev.to/amoghsingh25/uni-tab-one-tab-many-purposes-348g</link>
      <guid>https://dev.to/amoghsingh25/uni-tab-one-tab-many-purposes-348g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;A single website to perform multiple functions like reading the news or a task tracker, with a main purpose to increase productivity and save time by decreasing the amount of different applications used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Github &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AmoghSingh25"&gt;
        AmoghSingh25
      &lt;/a&gt; / &lt;a href="https://github.com/AmoghSingh25/Uni-Tab"&gt;
        Uni-Tab
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Uni-Tab&lt;/h1&gt;
&lt;p&gt;A single website to perform multiple functions like reading the news or a task tracker, with a main purpose to increase productivity and save time by decreasing the amount of different applications used.&lt;/p&gt;
&lt;h3&gt;
Additional Resources / Info&lt;/h3&gt;
&lt;h4&gt;
&lt;a href="https://unitab.tk" rel="nofollow"&gt;Link to website&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;This website currently offers news, task trackers/To-Do list, a Web Search bar and a weather viewer.&lt;/p&gt;
&lt;h4&gt;
Software used : -&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB Atlas - Storing User information and data like tasks.&lt;/li&gt;
&lt;li&gt;Node.js and Express - Backend server code and routing&lt;/li&gt;
&lt;li&gt;Weather - &lt;a href="https://www.openweathermap.org" rel="nofollow"&gt;OpenWeatherMap API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;News - &lt;a href="https://newscatcherapi.com/" rel="nofollow"&gt;NewsCatcher News API&lt;/a&gt; and &lt;a href="https://newsdata.io/" rel="nofollow"&gt;NewsData.io API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;User authentication and creation - &lt;a href="https://firebase.google.com" rel="nofollow"&gt;Firebase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Clock - &lt;a href="https://www.momentjs.com" rel="nofollow"&gt;Moment.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Location - &lt;a href="https://ipinfo.io/" rel="nofollow"&gt;IPInfo.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Screenshots&lt;/h4&gt;
&lt;h5&gt;
Home Page&lt;/h5&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/1da1acfeffa36985e04960ca77bbb984591ad305e73f3f09b85ea5c23c36d256/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f3332397977676a6a6b72706c30386e6b6c706c6b2e6a706567"&gt;&lt;img src="https://camo.githubusercontent.com/1da1acfeffa36985e04960ca77bbb984591ad305e73f3f09b85ea5c23c36d256/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f3332397977676a6a6b72706c30386e6b6c706c6b2e6a706567" alt="Home Page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
Dashboard&lt;/h5&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c6f5b99889b34dead70f4555d7a9362236bdb88a2fc1f01fdd8704b9a939c76f/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f627665646161613079626c706e796e74756d70622e6a706567"&gt;&lt;img src="https://camo.githubusercontent.com/c6f5b99889b34dead70f4555d7a9362236bdb88a2fc1f01fdd8704b9a939c76f/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f627665646161613079626c706e796e74756d70622e6a706567" alt="Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
Tasks&lt;/h5&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b3293474c2c737c32ff1f0a04f8df9b6cde00febcf8edcae69094fc3cc962ec7/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f6e6c367079746f6d736232683563346d337469302e6a706567"&gt;&lt;img src="https://camo.githubusercontent.com/b3293474c2c737c32ff1f0a04f8df9b6cde00febcf8edcae69094fc3cc962ec7/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f6e6c367079746f6d736232683563346d337469302e6a706567" alt="Tasks"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
News&lt;/h5&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/abf826bc22954b2cbb5aab08aabe1e274ca7e1442fcb6df25a8e7eead7da551a/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f636a71336136356c64706f76776d6a786b6168642e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/abf826bc22954b2cbb5aab08aabe1e274ca7e1442fcb6df25a8e7eead7da551a/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f636a71336136356c64706f76776d6a786b6168642e706e67" alt="News"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
Weather&lt;/h5&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9a7e5b7c8f1d41dc9d8ddfa1873cba517e694923a8feffa398684261dfcce405/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f666e3672373577677a6668626a737239346e38762e6a706567"&gt;&lt;img src="https://camo.githubusercontent.com/9a7e5b7c8f1d41dc9d8ddfa1873cba517e694923a8feffa398684261dfcce405/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f666e3672373577677a6668626a737239346e38762e6a706567" alt="Weather"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/AmoghSingh25/Uni-Tab"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h4&gt;
  &lt;a href="#link-to-website"&gt;
  &lt;/a&gt;
  &lt;a href="https://unitab.tk"&gt;Link to website&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;This website currently offers news, task trackers/To-Do list, a Web Search bar and a weather viewer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#software-used-"&gt;
  &lt;/a&gt;
  Software used : -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB Atlas - Storing User information and data like tasks.&lt;/li&gt;
&lt;li&gt;Node.js and Express - Backend server code and routing&lt;/li&gt;
&lt;li&gt;Weather - &lt;a href="https://www.openweathermap.org"&gt;OpenWeatherMap API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;News - &lt;a href="https://newscatcherapi.com/"&gt;NewsCatcher News API&lt;/a&gt; and &lt;a href="https://newsdata.io/"&gt;NewsData.io API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;User authentication and creation - &lt;a href="https://firebase.google.com"&gt;Firebase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Clock - &lt;a href="https://www.momentjs.com"&gt;Moment.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Location - &lt;a href="https://ipinfo.io/"&gt;IPInfo.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2UTBHKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/329ywgjjkrpl08nklplk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2UTBHKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/329ywgjjkrpl08nklplk.jpeg" alt="Home Page" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#dashboard"&gt;
  &lt;/a&gt;
  Dashboard
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYcsazMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvedaaa0yblpnyntumpb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYcsazMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvedaaa0yblpnyntumpb.jpeg" alt="Dashboard" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#tasks"&gt;
  &lt;/a&gt;
  Tasks
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UM1RUaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl6pytomsb2h5c4m3ti0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UM1RUaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl6pytomsb2h5c4m3ti0.jpeg" alt="Tasks" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#news"&gt;
  &lt;/a&gt;
  News
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXLwZySd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjq3a65ldpovwmjxkahd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXLwZySd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjq3a65ldpovwmjxkahd.png" alt="News" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#weather"&gt;
  &lt;/a&gt;
  Weather
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSmd1vX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn6r75wgzfhbjsr94n8v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSmd1vX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn6r75wgzfhbjsr94n8v.jpeg" alt="Weather" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>A Minimalistic Approach to Feature Flagging Your Web App</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 11 Jan 2022 18:21:44 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/a-minimalistic-approach-to-feature-flagging-your-web-app-en0</link>
      <guid>https://dev.to/michaelmangial1/a-minimalistic-approach-to-feature-flagging-your-web-app-en0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-purpose"&gt;
  &lt;/a&gt;
  The Purpose
&lt;/h2&gt;

&lt;p&gt;It is a common occurrence that a product's web application needs to enable/disable features depending upon the circumstances.&lt;/p&gt;

&lt;p&gt;Some use cases include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wanting to merge features for an in-progress project without showing/releasing them to customers in production&lt;/li&gt;
&lt;li&gt;Wanting to preview in-progress work in staging environment&lt;/li&gt;
&lt;li&gt;Pausing features without removing them from source code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.jsx&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are three things we need to do to make this work well:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set a pattern for configuring dev flags locally&lt;/li&gt;
&lt;li&gt;Set a pattern for overriding dev flags in an environment&lt;/li&gt;
&lt;li&gt;Set a pattern for how to consume dev flags in the code&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#configuring-dev-flags-locally"&gt;
  &lt;/a&gt;
  Configuring Dev Flags Locally
&lt;/h2&gt;

&lt;p&gt;Dev flags are just configuration, so you can think of them as a single object that can be consumed anywhere in the codebase:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// if true, show the features for the beta launch&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we will need to specify the "defaults" that control the live production experience and the "overrides" that control the local environment.&lt;/p&gt;

&lt;p&gt;For example, imagine you want the dev flag object to return &lt;code&gt;beta: false&lt;/code&gt; in production (before its release), but &lt;code&gt;beta: true&lt;/code&gt; locally so that you can develop features before the release.&lt;/p&gt;

&lt;p&gt;First, create a &lt;code&gt;dev-flags-default.js&lt;/code&gt; file that controls the live production experience (the default experience):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dev-flags-defaults.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Don't show beta features in production&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file that can specify the overrides fo the local experience:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dev-flags-overrides.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Show beta features as you develop&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You'll want to add this file to the &lt;code&gt;.gitignore&lt;/code&gt; since the overrides should always be specific to the environment (more on that later).&lt;/p&gt;

&lt;p&gt;Finally, expose a &lt;code&gt;dev-flags.js&lt;/code&gt; file (the file that will be consumed by other files in the codebase):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dev-flags.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dev-flags-defaults.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;overrides&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dev-flags-overrides.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you will be able to control what features to render based upon whether you are in a production or local environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-dev-flags-based-on-environment"&gt;
  &lt;/a&gt;
  Configuring Dev Flags Based on Environment
&lt;/h2&gt;

&lt;p&gt;The code above expects a &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file in every environment.&lt;/p&gt;

&lt;p&gt;Obviously, you can add it manually to each local environment and instruct all the developers to do so via documentation.&lt;/p&gt;

&lt;p&gt;However, we'll have to think about how this will work when the app is deployed to various environments (i.e. staging and production).&lt;/p&gt;

&lt;p&gt;In the deployment pipeline, you'll need a step for adding the &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file with the overrides appropriate to the environment.&lt;/p&gt;

&lt;p&gt;For production, you can create a &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file that returns an empty object.&lt;/p&gt;

&lt;p&gt;For staging, you can copy the defaults and enable them as needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consuming-dev-flags"&gt;
  &lt;/a&gt;
  Consuming Dev Flags
&lt;/h2&gt;

&lt;p&gt;Once you have the dev flags patterns set up per environment, you can start writing code that toggles features based on a flag.&lt;/p&gt;

&lt;p&gt;Since dev flags frequently control revealing features of an in-progress project, you'll want to make the &lt;code&gt;!devFlags.someFlag&lt;/code&gt; code easy to cleanup (since it will eventually go away:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;devFlags&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dev-flags.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Bad&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;devFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someFlag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Good&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someFlag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to release a feature, you can cleanup the dev flags by deleting the &lt;code&gt;!devFlags.flag&lt;/code&gt; code (as opposed to copy and pasting the code in the &lt;code&gt;if&lt;/code&gt; block in the bad example).&lt;/p&gt;

&lt;p&gt;Sometimes, you may wish to enable a dev flag to release a feature/project as opposed to cleaning it up.&lt;/p&gt;

&lt;p&gt;This may be nice so that you can quickly enable the feature, make sure everything is sound, and then delete the flag and all its references in a later commit.&lt;/p&gt;

&lt;p&gt;🎉 Now you have an organized pattern for enabling/disabling features by environment. If you don't have something like this in your codebase, follow the steps above (it's just a few small files).&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>An AWS Community Builder Story</title>
      <author>Jason Andrews</author>
      <pubDate>Tue, 11 Jan 2022 18:18:42 +0000</pubDate>
      <link>https://dev.to/aws-builders/an-aws-community-builder-story-4j0b</link>
      <guid>https://dev.to/aws-builders/an-aws-community-builder-story-4j0b</guid>
      <description>&lt;p&gt;In early 2020, I was invited to apply to become an &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;AWS Community Builder&lt;/a&gt;. AWS Community Builders are enthusiasts who work together to learn from each other, create content, and share information about AWS. AWS offers hundreds of services, far too many for a single person to keep up with, so AWS Community Builders work together around topics of interest. I joined the Graviton group to help educate and promote AWS Graviton processors.&lt;/p&gt;

&lt;p&gt;The application window is now open to &lt;a href="https://bit.ly/32XnsZi"&gt;join the AWS Community Builders program&lt;/a&gt; so it’s a good time to share my experience and encourage others to apply. We are always looking for more people to promote AWS Graviton processors. Every community member has a unique story, and the diversity of the members make the program unique.&lt;/p&gt;

&lt;p&gt;One way I participate is by writing articles about &lt;a href="https://dev.to/jasonrandrews"&gt;Graviton related topics&lt;/a&gt; in the &lt;a href="https://dev.to/aws-builders"&gt;AWS Community Builders area on dev.to&lt;/a&gt;. Much of the AWS Community Builder communication takes place on Slack where builders connect with AWS employees and attend presentations by AWS experts. It has been a great program and I have enjoyed the networking and learning opportunities. It was exciting to meet some of the Community Builders in person at re:Invent 2021. It was my first time attending &lt;a href="https://reinvent.awsevents.com/"&gt;re:Invent&lt;/a&gt; and it was a great experience.&lt;/p&gt;

&lt;p&gt;As an AWS Community Builder, I enjoy promoting Graviton processors and the AWS managed services that work on Graviton. Specialized compute is the future, and the time is right for the Arm architecture to make a big impact. This is happening from the smallest sensor to the largest supercomputer. AWS is doing amazing things with EC2 instances powered by Graviton processors and the AWS Nitro System. Most AWS services run on Graviton, and new instance types continue to be launched. Last month, the &lt;a href="https://aws.amazon.com/ec2/instance-types/g5g/"&gt;G5g instance type&lt;/a&gt;, the first to pair Graviton2 with NVIDIA GPUs was launched. The &lt;a href="https://github.com/aws/aws-graviton-getting-started"&gt;GitHub getting started with Graviton&lt;/a&gt; is a good place to find out more, including the latest &lt;a href="https://github.com/aws/aws-graviton-getting-started/blob/main/managed_services.md"&gt;managed services available on Graviton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of my goals as a Community Builder is to find software which is not available on the Arm architecture and find ways to get it working on Arm.&lt;/p&gt;

&lt;p&gt;Last fall there were two contests available to motivate application migration to Amazon EC2 instances powered by Arm-based Graviton2 processors. The &lt;a href="https://aws.amazon.com/ec2/graviton/challenge/"&gt;Graviton Challenge&lt;/a&gt; and the &lt;a href="https://awsgraviton.devpost.com/"&gt;AWS Graviton Hackathon&lt;/a&gt; provided a little motivation (and prizes) for developers to migrate applications and benefit from the up to 40% better price performance compared to fifth generation x86-based instances.&lt;/p&gt;

&lt;p&gt;Not wanting to miss out on the fun, I spent some time thinking about what kind of applications would have been candidates for the contests. Turns out, it’s more challenging than anticipated to identify applications that don't already work on the Arm architecture, are not completely trivial to migrate, and are not so complex that it would take more time than contests allow.&lt;/p&gt;

&lt;p&gt;It got me thinking about the state of the Arm software ecosystem. The good news is the amount of software that works on Arm is huge. Linux distributions like Ubuntu and Amazon Linux include thousands of software packages that just work.&lt;/p&gt;

&lt;p&gt;Another significant contributor to the vast amount of software that already works on the Arm architecture is Raspberry Pi. Access to a very low cost board running Linux made it easy to port software to Arm. The success of Raspberry Pi and its availability enabled software to work when Arm servers and laptops came to market. Browsing software projects often shows Raspberry Pi has been a supported platform for a long time, and often the only Arm based platform mentioned.&lt;/p&gt;

&lt;p&gt;I didn’t enter either of the contests, but I served as a judge for the Graviton Hackathon. The projects were impressive. My favorite was a port of Gitpod to Graviton2. I tried this myself and it was difficult. It uses Kubernetes and relies on many layers of container images which are not available for Arm.&lt;/p&gt;

&lt;p&gt;As an AWS Community Builder, it’s interesting for me to work with companies and open-source projects to help them find resources to port to Arm. One of the projects I was interested in and didn’t work on Arm was Kasm Workspaces. &lt;a href="https://kasmweb.com/"&gt;Kasm&lt;/a&gt; provides a container streaming platform based on the &lt;a href="https://github.com/kasmtech/KasmVNC"&gt;KasmVNC open-source project&lt;/a&gt;. I set out to see if Kasm could be brought to Arm.&lt;/p&gt;

&lt;p&gt;To get things started I contacted Kasm to see if there was interest in Arm support, and it turned out they had users asking, but never quite finished it. If machine availability was an issue I offered to provide a Graviton2 AWS instance using my AWS supplied Community Builder credits. Kasm took me up on the offer and managed to port almost all the application in just a few days. There is still 1 Javascript package which does not run on Arm, but Kasm made their first &lt;a href="https://kasmweb.com/downloads.html"&gt;official product release supporting Arm&lt;/a&gt; in December 2021.&lt;/p&gt;

&lt;p&gt;Next, I offered to participate in testing the initial port to Arm and to provide feedback.&lt;/p&gt;

&lt;p&gt;As an emerging company, Kasm is interested to reach new users and always looking for new ways to find more users. I recommended they write a press release and have it approved by Arm. I connected Kasm to the Arm outbound marketing team who approved the PR and it was &lt;a href="https://www.prnewswire.com/news-releases/kasm-technologies-collaborates-with-arm-to-build-arm-powered-remote-work-solutions-301429534.html"&gt;published in November&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I also recommended Kasm enter the Graviton Challenge, which they did. As a result Kasm won a trip to re:Invent and gave a presentation about their experience moving to the Arm architecture.&lt;/p&gt;

&lt;p&gt;To continue our collaboration I contributed some small changes to KasmVNC on GitHub to use &lt;a href="https://github.com/DLTcollab/sse2neon"&gt;sse2neon&lt;/a&gt; for a performance critical part of the application which uses SSE intrinsics and needed to be changed to NEON intrinsics.&lt;/p&gt;

&lt;p&gt;This week Kasm will join Arm Innovation Coffee. It’s a &lt;a href="https://www.youtube.com/watch?v=dPpLT2MqHx8"&gt;live show on YouTube&lt;/a&gt; and is a lot of fun. Tune in to find out more. &lt;/p&gt;

&lt;p&gt;Relationships like these may seem small, but this is what makes the Arm ecosystem and the AWS Community Builder program so strong. Congratulations to Kasm for the great work in 2021. &lt;/p&gt;

&lt;p&gt;Last month, AWS announced the next generation Graviton processor, &lt;a href="https://www.youtube.com/watch?v=Fvh4djznuuM"&gt;Graviton3&lt;/a&gt;, is now available in preview in the &lt;a href="https://aws.amazon.com/ec2/instance-types/c7g/"&gt;C7g EC2 instance type&lt;/a&gt;. Graviton2 was announced just two years ago with the &lt;a href="https://www.arm.com/products/silicon-ip-cpu/neoverse/neoverse-n1"&gt;Neoverse-N1&lt;/a&gt; CPU. It was only 3 years ago that the AWS journey to Arm started with A1 instances (based on Cortex-A72). That year, I was at DockerCon giving demos of containers on AWS A1 instances and very few people could identify Arm at all. This year at re:Invent everybody was talking about Graviton and Arm. I heard many stories about moving applications to Arm and the price performance benefits of Graviton.&lt;/p&gt;

&lt;p&gt;The Community Builder program gives me a great place to promote Graviton. Perhaps someday, Graviton will be the primary architecture for every application running on AWS. &lt;/p&gt;

&lt;p&gt;Thanks for reading my story, now it's your chance to &lt;a href="https://bit.ly/32XnsZi"&gt;become an AWS Community Builder&lt;/a&gt; and write your story.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8K_3Awf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a00fszj9t5cjphmtfy7e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8K_3Awf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a00fszj9t5cjphmtfy7e.jpg" alt="AWS Community Builders" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>arm</category>
    </item>
    <item>
      <title>Data Lake explained</title>
      <author>Barbara</author>
      <pubDate>Tue, 11 Jan 2022 17:45:40 +0000</pubDate>
      <link>https://dev.to/barbara/data-lake-explained-3cel</link>
      <guid>https://dev.to/barbara/data-lake-explained-3cel</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-the-famous-analogy"&gt;
  &lt;/a&gt;
  WHAT - the famous analogy
&lt;/h2&gt;

&lt;p&gt;A data warehouse is like a producer of water where you are handed bottled water in a particular size and shape of a bottle. Whereas a data lake is a place where many streams of water flow into it and it's up to everyone to get the water the way he wants it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  WHY
&lt;/h2&gt;

&lt;p&gt;The data lake is &lt;em&gt;the new&lt;/em&gt; data warehouse. It shares the goals of the data warehouse of supporting business insights beyond the day-to-day transaction data handling. The main factors for the evolution of the data warehouse are the following ones:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abundance-of-unstructured-data"&gt;
  &lt;/a&gt;
  Abundance of Unstructured Data
&lt;/h3&gt;

&lt;p&gt;As we are collecting more and more data (text, xml, json, song, voice, sensor data...). That is why we need to find a better way to process it. &lt;br&gt;
It is possible to transform data during the ETL process. But if we are deciding on a particular form of transformation, we might not have the flexibility we need afterwards for analysis. This applies for deep json structures, where we do not want to distill only some elements. Another example would be text/pdf documents that need to be stored as blobs, but are useless unless processed to extract some metrics.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-rise-of-big-data-technologies"&gt;
  &lt;/a&gt;
  The Rise of Big Data Technologies
&lt;/h3&gt;

&lt;p&gt;The HDFS (Hadoop Distributed File System) made it possible to store Petabytes of data on commodity hardware. It has less cost per TB compared to a MPP (Massive Parallel Programming) database, like &lt;a href="https://dev.to/barbara/redshift-2l6h"&gt;Redshift&lt;/a&gt;.&lt;br&gt;
Thanks to new processing tools like MapReduce or &lt;a href="https://dev.to/barbara/spark-for-beginners-and-you-24ea"&gt;Spark&lt;/a&gt; we can process data at scale on the same hardware used for storage.&lt;br&gt;
&lt;em&gt;Schema-On-Read&lt;/em&gt; makes it possible to do data analytics &lt;em&gt;without&lt;/em&gt; inserting  into a &lt;em&gt;predefined schema&lt;/em&gt; or process unstructured text.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#new-roles-and-advanced-analytics"&gt;
  &lt;/a&gt;
  New Roles and Advanced Analytics
&lt;/h3&gt;

&lt;p&gt;As data is treated as the new oil, people want to get out the most value of it. A data scientist often needs to represent and join data sets together from external sources. For this case the clean consistent and performant model a data-warehouse architecture provides for business users does not work. The data lake needs to cope with these agile and ad-hoc nature data exploration activities. Also machine learning or natural language processing needs to access the data in a different form than ie a &lt;a href="https://en.wikipedia.org/wiki/Star_schema"&gt;star schema&lt;/a&gt; provides.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  BENEFITS
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#lower-costs-more-possibilities"&gt;
  &lt;/a&gt;
  Lower costs - more possibilities
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;ETL Offloading&lt;/em&gt;: Same hardware for storage and processing, a big data cluster. There is no more need for a special ETL grid or additional storage for an staging area.&lt;/li&gt;
&lt;li&gt;Dimensional modelling with conformed dimensions or data marts for &lt;em&gt;high/known-value data&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Low cost per TB makes it possible to store &lt;em&gt;low/unknown value data&lt;/em&gt; for analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#schemaonread"&gt;
  &lt;/a&gt;
  Schema-on-Read
&lt;/h3&gt;

&lt;p&gt;With the big data tools in the hadoop ecosystem, like Spark, it is as easy to work with a file as it is to work with a database, but without creating and inserting into a database. This is called &lt;em&gt;schema-on-read&lt;/em&gt;, as for the schema of a table it is either inferred or specified and the data is not inserted into it, but upon read the data is checked against the specified schema.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#spark-example-schema-inference"&gt;
  &lt;/a&gt;
  Spark - Example Schema Inference
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfExample = spark.read.csv("data/example.csv", 
                            inferSchema=True,
                            header=true,
                            sep=";"
                           )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The schema is inferenced, but we want to make sure the type is set correctly. For a example a date field should not be set as a string.&lt;/p&gt;

&lt;p&gt;To better control types and malformed data, we can specify a schema (&lt;em&gt;StructType&lt;/em&gt;), to make sure everything is correct. It is still &lt;em&gt;schema-on-read&lt;/em&gt; though. &lt;br&gt;
We also can specify what should happen to a row that is not conform to our schema. The options are drop it, replace with null or fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exampleSchema = StructType([
                 StructField("id", IntegerType()),
                 StructField("amount", IntegerType()),
                 StructField("info", StringType()),
                 StructField("date", DateType())
                ])

dfExample = spark.read.csv("data/example.csv", 
                            schema=exampleSchema,
                            sep=";",
                            mode="DROPMALFORMED"
                           )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we can do direct querying on the fly without database insertions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfExample.groupBy("info")\
         .sum("amount")\ 
         .orderBy(desc("sum(amount)"))\
         .show(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also write SQL with creating a temporary table. Nothing will be written to a database here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfExample.createOrReplaceTempView("example")
spark.sql("""
          SELECT info, sum(amount) as total_amount
          FROM example
          GROUP BY info
          ORDER BY total_amount desc 
          """).show(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unstructured-data-support"&gt;
  &lt;/a&gt;
  Unstructured data support
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/barbara/spark-for-beginners-and-you-24ea"&gt;Spark&lt;/a&gt; can read and write files in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text-based formats&lt;/li&gt;
&lt;li&gt;binary formats like Avro (saves space) and &lt;a href="https://www.upsolver.com/blog/apache-parquet-why-use"&gt;Parquet&lt;/a&gt;, that is a columnar storage and&lt;/li&gt;
&lt;li&gt;compressed formats like gzip and snappy
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfText = spark.read.text("text.gz")
dfSample = spark.read.csv("sample.csv")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Spark can read and write files from a variety of file systems (local, HDFS, S3...) and a variety of databases (SQL, MongoDB, Cassandra, Neo4j...)&lt;/p&gt;

&lt;p&gt;Everything that is exposed in a single abstraction - the dataframe - can be processed with SQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  ISSUES
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A data lake can easily transform into an chaotic data garbage dump.&lt;/li&gt;
&lt;li&gt;Data governance is hard to implement as a data lake can be used for cross-department data and external data.&lt;/li&gt;
&lt;li&gt;Sometimes it is unclear for what cases a data lake should replace, offload or work in parallel with a data warehouse or data marts. In all cases dimensional modelling is a valuable practice. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-data-lake-summary"&gt;
  &lt;/a&gt;
  The Data Lake - SUMMARY
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All types of data are welcome.&lt;/li&gt;
&lt;li&gt;Data is stored "as-is", transformations are done later. &lt;em&gt;Extract-Load-Transform&lt;/em&gt; - ELT instead of ETL.&lt;/li&gt;
&lt;li&gt;Data is processed with &lt;em&gt;schema-on-read&lt;/em&gt;. There is no predefined star-schema before the transformation&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;massive parallelism&lt;/em&gt; and &lt;em&gt;scalability&lt;/em&gt; come out of the box with all big data processing tools. We can use &lt;em&gt;columnar storage&lt;/em&gt; (parquet) without expensive MPP databases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeMmQ5yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st294h5xpd671gb2zwpe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeMmQ5yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st294h5xpd671gb2zwpe.jpg" alt="sketch data lake" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  COMPARISON
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Data Warehouse&lt;/th&gt;
&lt;th&gt;Data Lake&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data form&lt;/td&gt;
&lt;td&gt;Tabular format&lt;/td&gt;
&lt;td&gt;All formats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data value&lt;/td&gt;
&lt;td&gt;High only&lt;/td&gt;
&lt;td&gt;High-value, medium-value and to-be-discovered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ingestion&lt;/td&gt;
&lt;td&gt;ETL&lt;/td&gt;
&lt;td&gt;ELT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data model&lt;/td&gt;
&lt;td&gt;Star- and snowflake with conformed dimensions or data-marts and OLAP cubes&lt;/td&gt;
&lt;td&gt;All representations are possible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;Schema-on-write (Known before ingestion)&lt;/td&gt;
&lt;td&gt;Schema-on-read (On the fly at the time of the analysis)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Technology&lt;/td&gt;
&lt;td&gt;MPP databases, expensive with disks and connectivity&lt;/td&gt;
&lt;td&gt;Commodity hardware with parallelism as first principle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Quality&lt;/td&gt;
&lt;td&gt;High with effort for consistency and clear rules for accessibility&lt;/td&gt;
&lt;td&gt;Mixed, everything is possible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Users&lt;/td&gt;
&lt;td&gt;Business analysts&lt;/td&gt;
&lt;td&gt;Data scientists, Business analysts &amp;amp; ML engineers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Analytics&lt;/td&gt;
&lt;td&gt;Reports and Business Intelligence visualisations&lt;/td&gt;
&lt;td&gt;Machine Learning, graph analytics and data exploration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>bigdata</category>
      <category>beginners</category>
      <category>spark</category>
      <category>analytics</category>
    </item>
    <item>
      <title>E-commerce App with ReactNative and Amplify - Part 1</title>
      <author>Falcon</author>
      <pubDate>Tue, 11 Jan 2022 17:06:23 +0000</pubDate>
      <link>https://dev.to/gelopfalcon/e-commerce-app-with-reactnative-and-amplify-part-1-18pb</link>
      <guid>https://dev.to/gelopfalcon/e-commerce-app-with-reactnative-and-amplify-part-1-18pb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello! &amp;amp; Welcome to this complete guide on AWS Amplify and React Native. In this tutorial, we will build a simple e-commerce app. Users can log in/signup to this app. Users can add their own products, and all the users can view those products added by different users.&lt;br&gt;
Here is a quick demo,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8WjfMjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vccywo4ma9oagk50r1q7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8WjfMjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vccywo4ma9oagk50r1q7.jpeg" alt="Image description" width="880" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though this is not a very complex application, this will be a perfect starter project for you. We will use different AWS Services like S3 Storage, AWS AppSync API, and Amazon Cognito Authentication. Don’t worry I will explain these in detail, later.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To avoid any disturbances in the future, make sure you have the following prerequisites installed.&lt;/li&gt;
&lt;li&gt;Node.js v10.x or later
npm v5.x or later&lt;/li&gt;
&lt;li&gt;Amplify CLI (version @4.40.1, what I’m using in the tutorial)&lt;/li&gt;
&lt;li&gt;Android Studio&lt;/li&gt;
&lt;li&gt;ReactNatice CLI (version 2.0.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#architecture-diagram"&gt;
  &lt;/a&gt;
  Architecture Diagram
&lt;/h2&gt;

&lt;p&gt;The following diagram demonstrates our AWS Architecture Diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2web8Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cclqodk87s418drdjdyr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2web8Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cclqodk87s418drdjdyr.jpeg" alt="Image description" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Amplify makes it much easier to work with these different services. As always, our backend resources will be created and managed by Amplify. Let me explain what these services will do.&lt;/p&gt;

&lt;p&gt;So, Amplify is the heart of our backend environment. Those arrows pointing from Amplify mean that we will use Amplify to connect those different resources. Every product will have an image. We will store that image in an S3 Bucket. Product details will be saved in Amazon DynamoDB, a NoSQL database provided by AWS. To talk with that Database, we will use a GraphQL API provided by AWS AppSync. Amazon Cognito will handle authentication.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting Up the Project
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#installing-and-configuring-amplify-cli"&gt;
  &lt;/a&gt;
  Installing and Configuring Amplify CLI
&lt;/h3&gt;

&lt;p&gt;Through this tutorial, we will work with AWS Amplify CLI. You can install it by running,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g @aws-amplify/cli@4.39.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then you need to run amplify configure. This will set up your Amplify CLI. There you will set up a new IAM User. You will finish setting up your IAM User, by providing the accessKeyId and secretAccessKey for your IAM user.&lt;br&gt;
If you are stuck at some point, you can refer to this original guideline on installing Amplify CLI, &lt;a href="https://docs.amplify.aws/cli/start/install"&gt;https://docs.amplify.aws/cli/start/install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-new-reactnative-application"&gt;
  &lt;/a&gt;
  Creating a New ReactNative Application
&lt;/h3&gt;

&lt;p&gt;Hope you have installed and configured Amplify CLI.&lt;br&gt;
To work with ReactNative, you will have to set up the Android development environment. You can refer to this original guide, &lt;a href="https://reactnative.dev/docs/environment-setup"&gt;https://reactnative.dev/docs/environment-setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s create a new React Native app called AmplifyShop.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx react-native init amplify_shop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you have already installed react-native-cli, you can use that instead of npx.&lt;/p&gt;

&lt;p&gt;Open the newly created React Native Project using Android Studio. Open the Android Emulator using Android Studio’s AVD Manager. In the project directory, run these two commands.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx react-native start &lt;br&gt;
npx react-native run-android&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, the React Native project should run on your Android Emulator. If you are stuck at some point, please refer to the guide that I have suggested earlier.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#initializing-amplify-backend"&gt;
  &lt;/a&gt;
  Initializing Amplify Backend
&lt;/h3&gt;

&lt;p&gt;Let’s initialize Amplify for our project. Then we can add services one by one.&lt;br&gt;
In the project directory, run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amplify init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then you will be prompted for the following information regarding the project you initialize.&lt;/p&gt;

&lt;p&gt;When you initialize your Amplify Project,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It creates a file called aws-exports.js in the src directory. This file will store all the relevant information to identify the AWS resources/services that will allocate in the future.&lt;/li&gt;
&lt;li&gt;It creates a directory called amplify. We will use this directory to store the templates and configuration details of the services that we will use in the future. In this directory, Amplify will hold our backend schema as well.&lt;/li&gt;
&lt;li&gt;It creates a Cloud Project. That project can be viewed using the amplify console command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to install all the necessary dependencies by running the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install aws-amplify aws-amplify-react-native amazon-cognito-identity-js @react-native-community/netinfo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will also need to install the pod dependencies for iOS.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx pod-install&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-amplify-backend"&gt;
  &lt;/a&gt;
  Configuring Amplify Backend
&lt;/h3&gt;

&lt;p&gt;To complete setting up our Amplify project, we need to configure amplify in a higher-order component. Adding the following lines of code in your App.js or index.js file will do the job.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import Amplify from 'aws-amplify';&lt;br&gt;
import awsconfig from './aws-exports';&lt;br&gt;
Amplify.configure({&lt;br&gt;
  ...awsconfig,&lt;br&gt;
  Analytics: {&lt;br&gt;
    disabled: true,&lt;br&gt;
  },&lt;br&gt;
});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That completes setting up the project. Now let’s add those services one by one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-cognito-authentication"&gt;
  &lt;/a&gt;
  Adding Cognito Authentication
&lt;/h2&gt;

&lt;p&gt;Now, adding Authentication to your React Native App never gets easier than Amplify.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-signup-and-login"&gt;
  &lt;/a&gt;
  Adding Sign-up and Log-in
&lt;/h3&gt;

&lt;p&gt;Run amplify add auth in your project directory. Submit the following information when configuring Authentication.&lt;/p&gt;

&lt;p&gt;Then, run amplify push, to deploy your backend changes. Amplify will take care of the rest by creating your Cognito Userpool.&lt;/p&gt;

&lt;p&gt;The authentication UI component, provided by Amplify Framework, will provide the entire authentication flow.&lt;/p&gt;

&lt;p&gt;In the App.js file,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import withAuthenticator component
&lt;code&gt;import { withAuthenticator } from 'aws-amplify-react-native'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Wrap the main component with withAuthenticator component.
&lt;code&gt;export default withAuthenticator(App)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you run your app. This login screen will show up. Try logging in as a new user. This will lead you to the home page. The newly created user will be saved in our Cognito User Pool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odI6VLiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgpuxjxnid89bj74o3d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odI6VLiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgpuxjxnid89bj74o3d3.png" alt="Image description" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-reactnative-navigation"&gt;
  &lt;/a&gt;
  Adding ReactNative Navigation
&lt;/h3&gt;

&lt;p&gt;Our App will contain two screens. One Screen to display the list of products and the other to add new products. Let’s create these two screens.&lt;br&gt;
Create a new directory called src. In that directory, create a folder called screens. In that folder src/screens, create two new javascript files named add-product-screen.js and home-screen.js I just prefer this naming convention. You can use any convention.&lt;/p&gt;

&lt;p&gt;Copy and paste the following sample code. Do change the function name (‘HomeScreen’ and ‘AddProductScreen’) and the title according to the page.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;directory: src/screens/ home.js, add-product-screen.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import {SafeAreaView, StatusBar, Text} from 'react-native';
const HomeScreen = (props) =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;StatusBar barStyle="dark-content" /&amp;gt;
      &amp;lt;SafeAreaView&amp;gt;
        &amp;lt;Text&amp;gt;Home&amp;lt;/Text&amp;gt;
      &amp;lt;/SafeAreaView&amp;gt;
    &amp;lt;/&amp;gt;
  );
};
export default HomeScreen;`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are multiple ways to add navigation into ReactNative Apps. In this tutorial, we will use ‘Stack Navigator Library’ from React Navigation. First, we should install it using npm.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install @react-navigation/native&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install all the additional third-party dependencies as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view @react-navigation/stack&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From React Native 0.60 and higher, linking is automatic. So you don’t need to run react-native link.&lt;/p&gt;

&lt;p&gt;If you’re on a Mac and developing for iOS, you need to install the pods (via Cocoapods) to complete the linking.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx pod-install ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To finish installing React Native Navigation, add the following import in your App.js or index.js file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import 'react-native-gesture-handler';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the sake of this tutorial, I will use two additional styling libraries. I will use react-native-elements and react-native-vector-icons. Let’s install those using npm.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-native-elements&lt;br&gt;
npm install react-native-vector-icons&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to view fontawesome icons, we need to add the following line into android/app/build.gradle file.&lt;/p&gt;

&lt;p&gt;apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"&lt;/p&gt;

&lt;p&gt;With that out of the way, move into the App.js file. We will use the App.js file to set up navigation in our App. Replace the current code with the following.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;directory: App.js&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import {StyleSheet, View, TouchableOpacity} from 'react-native';
import {createStackNavigator} from '@react-navigation/stack';
import {NavigationContainer} from '@react-navigation/native';
import AddProductScreen from './src/screens/add-product-screen';
import HomeScreen from './src/screens/home-screen';
import {Button} from 'react-native-elements';
import Icon from 'react-native-vector-icons/FontAwesome';
import {withAuthenticator} from 'aws-amplify-react-native';
const App: () =&amp;gt; React$Node = () =&amp;gt; {
  const Stack = createStackNavigator();
  return (
    &amp;lt;&amp;gt;
      &amp;lt;NavigationContainer&amp;gt;
        &amp;lt;Stack.Navigator initialRouteName="Home"&amp;gt;
          &amp;lt;Stack.Screen
            name="Home"
            component={HomeScreen}
            options={({navigation}) =&amp;gt; ({
              title: 'Home',
              headerStyle: {
                backgroundColor: '#ff9300',
              },
              headerRight: () =&amp;gt; (
                &amp;lt;TouchableOpacity
                  style={styles.addButton}
                  onPress={() =&amp;gt; navigation.navigate('AddProduct')}&amp;gt;
                  &amp;lt;Icon name={'plus'} size={20} color="#000000" /&amp;gt;
                &amp;lt;/TouchableOpacity&amp;gt;
              ),
            })}
          /&amp;gt;
          &amp;lt;Stack.Screen
            name="AddProduct"
            buttonStyle={styles.addButton}
            component={AddProductScreen}
            options={{
              title: 'Add Product',
              headerStyle: {
                backgroundColor: '#ff9300',
              },
            }}
          /&amp;gt;
        &amp;lt;/Stack.Navigator&amp;gt;
      &amp;lt;/NavigationContainer&amp;gt;
    &amp;lt;/&amp;gt;
  );
};
const styles = StyleSheet.create({
  addButton: {
    marginRight: 20,
  },
  logOutBtn: {
    marginLeft: 10,
  },
});
export default withAuthenticator(App);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simplest and easiest way to add navigation. We got Stack.Navigator Component, which we can provide an initial route. Inside that wrapper component, we can define each screen using the Stack.Screen component.&lt;/p&gt;

&lt;p&gt;We can use that options prop to define the header for each screen. I just added a navigation button on the right side of our header. It should navigate to our AddProduct Screen.&lt;/p&gt;

&lt;p&gt;Since we are using Stack Navigation, the new screen gets loaded on top of the previous screen. Therefore, the back button will be added automatically.&lt;/p&gt;

&lt;p&gt;Ok, stop, huge information, you need to understand and apply the knowledge. In the next entry, we are going to continue with the tutorial and amplify integration. See you soon. &lt;/p&gt;

</description>
      <category>amplify</category>
      <category>aws</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
  </channel>
</rss>
