<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>11 Easy UI Design Tips for Web Devs</title>
      <author>Danny Adams</author>
      <pubDate>Tue, 16 Feb 2021 18:01:24 +0000</pubDate>
      <link>https://dev.to/doabledanny/11-easy-ui-design-tips-for-web-devs-j3j</link>
      <guid>https://dev.to/doabledanny/11-easy-ui-design-tips-for-web-devs-j3j</guid>
      <description>&lt;p&gt;Whilst learning web development, most of us don’t have much design experience or access to a UI designer. So here are 11 easy to apply UI design fundamentals to make your projects look sleek and modern.&lt;/p&gt;

&lt;p&gt;This article was originally posted on my personal blog, &lt;a href="https://www.doabledanny.com/UI-Design-Tips-for-Web-Devs"&gt;DoableDanny.com&lt;/a&gt;. If you enjoy the article, consider subscribing to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;YouTube channel&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-be-consistent" class="anchor"&gt;
  &lt;/a&gt;
  1. Be consistent
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCUuNeJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y94y3colvzfiih57bolk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCUuNeJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y94y3colvzfiih57bolk.png" alt="consistency example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the top image you can see that the icons have different styles and colours:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The calendar icon has some green and a grey outline.&lt;/li&gt;
&lt;li&gt;The lock icon has a solid orange circle around it and is white filled with no outline.&lt;/li&gt;
&lt;li&gt;The thumbs up has a thin black outline and smoother lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no consistent theme - different shapes, colors, sizes and outline thicknesses.&lt;/p&gt;

&lt;p&gt;In the bottom image, the icons look to be from the same icon set. They all have a simple dark grey outline and that’s about it. The icons also have the same height and width.&lt;/p&gt;

&lt;p&gt;In the bottom image, the text is left aligned, and so are the icons. I also could've centred the text and put each icon over the centre. Both are fine - consistency is key.&lt;/p&gt;

&lt;p&gt;Rule of thumb is to left-align any longer form text e.g. a blog post, as it’s easier to read. For shorter amounts of text, you can left-align or centre.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-use-quality-images" class="anchor"&gt;
  &lt;/a&gt;
  2. Use quality images
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h5JqDvUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdpbqclz1qgfhqin020.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h5JqDvUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdpbqclz1qgfhqin020.png" alt="clipart vs quality image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clipart may have been great back when you were 10 years old, but using stuff like that now looks extremely unprofessional.&lt;/p&gt;

&lt;p&gt;Professional images can be downloaded and used in your projects completely free from &lt;a href="https://www.unsplash.com"&gt;https://www.unsplash.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-contrast" class="anchor"&gt;
  &lt;/a&gt;
  3. Contrast
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Qo6ujyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heicl1riiwipqchivyw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Qo6ujyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heicl1riiwipqchivyw6.png" alt="text is easily readable on background image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your background is light, use dark text. If dark, use light text. Simple enough. A problem I see quite often on websites is when people use colourful images as a background with light and dark spots and then plonk some text on top. It’s often difficult to read.&lt;/p&gt;

&lt;p&gt;Solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use an image overlay e.g. if you are using light coloured text, place over the image a dark coloured overlay (a semi-transparent div with background-color using rgba) and reduce the opacity down to darken the appearance of the image and make the light text clearer. Remember to give the text a higher z-index than the overlay so it sits on top!&lt;/li&gt;
&lt;li&gt;Choose an image like above, where there is a nice consistent coloured section to place your text.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, notice how the logo in the nav bar is aligned vertically with the left edge of the text and “start my journey” call to action button… now that’s consistency! It's key to a sleek looking design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-whitespace" class="anchor"&gt;
  &lt;/a&gt;
  4. Whitespace
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jb9nZWm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwg0sh21rcw44tboskgk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jb9nZWm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwg0sh21rcw44tboskgk.jpg" alt="poor vs good whitespace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the top image, the “SomeCompany” logo at the top has less space to its left than the right-most nav link has to its right. In the bottom, we can see the space is roughly equal.&lt;/p&gt;

&lt;p&gt;The paragraph of text in the top image is cramped up too close to the heading and call to action button. In the bottom, it has more breathing room.&lt;/p&gt;

&lt;p&gt;We can also see that the heading is closer to the paragraph than it is to the logo. Stuff that is closely related should be closer together… but not stupid close.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-visual-hierarchy-size-matters" class="anchor"&gt;
  &lt;/a&gt;
  5. Visual hierarchy – size matters
&lt;/h2&gt;

&lt;p&gt;Your eyes are probably drawn to “The Road Less Travelled” in the image from tip 4. Obviously because it is bigger. It is also bolder. Attention can also be demanded by colour e.g. the “start my journey” button.&lt;/p&gt;

&lt;p&gt;A common mistake is to make the nav logo too big, or the nav links stand out too much with colour.&lt;/p&gt;

&lt;p&gt;We want the users attention directed towards the content, not the logo and nav links.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-one-font-is-fine" class="anchor"&gt;
  &lt;/a&gt;
  6. One font is fine!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvQoT7fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io6mymdjufk8m11zwlr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvQoT7fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io6mymdjufk8m11zwlr6.png" alt="bad vs good font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is fine to use just one font. No need to overcomplicate. Just avoid “Times new roman” (it’s overused) and “Comic sans” (it just looks naff!?).&lt;/p&gt;

&lt;p&gt;Nunito, Helvetica or sans serif are pretty nice modern looking fonts.&lt;/p&gt;

&lt;p&gt;You can still use a second font for headings if your design looks a little too boring (check out the title of this blog post!).&lt;/p&gt;

&lt;p&gt;For font sizes, 18px to 21px are common for paragraphs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-tints-and-shades" class="anchor"&gt;
  &lt;/a&gt;
  7. Tints and shades
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv7iUmyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehtbk36cscfa1nqm6yu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv7iUmyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehtbk36cscfa1nqm6yu7.png" alt="altering contrast of text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use few colours. Too many colours can look noisy and unprofessional, especially if you don’t know what you’re doing. Keep it simple.&lt;/p&gt;

&lt;p&gt;Pick a base colour and just use tints (add white) and shades (add black) for variation.&lt;/p&gt;

&lt;p&gt;Then pick one primary “call to action” colour for areas that should stand out. Check out the “complementary colour scheme”.&lt;/p&gt;

&lt;p&gt;I use &lt;a href="https://coolors.co/330088"&gt;coolors&lt;/a&gt; to find complimentary colours and to get tints and shades.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-round-vs-sharp" class="anchor"&gt;
  &lt;/a&gt;
  8. Round vs sharp
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyVtATCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69k4gosugpsc0xtrhhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyVtATCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69k4gosugpsc0xtrhhv.png" alt="speech bubble"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sharp corners and edges draw your attention. Think the sharp part of a speech bubble.&lt;/p&gt;

&lt;p&gt;What can we do with this knowledge? Round out the corners of your buttons. Why would you want to draw attention to the corners of the button?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-borders-are-so-last-year" class="anchor"&gt;
  &lt;/a&gt;
  9. Borders are so last year
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwZtt2Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtarukxei807yi5cij02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwZtt2Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtarukxei807yi5cij02.png" alt="border vs no border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the old days of the web, borders were everywhere. Nowadays, it’s better to not use them quite as much – it often looks cleaner. Borders can look a little overkill.&lt;/p&gt;

&lt;p&gt;Obviously don’t become completely anti-border, they are still great for separating things. Just don’t make them too thick and attention grabbing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-dont-underline-navbar-links" class="anchor"&gt;
  &lt;/a&gt;
  10. Don't underline nav-bar links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIBnjFhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rv79dgu4btx374uwj412.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIBnjFhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rv79dgu4btx374uwj412.png" alt="underline vs none"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s pretty old school. It looks cleaner without them.&lt;/p&gt;

&lt;p&gt;Underline/change the colour or size on mouse hover and keyboard focus for accessibility.&lt;/p&gt;

&lt;p&gt;You should still underline links in a body of text for good accessibility - it makes it obvious they are links. Just avoid underlining text that isn't a link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-download-a-design-software" class="anchor"&gt;
  &lt;/a&gt;
  11. Download a design software
&lt;/h2&gt;

&lt;p&gt;I used to begin coding up a project with little to no plan of how I wanted it to look. It took me ages to code everything with trial and error for colours and positioning of elements.&lt;/p&gt;

&lt;p&gt;You can iterate through ideas much quicker using design software. I now use AdobeXD (free) to just drag and drop things in place and quickly get a nice design ready to be coded. Figma is also popular but not free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awesome-references" class="anchor"&gt;
  &lt;/a&gt;
  Awesome References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The psychology of persuasive web design: &lt;a href="https://www.doabledanny.com/persuasive-web-design"&gt;https://www.doabledanny.com/persuasive-web-design&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Turn a bad design into a good one: &lt;a href="https://www.youtube.com/watch?v=0JCUH5daCCE&amp;amp;t=112s"&gt;https://www.youtube.com/watch?v=0JCUH5daCCE&amp;amp;t=112s&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Amazing UI tips: &lt;a href="https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886"&gt;https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The science of great UI: &lt;a href="https://www.youtube.com/watch?v=nx1tOOc_3fU"&gt;https://www.youtube.com/watch?v=nx1tOOc_3fU&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you enjoyed this article, you can say thanks by subscribing to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;YouTube channel&lt;/a&gt; or signing up to &lt;a href="https://www.doabledanny.com/blog/"&gt;my blog&lt;/a&gt; to be notified of new posts 🙏&lt;/p&gt;

&lt;p&gt;Also, feel free to connect with me on &lt;a href="https://twitter.com/DoableDanny"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Don't fear the command line :  Tar. What  is that?</title>
      <author>Dionysia Lemonaki</author>
      <pubDate>Tue, 16 Feb 2021 15:40:32 +0000</pubDate>
      <link>https://dev.to/deniselemonaki/don-t-fear-the-command-line-tar-what-is-that-d0e</link>
      <guid>https://dev.to/deniselemonaki/don-t-fear-the-command-line-tar-what-is-that-d0e</guid>
      <description>&lt;p&gt;When I first heard of the &lt;code&gt;tar&lt;/code&gt; command I was confused and could not quite understand it's use. How is that command useful in the day-to-day use of Linux and how often does it actually get used? Not to mention that it has all these flags to go alongside it, it was very confusing to me at first sight.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tar" class="anchor"&gt;
  &lt;/a&gt;
  What is Tar?
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tar&lt;/code&gt; command stands for &lt;code&gt;tape archive&lt;/code&gt; and is used to group many files and directories into a single compressed archive. That way it can be moved from disc to disc, from machine to machine and sent over to someone else. The same command is also used to extract that archive that we create.&lt;br&gt;
It is essentially a zip file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gh6gFVh35jyzNvHegl/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gh6gFVh35jyzNvHegl/giphy.gif" alt="expand on that"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The general syntax looks something along these lines:&lt;br&gt;
&lt;code&gt;tar [flags] [archive-file] [file or directory to be archived]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-absolute-basics-to-get-started" class="anchor"&gt;
  &lt;/a&gt;
  The absolute basics to get started
&lt;/h3&gt;

&lt;p&gt;To put a folder into an archive (let's say in this case a folder named &lt;code&gt;folder&lt;/code&gt;-very creative naming) we would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-cvf&lt;/span&gt; archive.tar folder
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above we created a single file(&lt;code&gt;archive.tar&lt;/code&gt;) that contains the folder. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-c&lt;/code&gt; flag stands for &lt;code&gt;create&lt;/code&gt; and is used to create the tar file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;v&lt;/code&gt; flag stands for &lt;code&gt;verbose&lt;/code&gt; and displays the progress of the action.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;f&lt;/code&gt; flag creates archive with given filename(&lt;code&gt;archive.tar&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While experimenting with the flags and changing their order I noticed that when I used &lt;code&gt;-cfv&lt;/code&gt; I got an error whereas when I used &lt;code&gt;-cvf&lt;/code&gt; like I showed in the example, it worked. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fUqfaPVjiAQcfticZH/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fUqfaPVjiAQcfticZH/giphy.gif" alt="how?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guessed that  the order must be very important.After some research with my best friend lately(stackoverflow)  I learnt that when the flags are used together , the dash in front of them is optional. However, if we use the dash we must use the flags in the accurate order otherwise it won't work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XGnH2RGHoCqumsAXpo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XGnH2RGHoCqumsAXpo/giphy.gif" alt="pat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we created our archive and now we want to extract it. &lt;br&gt;
To extract our &lt;code&gt;archive.tar&lt;/code&gt; file we switch the &lt;code&gt;-c&lt;/code&gt; flag which is used to &lt;code&gt;create&lt;/code&gt; and we instead use the &lt;code&gt;-x&lt;/code&gt; flag which stands for &lt;code&gt;extract&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xvf&lt;/span&gt; archive.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The archive we created earlier was not compressed, and most times we want to compress it as it it significantly smaller in size as it gets run through gzip .&lt;br&gt;
To create an archive that is compressed we use the &lt;code&gt;-z&lt;/code&gt; flag which stands for &lt;code&gt;compress the tar file using gzip&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-czvf&lt;/span&gt; archive.tar.gz folder
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again,If using the &lt;code&gt;-&lt;/code&gt; in front of the flags it's important to remember the right order.&lt;br&gt;
If we type &lt;code&gt;ls -ls&lt;/code&gt; to see a &lt;code&gt;list&lt;/code&gt; with of the files we have and information about, including their size( that's what the &lt;code&gt;s&lt;/code&gt; stands for) then we'll notice than &lt;code&gt;archive.tar.gz&lt;/code&gt; is significantly smaller in size than &lt;code&gt;archive.tar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To extract it we then use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzvf&lt;/span&gt; archive.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We could use the &lt;code&gt;-C&lt;/code&gt; flag and a destination folder for where we want the files to go. That folder must exist already before this action.If we leave that flag of it'll extract the archive where ever we are .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzvf&lt;/span&gt; archive.tar.gz &lt;span class="nt"&gt;-C&lt;/span&gt; destination-folder
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These are the absolute basics to get started with &lt;code&gt;tar&lt;/code&gt;&lt;br&gt;
Thanks for reading 😃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/wpoLqr5FT1sY0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/wpoLqr5FT1sY0/giphy.gif" alt="dog coding"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Debouncing in Javascript.</title>
      <author>Abhishek Jain</author>
      <pubDate>Tue, 16 Feb 2021 15:05:49 +0000</pubDate>
      <link>https://dev.to/abhishekjain35/debouncing-in-javascript-276j</link>
      <guid>https://dev.to/abhishekjain35/debouncing-in-javascript-276j</guid>
      <description>&lt;p&gt;Debouncing is a pattern that allows &lt;em&gt;&lt;strong&gt;delaying execution of some piece of code&lt;/strong&gt;&lt;/em&gt; until a specified time to &lt;strong&gt;avoid unnecessary CPU cycles, API calls and improve performance.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-debouncing" class="anchor"&gt;
  &lt;/a&gt;
  Why debouncing?
&lt;/h2&gt;

&lt;p&gt;One word "&lt;strong&gt;Performance&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;Suppose, you are building an e-commerce application. There you have to implement a search bar for searching products And when the user types in a character, an API call is made.&lt;/p&gt;

&lt;p&gt;Look at the example below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekjain35/embed/WNopLYV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the above example, we're having a simple searchBar and a count of API calls made. As we type in the searchBar, the count of API called increases with each character. But that's not what we want to happen. What we want is to wait for the user to stop typing. As soon as the user stops typing then we want to make the API call.&lt;/p&gt;

&lt;p&gt;so, how can we fix this? - here comes debouncing into play.&lt;/p&gt;

&lt;p&gt;Final version with debouncing.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/abhishekjain35/embed/QWGpoeZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Pretty cool huh?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-debouncing-function" class="anchor"&gt;
  &lt;/a&gt;
  The debouncing function
&lt;/h3&gt;

&lt;p&gt;Take a look at this debounce function we implemented above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What we are doing here is, initialize a timer then return a &lt;code&gt;function&lt;/code&gt;. As soon as the user starts typing the &lt;code&gt;function&lt;/code&gt; executes -:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First it clears the timer if it's initialized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;then it assigns the timer setTimeout function, which will run after 1 second if it is not cleared.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the user types any character within 1 second the &lt;code&gt;function&lt;/code&gt; will be called again. But in the above step, we already assigned the setTimeout function to the timer variable. So the clearTimeout will clear the function from the timer variable and also assign a new setTimeout function to the timer variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the user didn't type and 1 second has passed, the function in setTimeout will execute and make the API call.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it.&lt;/p&gt;

&lt;p&gt;The full version of the debounce function with &lt;code&gt;this&lt;/code&gt; and argument binding is -:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Well, this is it from my side. See you soon 😁&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hrRJ41JB2zlgZiYcCw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hrRJ41JB2zlgZiYcCw/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Singleton vs Dependency Injection in Swift</title>
      <author>Matheus Cardoso</author>
      <pubDate>Tue, 16 Feb 2021 14:03:04 +0000</pubDate>
      <link>https://dev.to/cardoso/singleton-vs-dependency-injection-in-swift-3k1f</link>
      <guid>https://dev.to/cardoso/singleton-vs-dependency-injection-in-swift-3k1f</guid>
      <description>&lt;p&gt;When coding iOS apps, we often create classes that manage a particular aspect of the application. For example, it's common to develop "manager" classes that encapsulate methods for interacting with a specific application aspect. These aspects commonly include the REST API, WebSockets, database, caching, notifications, &lt;a href="https://getstream.io/chat/"&gt;chat&lt;/a&gt;, etc. That is what's called the &lt;a href="https://refactoring.guru/design-patterns/facade"&gt;Facade pattern&lt;/a&gt;, and it's a prevalent way to organize code.&lt;/p&gt;

&lt;p&gt;During the creation of a "manager" class, one of the first thoughts is: "How do I access these methods from somewhere else in my app's code, such as inside a view controller?". There are two common ways to go about this: the Singleton and Dependency Injection patterns.&lt;/p&gt;

&lt;p&gt;This article will compare the Singleton and Dependency Injection patterns to help you decide which one is best for your use case. For context, we'll use &lt;a href="https://getstream.io/tutorials/ios-chat/"&gt;Stream Chat's iOS SDK&lt;/a&gt;, which supports both patterns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#singleton" class="anchor"&gt;
  &lt;/a&gt;
  Singleton
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--An9sjctM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7nb4VMY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--An9sjctM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7nb4VMY.png" alt="Image shows the representation of a singleton"&gt;&lt;/a&gt;&lt;br&gt;
Image from &lt;a href="https://refactoring.guru/design-patterns/singleton"&gt;https://refactoring.guru/design-patterns/singleton&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Singleton pattern is known for its simplicity. It consists of a Facade class with a public static instance, often called &lt;code&gt;shared&lt;/code&gt;, accessible throughout the app's code via &lt;code&gt;MyFacade.shared&lt;/code&gt;. Generally, the Facade's class initializer is made private, so the shared instance is the only one in the app.&lt;/p&gt;

&lt;p&gt;Check out the snippet below to create a shared instance for &lt;a href="https://getstream.io/chat/"&gt;Stream Chat&lt;/a&gt;'s &lt;code&gt;ChatClient&lt;/code&gt; class by extending it with the &lt;code&gt;shared&lt;/code&gt; static property.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#pros" class="anchor"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;The main advantage of the singleton pattern is its ease of access. Wherever you need the shared instance, you can access it without modifying your code further.&lt;/p&gt;

&lt;p&gt;It's also possible to enforce a single instance if you make the Facade class's initializer private. That is a simple way to avoid common conflicts such as concurrent writes to a database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;p&gt;The disadvantages of the singleton pattern become apparent the more complex your app gets. The more places in your app access the shared instance, the more unpredictable your app's behavior becomes and the harder it is to keep all your code in sync with the singleton's global state. Though it can be handy for more uncomplicated use cases, it's often considered an anti-pattern by those who want to be more careful with their code and increase predictability.&lt;/p&gt;

&lt;p&gt;It's also possible that limiting the Facade class to a single instance is not what you'll want as your app scales up, and it can be tough to undo that choice. &lt;/p&gt;

&lt;p&gt;It's also harder to write unit tests without the possibility of instantiating a mock instance of your class. The last point is not valid for &lt;a href="https://github.com/getstream/stream-chat-swift/"&gt;Stream Chat Swift SDK&lt;/a&gt;'s &lt;code&gt;ChatClient&lt;/code&gt;, since its initializer is public to support the Dependency Injection pattern, which we'll discuss next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-injection" class="anchor"&gt;
  &lt;/a&gt;
  Dependency Injection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyS9aEYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BkDFSed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyS9aEYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BkDFSed.png" alt="Image shows the representation of dependency injection"&gt;&lt;/a&gt;&lt;br&gt;
Image from &lt;a href="https://stackify.com/dependency-injection/"&gt;https://stackify.com/dependency-injection/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dependency Injection can be a great alternative to the Singleton pattern for medium to high complexity apps as it scales with your app with less risk of adding unpredictability. Instead of providing a shared instance that can be accessed without restriction throughout the app, each component or class that needs access to an instance must hold its reference via a parameter or property. This property can be assigned during instantiation or after.&lt;/p&gt;

&lt;p&gt;Check out the snippet below to instantiate a &lt;code&gt;ChatClient&lt;/code&gt; and a &lt;code&gt;ViewController&lt;/code&gt; with the former going into its initializer. Alternatively, we can assign the ViewController's &lt;code&gt;chatClient&lt;/code&gt; property after initialization. It would be best if you prefer using the initializer approach to avoid making the property public.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#pros" class="anchor"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;p&gt;There are multiple advantages to the Dependency Injection pattern. Since instantiation is not limited, it's possible to create mock instances to use in unit testing. Additionally, you're not locking yourself out of using multiple instances at the same time in case it's necessary now or in the future.&lt;/p&gt;

&lt;p&gt;An injected dependency behavior is also more predictable since its accesses are restricted to pieces of code that explicitly hold an instance to it. Hence, you get to think twice about where to access it.&lt;/p&gt;

&lt;p&gt;Dependency Injection doesn't add a global state to your code, so it becomes more reusable. If your code component &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;p&gt;The disadvantages of Dependency Injection are debatable, depending on your use case. For instance, to access the object, you need to add a property or parameter to hold its reference. That can break API in existing projects, if it's something important, or be an additional step in the development process.&lt;/p&gt;

&lt;p&gt;With Dependency Injection, it's not possible to enforce a single instance in compile-time. If multiple instances of an object can cause conflicts in runtime, it's necessary to handle those potential issues.&lt;/p&gt;

&lt;p&gt;Though not necessarily complicated, some Dependency Injection implementations do get quite robust and can be hard to grasp if you're new to the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-you-should-choose" class="anchor"&gt;
  &lt;/a&gt;
  Which You Should Choose
&lt;/h2&gt;

&lt;p&gt;It depends. Dependency Injection is widely considered the cleaner option, but it can get tricky. Singleton is regarded as an anti-pattern by Clean Code advocates, but it's easy, and it works. Still, developers use both patterns to great success. You should choose the one that fits your current project best while avoiding its common pitfalls.&lt;/p&gt;

&lt;p&gt;Finally, as important as choosing the right pattern, don't let your Manager/Facade class become a "god class" with too many responsibilities. Try to make it as single-purposed as possible by interacting with a single aspect of your app.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>We should be teaching our kids how to code. Or should we?</title>
      <author>darrendube</author>
      <pubDate>Tue, 16 Feb 2021 13:21:09 +0000</pubDate>
      <link>https://dev.to/darrendube/we-should-be-teaching-our-kids-how-to-code-or-should-we-3ml4</link>
      <guid>https://dev.to/darrendube/we-should-be-teaching-our-kids-how-to-code-or-should-we-3ml4</guid>
      <description>&lt;p&gt;The debate over whether children should be taught to code in school has been going on for quite a while now. One side says that coding is the new literacy, and everyone should know how to. The other side rejects this claim.&lt;/p&gt;

&lt;p&gt;First of all, though the idea that coding will be beneficial to children is still under debate, I do not envisage it ever being at the same level as indispensable skills like reading or writing. Coding is not a skill needed by everyone. An actuary may benefit from knowing how to code, but a nurse wouldn't. Coding is beneficial only if it solves a problem. People should not learn how to code just because. Jeff Atwood said about this argument in &lt;a href="https://blog.codinghorror.com/please-dont-learn-to-code/"&gt;an article of his&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It assumes that coding is the goal. Software developers tend to be software addicts who think their job is to write code. But it's not. Their job is to solve problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some people say coding could make our kids get better at problem-solving. But so could chess. And maths. And sports. My point is that there are many other skills that would be beneficial to kids. Coding is a practical subject, and if schools started teaching it, they might probably take away all the practicalness from it and teach it just like every other subject.&lt;/p&gt;

&lt;p&gt;We could instead introduce kids to code and get them to know how it looks like. Then it would be their choice to continue, either in a club or in their own time on platforms such as Codecademy and SoloLearn. Coding should not be forced on children in any way, as by doing so, we risk sucking the creativity out of it, the very skill we are trying to grow.&lt;/p&gt;

&lt;p&gt;What do you think about teaching kids to code? Leave a comment below!&lt;/p&gt;

</description>
      <category>healthydebate</category>
      <category>discuss</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Are you a good developer already?</title>
      <author>Paul Facklam</author>
      <pubDate>Tue, 16 Feb 2021 13:09:25 +0000</pubDate>
      <link>https://dev.to/pfacklam/are-you-a-good-developer-already-3j2n</link>
      <guid>https://dev.to/pfacklam/are-you-a-good-developer-already-3j2n</guid>
      <description>&lt;p&gt;As a trainer at &lt;a href="https://dev.to/clicksolutions"&gt;click solutions&lt;/a&gt;, I regularly supervise trainees and students. Through appropriate onboarding and the teaching of technical content they grow from beginners to real developers. Sometimes even really good developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-good-developers-and-what-distinguishes-them" class="anchor"&gt;
  &lt;/a&gt;
  What are good developers and what distinguishes them?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/aNqEFrYVnsS52/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/aNqEFrYVnsS52/giphy.gif" alt="A good developer? - Cat on a notebook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probably not 😉. I think being a good developer it is definitely not related to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;typing fast (maybe even faster than this cat),&lt;/li&gt;
&lt;li&gt;the number of lines of code per day or&lt;/li&gt;
&lt;li&gt;even the theme on your favorite editor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my understanding a good developer...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-writes-working-code" class="anchor"&gt;
  &lt;/a&gt;
  ... writes working code
&lt;/h3&gt;

&lt;p&gt;That comes as a surprise, huh? But yes, good developers make sure that their code works. They do this by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;thinking about it in detail&lt;/strong&gt; - What can go wrong? Beginners are usually too optimistic and think too little about the case of failure. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;planning it&lt;/strong&gt; - Do I have all the information? Are there any side effects? Beginners often start typing immediately to get things done quickly. Not always the best way to write good code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;testing it&lt;/strong&gt; - Are all requirements met? Does everything work as expected or am I overlooking something? Beginners sometimes don't test their own piece of code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-has-internalized-kiss" class="anchor"&gt;
  &lt;/a&gt;
  ... has internalized KISS
&lt;/h3&gt;

&lt;p&gt;Just to clarify. When I say KISS I don't mean the &lt;a href="https://en.wikipedia.org/wiki/Kiss_(band)"&gt;hard rock band from the 80s&lt;/a&gt;. It's more the demand to strive for the simplest solution possible for a certain problem. So, &lt;strong&gt;K&lt;/strong&gt;eep &lt;strong&gt;I&lt;/strong&gt;t &lt;strong&gt;S&lt;/strong&gt;imple, &lt;strong&gt;S&lt;/strong&gt;tupid! Good developers do that (because they are not stupid, right? 😉).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-has-understood-dry" class="anchor"&gt;
  &lt;/a&gt;
  ... has understood DRY
&lt;/h3&gt;

&lt;p&gt;Copy &amp;amp; Paste? No, thank you. Rather: &lt;strong&gt;D&lt;/strong&gt;on't &lt;strong&gt;R&lt;/strong&gt;epeat &lt;strong&gt;Y&lt;/strong&gt;ourself. Good developers do repeat themselves, they encapsulate functionality - even if time is running out again. This prevents errors or inconsistencies and increases maintainability at the same time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-never-stops-learning" class="anchor"&gt;
  &lt;/a&gt;
  ... never stops learning
&lt;/h3&gt;

&lt;p&gt;Technologies/Frameworks come and go. The IT sector is determined by constantly changing requirements and innovations. State-of-the-art topics of today may already be outdated tomorrow. Good developers are aware of this fact and educate themselves independently. Ideally, they love to learn for life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-has-learned-to-work-in-a-team" class="anchor"&gt;
  &lt;/a&gt;
  ... has learned to work in a team
&lt;/h3&gt;

&lt;p&gt;A good developer has understood that working together is faster, better and makes way more fun than being a lone wolf. They share their code &amp;amp; knowledge, ask for help and help others. Lone wolfs may do a good job, but teams do amazing things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-wants-to-get-better-every-day" class="anchor"&gt;
  &lt;/a&gt;
  ... wants to get better (every day)
&lt;/h3&gt;

&lt;p&gt;Working in a team brings certain advantages. For example, you always have someone you can ask for advice or feedback. Feedback is a very good way to develop yourself further, as it gives you insight into the way others think and see things, especially about your code or the way you got there. A good developer knows that and asks for feedback to get better (maybe even every day).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-communicates-in-time-and-purposefully" class="anchor"&gt;
  &lt;/a&gt;
  ... communicates (in time and purposefully)
&lt;/h3&gt;

&lt;p&gt;Problems occur from time to time - they are inevitable. But good developers know when they have lost their way without getting ahead on their own and communicate this before reaching a point of no return (e.g. missing an important deadline). But the same applies when there is something that prevent them from being productive or when they have open questions (e.g. unclear requirements from business side).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;There are many aspects to being a good developer, but please remember: no one is born a master or is even perfect. Aiming to be a better developer already takes you a big step further. If you take the time and work on yourself, the rest will come naturally.&lt;/p&gt;

&lt;p&gt;Maybe one more not so unimportant thought at the end. To become a good developer, however, you have to do one thing above all: practice, practice, practice... Practice makes perfect! 😄&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do you think? What makes a good developer for you? Let's discuss in the comments!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you liked this post, please give me a ❤️ or even a 🦄 and feel free to follow &lt;a href="https://dev.to/pfacklam/"&gt;me&lt;/a&gt; on dev.to. Appreciate it! ✌️&lt;/p&gt;

&lt;p&gt;Finally a few more articles from me. Check it out!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pfacklam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Dh__8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8OJ8JD0n--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/248468/1a2f6ad3-a625-4a72-be2e-7c104d4235b9.jpeg" alt="pfacklam image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pfacklam/native-lazy-loading-of-images-with-zero-javascript-3hnf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Native lazy-loading of images with zero Javascript&lt;/h2&gt;
      &lt;h3&gt;Paul Facklam ・ Feb  8 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/pfacklam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Dh__8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8OJ8JD0n--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/248468/1a2f6ad3-a625-4a72-be2e-7c104d4235b9.jpeg" alt="pfacklam image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pfacklam/the-power-of-template-literals-4e7e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The power of Template Literals&lt;/h2&gt;
      &lt;h3&gt;Paul Facklam ・ Feb 19 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Search and debug gems with `bundle open`</title>
      <author>matt swanson</author>
      <pubDate>Tue, 16 Feb 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/search-and-debug-gems-with-bundle-open-3fbg</link>
      <guid>https://dev.to/swanson/search-and-debug-gems-with-bundle-open-3fbg</guid>
      <description>&lt;p&gt;Ever get frustrated trying to search through code on GitHub? Or wish you could put a breakpoint in a gem so you could figure out what it was doing?&lt;/p&gt;

&lt;p&gt;Don’t mess around with cloning the gem repo or monkey patching code in your own app. Use &lt;code&gt;bundle open&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4c_fVFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://boringrails.com/images/bundle-open.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4c_fVFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://boringrails.com/images/bundle-open.gif" alt="Example of bundle open command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;In your shell, run the command: &lt;code&gt;bundle open GEM_NAME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundler&lt;/code&gt; will open the source code for the exact version of the gem you’ve got installed in your editor. You can search the code inside your editor and even add breakpoints or make code changes locally to test out things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options" class="anchor"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;bundle open&lt;/code&gt; command launches the editor that you’ve set via the &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;BUNDLER_EDITOR&lt;/code&gt; environment variables. You can set this to be &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;VS Code&lt;/code&gt;, or whatever tool you like to use.&lt;/p&gt;

&lt;p&gt;If you’ve made changes to the local gems for debugging or experimental purposes, you can use the &lt;code&gt;bundle pristine&lt;/code&gt; command to restore your gems to their “original” state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Bundler Docs: &lt;a href="https://bundler.io/bundle_open.html"&gt;bundle open&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bundler Docs: &lt;a href="https://bundler.io/v2.2/man/bundle-pristine.1.html"&gt;bundle pristine&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Benefits of Next JS for building websites and apps</title>
      <author>tomgrabski</author>
      <pubDate>Tue, 16 Feb 2021 12:18:24 +0000</pubDate>
      <link>https://dev.to/pagepro_agency/benefits-of-next-js-for-building-websites-and-apps-4ep3</link>
      <guid>https://dev.to/pagepro_agency/benefits-of-next-js-for-building-websites-and-apps-4ep3</guid>
      <description>&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The emerging need for innovation in online experience is pushing modern technologies to stretch and enable new possibilities. As users, we obviously want to make things faster and easier, which gives life to the never-ending iteration of online services. In other words, what we considered impossible yesterday becomes a standard the day after. &lt;/p&gt;

&lt;p&gt;To adapt to this iteration, Facebook built React – a component-based library that enables web developers to build the UI much easier and more efficiently. Now the component-based development was on the peak. &lt;/p&gt;

&lt;p&gt;However, in 2016, Next JS was introduced as a tool for building not components (like React) but full pages. It was intended to become an entire solution in the hands of developers. It gives them, business owners and marketers, a handful of benefits about which you will learn in this blog post.&lt;/p&gt;

&lt;h2&gt;
&lt;br&gt;What is Next JS?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PGzNm-_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pagepro.co/blog/wp-content/uploads/2020/11/next-js-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PGzNm-_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pagepro.co/blog/wp-content/uploads/2020/11/next-js-logo.png" alt="benefits of using nextjs" class="wp-image-4717" width="200" height="120"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next.js is a framework based on JavaScript for building React web applications and superfast static websites.&lt;/p&gt;

&lt;p&gt;In fact, thanks to &lt;a href="https://nextjs.org/docs/advanced-features/automatic-static-optimization"&gt;Automatic Static Optimization&lt;/a&gt;, terms of “static” and dynamic” merge into one.&lt;/p&gt;

&lt;p&gt;It’s a cool feature because thanks to it, you can build a hybrid application containing both server-rendered and statically generated pages.&lt;/p&gt;

&lt;p&gt;It brings Next JS users three main advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rich user experience (easier and faster)&lt;/li&gt;
&lt;li&gt;Outstanding performance (also easier and faster)&lt;/li&gt;
&lt;li&gt;Rapid feature development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These things convinced not only the biggest and most popular organizations like Netflix, Uber, or Twitch but also smaller companies that are yet to conquer the digital world. In fact, almost every company can benefit from Next JS; however, sometimes it might be overkill.&lt;/p&gt;

&lt;p&gt;This JavaScript-based framework is also considered as one of the fastest-growing React frameworks, which is perfect to work with any static site.&lt;/p&gt;

&lt;h2&gt;
&lt;br&gt;When to use Next JS?&lt;/h2&gt;

&lt;p&gt;The decision to use any technology should be based on your business goals. In the case of Next JS, we strongly recommend it if you want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increase your conversion and sales&lt;/li&gt;
&lt;li&gt;Boost your marketing channels&lt;/li&gt;
&lt;li&gt;Outperform your competition online&lt;/li&gt;
&lt;li&gt;Serve clients with much better user experience&lt;/li&gt;
&lt;li&gt;Cut the maintenance costs&lt;/li&gt;
&lt;li&gt;Scale your business easier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Achieving these goals with Next JS is possible thanks to the benefits it comes with. You will learn more about them in the next section, so keep reading!&lt;/p&gt;

&lt;h2&gt;
&lt;br&gt;Benefits of using Next JS&lt;/h2&gt;

&lt;p&gt;Depending on your role in the company, you will be interested in different Next JS benefits which we can divide into three main categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Benefits for business&lt;/li&gt;
&lt;li&gt;Benefits for marketing&lt;/li&gt;
&lt;li&gt;Benefits for development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at them separately.&lt;/p&gt;

&lt;h3&gt;
&lt;br&gt;Benefits of using Next.js for business&lt;/h3&gt;

&lt;p&gt;The ultimate goal of every business and its digital presence is to increase conversion rate, and consequently, sales. And one of the most important factors that have an impact on it is &lt;strong&gt;user experience&lt;/strong&gt;. So the question is – how to make it truly unique and pleasant?&lt;/p&gt;

&lt;p&gt;Yes, you guessed it – the answer is Next JS.&lt;/p&gt;

&lt;p&gt;It gives you total freedom over the front-end layer, so you don’t have to limit yourself to any plugins, templates or any other restrictions of the eCommerce platform or CMS you are working with.&lt;/p&gt;

&lt;p&gt;Other business-related benefits of Next are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Adaptability and responsiveness&lt;/strong&gt; – websites and applications created with Next JS work on any device and adapt to any screen. Therefore, users can access your website or application with their favourite device.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data security&lt;/strong&gt; – the static site doesn’t have a direct connection to the database, dependencies, user data or other sensitive information, which makes it perfectly safe.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Faster time to market &lt;/strong&gt;– many ready-to-use components available with Next make building MVP much faster. This way, you can get feedback from real users quickly and make proper changes to your product without wasting time and budget.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fully omnichannel &lt;/strong&gt;– Next JS websites and web apps work on any device, so they are accessible to everyone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Short page load time&lt;/strong&gt; – Next JS websites are super-fast because they are static so visitors will be more than satisfied with the performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Support on demand&lt;/strong&gt; – since Next JS is a React framework, it won’t be difficult to find another developer without a need of building everything from scratch once again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
&lt;br&gt;Benefits of using Next.js for marketing&lt;/h3&gt;

&lt;p&gt;Marketing is strongly linked with business because when executed well, it helps companies not only to thrive but also to grow. And one of the ways to do that through marketing efforts is &lt;strong&gt;SEO efficiency&lt;/strong&gt; and &lt;strong&gt;organic traffic growth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next JS is perfect for that because websites and applications created with Next JS are superfast. And you should already know that page load speed is one of the key SEO ranking factors. In other words, the faster the page is the bigger chances of ranking higher than slower sites.&lt;/p&gt;

&lt;p&gt;However, the benefits of Next.js for marketing don’t end there so let’s sum them up: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Increased conversion rate&lt;/strong&gt; – improved page load speed, rich user experience and high accessibility means higher conversion. If the users are happy with the customer experience they get, they are more likely to come back later for more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increased organic traffic&lt;/strong&gt; – Next JS websites are not only super fast but also easy to scan for robots and provide a great user experience. These three things – speed, structure and UX – are important ranking factors and will make your website rank higher in search engines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unique user experience – &lt;/strong&gt;user experience is – together with speed – the most beneficial thing of using Next JS. Marketers love design freedom – especially in the eCommerce industry where many online stores look alike and creating &lt;a href="https://pagepro.co/custom-storefront-for-headless-ecommerce.html"&gt;custom storefront&lt;/a&gt; is something that can truly differentiate their stores from competitors.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
&lt;br&gt;Benefits of using Next.js for development&lt;/h3&gt;

&lt;p&gt;Next JS comes with many features that translate into benefits – not only for business and marketing but also for the development process. The most important thing that developers love is &lt;strong&gt;reusable components&lt;/strong&gt;. As for business, it cuts development costs. As for developers, it cuts development time.&lt;/p&gt;

&lt;p&gt;However, there are more features that are helpful for developers. They especially enjoy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Built-in CSS support&lt;/strong&gt; – possibility to import CSS files from a JavaScript file.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/blog/next-10#built-in-image-component-and-automatic-image-optimization"&gt;&lt;strong&gt;Built-in Image Component and Automatic Image Optimization&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;– this feature automatically optimises images using the new &lt;em&gt;next/image&lt;/em&gt; component&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fast Refresh&lt;/strong&gt; – fast, live-editing experience. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid of SSR and SSG&lt;/strong&gt; – prerender pages at build time or request time in a single project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Incremental Static Generation&lt;/strong&gt; – it allows developers to update existing pages by re-rendering them in the background as traffic comes in. This way, static content can become dynamic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TypeScript support&lt;/strong&gt; – automatic TypeScript configuration and compilation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Zero Config&lt;/strong&gt; – Next allows you to focus on the business logic of your Next js app instead of the application logic. And to help you, it provides automatic compilation and bundling. In other words, Next is optimised for production right from the start.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another worth-mentioning benefit is &lt;strong&gt;community support &lt;/strong&gt;– the number of Next JS contributors grows with its popularity which means that there are a lot of ready-to-go solutions to issues that developers may encounter during the development process.&lt;/p&gt;








&lt;h2&gt;Who uses Next JS?&lt;/h2&gt;





&lt;p&gt;Next JS is a great idea for many types of websites and applications, but there are some cases when it really shines and makes full use of its features. Generally speaking, Next JS is a perfect choice when SSR becomes more important than SSG.&lt;/p&gt;

&lt;p&gt;In other words, use Next if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content is being frequently updated or needs to be always up-to-date&lt;/li&gt;
&lt;li&gt;You have a large, multi-user site like TikTok (which requires real-time publishing)&lt;/li&gt;
&lt;li&gt;You can’t afford to rebuild the whole website (i.e. you have a big eCommerce), as it would take ages to do it with SSG.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
&lt;br&gt;Large multi-user websites&lt;/h3&gt;

&lt;p&gt;For large multi-user platforms and the amount of data generated by its users in real-time, it’s not a surprise that the most important thing of such a platform is its performance.&lt;/p&gt;

&lt;p&gt;On top of that, “real-time” means that rendering needs to be done constantly, with the newest data available.&lt;/p&gt;

&lt;h4&gt;Examples of large multi-user websites built with Next JS:&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.tiktok.com/"&gt;TikTok&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a93Vlcni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/6haLfWSLJN0SX7M2CV4Lm8R16LTGvLJ3dnCes0mxQVJZwDl1qikUymkGTi1y7Lg5Fn0sRwPfhpoOAhspeunbHHO0LXxn1v5NAeHYY6Rzl0PN9gHBie8IMwNE1sbFMu6xJi1cRg9m" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a93Vlcni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/6haLfWSLJN0SX7M2CV4Lm8R16LTGvLJ3dnCes0mxQVJZwDl1qikUymkGTi1y7Lg5Fn0sRwPfhpoOAhspeunbHHO0LXxn1v5NAeHYY6Rzl0PN9gHBie8IMwNE1sbFMu6xJi1cRg9m" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JIUU2Fwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/rESO1v6KWKLUSsvy142GYkl9-E8v52xtDYeedDP-HblBtTKtmUPIpe_FU9N8LhUT-pV9Ov2pe1oZL2reLVHaW-JLquL7QbsFNWBhW1pivUkqpS2dBydDxf0IF6LvfHqBgdKis-ax" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JIUU2Fwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/rESO1v6KWKLUSsvy142GYkl9-E8v52xtDYeedDP-HblBtTKtmUPIpe_FU9N8LhUT-pV9Ov2pe1oZL2reLVHaW-JLquL7QbsFNWBhW1pivUkqpS2dBydDxf0IF6LvfHqBgdKis-ax" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitch.com/"&gt;Twitch mobile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lO0KuywU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/HUlSH3LPO9RQ8gfky7HEDXj0iiiTJwfIkSiivg2c9hC88pPyLfOrNhTTWDGZXeQYoQcPSEOWAAuNkuyjZUGDKrNNQZpa6E2zfpRMaWAFbLgVSVWloOXvGSm7UMEpv9dWS_eGYeJy" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lO0KuywU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/HUlSH3LPO9RQ8gfky7HEDXj0iiiTJwfIkSiivg2c9hC88pPyLfOrNhTTWDGZXeQYoQcPSEOWAAuNkuyjZUGDKrNNQZpa6E2zfpRMaWAFbLgVSVWloOXvGSm7UMEpv9dWS_eGYeJy" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;br&gt;Client-side rendered applications (SPA/MPA)&lt;/h3&gt;

&lt;p&gt;SPA is a web application or website that interacts with the web browser by dynamically rewriting the current web page with new data from the web server, instead of the default method of the browser loading entire new pages.&lt;/p&gt;

&lt;p&gt;SPA is a perfect solution to build an exceptional and rich interaction between the user and your application.&lt;/p&gt;

&lt;p&gt;Top Single Page Application requirements should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Super performant&lt;/li&gt;
&lt;li&gt;Ability to support feature rich apps&lt;/li&gt;
&lt;li&gt;Great user experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal is faster transitions that make the website feel more like a native app.&lt;/p&gt;

&lt;h4&gt;Examples of SPAs built with Next JS:&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://hulu.com/"&gt;hulu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hwdCnuYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/JZ4npzSbOVEn_0NjxQyCAAyHOy2exNK4l45FQ0o9H1OjQf6Zdnv_q3Vgiwr0cR9zodZosFm5JD42HHmraPDfrkdWeLLngkhHhQBOufcFDH9O468ViMXXVwAX4kc-qGhvNLYEZ8F3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwdCnuYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/JZ4npzSbOVEn_0NjxQyCAAyHOy2exNK4l45FQ0o9H1OjQf6Zdnv_q3Vgiwr0cR9zodZosFm5JD42HHmraPDfrkdWeLLngkhHhQBOufcFDH9O468ViMXXVwAX4kc-qGhvNLYEZ8F3" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.binance.com/"&gt;Binance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3WlMYl_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/FxfqmRZh-uno4h11_-1x2cFAgLGsvX86hbcCd8yauKMwhkPlLXDJDtqwa-N0zTr-XnkHh50ZhxX4jcoA5GMFQHBXQ8JQma2ljJaQ0CLrTIIMuvOAMCC4bvZNh6ozyYB4gNdjNy-f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WlMYl_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/FxfqmRZh-uno4h11_-1x2cFAgLGsvX86hbcCd8yauKMwhkPlLXDJDtqwa-N0zTr-XnkHh50ZhxX4jcoA5GMFQHBXQ8JQma2ljJaQ0CLrTIIMuvOAMCC4bvZNh6ozyYB4gNdjNy-f" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ticketmaster.com/"&gt;Ticket Master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rxdDqMP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/mulusSMsH-dX9OepMg4N1YuVB7YRr-_mapr7OsDR0NGT8W-a1_5_ICt4kwM2YaaWXOuCY-aPoKVJqwC8BVtinORUGBYYruiRE3BDihxLJRqvw_oe73uqzuZxb7n6StMPn4lpwv1G" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rxdDqMP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/mulusSMsH-dX9OepMg4N1YuVB7YRr-_mapr7OsDR0NGT8W-a1_5_ICt4kwM2YaaWXOuCY-aPoKVJqwC8BVtinORUGBYYruiRE3BDihxLJRqvw_oe73uqzuZxb7n6StMPn4lpwv1G" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;br&gt;Big eCommerce Websites&lt;/h3&gt;

&lt;p&gt;Conversion is crucial for eCommerce platforms, as, in the end, the user journey should end up with a customer making an order.&lt;/p&gt;

&lt;p&gt;Besides that, any change, even a small one, needs to be visible immediately everywhere. Therefore, the production of SSG pages would take ages in that case.&lt;/p&gt;

&lt;p&gt;For Big eCommerce, the most important factors are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed&lt;/li&gt;
&lt;li&gt;Custom user experience&lt;/li&gt;
&lt;li&gt;Ability to make frequent changes&lt;/li&gt;
&lt;li&gt;Integrations with third-party systems like: PIM, marketing automation, ERP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Examples of big eCommerce websites built with Next JS:&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.deliveroo.com/"&gt;Deliveroo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zA4QmRgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/qSv7xJyzzySwepuB6bkwBIi8ydT53SigW9vLAcyHasloWk8S1f_EcO1RddRyd28FbUU_1n2bEvsBvVlLua_dJm6_ETfNdzFwCltS0ltHLZosCWKIRWwjt1bXwn_JAmEZnsZMYR2p" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zA4QmRgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/qSv7xJyzzySwepuB6bkwBIi8ydT53SigW9vLAcyHasloWk8S1f_EcO1RddRyd28FbUU_1n2bEvsBvVlLua_dJm6_ETfNdzFwCltS0ltHLZosCWKIRWwjt1bXwn_JAmEZnsZMYR2p" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.jet.com/"&gt;JET&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5u0Xj4ix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/DSZlDbAaX7jrD25JB8SFj66HIjFFB3Gr9GU0ArOl6K0NlS6WIoZ-60K_OmE0LRZGQUztlPUXn4DeXSzpTypLVOS3FwuTG2ya9nNcr0EBXyiErJHokdJKVqUaXqefvuedIaktkWfT" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5u0Xj4ix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/DSZlDbAaX7jrD25JB8SFj66HIjFFB3Gr9GU0ArOl6K0NlS6WIoZ-60K_OmE0LRZGQUztlPUXn4DeXSzpTypLVOS3FwuTG2ya9nNcr0EBXyiErJHokdJKVqUaXqefvuedIaktkWfT" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ticketswap.com/"&gt;Ticket Swap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94SL13AR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lQFmtHAQFoullPFuCYBM_1u0Chj8okeNE6cj76-UgWe4WY-1uGHBASmyL3-tboZtIYbra0s2R5Rebk08NHBxrUkFzDr09qrTy23hdz0a8x56P89U06ErexCcD5BcGiOzBJ4FdC8G" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94SL13AR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lQFmtHAQFoullPFuCYBM_1u0Chj8okeNE6cj76-UgWe4WY-1uGHBASmyL3-tboZtIYbra0s2R5Rebk08NHBxrUkFzDr09qrTy23hdz0a8x56P89U06ErexCcD5BcGiOzBJ4FdC8G" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;br&gt;Web portals&lt;/h3&gt;

&lt;p&gt;The success of a web portal is mostly dependent on its performance, as a huge amount of data is constantly added in real-time by its users (which is called user-generated content).&lt;/p&gt;

&lt;p&gt;The other important factor for web portals is personalization and security.&lt;/p&gt;

&lt;p&gt;Consider, for example, a medical portal with a fragile health data of thousands of patients. It would be best if you had something extremely safe and in many cases, encoded and decoded in real-time.&lt;/p&gt;

&lt;p&gt;We could say that the most important factors for web portals are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Super performance&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Ability to support custom features&lt;/li&gt;
&lt;li&gt;Full support for real-time user generated content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is why Next JS is much of a help in this case, as it would be tough to interact with users just by using static pages. &lt;/p&gt;

&lt;h4&gt;Examples of web portals built with Next JS:&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.ticketmaster.com/"&gt;Ticket Master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76zAdHFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/uPdfYi74Rp9tX3-wbsaUZs-K4ZKbu3bhqGWYG5PYZoQVzscIfAU5yk2eCZWIrmbba5J7C7o73_Uh79LjH5auJ3R4MvlqC2RBYWoBIZ98b_1RBMnwJLo3In4RUwXzgG1QMdUN4Qz4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76zAdHFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/uPdfYi74Rp9tX3-wbsaUZs-K4ZKbu3bhqGWYG5PYZoQVzscIfAU5yk2eCZWIrmbba5J7C7o73_Uh79LjH5auJ3R4MvlqC2RBYWoBIZ98b_1RBMnwJLo3In4RUwXzgG1QMdUN4Qz4" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.realtor.com/"&gt;Realtor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hH2Heqqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/duE_UTGZWvgPnREK5g2f18TKlPh3QcLOL7mdhWAr_1lBatvks7Gg4HzsUU9kf9VHaUfUcMNdaRHNXHyH6PzNtGRXPzgd-i4nboMTSy7Ghwp46sSc4IhdtD5yb9tyhhEFIU6rQK2z" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hH2Heqqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/duE_UTGZWvgPnREK5g2f18TKlPh3QcLOL7mdhWAr_1lBatvks7Gg4HzsUU9kf9VHaUfUcMNdaRHNXHyH6PzNtGRXPzgd-i4nboMTSy7Ghwp46sSc4IhdtD5yb9tyhhEFIU6rQK2z" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tvpublica.com.ar/"&gt;TV Publica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AwO6qe-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mzRoV-ihwbbdAuf_xJ_4Qjg12T08MKQTOSajqQ9rwhxa7jpnwgFS9amSqCsG9X48CS3WfsCUB0DVRA4KYviUE-f0PuSn1r6fzulVpSf7pnwnBN-cOdxBnNPpUuFqV6Ko_Xolg8Pc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AwO6qe-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mzRoV-ihwbbdAuf_xJ_4Qjg12T08MKQTOSajqQ9rwhxa7jpnwgFS9amSqCsG9X48CS3WfsCUB0DVRA4KYviUE-f0PuSn1r6fzulVpSf7pnwnBN-cOdxBnNPpUuFqV6Ko_Xolg8Pc" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React Router: A simple tutorial on nested routes.</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 16 Feb 2021 10:31:05 +0000</pubDate>
      <link>https://dev.to/ms_yogii/react-router-a-simple-tutorial-on-nested-routes-1237</link>
      <guid>https://dev.to/ms_yogii/react-router-a-simple-tutorial-on-nested-routes-1237</guid>
      <description>&lt;p&gt;Hello folks, &lt;/p&gt;

&lt;p&gt;React Router Dom becomes one of the mandatory libraries to understand when you are working with ReactJS. Before a while, I came across this very common use-case of React Routing, where there are nested routes at many levels. Initially I was pretty confused, as React Router’s simple nested routing pattern couldn't work for me. I had to implement routing which was nested upto 3 levels. &lt;/p&gt;

&lt;p&gt;This becomes a very common use case when you are working with React App, so I thought of sharing my routing approach here. So, let's dive in.  &lt;/p&gt;

&lt;p&gt;For this tutorial, I created a simple project with &lt;code&gt;create-react-app&lt;/code&gt; and added &lt;code&gt;react-router-dom&lt;/code&gt; to it using &lt;code&gt;npm&lt;/code&gt;. As these are pretty basic steps, I am not including them into this article. If you want to skip this tutorial and directly check the code, you can check my &lt;a href="https://github.com/ms-yogi/react-nested-routes"&gt;github repo&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So, we are going to create a simple looking dashboard, which will have one common sidebar with some page link. One of these pages will have a separate navigation bar on top to go to some more pages directly. We will also have one login page, from which we will go inside this dashboard. Pretty straightforward, right? &lt;br&gt;
&lt;em&gt;P.S. There will not be any login system or authorisation for any routes as that is out of scope for this tutorial.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The routing will start by adding a &lt;code&gt;BrowserRouter&lt;/code&gt; to the app. So inside &lt;code&gt;App.js&lt;/code&gt;, wrap complete code into &lt;code&gt;BrowserRouter&lt;/code&gt;.  Now, let us create a very simple login page, to get started with the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Login&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we are just creating a button to create an effect of login. This button will have a link to the &lt;code&gt;/home&lt;/code&gt; page, where the remaining app is present.&lt;/p&gt;

&lt;p&gt;Now, to move forward, we will create and define other routes for our app. In this app, we will have one single registry for defining routes. I will call it &lt;code&gt;Routes.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In react router, common way to declare a route is to define a component and a path for that route. So, we will create an array of objects, where each object will represent a single route. With some basic routes, our &lt;code&gt;Routes.js&lt;/code&gt; will look something like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, our Home component is the root component inside our app. Now, we need to add nesting from Home component. Inside home, we will have a common sidebar and one main section where we will render all the pages from that sidebar. &lt;/p&gt;

&lt;p&gt;Hence, our next requirement will be to add those pages as a nested route from the home component. To create these nested routes, we will create one similar array of routes, as we have created above, but inside Home component. React Router Dom have added a property called routes, to every Route component and that property will contain list of all the nested routes. Let's update our route component with some pages inside Home. &lt;/p&gt;

&lt;p&gt;So, our route will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Page1&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./pages/Page1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Page2&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./pages/Page2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// added nested routes&lt;/span&gt;
    &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;              
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Also note how we added /home before the &lt;/span&gt;
        &lt;span class="c1"&gt;// actual page name just to create a complete path&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home/page1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home/page2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Till now, we have created some nested routes but those are yet to be configured inside our app. So, let's add these to &lt;code&gt;App.js&lt;/code&gt; inside &lt;code&gt;BrowserRouter&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Routes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/RouteWithSubRoutes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BrowserRouter&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Code for &lt;code&gt;App.js&lt;/code&gt; is quite simple. We have added one &lt;code&gt;BrowserRouter&lt;/code&gt; and one 'Switch'. We are redirecting our app from &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;/login&lt;/code&gt; and then load all routing. &lt;/p&gt;

&lt;p&gt;The map function is just iterating over the routes array, but now you can see one interesting component &lt;code&gt;RouteWithSubRoutes&lt;/code&gt;. Let us understand what we are doing inside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;
        &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;.
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we are just returning the same component but important point to note here is, we are passing all the subroutes, to that component. Hence, the parent route will always be aware of all of its subroutes. &lt;/p&gt;

&lt;p&gt;Alright, our routes are sorted, app component is sorted. Now, we will need to see how home component will manage all those subroutes which we have just passed to it.&lt;/p&gt;

&lt;p&gt;Here is our Home component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/RouteWithSubRoutes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Notice how we are passing routes here &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home/page1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the url&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Page1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// name that appear in Sidebar&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home/page2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Page2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* This can be treated as a sidebar component */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sidebar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Nested&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;menuItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;menuItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;menuItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;menuItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Home component is similar to any usual react component. We have created an array here just to show the sidebar and we have added links to all the pages inside that sidebar. One &lt;code&gt;Switch&lt;/code&gt; is there to render the component which user selects on clicking the sidebar and again, it is using the same &lt;code&gt;RouteWithSubRoutes&lt;/code&gt; component to pass on further subroutes(If any). &lt;/p&gt;

&lt;p&gt;One thing which is very important to notice here is routes passed down to home component like props. This way the Home will always be aware of its subcomponents and routing will never go wrong! &lt;/p&gt;

&lt;p&gt;You can keep nesting in more levels as required in your app with the same approach. In the &lt;a href="https://github.com/ms-yogi/react-nested-routes"&gt;github repo&lt;/a&gt; I have also added a Navbar to one page. You can check that out. &lt;/p&gt;

&lt;p&gt;There is also one similar example in the official documentation of react router &lt;a href="https://reactrouter.com/web/example/route-config"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That's all about the nested routing for React! If you follow some different approach for this, do let me know that in comments. &lt;/p&gt;

&lt;p&gt;And your feedback on article will always be welcomed!! &lt;br&gt;
Keep learning!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using Font Awesome 5 🏳️ in React</title>
      <author>Adyasha Mohanty</author>
      <pubDate>Tue, 16 Feb 2021 09:53:27 +0000</pubDate>
      <link>https://dev.to/adyasha8105/using-font-awesome-5-in-react-3j8j</link>
      <guid>https://dev.to/adyasha8105/using-font-awesome-5-in-react-3j8j</guid>
      <description>&lt;p&gt;The &lt;a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react"&gt;Font Awesome&lt;/a&gt; went all out with new version 5 adding a wide variety of SVG icons and providing users with new features🤩.&lt;/p&gt;

&lt;p&gt;If you’ve worked with Font Awesome in the past, something like &lt;code&gt;fa-profile&lt;/code&gt; might look familiar. Font Awesome introduced icon styles like &lt;code&gt;fas&lt;/code&gt; for Font Awesome solid, &lt;code&gt;fal&lt;/code&gt; for Font Awesome Light, etc. This adds a great deal of flexibility for UI/UX design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSCjNFYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108038643-1916df00-7061-11eb-8c97-698af453e2d8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSCjNFYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108038643-1916df00-7061-11eb-8c97-698af453e2d8.PNG" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moreover, there are Font Awesome packages (like the one we're going to use!) for &lt;em&gt;React&lt;/em&gt;, Angular, and Vue 😮.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;To get started, we’re going to install &lt;code&gt;react-fontawesome&lt;/code&gt; along with their libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// If you are using npm:
$ npm install @fortawesome/react-fontawesome @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons

// or, using Yarn:
$ yarn add @fortawesome/react-fontawesome @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;em&gt;The packages we're introducing just contain the free version 🆓. If you’re looking to utilize new _pro icons&lt;/em&gt; and styles, look at their &lt;a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react"&gt;site&lt;/a&gt; for additional installation and setup directions._&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0BwCTzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108038981-7f9bfd00-7061-11eb-8995-8ab1feb3642d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0BwCTzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108038981-7f9bfd00-7061-11eb-8995-8ab1feb3642d.PNG" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution" class="anchor"&gt;
  &lt;/a&gt;
  Execution
&lt;/h2&gt;

&lt;p&gt;Let's move forward to implement these beautiful icons 👌 throughout our app.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;There are numerous approaches to utilize these symbols however we will going to focus on building a library to effortlessly get to all symbols.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following code to add icons to the library can be done at a root level of our application i.e &lt;code&gt;App.js&lt;/code&gt;. We’ll start by importing the required files and calling &lt;code&gt;fontawesome-svg-core&lt;/code&gt;’s &lt;code&gt;library.add&lt;/code&gt; to pull our icons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;library&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@fortawesome/fontawesome-svg-core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;faCheckSquare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;faMugHot&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@fortawesome/free-solid-svg-icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;faCheckSquare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;faMugHot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;All icons can be found in &lt;a href="https://fontawesome.com/icons?d=gallery&amp;amp;m=free"&gt;Font Awesome’s icon library&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have successfully added the icons we need. Now it's time to implement it in our component 👍.&lt;br&gt;
Imagine that we have a component called &lt;code&gt;Icon.js&lt;/code&gt;. Since they are already been added to our library in &lt;code&gt;App.js&lt;/code&gt; we just need to import this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Icon.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fortawesome/react-fontawesome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Drink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;check-square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nx"&gt;Drink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mug-hot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By adding &lt;code&gt;faCheckSquare&lt;/code&gt; and &lt;code&gt;faMugHot&lt;/code&gt; to the library, we can refer to them throughout the app using their icon string names &lt;code&gt;check-square&lt;/code&gt; and &lt;code&gt;mug-hot&lt;/code&gt; (in lowercase letters).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RgaD5cM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108039796-955df200-7062-11eb-83cc-cd1379795466.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RgaD5cM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108039796-955df200-7062-11eb-83cc-cd1379795466.PNG" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait 🤔, I think our icons and text are a little squished and, might I venture to say, boring, so let’s add a space between the icon and the text and change the icon’s color and size :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;check-square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;Drink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mug-hot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, the &lt;em&gt;FontAwesomeIcon&lt;/em&gt; component can take a few different props to change the icon style. Here we used the &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; props. The size prop expects a string value like xs, lg, 2x, 3x and so on 😃. &lt;br&gt;
There are quite a few more props that can be passed-in. Notably, the &lt;code&gt;rotation&lt;/code&gt; and &lt;code&gt;pulse&lt;/code&gt; boolean props will have the icon rotate on itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gl_4jyzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108039940-bb839200-7062-11eb-8e03-a6d38e23e11a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gl_4jyzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/54095539/108039940-bb839200-7062-11eb-8e03-a6d38e23e11a.PNG" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Note: Don't use the CDN link of FontAwesome in your &lt;code&gt;index.html&lt;/code&gt; file. It will decrease the performance of your site.&lt;/em&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all. Hurray🎉, you did it. The process is pretty straight-forward but you can easily implement this in your app. Do give it a try, you will definitely love it 😍. &lt;/p&gt;

&lt;p&gt;Thanks for Reading! Have a great day :)&lt;/p&gt;

&lt;p&gt;Find me on Twitter 👀 &lt;a href="https://twitter.com/Adyasha8105"&gt;@Adyasha805&lt;/a&gt;.&lt;br&gt;
This post is also posted on my &lt;a href="https://www.adyablogs.tech/blogs/Using-Font-Awesome-5-in-React"&gt;blog&lt;/a&gt; page.&lt;/p&gt;

</description>
      <category>react</category>
      <category>fontawesome</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Stay Motivated While Learning to Code</title>
      <author>Cole Caccamise</author>
      <pubDate>Tue, 16 Feb 2021 05:44:49 +0000</pubDate>
      <link>https://dev.to/colecaccamise/how-to-stay-motivated-while-learning-to-code-1oi5</link>
      <guid>https://dev.to/colecaccamise/how-to-stay-motivated-while-learning-to-code-1oi5</guid>
      <description>&lt;p&gt;Over the past 2 years, I have been attempting to teach myself to code. I have faced many hurdles, however, a lack of drive has been the largest roadblock in my journey. Actually learning the content isn’t the hard part, it’s having the motivation to continue. Now, this isn’t to say that it’s easy to learn code, because it’s not, it just takes serious dedication. Having the drive to learn is going to make the process much easier. For every trip-up you encounter, it’ll be easier to get back up when you truly want to succeed.&lt;/p&gt;

&lt;p&gt;These tips are greatly aimed at beginners who are overwhelmed with the long road ahead but is not exclusive to them. Everything I’m about to mention is applicable to anyone, at any level. The truth is that you will NEVER stop learning, and will always need something to push you forward.&lt;/p&gt;

&lt;p&gt;Before you read onward, I want you to ask yourself: Do I truly have a passion for code? Do I aspire to build things and solve problems? That is what coding, at its core, really is. If your answer to either of those questions was no, then coding may not be for you. Now, I’m not saying that having a passion for coding means you will never feel discouraged or tired. Coding is my biggest passion, yet to this day I still struggle staying on track at times. If you lack devotion and love for coding, you’re going to have an awful time. Learning is already hard enough, and without the motivation to do so, it’s going to be difficult to overcome the countless hurdles you’ll encounter.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-1-have-an-end-goal-in-mind" class="anchor"&gt;
  &lt;/a&gt;
  Tip #1 — Have An End Goal In Mind
&lt;/h1&gt;

&lt;p&gt;My biggest piece of advice is to have something that you want to work towards and accomplish in the long-term. This doesn’t be anything crazy, just something that you’re excited about. To give you an idea, I’ll share mine. I want to create content that inspires people and build a SaaS/Freelancing business that will allow me to work for myself in the next 5 years. Now, as I said, your dream doesn’t have to be as big as mine. You may just want to have the security of a typical 9–5 job, and that’s completely okay. Not everyone is fit for an entrepreneurial lifestyle and all of the things that come along with it. You might not even want to make a career out of code at all, and just learn it as a hobby. No matter what your end goal is, just make sure that it is &lt;strong&gt;yours&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-2%E2%80%8A%E2%80%8Astay-organized-and-consistent" class="anchor"&gt;
  &lt;/a&gt;
  Tip #2 — Stay Organized And Consistent
&lt;/h1&gt;

&lt;p&gt;Try to turn coding into a habit. Set aside a time as frequently as possible that fits into your schedule. Whether this is 30 minutes or 3 hours, it doesn't matter. Obviously, the more serious you are about learning and the faster you want to get through it, the more time you’ll have to spend. Fun fact: it only takes around 21 straight days of doing something for it to become a habit. Once coding becomes as routine as brushing your teeth, it’ll be so much easier to sit down and get to work.&lt;/p&gt;

&lt;p&gt;I recommend making a list of short-term goals for yourself for each week and put them into a calendar. This will divide up the content that you need to focus on and make it less overwhelming. I have really enjoyed using the app &lt;a href="//HTTP://notion.so"&gt;Notion&lt;/a&gt; to manage my time, but it did take quite a bit for me to tailor it to my liking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-3-have-a-good-environment" class="anchor"&gt;
  &lt;/a&gt;
  Tip #3 — Have A Good Environment
&lt;/h1&gt;

&lt;p&gt;I cannot stress enough the importance of having a good workspace. Having an area that you can sit down (or stand) in peace will increase your focus immensely, and in turn, help you to become more motivated. Make sure you are in a quiet space away from any possible distractions. If you can, try and leave your phone in a separate room to prevent you from being distracted. Turn on some non-wordy music like lofi beats that you can relax to. If your budget allows it, having a quality chair is one of the best investments you can make. After all, it is what you will be spending most of your time working in (unless, you’re using a standing desk, of course). I personally use the Autonomous ErgoChair 2, which I absolutely love. It’s pretty comfortable and for 369 USD, it’s not a bad deal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-4-prevent-burnout-and-take-a-break" class="anchor"&gt;
  &lt;/a&gt;
  Tip #4 — Prevent Burnout And Take A Break
&lt;/h1&gt;

&lt;p&gt;It’s going to take an immense amount of effort to learn to code, but it's crucial that you still rest your mind. It’s not healthy to put all of your energy into this. Cut yourself some slack, and take a break every so often. During every coding session, make sure to take a break and go grab a glass of water, go for a quick walk, or just anything to clear your mind. It’s good practice to take a break every couple of hours or so. Make it long enough where you will feel refreshed upon returning but no too long that you have lost your motivation to continue. 10–15 minutes is a good rule of thumb.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tip-5-be-disciplined" class="anchor"&gt;
  &lt;/a&gt;
  Tip #5 — Be Disciplined
&lt;/h1&gt;

&lt;p&gt;While I strongly believe that the previous tips will help you to stay motivated, there will still be times you feel discouraged. When you simply cannot find the drive to continue, it's up to your self-discipline to keep you going. The definition of discipline is the practice of training [yourself] to obey rules or a code of behavior, using punishment to correct disobedience. You need to make yourself code, even when you don’t feel like it. Circling back to my previous tip of having an end goal, recognizing that by continuing to learn, you are closer to your dream, you will have the strength to push yourself forward.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#closing-remarks" class="anchor"&gt;
  &lt;/a&gt;
  Closing Remarks
&lt;/h1&gt;

&lt;p&gt;I have not had an extremely successful past with learning to code. It took me close to a year and a half to find the motivation to take this seriously. I realized just a few short months ago that I do truly have a passion for this field. Learning to code has been one of the most enjoyable experiences of my life and I am extremely grateful to have the drive to push myself harder every day. I hope that by following the tips I have outlined in this article, you can also find the motivation to continue on your journey. I wish you the best of luck and hope to see you again soon ;)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you for reading! While you’re here, let me introduce myself:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My name is Cole Caccamise and I’m a Content Creator, Developer, and Tech Enthusiast.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Along with writing about programming here, I share similar content on &lt;a href="https://www.youtube.com/channel/UCRU9gfeM85WxFqxJFrDsCFQ"&gt;YouTube&lt;/a&gt;, &lt;a href="//HTTP://instagram.com/cole.caccamise"&gt;Instagram&lt;/a&gt;, and &lt;a href="//HTTP://twitter.com/colecaccamise"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>motivation</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript: Date Cheat Sheet</title>
      <author>Jenuel Oras Ganawed</author>
      <pubDate>Tue, 16 Feb 2021 05:30:12 +0000</pubDate>
      <link>https://dev.to/brojenuel/javascript-date-cheat-sheet-1498</link>
      <guid>https://dev.to/brojenuel/javascript-date-cheat-sheet-1498</guid>
      <description>&lt;h3&gt;
  &lt;a href="#cheat-sheet-bookmark" class="anchor"&gt;
  &lt;/a&gt;
  CHEAT SHEET BOOKMARK
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;INTRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#declare"&gt;Declaring/Creating Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getfunctions"&gt;GET FUNCTIONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setfunctions"&gt;SET FUNCTIONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dateconvert"&gt;Date Convertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;Most of the time when we are saving data to our databases, one of the most types we always use is date types. So as a developer we should atleast know how we can manipulate dates. So in this articles I am showing how you can manipulate dates in JavaScript.&lt;/p&gt;

&lt;p&gt;For more like this hit &lt;strong&gt;&lt;em&gt;follow&lt;/em&gt;&lt;/strong&gt;, and if you want to show support by donating, click this link: &lt;a href="https://www.buymeacoffee.com/BroJenuel"&gt;BUYMECOFFEE&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaring-dates" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="declare"&gt;&lt;/a&gt;Declaring Dates
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NEW DATE OBJECT&lt;/span&gt;
    &lt;span class="c1"&gt;// new Date() - will create a new Date Object in a current date&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Tue Feb 16 2021 12:04:01 GMT+0800 (Philippine Standard Time)&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-02:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// you can pass a date inside a parameter&lt;/span&gt;

&lt;span class="c1"&gt;// DATE NOW FUNCTION&lt;/span&gt;
    &lt;span class="c1"&gt;//Date.now - Returns the numeric value corresponding to the current time&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//1613449122179 &lt;/span&gt;

&lt;span class="c1"&gt;// UTC DATE&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utcDate1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utcDate2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utcDate1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Fri, 02 Feb 1996 03:04:05 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utcDate2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Sun, 31 Dec 1899 00:00:00 GMT&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#get-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="getfunctions"&gt;&lt;/a&gt;Get Functions
&lt;/h2&gt;

&lt;p&gt;To Get specific data in a date you can check this sample bellow code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Get Current Date&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 16&lt;/span&gt;

&lt;span class="c1"&gt;// Get Day&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 1 - Monday&lt;/span&gt;

&lt;span class="c1"&gt;//Get Year&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 2021&lt;/span&gt;

&lt;span class="c1"&gt;//Get Hours&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 14&lt;/span&gt;

&lt;span class="c1"&gt;// Get Minutes&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 48&lt;/span&gt;

&lt;span class="c1"&gt;// Get Seconds&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 29&lt;/span&gt;

&lt;span class="c1"&gt;// Get Time - method returns the number of milliseconds&lt;/span&gt;
    &lt;span class="c1"&gt;// NOTE: _getTime() always uses UTC for time representation.&lt;/span&gt;
    &lt;span class="c1"&gt;// For example, a client browser in one timezone,&lt;/span&gt;
    &lt;span class="c1"&gt;// getTime() will be the same as a client browser in any other timezone._&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 14254782000&lt;/span&gt;

&lt;span class="c1"&gt;// Get TimeZone offset - method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time_zone_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//-480&lt;/span&gt;

&lt;span class="c1"&gt;// ___________________&lt;/span&gt;
&lt;span class="c1"&gt;// Getting UTC DATES&lt;/span&gt;
&lt;span class="c1"&gt;// ____________________&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get UTC date&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 19&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;

&lt;span class="c1"&gt;// get UTC day&lt;/span&gt;
    &lt;span class="c1"&gt;// Tuesday&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2&lt;/span&gt;
    &lt;span class="c1"&gt;// Wednesday&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 3&lt;/span&gt;

&lt;span class="c1"&gt;// get UTC Year&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1975&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1976&lt;/span&gt;

&lt;span class="c1"&gt;// get UTC Hours&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 12&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 10&lt;/span&gt;

&lt;span class="c1"&gt;// Get UTC Miliseconds&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exampleDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2018-01-02T03:04:05.678Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2 January 2018, 03:04:05.678 (UTC)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exampleDate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 678&lt;/span&gt;

&lt;span class="c1"&gt;// GET UTC Minutes&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 January 2000 03:15:30 GMT+07:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 January 2000 03:15:30 GMT+03:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 31 Dec 1999 20:15:30 GMT// expected output: 15&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 31 Dec 1999 23:45:30 GMT// expected output: 45&lt;/span&gt;

&lt;span class="c1"&gt;// GET UTC MONTHS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT-11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// December&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// expected output: 11&lt;/span&gt;
    &lt;span class="c1"&gt;// January&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="c1"&gt;// GET UTC SECONS&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moonLanding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;July 20, 1969, 20:18:04 UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moonLanding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 4&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#set-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="setfunctions"&gt;&lt;/a&gt; SET FUNCTIONS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SET DATE&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 24&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Only 31 days in August!&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="c1"&gt;// SET FULL YEAR&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1969&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1969&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="c1"&gt;// SET HOURS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 20:15:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 20:21:22 GMT+0200 (CEST)&lt;/span&gt;

&lt;span class="c1"&gt;// SET MILLISECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMilliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 456&lt;/span&gt;

&lt;span class="c1"&gt;// SET MINUTES&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 45&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 23:45:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// SET MONTH&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 3&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Sat Apr 19 1975 23:15:30 GMT+0100 (CET)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// SET SECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 42&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Sat Apr 19 1975 23:15:42 GMT+0100 (CET)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// SET TIME&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;July 1, 1999&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;event2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Thu Jul 01 1999 00:00:00 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Thu Jul 01 1999 00:00:00 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// _____________&lt;/span&gt;
&lt;span class="c1"&gt;// SET UTC DATES&lt;/span&gt;
&lt;span class="c1"&gt;// _____________&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC DATE&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 19&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC FULL YEAR&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Thu, 01 Jan 1976 02:15:30 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 01 Dec 1976 02:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC HOURS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 20 Aug 1975 02:15:30 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 20 Aug 1975 23:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC MILLISECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2018-01-24T12:38:29.069Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 69&lt;/span&gt;

    &lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;420&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 420&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC MINUTES&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 15&lt;/span&gt;

    &lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 25&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC MONTH&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Thu, 01 Jan 1976 02:15:30 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 01 Dec 1976 02:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC SECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 30&lt;/span&gt;

    &lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 39&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#date-convertions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="dateconvert"&gt;&lt;/a&gt; Date Convertions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Date.now - method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//1613449122179 &lt;/span&gt;

&lt;span class="c1"&gt;// USING PARSE FUNCTION&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unixTimeZero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01 Jan 1970 00:00:00 GMT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;javaScriptRelease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;04 Dec 1995 00:12:00 GMT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unixTimeZero&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;javaScriptRelease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 818035920000&lt;/span&gt;

&lt;span class="c1"&gt;// TO DATE STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1993&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed Jul 28 1993 14:39:07 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed Jul 28 1993&lt;/span&gt;

&lt;span class="c1"&gt;// TO ISO STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;05 October 2011 14:48 UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed Oct 05 2011 16:48:00 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2011-10-05T14:48:00.000Z&lt;/span&gt;

&lt;span class="c1"&gt;// TO JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1975-08-19T23:15:30.000Z&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue, 19 Aug 1975 23:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// TO LOCAL DATE SCTRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de-DE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Donnerstag, 20. Dezember 2012&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ar-EG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: الخميس، ٢٠ ديسمبر، ٢٠١٢&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Thursday, December 20, 2012 (varies according to default locale)&lt;/span&gt;


&lt;span class="c1"&gt;// TO LOCALE STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// British English uses day-month-year order and 24-hour time without AM/PM&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 20/12/2012, 03:00:00&lt;/span&gt;

    &lt;span class="c1"&gt;// Korean uses year-month-day order and 12-hour time with AM/PM&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ko-KR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2012. 12. 20. 오전 3:00:00&lt;/span&gt;

&lt;span class="c1"&gt;// TO LOCAL TIME STRING&lt;/span&gt;
    &lt;span class="c1"&gt;// Depending on timezone, your results will vary&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT+00:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1:15:30 AM&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;it-IT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 01:15:30&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ar-EG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: ١٢:١٥:٣٠ ص&lt;/span&gt;

&lt;span class="c1"&gt;// TO STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 23:15:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// TO TIME STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 23:15:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// TO UTC STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14 Jun 2017 00:00:00 PDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 14 Jun 2017 07:00:00 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// USING VALUE OF FUNCTION&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 823230245000&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;02 Feb 1996 03:04:05 GMT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 823230245000&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
