<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>23 Must-Know Linux Commands for Beginners(in 2021)</title>
      <author>RaftLabs - Product Development Agency</author>
      <pubDate>Tue, 16 Nov 2021 16:47:55 +0000</pubDate>
      <link>https://dev.to/raftlabs/23-must-know-linux-commands-for-beginnersin-2021-58ad</link>
      <guid>https://dev.to/raftlabs/23-must-know-linux-commands-for-beginnersin-2021-58ad</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V781dqVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxngpwk7oyo4vct6t60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V781dqVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxngpwk7oyo4vct6t60.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Linux is an entire family of open-source Unix operating systems that are based on the Linux Kernel. This includes all the most popular Linux-based systems like Ubuntu, Fedora, Mint, Debian, etc. More accurately, they're called distributions or distros. Linux seems a bit hard to use and understand for people coming from Windows or macOS, and most people give up on using Linux because they are unaware of the commands and shortcuts that Linux provides. Knowing the useful commands and their proper usage can significantly speed up your work on Linux than if you were using other operating systems.&lt;/p&gt;

&lt;p&gt;In this article, we will look at some frequently used Linux commands.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-ls%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. ls command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;ls&lt;/code&gt; is the list command in Linux. It will show the complete list or content of your directory. You can pair it with several options to get different results. Ls with no option list files and directories in a raw format where we won't be able to view details like file types, size, modified date and time, permission and links, etc. Some of the most common options are listed below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -l&lt;/code&gt;: shows file or directory, size, modified date and time, file or folder name and owner of the file, and its permission.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -a&lt;/code&gt;: List all files, including hidden files starting with '. '.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -lh&lt;/code&gt;: List files in human-readable format.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -r&lt;/code&gt;: List files in reverse order.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -R&lt;/code&gt;: Recursively list sub-directories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-cd%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. cd command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; stands for change directory. You can use the cd command to navigate through Linux files and directories. It requires either the full path or the directory's name, depending on the current working directory that you're in.&lt;/p&gt;

&lt;p&gt;If you want to go to a subdirectory of the directory you are in, type cd followed by the directory name.&lt;/p&gt;

&lt;p&gt;If you want to go to a directory outside the current directory, for example, from /home/user/downloads to /home/user/photos, you have to give the absolute path of the directory like 'cd /home/user/photos. There are also some shortcuts to navigate quickly:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd ..&lt;/code&gt; to move one directory up.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; to go straight to the home folder.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd-&lt;/code&gt; to move to your previous directory&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-pwd%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. PWD command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;PWD&lt;/code&gt; command is used to find the path of the current directory. It will return the absolute path, which contains all the directories from the root that starts with a forward slash. An example of an absolute path is &lt;code&gt;/home/user&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-rmdir%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. rmdir command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;rmdir&lt;/code&gt; command allows you to delete empty directories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-rm%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. rm command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; command allows you to delete directories with contents inside them. The options that can be used with rm are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -i&lt;/code&gt;: will ask before deleting each file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -r&lt;/code&gt;: will recursively delete a directory and all of its contents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -f&lt;/code&gt;: will forcibly delete files without asking.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-touch%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. touch command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; command allows you to create a new blank file with the given file name.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch hello.js&lt;/code&gt; will create a file called hello with the extension .js in your current directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch home/user/documents/hello.html&lt;/code&gt; will create the given HTML file in the Documents folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-cp%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. cp command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; command lets you copy files from your current directory to your desired directory.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cp hello.js&lt;/code&gt; /home/user/documents will copy the hello.js from the current directory to the documents folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-mv%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. mv command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; command is used to move files the same way the &lt;code&gt;cp&lt;/code&gt; command is used to copy files. But it can also be used to rename files.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;To move files: &lt;code&gt;mv hello.js /home/user/documents&lt;/code&gt; will move the hello.js from the current directory to the documents folder.&lt;/p&gt;

&lt;p&gt;To rename files, type: &lt;code&gt;mv oldname.ext newname.ext&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-cat%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. cat command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; is one of the most frequently used commands in Linux. Cat is short for concatenate. Cat is used to concatenate and print the contents of files. Cat command allows us to create single or multiple files, view contents of a file, concatenate files, and redirect output in terminal or files.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;Display contents of a file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat /etc/passwd&lt;/code&gt;: will show the contents of passwd.&lt;/p&gt;

&lt;p&gt;View contents of multiple files in terminal&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat test test1&lt;/code&gt;: will show the contents of the test and test1 in the terminal.&lt;/p&gt;

&lt;p&gt;Create a file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat &amp;gt;test2&lt;/code&gt;: will create a file test2. It then awaits input from the user. Write in the desired text and press CTRL+D to exit.&lt;/p&gt;

&lt;p&gt;cat with a redirection operator&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat test &amp;gt; test1&lt;/code&gt;: We can redirect the standard output into a new file else existing file with '&amp;gt; '. Existing contents of the test1 will be overwritten by the contents of the test file.&lt;/p&gt;

&lt;p&gt;Appending standard output with a redirection operator&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat test &amp;gt;&amp;gt; test1&lt;/code&gt;: Appends an existing file with '&amp;gt;&amp;gt; '. Here, the contents of the test file will be appended at the end of test1 file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-locate%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. locate command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;locate&lt;/code&gt; command in Linux is used to find the files by name. An alternative to locating is find. But, the difference between both commands is that locate command is a background process and searches the file in the database whereas find command searches in the file system. The locate command is much faster than the find command.&lt;/p&gt;

&lt;p&gt;If you cannot find a file with locate command, then it means that your database is out of date, and you can update it with the "updatedb" command.&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;locate [OPTION]... PATTERN...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate sample.txt&lt;/code&gt;: will search for sample.txt.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate "*.html" -n 20&lt;/code&gt;: will show 20 results for the searching of file ending with .html.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate -c [.txt]*&lt;/code&gt;: will count files ending with .txt and display the result.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate -i *SAMPLE.txt*&lt;/code&gt;: Ignore Case Sensitive Locate Outputs. This command is configured to process queries in a case-sensitive manner. It means SAMPLE.TXT will show a different result than sample.txt.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#11-find%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. find command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Similar to the locate command, using find also searches for files and directories. The difference is, you use the find command to locate files within a given directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  To find files in the current directory use, &lt;code&gt;find . -name notes.txt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  To look for directories use, &lt;code&gt;/ -type d -name notes.txt&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#12-grep%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;12. grep command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; filter searches a file for a particular pattern of characters and displays all lines that contain that pattern.&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;grep [options] pattern [files]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -i "Unix" file.txt&lt;/code&gt;: Performs a case-insensitive search in the given file and returns the lines that contain the word Unix.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -c "Unix" file.txt&lt;/code&gt;: Display the number of lines that match the word Unix.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -w "Unix" file.txt&lt;/code&gt;: By default, grep matches the given string/pattern even if it is found as a substring in a file. The -w option to grep makes it match only the whole words.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -n "Unix" file.txt&lt;/code&gt;: show the line number of the file with the line matched.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep "^unix" file.txt&lt;/code&gt;: Matches the lines that start with the given string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep "os$" file.txt&lt;/code&gt;: Matches the lines that end with the given string.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#13-sudo%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;13. sudo command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; stands for "superuser do!". If you prefix "sudo" with any Linux command, it will run that command with elevated privileges. Elevated privileges are required to perform specific administrative tasks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#14-df%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;14. df command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;df&lt;/code&gt; command is used to get a report on the system's disk space usage. It is shown in percentage and in KBs. To get the report in MBs, type df -m.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#15-du%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;15. du command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;du&lt;/code&gt; command is used to find the disk usage of a file or a directory. The disk usage summary is shown in disk block numbers instead of KBs.&lt;/p&gt;

&lt;p&gt;To see it in bytes, KBs, and MBs, add the -h argument to the command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#16-echo%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;16. echo command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; is a command that outputs the strings it is being passed as arguments. It is a command available in various operating system shells and typically used in shell scripts and batch files to output status text to the screen or a computer file, or as a source part of a pipeline.&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;echo [option] [string]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some options of echo command are mentioned below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Input a line of text and display on standard output:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;echo Hello User&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  echo value of a variable:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;x=5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo The value of x is $x&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Using option' \b ' --- backspace with backslash interpreter '-e 'removes all the spaces between.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;echo -e "This \bis \ba \btest \bmessage"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;code&gt;Thisisatestmessage&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Option' \t ' --- horizontal tab with backspace interpreter '-e 'has horizontal tab spaces. You can use \n or a combination of \n and \t in the same way where \n inserts a new line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;echo -e "This \tis \ta \ttest \tmessage"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;code&gt;This is a test message&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#17-zip%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;17. zip command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;zip&lt;/code&gt; is used to compress files to reduce file size and is also used as a file package utility. The zip program puts one or more compressed files into a single zip archive, along with information about the files (name, path, date, time of last modification, protection, and check information to verify file integrity).&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;zip [options] zipfile files list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;Creating a zip file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip myfile.zip filename.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; option removes the file from the zip archive.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --d filename.zip file.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-u&lt;/code&gt; option is used to update the specified list of files or add new files to the existing zip file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --u filename.zip file.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; option is used to recursively zip the files in a directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --r filename.zip directory_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt; option is used to exclude the specified files while creating the zip.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --x filename.zip file_to_be_excluded&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#18-help%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;18. help command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;command-name&amp;gt; --- help&lt;/code&gt; lists all the available commands in the terminal. You can use '-h' or '--help' (help has two hyphens here) option with any command to get help for that specific command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#19-whatis%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;19. whatis command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;whatis &amp;lt;command-name&amp;gt;&lt;/code&gt; shows a single-line description for the given command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#20-man%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;20. man command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;man &amp;lt;command-name&amp;gt;&lt;/code&gt; shows the manual page for the given command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#21-tar%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;21. tar command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;tar&lt;/code&gt; stands for tape archive, which is used by many Linux/Unix system administrators to deal with tape drives backup. The tar is the most widely used command to create compressed archive files that can be moved easily from one disk to another or machine to machine.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar [options] [archive-file] [file or directory to be archived]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; : Creates Archive&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt; : Extract the archive&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; : creates archive with given filename&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; : displays or lists files in archived file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-u&lt;/code&gt; : archives and adds to an existing archive file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; : Displays Verbose Information&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-A&lt;/code&gt; : Concatenates the archive files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-z&lt;/code&gt; : zip, tells tar command that creates tar file using gzip&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-j&lt;/code&gt; : filter archive tar file using tbzip&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-W&lt;/code&gt; : Verify an archive file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; : update or add file or directory in already existed .tar file&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;Creating an uncompressed tar Archive using option -cvf:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar cvf file.tar *.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a tar file called file.tar, the Archive of all .c files in the current directory.&lt;/p&gt;

&lt;p&gt;Extracting files from Archive using option -xvf :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar xvf file.tar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;gzip compression on the tar Archive, using option -z:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar cvzf file.tar.gz *.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command creates a tar file called file.tar.gz, the Archive of .c files.&lt;/p&gt;

&lt;p&gt;Extracting a gzip tar Archive *.tar.gz using option -xvzf:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar xvzf file.tar.gz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Creating compressed tar archive file in Linux using option -j:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar cvfj file.tar.tbz example.CPP&lt;/code&gt; --- This command compresses and creates archive files less than the gzip size, but it takes more time to compress and decompress.&lt;/p&gt;

&lt;p&gt;Applying pipe to 'grep command' to find what we are looking for:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar tvf file.tar | grep "text to find"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar tvf file.tar | grep "filename.file extension"&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-gzip%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;22. gzip command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;gzip &amp;lt;filename&amp;gt;&lt;/code&gt; creates and extracts gzip archives. You can use its &lt;code&gt;gzip -d &amp;lt;filename&amp;gt;&lt;/code&gt; to extract gzip archives.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#23-unzip%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;23. unzip command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;unzip &amp;lt;archive-to-extract.zip&amp;gt;&lt;/code&gt; unzips a given zip archive. You can use &lt;code&gt;unzip -l &amp;lt;archive-to-extract.zip&amp;gt;&lt;/code&gt; to view the zip file's contents without extracting it. It's the same as you using an archive program to extract zip archives in GUI.\&lt;br&gt;
‍&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally posted at&lt;/em&gt; &lt;a href="https://raftlabs.co/development/23-must-know-linux-commands-for-beginners?utm_source=devto&amp;amp;utm_campaign=crosspost"&gt;&lt;em&gt;raftlabs.co&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I Created a Custom Carousel In React using useRef and useState in Typescript</title>
      <author>Anoop Francis V H</author>
      <pubDate>Tue, 16 Nov 2021 16:39:08 +0000</pubDate>
      <link>https://dev.to/anoopfranc/how-i-created-a-custom-carousel-in-react-using-useref-and-usestate-in-typescript-1p7l</link>
      <guid>https://dev.to/anoopfranc/how-i-created-a-custom-carousel-in-react-using-useref-and-usestate-in-typescript-1p7l</guid>
      <description>&lt;p&gt;Hello world...&lt;br&gt;
This is my first post hoping I can write more. quick intro about me, I have been a developer for 2 years and one year as a Front-End developer, working on react.&lt;br&gt;
I try to create fun react component from scratch rather than relying on a package or some library like material UI or Ant Design. By this post I aim to explain How I created a custom carousel using react hooks some css and typescript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How It Works&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Before we start I want to show you how it looks in code and how it looks in action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Carousel&lt;/span&gt;
            &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"demo"&lt;/span&gt;
            &lt;span class="na"&gt;n&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"12px"&lt;/span&gt;
            &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FlexBoxTitleCard&lt;/span&gt;
                        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`item &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`item &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Carousel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is How It is in action:&lt;br&gt;
&lt;a href="https://imgur.com/Va3xBe8"&gt;Carousel Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CODE&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;this is the code for my carousel component we will break it down step by step:&lt;br&gt;
this is how the carousel.tsx looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;CarouselProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Carousel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;CarouselProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setActive&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carouselRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollToNextElement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                &lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;setActive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollToPreviousElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;setActive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button cursor_pointer"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;scrollToPreviousElement&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button cursor_pointer"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;scrollToNextElement&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"carousel-slides"&lt;/span&gt;
            &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;gridAutoColumns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;`calc((100% - (&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - 1)*&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;gridGap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;carousel.css&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.carousel-slides&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-auto-columns: calc((100% - (var(--n) - 1) * var(--g)) / var(--n));
    grid-gap: var(--g); */&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;scroll-behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;smooth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.carousel-slides&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Carousel will have 4 props:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;CarouselProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's break it down,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;heading&lt;/em&gt;:(required) - Heading For the Carousel&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;children&lt;/em&gt;:(required) - Elements inside a carousel, It doesn't matter if it's &lt;code&gt;JSX.Element&lt;/code&gt; or &lt;code&gt;JSX.Element[]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;n&lt;/em&gt;_:(optional) - number of elements to be shown , default 3&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;g&lt;/em&gt;:(optional) - gap between each carousel element , default 32px
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setActive&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carouselRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have a state &lt;code&gt;active&lt;/code&gt; which denotes the left most element in the JSX.Element array&lt;br&gt;
And I have a reference to the carousel element wrapper &lt;code&gt;carouselRef&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollToNextElement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                &lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carouselRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;setActive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;scrollToNextElement&lt;/code&gt; function lets you scroll to next element in the carousel. Using &lt;code&gt;carouselRef&lt;/code&gt; I am able to access the child nodes and I just change scroll left of the wrapper element to the next elements offset left, it's important substract the parent offsetleft to avoid scrolling the extra padding outside the parent element&lt;br&gt;
the wrapper element itself is a grid component, the inline styling of the element is done so that it can take in prop n to get how many elements to show inside the carousel&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;gridAutoColumns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props.n?props.&lt;/span&gt;&lt;span class="py"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)*&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props.g?props.&lt;/span&gt;&lt;span class="py"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;"32px"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props.n?props.&lt;/span&gt;&lt;span class="py"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this line of could sets the grid in one single row with as many as n number of items available to see, since the overflow is hidden we cannot see the rest of the elements.&lt;br&gt;
&lt;code&gt;scrollToPreviousElement&lt;/code&gt; uses the same logic&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Can I do Next&lt;/strong&gt;:&lt;br&gt;
add another prop &lt;br&gt;
&lt;em&gt;step&lt;/em&gt;:(optional) -  prop which accepts number and will be the numbers of elements it will skip when we click next or previous&lt;/p&gt;

&lt;p&gt;Scrape both &lt;code&gt;scrollToNextElement&lt;/code&gt; and &lt;code&gt;scrollToPreviousElement&lt;/code&gt; and change to &lt;code&gt;scrollToElement&lt;/code&gt; which accepts a number and skips to that element&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Visual Studio Extensions you Definitely need as a .NET Developer</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 16 Nov 2021 16:34:33 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/5-visual-studio-extensions-you-definitely-need-as-a-net-developer-3hdh</link>
      <guid>https://dev.to/dotnetsafer/5-visual-studio-extensions-you-definitely-need-as-a-net-developer-3hdh</guid>
      <description>&lt;p&gt;If you use Visual Studio every day (like me), these extensions &lt;strong&gt;would help you develop faster&lt;/strong&gt; and make your workflow better than it is now. I've used them for a long time and &lt;strong&gt;highly recommend them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although Visual Studio is very complete, &lt;strong&gt;it doesn't cover all needs.&lt;/strong&gt; I particularly like working with .NET and there will always be small parts that we will need to cover with other tools. I researched and tested &lt;strong&gt;the most recent and amazing extensions,&lt;/strong&gt; and these are the greatest ones for 2022 👇&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ndepend"&gt;
  &lt;/a&gt;
  NDepend
&lt;/h2&gt;

&lt;p&gt;NDepend is my favorite &lt;strong&gt;.NET code analyzer.&lt;/strong&gt; It generates browsable reports with objective metrics about the quality of the analyzed code. &lt;strong&gt;Each metric is documented, monitorable and editable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tool also evaluates the &lt;strong&gt;technical debt&lt;/strong&gt; of the project in development-days and hours: you can create an history of metrics and evaluate your progress, whether or not the added code has generated more technical debt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V628dVbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AGfP0E56rw6NSA_CpI2KNCw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V628dVbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AGfP0E56rw6NSA_CpI2KNCw.gif" alt="ndepend visual studio extension" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main functions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Alert you about code that is essential to fix&lt;/strong&gt; before sending the application to production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Detect the most complex parts of the application&lt;/strong&gt; so that you pay more attention to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Help you to &lt;strong&gt;manage legacy code.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generate an objective estimation of the technical debt of the project&lt;/strong&gt; and monitors it over time as you add more code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generates visual graphs&lt;/strong&gt; of project dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt; integration, &lt;strong&gt;Azure DevOps&lt;/strong&gt; integration and &lt;strong&gt;Reporting&lt;/strong&gt; within &lt;strong&gt;CI/CD&lt;/strong&gt; integration.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk9e2ahH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AhGE2wJeQ7wONNXN8hV6TEA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk9e2ahH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AhGE2wJeQ7wONNXN8hV6TEA.gif" alt="download ndepend for visual studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-ndepend-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ndepend.com/download"&gt;📦Get NDepend for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#visual-assist"&gt;
  &lt;/a&gt;
  Visual Assist
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Visual Assist&lt;/strong&gt; is an extension developed by Whole Tomato Software. The extension primarily enhances &lt;strong&gt;IntelliSense&lt;/strong&gt; and &lt;strong&gt;syntax highlighting.&lt;/strong&gt; It also enhances code suggestions, provides refactoring commands, and includes spell checking support for comments. It can also &lt;strong&gt;detect basic syntax mistakes&lt;/strong&gt; such as use of undeclared variables.&lt;/p&gt;

&lt;p&gt;This extension also has built-in &lt;strong&gt;support for Unreal Engine&lt;/strong&gt; with new features that run faster, allowing you to save a lot of time when developing games.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--liPzG-UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AuZqqpTx__MP-ezzzZ3L8gg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--liPzG-UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2AuZqqpTx__MP-ezzzZ3L8gg.gif" alt="download visual assist extension for visual studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Refactoring&lt;/strong&gt; and improve code readability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generate code quickly&lt;/strong&gt; with commands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Debug assistance&lt;/strong&gt; in Visual Assist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code &lt;strong&gt;mistakes correction.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#get-visual-assist-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=WholeTomatoSoftware.VisualAssist"&gt;📦Get Visual Assist for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#codemaid"&gt;
  &lt;/a&gt;
  CodeMaid
&lt;/h2&gt;

&lt;p&gt;I love the simplicity of this extension. CodeMaid is just a Visual Studio extension which has been installed over two million times. &lt;strong&gt;It allows you to clean up and simplify the code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;reorganizes the code&lt;/strong&gt; of a class based on the StyleCop specifications. If we then run the StyleCop analysis, we will see that &lt;strong&gt;it takes a lot of work off the top.&lt;/strong&gt; The main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code &lt;strong&gt;cleaning.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code &lt;strong&gt;reorganizing.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visualizing&lt;/strong&gt; and &lt;strong&gt;navigating&lt;/strong&gt; through your code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comment&lt;/strong&gt; formatting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ4c-4l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AROWP20NtzagSMrCcSySB8Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ4c-4l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/900/1%2AROWP20NtzagSMrCcSySB8Q.gif" alt="Download CodeMaid extension for visual studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also has the ability to &lt;strong&gt;switch between related files&lt;/strong&gt;, the most usual thing we usually do when editing WPF between &lt;em&gt;XAML&lt;/em&gt; and &lt;em&gt;XAML.cs.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-codemaid-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaid"&gt;📦Get CodeMaid for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#vs-color%C2%A0output"&gt;
  &lt;/a&gt;
  VS Color Output
&lt;/h3&gt;

&lt;p&gt;Best for customization. VSColorOutput &lt;strong&gt;can change the color of a line emitted to the output window based on specified rules.&lt;/strong&gt; The rules consist of regular expressions. Rules map to classifications which in turn map to colors.&lt;/p&gt;

&lt;p&gt;It hooks into the classifier chain of Visual Studio. This allows VSColorOutput to &lt;strong&gt;monitor every line sent to the output window&lt;/strong&gt;. A list of classifiers, consisting of regular expressions and classifications is checked. The first matching expression determines the classification. If no patterns match, then the line is classified as &lt;strong&gt;BuildText.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TPgS9ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2A7B9WZOESPumJzLeZXLUW1Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TPgS9ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1200/1%2A7B9WZOESPumJzLeZXLUW1Q.gif" alt="Download VS Color Output extension for Visual Studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stop Build&lt;/strong&gt; On First Error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show &lt;strong&gt;Elapsed Build Time.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show &lt;strong&gt;Debug Window&lt;/strong&gt; when Debug Starts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Per Solution&lt;/strong&gt; Settings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here, Visual Studio does the heavy lifting of mapping the classification to a color. Settings are stored in a separate file: &lt;code&gt;%AppData%/VSColorOutput/vscoloroutput.json&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-vs-color-output-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=MikeWard-AnnArbor.VSColorOutput"&gt;📦Get VS Color Output for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#resharper"&gt;
  &lt;/a&gt;
  Resharper
&lt;/h2&gt;

&lt;p&gt;ReSharper is a &lt;strong&gt;popular extension for Visual Studio. It automates the majority of the things&lt;/strong&gt;, you can automate in your code procedures. It detects and corrects compiler errors, runtime problems, and redundancies as you type, and makes intelligent modifications for them.&lt;/p&gt;

&lt;p&gt;It &lt;strong&gt;supports with code exploration&lt;/strong&gt; by showing file structure, type and style hierarchies, call and value chains, and project dependencies. It &lt;strong&gt;enables you to quickly browse your whole solution&lt;/strong&gt; and navigate to the precise file and line you're searching for, decompiling library code as needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AAi2TCIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xmuoetdhi1p368t3kfb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AAi2TCIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xmuoetdhi1p368t3kfb.gif" alt="Download Resharper extension for Visual Studio" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may &lt;strong&gt;examine software with ReSharper by visualizing file composition&lt;/strong&gt;, category and design hierarchies, call and value chains, and project dependencies. It allows you to quickly cross your whole solution and go to the exact folder and line you're looking for. If necessary, &lt;strong&gt;it also decompiles library code.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-resharper-for-visual%C2%A0studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=JetBrains.ReSharper"&gt;📦Get Resharper for Visual Studio&lt;/a&gt;
&lt;/h3&gt;




&lt;p&gt;In conclusion, &lt;strong&gt;Visual Studio is a perfect standard code editor&lt;/strong&gt;, but if you spend some time customizing it through its extensions, you will be able to get the most out of the editor and, most importantly, you will be able to squeeze and &lt;strong&gt;optimize your software development time to the maximum.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>visualstudio</category>
      <category>vscode</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>1 line of code: How to clean an Array
</title>
      <author>martin krause</author>
      <pubDate>Tue, 16 Nov 2021 16:29:26 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-clean-an-array-82a</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-clean-an-array-82a</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns an array without &lt;code&gt;empty strings&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; items.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Netlify vs Cloudflare pages vs AWS Amplify</title>
      <author>chen4119</author>
      <pubDate>Tue, 16 Nov 2021 16:28:00 +0000</pubDate>
      <link>https://dev.to/chen4119/netlify-vs-cloudflare-pages-vs-aws-amplify-1n5k</link>
      <guid>https://dev.to/chen4119/netlify-vs-cloudflare-pages-vs-aws-amplify-1n5k</guid>
      <description>&lt;p&gt;I've been using &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; for a few years now to host my static website and really love how easy it was to get going.  Before Netlify, I hosted my static site on AWS S3 and that experience was painful.  You need to configure S3 for public and CORS access, add cloudfront, then set up a custom domain.  It's a lot of work just to deploy a static website so I'm very happy when I found Netlify.  I know &lt;a href="https://pages.cloudflare.com/"&gt;Cloudflare pages&lt;/a&gt; and &lt;a href="https://aws.amazon.com/amplify/"&gt;AWS Amplify&lt;/a&gt; also provide an easy way to host static websites and I finally had the chance to try them out.  Here are some thoughts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ease-of-use"&gt;
  &lt;/a&gt;
  Ease of use
&lt;/h2&gt;

&lt;p&gt;Both Netlify and Cloudflare made it really easy to get started and deploy a static website directly from your Github repo.  I'll say overall Netlify has a better user experience compare to Cloudflare because it's site is more intuitive and visually appealing whereas Cloudflare pages feel more barebone.  One major downside for Cloudflare is that there is no federated login.  You need to use an email and password to create a Cloudflare account whereas for Netlify, you can just use your Github credential.  In this day and age where we all have hundreds of online accounts, I'll prefer not to have another password for Cloudflare.&lt;/p&gt;

&lt;p&gt;AWS Amplify also kept it really easy to deploy a static website but it's hard to say AWS Amplify is just as easy as Netlify and Cloudflare pages simply because AWS Amplify is a small feature within the AWS beast.  For those who are already familiar with AWS, Amplify will feel pretty simple but new users will be overwhelmed by so much options.  In terms of user experience, it definitely still lags Netlify and Cloudflare.  Instead of filling out a simple form, Amplify makes you edit the config blob below.  Not a big deal but it definitely feel more like a roadblock than a welcome sign.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1w-7BiYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe5f78xx9bayfxy2zzi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1w-7BiYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe5f78xx9bayfxy2zzi7.png" alt="AWS Amplify console screenshot" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-domain"&gt;
  &lt;/a&gt;
  Custom domain
&lt;/h2&gt;

&lt;p&gt;Both Netlify and AWS Amplify allow you to easily set up custom domains with free ssl certificate.  It works with any third party DNS provider, you just need to set up an ALIAS record for it to work.&lt;/p&gt;

&lt;p&gt;Cloudflare pages on the other hand will force you to use their DNS service in order to set up custom domain.  It won't work with third party DNS providers.  This might be a deal breaker for some people but at least Clouflare offers a free plan for their DNS service and it's really fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-time"&gt;
  &lt;/a&gt;
  Build time
&lt;/h2&gt;

&lt;p&gt;I generated my website with &lt;a href="https://sambal.dev"&gt;Sambal&lt;/a&gt; static site generator.  Below is a timing of how fast each platform took from the moment I commit to github to a deployed website.  AWS Amplify was the fastest while Cloudflare took the longest.  For some reason Cloudflare took close to 2 minutes just to initialize the build environment.  By that time, AWS Amplify had already deployed my website.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Build time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AWS Amplify&lt;/td&gt;
&lt;td&gt;1m 58s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netlify&lt;/td&gt;
&lt;td&gt;2m 33s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cloudflare pages&lt;/td&gt;
&lt;td&gt;2m 53s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#ttfb-test"&gt;
  &lt;/a&gt;
  TTFB test
&lt;/h2&gt;

&lt;p&gt;To test how my static website perform across all regions around the world, I deployed the same website to all 3 platforms then use &lt;a href="https://speedvitals.com/ttfb-test"&gt;SpeedVitals TTFB test&lt;/a&gt; to test the time to first byte across 25 different locations without using custom domain.  I hit each platform with their native URL.  Here is the average latency for the 3 platforms across different regions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Americas&lt;/th&gt;
&lt;th&gt;Europe&lt;/th&gt;
&lt;th&gt;Asia&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cloudflare pages&lt;/td&gt;
&lt;td&gt;146ms&lt;/td&gt;
&lt;td&gt;107ms&lt;/td&gt;
&lt;td&gt;148ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Amplify&lt;/td&gt;
&lt;td&gt;142ms&lt;/td&gt;
&lt;td&gt;155ms&lt;/td&gt;
&lt;td&gt;294ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netlify&lt;/td&gt;
&lt;td&gt;186ms&lt;/td&gt;
&lt;td&gt;67ms&lt;/td&gt;
&lt;td&gt;271ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Overall Cloudflare seem to have consistently good latency across different regions.  I ran the test multiple times for each platform.  The first test is always the worst because the CDN hasn't cached anything yet.  Subsequent tests always show better latency.  The average latencies reported above are measured after 3 - 4 tries to get a more accurate picture.  I noticed with Cloudflare, it took just 2 tries to get consistently good results and it felt like once your page is cached, the traffic is always fast.  AWS Amplify is somewhere in the middle, while Netlify results can vary quite a lot on different tries.  Sometimes it's fast and sometimes it felt like there's a cache miss somewhere so it went back to your origin server.&lt;/p&gt;

&lt;p&gt;To get a better picture, let's also look at the worst latency measured for the 3 platforms across different regions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Americas&lt;/th&gt;
&lt;th&gt;Europe&lt;/th&gt;
&lt;th&gt;Asia&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cloudflare pages&lt;/td&gt;
&lt;td&gt;232ms&lt;/td&gt;
&lt;td&gt;181ms&lt;/td&gt;
&lt;td&gt;363ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Amplify&lt;/td&gt;
&lt;td&gt;187ms&lt;/td&gt;
&lt;td&gt;184ms&lt;/td&gt;
&lt;td&gt;407ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netlify&lt;/td&gt;
&lt;td&gt;744ms&lt;/td&gt;
&lt;td&gt;140ms&lt;/td&gt;
&lt;td&gt;1100ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;From this table, it's more obvious that Netlify latency can be pretty bad at some locations although it seems to be consistently great in Europe.  Every platform has the worst latency in Asia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Netlify is a great platform for users who don't want to deal too much with technical stuff.  They just want to get their static website up and running.  It's easy to use and it offers pretty much anything you'll need to run a professional website.  Serverless backend, A/B testing, user authentication, forms, etc.  All these features with minimal coding.&lt;/p&gt;

&lt;p&gt;Cloudflare is a great platform for developers who don't mind jumping through a few hoops to get the best performance.  Cloudflare DNS is one of the best DNS provider available and Cloudflare pages has consistently low latency across the globe.  The UX feels barebone and site navigation can be confusing but for the speed you get, I'm sure you can suck it up.&lt;/p&gt;

&lt;p&gt;AWS Amplify is a great choice for existing AWS users or people who don't mind getting their hands dirty with AWS.  It has a fast build time and good latency across the globe.  It integrates with every other AWS offering so you don't have to worry about the limits of the platform as you might with Netlify or Cloudflare.  It has a steeper learning curve but the end result of being familiar with AWS is worth it.&lt;/p&gt;

</description>
      <category>netlify</category>
      <category>cloudflare</category>
      <category>webdev</category>
      <category>aws</category>
    </item>
    <item>
      <title>Django Basics: What is Django? </title>
      <author>Meet Gor</author>
      <pubDate>Tue, 16 Nov 2021 16:24:39 +0000</pubDate>
      <link>https://dev.to/mr_destructive/django-basics-what-is-django-3n65</link>
      <guid>https://dev.to/mr_destructive/django-basics-what-is-django-3n65</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to Django Basics series, in this series we'll explore the basics of the Django web framework. In this part, we'll understand what this web framework provides and what actually the back-end development consists of. We'll discuss where Django is used and why it is a great choice for beginners as well as experienced developers.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-django"&gt;
  &lt;/a&gt;
  What is Django?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction"&gt;Django&lt;/a&gt; is a back-end web framework. It is based on python which means you have to write most of the project's code in Python. But Django comes with a lot of boilerplate code and thus it becomes quite quick in the development.  &lt;/p&gt;

&lt;p&gt;Django is an open-source framework, it is maintained by the Django Software Foundation Organization. You can view the source code at &lt;a href="https://github.com/django/django"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-"&gt;
  &lt;/a&gt;
  BACKEND ?
&lt;/h3&gt;

&lt;p&gt;The term &lt;code&gt;backend&lt;/code&gt; refers to the section or an essential component in Web development, it consists of a &lt;code&gt;database&lt;/code&gt;, &lt;code&gt;API&lt;/code&gt;, and the &lt;code&gt;web server&lt;/code&gt; itself which allows the components to connect together. There might be other components like &lt;code&gt;load-balancers&lt;/code&gt;, &lt;code&gt;middleware&lt;/code&gt;, etc. But the core of web applications revolves around &lt;strong&gt;Databases&lt;/strong&gt; and &lt;strong&gt;API&lt;/strong&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h4&gt;

&lt;p&gt;A database is a technology or tool that lets you store the data which might be used for serving the actual application, that might be a frontend app, standalone API, etc. The data you want to store might be generally the User Accounts, Content of the App, basically any some form of data(there are exceptions here, you can't directly store media files in DB). The Database allows to make content management and the application dynamic and can be personalized. We have certain types of databases like SQL(relational), NO-SQL, Cloud, Network, etc. The tools of these database management are PostgreSQL, MySQL, MongoDB, HarperDB,etc. These tools allow you to manage your database in a convenient way.   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h4&gt;

&lt;p&gt;An API or Application Programming Interface is a way for any frontend app, outside the system to access the database. API allows you to query to the database with GET, POST, DELETE, PUT, etc kinds of operation/requests to the database via the webserver. In API, we have endpoints or (URL routes) at which a particular designated operation can be performed. In APIs, we currently have four primary architectures namely RESTful (quite famous and well established), SOAP, gRPC, and GRAPHQL (new and increasing in popularity).  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#framework"&gt;
  &lt;/a&gt;
  Framework?
&lt;/h3&gt;

&lt;p&gt;A framework is a tool to do a certain task efficiently and avoid some repetitive patterns by abstracting many layers in developing it. Django is a high-level framework which means it abstracts certain processes in making the application. It is ideal for beginners to get up and running with a professional full-stack web application(though it requires some learning). &lt;/p&gt;

&lt;p&gt;Django makes the project ideal for experienced as well as beginner web developers. The community and the ecosystem of Python are quite amazing as well as there are a ton of resources to get you through your projects.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqP3naP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/dj-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqP3naP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/dj-1.png" alt="Django overview" width="880" height="625"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The above is a high-level view of how Django project development works, the application might be not only one but several other standalone applications working together to make one project in Django. There is a lot of abstraction in Django like the Middleware, Session Management, Security, etc. This should be a good overview of the development map in Django. &lt;/p&gt;

&lt;p&gt;Django follows an MVT architecture. Architecture is a standard in developing an application/project for the ease of the workflow and making it an even experience.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3I2PyBp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3I2PyBp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png" alt="Django MVT" width="880" height="624"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The above diagram depicts the architecture in Django, the components in the Django server include the Model, View, and Template. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#model"&gt;
  &lt;/a&gt;
  Model
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; refers to the design of the database or a blueprint of the data that is bound with the application in the project.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;View&lt;/code&gt; is the part to control the way the data should be presented or the how response should be given back to a request from the server(client) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#template"&gt;
  &lt;/a&gt;
  Template
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Template&lt;/code&gt; is the markup or the form of document that is to be rendered on the client-side and these are controlled by the views and parsed with the data from the models. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-you-need-it"&gt;
  &lt;/a&gt;
  Why would you need it?
&lt;/h2&gt;

&lt;p&gt;As a developer you would find a need to host your projects on the internet, for that learning and deploying a web server from the ground up might be quite complex and time-consuming, Django solves this problem quite well. Not only it is easy but even scalable at a production level, making it quite a robust choice for anyone. And as a bonus thing, it is based on Python, which makes it even easier to write code for people staying at an abstracted perspective in programming. Python has by far the richest sets of libraries and utilities for any domain, this integration with Django is a deadly combination.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#batteries-included"&gt;
  &lt;/a&gt;
  Batteries included?
&lt;/h3&gt;

&lt;p&gt;Django solves many problems by abstracting away many things like managing the database, rendering dynamic templates(HTML), properly structuring and serving static and media files, well-organized project structure, and many other things. You just have to get the actual thing done i.e. the server logic(or how to design the API/Database models). On top of that, Django has a built-in fully fledged Admin section and a User model. An Admin section is where you can manage the project in a better way without touching the code. It also has certain applications/libraries to make the development of APIs, integrating various databases, forms for posting data, support for Bootstrap a lot easier. It's like a &lt;code&gt;plug and play&lt;/code&gt; kind of thing for the development of web applications.  &lt;/p&gt;

&lt;p&gt;Hence, it is rightly called the &lt;code&gt;Batteries Included&lt;/code&gt; web framework. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-features-of-django"&gt;
  &lt;/a&gt;
  Key features of Django
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease in integrating a database &lt;/li&gt;
&lt;li&gt;Flawless Django Template Engine &lt;/li&gt;
&lt;li&gt;Easy to scale up/down &lt;/li&gt;
&lt;li&gt;Python libraries support out of the box &lt;/li&gt;
&lt;li&gt;Amazing Documentation / Helpful community &lt;/li&gt;
&lt;li&gt;Developing Production-ready projects quickly &lt;/li&gt;
&lt;li&gt;Baked in support for testing, APIs, cookies, sessions, etc &lt;/li&gt;
&lt;li&gt;Optimized for security, SEO, and DRY(don't repeat yourself) principles &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#applications-built-with-django"&gt;
  &lt;/a&gt;
  Applications built with Django
&lt;/h2&gt;

&lt;p&gt;Django is used in quite a famous application that you might be using daily.  &lt;/p&gt;

&lt;p&gt;Django along with Python powers the top applications on the internet like: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;YouTube &lt;/li&gt;
&lt;li&gt;Instagram &lt;/li&gt;
&lt;li&gt;Spotify &lt;/li&gt;
&lt;li&gt;Disqus &lt;/li&gt;
&lt;li&gt;Dropbox &lt;/li&gt;
&lt;li&gt;Pinterest &lt;/li&gt;
&lt;li&gt;National Geographic &lt;/li&gt;
&lt;li&gt;Mozilla &lt;/li&gt;
&lt;li&gt;BitBucket &lt;/li&gt;
&lt;li&gt;Discovery Network &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You have to say, it is powerful and has firm grounds in the tech industry. It's highly unlikely that Django will be overtaken by another framework at least some years from now.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Django is a tool to build web applications fast and in a scalable and Pythonic way &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-will-this-series-cover"&gt;
  &lt;/a&gt;
  What will this series cover?
&lt;/h2&gt;

&lt;p&gt;Learning Django from the ground up. We will learn the setup, folder structure, architecture of Django, What are apps, views, URLs, models, serializers, static and template files, and there is a ton of stuff to be covered.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-django"&gt;
  &lt;/a&gt;
  Resources to learn Django
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.djangoproject.com/start/"&gt;Django Official Docs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/veryacademy/playlists?view=50&amp;amp;sort=dd&amp;amp;shelf_id=2"&gt;Very Academy - Django Playlist&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=HHx3tTQWUx0&amp;amp;list=PLCC34OHNcOtqW9BJmgQPPzUpJ8hl49AGy"&gt;Codemy.com - Django&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=UmljXZIypDc&amp;amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p"&gt;Corey Schafer&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=SIyxjRJ8VNY&amp;amp;list=PLsyeobzWxl7r2ukVgTqIQcl-1T0C2mzau"&gt;Telusko&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From this article, we were able to understand the Django framework, what is it, and why it should be used on a high level. Further, we explored the web application(backend) components which are targeted by Django for ease of developing applications. We also saw the baseline architecture that Django uses to make projects.  &lt;/p&gt;

&lt;p&gt;In the next section, we'll start the actual coding in Django, firstly how to set up the environment and understanding the folder structure, and so on. So I hoped you enjoyed the article. Thank you for reading. Happy Coding :) &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Calling JavaScript functions from DotVVM with JS Directive</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Tue, 16 Nov 2021 16:23:41 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/calling-javascript-functions-from-dotvvm-with-js-directive-1ci0</link>
      <guid>https://dev.to/esdanielgomez/calling-javascript-functions-from-dotvvm-with-js-directive-1ci0</guid>
      <description>&lt;p&gt;Hi! It's a pleasure to greet you. To learn how to call JavaScript functions from DotVVM in ASP.NET, and vice versa, in this tutorial article we will learn how to use JS Directive when requesting two numbers from a web page, performing the operation in JavaScript, and displaying the results on that page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-js-directive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is JS Directive?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The JS directive is a feature set that provides a way to interact between DotVVM controls and JavaScript code. For example, with JS Directive we can call JavaScript functions from DotVVM, and send data from JavaScript to DotVVM. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; This functionality was incorporated into DotVVM 3.0. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-to-follow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Steps to follow&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In order for us to establish a communication between DotVVM and JavaScript, these are the steps we must follow: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Declare a JavaScript module with its respective functions. &lt;/li&gt;
&lt;li&gt;Register that module in DotVVM Startup. &lt;/li&gt;
&lt;li&gt;Import the module declared in our DotVVM views. &lt;/li&gt;
&lt;li&gt;Let's get to work! Call JavaScript functions from DotVVM, or receive data. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Example&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To see how JS Directive works in an example, let's follow the steps mentioned above to request two numbers from the user, call a JavaScript function that performs that operation, and finally display the result on the web page. &lt;/p&gt;

&lt;p&gt;Our example would be visualized as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_sQ6_fmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3do5370hwupvttq5c14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sQ6_fmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3do5370hwupvttq5c14.png" alt="Web app example to add two numbers." width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing we must have is the JavaScript module with its corresponding functions, in this case we have a file called &lt;code&gt;JavaScript.js&lt;/code&gt; located in the &lt;code&gt;wwwroot&lt;/code&gt; folder with the following definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;WEB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contextApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;contextApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;WEB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;namedCommands&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ResultOperation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;operation&lt;/code&gt; function will be in charge of performing the sum and then put the result in the &lt;code&gt;ResultOperation&lt;/code&gt; section defined in a view with DotVVVM.&lt;/p&gt;

&lt;p&gt;With this &lt;code&gt;App&lt;/code&gt; class, and its defined context, we can now register it in DotVVM to be able to make calls from DotVVM to JavaScript, and vice versa. In this sense, we must go to the &lt;code&gt;DotVVM Startup&lt;/code&gt; class, and in the &lt;code&gt;ConfigureResources&lt;/code&gt; method refer to the JavaScript file in question, and name this record (in this case the name will be &lt;code&gt;module&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DotvvmConfiguration&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;applicationPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//JS Directive&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ScriptModuleResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UrlResourceLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"~/JavaScript.js"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Dependencies = new[] { "external/other-js-file" }&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this definition, we can already use JS Directive. For the sum of the two numbers, we will define three variables in the ViewModel (in this case in the &lt;code&gt;DefaultViewModel.cs&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@viewModel JSDirective.ViewModels.DefaultViewModel, JSDirective
@masterPage Views/MasterPage.dotmaster
@js module

&lt;span class="nt"&gt;&amp;lt;dot:Content&lt;/span&gt; &lt;span class="na"&gt;ContentPlaceHolderID=&lt;/span&gt;&lt;span class="s"&gt;"MainContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;JS Directive Demo&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Add two numbers&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;Number1: &lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;dot:TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"{value: Number1}"&lt;/span&gt; &lt;span class="na"&gt;Type=&lt;/span&gt;&lt;span class="s"&gt;"Number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;Number2: &lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;dot:TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"{value: Number2}"&lt;/span&gt; &lt;span class="na"&gt;Type=&lt;/span&gt;&lt;span class="s"&gt;"Number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dot:Button&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"Calculate"&lt;/span&gt;
                        &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;"{staticCommand:_js.Invoke("&lt;/span&gt;&lt;span class="na"&gt;operation&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;Number1&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Number2&lt;/span&gt;&lt;span class="err"&gt;);}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;dot:NamedCommand&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"ResultOperation"&lt;/span&gt; &lt;span class="na"&gt;Command=&lt;/span&gt;&lt;span class="s"&gt;"{staticCommand: (int id) =&amp;gt; _root.Result = id}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Result: &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{value: Result}}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dot:Content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the view, it is necessary to refer to the JavaScript module that we want to use, in this case we can reference it with the identifier &lt;code&gt;js&lt;/code&gt;, with the name of the module previously registered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in this view we can mention three important things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To set the two numbers to add, two DotVVM controls of type &lt;code&gt;TextBox&lt;/code&gt; have been used. &lt;/li&gt;
&lt;li&gt;To call the JavaScript function we can do it with a &lt;code&gt;Button&lt;/code&gt;, specifying the name of the function, and sending the respective parameters (&lt;code&gt;Number1&lt;/code&gt;, and &lt;code&gt;Number2&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;NamedCommand&lt;/code&gt; control allows us to invoke commands from JavaScript, in this case a section has been defined with the name ResultOperation, to send the value of the operation from JavaScript and save it in the variable &lt;code&gt;Result&lt;/code&gt; (defined in the ViewModel from DotVVM). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this process, we have been able to call JavaScript functions from DotVVM, and send values from JavaScript to DotVVM. &lt;/p&gt;

&lt;p&gt;The full JS Directive documentation can be reviewed from the documentation in DotVVM: &lt;a href="https://www.dotvvm.com/docs/3.0/pages/concepts/client-side-development/js-directive/overview"&gt;JS directive overview&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks for reading&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Thank you very much for reading, I hope you found this article interesting and may be useful in the future. &lt;/p&gt;

&lt;p&gt;The source code for this example can be found in the following repository on GitHub: &lt;a href="https://github.com/esdanielgomez/DotVVMJSDirective"&gt;DotVVM JS Directive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions or ideas that you need to discuss, it will be a pleasure to be able to collaborate and together exchange knowledge with each other.&lt;/p&gt;

&lt;p&gt;See you on &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! :)&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>html</category>
      <category>javascript</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Tic-Tac-Toe using HTML,CSS,JS (Express.js) (for intermediates)</title>
      <author>Lucifer25x</author>
      <pubDate>Tue, 16 Nov 2021 16:10:03 +0000</pubDate>
      <link>https://dev.to/lucifer25x/tic-tac-toe-using-htmlcssjs-expressjs-for-intermediates-18pm</link>
      <guid>https://dev.to/lucifer25x/tic-tac-toe-using-htmlcssjs-expressjs-for-intermediates-18pm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#simple-tictactoe-game-for-intermediates"&gt;
  &lt;/a&gt;
  Simple Tic-Tac-Toe game for intermediates
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#source-code-httpsgithubcomlucifer25xtictactoenew"&gt;
  &lt;/a&gt;
  Source Code: &lt;a href="https://github.com/Lucifer25x/tic-tac-toe-new"&gt;https://github.com/Lucifer25x/tic-tac-toe-new&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Play with bot&lt;/li&gt;
&lt;li&gt;2 Player&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#try"&gt;
  &lt;/a&gt;
  Try:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://replit.com/@Lucifer25x/tic-tac-toe-new#.replit"&gt;https://replit.com/@Lucifer25x/tic-tac-toe-new#.replit&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React: Giving Elements a Unique Key Attribute</title>
      <author>Randy Rivera</author>
      <pubDate>Tue, 16 Nov 2021 16:01:52 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-giving-elements-a-unique-key-attribute-573f</link>
      <guid>https://dev.to/rthefounding/react-giving-elements-a-unique-key-attribute-573f</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Remember when you create an array of elements, each one needs a &lt;code&gt;key&lt;/code&gt; attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frontEndFrameworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ember&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Knockout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Backbone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Frameworks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderFrameworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Popular Front End JavaScript Frameworks&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderFrameworks&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here FreeCodeCamp wants us to map the array &lt;code&gt;Frameworks()&lt;/code&gt; to an unordered list, much like in the last challenge. Let's finish writing the &lt;code&gt;map&lt;/code&gt; callback to return an li element for each framework in the &lt;code&gt;frontEndFrameworks&lt;/code&gt; array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Answer:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Frameworks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderFrameworks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frontEndFrameworks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Keys only need to be unique between sibling elements, they don't need to be globally unique in your application.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Easy way to exclude files during git add</title>
      <author>Chirag</author>
      <pubDate>Tue, 16 Nov 2021 16:00:58 +0000</pubDate>
      <link>https://dev.to/kodewithchirag/easy-way-to-exclude-files-during-git-add-3kn2</link>
      <guid>https://dev.to/kodewithchirag/easy-way-to-exclude-files-during-git-add-3kn2</guid>
      <description>&lt;p&gt;Every day we use the &lt;strong&gt;"git add"&lt;/strong&gt; command a lot to add our changes to the index for new commits, but have you ever wondered how we can add all the changed files with some files excluded during the execution of this command (not with .gitignore)? If the answer is yes, then this article will help you to understand how certain files can be excluded during the git add command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr-command-to-exclude-specific-file"&gt;
  &lt;/a&gt;
  TLDR; command to exclude specific file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A ':!&amp;lt;file_path&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;One day I was put in a situation where I need to add some files for my new commit but I also need to exclude a few files during that execution and those files will get added later on once my work is done on those.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One way to do this is to hit the below command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add &amp;lt;file_path&amp;gt; &amp;lt;file_path&amp;gt; ... &amp;lt;file_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, If I have done changes to under 13 files and wanted to exclude only 3 files from those, that means 10 files need to be added with the git add command, then I have to copy all those 10 files path and paste it to the terminal manually and it will have become little bit tedious task. Let’s look at the example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add Dockerfile \
README.md \
nest-cli.json \
package-lock.json \
package.json \
src/app.controller.spec.ts \
src/app.controller.ts \
src/app.module.ts \
src/app.service.ts \
src/main.ts

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this command, you can now check for the staged files by hitting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;But what if this process can be done inversely🤔? Like instead of passing 10 files paths I could just pass 3 files path, 👀 yes you heard it right this can be possible with git add with the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A ':!.eslintrc.js' ':!.gitignore' ':!.prettierrc'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now when you hit &lt;strong&gt;git status&lt;/strong&gt; it will show all 10 files added to the index apart from the 3 excluded files. It's like a &lt;strong&gt;NOT (!) operator&lt;/strong&gt; under the git add path option.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hope you enjoyed this content, please share your thoughts under comment and also get in touch with me on &lt;a href="https://twitter.com/KodeWithChirag"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>git</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Best VS Code extensions for Beginners</title>
      <author>Haris#</author>
      <pubDate>Tue, 16 Nov 2021 15:53:19 +0000</pubDate>
      <link>https://dev.to/harishash/best-vs-code-extensions-for-beginners-4hcg</link>
      <guid>https://dev.to/harishash/best-vs-code-extensions-for-beginners-4hcg</guid>
      <description>&lt;p&gt;Hi everyone, &lt;br&gt;
I’m Haris and I’m a newbie to the developer realm. Today I'd like to share my favourite VS Code extensions that will definitely help you if you’re starting out like me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diJVlAqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxy73owii454n1m92mnx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diJVlAqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxy73owii454n1m92mnx.png" alt="Prettier extension for VS Code" width="880" height="226"&gt;&lt;/a&gt;Prettier is a code formatter that greatly improves readability in teams. It's a tough job to create consistent code formatting in large codebases. As soon as you install prettier in your project, it gets implemented throughout your dev process. It works as automatic formatting on save or while you’re typing. Prettier is a well renowned extension that saves time and improves readability for teams and individuals as well. &lt;br&gt;
Check out prettier here:&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#live-preview"&gt;
  &lt;/a&gt;
  Live Preview
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PPoXnjL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmp8l0r1gxlhwk3elk8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PPoXnjL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmp8l0r1gxlhwk3elk8p.png" alt="Live Preview extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Live preview hosts a local server where you can preview your web projects inside VS code. It has many preview features including HTML file previewing, Embedded preview, Persistent Server task with server Logging, External browser Previewing &amp;amp; Debugging, Console Output Channel, Workspace-less Previewing, and Multi-root Support. &lt;br&gt;
Try Live preview:&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server"&gt;https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#settings-sync"&gt;
  &lt;/a&gt;
  Settings Sync
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2bTPi0MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cee0r9svdp3rdrqtkgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bTPi0MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cee0r9svdp3rdrqtkgk.png" alt="Settings Sync extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Settings Sync allows you to maintain a consistent IDE experience across multiple machines by downloading your extensions and reconfiguring all of your settings by saving everything via GitHub. You can keep everything in sync by adding this extension in your VS code. &lt;br&gt;
Check out Settings sync&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  Bracket Pair Colorizer
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAjDQUBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w51sncfizh1xsa8q5w60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAjDQUBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w51sncfizh1xsa8q5w60.png" alt="Bracket Pair Colorizer extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Bracket Pair colorizer identifies different brackets through different colors. You can easily define which characters to match, and the colours to use. You can also configure custom bracket characters. Additionally, it becomes pretty simple to configure a list of colors, as well as a specified color for orphaned brackets.&lt;br&gt;
Check out Bracket Pair colorizer:&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blox"&gt;
  &lt;/a&gt;
  blox
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vd6VhSKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfzmm5g0mo0xe2frkj15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vd6VhSKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfzmm5g0mo0xe2frkj15.png" alt="blox extension for VS Code" width="880" height="249"&gt;&lt;/a&gt;blox is a VS code extension with a built-in library of 1500 code snippets. It lets you drop whole chunks of code blocks with a single click. It supports different frameworks including Tailwind CSS, Angular, React, and Vue. It will also support Alpine.js, Svelte, Laravel, Bootstrap, and Material UI in the future.&lt;br&gt;
Check out blox:&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsblox.blox"&gt;https://marketplace.visualstudio.com/items?itemName=vsblox.blox&lt;/a&gt;   &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#live-share"&gt;
  &lt;/a&gt;
  Live Share
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_xoKMTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7iq40m0jdn0dckuh59gz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_xoKMTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7iq40m0jdn0dckuh59gz.png" alt="Live Share extension for VS Code" width="880" height="227"&gt;&lt;/a&gt;Live Share allows developers to collaborate on projects where they can edit and debug together. Developers can join different sessions and receive all of the editor context from another developer's environment that ensures they can start collaborating immediately, without the need to clone any repos or install any SDKs.&lt;br&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this sums up the list for now, do share your experience if you’ve given any of these a shot. &lt;br&gt;
What are your favorite VS code extensions that you use on a daily basis?&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>React: Use Array.map() to Render Elements</title>
      <author>Randy Rivera</author>
      <pubDate>Tue, 16 Nov 2021 15:51:15 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-use-arraymap-to-render-elements-4ocg</link>
      <guid>https://dev.to/rthefounding/react-use-arraymap-to-render-elements-4ocg</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Using Array.map() is extremely useful in the sense that often than not, in reacive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program. As programmers we need to write the code to correctly handle that unknown state ahead of time.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textAreaStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyToDoList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Change code below this line&lt;/span&gt;

    &lt;span class="c1"&gt;// Change code above this line&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;toDoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;itemsArray&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;textAreaStyles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Separate Items With Commas'&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Create List&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My "To Do" List:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;As you can see there's a &lt;code&gt;textarea&lt;/code&gt; and a &lt;code&gt;button&lt;/code&gt;, along with a couple of methods that track their states, but nothing is rendered to the page yet.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All freeCodeCamp wants us to do is inside the constructor, create a &lt;code&gt;this.state&lt;/code&gt; object and define two states: &lt;code&gt;userInput&lt;/code&gt; should be initialized as an empty string, and &lt;code&gt;toDoList&lt;/code&gt; should be initialized as an empty array. Next, in the render method map over the &lt;code&gt;toDoList&lt;/code&gt; array stored in the component's internal state and dynamically render a li for each item.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Answer:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyToDoList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;toDoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-arrayfilter-to-filter-an-array"&gt;
  &lt;/a&gt;
  Use Array.filter to Filter an Array
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Another method to &lt;code&gt;map&lt;/code&gt; is &lt;code&gt;filter&lt;/code&gt;, which filters the contents of an array based on a condition, then returns a new array.
*Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jeff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sara&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Laura&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;online&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Current Online Users:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderOnline&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here &lt;code&gt;MyComponent&lt;/code&gt;'s state is initialized with an array of users. Some users are online and some aren't. Let's Filter the array so you see only the users who are online. Then, in the &lt;code&gt;renderOnline&lt;/code&gt;variable, let's &lt;code&gt;map&lt;/code&gt; over the filtered array, and return a li element for each user that contains the text of their username. We'll also include a unique &lt;code&gt;key&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*Answer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderOnline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usersOnline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Larson, Q., 2019. Frontend Development Libraries. [online] Freecodecamp.org. Available at: &lt;a href="https://www.freecodecamp.org/learn/front-end-development-libraries/react"&gt;https://www.freecodecamp.org/learn/front-end-development-libraries/react&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
