<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Rails redirect user to the previous page  after signup or login</title>
      <author>code Salley</author>
      <pubDate>Wed, 11 Aug 2021 14:34:16 +0000</pubDate>
      <link>https://dev.to/juxsalley/rails-redirect-user-to-the-previous-page-after-signup-or-login-1483</link>
      <guid>https://dev.to/juxsalley/rails-redirect-user-to-the-previous-page-after-signup-or-login-1483</guid>
      <description>&lt;h4&gt;
  &lt;a href="#lets-hit-the-ball-after-working-on-a-subscription-platform-for-a-while-i-realized-new-users-who-wanted-to-pay-for-services-on-the-go-have-to-sign-up-but-after-signup-devise-redirect-the-user-to-the-root-page-users-will-have-to-look-up-what-they-wanted-all-over-again"&gt;
  &lt;/a&gt;
  Let's hit the ball, After working on a subscription platform for a while I realized new user's who wanted to pay for service's on the go have to sign up but after signup, Devise redirect the user to the root page, user's will have to look up what they wanted all over again.
&lt;/h4&gt;

&lt;p&gt;devise allows us to override most of the implementation, &lt;br&gt;
we can create a registration controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Users::RegistrationsController &amp;lt; Devise::RegistrationsController



 protected


  def after_sign_up_path_for(resource)
     url = session[:fall_back_url]
       session[:fall_back_url] = nil
      if current_user &amp;amp;&amp;amp; url
        url
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside controller methods we might what to save user's url, we'll save it an session &lt;code&gt;fall_back_url&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def show
    if !current_user
      session[:fall_back_url] = request.url
    end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ruby</category>
      <category>rails</category>
      <category>devise</category>
      <category>code</category>
    </item>
    <item>
      <title>🤯 10 [Insightful] Programming Wisdom Quotes!</title>
      <author>Clean Code Studio</author>
      <pubDate>Wed, 11 Aug 2021 14:31:59 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/10-insightful-programming-wisdom-quotes-18ba</link>
      <guid>https://dev.to/cleancodestudio/10-insightful-programming-wisdom-quotes-18ba</guid>
      <description>&lt;p&gt;So this is a bit of a fun response to &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
's (&lt;a href="https://dev.to/inhuofficial/10-tips-for-clean-dev-articles-59id"&gt;10 Tips For Clean DEV Articles!&lt;/a&gt;) - a fun post &lt;strong&gt;critiquing my &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;
 article&lt;/strong&gt; &lt;a href="https://dev.to/cleancodestudio/10-tips-for-clean-code-4nm6"&gt;10 Tips For Clean Code&lt;/a&gt; for its structure and accessibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be clear&lt;/strong&gt;, the tips in the article are great, this is purely a post pointing out that I read and appreciated &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
's accessibility tips (and am down to use them). &lt;/p&gt;

&lt;p&gt;There is no hate or malice here, I - like &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
 - am just mischievous (as most of you know) and the article had loads of &lt;strong&gt;accessibility advice&lt;/strong&gt; given by a passionate spokesperson for digital accessibility...so you know I'm going to have to respond with my own article mimicking the structure of the article that critiqued my own. &lt;/p&gt;

&lt;p&gt;Anyway, it is silly with an important message, please treat it as such! &lt;/p&gt;

&lt;p&gt;Here is my list of &lt;strong&gt;10 [Insightful] Programming Wisdom Quotes!&lt;/strong&gt; (I would suggest going to read the article first or read them at the same time, otherwise some of these points used in this article and pointed out in &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
's article may not make sense!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-quotes"&gt;
  &lt;/a&gt;
  The Quotes
&lt;/h2&gt;

&lt;p&gt;1 &lt;strong&gt;John Carmack Quote:&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Sometimes the elegant implementation is a function. Not a &lt;br&gt;
 method. Not a class. Not a framework. Just a function."&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2 &lt;strong&gt;Doug Linder Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"A good programmer is someone who always looks both ways before crossing a one-way street."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3 &lt;strong&gt;Mikko Hypponen Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_"Rarely is anyone thanked for the work they did to prevent the disaster that didn't happen."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4 &lt;strong&gt;Jeff Atwood Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_"Hell isn't other people's code. Hell is your own code from 3 years ago."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;5 &lt;strong&gt;Rick Hickey Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Programming is not about typing, it's about thinking"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;6 &lt;strong&gt;Unknown Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Weeks of coding can save you hours of planning"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;7 &lt;strong&gt;Ron Jefferies Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Always implement things when you actually need them, never when you just foresee that you need them."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;8 &lt;strong&gt;Nicoll Hunt Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The first step of any project is to grossly underestimate its complexity and difficulty"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;9 &lt;strong&gt;Richard Pattis Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"When debugging, novices insert corrective code; experts remove defective code."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;10 &lt;strong&gt;Filipe Fortes Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Debugging is like being the detective in a crime movie where you are also the murderer."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;Obviously this may all be a bit of fun but the &lt;strong&gt;quotes are all valid and important&lt;/strong&gt; (I might have had a quote or two in there that simply shares how projects typically go for programmers that aren't necessarily helpful and more so simply state truths, but if "8 valid quotes for programmers with a filler quote or two" wouldn't make for a good title - now would it? 🤣).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advice for everyone:&lt;/strong&gt; put some effort in to formatting your articles properly, it makes them easier to read and also has the added bonus of including everyone in the conversation!&lt;/p&gt;

&lt;p&gt;And yes, for those of you who read the original article, I did even steal the cover image style and design, if you are going to copy someone's work do it right!🤣 Technically, I just stole it back - I used that cover photo on my 10 Clean Code Tips article first and it's &lt;strong&gt;a damn good looking cover photo&lt;/strong&gt;! Feel free to steal it yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip-11"&gt;
  &lt;/a&gt;
  Bonus Tip 11
&lt;/h2&gt;

&lt;p&gt;Always have a bonus quote, people seem to love that!&lt;/p&gt;

&lt;p&gt;Bonus &lt;strong&gt;Clean Code Studio Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Follow [inhuofficial on Twitter],(&lt;a href="https://twitter.com/InHuOfficial"&gt;https://twitter.com/InHuOfficial&lt;/a&gt;), I have as they put some insightful tweets out there!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Oh and I have some followers as well (although I only started tweeting daily this past week), so you could always follow @&lt;a href="https://twitter.com/cleancodestudio"&gt;CleanCodeStudio&lt;/a&gt; if you fancy it, my knowledge sharing will continue there."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope this article made you smile and I hope you are having a great weekend!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>writing</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>iOS App Development: Publishing a CocoaPods library that converts images to GIFs with Swift.</title>
      <author>Murmeko</author>
      <pubDate>Wed, 11 Aug 2021 14:12:08 +0000</pubDate>
      <link>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-that-converts-images-to-gifs-with-swift-5ckm</link>
      <guid>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-that-converts-images-to-gifs-with-swift-5ckm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#step-1-install-cocoapods-on-your-mac"&gt;
  &lt;/a&gt;
  Step 1: Install CocoaPods on your Mac
&lt;/h1&gt;

&lt;p&gt;In order to create a CocoaPods, you must first install CocoaPods on your Mac. To install CocoaPods on your Mac, you need to open the Terminal application and run the following command.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When you run the command, Terminal will ask you to type your password, and after entering your password, CocoaPods will be installed on your Mac.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULueUi1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmlcckf4njhvsnta6lla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULueUi1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmlcckf4njhvsnta6lla.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-creating-the-pod"&gt;
  &lt;/a&gt;
  Step 2: Creating the pod
&lt;/h1&gt;

&lt;p&gt;After installing CocoaPods on your Mac, use the "cd" command to change to the directory where you want to create the Pod using Terminal. For me the command is as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After moving to the directory where you want to create your Pod, create the Pod by replacing the "POD NAME" part of the command below with the name of your Pod. Also, make sure that there are no spaces in the name of your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After running the command, Terminal will ask you the following questions about your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the first question, you are asked on which platform you will use your Pod, we write “iOS” and continue. In the second, you are asked in which language you will write your Pod, we write "Swift" and continue. In the third question, you are asked whether to include a demo application with your Pod, we write “Yes” and continue. In the fourth question, which frameworks you will use to test your Pod, we write “None” and continue. In the fifth question, you are asked whether you want to do View-based testing, we write “No” and continue. If you followed the steps correctly, an Xcode window will open when the command finishes running.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-signing-in-to-xcode-with-github"&gt;
  &lt;/a&gt;
  Step 3: Signing in to Xcode with GitHub
&lt;/h1&gt;

&lt;p&gt;If you are already logged into your Xcode with GitHub, you can skip this step and go to Step 4.&lt;/p&gt;

&lt;p&gt;To sign in to Xcode with GitHub, you must first create a GitHub account. After opening a GitHub account, you should click the profile icon at the top right, click the "Settings" button from the drop-down list, and click the "Developer settings" button in the list on the left of the page you are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After pressing the button, you should press the "Personal access tokens" button on the left of the page you are directed to, and when the page is updated, you should press the "Generate new token" button, which is the 2nd button from the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzXPmvl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x2lkbxnxdkwax6aor66.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzXPmvl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x2lkbxnxdkwax6aor66.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Note section of the new page that opens, you must enter the name of the Token you want to create, I briefly write "Xcode". In the Expiration section, we are asked to specify the expiration date of your Token, we can choose the "No expiration" option because we will use it in Xcode. In the Select scopes section, you specify the access permissions of your Token. Here you need to tick “repo”, “admin:repo_hook”, “delete_repo” respectively. After checking the boxes, we press the "Generate token" button at the bottom and our token is created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvC5oWWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0hn19mvzzx79z3rztkw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvC5oWWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0hn19mvzzx79z3rztkw.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your password in the green box on the page we are directed to and return to Xcode. After returning to Xcode, click the Xcode tab in the Menu Bar and click the "Preferences" button. Click the “Accounts” button at the top of the window that opens, and then click the “+” button at the bottom left. Select GitHub from the list in the window that opens and click the “Continue” button. In the renewed window, paste your e-mail address that you used to open your GitHub account in the “Account” section, and your Token password that you copied from the green box in the “Token” section and press the “Sign In” button. If you followed the guide correctly, congratulations, you have integrated your GitHub account into your Xcode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCYnA7eQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djmbt6rmsp5pumlzm2yg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCYnA7eQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djmbt6rmsp5pumlzm2yg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-update-your-pods-settings-and-export-to-github"&gt;
  &lt;/a&gt;
  Step 4: Update your pod's settings and export to GitHub
&lt;/h1&gt;

&lt;p&gt;After creating your pod, you can see a yellow warning sign appear to the left of the top middle bar of your Xcode. When you click on the sign, the Navigator part of your Xcode will switch to the Issue Navigator tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xd-3ddI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3n7nbxtfwssxfuf0f7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xd-3ddI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3n7nbxtfwssxfuf0f7k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AwdaLInX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5lfpkbju3bl6lsg0yep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AwdaLInX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5lfpkbju3bl6lsg0yep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first warning in this section, Xcode tells us that it can convert your project's code to Swift 5 code. Click on the warning and convert your code of “Next, Next, Next” method to Swift 5 code. In the second and third warnings, Xcode is telling you that it can update the settings of your Pod and our example project to the recommended settings. Again, update the settings of your project with the “Next, Next, Next” method. The thing to keep in mind here is that Xcode is upgrading the minimum iOS version your sample project and Pod can run on from 9.0 to 12.0.&lt;/p&gt;

&lt;p&gt;After all the warnings disappear, click on the "Source Control Navigator" button, which is the second of the horizontal buttons at the top of the Navigator section on the left. There are 4 folders here, right click on the "Remotes" folder, which is the 3rd folder from the top, and click on the "New 'POD NAME' remote" button. When you click the "Create" button at the bottom right of the window that opens, your Pod will be transferred to your GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDQdhJtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qug4phiegj80jei5y7au.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDQdhJtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qug4phiegj80jei5y7au.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After transferring your code to GitHub, click the "Project Navigator" button, which is the 1st from the left among the buttons at the top of the Navigator section of Xcode. Project Navigator lists the files that make up our project. Here, click on the arrows to the left of the files named “POD NAME” and Pods if they are minimized and expand your files. Then expand the "Podspec Metadata" folder, which is the 1st one from the top. Click on the file named POD NAME.podspec in the expanding folder. This file acts as the identity of your Pod. Here, you are expected to enter a brief summary of your Pod in the "s.summary" section, and a description of your Pod in the "s.description" section. I am writing the following for my own Pod, respectively.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After writing your summary and explanation, you need to update the minimum iOS version that your Pod can be used in from the "s.ios.deployment_target" section and specify the Swift version we used while writing your library. To specify the iOS version you used while writing our library, you should add "s.swift_version = '5.4'" under the "s.ios.deployment_target" section. At the end of all changes, your 'POD NAME'.podspec file should look like the one below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After updating your 'POD NAME'.podspec file, open the "README.md" file in the folder where your file is located. Add " :git =&amp;gt; '&lt;a href="https://github.com/Murmeko/POD"&gt;https://github.com/Murmeko/POD&lt;/a&gt; NAME.git'" line under the "pod 'POD NAME'" line under the "## Installation" section here.&lt;br&gt;
After you have done this, you finally need to update the “.podfile” file of your sample project. For this, open the "Podfile" file in Project Navigator and replace the "platform :ios, '9.0'" part with 12.0.&lt;/p&gt;

&lt;p&gt;Now that you have everything set up, it's time to make your first Commit. For this, click on the Source Control tab in the Menu Bar and click on the “Commit…” button in the drop-down list. Click on all the files that appear on the left of the window that opens and type the name of your commit in the "Enter commit message here" box at the bottom. I will write “Updated project settings” as the name. Finally, click the "Push to remote:" box at the bottom left and click the "Commit Files" button at the bottom right, your files on GitHub have been updated.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-5-creating-your-library"&gt;
  &lt;/a&gt;
  Step 5: Creating your library
&lt;/h1&gt;

&lt;p&gt;After updating your code on GitHub, expand the "Development Pods" folder from the Project Navigator section, and then expand the "POD NAME" folder in the same folder. Update the file named "ReplaceMe.swift" that appears here as "POD NAME.swift" and open the file. You will write your code here.&lt;/p&gt;

&lt;p&gt;First, import the frameworks you will use while writing your code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, define a class. The point you should pay attention to here is that you must define the class as " public ", otherwise you cannot use your library.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After defining your class, define an enum named “ colorSpace ” inside this class.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then, inside the class you define, the function that will convert your images to GIF is a "UIImage" string, a "URL" that indicates where the file will be located, a "colorSpace" that will specify the color space of your GIF, an "Int" value that indicates the time between the photos that make up your GIF, and Define it to take an “Int” value that specifies how many times your GIF will repeat, and give it a “UIImage” string at the end. Also remember that when defining the function and enum they must be " public ".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, define another function that will take a “String” into your function and return the URL of your GIF.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, you must define a “public init” for the class you originally created. Otherwise, you won't be able to use your class in the project where you added your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Your library is ready! If you want, you can also add a sample application to the "Example" folder in the main folder of the project. You can use your library in your projects as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#step-6-publish-the-pod"&gt;
  &lt;/a&gt;
  Step 6: Publish the Pod
&lt;/h1&gt;

&lt;p&gt;After creating your library, commit your project one last time. Then open the Terminal application and go to the directory where your project is located with the “cd” command. My directory is “Documents/Developer/GIFFromImages“. Then run the “pod lib lint” command in this directory. This script validates your files, if it successfully validates it will give the following output.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then you need to register CocoaPods by running the “pod trunk register” command. Here, you should replace the "&lt;a href="mailto:address@e-mail.com"&gt;address@e-mail.com&lt;/a&gt;" part with your e-mail address, the "Your Name" part with your name, and the " — description='Name of your Mac'" part with the name of your Mac.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you've done this, open your project's GitHub page and click the "Releases" button on the right. Then click on the “Draft a new release” button on the top right of the page we are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-k2FZFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx4p16gv5fiazdze0pc9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-k2FZFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx4p16gv5fiazdze0pc9.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 0.1.0 in the “Tag version” section on the page you are directed to. This is the part where you specify the version of your Pod. As you update your pod, you have to update the .podspec file and the releases section on GitHub. Then write “Release 0.1.0” in the “Release title” section on this page. Actually, you can write whatever you want here, but I will write it like this to avoid confusion. Then click on the "Publish release" button at the bottom left of the page, so you publish the 0.1.0 version of your Pod on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zfpx5JHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajlkozwbe1pzcqcu9c3e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zfpx5JHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajlkozwbe1pzcqcu9c3e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, go back to Terminal and run the command " pod trunk push NAME.podspec ". And congratulations, your Pod is officially live!&lt;/p&gt;

&lt;p&gt;For projects GitHub page: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Murmeko"&gt;
        Murmeko
      &lt;/a&gt; / &lt;a href="https://github.com/Murmeko/GIFFromImages"&gt;
        GIFFromImages
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
GIFFromImages&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/Murmeko/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1063d7862846357d3017f9f23f10d2a4c502ba131abdd971a550c5e9bf0db46b/68747470733a2f2f7472617669732d63692e636f6d2f4d75726d656b6f2f47494646726f6d496d616765732e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/531e60ad3ea4261492fe06fc693b2a4cd653ad1fc1e6765b5790163d70c6a1dc/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f47494646726f6d496d616765732e7376673f7374796c653d666c6174" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a2771e56c817c946367d120d8e515d4deb326ebb15aaeac32d463c3ac58617a/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f47494646726f6d496d616765732e7376673f7374796c653d666c6174" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f7ff7e9424dd557669f4c79abffdbe91db279eaef45311198485263c1f5645ab/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f47494646726f6d496d616765732e7376673f7374796c653d666c6174" alt="Platform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Learn how to use / how to create&lt;/h2&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Installation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iOS 12.0+&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/Murmeko/GIFFromImages#cocoapods"&gt;CocoaPods&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;GIFFromImages is available through &lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-en"&gt;pod&lt;/span&gt; &lt;span class="pl-s"&gt;'GIFFromImages'&lt;/span&gt;
&lt;span class="pl-pds"&gt;:git&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;'https://github.com/Murmeko/GIFFromImages.git'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;Murmeko, &lt;a href="https://github.com/Murmeko/GIFFromImagesmailto:yigiterdinc@gmail.com"&gt;yigiterdinc@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;GIFFromImages is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Murmeko/GIFFromImages"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
    </item>
    <item>
      <title>iOS App Development: Publishing a CocoaPods library with Swift that turns pictures to grayscale.</title>
      <author>Murmeko</author>
      <pubDate>Wed, 11 Aug 2021 14:01:19 +0000</pubDate>
      <link>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-with-swift-that-turns-pictures-to-grayscale-2k2g</link>
      <guid>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-with-swift-that-turns-pictures-to-grayscale-2k2g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#step-1-install-cocoapods-on-your-mac"&gt;
  &lt;/a&gt;
  Step 1: Install CocoaPods on your Mac
&lt;/h1&gt;

&lt;p&gt;In order to create a CocoaPods, you must first install CocoaPods on your Mac. To install CocoaPods on your Mac, you need to open the Terminal application and run the following command.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When you run the command, Terminal will ask you to type your password, after entering your password CocoaPods will be installed on your Mac.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5yayt1vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teodstg6q59z4au9op4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5yayt1vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teodstg6q59z4au9op4n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-creating-the-pod"&gt;
  &lt;/a&gt;
  Step 2: Creating the pod
&lt;/h1&gt;

&lt;p&gt;After installing CocoaPods on your Mac, use the "cd" command to change to the directory where you want to create the Pod using Terminal. For me the command is as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After moving to the directory where you want to create your Pod, create the Pod by replacing the "POD NAME" part of the command below with the name of your Pod. Also, make sure that there are no spaces in the name of your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After running the command, Terminal will ask you the following questions about your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the first of the questions, you are asked on which platform you will use your Pod, write “iOS” and continue. In the second, you are asked in which language you will write your Pod, write "Swift" and continue. In the third question, you are asked whether to include a demo application with your Pod, write “Yes” and continue. In the fourth question, which frameworks you will use to test your Pod, write “None” and continue. In the fifth question, you are asked whether you want to do View-based testing, write “No” and continue. If you followed the steps correctly, an Xcode window will open when the command finishes running.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-signing-in-to-xcode-with-github"&gt;
  &lt;/a&gt;
  Step 3: Signing in to Xcode with GitHub
&lt;/h1&gt;

&lt;p&gt;If you are already logged into your Xcode with GitHub, you can skip this step and go to Step 4.&lt;/p&gt;

&lt;p&gt;To sign in to Xcode with GitHub, you must first create a GitHub account. After opening a GitHub account, you should click the profile icon at the top right, click the "Settings" button from the drop-down list, and click the "Developer settings" button in the list on the left of the page you are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After pressing the button, you should press the "Personal access tokens" button on the left of the page you are directed to, and when the page is updated, you should press the "Generate new token" button, which is the 2nd button from the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFiU7RF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4i9wlf60b3s992wyybg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFiU7RF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4i9wlf60b3s992wyybg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Note section of the new page that opens, you must enter the name of the Token you want to create, I briefly write "Xcode". In the Expiration section, we are asked to specify the expiration date of your Token, we can choose the "No expiration" option because we will use it in Xcode. In the Select scopes section, you specify the access permissions of your Token. Here you need to tick “repo”, “admin:repo_hook”, “delete_repo” respectively. After checking the boxes, we press the "Generate token" button at the bottom and our token is created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLmUpaP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahsz4jt7ilyorcqlo3xr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLmUpaP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahsz4jt7ilyorcqlo3xr.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your password in the green box on the page we are directed to and return to Xcode. After returning to Xcode, click the Xcode tab in the Menu Bar and click the "Preferences" button. Click the “Accounts” button at the top of the window that opens, and then click the “+” button at the bottom left. Select GitHub from the list in the window that opens and click the “Continue” button. In the renewed window, paste your e-mail address that you used to open your GitHub account in the “Account” section, and your Token password that you copied from the green box in the “Token” section and press the “Sign In” button. If you followed the guide correctly, congratulations, you have integrated your GitHub account into your Xcode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eauhg537--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddch33325l1ts8c5fwkp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eauhg537--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddch33325l1ts8c5fwkp.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-updating-our-pods-settings-and-importing-our-pod-to-github"&gt;
  &lt;/a&gt;
  Step 4: Updating our Pod's settings and importing our Pod to GitHub
&lt;/h1&gt;

&lt;p&gt;After creating your pod, you'll see a yellow warning sign appear to the left of the top middle bar of your Xcode. When you click on the sign, the Navigator part of your Xcode will switch to the Issue Navigator tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mXabuqfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is6q6abutc11zp3q9mkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mXabuqfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is6q6abutc11zp3q9mkf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QaGhDPUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29ojcyuyf8jnkxdmuier.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaGhDPUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29ojcyuyf8jnkxdmuier.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first warning in this section, Xcode tells us that it can convert your project's code to Swift 5 code. Click on the warning and convert your code of “Next, Next, Next” method to Swift 5 code. In the second and third warnings, Xcode is telling you that it can update the settings of your Pod and our example project to the recommended settings. Again, update the settings of your project with the “Next, Next, Next” method. The thing to keep in mind here is that Xcode is upgrading the minimum iOS version your sample project and Pod can run on from 9.0 to 12.0.&lt;/p&gt;

&lt;p&gt;After all the warnings disappear, click on the "Source Control Navigator" button, which is the second of the horizontal buttons at the top of the Navigator section on the left. There are 4 folders here, right click on the "Remotes" folder, which is the 3rd folder from the top, and click on the "New 'POD NAME' remote" button. When you click the "Create" button at the bottom right of the window that opens, your Pod will be transferred to your GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nVxDq4Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyzd8kypj2l97rduaoaj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVxDq4Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyzd8kypj2l97rduaoaj.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After transferring your code to GitHub, click the "Project Navigator" button, which is the 1st from the left among the buttons at the top of the Navigator section of Xcode. Project Navigator lists the files that make up our project. Here, click on the arrows to the left of the files named “POD NAME” and Pods if they are minimized and expand your files. Then expand the "Podspec Metadata" folder, which is the 1st one from the top. Click on the file named POD NAME.podspec in the expanding folder. This file acts as the identity of your Pod. Here, you are expected to enter a brief summary of your Pod in the "s.summary" section, and a description of your Pod in the "s.description" section. I am writing the following for my own Pod, respectively.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After writing your summary and explanation, you need to update the minimum iOS version that your Pod can be used in from the "s.ios.deployment_target" section and specify the Swift version we used while writing your library. To specify the iOS version you used while writing our library, you should add "s.swift_version = '5.4'" under the "s.ios.deployment_target" section. At the end of all changes, your 'POD NAME'.podspec file should look like the one below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After updating your 'POD NAME'.podspec file, open the "README.md" file in the folder where your file is located. Add " :git =&amp;gt; '&lt;a href="https://github.com/Murmeko/POD"&gt;https://github.com/Murmeko/POD&lt;/a&gt; NAME.git'" line under the "pod 'POD NAME'" line under the "## Installation" section here.&lt;/p&gt;

&lt;p&gt;After you have done this, you finally need to update the “.podfile” file of your sample project. For this, open the "Podfile" file in Project Navigator and replace the "platform :ios, '9.0'" part with 12.0.&lt;/p&gt;

&lt;p&gt;Now that we have everything set up, it's time to make our first Commit. For this, we click on the Source Control tab in the Menu Bar, click on the “Commit…” button from the drop-down list. We tick all the files that appear on the left of the window that opens, and write the name of our commit in the "Enter commit message here" box at the bottom. I will write “Updated project settings” as the name. After clicking the "Push to remote:" box at the bottom left, we click the "Commit Files" button at the bottom right and our files on GitHub are updated.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-5-creating-your-library"&gt;
  &lt;/a&gt;
  Step 5: Creating your library
&lt;/h1&gt;

&lt;p&gt;After updating your code on GitHub, expand the "Development Pods" folder from the Project Navigator section, and then expand the "POD NAME" folder in the same folder. Update the file named "ReplaceMe.swift" that appears here as "POD NAME.swift" and open the file. You will write your code here.&lt;/p&gt;

&lt;p&gt;First, import the Frameworks you will use while writing your code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, create a class. The point you should pay attention to here is that you must define the class as " public ", otherwise you cannot use your library.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then, define the function that will turn your images into black and white in this class that you have defined, so that it takes a “UIImage” and returns a “UIImage”. Also, remember that when defining the function, it must be "public".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Define the properties of the UIImage you will draw in your function. Here, make sure that the new UIImage you are going to draw has its dimensions from the original, otherwise the aspect ratio of the new image will change. Also, make sure that the color space of the new UIImage you will draw is "CGColorSpaceCreateDeviceGray".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then draw your UIImage using all these definitions.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, you must define a “public init” for the class you originally created. Otherwise, you won't be able to use your class in the project where you added your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Your library is ready! If you want, you can also add a sample application to the "Example" folder in the main folder of the project. You can use your library in your projects as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#step-6-publish-the-pod"&gt;
  &lt;/a&gt;
  Step 6: Publish the Pod
&lt;/h1&gt;

&lt;p&gt;After creating your library, commit your project one last time. Then open the Terminal application and go to the directory where your project is located with the “cd” command. My directory is “Documents/Developer/GIFFromImages“. Then run the “pod lib lint” command in this directory. This script validates your files, if it successfully validates it will give the following output.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then you need to register CocoaPods by running the “pod trunk register” command. Here, you should replace the "&lt;a href="mailto:address@e-mail.com"&gt;address@e-mail.com&lt;/a&gt;" part with your e-mail address, the "Your Name" part with your name, and the " — description='Name of your Mac'" part with the name of your Mac.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you've done this, open your project's GitHub page and click the "Releases" button on the right. Then click on the “Draft a new release” button on the top right of the page we are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8T4eSR7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3p1wlkbqo33fe8glg4e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8T4eSR7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3p1wlkbqo33fe8glg4e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 0.1.0 in the “Tag version” section on the page you are directed to. This is the part where you specify the version of your Pod. As you update your pod, you have to update the .podspec file and the releases section on GitHub. Then write “Release 0.1.0” in the “Release title” section on this page. Actually, you can write whatever you want here, but I will write it like this to avoid confusion. Then click on the "Publish release" button at the bottom left of the page, so you publish the 0.1.0 version of your Pod on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASphhXqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ndep90ln0ezmcvgadm7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASphhXqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ndep90ln0ezmcvgadm7.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, go back to Terminal and run the command " pod trunk push NAME.podspec ". And congratulations, your Pod is officially live!&lt;/p&gt;

&lt;p&gt;For projects GitHub page: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Murmeko"&gt;
        Murmeko
      &lt;/a&gt; / &lt;a href="https://github.com/Murmeko/GrayscaleImages"&gt;
        GrayscaleImages
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
GrayscaleImages&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Murmeko/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a8f2ffa53e77c87ba9246e3c3bab3bda7615a83f1601b09c06806602cf60215c/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4d75726d656b6f2f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="CI Status"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c09bda7358c9ed4005b9a3df5fb2d9a433bce319295322d6aa5a1ab73e656836/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fd20ecd7ebc1befded23f9e2652fef345dbc3d87bce8649fd9008b8a70521a2d/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0002443333d41301997e37b1267af59b3a79bc13e72cebf3bf40d5b39c90b66e/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="Platform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Installation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iOS 12.0+&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/Murmeko/GrayscaleImages#cocoapods"&gt;CocoaPods&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;GrayscaleImages is available through &lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-en"&gt;pod&lt;/span&gt; &lt;span class="pl-s"&gt;'GrayscaleImages'&lt;/span&gt;
&lt;span class="pl-pds"&gt;:git&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;'https://github.com/Murmeko/GrayscaleImages.git'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;Murmeko, &lt;a href="https://github.com/Murmeko/GrayscaleImagesmailto:yigiterdinc@gmail.com"&gt;yigiterdinc@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;GrayscaleImages is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Murmeko/GrayscaleImages"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>ios</category>
      <category>swift</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>There Will Always Be More Work</title>
      <author>Tyler Hawkins</author>
      <pubDate>Wed, 11 Aug 2021 13:49:49 +0000</pubDate>
      <link>https://dev.to/thawkin3/there-will-always-be-more-work-22pf</link>
      <guid>https://dev.to/thawkin3/there-will-always-be-more-work-22pf</guid>
      <description>&lt;p&gt;Software engineering is an interesting field because the work never really ends. You may be working to finish a feature now, but after that there will be more features to build. More bugs to fix. More tech debt to pay down.&lt;/p&gt;

&lt;p&gt;You could spend your entire life working and never really "finish." I suspect the same is true of most other professions.&lt;/p&gt;

&lt;p&gt;And yet, I often feel a sense of urgency, that I must work later or longer to get more work done.&lt;/p&gt;

&lt;p&gt;To be clear, this isn't a result of poor time management –– I get plenty of work done throughout the day, more than is expected of me. I'm not trying to catch up because I've fallen behind. What I'm describing is an urge to continue working longer than necessary to get more work done simply because there is more work to do.&lt;/p&gt;

&lt;p&gt;Logically, I realize that this is a mistake. Working longer hours does not always lead to greater productivity. In the long run, it leads to burnout.&lt;/p&gt;

&lt;p&gt;So why do I feel this way? It may be because I enjoy my job. It may be because I feel a sense of ownership over the work. It may be because in the back of my mind it &lt;em&gt;feels&lt;/em&gt; like I'm accomplishing something that can ultimately be finished.&lt;/p&gt;

&lt;p&gt;But the truth is, none of these reasons are justifiable excuses for working longer hours, later nights, or during the weekend.&lt;/p&gt;

&lt;p&gt;So this is my reminder to myself –– and to you –– that there will always be more work. Take care of yourself.&lt;/p&gt;

&lt;p&gt;Don't burn yourself out. It's not worth it.&lt;/p&gt;

</description>
      <category>career</category>
      <category>leadership</category>
      <category>healthydebate</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>5 React.js UI Component libraries.</title>
      <author>Vaibhav Acharya</author>
      <pubDate>Wed, 11 Aug 2021 13:13:05 +0000</pubDate>
      <link>https://dev.to/vaibhavacharya/5-react-js-ui-component-libraries-58dm</link>
      <guid>https://dev.to/vaibhavacharya/5-react-js-ui-component-libraries-58dm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-reactjs-ui-component-library"&gt;
  &lt;/a&gt;
  What is a React.js UI Component library?
&lt;/h2&gt;

&lt;p&gt;These are pre-designed building blocks for projects where you need to construct things quickly and don't need much customization.&lt;br&gt;
We will look over my favorite top 5 libraries here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#material-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is an implementation of Google's design language which is &lt;a href="https://material.io/design"&gt;Material Design&lt;/a&gt;.&lt;br&gt;
It is easily the most popular component library in the React eco-system.&lt;br&gt;
Has a lot of components &amp;amp; good community support.&lt;br&gt;
They also offer some paid themes &amp;amp; components.&lt;br&gt;
In terms of drawbacks, I found the design language to be too boring. Although they do state that you can implement your own design system but I find the customization methods to be not so developer friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ant-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://ant.design/"&gt;Ant UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is based on the Ant design language. It is a pretty looking design system. They offer &amp;gt; 60 high-quality components.&lt;br&gt;
They also have a professional version for enterprise applications. My experience with customization has been decent. You can utilize LESS variables to customize design tokens based on the appearance and feel of your brand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; and React CSS-in-JS had a child it would be Chakra.&lt;br&gt;
It is entirely customizable, has excellent community support, and all of the components are designed with composition in mind, allowing you to easily construct your own components.&lt;br&gt;
One of the things I admire about it is that it does not make concessions in terms of accessibility. They also provide premium components to help you construct things even faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base-web"&gt;
  &lt;/a&gt;
  &lt;a href="https://baseweb.design/"&gt;Base Web&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is created, managed, and utilized by Uber.&lt;br&gt;
It includes a wide range of attractive components, with accessibility as the top focus.&lt;br&gt;
It is quick since it is built with the &lt;a href="https://www.styletron.org/"&gt;Styletron&lt;/a&gt; engine. Style overrides can be used to tweak themes, but in my experience, I've never required them because the design vibe they're trying for is precisely what I want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#geist-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://react.geist-ui.dev/"&gt;Geist UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is based on the design language of &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;.&lt;br&gt;
It is without a doubt the most visually appealing library I have ever encountered.&lt;br&gt;
The components are well-made, however they are limited in quantity &amp;amp; I have noticed some accessibility issues. It is quite underappreciated and has a small community.&lt;br&gt;
You may use it for small projects that require a aesthetically pleasing look and feel.&lt;/p&gt;

&lt;p&gt;Here are some more to checkout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rsuitejs.com/"&gt;React Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seek-oss.github.io/braid-design-system/"&gt;Braid Design System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v2.grommet.io/"&gt;Grommet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rebassjs.org/"&gt;Rebass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-bootstrap.github.io/"&gt;React Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>ui</category>
      <category>components</category>
      <category>webdev</category>
    </item>
    <item>
      <title>First Flask app!</title>
      <author>Morris Mulitu</author>
      <pubDate>Wed, 11 Aug 2021 13:04:12 +0000</pubDate>
      <link>https://dev.to/mulitu/first-flask-app-3olk</link>
      <guid>https://dev.to/mulitu/first-flask-app-3olk</guid>
      <description>&lt;p&gt;If you want to build a web app in Python then it is highly likely that you will use a framework!. A &lt;a href="https://www.fullstackpython.com/web-frameworks.html"&gt;framework&lt;/a&gt; "is a code library that makes a developer's life easier when building reliable, scalable, and maintainable web applications" Flask is such a framework in Python.&lt;/p&gt;

&lt;p&gt;Flask is relatively a new framework. It has however taken the python web development world by storm. It has become quite popular. It is offering alot of extensibility, flexibility and clean code possibilities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-flask"&gt;
  &lt;/a&gt;
  Why Flask?
&lt;/h2&gt;

&lt;p&gt;Flask is thought to be more pythonic than &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; due to the fact that the equivalent Flask web application is more explicit. Ideally, it is also easier to get started with for beginners. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world-with-flask"&gt;
  &lt;/a&gt;
  Hello, World! with Flask
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the Flask library. This code will show "Hello, World!" on localhost port 5000 if you run it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask-startup"&gt;
  &lt;/a&gt;
  Flask startup!
&lt;/h2&gt;

&lt;p&gt;You can install the Flask package from PPI &lt;br&gt;
&lt;a href="https://pypi.python.org/"&gt;(Python Package Index)&lt;/a&gt;&lt;br&gt;
First make a directory eg, &lt;strong&gt;flask_todo&lt;/strong&gt; and then have the &lt;strong&gt;flask&lt;/strong&gt; package installed. Also install &lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/"&gt;&lt;strong&gt;flask-sqlalchemy&lt;/strong&gt;&lt;/a&gt; to facilitate a simpler SQL database connection.&lt;br&gt;
It is best to work in a &lt;a href="https://docs.python.org/3/library/venv.html"&gt;virtual environment&lt;/a&gt;. &lt;br&gt;
Do enter the following commands;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir flask_todo
$ cd flask_todo
$ pipenv install --python 3.6
$ pipenv shell
(flask-someHash) $ pipenv install flask flask-sqlalchemy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just in case you want to make if a Git repo, do run &lt;em&gt;git init&lt;/em&gt; here.This will be the project's root. Just incase you intend to codebase to different machines you can have all the setup files in this directory.&lt;br&gt;
The best way to move it is to turn the codebase into an installable Python distribution. While at the root of the project create a &lt;strong&gt;setup.py&lt;/strong&gt; and a directory &lt;strong&gt;todo&lt;/strong&gt; to hold the source code.&lt;br&gt;
An example of the setup.py is as below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'flask-sqlalchemy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'flask_todo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'A To-Do List built with Flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;Your actual name here&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;Your actual e-mail address here&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'web flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requires&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this you will have all the needed packages in the &lt;strong&gt;requires&lt;/strong&gt; list.Additionally, you'll also have everything you need to set up and install the package in &lt;strong&gt;site-packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;todo&lt;/strong&gt; directory, create &lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt; and &lt;strong&gt;app.py&lt;/strong&gt; files.The &lt;strong&gt;init&lt;/strong&gt;.py file allows you to import from todo as if it was an installed package. The app.py file will be the application's root. Just in case you are using &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv&lt;/a&gt; you can find your virtual environment with &lt;strong&gt;pipenv --venv&lt;/strong&gt; and set up that environment variable in your environment's &lt;strong&gt;active&lt;/strong&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export FLASK_APP=$VIRTUAL_ENV/../todo/app.py
export DEBUG='True'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-little-code"&gt;
  &lt;/a&gt;
  A little code!
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Print 'Hello, world!' as the response body."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, world!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a basic Flask application.&lt;em&gt;app&lt;/em&gt; is an instance of Flask taking in the &lt;em&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt; of the script file.&lt;br&gt;
&lt;em&gt;app.route&lt;/em&gt; specifies the routes used to access the application.Any view you specify must be decorated by &lt;em&gt;app.route&lt;/em&gt; to be a functional part of the application.In this example, when the app is running and accessed at &lt;em&gt;&lt;a href="http://domainname/"&gt;http://domainname/&lt;/a&gt;&lt;/em&gt;, the user will receive "Hello, World!" as a response.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-the-database-in-flask"&gt;
  &lt;/a&gt;
  Connecting the database in Flask
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;flask-sqlalchemy&lt;/em&gt; package connects a SQL database to a Flask application.You need the database URL to connect to a SQL database.You can use Postgres database.The intermediary to talk to the Postgres database is the &lt;em&gt;psycopg2&lt;/em&gt; package.Include it in the list of required packages in &lt;em&gt;setup.py&lt;/em&gt;. The &lt;em&gt;flask-sqlalchemy&lt;/em&gt; will recognize Postgres from the database URL. Flask will need the database URL to be part of its central configuration through the &lt;em&gt;SQLALCHEMY_DATABASE_URI&lt;/em&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SQLALCHEMY_DATABASE_URI'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'postgres://localhost:5432/flask_todo'&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can make use of environment variables to make things easier.They ensures that, no matter what machine the code is on, it will always point tp the right stuff if that stuff is configured in the running environment.&lt;br&gt;
In the same place you declared &lt;em&gt;FLASK_APP&lt;/em&gt;, declare a &lt;em&gt;DATABASE_URL&lt;/em&gt; pointing to the location of your Postgres database. Development tends to work locally, so just point to your local database.&lt;/p&gt;

&lt;p&gt;Your application has a database connection!&lt;/p&gt;

&lt;p&gt;Do enjoy!&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Become a Backend Developer? - Backend Development</title>
      <author>Bikash</author>
      <pubDate>Wed, 11 Aug 2021 13:00:59 +0000</pubDate>
      <link>https://dev.to/inncod/how-to-become-a-backend-developer-backend-development-37o</link>
      <guid>https://dev.to/inncod/how-to-become-a-backend-developer-backend-development-37o</guid>
      <description>&lt;p&gt;&lt;span&gt;The field of web development has become a hotspot in recent years. With websites gaining more and more traction, organizations have realized that to capture more leads, they need to have a strong online presence. As a result, they seek out talented people who can use the latest technologies to design and develop the best-looking and best-performing web applications for them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When it is such a lucrative field, there’s bound to be good money in it. And there indeed is! That’s why it’s only natural that the young generation is attracted to web development as a career. However, wanting to follow a career path and actually pursuing it are two different things. It requires preparation, a series of steps, relevant education, and practice.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you’re an aspiring web developer, the first thing you need to know is that there are three categories of web developers – frontend, backend, and full-stack. Depending upon which category of web developer you wish to become, the steps to follow will vary. In this post, we’re going to focus on how to become a backend developer. We’ll be demonstrating every step of the process you need to follow.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So let’s get started.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="first-things-first-who-is-a-backend-developer-and-what-does-he-do"&gt;&lt;strong&gt;First things first – Who is a Backend Developer, and what does he do?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;As you would probably already be aware, in a typical &lt;a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model" rel="noopener"&gt;client-server architecture&lt;/a&gt;, application data is stored in the server-side and served as output to the client-side. The server-side working of a web application is known as backend. That’s where all the inner working of web applications takes place, and that’s where the work of backend developers lies.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Backend developers are responsible for using &lt;a href="https://www.codelivly.com/what-are-the-top-10-programmings-to-learn-in-2021/"&gt;programming languages&lt;/a&gt; to create the code, which actually makes web applications function the way they’re supposed to. The code that these developers write runs on the webserver. In addition to writing back-end code, such developers are also responsible for developing APIs used by the mobile version of such web applications.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="how-to-become-a-backend-developer"&gt;&lt;strong&gt;How to become a Backend Developer?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Learning back-end development helps you get acquainted with several programming languages, which can help your career a great boost. If you have a basic understanding of how logic works, it can prove to be quite beneficial. If not, you can always enroll for a basic computer language course to obtain exposure to the groundwork. This is only to ensure that you don't fall short at any stage once you set on the path of learning back-end development.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Here are the steps you will need to follow:&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-1-be-well-versed-with-the-basics-of-data-structures-algorithm"&gt;&lt;strong&gt;Step 1: Be well versed with the basics of Data Structures &amp;amp; Algorithm&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Most of the web developers skip this step and move forward to learning frameworks. However, it is always better to know the data structure and algorithm basics. Though not in-depth, you must have a basic idea about the process. You should revise basic Data Structures and Algorithm Stack, Queue, Linked List, Tree, Graph, Hashing, Sorting &amp;amp; Searching Algorithms, and other core concepts of programming.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-2-learn-a-programming-language-and-choose-a-framework"&gt;&lt;strong&gt;Step 2: Learn a Programming Language and choose a Framework.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Becoming a web developer takes effort, time, and patience. You cannot expect anyone to learn different coding languages overnight. So, decide on a timeline and the essential basic programming languages that you wish to learn. Learning languages like Python, PHP, Ruby, and JavaScript are sought after in recent times.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You can go for learning multiple programming languages at once. Remember, the more, the merrier. Also, please be aware that understanding the basics of programming is a must. If you're not already familiar with them, start with languages like C, Java, or Python and try to understand how application logic works, the best practices of coding, etc.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-3-learn-the-basics-of-databases"&gt;&lt;strong&gt;Step 3: Learn the basics of Databases.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Adding a database system to your portfolio would be the next logical step. There are many easy to use relational database management systems available from which you can select one. Almost all websites today boast some sort of storage, so learning about databases is always beneficial.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-4-learn-framework-s"&gt;&lt;strong&gt;Step 4: Learn Framework(s)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Depending on the programming language you choose, you can learn the basics of at least one framework. Be it Django or Ruby-on-Rails; most frameworks follow the same MVC (Model-View-Controller) principle. Although writing the entire application code in a programming language is permissible, it takes more effort and time and extensive coding. Whereas, using frameworks lets, you create templates and codes which can be reused later. This reduces the lines of code you are required to write. So you become more efficient. That’s why learning a framework is also a good idea.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-5-start-your-practical-training"&gt;&lt;strong&gt;Step 5: Start your practical training.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You will not understand how stuff really works until you actually start doing it practically. You need to regularly use the tools and practice to better understand the ethical knowledge you have learned so far. The best way to do this is by working on small projects or assignments. You can start by doing projects like a simple To-do list, simple blog, photo gallery web app, resume builder, basic project management app, etc.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-6-innovate-and-create-something-new"&gt;&lt;strong&gt;Step 6: Innovate and create something new&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Innovation and original ideas are valued in all fields. Probably the most in the tech field since they can change the entire game. If you already have a start-up or project idea, then you're going great. If not, you still have time to think and work on it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It's good to start with building a startup clone. It means that you would clone some products available in the market. Also, you might be interested in the following sites/apps that will be useful.&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;Buffer — A Smarter Way to Share on Social Media — Scheduling posts for various Social Media channels.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Hello Bar — Simple JavaScript plugin to help you in getting your marketing stuff done.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Airbnb / Fiverr — Marketplace of, anything&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="step-7-hosting-aws-heroku"&gt;&lt;strong&gt;Step 7: Hosting — AWS / Heroku&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Now you're ready to spread your wings! Deploy your product on a cloud service provider so it can be accessed from the WWW. AWS can be the first preference as it provides almost a year of free hosting (limited usage).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You May Also Interested In: &lt;b&gt;&lt;a href="https://www.codelivly.com/web-designers-roadmap-2021/"&gt;Web Designer Roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3 id="did-you-catch-all-of-that"&gt;&lt;strong&gt;Did you catch all of that?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Well, now that you know how to be a backend developer, it's time to level up the game. Decide if you'd want to do a job as a backend developer or you want to be a freelancer. Becoming a backend developer may also boost your pay in most of the large scale industries. Keeping all these things in mind, work on developing a good resume. As a final takeaway, we’d just like to say that in addition to inculcating the required skills, to be successful as a backend developer, you need to be dedicated, patient, and hard-working.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Working with Input Fields in Cypress</title>
      <author>Dilpreet Johal</author>
      <pubDate>Wed, 11 Aug 2021 12:30:07 +0000</pubDate>
      <link>https://dev.to/automationbro/working-with-input-fields-in-cypress-2mm2</link>
      <guid>https://dev.to/automationbro/working-with-input-fields-in-cypress-2mm2</guid>
      <description>&lt;p&gt;In this tutorial, we will learn how to work with different types of form input fields in Cypress such as Text Inputs, Dropdown menu, Checkboxes, Date Picker, and Text Area.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-input"&gt;
  &lt;/a&gt;
  Text Input
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8llu8D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrbu6kb9lkkml8jh5nmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8llu8D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrbu6kb9lkkml8jh5nmm.png" alt="name input"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To type something into a text input element, you simply need to use the &lt;code&gt;type&lt;/code&gt; command. This is how the code will look like - &lt;/p&gt;

&lt;p&gt;&lt;code&gt;cy.get("#name").type("Automation Bro");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The type command can also take special characters such as &lt;code&gt;{enter}&lt;/code&gt; &lt;code&gt;{backspace}&lt;/code&gt; etc… You can find the entire list &lt;a href="https://docs.cypress.io/api/commands/type#Arguments"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Text Area&lt;/strong&gt; would work similarly as well using the type command.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dropdown-menu"&gt;
  &lt;/a&gt;
  Dropdown Menu
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10ab_Gg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1yelntlxaigtpp08rj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10ab_Gg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1yelntlxaigtpp08rj6.png" alt="Dropdown Menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the dropdown menu, you have to select a particular option from the list. For example, to select the second option from the list above, we'll do this -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cy.get("#dropdown").select("Technical Team");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;select&lt;/code&gt; you can either select the dropdown option &lt;code&gt;value&lt;/code&gt; or the text itself to select an item.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#checkboxes"&gt;
  &lt;/a&gt;
  Checkboxes
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWyB66Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5umw1la1cc55i4msl107.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWyB66Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5umw1la1cc55i4msl107.png" alt="checkbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkboxes are similar to dropdown where you are dealing with multiple options but unlike dropdown here you can pick multiple options as well. Let's take a look at the sample code - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZYnNvW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbecn7mfchemt4p3gbyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZYnNvW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbecn7mfchemt4p3gbyy.png" alt="checkboxes-code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;check&lt;/code&gt; command and pass in an array with all the options you need to check. Similarly, you can also do the reverse to uncheck options as well.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#date-picker"&gt;
  &lt;/a&gt;
  Date Picker
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkvfdF3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05bxmpfgoeqvkferxdgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkvfdF3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05bxmpfgoeqvkferxdgp.png" alt="datepicker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Date Picker would vary based on how it's implemented by the developers, in the above example, you first need to click on the empty input field and then click on the date you want to select.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cy.get("#dateinput").click();&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cy.get(".dayContainer span:nth-child(15)").click();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the code above, I am selecting the 15th option from all the date options, this is done to keep the selection dynamic regardless of what month it is. There are many other ways of automating this as well based on how the implementation is done.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-how-to-work-with-input-fields-in-cypress%E2%80%8A%E2%80%8A"&gt;
  &lt;/a&gt;
  Check out the video below to learn more about how to work with input fields in Cypress - 
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1QuFU3IJ3Es"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this as well as free access to a Private Facebook community&lt;/p&gt;

&lt;p&gt;👍 You can follow my content here as well - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/automationbro"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/automation-bro"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hiring the best Magento Development Company in 2021</title>
      <author>Polosoft Technologies</author>
      <pubDate>Wed, 11 Aug 2021 12:17:54 +0000</pubDate>
      <link>https://dev.to/polosofttech/hiring-the-best-magento-development-company-in-2021-5c5a</link>
      <guid>https://dev.to/polosofttech/hiring-the-best-magento-development-company-in-2021-5c5a</guid>
      <description>&lt;p&gt;Magento 2 is more than just a name in the world of e-commerce, building your e-commerce store using Magento 2 is the need of the time. An e-commerce platform that gives you amazing and flexible options for making your business journey a lot easier and better. We at Polosoft Technologies understand the importance of building an amazing Magento 2 experience for our clients, for being the best Magento development company.&lt;/p&gt;

&lt;p&gt;Magento developers choose the very platform all because of the accessibility of unmatched extensions, tools, and security.Whether you seek a custom solution for an existing store or you call up for help to set up an online store from scratch, our Magento development Services will enable you with industry-specific solutions with custom themes, extensions, 3rd party integrations, and a perfect online promotion to facilitate higher ROI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjUc_iKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw01n2olfmtubkuky1zk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjUc_iKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw01n2olfmtubkuky1zk.png" alt="Magento Development Company"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perfect-magento-development-service"&gt;
  &lt;/a&gt;
  Perfect Magento development Service
&lt;/h1&gt;

&lt;p&gt;Choosing a perfect magento development company can be tiresome so let us help you choose the perfect traits:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-magento-web-development"&gt;
  &lt;/a&gt;
  Custom Magento Web Development
&lt;/h2&gt;

&lt;p&gt;A perfect &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development company&lt;/a&gt; explores all the potentials of an open source framework to deliver a complete feature enabled B2B or B2C Ecommerce store. In considerate of future upgradation and technology the web development services&lt;br&gt;
-&amp;gt;Third party integrations of Magento CE and EE for your website&lt;br&gt;
-&amp;gt;Integrations of ERP and POS with Magento website&lt;br&gt;
-&amp;gt;Theme &amp;amp; extension development services for your magento website&lt;br&gt;
-&amp;gt;Easy migration from other platforms&lt;br&gt;
-&amp;gt;Multi-vendor implementation in your magento &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment-and-shipping-integration"&gt;
  &lt;/a&gt;
  Payment And Shipping Integration
&lt;/h2&gt;

&lt;p&gt;Payment and Shipping gateways are like the veins and arteries for any e-commerce store. Magento already supports all the top payment and shipping gateways by build, you won't find any local service providers in its default list.&lt;br&gt;
-&amp;gt;Easy integration of 3rd party Payment gateway&lt;br&gt;
-&amp;gt;Easy integration of third party Shipping gateways &lt;br&gt;
-&amp;gt;E-wallet and recurring bill setups &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#magento-extension-development"&gt;
  &lt;/a&gt;
  Magento Extension Development
&lt;/h2&gt;

&lt;p&gt;Create a Magento extension for your personal e-commerce store or you might plan to facilitate your SaaS services to Magento customers through a custom Magento extension. A &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;magento development company&lt;/a&gt; can build you a very own custom made Magento extensions with extreme precision.&lt;br&gt;
-&amp;gt;Fully customized and easy development Magento extensions for both V1 and V2&lt;br&gt;
-&amp;gt;Easy documentation of code &lt;br&gt;
-&amp;gt;Bug free codes adhering to perfect Magento standards&lt;br&gt;
-&amp;gt;Approval of magento extensions on Magento marketplace&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#magento-support-and-maintenance-services"&gt;
  &lt;/a&gt;
  Magento Support And Maintenance Services
&lt;/h2&gt;

&lt;p&gt;Have an in-depth check-up and complete maintenance of your e-commerce store. &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development services&lt;/a&gt; of a perfect company monitors and optimizes your store round the clock and makes sure your website won’t ever experience down time during peak hours.&lt;br&gt;
-&amp;gt;99.9% website uptime and perfect backup service&lt;br&gt;
-&amp;gt;A complete and detailed website audit and reporting&lt;br&gt;
-&amp;gt;A complete background stress testing to predict website behaviour&lt;br&gt;
-&amp;gt;Easy and convenient real time server usage monitoring and load balancing&lt;/p&gt;

&lt;p&gt;As you are now aware about the traits of a perfect &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development company&lt;/a&gt;. A technoscientific team of dedicated Magento developers providing an all round &lt;a href="https://www.polosoftech.com/open-source-application/magento-development-company"&gt;Magento development service&lt;/a&gt;  and are capable of catering to unique business requirements while abiding by the latest Magento eCommerce development standards.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding Subresource Integrity (SRI)</title>
      <author>INChukwudi</author>
      <pubDate>Wed, 11 Aug 2021 12:17:54 +0000</pubDate>
      <link>https://dev.to/inchukwudi/understanding-subresource-integrity-sri-3ep7</link>
      <guid>https://dev.to/inchukwudi/understanding-subresource-integrity-sri-3ep7</guid>
      <description>&lt;p&gt;There are numerous benefits of embedding files and scripts hosted by third parties, such as a Content Delivery Network (CDN), in your HTML documents. But this comes with its vulnerabilities and most times, we are not aware that we (site owners and site users) are open to such attacks. Using Subresource Integrity can help prevent some of these attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-subresource-integrity"&gt;
  &lt;/a&gt;
  What is Subresource Integrity?
&lt;/h2&gt;

&lt;p&gt;Subresource Integrity (SRI) is a security feature that enables browsers to verify that resources they fetch (for example, from a CDN) are delivered without unexpected manipulation. It works by allowing you to provide a cryptographic hash that a fetched resource must match. In simple terms, it is a feature used by browsers to validate resources fetched from third parties have not been manipulated by comparing them to a hash key and if they do not match, the browsers do not serve up the resources.&lt;/p&gt;

&lt;p&gt;Being new to HTML, I wondered about the use of the &lt;code&gt;integrity&lt;/code&gt; attribute in some HTML elements and sometimes, I removed it and its value from the element. I was ignorant of its use as it isn’t something that pops up most times. Going further and being more security conscious, I discovered the integrity attribute holds the cryptographic hash of the resource to be embedded. This hash could be (but not be limited to) an SHA-256, SHA-384 or SHA-512 hash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://inchukwudi.example.com/lib-example/example.min.js"
    integrity="sha512-6QWD5OGReFYm4dnWc1Qt5Ntv9qYdvdihz0PPSiiqn/o4EaG7TubfWGUrM"
    crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
A code snippet showing a script element with an integrity attribute





&lt;h2&gt;
  &lt;a href="#javascript-a-helpful-yet-dangerous-tool"&gt;
  &lt;/a&gt;
  JavaScript, A Helpful Yet Dangerous Tool
&lt;/h2&gt;

&lt;p&gt;JavaScript is the scripting language of the web. It can perform basic stuff from creating, displaying and hiding new elements, to changing the attributes of elements. It can do more complex functions from posting data to and getting data from APIs. All these can be done without the knowledge of the site user sometimes when a certain event is triggered, for example, clicking on an element or hovering over an element.&lt;/p&gt;

&lt;p&gt;You would agree with me that JavaScript is a powerful tool. An attacker can use JavaScript to mislead users of your site by adding or editing content that you did not put. Phishing links can be added and undue redirection can be initiated. Even, the action attribute of a form can be changed and the information a user inputs in a form is sent elsewhere and vital information exposed.&lt;/p&gt;

&lt;p&gt;SRIs can help against embedding such malicious content unknowingly in your website. Yes, unknowingly as most times, malicious content are embedded without your notice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-malicious-content-get-served"&gt;
  &lt;/a&gt;
  Ways Malicious Content Get Served
&lt;/h2&gt;

&lt;p&gt;When you visit a website, your browser sends a request to the server and the server processes the request and then sends a response to your browser. Your browser interprets this response and then displays the content you see. &lt;/p&gt;

&lt;p&gt;The response sent back from the server can be thwarted in many ways and we might just be oblivious to it. Let's say a user is connected to a network where all requests and responses pass through a proxy server. An attacker with access to such requests and responses can swap or edit a file before it reaches the client and the client gets compromised. &lt;/p&gt;

&lt;p&gt;Another plausible example is an attacker gains access to a trusted CDN vendor and then edits the files on their server and different users using websites that embed such files get comprised. This is just a highlight, the list goes on and on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sri-working-mechanism"&gt;
  &lt;/a&gt;
  SRI Working Mechanism
&lt;/h2&gt;

&lt;p&gt;Let us use libraries as a case study. The content of a version of a library is fairly constant and is not expected to change. When there are major changes to be made, a new version is released. Knowing this, adding the integrity attribute with a cryptographic hash of the particular version of the library you intend to use in your HTML document will safeguard against an altered form of the library to be served to your users. Most times, the cryptographic hash of the particular version of the library is provided by the vendor of the library but in some cases, you might have to hash it down yourself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;integrity="sha512-atM3QqRcbCn6ewmpxcLAHGaDjpEB4xZd47q7pAP+gi5Yu8hFgoh"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Code snippet showing the integrity attribute and its cryptographic hash (SHA-512) value





&lt;p&gt;When the browser is linking the external library, it will hash it according to the hash algorithm specified in the integrity attribute, in this case, SHA-512, and if the output of the hash does not match the hash specified in the integrity attribute, it tries other known hashing algorithms, for example, SHA-256, and it still does not match, it does not load the file. To illustrate this, here is an example using the jQuery library version 3.6.0. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MaJiuC__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pku3nmmpz0bpc7vwf75h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MaJiuC__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pku3nmmpz0bpc7vwf75h.png" alt="screenshot of the jQuery library v3.6.0"&gt;&lt;/a&gt;&lt;/p&gt;
A screenshot of the end of the minified version of the jQuery library v3.6.0 as gotten from the jQuery Website 



&lt;p&gt;The image above is an image of the jQuery library v3.6.0 as gotten from the jQuery website. Now here is an image of the same file but with a commented line I added myself for the purpose of demonstration of how SRI helps protects you against changes in the resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhwW2uoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh9wqogevjivnq0jo2dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhwW2uoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh9wqogevjivnq0jo2dw.png" alt="screenshot of the tampered jQuery library v3.6.0"&gt;&lt;/a&gt;&lt;/p&gt;
A screenshot of the end of the minified version of the tampered jQuery library v3.6.0



&lt;p&gt;When the edited jQuery file attempts to get loaded, the browser checks and then displays this error message in the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Failed to find a valid digest in the 'integrity' attribute for resource 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.js' with computed SHA-256 integrity '4ca6xP/WMfyyRx+MmirFEms71HApLgbRdTy0XavPeQA='. The resource has been blocked.&lt;br&gt;
&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The edited file does not load and I am free from potential attacks if it was a malicious code that was added to the file. Most modern browsers support SRI so you do not have to worry as most users of your site would be protected from such attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices-when-embedding-content"&gt;
  &lt;/a&gt;
  Best Practices When Embedding Content
&lt;/h2&gt;

&lt;p&gt;Some people may advise you self host all resources you might use. Well, this makes the origin of the files trustworthy but it does not stop the files from being manipulated when a response is made. An integrity attribute is needed. Also, you would have to make sure you download such files from the owners of the libraries as there are various counterfeits all over. This might be expensive as it will take up a substantial amount of bandwidth.&lt;/p&gt;

&lt;p&gt;Using a third party resource is beneficial and in most cases cheaper than hosting the files yourself. Many resources owners have CDNs and provide you with the links to access the resource over the internet. Some of these links have the integrity attributes with cryptographic hash values already, some do not. Caution should be exercised when searching for links to CDNs and other resources as attackers might host already tampered files and hash it and make it look trustworthy, so be mindful of the websites you get links to resources from.&lt;/p&gt;

&lt;p&gt;Using this online tool, &lt;a href="https://www.srihash.org/"&gt;SRI Hash Generator&lt;/a&gt;, you can generate a cryptographic hash of the stylesheet or script you want to embed and add use it in your document and even share for others to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sri-drawbacks"&gt;
  &lt;/a&gt;
  SRI Drawbacks
&lt;/h2&gt;

&lt;p&gt;The benefit of SRI is evident but it has its drawbacks. The file that does not match the cryptographic hash won’t be loaded and this may break a lot of things especially the structure of the page and certain functionalities put in place. If a stylesheet is affected, all elements that use classes defined in the stylesheet would not appear as they ought to and the look of the site may not be palatable to the user of the site.&lt;/p&gt;

&lt;p&gt;Also, when attacks are launched and are countered by using SRI, the owner of the website is not aware that such an attack occurred. A user with no technical expertise would not know too and would think the website is just quirky then might move on to another website and if the website does not make use of SRI, the user can be compromised.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>security</category>
    </item>
    <item>
      <title>My First Day of Learning Docker</title>
      <author>Laiba Zahoor</author>
      <pubDate>Wed, 11 Aug 2021 11:56:21 +0000</pubDate>
      <link>https://dev.to/laibazahoor1/my-first-day-of-learning-docker-4823</link>
      <guid>https://dev.to/laibazahoor1/my-first-day-of-learning-docker-4823</guid>
      <description>&lt;p&gt;Containers are quickly becoming an industry standard for deployment of software applications. But question here is: how containers came into being, so I came across &lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt; and I learned.&lt;/p&gt;

&lt;p&gt;In this blog I'll discuss what I have learned so far about docker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is docker?&lt;/li&gt;
&lt;li&gt;Components of Docker&lt;/li&gt;
&lt;li&gt;Container vs VM&lt;/li&gt;
&lt;li&gt;Basic Commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is docker?
&lt;/h2&gt;

&lt;p&gt;Docker delivers software in containers, which simplifies the process by packaging everything it takes to run an application.&lt;/p&gt;

&lt;p&gt;There are numerous advantages to using containers to deploy applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Isolated&lt;/em&gt; — Applications have their own libraries; no conflicts will arise from different libraries in other applications.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Limited (limits on CPU/memory)&lt;/em&gt; — Applications may not hog resources from other applications.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Portable&lt;/em&gt; — The container contains everything it needs and is not tied to an OS or Cloud provider.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Lightweight&lt;/em&gt; — The kernel is shared, making it much smaller and faster than a full OS image.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#components-of-docker"&gt;
  &lt;/a&gt;
  Components of Docker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker file&lt;/strong&gt;  is a text document that contains necessary commands which on execution helps assemble a Docker Image.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Image&lt;/strong&gt; it is set of instruction which is use to build containers, consist of application code with all the dependencies and libraries. It is portable so it can easily shared between developers and operators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is a way of packing application with all its dependencies and configuration files. A container is a running instance of our image. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Engine&lt;/strong&gt; supports the tasks and workflows involved to build, ship and run container-based applications. The engine creates a server-side daemon process that hosts images, containers, networks and storage volumes. Docker Engine is a client-server based application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker CLI&lt;/strong&gt; is a command line tool that lets you talk to the Docker daemon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vm-vs-container"&gt;
  &lt;/a&gt;
  VM VS Container
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mP-9VZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usun26masw8vjuacfsoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mP-9VZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usun26masw8vjuacfsoi.png" alt="Docker Vs VM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt; are an abstraction at the app layer that packages code and dependencies together. Multiple containers can run on the same machine and share the OS kernel with other containers, each running as isolated processes in user space. Container take up less space than VM's (Container images are typically tens of MB's in size), and start almost instantly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual Machines(VM's)&lt;/strong&gt; are an abstraction of physical hard ware turning one server into many servers. The hypervisor allows multiple VM's to run on a single machine. Each VM includes a full copy of an Operating System, one or more apps, necessary binaries and libraries - taking up tens of GBs. VM can also be slow to boot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-commands"&gt;
  &lt;/a&gt;
  Basic Commands:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to your favorite browser and Type docker over there click on download and Install docker on your favorite OS. So, I'm skipping these steps because it's a simple next, next wizard on Windows OS but if you having any difficulties installing docker on Linux OS or Mac OS go to the &lt;em&gt;&lt;a href="https://docs.docker.com/engine/install/"&gt;docs&lt;/a&gt;&lt;/em&gt; and explore how to do it. &lt;/li&gt;
&lt;li&gt;After the installation process is completed window like this will appear to you.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_nuUAOdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25l3tcl8gnwy2zuh1h6f.png" alt="Docker Window"&gt;
&lt;/li&gt;
&lt;li&gt;Now move towards terminal to run basic commands.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;docker pull&lt;/em&gt; pulls an image from registry to local machine.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rd0hjWZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9qi36w2p73we90ez7pc.PNG" alt="pull image"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;docker images&lt;/em&gt; show images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6I6prUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoakzi3s7vp5c1he7q15.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6I6prUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoakzi3s7vp5c1he7q15.PNG" alt="images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker run&lt;/em&gt; both creates and runs a container in a single operation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vi7Tdl9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w20s1pa0845nroi99h0b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vi7Tdl9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w20s1pa0845nroi99h0b.PNG" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker ps&lt;/em&gt; shows running containers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgI-r3OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2fspmmlxf805rs72v1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgI-r3OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c2fspmmlxf805rs72v1.PNG" alt="running container"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker stop&lt;/em&gt; stops a running container. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDiq0m3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozow2ty6nn3gvcixexq5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDiq0m3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozow2ty6nn3gvcixexq5.PNG" alt="Stop container"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;docker ps -a&lt;/em&gt; shows running as well as stopped containers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBaHgrFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhty4xtmph0bvs0ayb6b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBaHgrFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhty4xtmph0bvs0ayb6b.PNG" alt="view stop container"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;docker start&lt;/em&gt; starts a container to run it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jNN0gQod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tlv37vn7qviuabzhh7w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNN0gQod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tlv37vn7qviuabzhh7w.PNG" alt="restart"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you have learned about the basics of Docker, the difference between Virtual Machines and Docker Containers along with components of Docker.&lt;/p&gt;

&lt;p&gt;In the next article, We'll try to create an application using Docker and pushed our images to Docker Hub. We'll explore more terminologies related to Docker Dockerfile, Docker Image, Docker Hub, Image repositories, Container Registries, and much more!!! &lt;/p&gt;

&lt;p&gt;If you want more content like this, you can follow me on &lt;a href="https://twitter.com/zahoorlaiba1"&gt;Twitter&lt;/a&gt;, where I tweet about webdevelopment, self-improvement, and my journey to exploring Cloud Native Technologies!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA"&gt;TechWorld with Nana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC0NErq0RhP51iXx64ZmyVfg"&gt;Bret Fisher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCorzANoC3fX9VVefJHM5wtA"&gt;Nick Janetakis
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/djdjalas"&gt;Amigoscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
  </channel>
</rss>
