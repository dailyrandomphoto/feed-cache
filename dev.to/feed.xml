<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>8 Best Google Chrome Extensions for Web Designers And Developers in 2021</title>
      <author>Animesh Dhamku</author>
      <pubDate>Sat, 24 Apr 2021 06:27:59 +0000</pubDate>
      <link>https://dev.to/animeshdhamku/8-best-google-chrome-extensions-for-web-designers-and-developers-in-2021-4a02</link>
      <guid>https://dev.to/animeshdhamku/8-best-google-chrome-extensions-for-web-designers-and-developers-in-2021-4a02</guid>
      <description>&lt;p&gt;As a designer/developer we use google chrome in daily life. That's why I brought the top 10 google extensions to make your work easy, We have a modern browser that is always upgraded by developers. I have brought 10 browser extensions today that will help you in coding.&lt;/p&gt;

&lt;p&gt;Best Google Chrome Extensions for Web Designers and Developers:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whatfont"&gt;
  &lt;/a&gt;
  WhatFont
&lt;/h1&gt;

&lt;p&gt;The easiest thanks to identify fonts on sites&lt;/p&gt;

&lt;p&gt;What is the simplest thanks to determine the fonts utilized in a webpage? Firebug and Webkit Inspector are easy enough to use for developers. However, for others, this could not be necessary. With this extension, you'll inspect web fonts by just hovering on them. it's that straightforward and stylish .&lt;/p&gt;

&lt;p&gt;It also detects the services used for serving the online fonts. Supports Typekit and Google Font API.&lt;/p&gt;

&lt;p&gt;To embrace the new web font era, WhatFont also detects services used for serving the font. Now supports Typekit and Google Font API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ruul-screen-ruler"&gt;
  &lt;/a&gt;
  ruul. Screen ruler
&lt;/h1&gt;

&lt;p&gt;A fantastically simple on-screen ruler for lining up and measuring type, line height, strokes and almost anything on the online .&lt;/p&gt;

&lt;p&gt;Get pixel perfect with: horizontal and vertical draggable rulers; pixel, picas and sort measurements, line height guides and stroke widths. Move ruul with arrow keys, one pixel at a time, and use multiple ruul together. Ruul have 4 different coloured ruul, steel and wooden ruul included.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#screen-capture-by-google"&gt;
  &lt;/a&gt;
  Screen Capture By Google
&lt;/h1&gt;

&lt;p&gt;Capture visible content of a tab, a neighborhood of an internet page, or the entire page as a PNG image. Support horizontal and vertical scroll‚Ä¶&lt;/p&gt;

&lt;p&gt;It's easy to use this extension to capture visible content of a tab, a neighborhood of an internet page, or the entire page as a PNG image.&lt;/p&gt;

&lt;p&gt;You can also edit your captured image before saving it as a PNG image. Highlighting, redacting and adding text are supported.&lt;/p&gt;

&lt;p&gt;What set this extension apart are: Super fast when capturing page image, esp. for giant pages; Support horizontal scroll for giant pages that don't slot in one tab screen horizontally; Intelligently detect floating objects on a page and avoid repeating capture of an equivalent floating objects if whole page capture requires scrolling; Works on Windows, Linux and Mac&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#image-downloader"&gt;
  &lt;/a&gt;
  Image Downloader
&lt;/h1&gt;

&lt;p&gt;See all images shown or linked on an internet page and download them.&lt;/p&gt;

&lt;p&gt;If you would like to bulk download images from an internet page, with this extension you can: See images that the page contains and links to, Filter or sort them by URL; also supports wildcards and regular expressions, Optionally show only images from links, Select images for download by either using the checkboxes or directly clicking on the image, Dedicated buttons to download or open in new tab individual images, Customize display width, border size, style and color, Hide filters, buttons and notifications you do not need&lt;/p&gt;

&lt;p&gt;When you press the "Download" button, all selected images are saved to the default download directory of Chrome. If you do not have one, you'll need to manually choose the save location for every image.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#evernote-web-clipper"&gt;
  &lt;/a&gt;
  Evernote Web Clipper
&lt;/h1&gt;

&lt;p&gt;Save all the content you discover interesting round the web in your account.&lt;/p&gt;

&lt;p&gt;From interests to research, save anything you see online‚Äîincluding text, links and images‚Äîinto your Evernote account with one click. With one click, clip part or all of any webpage, including text, images, and links. Collect everything that inspires you online. Have it forever, albeit the first goes away.&lt;/p&gt;

&lt;p&gt;RescueTime for Google Chrome‚Ñ¢&lt;/p&gt;

&lt;p&gt;RescueTime may be a personal-analytics service that helps you understand how you spend some time .&lt;/p&gt;

&lt;p&gt;RescueTime may be a personal-analytics service that helps you understand how you spend time on your computer, smartphone and tablet. there's no manual data-entry required. The web-application works hand-in-hand with the installable client available for OS X, Windows, Linux, Android devices, and ChromeOS.&lt;/p&gt;

&lt;p&gt;Pinterest for Google Chrome&lt;/p&gt;

&lt;p&gt;Discover, collect, and share inspiration&lt;/p&gt;

&lt;p&gt;Pinterest may be a tool to seek out your inspiration and share it with others. Use it to gather belongings you love, organize and plan important projects, and more.&lt;/p&gt;

&lt;p&gt;The official Pinterest extension for Google Chrome adds a button to your browser that allows you to pin from any website, quickly and simply&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Get Some From HERE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>What are your favourite learning resources?</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Sat, 24 Apr 2021 06:24:26 +0000</pubDate>
      <link>https://dev.to/basecampxd/what-are-your-favourite-learning-resources-3mgk</link>
      <guid>https://dev.to/basecampxd/what-are-your-favourite-learning-resources-3mgk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Every day we come across a lot of new &amp;amp; amazing things, some technical and some not. And if we find something which matches our vibe then we dive deep into it. Now here the real problem starts, if something is very popular then definitely there are a lot of resources out there to learn it but out of all those resources, which ones worth your precious time?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11xy3zUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rtdj2p9yhu7gv3ujmok.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11xy3zUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rtdj2p9yhu7gv3ujmok.gif" alt="2Confused"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we created this blog post to help you share all your favourite learning resources. It could be anything, a platform, some software, an app, a website or any of your favourite creators out there.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-way"&gt;
  &lt;/a&gt;
  My Way
&lt;/h2&gt;

&lt;p&gt;This is the specific sequence, I usually like to follow to learn new stuff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I read blogs on the topic - An introduction, its uses, problems it overcomes, pros &amp;amp; cons. I usually do a google search to find these blogs üìù.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the topic seems interesting, then I have a look on &lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;freeCodeCamp&lt;/a&gt;'s YouTube Channel to see if there's a course available on the topic I am interested in üë®‚Äçüíª.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If freeCodeCamp doesn't have a course on it or it seems to be outdated then I look for another good course on YouTube‚ñ∂Ô∏è.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; is also a great place to find some really cool coursesüè´.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That's pretty much how I like to find learning resources for myself üìö.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#discussion"&gt;
  &lt;/a&gt;
  Discussion
&lt;/h1&gt;

&lt;p&gt;Let's start the discussion on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are your favourite resources to learn something new?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you utilize those resources to make the most of them?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Laravel One to Many Eloquent Relationship Tutorial</title>
      <author>Dharmik Tank</author>
      <pubDate>Sat, 24 Apr 2021 06:03:58 +0000</pubDate>
      <link>https://dev.to/dharmik_tank/laravel-one-to-many-eloquent-relationship-tutorial-4i0j</link>
      <guid>https://dev.to/dharmik_tank/laravel-one-to-many-eloquent-relationship-tutorial-4i0j</guid>
      <description>&lt;p&gt;In this tutorial, I Will explain you how to create laravel one to Many eloquent relationship. We will create one to many relationship in laravel. We will learn how we can create migration with foreign key schema, retrieve records, insert new records, update records etc. I will show you laravel hasMany relationship example.&lt;br&gt;
more..&lt;br&gt;
&lt;a href="https://itwebtuts.blogspot.com/2021/04/laravel-one-to-many-eloquent.html"&gt;https://itwebtuts.blogspot.com/2021/04/laravel-one-to-many-eloquent.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
    <item>
      <title>Free APIs That Nobody Is Talking About</title>
      <author>Animesh Dhamku</author>
      <pubDate>Sat, 24 Apr 2021 05:53:01 +0000</pubDate>
      <link>https://dev.to/animeshdhamku/free-apis-that-nobody-is-talking-about-5777</link>
      <guid>https://dev.to/animeshdhamku/free-apis-that-nobody-is-talking-about-5777</guid>
      <description>&lt;p&gt;Nothing excites me more than finding an out of the ordinary API.Many times we just want to focus on the frontend but also need interesting, dynamic data to display.This is where public APIs come into play. API is an acronym for Application Programming Interface.The core benefit of using it is that it allows one program to interact with other programs.Using public APIs allows you to focus on the frontend and things that matter without worrying so much about the database and the backend.Below are 7 less-talked about public and free APIs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-evil-insult-generator"&gt;
  &lt;/a&gt;
  1. Evil Insult Generator
&lt;/h1&gt;

&lt;p&gt;How many times have you tried to insult your best friend? Now you have got a helping hand!&lt;/p&gt;

&lt;p&gt;As the API name suggests, the goal is to offer some of the evilest insults.&lt;/p&gt;

&lt;p&gt;You can create an app centered around this API or combine this API with other excellent APIs provided below like implementing the generated insults in meme templates.&lt;/p&gt;

&lt;p&gt;The API is extremely simple to use. You just need to visit a URL and you get the desired JSON output without even signing up for a key.&lt;/p&gt;

&lt;p&gt;Sample output of the API is provided below:&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
"number":"117",&lt;br&gt;
"language":"en",&lt;br&gt;
"insult":"Some cause happiness wherever they go; others, whenever they go.",&lt;br&gt;
"created":"2020-11-22 23:00:15",&lt;br&gt;
"shown":"45712",&lt;br&gt;
"createdby":"",&lt;br&gt;
"active":"1",&lt;br&gt;
"comment":"http:\/\/&lt;a href="http://www.mirror.co.uk%5C/news%5C/weird-news%5C/worlds-20-most-bizarre-insults-7171396"&gt;www.mirror.co.uk\/news\/weird-news\/worlds-20-most-bizarre-insults-7171396&lt;/a&gt;"&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;You get the other properties as well such as the time it was created, the language, any comment as well as the views. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-movies-and-tv-api"&gt;
  &lt;/a&gt;
  2. Movies and TV API
&lt;/h1&gt;

&lt;p&gt;TMDb is a famous API, but do you know there are other API that provides insights from specific shows and movies?&lt;/p&gt;

&lt;p&gt;Below are some of the APIs you can use to develop apps featuring your favorite show:&lt;br&gt;
Breaking Bad API&lt;br&gt;
API of Ice And Fire &lt;br&gt;
Harry Potter API&lt;br&gt;
YouTube API (for embedding YouTube functionalities)&lt;br&gt;
The Lord of the Rings API&lt;br&gt;&lt;br&gt;
Like the API above, you can get started with some of the APIs without even signing up for a key.&lt;/p&gt;

&lt;p&gt;Not only this, using non-copyright images, you can truly create a great fan app for your beloved shows.&lt;/p&gt;

&lt;p&gt;Below is a sample output from the Breaking Bad API which you can get here.&lt;/p&gt;

&lt;p&gt;It doesn‚Äôt require a key however has a rate limit of 10,000 requests per day.&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
   [&lt;br&gt;
      {&lt;br&gt;
         "quote_id":1,&lt;br&gt;
         "quote":"I am not in danger, Skyler. I am the danger!",&lt;br&gt;
         "author":"Walter White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      },&lt;br&gt;
      {&lt;br&gt;
         "quote_id":2,&lt;br&gt;
         "quote":"Stay out of my territory.",&lt;br&gt;
         "author":"Walter White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      },&lt;br&gt;
      {&lt;br&gt;
         "quote_id":3,&lt;br&gt;
         "quote":"IFT",&lt;br&gt;
         "author":"Skyler White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      }&lt;br&gt;
      .....&lt;br&gt;
   ]&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;It returns a JSON containing an array of objects with quotes, the author of the quotes, and an ID.&lt;/p&gt;

&lt;p&gt;You can mix these dedicated APIs with YouTube API to create an ultimate app for the fans of these shows.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-mapbox"&gt;
  &lt;/a&gt;
  3. Mapbox
&lt;/h1&gt;

&lt;p&gt;Mapbox provides precise location information and fully-fledged tools to developers.&lt;/p&gt;

&lt;p&gt;You get instant access to dynamic, live-updating maps which you can even further customize!&lt;/p&gt;

&lt;p&gt;If you have a project geared towards location and maps, this is a must-know API.&lt;/p&gt;

&lt;p&gt;However, it is worth mentioning that you have to sign up for free to get a unique access token.&lt;/p&gt;

&lt;p&gt;Using this token you can use the amazing services offered by this API.&lt;/p&gt;

&lt;p&gt;Not only this, you can use Mapbox with libraries such as the Leaflet.js library and create beautiful, mobile-friendly maps.&lt;/p&gt;

&lt;p&gt;I have discussed this and much more in my recent article covering the basics of Mapbox and Leaflet.js.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-nasa-api"&gt;
  &lt;/a&gt;
  4. NASA API
&lt;/h1&gt;

&lt;p&gt;NASA provides a fabulous updated database of space-related information.&lt;/p&gt;

&lt;p&gt;Using this API, one can create mesmerizing and educational apps and websites.&lt;/p&gt;

&lt;p&gt;You get access to various different kinds of data from the Astronomy Picture of the Day all the way to the pictures captured by the Mars Rover.&lt;/p&gt;

&lt;p&gt;You can browse the entire list here.&lt;/p&gt;

&lt;p&gt;You can also retrieve NASA‚Äôs patents, software, and technology spinoff descriptions which you can use to build a patent portfolio.&lt;/p&gt;

&lt;p&gt;This API is really diverse and offers a wide variety of data. You can even access the NASA Image and Video library using it.&lt;/p&gt;

&lt;p&gt;Below is a sample query of the pictures captured by Curiosity on Mars.&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
   "photos":[&lt;br&gt;
      {&lt;br&gt;
         "id":102693,&lt;br&gt;
         "sol":1000,&lt;br&gt;
         "camera":{&lt;br&gt;
            "id":20,&lt;br&gt;
            "name":"FHAZ",&lt;br&gt;
            "rover_id":5,&lt;br&gt;
            "full_name":"Front Hazard Avoidance Camera"&lt;br&gt;
         },&lt;br&gt;
         "img_src":"&lt;a href="http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FLB_486265257EDR_F0481570FHAZ00323M_.JPG"&gt;http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FLB_486265257EDR_F0481570FHAZ00323M_.JPG&lt;/a&gt;",&lt;br&gt;
         "earth_date":"2015-05-30",&lt;br&gt;
         "rover":{&lt;br&gt;
            "id":5,&lt;br&gt;
            "name":"Curiosity",&lt;br&gt;
            "landing_date":"2012-08-06",&lt;br&gt;
            "launch_date":"2011-11-26",&lt;br&gt;
            "status":"active"&lt;br&gt;
         }&lt;br&gt;
      },&lt;br&gt;
     .....&lt;br&gt;
   ]&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/7-free-apis-that-nobody-is-talking-about.html"&gt;Get some more APIs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>php</category>
      <category>design</category>
    </item>
    <item>
      <title>Dissecting the PE Header [Windows PE Internals]</title>
      <author>wireless90</author>
      <pubDate>Sat, 24 Apr 2021 05:37:00 +0000</pubDate>
      <link>https://dev.to/wireless90/dissecting-the-pe-header-windows-pe-internals-5113</link>
      <guid>https://dev.to/wireless90/dissecting-the-pe-header-windows-pe-internals-5113</guid>
      <description>&lt;h1&gt;
  &lt;a href="#previous-windows-pe-internals-writeups"&gt;
  &lt;/a&gt;
  Previous Windows PE Internals Writeups
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/wireless90/creating-a-windows-project-in-visual-studio-windows-pe-internals-2p6e"&gt;Creating a Windows Project in Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/wireless90/getmodulehandlea-windows-pe-internals-1b0l"&gt;Getting a Handle to a Dynamically Linked Library &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/wireless90/getting-the-windows-pe-internals-kka/"&gt;Validating the MZ Signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/wireless90/validating-the-pe-signature-my-av-flagged-me-windows-pe-internals-2m5o/"&gt;Validating the PE Signature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#previously"&gt;
  &lt;/a&gt;
  Previously
&lt;/h1&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/wireless90/validating-the-pe-signature-my-av-flagged-me-windows-pe-internals-2m5o/"&gt;previous article&lt;/a&gt;, we learnt about how do we validate the &lt;code&gt;PE Signature&lt;/code&gt;, also commonly referred to as the &lt;code&gt;File Signature&lt;/code&gt;, which tells us that the file is very likely, a &lt;code&gt;Portable Executable (PE) file.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This signature is &lt;code&gt;PE\0\0&lt;/code&gt; (the letters "P" and "E" followed by two null bytes).&lt;/p&gt;

&lt;p&gt;We have also seen how to navigate our way from the &lt;code&gt;IMAGE_DOS_HEADER&lt;/code&gt; into the &lt;code&gt;IMAGE_NT_HEADER&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We also saw that the &lt;code&gt;IMAGE_NT_HEADER&lt;/code&gt; comprises of 3 parts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PE Signature&lt;/li&gt;
&lt;li&gt;PE Header&lt;/li&gt;
&lt;li&gt;Optional Header&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be dissecting the &lt;code&gt;PE Header&lt;/code&gt; in this article.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's Begin
&lt;/h1&gt;

&lt;p&gt;Following the PE Signature, we have the PE Header.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYz5MmRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23a3ajgmhf06kfe4woca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYz5MmRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23a3ajgmhf06kfe4woca.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the &lt;code&gt;PE Header&lt;/code&gt; is one of the subsection of the &lt;code&gt;IMAGE_NT_HEADER&lt;/code&gt;, we can easily retrieve as such.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;PIMAGE_FILE_HEADER&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;imageNtHeaders&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;FileHeader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking a deeper look into the PE Header, we have the following sections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9bKYfjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co9vygr5af9b4p3eizz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9bKYfjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co9vygr5af9b4p3eizz4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In visual studio, we can see the matching fields as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YbqvZB1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ynajhel0t14dpzmthmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YbqvZB1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ynajhel0t14dpzmthmn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-some-code-to-visualize-these-information"&gt;
  &lt;/a&gt;
  Let's write some code to visualize these information
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;wsprintfA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Number of Symbols: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;NumberOfSymbols&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wsprintfA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Pointer to Symbol Table: 0x%02X&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;PointerToSymbolTable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wsprintfA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Number of Sections: %hd&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;NumberOfSections&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wsprintfA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"TimeDateStamp: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;TimeDateStamp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wsprintfA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Size of Optional Header: %hd&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;SizeOfOptionalHeader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wsprintfA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Machine: 0x%02X&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Machine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;wsprintfA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Characteristix: 0x%02X&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageFileHeader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Characteristics&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;MessageBoxA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PE Header"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MB_OK&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MB_ICONINFORMATION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the result is,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUdYzSeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul9ii6f03z1cmjz1ay0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUdYzSeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul9ii6f03z1cmjz1ay0b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#number-of-symbols"&gt;
  &lt;/a&gt;
  Number of Symbols
&lt;/h2&gt;

&lt;p&gt;This is deprecated and should contain 0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pointer-to-symbol-table"&gt;
  &lt;/a&gt;
  Pointer to symbol table
&lt;/h2&gt;

&lt;p&gt;This is also deprecated and should contain 0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#number-of-sections"&gt;
  &lt;/a&gt;
  Number of sections
&lt;/h2&gt;

&lt;p&gt;Sections will be covered in another article. This field basically stores the number of sections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timedatestamp"&gt;
  &lt;/a&gt;
  TimeDateStamp
&lt;/h2&gt;

&lt;p&gt;The number of seconds that has passed from epoch since the file creation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#size-of-optional-headers"&gt;
  &lt;/a&gt;
  Size of Optional Headers
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Optional Header&lt;/code&gt; comes after the &lt;code&gt;PE Header&lt;/code&gt;. We will discuss it in other articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#machine"&gt;
  &lt;/a&gt;
  Machine
&lt;/h2&gt;

&lt;p&gt;The number that identifies the type of target machine that this executable was compiled for.&lt;/p&gt;

&lt;p&gt;Looking into &lt;code&gt;winnt.h&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#define IMAGE_FILE_MACHINE_I386              0x014c  // Intel 386.
&lt;/span&gt;&lt;span class="c1"&gt;// omitted&lt;/span&gt;
&lt;span class="cp"&gt;#define IMAGE_FILE_MACHINE_AMD64             0x8664  // AMD64 (K8)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visual studio always runs in a 32bit emulator while debugging even though I am using a 64 bit machine. Thus it shows as &lt;code&gt;0x014c&lt;/code&gt; which is a &lt;code&gt;32 bit&lt;/code&gt; executable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#characteristics"&gt;
  &lt;/a&gt;
  Characteristics
&lt;/h1&gt;

&lt;p&gt;We can use tools like &lt;code&gt;CFF Explorer&lt;/code&gt; to understand this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80KRRI1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeyhpoe1ehscm789gse1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80KRRI1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeyhpoe1ehscm789gse1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As expected, all of these macros can be found in &lt;code&gt;winnt.h&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#define IMAGE_FILE_RELOCS_STRIPPED           0x0001  // Relocation info stripped from file.
#define IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  // File is executable  (i.e. no unresolved external references).
#define IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  // Line nunbers stripped from file.
#define IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  // Local symbols stripped from file.
#define IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  // Aggressively trim working set
#define IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  // App can handle &amp;gt;2gb addresses
#define IMAGE_FILE_BYTES_REVERSED_LO         0x0080  // Bytes of machine word are reversed.
#define IMAGE_FILE_32BIT_MACHINE             0x0100  // 32 bit word machine.
#define IMAGE_FILE_DEBUG_STRIPPED            0x0200  // Debugging info stripped from file in .DBG file
#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  // If Image is on removable media, copy and run from the swap file.
#define IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  // If Image is on Net, copy and run from the swap file.
#define IMAGE_FILE_SYSTEM                    0x1000  // System File.
#define IMAGE_FILE_DLL                       0x2000  // File is a DLL.
#define IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  // File should only be run on a UP machine
#define IMAGE_FILE_BYTES_REVERSED_HI         0x8000  // Bytes of machine word are reversed.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this article, we have understood the meaning behind each field in the PE Header.&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>A simple way to use Web Worker with React-Create-APP - No eject needed</title>
      <author>AnxinYang</author>
      <pubDate>Sat, 24 Apr 2021 05:24:54 +0000</pubDate>
      <link>https://dev.to/anxinyang/a-simple-way-to-use-web-worker-with-react-create-app-no-eject-needed-1c08</link>
      <guid>https://dev.to/anxinyang/a-simple-way-to-use-web-worker-with-react-create-app-no-eject-needed-1c08</guid>
      <description>&lt;p&gt;The problem of using Web Worker with an app that start with create-react-app is that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create-react-app hide its webpack config from user to modify, if not ejected.&lt;/li&gt;
&lt;li&gt;You need to modify webpack config in order to emit worker file.&lt;/li&gt;
&lt;li&gt;If ejected, the webpack.config is overwhelming and hard to modify.&lt;/li&gt;
&lt;li&gt;worker-loader is not very typescript-friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#a-solution"&gt;
  &lt;/a&gt;
  A Solution
&lt;/h3&gt;

&lt;p&gt;We can generator worker.js by running another webpack thread that only take care worker files. Here are what we need to do:&lt;/p&gt;

&lt;p&gt;If you haven't install &lt;code&gt;webpack-cli&lt;/code&gt;, you need to install it.&lt;/p&gt;

&lt;p&gt;I'm using typescript, so let's install the &lt;code&gt;ts-loader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, add a webpack.config.js file at project root like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// output worker.js to public folder&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tsLoader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ts-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;compilerOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;esnext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;noEmit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webworker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//Importan! Use webworker target&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/worker.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;worker.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node_modules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefinePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;process.env.NODE_ENV&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;ts&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tsLoader&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, we need to change the following config:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change &lt;code&gt;output&lt;/code&gt; to &lt;code&gt;./public&lt;/code&gt; folder so react-scripts can use it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;target&lt;/code&gt; needs to be &lt;code&gt;webworker&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;compilerOptions: {..., noEmit: false, ...}&lt;/code&gt; to &lt;code&gt;ts-loader&lt;/code&gt; options. This will overwrite the &lt;code&gt;noEmit:true&lt;/code&gt; in the &lt;code&gt;tsconfig.json&lt;/code&gt; that created by create-react-app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then, add a npm script to package.json and run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"worker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack --watch"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, in you app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;worker.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, start your react app and enjoy your worker.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  PS:
&lt;/h4&gt;

&lt;p&gt;I know this solution is not the best one, if you have any other suggestion, please leave a comment and let me know. Thanks!&lt;/p&gt;

</description>
      <category>react</category>
      <category>worker</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 178</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 24 Apr 2021 05:19:10 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-178-1bna</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-178-1bna</guid>
      <description>&lt;p&gt;üëã Emberistas! üêπ&lt;/p&gt;

&lt;p&gt;Find out about the Ember 3.26 release, updated release of Unstable Ember Language Server, and addon roundup.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-326-released"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.emberjs.com/ember-3-26-released"&gt;Ember 3.26 released ü•≥&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.emberjs.com/ember-3-26-released"&gt;Ember 3.26 release was announced&lt;/a&gt; on April 12, 2021. The release patched a few bug fixes in &lt;code&gt;ember-source&lt;/code&gt; and &lt;code&gt;ember-cli&lt;/code&gt;. It also introduced several deprecations in &lt;code&gt;ember-source&lt;/code&gt; in preparation of the &lt;strong&gt;upcoming Ember 4.0 release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We encourage you to make time to address deprecated patterns in your apps and addons. The &lt;a href="https://deprecations.emberjs.com/"&gt;Deprecations Guide&lt;/a&gt; provides examples of how you might update your code.&lt;/p&gt;

&lt;p&gt;Here are 3 quick tips for what you can do for Ember 3.26:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To make a route transition in a controller or route, inject the &lt;code&gt;router&lt;/code&gt; service and use its &lt;code&gt;transitionTo&lt;/code&gt; or &lt;code&gt;replaceWith&lt;/code&gt; method. You can check the &lt;a href="https://api.emberjs.com/ember/release/classes/RouterService"&gt;API Guides&lt;/a&gt; to learn more about the &lt;code&gt;router&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;For new code, using the &lt;code&gt;router&lt;/code&gt; service shouldn't cause an issue. When you update existing code, however, your app may behave differently when the route transition occurs. Before any update, write tests that cover the intended behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you invoke the &lt;code&gt;&amp;lt;LinkTo&amp;gt;&lt;/code&gt; component with angle brackets, use named arguments to improve code readability. The arguments include &lt;code&gt;@route&lt;/code&gt;, &lt;code&gt;@model&lt;/code&gt;, &lt;code&gt;@models&lt;/code&gt;, and &lt;code&gt;@query&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use Ember Data in a controller or route, inject the &lt;code&gt;store&lt;/code&gt; service.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Need help with upgrading your app? You can ask questions in the &lt;a href="https://discuss.emberjs.com/"&gt;Ember Discussion Form&lt;/a&gt; or the &lt;code&gt;#help&lt;/code&gt; channel on &lt;a href="https://discord.gg/emberjs"&gt;Ember Discord&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#updated-release-of-unstable-ember-language-server"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-ember-unstable"&gt;Updated release of Unstable Ember Language Server ‚ú®&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A new version of &lt;a href="https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-ember-unstable"&gt;Unstable Ember Language Server&lt;/a&gt; has been published thanks to &lt;a href="https://github.com/suchitadoshi1987"&gt;Suchita Doshi (@suchitadoshi1987)&lt;/a&gt; and &lt;a href="https://github.com/lifeart"&gt;Alex Kanunnikov (@lifeart)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Unstable Ember Language Server is a VSCode extension that provides VSCode users features like auto complete, goto definition and diagnostics for Ember projects. While the name contains the word ‚Äúunstable,‚Äù it is very &lt;strong&gt;stable&lt;/strong&gt; and is actually a fork of the &lt;a href="https://github.com/ember-tooling/ember-language-server"&gt;original Ember Language Server project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This recent release adds &lt;a href="https://github.com/rwjblue/ember-holy-futuristic-template-namespacing-batman"&gt;batman syntax&lt;/a&gt; support (namespaces) to &lt;a href="https://marketplace.visualstudio.com/items?itemName=lifeart.vscode-ember-unstable"&gt;Unstable Ember Language Server&lt;/a&gt; so try it out today on your VSCode!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#addon-roundup"&gt;
  &lt;/a&gt;
  Addon roundup üôå
&lt;/h2&gt;

&lt;p&gt;We wanted to highlight some recent happenings around the web! Check them out and give them a try! üòé&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you want to use OAuth in your Ember app? &lt;a href="https://github.com/sinankeskin"&gt;Sinan Keskin (@sinankeskin)&lt;/a&gt; wrote a new addon, &lt;a href="https://github.com/sinankeskin/ember-oauther"&gt;ember-oauther&lt;/a&gt;, which allows you to sign in and register a user with OAuth easily! OAuth is an open standard for &lt;strong&gt;access delegation&lt;/strong&gt;, commonly used to help a user register or log in to a web app via their login for Facebook, Google, Microsoft, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/elwayman02/ember-resize-modifier"&gt;ember-resize-monitor&lt;/a&gt; provides a &lt;a href="https://ember-resize-modifier.jhawk.co/modifiers/did-resize/"&gt;did-resize&lt;/a&gt; modifier for detecting &lt;strong&gt;resize events&lt;/strong&gt; on the element or component it's attached to. These events could include window resizing CSS changes, content updates, and more. &lt;a href="https://github.com/elwayman02"&gt;Jordan Hawker (@elwayman02)&lt;/a&gt; published a v0.2.0 and gave a shoutout to &lt;a href="https://github.com/xjmdoo"&gt;Tamas Sule (@xjmdoo)&lt;/a&gt; for improving the addon's performance by 10x!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ember-a11y/ember-a11y-testing"&gt;ember-a11y-testing&lt;/a&gt; v4.0.4 is here! ember-a11y-testing is a wrapper around Deque Labs' &lt;a href="https://github.com/dequelabs/axe-core"&gt;axe-core&lt;/a&gt; &lt;strong&gt;accessibility testing engine&lt;/strong&gt;. The addon can be integrated in your testing environment either as a one-time setup, or in individual tests using an &lt;code&gt;a11yAudit()&lt;/code&gt; test helper. Raise your Lighthouse score &lt;em&gt;and&lt;/em&gt; improve the web at the same time! Thank you to the team that made this happen, including these recent contributors: &lt;a href="https://github.com/drewlee"&gt;Andrew A Lee (@drewlee)&lt;/a&gt;, &lt;a href="https://github.com/danwenzel"&gt;Dan Wenzel (@danwenzel)&lt;/a&gt;, &lt;a href="https://github.com/MelSumner"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt;, &lt;a href="https://github.com/scalvert"&gt;Steve Calvert (@scalvert)&lt;/a&gt;, &lt;a href="https://github.com/rwjblue"&gt;Robert Jackson (@rwjblue)&lt;/a&gt;, &lt;a href="https://github.com/thoov"&gt;Travis Hoover (@thoov)&lt;/a&gt;, and &lt;a href="https://github.com/zelaznik"&gt;
Steve Zelaznik (@zelaznik)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/suchitadoshi1987/els-addon-import-specifiers"&gt;Suchita Doshi (@suchitadoshi1987)&lt;/a&gt; published a new experimental language server addon, &lt;a href="https://github.com/suchitadoshi1987/els-addon-import-specifiers"&gt;els-addon-import-specifiers&lt;/a&gt;, that jumps to &lt;strong&gt;the line&lt;/strong&gt; of an import directly, instead of the parent file. Nice!&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;Contributors' corner üëè&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/hannakim91" rel="noopener noreferrer"&gt;Hanna (@hannakim91)&lt;/a&gt;, &lt;a href="https://github.com/btecu" rel="noopener noreferrer"&gt;Bj Tecu (@btecu)&lt;/a&gt;, &lt;a href="https://github.com/pzuraq" rel="noopener noreferrer"&gt;Chris Garrett (@pzuraq)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/rinoldsimon" rel="noopener noreferrer"&gt;Rinold Simon (@rinoldsimon)&lt;/a&gt;, &lt;a href="https://github.com/brendenpalmer" rel="noopener noreferrer"&gt;Brenden Palmer (@brendenpalmer)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/igorT" rel="noopener noreferrer"&gt;Igor Terzic (@igorT)&lt;/a&gt;, &lt;a href="https://github.com/esquith" rel="noopener noreferrer"&gt;Esquith Allen (@esquith)&lt;/a&gt;, &lt;a href="https://github.com/rajasegar" rel="noopener noreferrer"&gt;Rajasegar Chandran (@rajasegar)&lt;/a&gt;, &lt;a href="https://github.com/patocallaghan" rel="noopener noreferrer"&gt;Pat O'Callaghan (@patocallaghan)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/stephencweiss" rel="noopener noreferrer"&gt;Stephen Weiss (@stephencweiss)&lt;/a&gt;, &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt;, &lt;a href="https://github.com/nickschot" rel="noopener noreferrer"&gt;Nick Schot (@nickschot)&lt;/a&gt;, &lt;a href="https://github.com/wagenet" rel="noopener noreferrer"&gt;Peter Wagenet (@wagenet)&lt;/a&gt;, &lt;a href="https://github.com/kategengler" rel="noopener noreferrer"&gt;Katie Gengler (@kategengler)&lt;/a&gt;, &lt;a href="https://github.com/lin-ll" rel="noopener noreferrer"&gt;Lucy Lin (@lin-ll)&lt;/a&gt;, &lt;a href="https://github.com/gilest" rel="noopener noreferrer"&gt;Giles Thompson (@gilest)&lt;/a&gt;, &lt;a href="https://github.com/jayjayjpg" rel="noopener noreferrer"&gt;Jesse Jordan (@jayjayjpg)&lt;/a&gt;, &lt;a href="https://github.com/bmish" rel="noopener noreferrer"&gt;Bryan Mishkin (@bmish)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/afzal273" rel="noopener noreferrer"&gt;Afzal Syed (@afzal273)&lt;/a&gt;, &lt;a href="https://github.com/davecombs" rel="noopener noreferrer"&gt;Dave Combs (@davecombs)&lt;/a&gt;, &lt;a href="https://github.com/chancancode" rel="noopener noreferrer"&gt;Godfrey Chan (@chancancode)&lt;/a&gt;, &lt;a href="https://github.com/runspired" rel="noopener noreferrer"&gt;Chris Thoburn (@runspired)&lt;/a&gt;, &lt;a href="https://github.com/josemarluedke" rel="noopener noreferrer"&gt;Josemar Luedke (@josemarluedke)&lt;/a&gt;, &lt;a href="https://github.com/tylerbecks" rel="noopener noreferrer"&gt;Tyler Becks (@tylerbecks)&lt;/a&gt;, &lt;a href="https://github.com/raido" rel="noopener noreferrer"&gt;Raido Kuli (@raido)&lt;/a&gt;, &lt;a href="https://github.com/jaredgalanis" rel="noopener noreferrer"&gt;Jared Galanis (@jaredgalanis)&lt;/a&gt;, &lt;a href="https://github.com/spham92" rel="noopener noreferrer"&gt;Steven Pham (@spham92)&lt;/a&gt;, and &lt;a href="https://github.com/broxsonl" rel="noopener noreferrer"&gt;Lee Broxson (@broxsonl)&lt;/a&gt; for their contributions to Ember and related repositories! üíñ&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;Connect with us ü§ì&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tBKSG3RO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc902n4lecfay7emq8gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tBKSG3RO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc902n4lecfay7emq8gq.png" alt="Office hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers‚Äô Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don‚Äôt worry, there are no silly questions, we appreciate them all - promise! ü§û&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ‚ú®&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Amy Lam, Isaac Lee, Chris Ng, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Sasuke-MS</title>
      <author>Abhimanyu</author>
      <pubDate>Sat, 24 Apr 2021 04:22:40 +0000</pubDate>
      <link>https://dev.to/a12baghel2/sasuke-ms-2269</link>
      <guid>https://dev.to/a12baghel2/sasuke-ms-2269</guid>
      <description>&lt;h2&gt;
  &lt;a href="#this-time-sasukes-mangekyou-sharingan"&gt;
  &lt;/a&gt;
  This time sasuke's mangekyou sharingan.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/a12baghel2/embed/MWJLWbp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>JavaScript Data Structures and Algorithms (Trees, part 1)</title>
      <author>Oscar Luna</author>
      <pubDate>Sat, 24 Apr 2021 03:35:23 +0000</pubDate>
      <link>https://dev.to/oaluna/javascript-data-structures-and-algorithms-trees-part-1-2flm</link>
      <guid>https://dev.to/oaluna/javascript-data-structures-and-algorithms-trees-part-1-2flm</guid>
      <description>&lt;p&gt;Hello! In this 5th post about JavaScript data structures and algorithms I will be discussing trees and how we run insert, append, prepend, traverse, and delete operations for then. ...&lt;/p&gt;

&lt;p&gt;Trees are data structures that consist of a parent node, and two child nodes, referred to as the left child and right child, respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>datastructures</category>
    </item>
    <item>
      <title>Red Wine Quality prediction using AzureML, AKS with TensorFlow Keras</title>
      <author>Ambarish Ganguly</author>
      <pubDate>Sat, 24 Apr 2021 02:46:51 +0000</pubDate>
      <link>https://dev.to/ambarishg/red-wine-quality-prediction-using-azureml-aks-with-tensorflow-keras-mnn</link>
      <guid>https://dev.to/ambarishg/red-wine-quality-prediction-using-azureml-aks-with-tensorflow-keras-mnn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-we-trying-to-do"&gt;
  &lt;/a&gt;
  What are we trying to do
&lt;/h1&gt;

&lt;p&gt;Predict the Quality of Red Wine using &lt;strong&gt;Tensorflow Keras deep learning framework&lt;/strong&gt; given certain attributes such as fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, and alcohol&lt;/p&gt;

&lt;p&gt;We divide our approach into &lt;strong&gt;2 major blocks&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Building the Model in Azure ML
&lt;/li&gt;
&lt;li&gt;Inference from the Model in Azure ML
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Building the model in Azure ML&lt;/strong&gt; has the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the Azure ML workspace
&lt;/li&gt;
&lt;li&gt;Upload data into the Azure ML Workspace
&lt;/li&gt;
&lt;li&gt;Create the code folder
&lt;/li&gt;
&lt;li&gt;Create the Compute Cluster
&lt;/li&gt;
&lt;li&gt;Create the Model
&lt;/li&gt;
&lt;li&gt;Create the Compute Environment &lt;/li&gt;
&lt;li&gt;Create the Estimator &lt;/li&gt;
&lt;li&gt;Create the Experiment and Run&lt;/li&gt;
&lt;li&gt;Register the Model
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Inferencing from the model&lt;/strong&gt; in Azure ML has the following steps:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the Inference Script&lt;/li&gt;
&lt;li&gt;Create the Inference Dependencies&lt;/li&gt;
&lt;li&gt;Create the Inference Config&lt;/li&gt;
&lt;li&gt;Create the Inference Clusters
&lt;/li&gt;
&lt;li&gt;Deploy the Model in the Inference Cluster
&lt;/li&gt;
&lt;li&gt;Get the predictions
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please read the other post &lt;a href="https://dev.to/ambarishg/azure-ml-aks-and-a-bit-of-mlops-2gj7"&gt;Red Wine Quality prediction using AzureML, AKS&lt;/a&gt;. This was done using machine learning techniques and not using deep learning. The same thing is accomplished here but using the deep learning framework Keras. Most of the things remain the same compared to the machine learning method, but a few steps change. I am going to highlight the changed aspects here only so that it is easy to follow.        &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Change / No Change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create the Azure ML workspace&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Upload data into the Azure ML   Workspace&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the code folder&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Compute Cluster&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Model&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Compute Environment&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Estimator&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Experiment and Run&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Register the Model&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#create-the-model"&gt;
  &lt;/a&gt;
  Create the Model
&lt;/h1&gt;

&lt;p&gt;The model that we create here makes use of a &lt;code&gt;repeatable block&lt;/code&gt; made up of&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dense Layer&lt;/li&gt;
&lt;li&gt;Dropout&lt;/li&gt;
&lt;li&gt;BatchNormalization
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last layer is a Dense layer of a single neuron.   &lt;/p&gt;

&lt;p&gt;This block is repeated &lt;code&gt;3&lt;/code&gt; times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;writefile&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folder_training_script&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Run&lt;/span&gt;
&lt;span class="c1"&gt;# from utils import load_data
&lt;/span&gt;
&lt;span class="c1"&gt;# let user feed in 2 parameters, the dataset to mount or download, and the regularization rate of the logistic regression model
&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'--data-folder'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'data_folder'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'data folder mounting point'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;###
&lt;/span&gt;&lt;span class="n"&gt;data_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'winedata'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Data folder:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;red_wine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_folder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'winequality_red.csv'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow.keras&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt;


&lt;span class="c1"&gt;# Create training and validation splits
&lt;/span&gt;&lt;span class="n"&gt;df_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red_wine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;red_wine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"quality"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df_train_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;df_train_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train_stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;df_train_stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'mean'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;df_train_stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'std'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Split features and target
&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_valid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_train&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;y_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_valid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'quality'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;early_stopping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EarlyStopping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;min_delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# minimium amount of change to count as an improvement
&lt;/span&gt;    &lt;span class="n"&gt;patience&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# how many epochs to wait before stopping
&lt;/span&gt;    &lt;span class="n"&gt;restore_best_weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="c1"&gt;# the hidden ReLU layers
&lt;/span&gt;    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BatchNormalization&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BatchNormalization&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BatchNormalization&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="c1"&gt;# the linear output layer 
&lt;/span&gt;    &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'adam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'mae'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;validation_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_valid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;early_stopping&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# put your callbacks in a list
&lt;/span&gt;    &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# turn off training log
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;history_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Get the experiment run context
&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'min_val_loss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'val_loss'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'outputs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exist_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# note file saved in the outputs folder is automatically uploaded into experiment record
&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'outputs/my_model'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#create-the-compute-environment"&gt;
  &lt;/a&gt;
  Create the Compute Environment
&lt;/h1&gt;

&lt;p&gt;The compute environment makes use of the curated environment &lt;code&gt;AzureML-TensorFlow-2.2-GPU&lt;/code&gt; provided by AzureML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;
&lt;span class="n"&gt;curated_env_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'AzureML-TensorFlow-2.2-GPU'&lt;/span&gt;
&lt;span class="n"&gt;tf_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;curated_env_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#create-the-estimator"&gt;
  &lt;/a&gt;
  Create the Estimator
&lt;/h1&gt;

&lt;p&gt;We change the estimator to make use of the curated environment &lt;code&gt;environment_definition = tf_env&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.train.estimator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Estimator&lt;/span&gt;

&lt;span class="n"&gt;script_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'--data-folder'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_mount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;# Create an estimator
&lt;/span&gt;&lt;span class="n"&gt;estimator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Estimator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;folder_training_script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;script_params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;script_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;compute_target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Run the experiment on the remote compute target
&lt;/span&gt;                      &lt;span class="n"&gt;environment_definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf_env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;entry_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'train.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#predict-the-data"&gt;
  &lt;/a&gt;
  Predict the data
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Predicting or Inferencing from the model&lt;/strong&gt; in Azure ML has the following steps:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the Inference Script&lt;/li&gt;
&lt;li&gt;Create the Inference Dependencies&lt;/li&gt;
&lt;li&gt;Create the Inference Config&lt;/li&gt;
&lt;li&gt;Create the Inference Clusters
&lt;/li&gt;
&lt;li&gt;Deploy the Model in the Inference Cluster
&lt;/li&gt;
&lt;li&gt;Get the predictions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Same as in the previous section, we do not explain in detail the steps which are the same in building the model using the machine learning work. We would highlight only the step which has changed from the previous implementation.    &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Step&lt;/th&gt;
&lt;th&gt;Change / No Change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Script&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Dependencies&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not required&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Config&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Create the Inference Clusters&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deploy the Model in the Inference Cluster&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get the predictions&lt;/td&gt;
&lt;td&gt;No Change&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-the-inference-script"&gt;
  &lt;/a&gt;
  Create the Inference Script
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;writefile&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folder_training_script&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;

&lt;span class="c1"&gt;# Called when the service is loaded
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the path to the registered model file and load it
&lt;/span&gt;    &lt;span class="n"&gt;model_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'wine_model'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Called when a request is received
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# Get the input data as a numpy array
&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
        &lt;span class="c1"&gt;# Get a prediction from the model
&lt;/span&gt;        &lt;span class="n"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;log_txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Data:'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' - Predictions:'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Return the predictions as any JSON serializable format
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# return error message back to the client
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-inference-dependencies"&gt;
  &lt;/a&gt;
  Create the Inference Dependencies
&lt;/h2&gt;

&lt;p&gt;We do not require this step since we use a curated environment  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-inference-config"&gt;
  &lt;/a&gt;
  Create the Inference Config
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azureml.core.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InferenceConfig&lt;/span&gt;

&lt;span class="n"&gt;classifier_inference_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InferenceConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'./winecode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                              &lt;span class="n"&gt;entry_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"score.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                             &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tf_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the curated environment &lt;code&gt;tf_env&lt;/code&gt; created earlier to prepare the Inference Config  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this post, we have highlighted the code which would change when using the Keras deep learning framework compared to the method which we have used for building the model using machine learning.  &lt;/p&gt;

&lt;p&gt;Thank you for reading. Please do leave your comments. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>7 Simple Menu Icon Animation For Beginners </title>
      <author>Kiran Raj R</author>
      <pubDate>Sat, 24 Apr 2021 02:37:06 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/7-simple-menu-icon-animation-for-beginners-25oa</link>
      <guid>https://dev.to/kiranrajvjd/7-simple-menu-icon-animation-for-beginners-25oa</guid>
      <description>&lt;p&gt;Here is the list of 7 simple menu icon animation (hamburger) for beginners. All animation are done with CSS transform property, no framework, no complex JavaScript. A few lines of JavaScript is used, just to mimic the checkbox behavior. Play with them, if you find any errors let me know, Happy Coding.&lt;/p&gt;

&lt;p&gt;You can uses this &lt;a href="https://cubic-bezier.com/#.17,.67,.83,.67"&gt;website&lt;/a&gt; to get your own cubic-bezier value.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/QWdzgLN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/BapvZya?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/LYxMLEJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/xxgmrGj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/XWpoggE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/zYNyzda?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/xxgmraM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>animation</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Implementing Non-Trivial Containerized Systems</title>
      <author>James Hunt</author>
      <pubDate>Sat, 24 Apr 2021 01:59:46 +0000</pubDate>
      <link>https://dev.to/jhunt/implementing-non-trivial-containerized-systems-1eln</link>
      <guid>https://dev.to/jhunt/implementing-non-trivial-containerized-systems-1eln</guid>
      <description>&lt;p&gt;Your average blog post / tutorial / video about containerizing software goes a little something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/DgZIDCjCtrk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtDqRpp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/an_webp/DgZIDCjCtrk/mqdefault_6s.webp%3Fdu%3D3000%26sqp%3DCOWBjYQG%26rs%3DAOn4CLC6ktyxf7d7ovm8j6j36HEyO-61tw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trouble is, all that "simple Docker stuff" is where things can (and often do!) go horribly horribly wrong, and there is precious little material available out there on the Internet for helping you through those precarious bits. No more!&lt;/p&gt;

&lt;p&gt;In this series, I'm going to take you through the complete containerization effort, using a nontrivial application composed of both off-the-shelf components and some home-spun software.&lt;/p&gt;

&lt;p&gt;Together, we're going to build and containerize an Internet radio station. Let's meet the software we're going to be using "off the shelf" to do most of the heavy lifting:&lt;/p&gt;

&lt;p&gt;Icecast2 - &lt;a href="https://icecast.org/"&gt;https://icecast.org/&lt;/a&gt;&lt;br&gt;
Liquid Soap - &lt;a href="https://www.liquidsoap.info/"&gt;https://www.liquidsoap.info/&lt;/a&gt;&lt;br&gt;
ffmpeg - &lt;a href="https://www.ffmpeg.org/"&gt;https://www.ffmpeg.org/&lt;/a&gt;&lt;br&gt;
youtube-dl - &lt;a href="https://youtube-dl.org/"&gt;https://youtube-dl.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These four components will allow us to implement an audio delivery system, over TCP, that randomizes tracks that we pull off of YouTube. I'm going to make episodes of the Rent / Buy / Build podcast available.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qS2hHLMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s6ay6j8bdo6ug3pdty1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qS2hHLMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s6ay6j8bdo6ug3pdty1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
As we build out this solution, we're going to climb the abstraction tower. We'll start by building and running our containers by hand, using nothing but the docker command. This is the proof-of-concept phase: does the software work together, and can we make all the components play nice and do what we want?&lt;/p&gt;

&lt;p&gt;This first stage is usually a very messy one, with lots of dead-ends, failed experiments and retries. I consider this a feature of the process, not a bug. Containers afford us the freedom to play and experiment, without risk of polluting our system with unwanted packages, unused processes, or broken configurations. If something doesn't work, all we have to do is shut down the container and delete the image.&lt;/p&gt;

&lt;p&gt;After we've worked out precisely which components we need, and how they work together, we'll move onto the orchestration stage. Using Docker Compose, we'll make some infrastructure code that can be used to deploy all of the pieces and parts together, as a cohesive and contained unit. It is at this stage that we capture the relationships between the containerized components and their data stores, explicitly.&lt;/p&gt;

&lt;p&gt;At this point, I like to take a step back and determine if the whole system is complete: does it lack features, user interfaces, or anything else? Anything that is missing usually doesn't exist on its own, and needs to be built. For this particular project, we're going to need a pretty web interface for interacting with our radio station, and driving new track ingestion.&lt;/p&gt;

&lt;p&gt;I specifically wait until I've finished assembling components before I go off and build any of the missing bits. I find that this helps to (a) keep the scope of anything I build to a minimum, and (b) ensures that the main backbone of the system is solid and functional before I expend any substantial effort writing glue code. Custom software ain't cheap; not only does developing software take time from other projects, but it also places some non-trivial obligation on future-you's time, vis-a-vis maintenance work.&lt;/p&gt;

&lt;p&gt;Once all the gaps are filled, and we're happy with the solution, we move onto the final stage: converting our docker compose recipe into a Kubernetes deployment or three, so that we can run and scale and survive node outages. While this stage builds heavily on the previous stages ‚Äì Docker Compose and Kubernetes share a lot of the same concepts, after all ‚Äì it also demands its own specialized bag of tricks.&lt;/p&gt;

&lt;p&gt;When all is said and done, we'll have taken our idea ‚Äì wouldn't it be cool to run an Internet radio station ‚Äì from concept to production-grade implementation, using containers all the way.&lt;/p&gt;

&lt;p&gt;Let's get started, shall we?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic39Mk99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jg2r9lcb83vos7qg9xk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic39Mk99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jg2r9lcb83vos7qg9xk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://starkandwayne.com/blog/implementing-non-trivial-containerized-systems-part-1-picking-components/"&gt;Join us next week for part 1&lt;/a&gt;, where we dive into assembling the off-the-shelf components into a working system, fit for containerization.&lt;/p&gt;

</description>
      <category>containers</category>
      <category>tutorial</category>
      <category>cloud</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
