<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Ultimate Eleventy Template for your blog with a FREE minimalist theme [Open Source]</title>
      <author>Remi W.</author>
      <pubDate>Thu, 27 May 2021 15:18:16 +0000</pubDate>
      <link>https://dev.to/ixartz/the-ultimate-eleventy-template-for-your-blog-with-a-free-minimalist-theme-open-source-3h47</link>
      <guid>https://dev.to/ixartz/the-ultimate-eleventy-template-for-your-blog-with-a-free-minimalist-theme-open-source-3h47</guid>
      <description>&lt;p&gt;Yesterday, I've just updated my 11ty Starter code to the latest version with Tailwind CSS 2 and Webpack 5. Built in developer in mind with great tooling with ESLint and Prettier. The template is production-ready with SEO features. It also includes a little bonus with Netlify CMS (optional).&lt;/p&gt;

&lt;p&gt;You can test the template at &lt;a href="https://creativedesignsguru.com/demo/Eleventy-Starter-Boilerplate/"&gt;Eleventy Template live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested you can view the source code at &lt;a href="https://github.com/ixartz/Eleventy-Starter-Boilerplate"&gt;Eleventy Template GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;🔥 11ty for SSG&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎨 Integrate with Tailwind CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚡️ Lazy load images with lazysizes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✨ Compress image with Imagemin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎈 Syntax Highlighting with Prism.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;☕ Minify HTML &amp;amp; CSS with HTMLMinifier and cssnano&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✏️ Linter with ESLint&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🛠 Code Formatter with Prettier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;💨 Live reload&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;📦 Module Bundler with Webpack&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🦊 Templating with EJS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤖 SEO metadata and Open Graph tags&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚙️ JSON-LD for richer indexing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🗺 Sitemap.xml&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚠️ 404 page&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;📖 Pagination&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ Cache busting&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;💯 Maximize lighthouse score&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🌈 Include a FREE minimalist blog theme&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🗒 Netlify CMS (optional)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Eleventy-Starter-Boilerplate"&gt;
        Eleventy-Starter-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Eleventy Starter is production-ready with SEO-friendly for quickly starting a blog. ⚡ Built with Eleventy, ESLint, Prettier, Webpack 5, PostCSS, Tailwind CSS 2 and Netlify CMS (optional).
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Eleventy Starter Boilerplate&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Eleventy-Starter-Boilerplate/eleventy-starter-boilerplate-presentation/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBvAD5Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Eleventy-Starter-Boilerplate/master/public/assets/images/eleventy-js-starter-boilerplate.png%3Fraw%3Dtrue" alt="Eleventy starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Eleventy Starter Boilerplate is production-ready with SEO-friendly for quickly starting a blog. ⚡️ Built with &lt;a href="https://www.11ty.dev" rel="nofollow"&gt;Eleventy&lt;/a&gt;, &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;, &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;, &lt;a href="https://webpack.js.org" rel="nofollow"&gt;Webpack&lt;/a&gt;, &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt;, &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; and &lt;a href="https://www.netlifycms.org" rel="nofollow"&gt;Netlify CMS&lt;/a&gt; (optional).&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://www.11ty.dev" rel="nofollow"&gt;Eleventy&lt;/a&gt; blog. You can check a &lt;a href="https://creativedesignsguru.com/demo/Eleventy-Starter-Boilerplate/eleventy-starter-boilerplate-presentation/" rel="nofollow"&gt;Eleventy templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Production-ready in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://www.11ty.dev" rel="nofollow"&gt;11ty&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; (with &lt;a href="https://purgecss.com" rel="nofollow"&gt;PurgeCSS&lt;/a&gt;, remove unused CSS)&lt;/li&gt;
&lt;li&gt;
💅 &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt; for processing &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
⚡️ Lazy load images with &lt;a href="https://github.com/aFarkas/lazysizes"&gt;lazysizes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✨ Compress image with &lt;a href="https://github.com/imagemin/imagemin"&gt;Imagemin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🎈 Syntax Highlighting with &lt;a href="https://prismjs.com" rel="nofollow"&gt;Prism.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
☕ Minify HTML &amp;amp; CSS with &lt;a href="https://www.npmjs.com/package/html-minifier" rel="nofollow"&gt;HTMLMinifier&lt;/a&gt; and &lt;a href="https://cssnano.co" rel="nofollow"&gt;cssnano&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
💨 Live reload&lt;/li&gt;
&lt;li&gt;
📦 Module Bundler with &lt;a href="https://webpack.js.org" rel="nofollow"&gt;Webpack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 Templating with &lt;a href="https://ejs.co" rel="nofollow"&gt;EJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🤖 SEO metadata and &lt;a href="https://ogp.me/" rel="nofollow"&gt;Open Graph&lt;/a&gt; tags&lt;/li&gt;
&lt;li&gt;
⚙️ &lt;a href="https://developers.google.com/search/docs/guides/intro-structured-data" rel="nofollow"&gt;JSON-LD&lt;/a&gt; for richer indexing&lt;/li&gt;
&lt;li&gt;
🗺 Sitemap.xml&lt;/li&gt;
&lt;li&gt;
⚠️ 404 page&lt;/li&gt;
&lt;li&gt;
📖 Pagination&lt;/li&gt;
&lt;li&gt;
✅ Cache busting&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Eleventy-Starter-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#built-with-latest-technologies"&gt;
  &lt;/a&gt;
  Built with latest technologies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Eleventy&lt;/li&gt;
&lt;li&gt;Tailwind CSS 2.0&lt;/li&gt;
&lt;li&gt;Webpack 5&lt;/li&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-11ty-templates-and-themes"&gt;
  &lt;/a&gt;
  Other 11ty Templates and Themes
&lt;/h2&gt;

&lt;p&gt;You can also check my other Eleventy templates at:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-dark-eleventy-theme/"&gt;Blue Dark Eleventy Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-eclatant-eleventy-theme/"&gt;Blue Eclatant Eleventy Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-dark-eleventy-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3WatnIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/blue-dark-mode-eleventy-theme-homepage-xs.png" alt="Blue Dark Eleventy Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-eclatant-eleventy-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYxgG3gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eclatant-blue-eleventy-theme-homepage-xs.png" alt="Blue Eclatant Eleventy Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-modern-eleventy-theme/"&gt;Blue Modern Eleventy Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-minimalist-eleventy-theme/"&gt;Blue Minimalist Eleventy Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-modern-eleventy-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yo2plpbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/modern-blue-eleventy-theme-homepage-xs.png" alt="Blue Modern Eleventy Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-minimalist-eleventy-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqqvRaLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/minimalist-blue-eleventy-theme-homepage-xs.png" alt="Blue Minimalist Eleventy Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can easily customize the themes based on your needs by saving you development and design time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tailwindcss</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Learn JavaScript - A Free 7-hour Interactive Tutorial</title>
      <author>Per</author>
      <pubDate>Thu, 27 May 2021 15:15:47 +0000</pubDate>
      <link>https://dev.to/scrimba/learn-javascript-a-free-7-hour-interactive-tutorial-1ai2</link>
      <guid>https://dev.to/scrimba/learn-javascript-a-free-7-hour-interactive-tutorial-1ai2</guid>
      <description>&lt;p&gt;Over the last four months, I have recorded what is probably the most interactive &lt;a href="https://scrimba.com/learn/learnjavascript?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=learn_javascript_dev_to_article"&gt;JavaScript course&lt;/a&gt; that has ever been created.&lt;/p&gt;

&lt;p&gt;The reason I have done this is because I often see new coders fall into the same pitfalls again and again when trying to learn JavaScript, with the most dangerous ones being these three 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not being able to go from watching JS tutorials to building JS projects 🛠&lt;/li&gt;
&lt;li&gt;Losing motivation because they get bored 🥱&lt;/li&gt;
&lt;li&gt;Not being able to move forward because the learning curve is too steep 🧗&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, very few courses seem to take these pitfalls seriously enough. So this course is meant for anyone who has experienced any of the above issues when learning JavaScript.&lt;/p&gt;

&lt;p&gt;In this article, I'll explain how &lt;a href="https://scrimba.com/learn/learnjavascript?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=learn_javascript_dev_to_article"&gt;the course&lt;/a&gt; works so that you can decide whether or not you think it is something for you. &lt;/p&gt;

&lt;p&gt;If you you're sold already, just click on the image below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scrimba.com/learn/learnjavascript?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=learn_javascript_dev_to_article"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvSk5lD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69b2tq7lbxthhbs8t3ik.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-hyper-interactivity-is-important"&gt;
  &lt;/a&gt;
  Why Hyper Interactivity is Important
&lt;/h2&gt;

&lt;p&gt;The course is built around 140+ interactive challenges. This means that there's no point in binge-watching it. The whole purpose of it is to get you to code, to build up your JavaScript muscle memory. And in order to achieve that, you must solve the challenges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSpdOLk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0fecsxhuavx1quuhxa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSpdOLk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0fecsxhuavx1quuhxa8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry though – each challenge is byte-sized and fast to solve, so you will feel like you are progressing quickly.&lt;/p&gt;

&lt;p&gt;This level of interactivity would be clunky to achieve using regular videos, as you would need to jump between the video player and the code editor 140+ times throughout the course. Not to mention opening up new starter files for many of the challenges.&lt;/p&gt;

&lt;p&gt;To combat this issue, I created this course using Scrimba, which makes the experience much smoother.&lt;/p&gt;

&lt;p&gt;When you are inside a scrim, you can instantly jump between watching the teacher's explanation and coding up your own solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Imagine if VS Code and the video format had a child. That's Scrimba. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can both watch the tutorial and edit with the code inside the same frame.&lt;/p&gt;

&lt;p&gt;People often struggle to understand what a scrim is before they've seen it, so I'd recommend that you watch through &lt;a href="https://scrimba.com/scrim/c8gp4WfE"&gt;this 1-minute scrim&lt;/a&gt; to get ahold of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#justintime-learning"&gt;
  &lt;/a&gt;
  "Just-in-time" Learning
&lt;/h2&gt;

&lt;p&gt;Another thing that separates this course from most other JavaScript courses is that it spreads the theoretical lessons evenly out across the entire course. Just in time when you need to learn it, and not a second before.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This means that you won't get long and boring lectures about abstract concepts before you start building projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead, we will dive head-first into building projects. And when we hit a road block, I will introduce you to the piece of theory we need in order to overcome it. This way, you will intuitively understand why you need to learn the theory.&lt;/p&gt;

&lt;p&gt;However, don't be fooled to think that we will skip any theory. My course goes through the same important theory as any other good JavaScript course. But instead of squeezing it in all up-front, it is spread out evenly from start to end. Just it time when you need to learn it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-by-doing"&gt;
  &lt;/a&gt;
  Learning by Doing
&lt;/h2&gt;

&lt;p&gt;This tight integration between theory and practice means that most of your time will be spend building products. Here are the three projects you will build:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f20UBQOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d73d3z96lbut5pw72y6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f20UBQOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d73d3z96lbut5pw72y6p.png" alt="The projects you will build in the course"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-1-passenger-counter"&gt;
  &lt;/a&gt;
  Project 1: Passenger Counter
&lt;/h3&gt;

&lt;p&gt;You'll start out by building a passenger counter app. This might seem like a bit of a contrived example, but counting passengers at the metro was my actually my full-time job for a time when I was 19 years old.&lt;/p&gt;

&lt;p&gt;What's important here is that you are building an actual product from day one. You are combining JavaScript with HTML and CSS, so that you can learn JavaScript in the context of a real user interface in the browser.&lt;/p&gt;

&lt;p&gt;This makes it a lot more fun than simply seeing your output in the console. While this adds a little bit of complexity, it it well worth it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-2-blackjack-game"&gt;
  &lt;/a&gt;
  Project 2: Blackjack game
&lt;/h3&gt;

&lt;p&gt;Next, you will build your very first JavaScript game – Blackjack!&lt;/p&gt;

&lt;p&gt;This is the first time you will code something that can also entertain you, which I think is important.&lt;/p&gt;

&lt;p&gt;Blackjack is one of the most iconic Casino games ever, and this marks your first step into the world of game development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-2-chrome-extension"&gt;
  &lt;/a&gt;
  Project 2: Chrome Extension
&lt;/h3&gt;

&lt;p&gt;Finally, you will build a Chrome Extension that we are going deploy to your Chrome browser, so that you can use it out in the wild. This is exciting, as you'll really understand the super power you have gotten at this point.&lt;/p&gt;

&lt;p&gt;The extension is called "Lead Tracker" and it is a tool for sales representatives. It allows them to browse the web and collect promising leads.&lt;/p&gt;

&lt;p&gt;Check out the intro scrim for it to learn it a bit more:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-sections"&gt;
  &lt;/a&gt;
  Practice sections
&lt;/h3&gt;

&lt;p&gt;After each of these project sections, I will stress-test your knowledge with dedicated challenge sections. This will also give you the necessary repetition you need in order to progress to the next project. I have tried to make all the challenges as real-world as possible so that they are fun to solve.&lt;/p&gt;

&lt;p&gt;If you struggle to solve these challenges, then I would recommend that you revisit the scrims from the project sections as well. So these sections serve as gateways for progressing with the course.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-enroll-for-free-right-now"&gt;
  &lt;/a&gt;
  You can enroll for free right now
&lt;/h3&gt;

&lt;p&gt;I hope this gave you the background you needed in order to decide whether or not you'd like to try this course out. It's 100% free, and will be so forever. If you are interested, just &lt;a href="https://scrimba.com/learn/learnjavascript?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=learn_javascript_dev_to_article"&gt;click this link&lt;/a&gt; and you can get started immediately.&lt;/p&gt;

&lt;p&gt;Finally, if you would like to help us spread the course, you can retweet my launch tweet. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yOn85zV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1389510554616729603/SsUSRAe2_normal.jpg" alt="Per Harald Borgen profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Per Harald Borgen
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/perborgen"&gt;@perborgen&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🔥 My free 7-hour beginner JavaScript course is finally OUT!&lt;br&gt;&lt;br&gt;It is IMHO the most interactive JS course ever recorded, with 140+ challenges.&lt;br&gt;&lt;br&gt;To celebrate, I'll give a 1-year &lt;a href="https://twitter.com/scrimba"&gt;@scrimba&lt;/a&gt; subscription (worth $150) to a random person who retweets this tweet 🎁&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/F5vmNwmCxQ"&gt;scrimba.com/learn/learnjav…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:43 PM - 20 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1395359456335106048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1395359456335106048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1395359456335106048" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>javascript</category>
      <category>css</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Share data between browser tabs</title>
      <author>Baedyl</author>
      <pubDate>Thu, 27 May 2021 15:12:59 +0000</pubDate>
      <link>https://dev.to/baedyl/share-data-between-browser-tabs-4hil</link>
      <guid>https://dev.to/baedyl/share-data-between-browser-tabs-4hil</guid>
      <description>&lt;p&gt;I recently came across the issue of sharing some data between different tabs of the same web application. Using OAuth to retrieve an external provider's API key, saving it and finally displaying it on our platform. The first solution implied reloading the entire page. But the user experience was heavily compromised. In a SPA point of vue, imagine being in /process/emailing/... and redirected to /process 😕&lt;/p&gt;

&lt;p&gt;While looking for a more suitable solution, I came across the Broadcast Channel API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start by creating a broadcast channel:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const channel = new BroadcastChannel('oauth')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we specified the name &lt;em&gt;oauth&lt;/em&gt; that will later be used in other parts of our app to listen on any message sent through this channel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;channel.postMessage(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we send a message and, we can pass any object we like. In our case, we just needed an indication to know a certain task was done so the content did not really matter, feel free to pass useful data according to your need.&lt;/p&gt;

&lt;p&gt;The data sent can be any of those supported values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All primitive types, excluding symbols&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Object literals&lt;/li&gt;
&lt;li&gt;String, Date, RegExp objects&lt;/li&gt;
&lt;li&gt;Blob, File, FileList objects&lt;/li&gt;
&lt;li&gt;ArrayBuffer, ArrayBufferView objects&lt;/li&gt;
&lt;li&gt;FormData objects&lt;/li&gt;
&lt;li&gt;ImageData objects&lt;/li&gt;
&lt;li&gt;Map and Set objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we need to listen to the same channel in other parts of our app. To do so, we create a channel with the same name and use the &lt;strong&gt;onmessage&lt;/strong&gt; event handler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const channel = new BroadcastChannel('oauth')
channel.onmessage = (e) =&amp;gt; {
  // Business logic here
  // data sent through the channel is available at e.data
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! We successfully sent data from a different window, tab or frame to another 😀.&lt;/p&gt;

&lt;p&gt;Finally, to make a channel stop receiving messages you can close it using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;channel.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can achieve the same result using the SharedWorker API or even Local Storage but, personally I found this method the most intuitive. Do you know any other alternative ?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>vue</category>
    </item>
    <item>
      <title>WAO: How do you make money with your side hustle? </title>
      <author>Nathan Kallman</author>
      <pubDate>Thu, 27 May 2021 15:05:53 +0000</pubDate>
      <link>https://dev.to/kallmanation/wao-how-do-you-make-money-with-your-side-hustle-4pmg</link>
      <guid>https://dev.to/kallmanation/wao-how-do-you-make-money-with-your-side-hustle-4pmg</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@michalmatlon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michal Matlon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/wrong-answer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#wrong-answers-only"&gt;
  &lt;/a&gt;
  Wrong Answers Only
&lt;/h1&gt;

&lt;p&gt;How do you make money with your side hustle? Whether that's writing articles (like here on DEV) or freelancing or making your own game: what's the worst way to make money with it?&lt;/p&gt;




&lt;p&gt;Comment your wrong answer!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>wronganswersonly</category>
    </item>
    <item>
      <title>Goodbye, Internet Explorer. You will not be missed.</title>
      <author>Charanjit Chana</author>
      <pubDate>Thu, 27 May 2021 14:48:55 +0000</pubDate>
      <link>https://dev.to/cchana/goodbye-internet-explorer-you-will-not-be-missed-5g1h</link>
      <guid>https://dev.to/cchana/goodbye-internet-explorer-you-will-not-be-missed-5g1h</guid>
      <description>&lt;p&gt;My first draft of this post focused on all of the good that followed IE6 in the world of web development but I think it’s worth focusing on why we're so happy to be saying goodbye to my nemesis for a lot of the last 20 years. Later this year &lt;a href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/"&gt;support for Internet Explorer officially comes to an end&lt;/a&gt; and in mid-2022 it will be retired completely.&lt;/p&gt;

&lt;p&gt;From 3-pixel bugs, to different implementations and interpretations of the CSS specs, the end of internet explorer couldn’t come soon enough. Never heard of the 3-pixel bug? If you have access to IE 11, then &lt;a href="http://titan.dcs.bbk.ac.uk/lo/dw230Bugs/IEbug1_3pixeljog.htm"&gt;go here&lt;/a&gt; and use emulation to pretend you're in IE5 (IE6 is not available for some reason) and you'll see a three pixel indent of the first paragraph in the green box. Maddening.&lt;/p&gt;

&lt;p&gt;I had the misfortune to not only have to support IE6 in my development career, but also IE5.5 and even Internet Explorer for Mac too. Internet Explorer for Mac. Truly trying times.&lt;/p&gt;

&lt;p&gt;Microsoft eventually moved onto Internet Explorer 7 but the improvements were minimal. IEs 8, 9, and 10 were not much better and even now 11 is painfully slow. Over the past 5 years, I've lost count of how many times I have been asked to look into performance issues and it turns out it's the browser itself struggling. The code itself is good enough for everyone else, the user's hardware rarely an issue and the APIs themselves performant. Every other browser coped without any issues.&lt;/p&gt;

&lt;p&gt;Edge is a clear improvement on the browser experience for Windows users and long overdue. Built on top of Chromium, the dev tools are there and so are all of the performance benefits that come with things like the V8 JavaScript engine.&lt;/p&gt;

&lt;p&gt;Goodbye, Internet Explorer. You will not be missed.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>internetexplorer</category>
      <category>finally</category>
    </item>
    <item>
      <title>.NET Hot Reload First Look</title>
      <author>Michael Crump</author>
      <pubDate>Thu, 27 May 2021 14:47:59 +0000</pubDate>
      <link>https://dev.to/mbcrump/net-hot-reload-first-look-11jj</link>
      <guid>https://dev.to/mbcrump/net-hot-reload-first-look-11jj</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;In today's video, we'll take a look at .NET Hot Reload which shipped in the latest Visual Studio 2019 preview. In short, you can modify your apps source code while the application is running, without the need to manually pause or hit a breakpoint. Just make a change and click the "apply code changes" button and the magic happens.&lt;/p&gt;

&lt;p&gt;Note: I'm not on this team at MS. I'm just a dude playing around with new bits like everyone else. &lt;/p&gt;

&lt;p&gt;Supporting Materials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://visualstudio.microsoft.com/vs/preview/"&gt;https://visualstudio.microsoft.com/vs/preview/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-net-hot-reload/"&gt;https://devblogs.microsoft.com/dotnet/introducing-net-hot-reload/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.microsoft.com/en-us/p/esheep-64bit/9mx2v0tqt6rm#activetab=pivot:overviewtab"&gt;https://www.microsoft.com/en-us/p/esheep-64bit/9mx2v0tqt6rm#activetab=pivot:overviewtab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video (6 mins)&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3y5ACfQbsHk"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Feel free to checkout my &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch streams&lt;/a&gt; as we learn about security and app development or you can watch the condensed version of all of my streams by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>visualstudio</category>
      <category>productivity</category>
      <category>c</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Manage your time - Using this Appointment Scheduling widget</title>
      <author>lary mak</author>
      <pubDate>Thu, 27 May 2021 14:44:55 +0000</pubDate>
      <link>https://dev.to/larymak/manage-your-time-using-this-appointment-scheduling-widget-37h7</link>
      <guid>https://dev.to/larymak/manage-your-time-using-this-appointment-scheduling-widget-37h7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;They say: Time is the longest distance between two places. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well I will agree with this at some point yes. Now Imagine this scenario with all the working home staff you happen to get a remote job but the company is in different time zone with your place how do you handle such situation? &lt;/p&gt;

&lt;p&gt;Personally I have lost in lots of events due to time barrier, I will get an early invite but will not be able to sync the event with my calendar, but that was back then. &lt;/p&gt;

&lt;p&gt;Now with change in technology and inventions companies have developed different ways to help people manage their schedules and appointments. &lt;/p&gt;

&lt;p&gt;In this article we will see how to work with &lt;a href="https://github.com/Spurwing/Appointment-Scheduling-API"&gt;Spurwing Scheduling API&lt;/a&gt;. As mentioned earlier managing office employee to meet can be little bit complicated and some times also lead to delays which may result to loses, but that won't be a problem after we are done. &lt;br&gt;
&lt;em&gt;Let's get Started:&lt;/em&gt;&lt;br&gt;&lt;br&gt;
Let's agree with some real world reality: Remote work is here to stay, and with this lot's of meeting will be held online despite difference in time zones but with the right tool that should not be a problem. &lt;br&gt;
A Scheduling API can bring time management to your team so that it will seem like you're always in the same room together.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#more-details"&gt;
  &lt;/a&gt;
  More Details:
&lt;/h5&gt;

&lt;p&gt;Integration&lt;br&gt;&lt;br&gt;
The API is an open-source project meaning, you can change it to completely suit your needs the way you want it to. It can be built to match your brand with no mention of the company behind the system so clients will see it as your system.&lt;br&gt;&lt;br&gt;
Syncing &lt;br&gt;
By using an API service to manage all second-class objects across multiple calendar platforms everything smooths out significantly. This is how: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Managing different calendar platforms becomes almost effortless&lt;/li&gt;
&lt;li&gt;Less resources are used &lt;/li&gt;
&lt;li&gt;Work is done much faster.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time zone&lt;br&gt;
You won't have to worry about the difference in time zone any more. This API will help by giving the correct time for everybody depending on their specific time zone keeping everything synced in together, Incase of update or changes it automatically syncs to the calendar hence real time updating. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reasons-why-you-need-a-scheduling-api-in-your-office"&gt;
  &lt;/a&gt;
  Reasons Why you need A Scheduling API in your Office:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Help increase staff productivity
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Research shows that an average call to book/schedule an appointment takes between 7-8 minutes, this leads to time wastage implement an online automated system to help improve productivity.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce office distractions 
This is mainly by reducing the amount of time people will have to spend on calls to confirm different schedules and appointments, change this by synching it all to the calendars. &lt;/li&gt;
&lt;li&gt;Maintain all client information in one place. &lt;/li&gt;
&lt;li&gt;Keep track of scheduling of multiple staff members with various services in several locations. &lt;/li&gt;
&lt;li&gt;Allow clients to maintain choice in who they are seeing during their appointment. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As the saying goes: Time waits for no one, Let's change that and get to those meetups on time. Make use of the API for greater productivity. &lt;br&gt;
They API has a documentation on how to get started or you can also get started with their ready SDKs made by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Spurwing/Spurwing-API-Javascript-Library"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Spurwing/Spurwing-API-Python-Library"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Spurwing/Spurwing-API-Java-Library"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spurwingio/Spurwing-API-NodeJS-Library"&gt;NodeJS&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visit the site for detailed info &lt;a href="https://docs.spurwing.io/"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is an open source project, this means there is a community always ready to offer help when needed. &lt;/p&gt;

&lt;p&gt;Also check out other Article: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/larymak/integrating-chatbot-into-your-next-project-3gk"&gt;Integrating Chatbot into your next project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi-3a64b11ab/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy Coding ❤.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
      <category>python</category>
    </item>
    <item>
      <title>Python read and write files</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 27 May 2021 14:10:46 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/python-read-and-write-files-3k8a</link>
      <guid>https://dev.to/dailydevtips1/python-read-and-write-files-3k8a</guid>
      <description>&lt;p&gt;There are many great use-cases to read and write data to a local file.&lt;br&gt;
It might be for crawling purposes, price checks, logs, or whatnot.&lt;/p&gt;

&lt;p&gt;Today I'll be exploring the basics of reading and writing data to a file in Python.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#read-files-in-python"&gt;
  &lt;/a&gt;
  Read files in Python
&lt;/h2&gt;

&lt;p&gt;The first part of file interaction would be to read data from an existing file.&lt;/p&gt;

&lt;p&gt;Let's create a basic &lt;code&gt;txt&lt;/code&gt; file called &lt;code&gt;text.txt&lt;/code&gt; at the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hi there

How cool of you to try and read me
Hope you have fun
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To read this file in Python, we can use the &lt;code&gt;open()&lt;/code&gt; function built into Python.&lt;/p&gt;

&lt;p&gt;After opening the file, we can use the &lt;code&gt;file.read()&lt;/code&gt; function to see what's in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print the exact content of our file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-data-to-a-file-in-python"&gt;
  &lt;/a&gt;
  Write data to a file in Python
&lt;/h2&gt;

&lt;p&gt;Now that we know how to read a file let's see how we can write data to that same file.&lt;/p&gt;

&lt;p&gt;There are two options when we open a file for writing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;a&lt;/code&gt;: Append data to the existing file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w&lt;/code&gt;: Write, this option will overwrite any existing content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's first try the append option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I'm an extra line of content"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we now check our file, it shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hi there

How cool of you to try and read me
Hope you have fun
I'm an extra line of content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's use the write function and see what happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I have new content now"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checking the file now shows us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I have new content now
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the old content is gone now.&lt;br&gt;
So choose wisely which of the two options you wish to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>State Management: How to tell a bad boolean from a good boolean</title>
      <author>Matt Pocock</author>
      <pubDate>Thu, 27 May 2021 14:05:02 +0000</pubDate>
      <link>https://dev.to/mpocock1/state-management-how-to-tell-a-bad-boolean-from-a-good-boolean-260n</link>
      <guid>https://dev.to/mpocock1/state-management-how-to-tell-a-bad-boolean-from-a-good-boolean-260n</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Bad booleans do a bad job modelling state. Good booleans are derived from well-modelled state.&lt;/p&gt;

&lt;p&gt;When you're managing state in your app, it's easy to fall prey to bad booleans. Bad booleans look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasErrored&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the surface, this looks like good code. It appears as though you've represented three separate states with proper boolean names. In the 'model' you've pictured for your state, only one of these states can be true at any one time.&lt;/p&gt;

&lt;p&gt;In a fetch request, you might model the state like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;isComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hasErrored&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this looks nice. We're orchestrating our booleans as we move through the async request.&lt;/p&gt;

&lt;p&gt;But there's a bug here. What happens if we make the fetch, it succeeds, and we make the fetch again? We'll end up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasErrored&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implicit-states"&gt;
  &lt;/a&gt;
  Implicit states
&lt;/h2&gt;

&lt;p&gt;You probably hadn't considered this when you made your initial model. You may have frontend components which are checking for &lt;code&gt;isComplete === true&lt;/code&gt; or &lt;code&gt;isLoading === true&lt;/code&gt;. You might end up with a loading spinner &lt;em&gt;and&lt;/em&gt; the previous data showing at the same time.&lt;/p&gt;

&lt;p&gt;How is this possible? Well, you've created some implicit states. Let's imagine you considered 3 states as ones you actually wanted to handle:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;loading&lt;/code&gt;: Loading the data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;complete&lt;/code&gt;: Showing the data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;errored&lt;/code&gt;: Erroring if the data doesn't turn up&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, you've actually allowed &lt;em&gt;8&lt;/em&gt; states! That's 2 for the first boolean, times 2 for the second, times 2 for the third.&lt;/p&gt;

&lt;p&gt;This is what's known as boolean explosion - I learned about this from &lt;a href="https://egghead.io/lessons/javascript-eliminate-boolean-explosion-by-enumerating-states"&gt;Kyle Shevlin's egghead course&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-states-explicit"&gt;
  &lt;/a&gt;
  Making states explicit
&lt;/h2&gt;

&lt;p&gt;How do you get around this? Instead of a system with 8 possible values, we need a system with three possible values. We can do this in Typescript with an enum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;errored&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'd implement this in a fetch like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;errored&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's now impossible to be in the 'loading' and 'complete' state at once - we've fixed our bug. We've turned our bad booleans into a good enum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-good-booleans"&gt;
  &lt;/a&gt;
  Making good booleans
&lt;/h2&gt;

&lt;p&gt;But not all booleans are bad. Many popular libraries, such as &lt;code&gt;react-query&lt;/code&gt;, &lt;code&gt;apollo&lt;/code&gt; and &lt;code&gt;urql&lt;/code&gt; use booleans in their state. An example implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason these are good booleans is that their underlying mechanism is based on an enum. Bad booleans &lt;em&gt;represent&lt;/em&gt; state. Good booleans are &lt;em&gt;derived&lt;/em&gt; from state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Derived from the status above&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can safely use this &lt;code&gt;isLoading&lt;/code&gt; to display your loading spinner, happy in the knowledge that you've removed all impossible states.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Make a Web Developer Resume That Will Get You Employed</title>
      <author>Creative Tim</author>
      <pubDate>Thu, 27 May 2021 14:00:33 +0000</pubDate>
      <link>https://dev.to/creativetim_official/how-to-make-a-web-developer-resume-that-will-get-you-employed-2jol</link>
      <guid>https://dev.to/creativetim_official/how-to-make-a-web-developer-resume-that-will-get-you-employed-2jol</guid>
      <description>&lt;p&gt;More people learn to code every day, which increases competition in the field of web development. Landing a programmer job can be tricky, so you have to market yourself very well in the recruitment process. The first and easiest way to do this is through your resume.&lt;/p&gt;

&lt;p&gt;Your web developer resume introduces you to potential employers, and it serves as a first impression. To make yourself noticed and secure a job interview, you need to have a bulletproof resume that showcases your experience, education, and skills, in a brief manner.&lt;/p&gt;

&lt;p&gt;It can be challenging to build a great resume, especially when it’s your first time doing it. This is why we’ve put together a short guide that will help you create a resume employers won’t overlook. Check out our tips to craft the perfect web developer resume. We also included some great web developer resume templates and examples to make it easier for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-include-in-your-web-developer-resume"&gt;
  &lt;/a&gt;
  &lt;strong&gt;☑️ What to Include in Your Web Developer Resume?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you are a web developer with an employment history, or a freelance web developer building a resume, there are some sections you should always include in your resume. We listed them below, in the recommended order they should appear on your resume.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contact Details&lt;/strong&gt;&lt;br&gt;
Under contact details, you should include your name, complete address, email, and phone number. If you have a personal website or portfolio website, make sure to include them, too, as well as your Linkedin profile. &lt;/p&gt;

&lt;p&gt;Your contact details should be as visible as possible. Include them at the beginning of your resume, above the fold, as marketers would put it. If your resume is somehow divided horizontally, place your contact details on the left side. You want this information to be extremely easy to find for the recruiter and not make them go over the entire resume to find them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Employment History or Personal Projects&lt;/strong&gt;&lt;br&gt;
The employment history section should be the broadest of them all. Here you should list your work experience in reverse chronological order. Try your best not to have large gaps in your job history. If you have limited work experience, you can also include personal projects, internships, and volunteer work. &lt;/p&gt;

&lt;p&gt;If all you’ve ever done is freelance work, list the projects you have worked on, just like you would with an employment experience entry. Specify your job title, the company name/client’s name, location of employment, and period of work. Don’t forget to include a few bullet points to describe your job responsibilities and results briefly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Higher Education&lt;/strong&gt;&lt;br&gt;
This section of your resume should include your degrees, ordered from most recent to least recent. If you have higher education degrees, you can leave your high school diploma out. Remember that some employers go as far as discarding resumes with no higher education.&lt;/p&gt;

&lt;p&gt;Your entries should include your degree type, your major, and the name of your university. If you want to expand, you can mention honors and awards and add a short description of your studies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Skills&lt;/strong&gt;&lt;br&gt;
A web developer resume should emphasize technical expertise, so you should list all technologies and tools you are familiar with. However, long lists are usually difficult to read. To ensure readability, group the technical skills into categories so recruiters can skim over them easily.&lt;/p&gt;

&lt;p&gt;For example, let’s say you want to list the following technical skills: React, HTML, Docker, Jira, Javascript, JQuery, Git, Jenkins, and Kubernetes. You shouldn’t list them like this, but instead, categorize and format them like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Technologies and Frameworks: HTML, Javascript, JQuery, React;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Deployment Tools: Docker, Jenkins, Kubernetes;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Other Tools: Git, Jira.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Professional Skills&lt;/strong&gt;&lt;br&gt;
While on a different type of resume you would probably create a section for soft skills, for a web developer resume, we recommend you go with a professional skills section instead. Recruiters for such jobs will appreciate more seeing you have professional skills like problem-solving, team leadership, or code optimization than soft skills like self-motivation or interpersonal skills. You can also create a Soft Skills section if you consider it necessary.&lt;/p&gt;

&lt;p&gt;Apart from the pivotal sections we listed above, there are a few others you could also add to your resume if you want to. These include personal profile, objectives, references, certifications, achievements and awards, and so on. However, keep in mind that your resume should be brief, so don’t overdo it.&lt;/p&gt;

&lt;p&gt;If you’re trying to build a web developer resume with no experience, you should focus on your skills and education. However, it helps a lot if you contributed to open source projects or even have some personal web development projects of your own to show off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJBRiXls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/resume-img2-1024x683.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJBRiXls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/resume-img2-1024x683.jpg" alt="Developer Resume"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-for-building-a-strong-web-developer-resume"&gt;
  &lt;/a&gt;
  &lt;strong&gt;🌟Tips for Building a Strong Web Developer Resume&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Keep it Short&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your resume should not be longer than two pages. One to two pages is the ideal length for any resume. Recruiters have countless job applications to review, and it is unlikely that they will read a resume that exceeds two pages. In fact, according to a Mystery Job Candidate survey, &lt;a href="https://qz.com/434117/recruiters-read-a-tiny-portion-of-your-resume-if-they-read-it-at-all/"&gt;recruiters spend an average of six seconds per resume&lt;/a&gt;. So try to cover your relevant experience on a single sheet of paper, front and back.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Tailor Your Resume for the Job&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You might have extensive education or work experience. This doesn’t mean you should put all of it on your resume. Go through the information and select what is most relevant to the job you’re applying for. Do this every time you apply for a job to ensure your resume gets read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Include Keywords from the Job Listing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Carefully read the job description, identify keywords, and include them in your resume. These keywords usually overlap with attributes the employer is looking for in an ideal candidate, and you will often find them in the “Requirements” / “Qualifications” sections of the job listing. If you are applying for a front-end developer position, the job description might contain keywords like “HTML”, “CSS”, “Javascript”, “graphic design”, “problem-solving”, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Use Active Verbs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Active verbs are used to describe an action that a subject is performing. Within the context of a resume, that subject is yourself, and you use these verbs to provide clarity, emphasize your professional achievements, and exude confidence. Active verbs like “accomplished”, “launched”, or “developed” can make your resume stand out in front of recruiters and get you hired as a web developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Proofread and Ensure Readability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One thing is sure: recruiters frown upon grammatical or spelling errors, so you have to make sure your resume is free of them. Double-check or triple-check your resume before submitting it to ensure your written word creates a great first impression. To make this task easier, you can use a digital writing assistance tool like Grammarly, which detects spelling, punctuation, and other common errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-developer-resume-templates"&gt;
  &lt;/a&gt;
  &lt;strong&gt;🔥 Web Developer Resume Templates&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Your resume’s design also contributes to the first impression you make. You can use a premade resume template to organize your resume’s content better and make sure your application looks professional. Plus, a premade template helps you save time. &lt;/p&gt;

&lt;p&gt;Here are some of our top go-to resume builders that have some great resume templates:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.canva.com/resumes/templates/"&gt;Canva&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKac0nzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/canva-1024x640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKac0nzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/canva-1024x640.png" alt="canva"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Cost: Free plan available, other plans start at $12.99/month&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Canva is a graphic design platform that offers over 1000 resume templates. From simple and minimalistic templates to academic and professional ones, Canva has got them all. Many of the resume templates are included in the free plan, but some of the resume templates are only available with the paid plans. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://zety.com/resume-templates"&gt;Zety&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNhiXRLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/zetyyy-1024x640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNhiXRLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/zetyyy-1024x640.png" alt="zety"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Cost: templates can be used for free, $2.70 for a 14-day full access pass to download the finished product, or $5.95 for monthly access&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Zety’s selection of resume templates is not as varied, counting only 18+ templates. Their designs are more suited for professional resumes, with dark colors and simple fonts. When using Zety, you also get content suggestions while building your resume. Apart from resume templates, you also have access to CV templates and Cover Letter templates. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://novoresume.com/resume-templates"&gt;Novoresume&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHKc-oTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/novoresume-1024x640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHKc-oTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/novoresume-1024x640.png" alt="Novoresume"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cost: free plan with fewer features or 15€/month for the pro plan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Novoresume has a selection of 8 resume templates that you can fill up with your information and experience. Keep in mind that certain resume sections have a character limit that you have to pay attention to. Besides resume templates, you can also find CV and Cover Letter templates on Novoresume.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://resumegenius.com/resume-templates"&gt;ResumeGenius&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlIx6uN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/resumegenius-1024x640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlIx6uN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/resumegenius-1024x640.png" alt="resumegenius"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Cost: $1.95 for the 14-day trial plan, $39.95 for the monthly plan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ResumeGenius offers eight premium templates and many other free resume templates for Word. You just need to choose a template and fill in the information to get your resume done in minutes. You can’t leave any field blank and can only preview your resume after you’ve filled in all sections.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://resume.io/resume-templates"&gt;Resume.io&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6J4OIcBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/resume-io-1024x640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6J4OIcBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/resume-io-1024x640.png" alt="Resume.io"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Cost: Free plan available, $2.95 for the 7-day trial plan, $44.95 for the 6-months plan, $74.95 for the 12-months plan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On Resume.io, you can take your pick from 18 resume templates. Their template designs are split into Creative, Simple, Professional, and Modern categories so you can easily select your desired style. You need to register on their website to create a resume. You can see in real-time preview any changes that you make to the resume.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-developer-resume-examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;🤓 Web Developer Resume Examples&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We created web developer resume samples for two different scenarios so you can understand better how your resume should look. Whether you are making an entry-level web developer resume or a senior web developer resume, we’ve got you covered. Check them out:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Junior Web Developer Resume Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p4sFaru9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/Sage-Green-Minimalist-Creative-Resume.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p4sFaru9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/Sage-Green-Minimalist-Creative-Resume.jpg" alt="Junior Web Developer Resume Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Senior Web Developer Resume Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VboPH1Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/Black-Minimalist-Resume.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VboPH1Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/Black-Minimalist-Resume.jpg" alt="Senior Web Developer Resume Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All names and information used in these web developer resume samples are fictitious. Both templates are from Canva.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final Thoughts&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We hope the information in this article makes creating a web developer resume seem less intimidating. Follow these simple suggestions, and you can write a resume that wins you a web developer &lt;a href="https://www.creative-tim.com/blog/web-design/how-to-hack-a-coding-interview/"&gt;job interview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you worry about your lack of experience, you can start working on some personal web development projects that you could later use to make your resume seem more impressive. Check out our &lt;a href="https://www.creative-tim.com/templates"&gt;pre-made web templates&lt;/a&gt; that will give you a headstart with any web or mobile app.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to see all AWS services currently in use</title>
      <author>Juan Manuel Ramallo</author>
      <pubDate>Thu, 27 May 2021 13:52:02 +0000</pubDate>
      <link>https://dev.to/juanmanuelramallo/how-to-see-all-aws-services-currently-in-use-2ho</link>
      <guid>https://dev.to/juanmanuelramallo/how-to-see-all-aws-services-currently-in-use-2ho</guid>
      <description>&lt;p&gt;Ever wondered what a black hole looks like? My AWS Billing—or yours—might be one of the closest things to a black hole on earth. So scary, and so hard to remove things from it, firstly because we don’t know what services to remove nor the regions for those unwanted services.&lt;/p&gt;

&lt;p&gt;Let’s focus on how to remove things from the AWS bill, which is the main task that will definitively cleanse our bill. It’s so easy to spin up new services in AWS and forget about them, some might be cheap some others might not be that cheap; and given that AWS—at the time of this writing—provides over 175 services in several regions each, it becomes quite a task to manage all of your services in all of the regions you used.&lt;/p&gt;

&lt;p&gt;Enter the Bills page. Go to your Billing Dashboard, and then on the left sidebar, under the Billing section, click on Bills. Below AWS Service Charges you can see all of the services you have signed up for, and inside each of them, you can see the incurred costs per region. This way you just need to figure out what services are not in use, then go to their regions and remove them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtnzOcmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhr9b98txb013vma4u2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtnzOcmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhr9b98txb013vma4u2v.png" alt="Billing page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This way I was able to spot an unused RDS instance and a very old Amplify instance, both burning money with no returns.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>billing</category>
    </item>
    <item>
      <title>How I got selected as an Outreachy intern with Public Lab</title>
      <author>Manasa</author>
      <pubDate>Thu, 27 May 2021 13:50:35 +0000</pubDate>
      <link>https://dev.to/manasa2850/how-i-got-selected-as-an-outreachy-intern-with-public-lab-i2p</link>
      <guid>https://dev.to/manasa2850/how-i-got-selected-as-an-outreachy-intern-with-public-lab-i2p</guid>
      <description>&lt;p&gt;This summer, I've been selected as an Outreachy intern to work with Public Lab. This article is to share my experience of getting selected to the program as well as some tips for future applicants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Outreachy? How to apply?&lt;/strong&gt;&lt;br&gt;
Outreachy is a 3 month long Open Source program for people traditionally underrepresented in the technology industry.&lt;/p&gt;

&lt;p&gt;The application process consists of two steps:&lt;br&gt;
Initial application – applicants are asked to provide some basic details, confirm their time commitment, and answer 4 essay questions. Results of this are announced after a few weeks and the selected applicants move into the contribution period.&lt;br&gt;
Contribution period &amp;amp; Final application – during this period, applicants select an organization and project and make contributions to it. Applicants are also required to make a project proposal containing the project implementation details and a project execution timeline for the 3 months.&lt;/p&gt;

&lt;p&gt;Interns selected for the program work on their project for 3 months under the guidance of mentors and are paid a stipend of $6000.&lt;/p&gt;

&lt;p&gt;More details can be found at &lt;a href="https://www.outreachy.org/"&gt;https://www.outreachy.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My journey with Open Source and Public Lab&lt;/strong&gt;&lt;br&gt;
My first exposure to Open Source was through Hacktoberfest. It helped me understand the basics of version control and how Open Source projects worked in general.&lt;/p&gt;

&lt;p&gt;Subsequently, I was selected as a fellow in the MLH Open Source program where I worked on the codebase of dev.to. Through this fellowship, I learned Ruby on Rails, how to read and understand large codebases, how to do test-driven development, and most importantly, how to pair-program to fix bugs!&lt;/p&gt;

&lt;p&gt;In January, I started looking at organizations that had participated in the previous rounds of Outreachy. Since I was familiar with RoR, I wanted to go with an organization having that as its primary tech stack. Public Lab seemed to have some interesting projects so I decided to go with that(one of the best decisions!). The community was extremely welcoming and helped newcomers get started with their first issues and PRs. Contributing to Public Lab was an enjoyable process since the project was really interesting and the mentors readily helped whenever I was stuck. Soon, I had 15+ merged PRs and 20+ issues created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhvRNw_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ryd957c39jlekrs1s34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhvRNw_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ryd957c39jlekrs1s34.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once my initial application was selected, I started focussing on my proposal. After making several drafts and implementing the suggestions of mentors, I could finally come up with a good proposal.&lt;/p&gt;

&lt;p&gt;On May 17th, I was selected as an Outreachy intern! 🎉&lt;br&gt;
 &lt;br&gt;
&lt;strong&gt;Some tips to get selected for Outreachy&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select your project carefully – different people choose the project they’re applying to based on different criteria. Some people prefer projects having a familiar tech stack whereas others give priority to the organization rather than the tech stack.&lt;br&gt;
I selected the project ‘Tag and Topic System Enhancement’ since I was contributing to Public Lab for the past 3 months and had some familiarity with the tech stack (Ruby on Rails).&lt;br&gt;
Find out what suits you best and select a project accordingly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start early – this helps you get a headstart over other applicants! I started contributing to Public Lab in January, two months before the official contribution period started. This gave me time to understand the codebase and make a lot of contributions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a strong proposal – this is as important as your contributions. It is important to understand your project tasks thoroughly and come up with a timeline for them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it for now!&lt;br&gt;
Hope this article helps you when you’re applying. Good Luck!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>outreachy</category>
      <category>ruby</category>
    </item>
  </channel>
</rss>
