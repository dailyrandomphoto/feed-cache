<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Laravel Has Many Through Relationship Explained with Example</title>
      <author>M H Hasib</author>
      <pubDate>Thu, 27 May 2021 18:11:05 +0000</pubDate>
      <link>https://dev.to/mahmudulhsn/laravel-has-many-through-relationship-explained-with-example-22p4</link>
      <guid>https://dev.to/mahmudulhsn/laravel-has-many-through-relationship-explained-with-example-22p4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Eloquent Relationships&lt;/strong&gt; is one of the most useful and powerful features of the Laravel Framework. It is one of the reasons why I like Laravel most. Mainly it helps us to fetch or insert data in a very easy and efficient way.&lt;/p&gt;

&lt;p&gt;As we know there are several types of relationships in Laravel. We (developers) use the first four of the most. These are: &lt;strong&gt;One To One&lt;/strong&gt;, &lt;strong&gt;One To Many&lt;/strong&gt;, &lt;strong&gt;One To Many (Inverse) / Belongs To&lt;/strong&gt;, &lt;strong&gt;Many To Many&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I like &lt;strong&gt;Many To Many&lt;/strong&gt; and &lt;strong&gt;Has Many Through&lt;/strong&gt; most. Honestly speaking I enjoy these two relations most. Today I will explain &lt;strong&gt;Has Many Through&lt;/strong&gt; with an easy example. I hope you'll be very clear after finishing this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So let's jump to our main section&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let us have a scenario where we are creating a restaurant's items/menu and &lt;strong&gt;&lt;em&gt;Items&lt;/em&gt;&lt;/strong&gt; belongs to the &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Types&lt;/em&gt;&lt;/strong&gt; belongs to &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In simple words &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt; has many &lt;strong&gt;&lt;em&gt;Types&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt; has many &lt;strong&gt;&lt;em&gt;Items&lt;/em&gt;&lt;/strong&gt;. Now if we want all the Items which belongs to the Category, we need to keep the &lt;code&gt;category_id&lt;/code&gt; in &lt;strong&gt;&lt;em&gt;items&lt;/em&gt;&lt;/strong&gt; table. But out items mainly belongs to &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt;. Basically &lt;strong&gt;&lt;em&gt;Items&lt;/em&gt;&lt;/strong&gt; are directly connected to &lt;strong&gt;&lt;em&gt;Types&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So it's the case where we should use &lt;strong&gt;&lt;em&gt;Has Many Through&lt;/em&gt;&lt;/strong&gt;. By this kind of relation, we can fetch the data via another model. Like our scenario, we can directly fetch &lt;strong&gt;&lt;em&gt;Items&lt;/em&gt;&lt;/strong&gt; from &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt; via &lt;strong&gt;&lt;em&gt;Types&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For your better understand I have created a &lt;a href="https://github.com/mahmudulhsn/relationship-explained"&gt;GitHub Repository&lt;/a&gt;. You can visit this repository if you want. There I gave two types of examples for &lt;strong&gt;&lt;em&gt;Has Many Through&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I try to give a very simple example so that I can make you understand easily. So, Let's start.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier that we are work with &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;Item&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So I make my migration very simple. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here is my migration for &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt;. Let's have a look at this.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateCategoriesTable&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Run the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Reverse the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dropIfExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see I kept only category name here. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's have look at my &lt;strong&gt;&lt;em&gt;Category Model&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The attributes that are mass assignable.
     *
     * @var array
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here is my types migration. Let's have a look.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateTypesTable&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Run the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'types'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;unsignedInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'category_id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Reverse the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dropIfExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'types'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I just kept &lt;code&gt;category_id&lt;/code&gt; as foreign key. So &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt; is connected with &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here is the &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt; model.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The attributes that are mass assignable.
     *
     * @var array
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'category_id'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might find it very simple.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's jump to my &lt;strong&gt;&lt;em&gt;Items Migration&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateItemsTable&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Run the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;longText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;unsignedInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'type_id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Reverse the migrations.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dropIfExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here you can see that I just kept &lt;code&gt;type_id&lt;/code&gt; as a foreign key. So &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt; is connected with &lt;strong&gt;&lt;em&gt;Item&lt;/em&gt;&lt;/strong&gt;. I didn't keep any &lt;code&gt;category_id&lt;/code&gt; in &lt;strong&gt;&lt;em&gt;Items Migration&lt;/em&gt;&lt;/strong&gt;. Here is the main fact you need to understand that &lt;strong&gt;&lt;em&gt;Item&lt;/em&gt;&lt;/strong&gt; is not directly connected with &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt;. &lt;strong&gt;&lt;em&gt;Item&lt;/em&gt;&lt;/strong&gt; is connected with &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt; via &lt;strong&gt;&lt;em&gt;Type&lt;/em&gt;&lt;/strong&gt;. So that's why it's called &lt;strong&gt;&lt;em&gt;Has Many Through&lt;/em&gt;&lt;/strong&gt; relationship.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now here is the model for &lt;strong&gt;Item&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The attributes that are mass assignable.
     *
     * @var array
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'type_id'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will build a &lt;strong&gt;&lt;em&gt;Has Many Through&lt;/em&gt;&lt;/strong&gt; Relationship from &lt;strong&gt;Category&lt;/strong&gt; to &lt;strong&gt;Item&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's create this relation to &lt;strong&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/strong&gt; model.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The attributes that are mass assignable.
     *
     * @var array
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Get all of the items for the user.
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hasManyThrough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;items&lt;/code&gt; is the relation that will fetch all the items that belongs to the category via type. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also use relation like this:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hasManyThrough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'category_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Foreign key on the types table...&lt;/span&gt;
        &lt;span class="s1"&gt;'type_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Foreign key on the items table...&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Local key on the users table...&lt;/span&gt;
        &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="c1"&gt;// Local key on the categories table...&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it goes. Our &lt;strong&gt;&lt;em&gt;Has Many Through&lt;/em&gt;&lt;/strong&gt; relationship has been build up successfully. &lt;/p&gt;

&lt;p&gt;I want to give you another scenario where you can use this relationship for your better understand. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scenario&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suppose we have three models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team&lt;/strong&gt; (id, user_id, name)&lt;br&gt;
&lt;strong&gt;User&lt;/strong&gt; (id, name)&lt;br&gt;
&lt;strong&gt;Goal&lt;/strong&gt; (id, user_id, no.of goals)&lt;br&gt;
So, the relationship is like this.&lt;/p&gt;

&lt;p&gt;Team hasMany &lt;strong&gt;User&lt;/strong&gt; (&lt;code&gt;team_id&lt;/code&gt; inside &lt;strong&gt;User&lt;/strong&gt; model)&lt;/p&gt;

&lt;p&gt;User hasMany &lt;strong&gt;Goal&lt;/strong&gt; (&lt;code&gt;user_id&lt;/code&gt; inside &lt;strong&gt;Goal&lt;/strong&gt; model)&lt;/p&gt;

&lt;p&gt;See, from the relationship, we can see that here, the User model is an intermediary model.&lt;/p&gt;

&lt;p&gt;We can not store the &lt;code&gt;goal_id&lt;/code&gt; directly to the Team table because we already store the &lt;code&gt;goal_id&lt;/code&gt; in the User table.&lt;/p&gt;

&lt;p&gt;So, now the User model is in a relationship with the Team model. So, inside the User model, there is &lt;code&gt;team_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if we need to access how many goals the Team has created then, we can go through &lt;strong&gt;User&lt;/strong&gt; model.&lt;/p&gt;

&lt;p&gt;If that type of scenario is generated for your use case then and then you need to define &lt;strong&gt;&lt;em&gt;Has Many Through&lt;/em&gt;&lt;/strong&gt; relationship.&lt;/p&gt;

&lt;p&gt;I hope it is clear now.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#suggested-reads"&gt;
  &lt;/a&gt;
  Suggested Reads
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://laravel.com/docs/8.x/eloquent-relationships#has-many-through"&gt;Laravel Documentaiton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Revealing Multiple Content on Scroll Using JavaScript's Intersection Observer</title>
      <author>David Herbert💻🚀</author>
      <pubDate>Thu, 27 May 2021 18:01:05 +0000</pubDate>
      <link>https://dev.to/daveyhert/revealing-multiple-content-on-scroll-using-javascript-s-intersection-observer-1o7f</link>
      <guid>https://dev.to/daveyhert/revealing-multiple-content-on-scroll-using-javascript-s-intersection-observer-1o7f</guid>
      <description>&lt;p&gt;In this article, we would continue our discussion on JavaScript's Intersection Observer API and how we could easily use it to observe multiple elements in the DOM, revealing each as they come into view. As this is the second part of a two-series article, it is &lt;em&gt;mandatory&lt;/em&gt; that you've read the first part of the Intersection Observer series titled &lt;a href="https://dev.to/daveyhert/a-beginner-s-guide-to-the-intersection-observer-api-2d50"&gt;&lt;em&gt;Revealing Contents on Scroll Using JavaScript’s Intersection Observer API&lt;/em&gt;&lt;/a&gt;. It is the foundation from which this article is built on and the core essential basics of the Intersection Observer has been thoroughly covered in that article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of JavaScript (beginner level is perfectly fine as I'd explain everything in great details like I was explaining to a 5-year-old. :)&lt;/li&gt;
&lt;li&gt;Basic knowledge of HTML and CSS (you've built at least one basic webpage with them).&lt;/li&gt;
&lt;li&gt;A code editor (VS Code recommended).&lt;/li&gt;
&lt;li&gt;A browser of course (Chrome or Firefox recommended).&lt;/li&gt;
&lt;li&gt;You've read the first article of the series, or at least have a basic understanding of the Intersection Observer. 👇
&lt;div class="ltag__link"&gt;
  &lt;a href="/daveyhert" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uongVoqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--pt29wLQu--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/455980/b63e9724-a26e-4cc2-99c6-f60b1ef7b2e4.jpg" alt="daveyhert image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/daveyhert/a-beginner-s-guide-to-the-intersection-observer-api-2d50" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Revealing Contents on Scroll Using JavaScript’s Intersection Observer API&lt;/h2&gt;
      &lt;h3&gt;David Herbert💻🚀 ・ May 22 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-basic-htmlcss-page"&gt;
  &lt;/a&gt;
  Creating a Basic HTML/CSS Page
&lt;/h2&gt;

&lt;p&gt;As with the previous article, we’ll start by creating a simple HTML page with a hero header section and a title inside of it. Then below the header, we'll create 3 sections and for each section, we will create a title and a content box with two columns inside it. Each column would have an image inside (one in the left column and the other in the right column). The idea is as we approach each section, the columns would slide in with the image in them from their respective sides i.e the one on the left would come in from the left side of the viewport, while the one on the right would come in from the right. So let's dive into the HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;!-- Header --&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;h1&amp;gt;Just a Header&amp;lt;/h1&amp;gt;
      &amp;lt;h3&amp;gt;Scroll to Reveal Content&amp;lt;/h3&amp;gt;
    &amp;lt;/header&amp;gt;

    &amp;lt;!--Section 1 --&amp;gt;
    &amp;lt;section class="section-1"&amp;gt;
      &amp;lt;h2&amp;gt;Section 1&amp;lt;/h2&amp;gt;
      &amp;lt;div class="content"&amp;gt;
        &amp;lt;div class="left-column"&amp;gt;
          &amp;lt;img class="img" src="img/image1.jpg"/&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="right-column"&amp;gt;
          &amp;lt;img class="img" src="img/image2.jpg"/&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;

    &amp;lt;!--Section 2 --&amp;gt;
    &amp;lt;section class="section-2"&amp;gt;
      &amp;lt;h2&amp;gt;Section 2&amp;lt;/h2&amp;gt;
      &amp;lt;div class="content"&amp;gt;
        &amp;lt;div class="left-column"&amp;gt;
          &amp;lt;img class="img" src="img/image3.jpg"/&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="right-column"&amp;gt;
          &amp;lt;img class="img" src="img/image4.jpg"/&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;

    &amp;lt;!-- Section 2 --&amp;gt;
    &amp;lt;section class="section-3"&amp;gt;
      &amp;lt;h2&amp;gt;Section 3&amp;lt;/h2&amp;gt;
      &amp;lt;div class="content"&amp;gt;
        &amp;lt;div class="left-column"&amp;gt;
          &amp;lt;img class="img" src="img/image5.jpg"/&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="right-column"&amp;gt;
          &amp;lt;img class="img" src="img/image6.jpg"/&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the CSS, we'll give the header and each section a height of &lt;code&gt;100vh&lt;/code&gt;, align the title text to the &lt;code&gt;center&lt;/code&gt;, then set the content box to a 2-column view (each column taking &lt;code&gt;50%&lt;/code&gt; of the viewport's &lt;code&gt;width&lt;/code&gt;) and vertically centring everything using &lt;code&gt;flexbox&lt;/code&gt;. We'll then set each image to a &lt;code&gt;block&lt;/code&gt; element, give the images a fixed responsive &lt;code&gt;width&lt;/code&gt; and then using &lt;code&gt;margin:auto&lt;/code&gt; to horizontally centre each in their respective column.  Now to add a bit of aesthetics to our design, we'll apply a gradient background colour to each section to separate them, import a decent font from Google font and then add a bit of polaroid depth to the images using &lt;code&gt;box-shadow&lt;/code&gt;. Lastly, we will create two hidden classes (&lt;code&gt;hidden-left&lt;/code&gt; and &lt;code&gt;hidden-right&lt;/code&gt;) that would be responsible for hiding and revealing each content's column later on using JavaScript and apply a transition effect on each column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url("https://fonts.googleapis.com/css2?family=Nunito:wght@400;800&amp;amp;display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

h1, h2, h3 {
  text-align: center;
  margin-bottom: 3rem;
  color: #222;
  text-align: center;
  font-family: "Nunito", sans-serif;
}

h1 {
  font-size: 4rem;
  font-weight: 800;
}

h2 {
  margin-bottom: 5rem;
  font-size: 3rem;
}

h3 { font-size: 2rem;}

.img {
  width: 95%;
  max-width: 550px;
  display: block;
  margin: 0 auto;
  border-radius: 6px;
  box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.5);
}

section, header {
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  background: #fdfbfb;
  background-image: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%);
  overflow: hidden;
}

.section-2, header {
  background: #ebedee;
  background-image: linear-gradient(135deg, #f5f7fa 0%, #cfd4dd 100%);
}

.content {
  display: flex;
}

.content &amp;gt; div { 
  width: 50%;
}

.hidden-left {
  opacity: 0;
  transform: translateX(-100%);
}

.hidden-right {
  opacity: 0;
  transform: translateX(100%);
}

.left-column {
  transition: all 1.5s ease-in-out;
}
.right-column {
  transition: all 1.5s ease-in-out;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting layout👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P833GEIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvw5fjubcs273uvklp2b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P833GEIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvw5fjubcs273uvklp2b.gif" alt="Layout Output 2.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great, we have our basic webpage set up, now let's dive into JavaScript and talk about how we can observe each section using the Intersection Observer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-intersection-observer-api-on-multiple-elements"&gt;
  &lt;/a&gt;
  Implementing the Intersection Observer API on Multiple Elements
&lt;/h2&gt;

&lt;p&gt;Recall from the previous article that the steps for observing an element are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the target element you wish to observe &lt;code&gt;section&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Define an &lt;code&gt;options&lt;/code&gt; object with your customisation options for the Intersection.&lt;/li&gt;
&lt;li&gt;Create the actual &lt;code&gt;Observer&lt;/code&gt; using its object constructor function and pass it a callback function and the options object &lt;code&gt;new IntersectionObserver(callback, options)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Pass the target element to be observed to the &lt;code&gt;Observer&lt;/code&gt; using the observe method &lt;code&gt;Observer.observe(section)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, define the &lt;code&gt;callback&lt;/code&gt; function with the desired Intersection behaviour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it! If you can vividly remember these steps above then we can begin our implementation of the observer on multiple sections, but if you can't recall exactly what we did previously, you're advised to quickly go read up the  &lt;a href="https://dev.to/daveyhert/a-beginner-s-guide-to-the-intersection-observer-api-2d50"&gt;part one&lt;/a&gt; before continuing past here. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Intersection Observer can accept only one element for observation at a time. This means if you need to observe multiple elements you'd have to iterate (loop) over all of them and observe each of them separately:&lt;/p&gt;

&lt;p&gt;Now let's begin, we'll start by selecting all 3 sections that we wish to observe.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const allSections = document.querySelectorAll("section");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This selector returns a Nodelist containing all 3 sections in our webpage&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HyitVyVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf26v814quka7momjefl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HyitVyVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf26v814quka7momjefl.png" alt="new nodelist.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A NodeList is simply a collection of elements in the DOM that is stored in what looks like an array, and although it isn't an array, we can loop through a NodeList like actual arrays.&lt;/p&gt;

&lt;p&gt;Next, we will define the &lt;code&gt;options&lt;/code&gt; object needed to customize the Intersection. We will set the &lt;code&gt;root&lt;/code&gt; element as the browser &lt;code&gt;null&lt;/code&gt;, then set the &lt;code&gt;threshold&lt;/code&gt; to &lt;code&gt;0.3&lt;/code&gt; i.e the callback should be fired when 30% of the target section comes into view. We won't specify any &lt;code&gt;rootMargin&lt;/code&gt; as we have no need for it, we only used it previously to discuss its use case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const options = {
    root: null,
    threshold: 0.3,
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that out of the way, we can finally create an observer using its default constructor function and then pass it a callback function and the &lt;code&gt;options&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const sectionObserver = new IntersectionObserver(callback, options);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we have to tell the &lt;code&gt;sectionObserver&lt;/code&gt; what it should observe in the DOM by passing the element to the observer. But since we are interested in multiple elements that we previously stored in a NodeList, we simply have to loop through this NodeList and for each iteration (loop), we pass each section element to the observer. By the end of the loop, all 3 sections would be under observation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;allSections.forEach(section =&amp;gt; {
  sectionObserver.observe(section);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through what we just did. We first selected the target sections to be observed and stored them in a NodeList &lt;code&gt;allSection&lt;/code&gt;, then we created an actual observer &lt;code&gt;sectionObserver&lt;/code&gt;, and finally we told the observer what to observe by looping through the &lt;code&gt;allSection&lt;/code&gt; NodeList using a &lt;code&gt;forEach()&lt;/code&gt; method and then we passed each target section to be observed into the observer using the &lt;code&gt;observe()&lt;/code&gt; method. That's it, we have everything set up, the only thing left now is defining our callback function to be executed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#important-detail"&gt;
  &lt;/a&gt;
  Important Detail
&lt;/h4&gt;

&lt;p&gt;Recall from the previous article that the observer always fires the callback function once when our webpage loads for the first time? Well, that "once" only applies to when you are observing a single element, but when you're observing multiple elements the callback gets fired once for each element under observation. This does not mean there is an actual Intersection, but the elements are simply getting registered by the observer. If we consoled log the &lt;code&gt;entries&lt;/code&gt; in our callback, we'd get the array of each element's entry that was fired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiLvBtML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1ju7a4xfpqsm66kzvou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiLvBtML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1ju7a4xfpqsm66kzvou.png" alt="default behaviour.png"&gt;&lt;/a&gt;&lt;br&gt;
This can be very confusing for most beginners and trigger the wrong behaviour in their code if not properly guarded or written.&lt;/p&gt;

&lt;p&gt;Now that we have the observer set up, let's hide all the content (columns) that we wish to reveal on Intersection by adding the hidden classes to them and then writing a callback function that removes these hidden classes on Intersection. We could have simply added the classes manually in our HTML, but that's bad practice as a user's browser might have JavaScript turned off, which would result in our webpage not displaying any content as JavaScript wouldn't be able to remove the hidden classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelectorAll(".left-column").forEach(column =&amp;gt; {
  column.classList.add("hidden-left");
})
document.querySelectorAll(".right-column").forEach(column =&amp;gt; {
  column.classList.add("hidden-right");
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we just do? We simply selected all the columns on the left and then looped through them using &lt;code&gt;forEach()&lt;/code&gt; and then added the &lt;code&gt;hidden-left&lt;/code&gt; class to each column. Then we did the same exact thing for the right columns using the &lt;code&gt;hidden-right&lt;/code&gt; class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-callback-function"&gt;
  &lt;/a&gt;
  The Callback Function
&lt;/h2&gt;

&lt;p&gt;We can now define the callback function, but before getting into that I'd like to talk about something I did not get to cover in the previous article and that's how to un-observe (stop observing) a target element after its Intersection. Now you might be wondering why you'd want to stop observing a target element after an Intersection? Well, let's take a cursory look at the behaviour of the webpage from the previous article.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HYoC8o6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x911pcjdgyqoq3x5hxjb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HYoC8o6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x911pcjdgyqoq3x5hxjb.gif" alt="previous layout.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that the image content keeps sliding in as it comes into view and then sliding back out as we scroll out of view, which means the callback function keeps firing over and over again for as long as the user keeps scrolling on the webpage. We might not always want this behaviour as we might simply want the content to reveal itself once it comes into view and nothing more (it should remain visible even if we scroll out of view).&lt;/p&gt;

&lt;p&gt;For this, the observer has an &lt;code&gt;.unobserve()&lt;/code&gt; method that can be used to un-observe a target element, but to be able to use this method, we'd have to pass the actual observer that is firing the callback function to this same callback function as a second argument. Recall that the callback function by default receives an &lt;code&gt;entries&lt;/code&gt; array when the callback function is fired by the Observer? Well, that's not the only thing that the callback function can receive, the observer itself can be passed to it as a second argument so we can un-observe an element with it. With that in mind, let's create our callback function before going over it line by line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function callback(entries, observer) {
  const [entry] = entries;

  if (!entry.isIntersecting) return;

  //   get the class name of the target section that came into view
  const curSectionsName = entry.target.getAttribute("class");

  //   now target that specific section
  const curSection = document.querySelector(`.${curSectionsName}`);

 //   remove the hidden classes (DOM traversing)
  curSection.lastElementChild.firstElementChild.classList.remove("hidden-left");
  curSection.lastElementChild.lastElementChild.classList.remove("hidden-right");

  observer.unobserve(entry.target);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's dissect the callback function line by line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;const [entry] = entries&lt;/code&gt;;
Again, recall that the Observer passes an entries array to the callback containing an IntersectionObserverEntry object? We simply deconstructed (extracted the object in) the array and stored it in an

&lt;code&gt;entry&lt;/code&gt;

variable to make it easier to directly access the properties stored in that object.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;if (!entry.isIntersecting) return&lt;/code&gt;; &lt;br&gt;
This line of code is considered a guard. Because the callback is fired for each observed section by default, we only want to do something (run the code below this line) when there is an actual intersection (i.e when &lt;code&gt;isIntersecting&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;), we are currently checking to see if there is a &lt;code&gt;false&lt;/code&gt; Intersection and if that is the case, we want the function to terminate itself (to simply return without running any of the code below this line of code). Consider it a body-guard if you would. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;const curSectionsName = entry.target.getAttribute("class")&lt;/code&gt;;&lt;br&gt;
We simply check the &lt;code&gt;target&lt;/code&gt; property in the &lt;code&gt;entry&lt;/code&gt; object for the exact section that came into view (that has intersected with the viewport), then we take its class name and store it in a variable &lt;code&gt;curSectionsName&lt;/code&gt;. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;const curSection = document.querySelector(&lt;/code&gt;.${curSectionsName}&lt;code&gt;)&lt;/code&gt;; Because we previously only fetched the class name of the section that came into view, this line simply targets that exact section in the DOM using the query selector and then we passed the current sections class name stored in &lt;code&gt;curSectionsName&lt;/code&gt; to the selector (we used template strings to pass that variable into our selector). Then we stored the current section in &lt;code&gt;curSection&lt;/code&gt;. &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;curSection.lastElementChild.firstElementChild.classList.remove("hidden-left")&lt;/code&gt;;&lt;br&gt;
Now that we have the section in view, we do not want to do anything with the section itself, but the two columns inside it. But do you recall from our HTML that we put both columns in a &lt;code&gt;content&lt;/code&gt; container? So we have to traverse the DOM (move around in the DOM) to grab them. Let's take a quick look at the logic (for beginners). &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;curSection&lt;/code&gt;: Recall that this is the current section in the viewport.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.lastElementChild&lt;/code&gt;: Because each section has a &lt;code&gt;h2&lt;/code&gt; text and a &lt;code&gt;content&lt;/code&gt; container as children, we simply target the last child i.e the &lt;code&gt;content&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.firstElementChild&lt;/code&gt;: Now that we have access to the &lt;code&gt;content&lt;/code&gt; container holding both columns, we use this line selector to targets the first column &lt;code&gt;left-column&lt;/code&gt; in the content element as it is the first element in the container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.classList.remove("hidden-left")&lt;/code&gt;: Then we simply check the classList of this column and remove the hidden class we previously added to it. 
That's it, we simply repeat the exact same thing for the right column in the next line of code. 
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;observer.unobserve(entry.target)&lt;/code&gt;: Recall that while defining the callback function, we passed the observer firing this same function as a second argument to the function itself? As a result our callback now has access to the Observer firing it. We simply tell the observer to stop observing the target section that came into view after its content has been revealed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all, our webpage should now behave as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pg3u7cM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qogb0f7wqchteznnich4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pg3u7cM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qogb0f7wqchteznnich4.gif" alt="Final layout 3.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, once we scroll towards each observed section, once 30% of the section comes into view in our viewport an Intersection is triggered and the callback is fired. The hidden classes get removed and the columns are revealed as they slide back into their original position. Then the Observer stops observing that section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://revealcontentsonscroll.netlify.app/"&gt;Demo&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/DaveHert/Multiple-Intersection-Observer"&gt;Source Code&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congrats!!!🎉 You have successfully learnt how to observe multiple elements in the DOM using the Intersection Observer, how to reveal multiple contents while scrolling the webpage and how to un-observe an element after an Intersection.&lt;/p&gt;

&lt;p&gt;If you found this article helpful in any way, do well to leave a reaction and follow me for more awesome contents. And if you've got any questions or spotted any errors, please do well to leave some feedback. Thank you for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"&gt;MDN Web Docs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.w3.org/TR/intersection-observer/"&gt;W3.Org&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>animation</category>
    </item>
    <item>
      <title>My Journey to GSoC</title>
      <author>Kapil Bansal</author>
      <pubDate>Thu, 27 May 2021 17:59:16 +0000</pubDate>
      <link>https://dev.to/devkapilbansal/my-journey-to-gsoc-1a50</link>
      <guid>https://dev.to/devkapilbansal/my-journey-to-gsoc-1a50</guid>
      <description>&lt;p&gt;If you are reading this blog, then you probably know about GSoC already.&lt;br&gt;
If not, then Google Summer of Code, abbreviated as GSoC is a 10 week global summer program administrated by Google which mainly focuses on bringing student developers into the field of Open Source and work on something useful.&lt;br&gt;
The main aim of this program remains the same, i.e. promoting Open Source. It is a kind of mentorship program where Open Source Organizations come forward with their project ideas. Students are then allowed to make proposals on any of those ideas or propose a new one. Accepted students work closely with their mentors and learn about best practices in Software Development.&lt;br&gt;
It is a win-win situation for everyone. Students get a chance to learn from their mentors and earn real world exposure. Sometimes, the syllabus taught in Colleges may be obsolete preventing students to learn about the current tech stack prevailing in the market. Open Source programs like GSoC try to bridge that gap. Organizations also get some good contributors to make their project better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-open-source"&gt;
  &lt;/a&gt;
  Why Open Source?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-v1BF_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2q34d6oiqzbmz5tffuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-v1BF_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2q34d6oiqzbmz5tffuo.png" alt="Open Source Word Cloud"&gt;&lt;/a&gt;&lt;br&gt;
Before knowing why, you should know what, i.e. *&lt;em&gt;What is Open Source? *&lt;/em&gt;&lt;br&gt;
A google search may reveal better results but here are two points that I will reshare.&lt;br&gt;
In Open Source,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can access, modify and resue it freely.&lt;/li&gt;
&lt;li&gt;Its source code can be inspected, modified and enhanced by anyone in the world.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYawNOUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9med2rlwhovskwpm3ht.png" alt="Quote by Linus Torvalds"&gt;
Open Source is one of the best things in software industry as Open Source technologies die hard. And what I believe is, Open Source is the easiest way to learn and grow.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zr6W1X19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wep1pnzz8ycmn6c49pdl.jpeg" alt="why open source"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Okay, I understand that I should contribute to Open Source. I too want to, but how? That codebase is already big and a lot of contributors with more experience than me are working. Then why will they need me? Also, I don't know exactly what is happening in the code?"&lt;/em&gt;  -  If you  too have some similar feelings, then you are not alone. Almost everyone got intimated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To everyone already indulge in it, whenever I ask these questions, reply remains same, "Just get started". No matter if you understand it clearly or not, if you have relevant experience, just start. You will learn as time passes. Be consistent and try to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How To Get Started?
&lt;/h2&gt;

&lt;p&gt;At first, you should know what the software is trying to do. Try to follow instructions, setup the project locally and play with it. Almost every Open Source organization documents how newcomers can help them. Go through that documentation and try to follow the same.&lt;/p&gt;

&lt;p&gt;You may stuck at points, but it is fine. Ask your doubts in community. You can find communication channel too easily, it may be a mailing list, or any other messaging service.&lt;/p&gt;

&lt;p&gt;There is no harm in solving beginner friendly issues first, doing 2–3 lines changes will work too. Once you feel good, you can move forward to other issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openwisp"&gt;
  &lt;/a&gt;
  &lt;a href="https://openwisp.io/docs/general/values.html#what-is-openwisp"&gt;OpenWISP&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;OpenWISP is a software platform designed to ease and automate the management of networks, with a special focus on wireless networks, mainly used in public wifi, mesh networks, community networks and IoT scenarios.&lt;/p&gt;

&lt;p&gt;OpenWISP is built with Django, using its features like modularity and extendability. It's lot easier to customise it for your use case.&lt;/p&gt;

&lt;p&gt;My application is selected with OpenWISP this year. I will be working on Packaging the code on OpenWRT this GSoC. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZA7oE3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1ysazbaje53vuchgnmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZA7oE3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1ysazbaje53vuchgnmu.png" alt="GSoC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-openwisp"&gt;
  &lt;/a&gt;
  Why OpenWISP?
&lt;/h2&gt;

&lt;p&gt;My main reason for choosing is my familiarity with Django. Also, OpenWISP deals with something that I am keen to learn, i.e. Networks. Although I was not able to understand anything while starting but OpenWISP community helps me with each step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://openwisp.org"&gt;OpenWISP&lt;/a&gt; is a good choice for anyone interested in Computer Networks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-apply-for-gsoc"&gt;
  &lt;/a&gt;
  How to apply for GSoC?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://summerofcode.withgoogle.com/how-it-works/#timeline"&gt;GSoC timeline&lt;/a&gt; is announced at year end. You can check eligibility, and if you are they you can apply. Accepted organizations are announced usually in February. But, you need not to wait for this. You can start contributing now. Have a look at GSoC archive where you can have a list of previously selected GSoC organizations. Although, your focus should be to learn and contribute. Organizations may have some more rules to take part in GSoC with them, for which you should communicate with the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Missed GSoC, you need not to worry.&lt;/strong&gt; There are a lot of other opportunities too. &lt;/p&gt;

&lt;p&gt;At last, remember "Open Source is for Everyone" and "Open Source is about Collaboration, not Competition."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-pr-got-merged"&gt;
  &lt;/a&gt;
  My first PR got merged
&lt;/h2&gt;

&lt;p&gt;I contribute in OpenWISP in August, when I was sitting idle waiting for next semester to start. As I learned Git just a month or two ago, and that was the only prerequisite I heard of, I decided to contribute. Luckily, I found an &lt;a href="https://github.com/openwisp/django-rest-framework-gis/issues/230"&gt;easy issue related to formatting&lt;/a&gt;. Although it was an issue easy it took a week for the &lt;a href="https://github.com/openwisp/django-rest-framework-gis/pull/231"&gt;PR to get ready for merge&lt;/a&gt;. Here, I learned about flake8 and other formatters for the first time.&lt;br&gt;
Getting my first PR merged, was no less than an achievement for me. After that, I start looking for an issue that I understand and try to solve it.&lt;br&gt;
I learned a lot more things in the journey. Docker, decorators, RST syntax, continuos intergration are some of them.  &lt;/p&gt;

&lt;p&gt;Further Reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/code-for-cause/i-got-selected-for-gsoc-9ef5510bfa97"&gt;I got selected for GSoC by @pandafy &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dDE3tOa4JUs"&gt;20 Open Source Programs &amp;amp; Paid Virtual Internships You Can Apply to!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>gsoc</category>
      <category>openwisp</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Top 10 Websites for Developers</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Thu, 27 May 2021 17:58:33 +0000</pubDate>
      <link>https://dev.to/line/top-10-websites-for-developers-2h6</link>
      <guid>https://dev.to/line/top-10-websites-for-developers-2h6</guid>
      <description>&lt;p&gt;Before Starting, I would like to tell you that this is part 2 of this series, Websites For Developers. &lt;a href="https://dev.to/line/top-10-websites-for-developers-435h"&gt;PART 1&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hacker News    ( &lt;a href="https://news.ycombinator.com/?ref=hackernoon.com"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hacker News is a website where people submit links and have interesting discussions around them. &lt;/p&gt;

&lt;p&gt;As this website is owned by Y Combinator, most of the topics are related to startups, tech, Coding and other silicon valley stuff.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ProductHunt    ( &lt;a href="https://producthunt.com/?ref=hackernoon.com"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ProductHunt is a website where developers and companies launch websites, apps, etc that have recently built.&lt;/p&gt;

&lt;p&gt;Developers can use this way to tell the world about their apps that they built.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dzone.com    ( &lt;a href="http://dzone.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;) &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On this website, there are many interesting blogs from experts for programming and tech. By reading this, developers can increase their knowledge. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Spring.io     ( &lt;a href="http://spring.io/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;) &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This website makes your java code modern &amp;amp; fast by using spring framework. Mainly Focusing on Java developers, other developers can ignore this site.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;hackerrank.com       ( &lt;a href="http://hackerrank.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This amazing website has many coding problems that you can practice making you a perfect software developer and a perfect employee for your company.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reddit       ( &lt;a href="https://www.reddit.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Come On, who doesn't know Reddit, this doesn't need any explanation, but here it is for nerds -&lt;/p&gt;

&lt;p&gt;Reddit is a source for everything, Nicknamed “the front page of the internet”, Reddit has endless things called “subreddits” where users submit content related to that specific subreddit. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;YouTube       ( &lt;a href="https://youtube.com"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Again this even doesn't need any explanation, but here it is-&lt;/p&gt;

&lt;p&gt;YouTube is an online video platform owned by Google. On YouTube, you can search content, tutorials, explanations and everything you can imagine for free. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CSS Tricks       ( &lt;a href="https://css-tricks.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you're just getting started with HTML and CSS, I highly recommend that you to try CSS-Tricks, this can help you with  many new tips, tricks, tactics, and methods about CSS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CodePen.io        ( &lt;a href="https://codepen.io/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a social development platform where you can write your code in the browser and see the results of your builds. You can save, share, and grow your own community.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Quora         ( &lt;a href="https://www.quora.com/"&gt;&lt;em&gt;visit website&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Quora is a very under-rated website for developers, but you can take a lot of help from quora, like skills, shortcuts, tricks, news, forums and many others. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now that wraps our list for Part 2, thank you guys for showing so much love on part 1. Some of you don't know but I put everything 1 because I think we can't rank these websites, each of them are equally important&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9XeQHJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vla5ovhgvy3j8e8ehc6w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Setup Eslint, Prettier with Typescript and React</title>
      <author>Anjan Shomodder</author>
      <pubDate>Thu, 27 May 2021 17:29:43 +0000</pubDate>
      <link>https://dev.to/thatanjan/setup-eslint-prettier-with-typescript-and-react-3loe</link>
      <guid>https://dev.to/thatanjan/setup-eslint-prettier-with-typescript-and-react-3loe</guid>
      <description>&lt;p&gt;Eslint is a linter which enforces developer to write good and consistent code all over Project. Prettier is a good formatter tool that automatically formats the source code.&lt;/p&gt;

&lt;p&gt;In this blog I will teach you, how to setup eslint, prettier with TypeScript and React. Even if you are not using TypeScript or react you can still follow along.&lt;/p&gt;

&lt;p&gt;I have already created a video about it on my youtube channel. Check that out for more details.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
If yout like this video, Please like share and Subscribe to my channel.&lt;/p&gt;

&lt;p&gt;For react, I will use Nextjs. Again the principles are the same. You can also use it with create-react-app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#editor-setup"&gt;
  &lt;/a&gt;
  Editor setup
&lt;/h2&gt;

&lt;p&gt;You need to install eslint and prettier plugins for your editor. To learn more, visit these links.&lt;br&gt;
&lt;a href="https://eslint.org/docs/user-guide/integrations#editors"&gt; Eslint &lt;/a&gt;&lt;br&gt;
&lt;a href="https://prettier.io/docs/en/editors.html"&gt;Prettier&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create-next-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then put your app name. I am going to call it &lt;code&gt;eslint-prettier-typescript-react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that it will set everything for you.&lt;/p&gt;

&lt;p&gt;Now change directory to the folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;eslint-prettier-typescript-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#typescript-setup-for-nextjs-optional"&gt;
  &lt;/a&gt;
  TypeScript setup for Nextjs (optional)
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install typescript packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; typescript @types/react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then start the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will fill up the &lt;code&gt;tsconfig.json&lt;/code&gt; file. Now convert all the javascript files to typescript files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-absolute-import"&gt;
  &lt;/a&gt;
  Setup Absolute import
&lt;/h3&gt;

&lt;p&gt;Absolute Import vs Relative Import&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4CG_cu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/400gedk393xdn0h631ql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4CG_cu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/400gedk393xdn0h631ql.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;tsconfig.json&lt;/code&gt; file. create a new property &lt;code&gt;baseUrl&lt;/code&gt; and set the import point. I will create a &lt;code&gt;src&lt;/code&gt; folder and put all source code inside that.&lt;/p&gt;

&lt;p&gt;So add this extra code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"next-env.d.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"**/*.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"**/*.tsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-eslint"&gt;
  &lt;/a&gt;
  Setup eslint
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install eslint globally on your computer.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    yarn global add eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Inside your project initialize eslint.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Choose 3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM7Xfqqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5qy6a4goz8yjtwgbm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM7Xfqqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5qy6a4goz8yjtwgbm8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFqqN3Dl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcm9x4buujeufr1skj33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFqqN3Dl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcm9x4buujeufr1skj33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose your framework if you are using. In my case &lt;code&gt;react&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmAof9OI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw6b38hxdgjgrqp1d0jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmAof9OI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw6b38hxdgjgrqp1d0jt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are using TypeScript then &lt;code&gt;yes&lt;/code&gt;. I am using TypeScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSw2gj_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4eutfvqk6vweeu4phcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSw2gj_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4eutfvqk6vweeu4phcg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser in my case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8vK4xy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iql056fynfoz6390k4m7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8vK4xy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iql056fynfoz6390k4m7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a popular style guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pUts8dB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrsxzg3l71ah8p1vea9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pUts8dB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkrsxzg3l71ah8p1vea9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I would like to use Airbnb style guide. You can choose any style guide. But Airbnb is good and I recommend it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4JjhjEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk8bfygud485tck9hh3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4JjhjEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk8bfygud485tck9hh3c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I will use json for my config file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TG4YWbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntnjtfvmpvnwbbyffp64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TG4YWbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntnjtfvmpvnwbbyffp64.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will ask you to install some packages to Install with &lt;code&gt;npm&lt;/code&gt;. If you want
to use &lt;code&gt;npm&lt;/code&gt; then go ahead. But I will use yarn. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mTXKVSHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8u06509o0ztw7h3mlag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mTXKVSHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8u06509o0ztw7h3mlag.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So For those of who are using yarn like me, You can copy and paste package names and install them.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#with-typescript"&gt;
  &lt;/a&gt;
  With typescript:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; eslint-plugin-react @typescript-eslint/eslint-plugin@latest eslint-config-airbnb@latest eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react-hooks  @typescript-eslint/parser@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#without-typescript"&gt;
  &lt;/a&gt;
  Without typescript:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; eslint-plugin-react  eslint-config-airbnb@latest eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react-hooks  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will create a eslint config file &lt;code&gt;.eslintrc&lt;/code&gt;. It will be a hidden file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettier-setup"&gt;
  &lt;/a&gt;
  Prettier Setup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let's install prettier.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; eslint-config-prettier prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a prettier config file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .prettierrc.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can put your config in &lt;code&gt;.prettierrc.json&lt;/code&gt; file in json format. You can find the options from &lt;a href="https://prettier.io/docs/en/configuration.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My basic config for prettier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"jsxSingleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"arrowParens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"avoid"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are done with prettier. Let's setup eslint config.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eslint-config-setup"&gt;
  &lt;/a&gt;
  ESlint config setup
&lt;/h3&gt;

&lt;p&gt;Your &lt;code&gt;.eslintrc&lt;/code&gt; file should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="nl"&gt;"browser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="nl"&gt;"es2021"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="s2"&gt;"plugin:react/recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="s2"&gt;"airbnb"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"parserOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="nl"&gt;"ecmaFeatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="nl"&gt;"ecmaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="nl"&gt;"sourceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to extend the eslint config with prettier. So add &lt;code&gt;prettier&lt;/code&gt; to &lt;code&gt;extends&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="s2"&gt;"plugin:react/recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="s2"&gt;"airbnb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#lets-fix-some-eslint-errors"&gt;
  &lt;/a&gt;
  Let's fix some eslint errors
&lt;/h6&gt;

&lt;p&gt;To turn any rule &lt;code&gt;off&lt;/code&gt; or &lt;code&gt;on&lt;/code&gt;, add the rules to the rules array. You can find the docs from &lt;a href="https://eslint.org/docs/user-guide/configuring/rules"&gt;here&lt;/a&gt;. Please watch my video to understand it well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;allow jsx on other extensions.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"react/jsx-filename-extension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".jsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".tsx"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;File extension on import statement.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"import/extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"tsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"never"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Import unresolved error for absolute import(if you are using).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"settings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"import/resolver"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".jsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".tsx"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"moduleDirectory"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node_modules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find my Eslint config from &lt;a href="https://gist.github.com/thatanjan/c3c2622e0360ecacb7aba9c7418023a1"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that's it for today. I hope I have covered everything that you need to know about how to setup. I would highly recommend you to watch the youtube video of mine &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I also have a Blogging site. Feel free to visit &lt;a href="https://www.culescoding.space/"&gt;Cules Coding&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zxEjMEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guvhv5c2tja4s3fp4rbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zxEjMEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guvhv5c2tja4s3fp4rbr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any question please comment down below. If you want to reach out to me, You can follow me on any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. Until then stay safe and good bye.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#who-am-i"&gt;
  &lt;/a&gt;
  Who am I?
&lt;/h4&gt;

&lt;p&gt;My name is Anjan. I am a full stack web developer from Dhaka, Bangladesh.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-problems-do-i-solve"&gt;
  &lt;/a&gt;
  What problems do I solve?
&lt;/h4&gt;

&lt;p&gt;I can create complex full stack web applications like social media application, blogging, e-commerce website and many more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;I love to solve problems and develop new ideas. I also enjoy sharing my knowledge to other people who are wiling to learn. That's why I write blog posts and run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#think-we-should-work-together"&gt;
  &lt;/a&gt;
  Think we should work together?
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#feel-free-to-contact-me"&gt;
  &lt;/a&gt;
  Feel free to contact me
&lt;/h5&gt;

&lt;p&gt;Email: &lt;a href="mailto:anjancules@gmail.com"&gt;anjancules@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;portofolio: &lt;a href="https://anjan.vercel.app/"&gt;anjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-my-channel"&gt;
  &lt;/a&gt;
  About My channel:
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#why-would-you-subscribe-to-cules-coding"&gt;
  &lt;/a&gt;
  Why would you subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt; Cules Coding &lt;/a&gt; will teach you full stack development. I will teach you not only the basic concepts but also the advanced concepts that other youtube channels don't cover. I will also teach you Data Structures and Algorithms with abstraction and without Math. You will also find many tutorials about developer tools and technologies. I also explain advanced concepts and technologies with simplicity.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-what-are-you-waiting-for"&gt;
  &lt;/a&gt;
  So what are you waiting for?
&lt;/h4&gt;

&lt;p&gt;Subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; so that my friend you don't miss any of these cool stuffs.&lt;/p&gt;

</description>
      <category>eslint</category>
      <category>react</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Made a Real Time Chat Application using React.js</title>
      <author>Bhavesh Lokre</author>
      <pubDate>Thu, 27 May 2021 17:04:10 +0000</pubDate>
      <link>https://dev.to/bhavesh1235/made-a-real-time-chat-application-using-react-js-1nni</link>
      <guid>https://dev.to/bhavesh1235/made-a-real-time-chat-application-using-react-js-1nni</guid>
      <description>&lt;p&gt;1.This is a fully functional &lt;strong&gt;Real time Chat Application&lt;/strong&gt; made using React.js with functionalities like online status,image support,Read receipent,multiple rooms&lt;/p&gt;

&lt;p&gt;2.Link to &lt;strong&gt;Github repo&lt;/strong&gt;-&amp;gt; &lt;a href="https://github.com/bhavesh1235/React-Chat-App"&gt;Link&lt;/a&gt;&lt;br&gt;
If you like the project please give it a &lt;strong&gt;star&lt;/strong&gt; at github &lt;/p&gt;

&lt;p&gt;3.Backend is hosted by &lt;a href="https://chatengine.io"&gt;https://chatengine.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Freenode’s Mass Resignations, NVIDIA’s Less Crypto-Friendly Cards, &amp; more on DevNews!</title>
      <author>Josh Puetz</author>
      <pubDate>Thu, 27 May 2021 17:03:32 +0000</pubDate>
      <link>https://dev.to/devteam/freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-cards-more-on-devnews-2oa5</link>
      <guid>https://dev.to/devteam/freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-cards-more-on-devnews-2oa5</guid>
      <description>&lt;p&gt;A new episode of the DevNews podcast is here! &lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s4-e7-freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-chips-twitter-s-crop-algorithm-investigation-and-remote-employers-excluding-colorado"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S4:E7 - Freenode’s Mass Resignations, NVIDIA’s Less Crypto-Friendly Chips, Twitter’s Crop Algorithm Investigation, and Remote Employers Excluding Colorado&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s4-e7-freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-chips-twitter-s-crop-algorithm-investigation-and-remote-employers-excluding-colorado" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s4-e7-freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-chips-twitter-s-crop-algorithm-investigation-and-remote-employers-excluding-colorado" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s4-e7-freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-chips-twitter-s-crop-algorithm-investigation-and-remote-employers-excluding-colorado" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s4-e7-freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-chips-twitter-s-crop-algorithm-investigation-and-remote-employers-excluding-colorado" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s4-e7-freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-chips-twitter-s-crop-algorithm-investigation-and-remote-employers-excluding-colorado"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s4-e7-freenode-s-mass-resignations-nvidia-s-less-crypto-friendly-chips-twitter-s-crop-algorithm-investigation-and-remote-employers-excluding-colorado"&gt;
      &lt;img id="episode-profile-image" alt="S4:E7 - Freenode’s Mass Resignations, NVIDIA’s Less Crypto-Friendly Chips, Twitter’s Crop Algorithm Investigation, and Remote Employers Excluding Colorado" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#in-this-episode-saronyitbarek-and-i-covered"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In this episode, &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 and I covered...&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Companies excluding the state of Colorado from remote opportunities due to the Equal Pay For Equal Work Act&lt;/li&gt;
&lt;li&gt;NVIDIA making their graphics cards less desirable for cryptocurrency miners&lt;/li&gt;
&lt;li&gt;Twitter’s report on its investigation into its cropping algorithm, which many people criticized as having a racial and gender bias.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, we chatted with &lt;strong&gt;James Eaton-Lee&lt;/strong&gt;, former Staff Developer at Freenode, and current Chair of Libera Chat. James explained how Libera Chat was created in response to entrepreneur and Korea's Crown Prince, Andrew Lee, taking control of Freenode, which led to a mass resignation of many of its developers. Fascinating stuff!&lt;/p&gt;

&lt;p&gt;Enjoy S4E7! Can you believe that next week's episode is our season finale? 😱 &lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s4-e6-babels-money-challenges-what-its-like-to-work/id1525581923?i=1000522461260"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/7JlOAnVWuZwIHdVYAQkL27"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzMw?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjgnqHF7NjwAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s4-e6-babels-money-challenges-what-its-like-to-work-on-rails-and-coinbases-end-to-salary-negotiations-84092032"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=163183906"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/164"&gt;Transcript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season four sponsors, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; and &lt;a href="https://rudderstack.com/"&gt;Rudderstack&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SXTTVIwYA36XpgfqJW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SXTTVIwYA36XpgfqJW/giphy.gif" alt="Sound on"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Drag-Drop-Upload, using JavaScript; </title>
      <author>Areeb ur Rub</author>
      <pubDate>Thu, 27 May 2021 17:02:37 +0000</pubDate>
      <link>https://dev.to/areeburrub/drag-drop-upload-using-javascript-29n9</link>
      <guid>https://dev.to/areeburrub/drag-drop-upload-using-javascript-29n9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt; : In this post I am just showing the drag-drop feature, the upload part is totally depends on you that how you want to do it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You must have seen many sites use drag drop feature to upload files, this feature can be easily implemented by using Javascript event handlers &lt;code&gt;.ondragover&lt;/code&gt;, &lt;code&gt;.ondragleave&lt;/code&gt; and &lt;code&gt;.ondrop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/areeburrub/embed/KKWveaB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So, fist we need to make a drag-drop-area where files can be dropped. I have used a very general design you can use your creative designs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dragdroparea-contains-what"&gt;
  &lt;/a&gt;
  drag-drop-area contains what?
&lt;/h3&gt;

&lt;p&gt;The drag drop area should have a &lt;code&gt;&amp;lt;input type="file" hidden&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;button&amp;gt;Browse Image&amp;lt;/button&amp;gt;&lt;/code&gt;, keep the file-input hidden so that it doesn't interfere in the design and the button will be visible to use the general file select feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-the-dragdroparea"&gt;
  &lt;/a&gt;
  Designing the drag-drop-area?
&lt;/h3&gt;

&lt;p&gt;There will be 3 design for each event " &lt;code&gt;.ondragover&lt;/code&gt;, &lt;code&gt;.ondragleave&lt;/code&gt; and &lt;code&gt;.ondrop&lt;/code&gt; ". &lt;br&gt;
The drag leave will be a simple one which will be the initial design.&lt;br&gt;
The drag over design will be activated when someone drag over the area.&lt;br&gt;
The drop design will be depending on what you are making upload, like here I am uploading images so a preview of image is shown if you are working with documents you can show filenames with default icons.&lt;br&gt;
Each design will be contained in a class and classes will be added and removed on events using java script.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-works"&gt;
  &lt;/a&gt;
  Javascript works
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First get all the DOM elements in javascript using &lt;code&gt;document.querySelector("");&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, `let file;' be a variable this will store our file data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, create a function which will check button press and file change and will work when someone just use the select file button instead of drag drop&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then create three functions with &lt;code&gt;.ondragover&lt;/code&gt;, &lt;code&gt;.ondragleave&lt;/code&gt; and &lt;code&gt;.ondrop&lt;/code&gt; and change the classList accordingly, also use preventDefault(); to prevent the page to open the image or file in browser&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*The on drop event have a object called &lt;code&gt;dataTransfer&lt;/code&gt; inside this object you can access files to select the first file write &lt;code&gt;event.dataTransfer.files[0];&lt;/code&gt; and equal the file variable to it &lt;code&gt;file = event.dataTransfer.files[0];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;*Here, I am creating a &lt;code&gt;showImage()&lt;/code&gt; function you can do what ever you want with the file.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#to-get-a-proper-idea-see-the-codepen-snippet"&gt;
  &lt;/a&gt;
  To get a proper Idea see the codepen snippet
&lt;/h2&gt;

&lt;p&gt;You can also read about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragover"&gt;.ondragover&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragleave"&gt;.ondragleave&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop"&gt;.ondrop&lt;/a&gt; on MDN docs&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read:
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/areeburrub" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNgdxQJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7krZbAtB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417828/2ba4e761-d6cf-4aaf-8e1a-0c3e46af5be0.jpg" alt="areeburrub image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/areeburrub/hide-navbar-as-scroll-down-in-less-than-10-lines-of-javascript-1i00" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hide NavBar as Scroll down, in less than 10 lines of javascript;&lt;/h2&gt;
      &lt;h3&gt;Areeb ur Rub ・ May 24 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  follow me:
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__417828"&gt;
  
    .ltag__user__id__417828 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/areeburrub" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNgdxQJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7krZbAtB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417828/2ba4e761-d6cf-4aaf-8e1a-0c3e46af5be0.jpg" alt="areeburrub image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/areeburrub"&gt;Areeb ur Rub&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/areeburrub"&gt;Hey, This is Areeb and I am a Hobbist and like to do some innovative works, I Learn things pretty quick if I even have a bit interest in it.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>coding</category>
    </item>
    <item>
      <title>10 JavaScript Animation Libraries</title>
      <author>Vikram Aditya</author>
      <pubDate>Thu, 27 May 2021 16:56:26 +0000</pubDate>
      <link>https://dev.to/square/10-javascript-animation-libraries-1mf0</link>
      <guid>https://dev.to/square/10-javascript-animation-libraries-1mf0</guid>
      <description>&lt;p&gt;After some research, I’ve gathered 10 of the finest libraries around to use in your app. I’ve also added a few more, mostly unmaintained, useful libraries.&lt;/p&gt;

&lt;p&gt;When building your UI with components, use Bit (GitHub) to easily share and reuse components between your applications. It saves you time, and lets your team share components to build faster together. Give it a try, it’s free.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#join-thevikcode-newletter-get-daily-which-will-not-be-avaible-here-httpsthevikcodesubstackcom"&gt;
  &lt;/a&gt;
  JOIN THEVIKCODE NEWLETTER ( GET DAILY WHICH WILL NOT BE AVAIBLE HERE ) - &lt;a href="https://thevikcode.substack.com/"&gt;https://thevikcode.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;h4&gt;
  &lt;a href="#1-threejs"&gt;
  &lt;/a&gt;
  1. Three.js
&lt;/h4&gt;

&lt;p&gt;At over 43K stars, this popular library is a great way to create 3D animations on the browser, using WebGL in an intuitive way. Providing canvas, svg, CSS3D and WebGL renderers, this library lets us create rich interactive experiences across devices and browsers. First introduced at April 2010, the library is still being developed by nearly 1,000 contributors.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-animejs"&gt;
  &lt;/a&gt;
  2. Anime.js
&lt;/h4&gt;

&lt;p&gt;At over 20K stars, Anime is a JavaScript animation library that works with CSS Properties, individual CSS transforms, SVG or any DOM attributes, and JavaScript Objects. This library lets you chain multiple animation properties, synchronize multiple instances together, create timelines and more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-mojs"&gt;
  &lt;/a&gt;
  3. Mo.js
&lt;/h4&gt;

&lt;p&gt;At 14K stars, this library is a motion graphics toolbelt for the web, with simple declarative APIs, cross-device compatibility and over 1500 unit-tests. You can move things around the DOME or SVG DOME or create unique mo.js objects. Although documentation is somewhat scarce, examples are plentiful and here’s an introduction at CSS tricks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-velocity"&gt;
  &lt;/a&gt;
  4. Velocity
&lt;/h4&gt;

&lt;p&gt;At 15K stars, Velocity is a fast Javascript animation engine with the same API as jQuery’s $.animate(). It features color animation, transforms, loops, easings, SVG support, and scrolling. Here’s a breakdown of Velocity’s high performance engine, and here’s an intro to SVG animation using the library.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-popmotion"&gt;
  &lt;/a&gt;
  5. Popmotion
&lt;/h4&gt;

&lt;p&gt;At 14K stars, this functional and reactive animation library weighs only 11kb. It allows developers to create animations and interactions from actions, which are streams of values that can be started and stopped, and created with CSS, SVG, React, three.js and any API that accepts a number as an input.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-vivus"&gt;
  &lt;/a&gt;
  6. Vivus
&lt;/h4&gt;

&lt;p&gt;At over 10K stars, Vivus is a zero-dependencies JavaScript class that lets you animate SVGs, giving them the appearance of being drawn. You can use one of many available animations, or create custom script to draw you SVG. Check out Vivus-instant to get a live example, hands-on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-greensock-js"&gt;
  &lt;/a&gt;
  7. GreenSock JS
&lt;/h4&gt;

&lt;p&gt;GSAP is a JavaScript library for creating high-performance, zero dependencies, cross-browser animations which claims to be used in over 4 million websites. GSAP is flexible and works with React, Vue, Angular and vanilla JS. GSDevtools can also help dubug animations built using GSAP.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-scroll-reveal"&gt;
  &lt;/a&gt;
  8. Scroll Reveal
&lt;/h4&gt;

&lt;p&gt;With 15K stars and zero dependencies, this library provides easy scroll animations for web and mobile browsers, to reveal things on-scroll in an animated way. It supports multiple neat types of effects, and even lets you define animations using natural language.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-hover-css"&gt;
  &lt;/a&gt;
  9. Hover (CSS)
&lt;/h4&gt;

&lt;p&gt;Well, this is a CSS library. At 20K stars, Hover provides acollection of CSS3 powered hover effects to be applied to links, buttons, logos, SVG, featured images and more, available in CSS, Sass, and LESS. You can copy and paste the effect you’d like to use in your own stylesheet or reference the stylesheet.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-kutejs"&gt;
  &lt;/a&gt;
  10. Kute.js
&lt;/h4&gt;

&lt;p&gt;A fully fledged native JavaScript animation engine with essential features for cross-browser animations. The focus is code quality, flexibility, performance and size (core engine is 17k min and 5.5k gzipped)- here’s a demo. The library is also extendable so you can add your own features.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why to choose VS Code?</title>
      <author>Shruti Sharma</author>
      <pubDate>Thu, 27 May 2021 16:44:01 +0000</pubDate>
      <link>https://dev.to/shruti2303/why-to-choose-vs-code-47ph</link>
      <guid>https://dev.to/shruti2303/why-to-choose-vs-code-47ph</guid>
      <description>&lt;h3&gt;
  &lt;a href="#in-this-post-we-will-be-taking-up-the-most-important-question-which-generally-pops-up-in-the-minds-of-most-of-the-beginners-who-want-to-ace-in-programming-or-development-so-mates-vs-code-can-be-your-pal-in-this-journey"&gt;
  &lt;/a&gt;
  In this post we will be taking up the most important question which generally pops up in the minds of most of the beginners who want to ace in programming or development. So mates, VS Code can be your pal in this journey.
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-what-is-visual-studio-code"&gt;
  &lt;/a&gt;
  1. What is Visual Studio Code?
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-what-are-the-features-of-vs-code"&gt;
  &lt;/a&gt;
  2. What are the features of VS Code?
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-what-are-the-advantages-of-using-vs-code"&gt;
  &lt;/a&gt;
  3. What are the advantages of using VS Code?
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#what-is-visual-studio-code"&gt;
  &lt;/a&gt;
  What is Visual Studio Code?
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code is a freeware source-code editor made by Microsoft for Windows, Linux and macOS and is written in TypeScript, JavaScript, HTML, and CSS .Visual Studio Code was first announced on April 29, 2015, by Microsoft at the 2015 Build conference and in 2019 VS Code was ranked as the most popular developer environment tool by the Stack Overflow 2019 Developer Survey.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-are-the-features-of-vs-code"&gt;
  &lt;/a&gt;
  What are the features of VS Code?
&lt;/h2&gt;

&lt;p&gt;There are various features of VS Code - support for debugging, syntax highlighting, intelligent code completion(IntelliSense), snippets, code refactoring, and embedded Git.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Debugging is a core feature of Visual Studio Code. There are several debugger extensions in the VS Code Marketplace which all the users can use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Syntax highlighting is a feature of text editors that are used for programming, scripting, or markup languages, such as HTML. The feature displays text, especially source code, in different colors and fonts according to the category of terms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intelligent Code Completion (IntelliSense)- This feature helps in writing a user-friendly code by completing the code automatically, which speeds up the user's work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code snippets are templates that make it easier to enter repeating code patterns, such as loops or conditional-statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code refactoring is a process used in the DevOps software development approach that involves editing and cleaning up previously written software code without changing the function of the code at all, also provided by VS Code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-are-the-advantages-of-using-vs-code"&gt;
  &lt;/a&gt;
  What are the advantages of using VS Code?
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-the-first-and-the-foremost-advantage-of-vs-code-is-that-it-is-the-most-user-friendly-code-editor-so-far"&gt;
  &lt;/a&gt;
  1. The first and the foremost advantage of VS Code is that it is the most user friendly code editor so far.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-crossplatform-support-visual-studio-code-can-work-on-all-the-three-operating-systems-windows-linux-and-mac"&gt;
  &lt;/a&gt;
  2. Cross-platform support : Visual Studio Code can work on all the three operating systems - Windows, Linux and Mac.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-lightweight"&gt;
  &lt;/a&gt;
  3. Light-weight
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-robust-architecture"&gt;
  &lt;/a&gt;
  4. Robust Architecture
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-intellisense"&gt;
  &lt;/a&gt;
  5. Intelli-Sense
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-freeware-free-of-cost-probably-the-best-feature-of-all-for-all-the-programmers-out-there-even-more-for-the-organizations"&gt;
  &lt;/a&gt;
  6.  Freeware: Free of Cost- probably the best feature of all for all the programmers out there, even more for the organizations.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-many-users-will-use-it-or-might-have-used-it-for-desktop-applications-only-but-it-also-provides-great-tool-support-for-web-technologies-like-html-css-json"&gt;
  &lt;/a&gt;
  7. Many users will use it or might have used it for desktop applications only, but it also provides great tool support for Web Technologies like; HTML, CSS, JSON.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#these-were-the-key-reasons-of-why-to-choose-vs-code"&gt;
  &lt;/a&gt;
  These were the key reasons of why to choose VS Code.
&lt;/h3&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How I Made Covid-19 Vaccine Search Portal</title>
      <author>capscode</author>
      <pubDate>Thu, 27 May 2021 16:43:54 +0000</pubDate>
      <link>https://dev.to/capscode/how-i-made-covid-19-vaccine-search-portal-5f5c</link>
      <guid>https://dev.to/capscode/how-i-made-covid-19-vaccine-search-portal-5f5c</guid>
      <description>&lt;p&gt;THIS WEBSITE WILL NOTIFY YOU IN REALTIME WHEN THE VACCINE IS AVAILABLE GOOGLE ASSISTANCE ENABLED.&lt;/p&gt;

&lt;p&gt;Hello Everyone,&lt;/p&gt;

&lt;p&gt;I just wanted to share one of my recent work which is a vaccine search/ tracker portal with GOOGLE VOICE ENABLED to update the status of vaccine availability. In this Web App you can search for vaccine availability by entering your PIN CODE or by entering your STATE &amp;amp; DISTRICT. It refreshed every after every 40 mins and a fresh data is being shown in the page and if the vaccine gets available in the selected location, the VOICE ASSISTENT will notify about that.&lt;/p&gt;

&lt;p&gt;If the vaccine is available you will GREEN color list and if vaccine is not available you will see red colored list, you can click on these list to directly navigate to the govt portal to book your vaccination slots.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://searchvaccine.netlify.app/#/"&gt;Link for the portal :&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This webapp is completely based on ReactJS, API used is COWIN API provided by the Indian Govt., AXIOS for fetching the data, and Material UI for designing.&lt;/p&gt;

&lt;p&gt;You can also contribute to this just by forking the code from my github link and giving me a star there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rahulnag/vaccine_tracker"&gt;https://github.com/rahulnag/vaccine_tracker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/capscode"&gt;Follow me on INSTAGRAM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any Queries or Suggestions, feel free to reach out to me in the Comment Section below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-hope-you-have-liked-it"&gt;
  &lt;/a&gt;
  I hope you have liked it
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading-"&gt;
  &lt;/a&gt;
  Thanks for reading !
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#feedbacks-and-comments-are-welcome-"&gt;
  &lt;/a&gt;
  Feedbacks and comments are welcome !
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-capscode"&gt;
  &lt;/a&gt;
  Thank You, CapsCode
&lt;/h2&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.apisetu.gov.in/public/api/cowin"&gt;https://www.apisetu.gov.in/public/api/cowin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/axios"&gt;https://www.npmjs.com/package/axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.material-ui.com"&gt;https://www.material-ui.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>coding</category>
      <category>app</category>
    </item>
    <item>
      <title>A Simple CSS Flexbox Cheat Sheet</title>
      <author>Favor Onuoha</author>
      <pubDate>Thu, 27 May 2021 16:41:48 +0000</pubDate>
      <link>https://dev.to/heyonuoha/a-simple-css-flexbox-cheat-sheet-4k2b</link>
      <guid>https://dev.to/heyonuoha/a-simple-css-flexbox-cheat-sheet-4k2b</guid>
      <description>&lt;p&gt;Flexbox is amazing and they make positioning in CSS much, much better than raw positioning (Absolute, Relative, etc), but they can sometimes be very easy to forget or get mixed up with due to its structural nature.&lt;/p&gt;

&lt;p&gt;Both Pros and Beginners struggle with keeping all the structural differences and style properties at heart so that is why I will be breaking down in sections this great cheat sheet by &lt;a href="https://jonitrythall.com/"&gt;Joni Balogna&lt;/a&gt; which I found very great and amazing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#flexbox-structure"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Flexbox Structure&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uEF3I1nW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iqeyjf7optbd0dgvghz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEF3I1nW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iqeyjf7optbd0dgvghz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown the structure of flexboxes and how their origins are labeled.&lt;/p&gt;

&lt;p&gt;We see the Main Axis (Horizontal Axis) and the Cross Axis (Vertical Axis)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rows-and-columns-orientation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Rows and Columns [Orientation]&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vhvNb3Vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h3pmdpz03azgn1dztj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vhvNb3Vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h3pmdpz03azgn1dztj5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown the properties that activate the flexbox styles and the options we have for display orientation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#positioning-on-main-axis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Positioning On Main Axis&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhXDkwBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trpdt2kmequ5t74excnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhXDkwBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trpdt2kmequ5t74excnj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown how to position flex items on the Main Axis. Where do you want it? start, center, end?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#space-management"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Space Management&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9FtPmGda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9g8nywzz1i8bp9nlq9ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9FtPmGda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9g8nywzz1i8bp9nlq9ek.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown how to manage variable space of our items and how we want them displayed in a container. Based on our viewport, we can set how we want them to align, either on the same line or overflow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#positioning-on-cross-axis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Positioning On Cross Axis&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tiDHCjHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oht32bbys3iyvt5ux9e0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tiDHCjHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oht32bbys3iyvt5ux9e0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown how to position flex items on the Main Axis. We could either set our flex items to stretch across the axis or start at the end or center.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#row-management"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Row Management&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OigxyYD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgvdgmyllf87kb4hwk95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OigxyYD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgvdgmyllf87kb4hwk95.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GSSwgM7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaa495i971py9ig80v3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GSSwgM7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaa495i971py9ig80v3w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown the property options we have when we have multiple rows and how we can position them in a container. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#item-order"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Item Order&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHXeGt7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxi0v2ln0j85h6pg1u60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHXeGt7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxi0v2ln0j85h6pg1u60.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown the &lt;code&gt;order&lt;/code&gt; property which sets the order to lay out an item in a flex container. Items in a container are sorted by ascending order value and then by their source code order.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#item-growth"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Item Growth&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DBtnonxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/604f3gl4x6257eilucyv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBtnonxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/604f3gl4x6257eilucyv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown the &lt;code&gt;flex-grow&lt;/code&gt; property which sets the &lt;code&gt;flex-grow&lt;/code&gt; factor of a flex item's main size.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#alignment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Alignment&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HM8zcWdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kepbvjbug7h63n5kkfd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HM8zcWdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kepbvjbug7h63n5kkfd9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are shown various alignment flex properties.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Thank you for reading 🔥🔥🔥, and I hope you found this article useful 🔥&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://jonitrythall.com/content/flexboxsheet.pdf"&gt;link&lt;/a&gt; to the full cheat cheat&lt;/p&gt;

&lt;p&gt;If you have any questions or your just wanna chat, feel free to &lt;a href="https://twitter.com/heyOnuoha"&gt;DM me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed reading, please consider following me here on Dev.to and also on Twitter @ &lt;a href="https://twitter.com/heyOnuoha/"&gt;heyOnuoha&lt;/a&gt; so you don’t miss out on new content on topics like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Development (JS and Python)&lt;/li&gt;
&lt;li&gt;Improving as a developer&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#support-me-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Support Me&lt;/strong&gt; :
&lt;/h4&gt;

&lt;p&gt;👉 Follow Me on &lt;a href="https://twitter.com/heyOnuoha/"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👉 Buy me a &lt;a href="https://www.buymeacoffee.com/heyOnuoha"&gt;coffee&lt;/a&gt; ☕&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  &lt;strong&gt;References&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jonitrythall.com/"&gt;Joni Balogna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/"&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jonitrythall.com/content/flexboxsheet.pdf"&gt;Flexbox cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>design</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
