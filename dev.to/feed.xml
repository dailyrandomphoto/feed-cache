<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is the Cloud?</title>
      <author>Ali Spittel</author>
      <pubDate>Tue, 02 Nov 2021 14:26:53 +0000</pubDate>
      <link>https://dev.to/aspittel/what-is-the-cloud-1n65</link>
      <guid>https://dev.to/aspittel/what-is-the-cloud-1n65</guid>
      <description>&lt;p&gt;Frontend developers! Have you ever wondered why to choose a certain type of database for a project, how to create an API, how to deploy to AWS, or what a container is? You're in the right place! This series will teach you all about backend development specifically targeted at frontend developers: you know how to code, you may have heard certain backend terminology, but you don't consider yourself fullstack. You'll learn backend concepts and how to implement them using AWS.&lt;/p&gt;

&lt;p&gt;In this first post of the series, we'll start off by defining what the backend is, what difficulties there are within backend development, and then we'll discuss what the cloud is and how it relates to backend development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-backend-development"&gt;
  &lt;/a&gt;
  What is Backend Development?
&lt;/h2&gt;

&lt;p&gt;Traditionally, the definition for a frontend vs. backend developer is that frontend developers work on the &lt;em&gt;client side&lt;/em&gt; -- they build the interface that users interact with. Backend developers work on &lt;em&gt;server side&lt;/em&gt; code. That can include building APIs, database interaction, and dealing with server configuration. I started my career as a backend developer, working mostly on building data science systems -- I had to think a lot about scalability, how to handle and analyze large amounts of data, and how to deploy those systems in dependable ways.&lt;/p&gt;

&lt;p&gt;Some of the questions a backend developer may have to answer include: How do you scale a system for a million users? More than a million? How much data needs to be stored? How fast does it need to be accessed? Are there long running jobs that need to be managed? There are so many trade offs that must be weighed when building these systems. We'll talk about a bunch of them in this series.&lt;/p&gt;

&lt;p&gt;One big evolution in backend development is the cloud -- though it's impacting almost everyone online, not just backend devs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-cloud"&gt;
  &lt;/a&gt;
  What is the Cloud?
&lt;/h2&gt;

&lt;p&gt;The cloud allows you to access computer resources on-demand. You may have used Google Drive or iCloud to store your files online rather than your own computer or phone wo that you have more storage space. This is a perfect example of how the cloud is used.&lt;/p&gt;

&lt;p&gt;Many companies also use the cloud for their server infrastructure. You've probably heard of servers before, they're essentially computers that send information to other computers. We use them to handle the request/response cycle for websites -- they take a request and based on it handle business logic, database queries, etc. and then send a response back to the client.&lt;/p&gt;

&lt;p&gt;In comes data centers -- these hold all the needed servers for a company, and they buy more and more servers as the company grows. They would have staff to manage the data center and they'd need to install software on and maintain the servers yourself.&lt;/p&gt;

&lt;p&gt;The cloud allows you to access the provider's servers and use them instead of needing to manage the data centers yourself. This provides a lot of benefits to the company, first you only need to pay for what you use instead of all the servers you buy for a data center. You also have global availability with most cloud providers, you don't need to have data centers all over the world to speed up your response time globally -- the cloud provider does that for you. And, you don't need to pay for the data centers or data center staff yourself, instead that's done by the cloud provider. AWS has a &lt;a href="https://docs.aws.amazon.com/whitepapers/latest/aws-overview/six-advantages-of-cloud-computing.html"&gt;whitepaper&lt;/a&gt; explaining these benefits in further detail.&lt;/p&gt;

&lt;p&gt;There are different families of cloud services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infrastructure as a service (IaaS) is the lowest level where you have more control over the operating system and runtime for your services. Examples include Amazon EC2 and Digital Ocean. &lt;/li&gt;
&lt;li&gt;Platform as a service (PaaS) - provides cloud components where you manage the application logic and data but not the servers or anything low level. Examples include Heroku and AWS Elastic Beanstock.&lt;/li&gt;
&lt;li&gt;Software as a service (SaaS) - cloud services an end user directly uses with no cloud management needed. Some examples include Dropbox, iCloud, and Slack.&lt;/li&gt;
&lt;li&gt;Function as a service (FaaS) - allows you to deploy just a function into the cloud, you don't need to do server management or anything like that. AWS Lambda is a great example of this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On that note, AWS, or Amazon Web Services, is a cloud provider (and my employer) who has over 200 different cloud services. We'll be chatting about a bunch of these services throughout this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Next time, we'll go a little deeper into the logistics of using the cloud. How can you set up an AWS account with a billing alarm and an IAM user? If you have topics you'd like to see answered in this series, please let me know in the comments or via &lt;a href="https://twitter.com/aspittel"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>aws</category>
    </item>
    <item>
      <title>DevOps for dummies</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Tue, 02 Nov 2021 14:16:42 +0000</pubDate>
      <link>https://dev.to/abhirajb/devops-for-dummies-159i</link>
      <guid>https://dev.to/abhirajb/devops-for-dummies-159i</guid>
      <description>&lt;p&gt;You'll hear the word "DevOps" everywhere these days. DevOps may appear to be a rather simple concept at first glance. Isn't the term "DevOps" merely a mix of "Dev" and "Ops"?&lt;br&gt;
Yes, of course. But let's go a little deeper into that...&lt;br&gt;
DevOps is, at its core, about bringing together historically different functional domains, much like the phrase itself. It entails "bridging the gap" between software development ("Dev") and IT operations ("Ops") teams, or "removing silos between" them, with the goal of releasing software faster and more reliably.&lt;/p&gt;

&lt;p&gt;However, since its inception roughly a decade ago, DevOps has become a catchall term for any and all trends in software development and IT operations. It's understandable, given that DevOps is still expanding, covers a wide range of topics, and is changed and accepted based on a company's individual business objectives, priorities, and current knowledge base. We'll attempt to present our own principle-based description of what DevOps is at the end of this article, but before we do, it's helpful to explore what DevOps is NOT, debunking some of the prevalent misconceptions about DevOps.&lt;/p&gt;

&lt;p&gt;The ultimate goal of DevOps is to decrease the duration of the system’s development life cycle while delivering features, fixes, and updates frequently in close synchronization with business objectives.&lt;/p&gt;




&lt;p&gt;Before DevOps, We had two approaches for software development namely the Waterfall and the Agile.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#waterfall-model"&gt;
  &lt;/a&gt;
  Waterfall Model
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gV39mtKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Waterfall_model.svg/1200px-Waterfall_model.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gV39mtKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Waterfall_model.svg/1200px-Waterfall_model.svg.png" alt="wm" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This strategy begins with the gathering and analysis of requirements. The first one these stages being Requirements. This is the stage in which you obtain the client's requirements for constructing an application. After that, you try to figure out what these needs are.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Design phase is the following step, in which you create a software plan. Here, you consider how the software will appear in its final form.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the design is complete, you can go on to the Implementation step, where you will begin developing the programme. The development team collaborates on several aspects of the application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the Verification step, you test the application once it has been developed. The application is subjected to a variety of tests, including unit testing, integration testing, and performance testing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, there's the phase of maintenance. The application's performance is monitored throughout this period.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#agile-methodology"&gt;
  &lt;/a&gt;
  Agile Methodology
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDSQx0Mf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kruschecompany.com/wp-content/uploads/2021/06/AdobeStock_255546088-1280x595.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDSQx0Mf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kruschecompany.com/wp-content/uploads/2021/06/AdobeStock_255546088-1280x595.png" alt="am" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Agile, a employer releases the software with a few excessive-precedence functions within the first iteration. After its launch, the cease-users or the customers give you comments approximately the overall performance of the application. then you definitely make the essential adjustments to the software in conjunction with a few new capabilities and the software is again released which is the second one new release. You repeat this complete method till you reap the preferred software program exceptionally.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-is-a-devops-engineer"&gt;
  &lt;/a&gt;
  Who is a DevOps Engineer?
&lt;/h2&gt;

&lt;p&gt;DevOps Engineer is somebody who understands the Software Development Lifecycle and has the outright understanding of various automation tools for developing digital pipelines (CI/ CD pipelines).&lt;/p&gt;

&lt;p&gt;DevOps Engineer works with developers and the IT staff to oversee the code releases. They are either developers who get interested in deployment and network operations or sysadmins who have a passion for scripting and coding and move into the development side where they can improve the planning of test and deployment.&lt;/p&gt;




&lt;p&gt;Hope this post has been able to add value to your knowledge.&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
&lt;a href="https://abhiraj.glitch.me"&gt;Abhiraj&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like my posts, you can support me by buying me a coffee.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Terraform tips for newcomers</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 02 Nov 2021 13:47:20 +0000</pubDate>
      <link>https://dev.to/adaendra/terraform-tips-for-newcomers-4cpb</link>
      <guid>https://dev.to/adaendra/terraform-tips-for-newcomers-4cpb</guid>
      <description>&lt;p&gt;Terraform is quite large. You have a lot of possibilities do to with, and here are some tips to help you with your scripts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conditionnal-expressions"&gt;
  &lt;/a&gt;
  Conditionnal Expressions
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;condition ? true_val : false_val
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If quite simple, it looks like ternary condition in Java for example.&lt;br&gt;
If the condition is true, the &lt;strong&gt;true_val&lt;/strong&gt; will be used, otherwise it will be the &lt;strong&gt;false_val&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var.a != "" ? var.a : "default-a"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terraform documentation : &lt;a href="https://www.terraform.io/docs/language/expressions/conditionals.html"&gt;https://www.terraform.io/docs/language/expressions/conditionals.html&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conditionnalmultiple-resources"&gt;
  &lt;/a&gt;
  Conditionnal/Multiple resources
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource "xxx" "yyyy" {
  ....
  count            = "${var.a == "a" ? 1 : 0}"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create some elements depending conditions, or to create multiple instances of a resource, we can use &lt;strong&gt;count&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mixed with a conditional expression we can defined how much elements the script needs to create. So if you're defining a case were the script must create 0 instances, so you have a conditionnal resource.&lt;/p&gt;

&lt;p&gt;Documentation : &lt;a href="https://dev.to/tbetous/how-to-make-conditionnal-resources-in-terraform-440n"&gt;https://dev.to/tbetous/how-to-make-conditionnal-resources-in-terraform-440n&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#local-values"&gt;
  &lt;/a&gt;
  Local values
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;locals {
  service_name = "forum"
  owner        = "Community Team"

  name = "${var.env}-xxxx"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;locals&lt;/strong&gt; is an object with static values &lt;em&gt;(which can't be overrided by variables)&lt;/em&gt; or can help to create some values from the variables inputs.&lt;/p&gt;

&lt;p&gt;It can be really useful to avoid redefining a value in multiple resources.&lt;/p&gt;

&lt;p&gt;Terraform documentation : &lt;a href="https://www.terraform.io/docs/language/values/locals.html"&gt;https://www.terraform.io/docs/language/values/locals.html&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope it will help you! 🍺&lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
      <category>terraform</category>
    </item>
    <item>
      <title>Making the most boring website ever with TypeScript, NestJs, React and others. Part 7. </title>
      <author>NordicBeaver</author>
      <pubDate>Tue, 02 Nov 2021 13:43:01 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-7-1p4e</link>
      <guid>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-7-1p4e</guid>
      <description>&lt;p&gt;&lt;em&gt;This series is about making a generic website for a local business with TypeScript, NodeJs, NestJs, Prisma, React and NextJs. I'm trying to make my videos quite short, about 10 minutes each (except for the first one), while putting as much content there as I can. &lt;a href="https://www.youtube.com/playlist?list=PL7b0cPjh8z6K_4qLNu_QdE3RpiU6omViC"&gt;Here&lt;/a&gt; is the full playlist.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today we will implements validation both on the server and the client. And also add a couple of new fields to the Appointment model.&lt;/p&gt;

&lt;p&gt;Enjoy :)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/seCTFau-0WA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Resampling to Properly Handle Imbalanced Datasets in Machine Learning</title>
      <author>Younes Charfaoui</author>
      <pubDate>Tue, 02 Nov 2021 13:34:04 +0000</pubDate>
      <link>https://dev.to/charfaouiyounes/resampling-to-properly-handle-imbalanced-datasets-in-machine-learning-4anb</link>
      <guid>https://dev.to/charfaouiyounes/resampling-to-properly-handle-imbalanced-datasets-in-machine-learning-4anb</guid>
      <description>&lt;p&gt;Often in machine learning, and specifically with classification problems, we encounter imbalanced datasets. This typically refers to an issue where the classes are not represented equally, which can cause huge problems for some algorithms.&lt;/p&gt;

&lt;p&gt;In this article, we’ll explore a technique called resampling, which is used to reduce this effect on our machine learning algorithms.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This article presumes that you know some machine learning concepts and are familiar with Python and its data science libraries.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-imbalanced-dataset"&gt;
  &lt;/a&gt;
  What is an Imbalanced Dataset?
&lt;/h2&gt;

&lt;p&gt;The best way to learn something is through an example:&lt;/p&gt;

&lt;p&gt;Say that you have a fraud detection binary classification model (two classes — “Fraud” or “Not-Fraud”) problem with 100 instances (rows). A total of 80 instances are labeled as Fraud and the remaining 20 instances are labeled as a Not-Fraud. This is an imbalanced dataset, and the ratio of Fraud to Not-Fraud instances is 80:20, or 4:1.&lt;/p&gt;

&lt;p&gt;Most classification datasets don’t have exactly equal numbers of records in each class, but a small difference doesn’t matter as much.&lt;/p&gt;

&lt;p&gt;This class imbalance problem can occur in binary classification problems as well as multi-class classification problems, but most techniques can be used on either.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h1&gt;

&lt;p&gt;In addition to using the core Python libraries like NumPy, Pandas, and scikit-learn, we’re going to use another great library called &lt;a href="http://contrib.scikit-learn.org/imbalanced-learn/stable/"&gt;imbalanced-learn&lt;/a&gt;, which is a part of scikit-learn-contrib projects.&lt;br&gt;
imbalanced-learn provides more advanced methods to handle imbalanced datasets like SMOTE and Tomek Links.&lt;br&gt;
Here are the commands to install it via pip or conda:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# using pip
pip install -U imbalanced-learn
# using conda
conda install -c conda-forge imbalanced-learn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-metric-problem"&gt;
  &lt;/a&gt;
  The Metric Problem
&lt;/h1&gt;

&lt;p&gt;Most beginners struggle when dealing with imbalanced datasets for the first time. They tend to use accuracy as a metric to evaluate their machine learning models. This intuitively makes sense, as classification accuracy is often the first measure we use when evaluating such models.&lt;/p&gt;

&lt;p&gt;Nevertheless, this can be misleading, because most of the algorithms we use are designed to achieve the best accuracy, so the classifier always “predicts” the most common class without performing any features analysis. It will still have a high accuracy rate, but it will give false predictions, nevertheless.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Say we have 1000 emails as a dataset: 990 are spam emails and 10 aren’t. If you build a simple model you’ll get ~99% accuracy, which at first glance seems great.&lt;/p&gt;

&lt;p&gt;But on the other hand, the algorithm doesn’t perform any learning — the accuracy here is only reflecting the underlying class distribution because models look at the data and cleverly decide that the best thing to do is to always predict spam and achieve high accuracy. As such, the model’s success and is just an illusion.&lt;/p&gt;

&lt;p&gt;This is why the choice of metrics used when working with imbalanced datasets is extremely important.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#investigate-your-dataset"&gt;
  &lt;/a&gt;
  Investigate your dataset
&lt;/h1&gt;

&lt;p&gt;You should have an imbalanced dataset to apply the methods described here— you can get started with &lt;a href="https://www.kaggle.com/mlg-ulb/creditcardfraud"&gt;this dataset&lt;/a&gt; from Kaggle.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://heartbeat.comet.ml/seaborn-heatmaps-13-ways-to-customize-correlation-matrix-visualizations-f1c49c816f07"&gt;Seaborn&lt;/a&gt; to plot the count of each class to see if your dataset presents imbalanced dataset problem like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the data sciecne libraries.
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;

&lt;span class="c1"&gt;# read the dataset
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'training.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# print the count of each class from the target vatiables
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FraudResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# plot the count of each class from the target vatiables
&lt;/span&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;countplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FraudResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can use the sklearn to compute class weight and get the class ratios as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the function to compute the class weights
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;compute_class_weight&lt;/span&gt;

&lt;span class="c1"&gt;# calculate the class weight by providing the 'balanced' parameter.
&lt;/span&gt;&lt;span class="n"&gt;class_weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compute_class_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'balanced'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FraudResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FraudResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# print the result
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#resampling"&gt;
  &lt;/a&gt;
  Resampling
&lt;/h1&gt;

&lt;p&gt;There are multiple ways to handle the issue of imbalanced datasets. The techniques we’re going to use in this tutorials is called resampling.&lt;/p&gt;

&lt;p&gt;Resampling is a widely-adopted technique for dealing with imbalanced datasets, and it is often very easy to implement, fast to run, and an excellent starting point.&lt;/p&gt;

&lt;p&gt;Resampling changes the dataset into a more balanced one by adding instances to the minority class or deleting ones from the majority class, that way we build better machine learning models.&lt;/p&gt;

&lt;p&gt;The way to introduce these changes in a given dataset is achieved via two main methods: &lt;strong&gt;Oversampling&lt;/strong&gt; and &lt;strong&gt;Undersampling&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Oversampling&lt;/strong&gt;: This method adds copies of instances from the under-represented class (minority class) to obtain a balanced dataset. There are multiple ways you can oversample a dataset, like random oversampling. We’ll cover some of these methods in this article.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MxtEYB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2Ao_KfyMzF7LITK2DlYm_wHw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MxtEYB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2Ao_KfyMzF7LITK2DlYm_wHw.png" alt="Oversampling" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Undersampling methods&lt;/strong&gt;: These methods simply delete instances from the over-represented class (majority class) in different ways. The most obvious way is to do delete instances randomly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuI1jFRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2AgHW_PLz7kWrhdl5t1sJRRA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuI1jFRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2AgHW_PLz7kWrhdl5t1sJRRA.png" alt="Undersampling" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;p&gt;Notwithstanding the advantage of balancing classes, these techniques also have some drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you duplicate random records from the minority class to do oversampling, this will cause overfitting.&lt;/li&gt;
&lt;li&gt;By undersampling and removing random records from the majority class, you risk losing some important information for the machine learning algorithm to use while training and predicting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll now show the underlying techniques in each method, along with some code snippets.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#undersampling"&gt;
  &lt;/a&gt;
  Undersampling
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#random-undersampling"&gt;
  &lt;/a&gt;
  Random Undersampling
&lt;/h2&gt;

&lt;p&gt;Random undersampling randomly deletes records from the majority class. You should consider trying this technique when you have a lot of data.&lt;/p&gt;

&lt;p&gt;A simple undersampling technique is to undersample the majority class randomly and uniformly. This can potentially lead to information loss, though. But if the examples of the majority class are near to others in terms of distance, this method might yield good results.&lt;/p&gt;

&lt;p&gt;Here is a code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the Random Under Sampler object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.under_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomUnderSampler&lt;/span&gt;

&lt;span class="c1"&gt;# create the object.
&lt;/span&gt;&lt;span class="n"&gt;under_sampler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomUnderSampler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_under&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_under&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;under_sampler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s the set of parameters you can specify to the &lt;code&gt;RandomUnderSampler&lt;/code&gt; object (the same thing apply for the other objects from the imblearn library):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sampling_strategy&lt;/code&gt; : This parameter can be used to tell the object how to perform undersampling on our dataset. It can be &lt;code&gt;majority&lt;/code&gt; to resample only the majority class, &lt;code&gt;not_minority&lt;/code&gt; to resample all classes but the minority class, and &lt;code&gt;auto&lt;/code&gt; is the default one here, which stands for &lt;code&gt;not_minority&lt;/code&gt;. You can check out the documentation (included below in “Resources”) to learn more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;return_indices&lt;/code&gt; : Boolean on whether to return the indices of the removed instances or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;random_state&lt;/code&gt; : An integer that controls the randomness of the procedure, allowing you to reproduce the results.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nearmiss-undersampling"&gt;
  &lt;/a&gt;
  NearMiss Undersampling
&lt;/h2&gt;

&lt;p&gt;The NearMiss algorithm has been proposed to solve the issue of potential information loss. It’s based on the nearest neighbor algorithm and has a lot of variations that we’ll see in this section.&lt;/p&gt;

&lt;p&gt;The basics of the NearMiss algorithms include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The method starts by calculating the distances between all instances of the majority class and the instances of the minority class.&lt;/li&gt;
&lt;li&gt;Then k instances of the majority class that have the smallest distances to those in the minority class are selected to be retained.&lt;/li&gt;
&lt;li&gt;If there are n instances in the minority class, NearMiss will result in k × n instances of the majority class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJVS54Tw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2A8WM0gsh_naPEa9HTpE2c1A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJVS54Tw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2A8WM0gsh_naPEa9HTpE2c1A.png" alt="NearMiss Algorithm" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the different versions of this algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;NearMiss-1&lt;/strong&gt; chooses instances of the majority class where their average distances to the three closest instances of the minority class are the smallest.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NearMiss-2&lt;/strong&gt; uses the three farthest samples of the minority class.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NearMiss-3&lt;/strong&gt; picks a given number of the closest samples of the majority class for each sample of the minority class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the NearMiss object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.under_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NearMiss&lt;/span&gt;

&lt;span class="c1"&gt;# create the object with auto
&lt;/span&gt;&lt;span class="n"&gt;near&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NearMiss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"not minority"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_near&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_near&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;near&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can tune also the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;version&lt;/code&gt; : the version of the near-miss algorithm, which can be 3,1, or 2.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;n_neighbors&lt;/code&gt; : the number of neighbors to consider to compute the average distance—three is the default.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#undersampling-with-tomek-links"&gt;
  &lt;/a&gt;
  Undersampling with Tomek links
&lt;/h2&gt;

&lt;p&gt;Tomek links are pairs of very close instances that belong to different classes. They’re samples near the borderline between classes. By removing the examples of the &lt;strong&gt;majority&lt;/strong&gt; class of each pair, we increase the space between the two classes and move toward balancing the dataset by deleting those points.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXYXCWah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ApR35KsLpz7-_zvbvdm0frg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXYXCWah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ApR35KsLpz7-_zvbvdm0frg.png" alt="TomLinks Algorithm" width="700" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a code snippet to resample the majority class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the TomekLinks object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.under_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TomekLinks&lt;/span&gt;

&lt;span class="c1"&gt;# instantiate the object with the right ratio strategy.
&lt;/span&gt;&lt;span class="n"&gt;tomek_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TomekLinks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'majority'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_tl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_tl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tomek_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#undersampling-with-cluster-centroids"&gt;
  &lt;/a&gt;
  Undersampling with Cluster Centroids
&lt;/h2&gt;

&lt;p&gt;The idea here is basically to remove the unimportant instance from the majority class. To decide whether an instance is important or not, we use the concept of &lt;strong&gt;clustering&lt;/strong&gt; on the geometry of the feature space.&lt;/p&gt;

&lt;p&gt;Clustering is an unsupervised learning approach, in which clusters are creating encircling data points belonging.&lt;/p&gt;

&lt;p&gt;We will use it only to find cluster &lt;strong&gt;centroid&lt;/strong&gt; that are obtained by averaging feature vector for all the features over the data points.&lt;/p&gt;

&lt;p&gt;After finding the cluster centroid of the majority class, we decide the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The instance belonging to the cluster (majority class), which is &lt;strong&gt;farthest from the cluster centroid in the feature space&lt;/strong&gt;, is considered to be the most unimportant instance.&lt;/li&gt;
&lt;li&gt;The instance belonging to the majority class, which is &lt;strong&gt;nearest to the cluster centroid in the feature space&lt;/strong&gt;, is considered to be the most important instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VCg3DxCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1XlHmnc9hKn1oPz48lrn7Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VCg3DxCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1XlHmnc9hKn1oPz48lrn7Q.png" alt="cluster Centroids Algorithm" width="700" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a code snippet for using cluster centroids:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the ClusterCentroids object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.under_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ClusterCentroids&lt;/span&gt;

&lt;span class="c1"&gt;# instantiate the object with the right ratio.
&lt;/span&gt;&lt;span class="n"&gt;cluster_centroids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClusterCentroids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_cc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cluster_centroids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides the previous parameter, here’s another one you can tune to get better results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;estimator&lt;/code&gt;: An object that performs the clustering process for this method—K-Means is the default here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#undersampling-with-edited-nearest-neighbor-rule"&gt;
  &lt;/a&gt;
  Undersampling with Edited Nearest Neighbor Rule
&lt;/h2&gt;

&lt;p&gt;Edited Nearest Neighbor Rule (or ENN) was proposed in 1972 to remove instances from the majority class (undersampling).&lt;/p&gt;

&lt;p&gt;This technique removes any instance from the majority class whose class label is different from the class label of at least two of its three nearest neighbors. In general terms, it’s near or around the borderline of different classes.&lt;/p&gt;

&lt;p&gt;The point here is to increase the classification accuracy of minority instances rather than majority instances.&lt;/p&gt;

&lt;p&gt;Here is a sample code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the EditedNearestNeighbours object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.under_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EditedNearestNeighbours&lt;/span&gt;

&lt;span class="c1"&gt;# create the object to resample the majority class.
&lt;/span&gt;&lt;span class="n"&gt;enn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditedNearestNeighbours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"majority"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_enn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_enn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#undersampling-with-neighborhood-cleaning-rule"&gt;
  &lt;/a&gt;
  Undersampling with Neighborhood Cleaning Rule
&lt;/h2&gt;

&lt;p&gt;Neighborhood Cleaning Rule ( or NCR) deals with the majority and minority samples separately when sampling the datasets.&lt;/p&gt;

&lt;p&gt;NCR starts by calculating the nearest three neighbors for all instances in the training set. We then do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the instance belongs to the &lt;strong&gt;majority&lt;/strong&gt; class and the classification given by its three nearest neighbors is the opposite of the class of the chosen instance — then the chosen instance is &lt;strong&gt;removed&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the instance belongs to the &lt;strong&gt;minority&lt;/strong&gt; class and it’s misclassified by its three nearest neighbors — then &lt;strong&gt;the nearest neighbors&lt;/strong&gt; that belong to the majority class are &lt;strong&gt;removed&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a sample code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the NeighbourhoodCleaningRule object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.under_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NeighbourhoodCleaningRule&lt;/span&gt;

&lt;span class="c1"&gt;# create the object to resample the majority class.
&lt;/span&gt;&lt;span class="n"&gt;ncr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NeighbourhoodCleaningRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"majority"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_ncr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_ncr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ncr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An important parameter here is &lt;code&gt;threshold_clearning&lt;/code&gt;, which is a float number used after applying ENN, it tells the algorithm to consider a class or not during the cleaning.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#oversampling"&gt;
  &lt;/a&gt;
  Oversampling
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#random-oversampling"&gt;
  &lt;/a&gt;
  Random Oversampling
&lt;/h2&gt;

&lt;p&gt;Random oversampling randomly duplicate records from the minority class. Try this technique when you don’t have a lot of data.&lt;/p&gt;

&lt;p&gt;Random oversampling simply replicates random minority class examples. It’s known to increase the likelihood of overfitting, which is a major drawback.&lt;/p&gt;

&lt;p&gt;Here is a sample code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the Random Over Sampler object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.over_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomOverSampler&lt;/span&gt;

&lt;span class="c1"&gt;# create the object.
&lt;/span&gt;&lt;span class="n"&gt;over_sampler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomOverSampler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_over&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_over&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;over_sampler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#smote-oversampling"&gt;
  &lt;/a&gt;
  SMOTE Oversampling
&lt;/h2&gt;

&lt;p&gt;SMOTE stands for Synthetic Minority Oversampling Technique — it consists of creating or synthesizing elements or samples from the minority class rather than creating copies based on those that exist already. This is used to avoid model overfitting.&lt;/p&gt;

&lt;p&gt;To create a synthetic instance, SMOTE finds the K-nearest neighbors of each minority instance, randomly selects one of them and then calculates linear interpolations to produce a new minority instance in the neighborhood. It can be also explained by changing this instance features one at a time by a random amount — so as a result, the new points are added between the neighbors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9kKUFa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AbSOwLuDleEEGiuw7PtooOQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9kKUFa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AbSOwLuDleEEGiuw7PtooOQ.png" alt="SMOTE Algorithm" width="700" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a code snippet showing how to resample the minority class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the SMOTETomek
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.over_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SMOTE&lt;/span&gt;

&lt;span class="c1"&gt;# create the  object with the desired sampling strategy.
&lt;/span&gt;&lt;span class="n"&gt;smote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SMOTE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'minority'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to our training data
&lt;/span&gt;&lt;span class="n"&gt;x_train_smote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_smote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adasyn-oversampling"&gt;
  &lt;/a&gt;
  ADASYN Oversampling
&lt;/h2&gt;

&lt;p&gt;ADASYN stands for &lt;strong&gt;Adaptive Synthetic sampling&lt;/strong&gt;, and as SMOTE does, ADASYN generates samples of the minority class. But here, because of their &lt;strong&gt;density distributions&lt;/strong&gt;, this technique receives wide attention.&lt;/p&gt;

&lt;p&gt;Its purpose is to generate data for minority class samples that are harder to learn, as compared to those minority samples that are easier to learn.&lt;/p&gt;

&lt;p&gt;It measures the K-nearest neighbors for all minority instances, then calculates the class ratio of the minority and majority instances to create new samples.&lt;/p&gt;

&lt;p&gt;Repeating this process, we will &lt;strong&gt;adaptively&lt;/strong&gt; shift the decision boundary to focus on those samples that are hard to learn.&lt;/p&gt;

&lt;p&gt;Here is a code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the ADASYN object.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.over_sampling&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ADASYN&lt;/span&gt;

&lt;span class="c1"&gt;# create the object to resample the majority class.
&lt;/span&gt;&lt;span class="n"&gt;adasyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADASYN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"minority"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to the training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_adasyn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_adasyn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adasyn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#combining-oversampling-and-undersampling"&gt;
  &lt;/a&gt;
  Combining Oversampling and Undersampling
&lt;/h1&gt;

&lt;p&gt;We can combine oversampling and undersampling techniques to get better sampling results. Here are two ways that &lt;code&gt;imblearn&lt;/code&gt; provides:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SMOTE &amp;amp; Tomek Links&lt;/strong&gt; — Here’s a code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# import the SMOTETomek.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.combine&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SMOTETomek&lt;/span&gt;

&lt;span class="c1"&gt;# create the  object with the desired sampling strategy.
&lt;/span&gt;&lt;span class="n"&gt;smotemek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SMOTETomek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'auto'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to our training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_smt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_smt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smotemek&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SMOTE &amp;amp; Edited Nearest Neighbor&lt;/strong&gt; — Here’s a code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import the SMOTEENN.
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;imblearn.combine&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SMOTEENN&lt;/span&gt;

&lt;span class="c1"&gt;# create the  object with the desired samplig strategy.
&lt;/span&gt;&lt;span class="n"&gt;smoenn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SMOTEENN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampling_strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'minority'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# fit the object to our training data.
&lt;/span&gt;&lt;span class="n"&gt;x_train_smtenn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train_smtenn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smoenn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#other-techniques"&gt;
  &lt;/a&gt;
  Other Techniques
&lt;/h1&gt;

&lt;p&gt;Besides the resampling methodologies we’ve covered in this article, there are other intuitive and advanced techniques you can employ to deal with this problem. Here are some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Collect more data&lt;/strong&gt;: You can always collect more data from other sources to build a more robust model.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Changing the performance metric&lt;/strong&gt;: We’ve seen that accuracy is misleading — it’s not the metric to use when dealing with imbalanced datasets. Some metrics have been designed for such a case, including: Confusion Matrix, Precision &amp;amp; Recall, F1 Score, ROC Curves.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use different algorithms&lt;/strong&gt;: Some algorithms are better than others when dealing with imbalanced datasets. Generally, in machine learning, we test a variety of different types of algorithms on a given problem to see which ones provide better performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use penalized models&lt;/strong&gt;: Some algorithms allow you to give them a different perspective on the problem. For instance, with some algorithms, we can add costs to force the model to pay attention to the minority class. There are penalized versions of algorithms such as penalized-SVM and logistic regression, even when using deep learning models throughout the &lt;code&gt;class_weight&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;p&gt;There are more resources out there to handle your imbalanced dataset. Here are a few to help you get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://androidkt.com/set-class-weight-for-imbalance-dataset-in-keras/"&gt;How to set class weights for the imbalanced dataset in Keras&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://contrib.scikit-learn.org/imbalanced-learn/stable/index.html"&gt;&lt;code&gt;imbalanced-learn&lt;/code&gt;&lt;/a&gt; documentation.&lt;/li&gt;
&lt;li&gt;Another undersampling method called &lt;a href="https://imbalanced-learn.readthedocs.io/en/stable/generated/imblearn.under_sampling.CondensedNearestNeighbour.html"&gt;Condensed Nearest Neighbour&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we confronted the problem of imbalanced datasets by exploring several different resampling techniques, which allow you to change your dataset’s balance so your model can learn more effectively.&lt;/p&gt;

&lt;p&gt;You’ll need to experiment with these techniques on your specific machine learning problem to see what best fits your case — we don’t have a technique that always allows us to build a better model while achieving the best performance. Otherwise, we wouldn’t be able to say that we’re machine learning engineers.&lt;/p&gt;

&lt;p&gt;You can combine these methods to obtain more reliable models, but I suggest starting small and building upon what you learn.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>sampling</category>
      <category>deeplearning</category>
      <category>mlops</category>
    </item>
    <item>
      <title>What Things Do Developers Get to Focus on Uber Clone Development?</title>
      <author>georgedavid</author>
      <pubDate>Tue, 02 Nov 2021 13:12:39 +0000</pubDate>
      <link>https://dev.to/georgedavid02/what-things-do-developers-get-to-focus-on-uber-clone-development-4lca</link>
      <guid>https://dev.to/georgedavid02/what-things-do-developers-get-to-focus-on-uber-clone-development-4lca</guid>
      <description>&lt;p&gt;Developing mobile applications today is getting higher than developing websites. Instead of people going to browsers and searching for individual websites to book particular on-demand services online, it is really easy for them to do the same through simple mobile apps. Following this, most of the current business initiations highly require the Uber clone in the development processes due to advantages.&lt;/p&gt;

&lt;p&gt;So, let’s discuss why the ready-to-go app script is in such demand and what are the things you need to focus on developing it progressive to the contemporary market requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-app-development-in-the-present-market-scenario"&gt;
  &lt;/a&gt;
  Mobile App Development in The Present Market Scenario
&lt;/h2&gt;

&lt;p&gt;In this busy world, a maximum of industries is turned into smart customer approaches. After the first arrival of transport service via simple mobile applications, several business sectors followed the same digital path later. In which, right from the new emergence to the contemporary market, the transport industry still holds its high level of growth value online.&lt;/p&gt;

&lt;p&gt;This is why today’s entrepreneurs are enormously started to invest in the achievable marketplace. As mobile app development is the core concept for the startup, it is so demanded among business people to find a better developer in the market now.&lt;/p&gt;

&lt;p&gt;On that, by following the upcoming new mobile app development consideration, you could be that developer amongst your rivals smartly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-get-to-focus-to-build-a-progressive-taxi-app"&gt;
  &lt;/a&gt;
  Things Get to Focus to Build A Progressive Taxi App
&lt;/h2&gt;

&lt;p&gt;The development sector in the present market trend is becoming a crucial part compared to others. So as a developer, we could follow up some importance while developing mobile apps for any digitized service sectors. According to it, the below-mentioned stuff must be followed by developers in the taxi app building.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Techstack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your selective tech-stack to develop the entire blog could be like Reactjs, Swift, Laravel, Firebase, Android SDK, and Php. Such more advanced tech sources could assist you in several good aspects in your new business app development such as speedy app creation, user-friendly structure, easy client-centric modulations, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Market Analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make your own market analysis regarding the on-demand transport service industry in present days. Study service providers’ pain points, their development side of requirements, app functionality through additional needs, and existing app users’ demands online. Design your new readymade script apt to the latest market needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While there are many development tools available in the market, the reason why entrepreneurs choose this &lt;a href="https://www.spotnrides.com/"&gt;Uber clone script&lt;/a&gt; for their new mobile app creation is its enhancements and flexibility primarily. Therefore, it is necessary to provide your clients with a 360-degree full customizing app solution on development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost-effective&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Additionally, offer your side of expert business model-related plans and support. That makes them sketch their already planned business idea to be more powerful with expert guidance. Along with advancements as mentioned in the blog like the full tailored solution, latest features and options in-built, and its cost affordability make your complete app output to the business launching so cost-effective at the client end.&lt;/p&gt;

&lt;p&gt;Along with these importance, your app also should acquire some must include as well as progressive in-app features as follows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-demanded-inapp-features-that-must-be-added-to-uber-clone"&gt;
  &lt;/a&gt;
  What Are the Demanded In-app Features that Must Be Added to Uber Clone?
&lt;/h2&gt;

&lt;p&gt;Your app development for the transport service today must be included with the following features. As these are playing major roles in the complete business functionality online, your built script to the latest marketplace naturally acquires the advanced features. That not only provides the app functions seamlessly between heavy user traffic but also becomes so user-friendly to the users’ hands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Social Media Integration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The customers can smartly log in to the business app speedily. This social media through sign-up solutions offer quick access for them even as new users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fast Driver Onboardings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After the requests of new driver registrations, the required documents which they uploaded needed to be verified fast. It makes their onboardings so fast as demanded in the marketplace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GPS Tracking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An optimized GPS-route-mapping-facility should be enabled for the drivers. So they can smartly complete all the tripping smartly without on-road route inquiries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different Payment Option&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Multiple payment gateways are always assisting the passenger to pay fares at their convenience. So, including both the online and offline payment mode is essential in the service app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Push Notifications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A strong interlinking framework concept is needed to build a powerful in-app connection between different players. By ensuring that, the communication through push notifications happens rapidly in the business progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Schedule Booking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By including the schedule-based booking option with your ready-made app, your developed app allows riders to book cabs in advance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By virtue of all the users' sensitive information such as banking, contact-info, and social media credentials needed to be secured in the service, the app must contain an automated end-to-end data encryption technology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart User Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The overall-admin-control option should be easy, especially in user control. For i.e. the admin should be able to add or remove any user at any time under demand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;As mobile app development is the core concept in new business initiations, it is very crucial to follow some importance on the development area. While concentrating on stuff like selecting enhanced tech-stack, market analysis, client requirements, and cost-effectiveness, you could smartly create a demanded ready-made app as discussed. That makes you stand out from others in the development market ever in the future.&lt;/p&gt;

</description>
      <category>development</category>
      <category>beginners</category>
      <category>programming</category>
      <category>uberclone</category>
    </item>
    <item>
      <title>Responsive Personal Portfolio Website with HTML CSS JS - Part 2</title>
      <author>Sadee</author>
      <pubDate>Tue, 02 Nov 2021 13:05:50 +0000</pubDate>
      <link>https://dev.to/codewithsadee/responsive-personal-portfolio-website-with-html-css-js-part-2-l5</link>
      <guid>https://dev.to/codewithsadee/responsive-personal-portfolio-website-with-html-css-js-part-2-l5</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EOtRjEeP6zk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Responsive personal portfolio website with html css js&lt;/p&gt;

&lt;p&gt;In this video series, &lt;br&gt;
I will show you how to build a Complete Responsive Personal Portfolio Website using HTML CSS JavaScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#website-features"&gt;
  &lt;/a&gt;
  🌟 Website features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;5 pages&lt;/li&gt;
&lt;li&gt;Fully Responsive and mobile friendly&lt;/li&gt;
&lt;li&gt;Awesome Page Navigation&lt;/li&gt;
&lt;li&gt;Filterable item showcase&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;HI 👋&lt;br&gt;
I'm Sadee (webdev)&lt;br&gt;
In this channel I make videos about Complete Responsive website.&lt;br&gt;
You can checkout my channel 👇&lt;/p&gt;

&lt;p&gt;📺 My Channel : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
🔔 Subscribe : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g?sub_confirmation=1"&gt;subscribe now&lt;/a&gt;&lt;br&gt;
🕐 New videos Every Friday &amp;amp; Tuesday&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#recommended-videos"&gt;
  &lt;/a&gt;
  📹 Recommended Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/codewithsadee/responsive-personal-portfolio-website-with-html-css-js-part-1-3dlg"&gt;Part 1&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;Images : &lt;a href="https://drive.google.com/file/d/1CZZcnaOEVDDneSve6qpSUoyAfEBuPrqD/view"&gt;image.zip&lt;/a&gt;&lt;br&gt;
Font : &lt;a href="https://fonts.google.com/specimen/Poppins?query=poppins"&gt;Poppins&lt;/a&gt;&lt;br&gt;
Ionicon : &lt;a href="https://ionic.io/ionicons"&gt;https://ionic.io/ionicons&lt;/a&gt;&lt;br&gt;
How to use ionicon : &lt;a href="https://youtu.be/TTrYjLOJeKs"&gt;https://youtu.be/TTrYjLOJeKs&lt;/a&gt;&lt;br&gt;
Source Code : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#timestamp"&gt;
  &lt;/a&gt;
  ⏱️ Timestamp
&lt;/h2&gt;

&lt;p&gt;0:00 - Demo&lt;br&gt;
0:57 - New Variables and default style&lt;br&gt;
2:34 - Resume section&lt;br&gt;
16:23 - Media queries&lt;br&gt;
18:17 - Page navigation functionality&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  👤 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;https://www.buymeacoffee.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to start TwitterOAuth with Express.js</title>
      <author>saldra</author>
      <pubDate>Tue, 02 Nov 2021 12:57:23 +0000</pubDate>
      <link>https://dev.to/sald_ra/how-to-start-twitteroauth-with-express-4m07</link>
      <guid>https://dev.to/sald_ra/how-to-start-twitteroauth-with-express-4m07</guid>
      <description>&lt;p&gt;What kind of procedure OAuth process in Twitter?&lt;br&gt;
If you want tweet with OAuth flow,You must get Access token and access token secret.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#twitteroauth-flow"&gt;
  &lt;/a&gt;
  twitterOAuth flow
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h3&gt;

&lt;p&gt;Getting oauth_consumer_key,oauth_consumer_secret, and setting oauth_callback in Twitter Developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlzNcPW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmmpi7kj19adf1z3r9hx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlzNcPW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmmpi7kj19adf1z3r9hx.png" alt="display key and tokens" width="880" height="649"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JR9J77Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do3p1gj855j4ulfb5hg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JR9J77Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/do3p1gj855j4ulfb5hg3.png" alt="setting" width="880" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;oauth_consumer_key(=API Key)&lt;/li&gt;
&lt;li&gt;oauth_consumer_secret(=API Key Secret)&lt;/li&gt;
&lt;li&gt;oauth_callback:without this URL,error in OAuth flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#1-post-to-oauthrequesttoken"&gt;
  &lt;/a&gt;
  1. POST to oauth/request_token
&lt;/h3&gt;

&lt;p&gt;After POST to oauth/request_token with oauth_consumer_key and oauth_callback,you'll get this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;oauth_token(=request token)&lt;/li&gt;
&lt;li&gt;oauth_token_secret(=request token secret)&lt;/li&gt;
&lt;li&gt;oauth_callback_confirmed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-get-to-oauthauthorize"&gt;
  &lt;/a&gt;
  2. GET to oauth/authorize
&lt;/h3&gt;

&lt;p&gt;redirect to your setting callback_url containing the oauth_token and oauth_verifier.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-post-oauthaccesstoken"&gt;
  &lt;/a&gt;
  3. POST oauth/access_token
&lt;/h3&gt;

&lt;p&gt;post to oauth/access_token includes oauth_consumer_key,oauth_token(=request token),and oauth_verifier.&lt;br&gt;
So,you can receive oauth_token(=access token) and oauth_token_secret(=access token secret).&lt;/p&gt;

&lt;p&gt;After saved this,use twitter client library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fucntion&lt;/span&gt; &lt;span class="nx"&gt;twitterPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consumerKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;consumerSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;AccessTokenKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;AccessTokenSecret&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Twitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Twitter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AccessTokenKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AccessTokenSecret&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#twitteroauth-with-express"&gt;
  &lt;/a&gt;
  TwitterOAuth with express
&lt;/h2&gt;

&lt;p&gt;using this&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;express&lt;/li&gt;
&lt;li&gt;express-session&lt;/li&gt;
&lt;li&gt;node-twitter-api&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h3&gt;

&lt;p&gt;loading environment variables from a .env file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consumerKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consumerSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callbackURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CALLBACK_URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;setting session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keyboard cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resave&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;saveUninitialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saving to session oauth_token(=requestToken) and oauth_token_secret(=requestTokenSecret).&lt;br&gt;
GET oauth/authenticate after that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twitterAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-twitter-api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twitterapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;twitterAPI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;consumerKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;consumerSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;callbackURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRequestToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;requestToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;requestTokenSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error getting OAuth request token : &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestTokenSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestTokenSecret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://twitter.com/oauth/authenticate?oauth_token=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;requestToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after verify your app,redirect your setting callback_url. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EoQKNb0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nmh7gfsbdokiy3piuym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EoQKNb0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nmh7gfsbdokiy3piuym.png" alt="verify" width="691" height="833"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/callback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestTokenSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestTokenSecret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oauth_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oauth_token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oauth_verifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oauth_verifier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;oauth_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;requestTokenSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;oauth_verifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accessTokenSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;access token error!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;accessTokenSecret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/twitterPost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/twitterPost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;twitterPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;consumerKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;consumerSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`your tweet was posted!`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>express</category>
    </item>
    <item>
      <title>Book review "Mastering Perl"</title>
      <author>Tib</author>
      <pubDate>Tue, 02 Nov 2021 12:56:59 +0000</pubDate>
      <link>https://dev.to/thibaultduponchelle/book-review-mastering-perl-1bmo</link>
      <guid>https://dev.to/thibaultduponchelle/book-review-mastering-perl-1bmo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQoMngwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t33a9d2rkmicle13i3k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQoMngwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t33a9d2rkmicle13i3k.jpg" alt="Mastering Perl" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/mastering-perl/9780596527242/"&gt;Mastering Perl&lt;/a&gt; is a book from &lt;a href="https://en.wikipedia.org/wiki/Brian_d_foy"&gt;brian d foy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this post, read my other &lt;a href="https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6"&gt;Perl books reviews&lt;/a&gt; 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#becoming-a-perl-master"&gt;
  &lt;/a&gt;
  Becoming a Perl master
&lt;/h2&gt;

&lt;p&gt;This is a good paragraph title because this is what this book is about, to make you a better programmer and particularly a better Perl programmer. &lt;/p&gt;

&lt;p&gt;The goal is even more fairly high since it aims to (give you hints) to make you a &lt;em&gt;master&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1OCZZ_Lw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulwoh9w8b4pl4wt9qdgv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OCZZ_Lw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulwoh9w8b4pl4wt9qdgv.jpg" alt="Splinter" width="474" height="592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is an interesting introduction about how to become a master &lt;em&gt;in general&lt;/em&gt;, how it involves studying methods from multiple masters, working on a masterpiece and knowing multiple languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#book-structure"&gt;
  &lt;/a&gt;
  Book structure
&lt;/h2&gt;

&lt;p&gt;The book is composed of a serie of totally independent chapters. Each chapter focuses on one topic and has the same structure: a kind of introduction, the main content with paragraphs, a list of resources and a conclusion.&lt;/p&gt;

&lt;p&gt;There are a lot of names dropping and references so you can continue your path to mastering 😀&lt;/p&gt;

&lt;p&gt;Reading this book requires to know Perl basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regex"&gt;
  &lt;/a&gt;
  Regex
&lt;/h2&gt;

&lt;p&gt;Regex as first chapter is a bit rough 😀 but there are a lot of interesting bits like explanations about modifiers, &lt;code&gt;lookahead&lt;/code&gt; and &lt;code&gt;lookbehind&lt;/code&gt;, the &lt;code&gt;use re "debug";&lt;/code&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;This chapter suffers from being old (the book I have into my hands was published in 2007) and all topics are very well known today (but does not mean they are no longer true).&lt;/p&gt;

&lt;p&gt;I enjoyed the description of different forms of system calls and the explanation about setuid. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-perl"&gt;
  &lt;/a&gt;
  Debugging Perl
&lt;/h2&gt;

&lt;p&gt;A lot of very nice tricks here, like &lt;code&gt;redefine&lt;/code&gt; or wrapping subs or even using &lt;code&gt;-d&lt;/code&gt; for a &lt;code&gt;Devel::&lt;/code&gt; shortcut 👍&lt;/p&gt;

&lt;p&gt;Have you ever used all debugging functions from this list?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;print&lt;/code&gt; (of course! Who does not?!)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;warn&lt;/code&gt; (yes, a customized print)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;croak&lt;/code&gt; (people says it is the magic wand)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;carp&lt;/code&gt; (how is it different from croak?)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cluck&lt;/code&gt; (WUT?) &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;confess&lt;/code&gt; (how many are there?)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#profiling"&gt;
  &lt;/a&gt;
  Profiling
&lt;/h2&gt;

&lt;p&gt;This is a great and not so great chapter in the same time. There is plenty of profilers listed here like &lt;a href="https://metacpan.org/pod/Devel::SmallProf"&gt;Devel::SmallProf&lt;/a&gt; (not updated since 2007, still good?) or &lt;a href="https://metacpan.org/pod/DBI::ProfileDumper"&gt;DBI::ProfileDumper&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Devel::DProf"&gt;Devel::Dprof&lt;/a&gt; (deprecated). &lt;/p&gt;

&lt;p&gt;I must add &lt;a href="https://metacpan.org/dist/Devel-NYTProf"&gt;Devel::NYTProf&lt;/a&gt; because it's a must! I think it is not mentioned because it was not created when this book was released.&lt;/p&gt;

&lt;p&gt;There is even a paragraph to explain how to write your own debugger.&lt;/p&gt;

&lt;p&gt;It's not so great because the first edition of Mastering Perl is old, code is not really modern and it is a bit "too personal" for me (this last point could be a good point for other people, matter of taste).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmark"&gt;
  &lt;/a&gt;
  Benchmark
&lt;/h2&gt;

&lt;p&gt;In addition to pure benchmark tips like &lt;code&gt;-DDEBUGGING_MSTATS&lt;/code&gt; compilation flag and benchmark functions like &lt;code&gt;timethese&lt;/code&gt; there are technical details from perl internals (and this is something I really enjoy)&lt;/p&gt;

&lt;p&gt;"perl trades memory for processing speed" or "perl does a lot of lookup instead a lot of compilation" or even about memory management (perl takes big memory chunk and tries to reuse them)&lt;/p&gt;

&lt;p&gt;Some usage of &lt;a href="https://metacpan.org/pod/Devel::Peek"&gt;Devel::Peek&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Devel::Size"&gt;Devel::Size&lt;/a&gt; are showing how perl behaves (SV, PV, PVIV, how data is stored) and how we can inspect this even from running program.&lt;/p&gt;

&lt;p&gt;I really loved this chapter!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-up-perl"&gt;
  &lt;/a&gt;
  Clean Up Perl
&lt;/h2&gt;

&lt;p&gt;This chapter is about managing a codebase and does not fall into the trap of giving details about coding style but keeps about generic concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Code isn't bad because a novice Perl programmer can't read it"&lt;/li&gt;
&lt;li&gt;"[You should] Be able to understand handful major coding styles"&lt;/li&gt;
&lt;li&gt;"Be coherent and mimic existing style"&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#typeglobs"&gt;
  &lt;/a&gt;
  Typeglobs
&lt;/h2&gt;

&lt;p&gt;Very interesting explanations about scopes (&lt;code&gt;my&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;our&lt;/code&gt;, &lt;code&gt;packages&lt;/code&gt;) passing functions as parameters or return values of functions.&lt;br&gt;
It opens the door to the next chapter about "Dynamic Subs"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-subroutines"&gt;
  &lt;/a&gt;
  Dynamic subroutines
&lt;/h2&gt;

&lt;p&gt;A lot of black magic here about references, symbolic references, &lt;a href="https://metacpan.org/pod/Data::Constraint"&gt;Data::Constraint&lt;/a&gt; (that I found pretty clever), Autoload, Autosplit.&lt;/p&gt;

&lt;p&gt;Code samples are dirty: hacks + &lt;code&gt;goto&lt;/code&gt; + &lt;code&gt;&amp;amp;{$AUTOLOAD}&lt;/code&gt; + regex + &lt;code&gt;$1&lt;/code&gt; + &lt;code&gt;$_&lt;/code&gt; + &lt;code&gt;no stricts&lt;/code&gt; + &lt;code&gt;$sub = sub&lt;/code&gt; + &lt;code&gt;die&lt;/code&gt; + &lt;code&gt;$_[0]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But hey it's gory details, at some point if we want to understand all Perl internals...&lt;/p&gt;

&lt;p&gt;And as I said it is really black magic! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifying-and-jury-rigging-modules"&gt;
  &lt;/a&gt;
  Modifying and jury rigging modules
&lt;/h2&gt;

&lt;p&gt;This chapter explains how to debug/patch modules.&lt;/p&gt;

&lt;p&gt;For the record: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local patch with very high version&lt;/li&gt;
&lt;li&gt;Redefine sub in caller code&lt;/li&gt;
&lt;li&gt;Wrap sub in caller code&lt;/li&gt;
&lt;li&gt;Subclass (if possible) sub in caller code &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configuring-perl-programs"&gt;
  &lt;/a&gt;
  Configuring Perl programs
&lt;/h2&gt;

&lt;p&gt;Various methods described:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Config in Perl code&lt;/li&gt;
&lt;li&gt;Config in external Perl code (e.g. code.pl &lt;code&gt;require&lt;/code&gt; config.pl)&lt;/li&gt;
&lt;li&gt;Config in ENV vars&lt;/li&gt;
&lt;li&gt;Command line args (via GetOpt or &lt;code&gt;perl -s&lt;/code&gt;). Raku has MAIN&lt;/li&gt;
&lt;li&gt;Config file (ini, yaml...)&lt;/li&gt;
&lt;li&gt;Configure according to filename (modern trick like git-log)&lt;/li&gt;
&lt;li&gt;Interactive questions (if interactive shell &lt;code&gt;-t STDOUT&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Heavy config &lt;code&gt;use Config&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#error-reporting-and-logging"&gt;
  &lt;/a&gt;
  Error reporting and logging
&lt;/h2&gt;

&lt;p&gt;We don't really have exceptions in Perl, we have &lt;code&gt;eval&lt;/code&gt; + &lt;code&gt;die&lt;/code&gt; to simulate or &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; coming into core right now but is it not universally used. The chapter details about sending and retrieving errors or propagating them.&lt;/p&gt;

&lt;p&gt;Logging chapter presents some logging facilities and especially &lt;code&gt;log4perl&lt;/code&gt; which is very powerful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-persistence"&gt;
  &lt;/a&gt;
  Data persistence
&lt;/h2&gt;

&lt;p&gt;Once again this chapter gives you pointers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Data::Dumper"&gt;Data::Dumper&lt;/a&gt; to serialize as string&lt;/li&gt;
&lt;li&gt;YAML&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Storable"&gt;Storable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DBM (not always portable if we use different driver)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Concerning serialization, I must add &lt;a href="https://metacpan.org/pod/Sereal"&gt;Sereal&lt;/a&gt;, ProtocolBuffer and Avro.&lt;br&gt;
I think none of them existed when the book was released.&lt;/p&gt;

&lt;p&gt;EDIT: some more... MessagePack, XDR 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-bits-and-tied-variables"&gt;
  &lt;/a&gt;
  Working with bits and tied variables
&lt;/h2&gt;

&lt;p&gt;Diving into functions "close to material" with &lt;code&gt;vec&lt;/code&gt; or &lt;a href="https://metacpan.org/pod/Bit::Vector"&gt;Bit::Vector&lt;/a&gt; an &lt;a href="https://metacpan.org/pod/Tie::Cycle"&gt;Tie::Cycle&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Tie::BoundedInteger"&gt;Tie::BoundedInteger&lt;/a&gt; etc...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules-as-programs"&gt;
  &lt;/a&gt;
  Modules as programs
&lt;/h2&gt;

&lt;p&gt;Very nice trick with &lt;code&gt;caller()&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tricks-in-bulk"&gt;
  &lt;/a&gt;
  Tricks in bulk
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@{[ ]}&lt;/code&gt; see &lt;a href="https://metacpan.org/dist/perlsecret/view/lib/perlsecret.pod#Baby-cart"&gt;baby cart&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;keys map&lt;/code&gt; to untaint&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WARN&lt;/code&gt; is  signal!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;L::*&lt;/code&gt; (I think it's &lt;a href="https://pause.perl.org/pause/query?ACTION=pause_namingmodules#Local"&gt;like Local::*&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dualvar&lt;/code&gt; for error for instance&lt;/li&gt;
&lt;li&gt;END blocks are executed after a &lt;code&gt;die&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$^E&lt;/code&gt; for OS specific errors&lt;/li&gt;
&lt;li&gt;You can put perl code in log4perl conf&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Data::Dumper"&gt;Data::Dumper&lt;/a&gt; does not work for subs&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vec&lt;/code&gt; can be a lvalue&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;make disttest&lt;/code&gt;, &lt;code&gt;make tardist&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#citations"&gt;
  &lt;/a&gt;
  Citations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"Humility is the principal virtue of a maintenance programmer"&lt;/li&gt;
&lt;li&gt;"Talk to your Perl therapist"&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While being imperfect (mainly due to the age of the book, &lt;del&gt;only one and last edition in 2007&lt;/del&gt;), &lt;a href="https://www.oreilly.com/library/view/mastering-perl/9780596527242/"&gt;Mastering Perl&lt;/a&gt; is rewarding and teaches a lot of useful things from programming concepts to Perl details (more the latter actually).&lt;/p&gt;

&lt;p&gt;I can recommend this book since I learned a lot of tricks 😀&lt;/p&gt;

</description>
      <category>perl</category>
      <category>books</category>
    </item>
    <item>
      <title>Version Control(Git) for Beginners</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Tue, 02 Nov 2021 12:56:34 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/version-controlgit-for-beginners-2chm</link>
      <guid>https://dev.to/vadimkolobanov/version-controlgit-for-beginners-2chm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-vcs"&gt;
  &lt;/a&gt;
  What is VCS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;VCS&lt;/strong&gt; – version control system.&lt;br&gt;
A version control system is a system that records changes to a file or set of files over time and allows you to return later to a specific version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-vcs"&gt;
  &lt;/a&gt;
  Types of VCS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Local (RCS)&lt;/li&gt;
&lt;li&gt;Centralized (CVS, Subversion)&lt;/li&gt;
&lt;li&gt;Distributed (Git, Mercurial, BitKeeper)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#local-vcs"&gt;
  &lt;/a&gt;
  Local VCS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3n9Olkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kedh6od0gqncxl9b322.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3n9Olkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kedh6od0gqncxl9b322.png" alt="Local VCS" width="880" height="752"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centrilized-vcs"&gt;
  &lt;/a&gt;
  Centrilized VCS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EN4sIyks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://xinyeshuaiqi.cn/wp-content/uploads/2019/01/3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EN4sIyks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://xinyeshuaiqi.cn/wp-content/uploads/2019/01/3.jpg" alt="Centralized VCS" width="880" height="649"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distributed-vcs"&gt;
  &lt;/a&gt;
  Distributed VCS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EkPgN-ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r73arm5tdzfq3qp5i4yg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EkPgN-ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r73arm5tdzfq3qp5i4yg.png" alt="Distributed VCS" width="880" height="1054"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-git"&gt;
  &lt;/a&gt;
  Advantages of GIT
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speed.&lt;/li&gt;
&lt;li&gt;Simple design.&lt;/li&gt;
&lt;li&gt;Strong support for non-linear development (thousands of parallel branches).&lt;/li&gt;
&lt;li&gt;Fully distributed.&lt;/li&gt;
&lt;li&gt;Able to handle large projects like the Linux kernel efficiently (speed and data size).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#basic-ideas"&gt;
  &lt;/a&gt;
  Basic ideas
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Versions are snapshots, not diff.&lt;/li&gt;
&lt;li&gt;Almost all operations are performed locally&lt;/li&gt;
&lt;li&gt;Integrity. The SHA-1 hash is calculated for everything.&lt;/li&gt;
&lt;li&gt;After adding data to the git, it is hard (but possible) to lose them.&lt;/li&gt;
&lt;li&gt;Full git support is available only in the terminal.&lt;/li&gt;
&lt;li&gt;All files can be in one of the following states - committed, modified, staged&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#changes-are-snapshots-not-a-difference"&gt;
  &lt;/a&gt;
  Changes are snapshots not a difference
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Shapshots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qx5o6foR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qogtkmu4csw0xscp5vff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qx5o6foR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qogtkmu4csw0xscp5vff.png" alt="Snapshots" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diffs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYvVLoPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n6aktrugcflb9mqrel2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYvVLoPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n6aktrugcflb9mqrel2.png" alt="snap(delta)" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each project file in Git/Mercurial indexing process can have one of the three possible states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;modified, but not staged:&lt;/strong&gt; This is when a project file is modified by the user, but Git/Mercurial has no track of the file changes at the moment. If the file is lost or removed unexpectedly, then Git cannot recover the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;staged for commit to the repository:&lt;/strong&gt; When a file is modified it can be added to the Git staging area to be later committed permanently to the repository. The staging area is a file, generally contained in the project’s repository ( directory), that stores information about what will go into the next commit to the repository. The staging area is also sometimes referred to as the index. .git&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;committed to the repository:&lt;/strong&gt; Once the staged files are committed to the repository, they become a permanent part of it, and can be later extracted (checked out) for review or further development.&lt;br&gt;
These three file states comprise an important integral part of Git and Mercurial. The following figure provides an illustration of the three file states.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UCmmbp1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1emw55gmk6tv22g4vkou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UCmmbp1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1emw55gmk6tv22g4vkou.png" alt="Stages" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-configuration"&gt;
  &lt;/a&gt;
  Git configuration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;git config [--&amp;lt;layer&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  &amp;lt;key&amp;gt;
&lt;span class="go"&gt;
layers:
 --system 
 --global  
 --local 
&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Vadim Kolobanov"&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email titanyforgame@gmail.com
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; core.editor nano
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; credential.helper store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#help"&gt;
  &lt;/a&gt;
  Help
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;man git-&amp;lt;verb&amp;gt; //Linux &lt;span class="nb"&gt;command&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git &amp;lt;verb&amp;gt; &lt;span class="nt"&gt;-h&lt;/span&gt; | &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git init
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git clone https://github.com/username/repo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-lifecycle"&gt;
  &lt;/a&gt;
  File lifecycle
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Rscjqyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwzxyyyiy1cekmmlm8de.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Rscjqyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwzxyyyiy1cekmmlm8de.png" alt="Lifecycle" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-to-staging"&gt;
  &lt;/a&gt;
  Adding to staging
&lt;/h3&gt;

&lt;p&gt;Add changes to staging&lt;br&gt;
$ git add  []&lt;/p&gt;

&lt;p&gt;You can use wildcards:&lt;/p&gt;

&lt;p&gt;$ git add *.py&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt; - is used to add all changes:&lt;/p&gt;

&lt;p&gt;$ git add .&lt;/p&gt;

&lt;p&gt;*- to replace any string of asterisk characters&lt;br&gt;
&lt;code&gt;?&lt;/code&gt; - to replace any single character with a question mark.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-git-status"&gt;
  &lt;/a&gt;
  Viewing GIT status
&lt;/h3&gt;

&lt;p&gt;Current status (changes, branch)&lt;br&gt;
$ git status&lt;/p&gt;

&lt;p&gt;Command Parameters:&lt;br&gt;
$ git status --help&lt;/p&gt;

&lt;p&gt;View file changes:&lt;br&gt;
$ git diff []&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saving-the-changes-commit"&gt;
  &lt;/a&gt;
  Saving the changes. Commit
&lt;/h3&gt;

&lt;p&gt;Move a file from staged to modified&lt;br&gt;
$ git reset HEAD &lt;/p&gt;

&lt;p&gt;Move the file to the unchanged state. (Undo all changes):&lt;br&gt;
$ git checkout -- &lt;/p&gt;

&lt;p&gt;Delete a file from the working directory.&lt;br&gt;
--cached to mark for deletion but not physically delete:&lt;br&gt;
$ git rm [ --cached] &lt;/p&gt;

&lt;p&gt;Add changes from staging to the last commit:&lt;br&gt;
$ git commit --amend&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-history"&gt;
  &lt;/a&gt;
  Viewing history
&lt;/h3&gt;

&lt;p&gt;$ git log&lt;/p&gt;

&lt;p&gt;commit 5f5b7b4b1e1684a9b428dce1bfcf86085ccf4b6f (HEAD -&amp;gt; issue-1)&lt;br&gt;
Author: Some_User &lt;a href="mailto:somemail@gmail.com"&gt;somemail@gmail.com&lt;/a&gt;&lt;br&gt;
Date:   Mon Nov 01 22:11:19 2021 +0300&lt;br&gt;
20&lt;/p&gt;

&lt;p&gt;Add view for GET user credentials&lt;/p&gt;

&lt;p&gt;commit ac1b0e4a0613fab175a7a99858e128d17412fbf3 (origin/issue-1)&lt;br&gt;
Author: Some_User &lt;a href="mailto:somemail@gmail.com"&gt;somemail@gmail.com&lt;/a&gt;&lt;br&gt;
Date:   Mon Nov 01 23:49:19 2021 +0300&lt;/p&gt;

&lt;p&gt;Add db settings&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  PS
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is basic information about git, additionally in the next part I will tell you about branches, merges, remote repositories. Good luck to everyone in learning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also &lt;a href="https://titanyforgame.medium.com/"&gt;find me on Medium&lt;/a&gt;. I will be very glad to have &lt;br&gt;
your attention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/bePatron?u=64009903"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AfNsHBQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4kAQAgAW--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3jtgy2i5l4w8slkps5.png" alt="Become a patron" width="499" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Let's build a stock price CLI with Python</title>
      <author>Code_Jedi</author>
      <pubDate>Tue, 02 Nov 2021 12:56:21 +0000</pubDate>
      <link>https://dev.to/code_jedi/lets-build-a-stock-price-cli-with-python-g28</link>
      <guid>https://dev.to/code_jedi/lets-build-a-stock-price-cli-with-python-g28</guid>
      <description>&lt;p&gt;Are you someone who can't help checking the latest stock prices every 5 minutes? Thanks to Python, getting the latest stock prices can be as easy as running &lt;code&gt;python3 main.py AMZN&lt;/code&gt; in your terminal. In this tutorial, you will learn how to make a CLI with Python that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reads the ticker whose price you would like to get.&lt;/li&gt;
&lt;li&gt;Scrapes the specified ticker's latest price.&lt;/li&gt;
&lt;li&gt;Displays the scraped price.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;First things first, create a new python file. For this tutorial, I'll name mine &lt;code&gt;main.py&lt;/code&gt;. Once you have your new python file, import &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;BeautifulSoup&lt;/code&gt; and &lt;code&gt;requests&lt;/code&gt;:&lt;br&gt;
&lt;strong&gt;main.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sys
import requests
from bs4 import BeautifulSoup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our CLI will need the user to input a ticker as a command-line argument after &lt;code&gt;python3 main.py&lt;/code&gt;. Using the &lt;code&gt;sys&lt;/code&gt; library, we can check if the user has entered a ticker and make the CLI return an error if no ticker was provided or if too many tickers were provided. This CLI will then define the &lt;code&gt;ticker&lt;/code&gt; variable as the second argument provided by the user:&lt;br&gt;
&lt;strong&gt;main.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if len(sys.argv) &amp;gt; 2:
    print('You have specified too many tickers')
    sys.exit()

if len(sys.argv) &amp;lt; 2:
    print('No ticker provided')
    sys.exit()

ticker = sys.argv[1] # 0 = first argument and 1 = second argument
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our CLI will need to scrape the provided ticker for it's latest price. We can do this using the &lt;code&gt;BeautifulSoup&lt;/code&gt; and &lt;code&gt;requests&lt;/code&gt; libraries.&lt;/p&gt;

&lt;p&gt;The CLI will scrape the stock prices from &lt;a href="https://finance.yahoo.com/"&gt;yahoo finance&lt;/a&gt;. It will need to change the URL it scrapes based on the ticker entered by the user. Since the entered ticker gets stored inside the &lt;code&gt;ticker&lt;/code&gt; variable, following yahoo finance's url structure, the CLI can change the &lt;code&gt;url&lt;/code&gt; variable based on the ticker like so:&lt;br&gt;
&lt;strong&gt;main.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url = 'https://finance.yahoo.com/quote/' + ticker + '?p=' + ticker + '&amp;amp;.tsrc=fin-srch'
response = requests.get(url)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, if the provided ticker is &lt;code&gt;AMZN&lt;/code&gt;, the CLI will scrape &lt;a href="https://finance.yahoo.com/quote/AMZN?p=AMZN&amp;amp;.tsrc=fin-srch"&gt;this url&lt;/a&gt;.&lt;br&gt;
If the provided ticker is instead &lt;code&gt;AAPL&lt;/code&gt;, the CLI will scrape &lt;a href="https://finance.yahoo.com/quote/AAPL?p=AAPL&amp;amp;.tsrc=fin-srch"&gt;this url&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import sys
import requests
from bs4 import BeautifulSoup

if len(sys.argv) &amp;gt; 2:
    print('You have specified too many tickers')
    sys.exit()

if len(sys.argv) &amp;lt; 2:
    print('No ticker provided')
    sys.exit()

ticker = sys.argv[1]

url = 'https://finance.yahoo.com/quote/' + ticker + '?p=' + ticker + '&amp;amp;.tsrc=fin-srch'
response = requests.get(url)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#scraping-the-stock-price"&gt;
  &lt;/a&gt;
  Scraping the stock price
&lt;/h3&gt;

&lt;p&gt;For the actual scraping part, first go to a sample ticker's stock price webpage on yahoo finance. I'll choose &lt;a href="https://finance.yahoo.com/quote/AMZN?p=AMZN&amp;amp;.tsrc=fin-srch"&gt;AMZN&lt;/a&gt; for this tutorial. Locate the sample ticker's stock price element and right click on it. This will make a pop-up appear next to your cursor, click on the &lt;code&gt;inspect&lt;/code&gt; option:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3Ycv6Vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/no469xj5l0vgnvo0hxcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3Ycv6Vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/no469xj5l0vgnvo0hxcb.png" alt="Inspect the stock price" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will make a large pop-up containing this webpage's DOM appear at the right of your screen with the selected stock price element highlighted in light blue:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jh_Lmnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2wp793xfv98bmgikf7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jh_Lmnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2wp793xfv98bmgikf7m.png" alt="DOM pop-up" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select and copy the highlighted element's &lt;code&gt;class&lt;/code&gt; property:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L8NSw8jl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6061qoxj9azpmw4x97g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L8NSw8jl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6061qoxj9azpmw4x97g.png" alt="Select class property" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Now that you have this element's &lt;code&gt;class&lt;/code&gt; property, to scrape this ticker's latest stock price, add the following code to &lt;code&gt;main.py&lt;/code&gt;:&lt;br&gt;
&lt;strong&gt;main.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    soup = BeautifulSoup(response.text, 'html.parser')
    price = soup.find('body').find(class_='Trsdu(0.3s) Fw(b) Fz(36px) Mb(-4px) D(ib)')
    print('Latest stock price: ' + price.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will find the stock price element through it's class property and display it's text contents using &lt;code&gt;price.text.strip()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import sys
import requests
from bs4 import BeautifulSoup

if len(sys.argv) &amp;gt; 2:
    print('You have specified too many tickers')
    sys.exit()

if len(sys.argv) &amp;lt; 2:
    print('No ticker provided')
    sys.exit()

ticker = sys.argv[1]

url = 'https://finance.yahoo.com/quote/' + ticker + '?p=' + ticker + '&amp;amp;.tsrc=fin-srch'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
price = soup.find('body').find(class_='Trsdu(0.3s) Fw(b) Fz(36px) Mb(-4px) D(ib)')
print('Latest stock price: ' + price.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;One last thing!&lt;/strong&gt;&lt;br&gt;
Put the last piece of code into a &lt;code&gt;try:&lt;/code&gt; statement and return an error if the user entered an invalid ticker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import sys
import requests
from bs4 import BeautifulSoup

if len(sys.argv) &amp;gt; 2:
    print('You have specified too many tickers')
    sys.exit()

if len(sys.argv) &amp;lt; 2:
    print('No ticker provided')
    sys.exit()

ticker = sys.argv[1]

url = 'https://finance.yahoo.com/quote/' + ticker + '?p=' + ticker + '&amp;amp;.tsrc=fin-srch'
response = requests.get(url)
try:
    soup = BeautifulSoup(response.text, 'html.parser')
    price = soup.find('body').find(class_='Trsdu(0.3s) Fw(b) Fz(36px) Mb(-4px) D(ib)')
    print('Latest stock price: ' + price.text.strip())
except:
    print('Invalid ticker')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;I have put the link to the full code as one of my free gumroad products &lt;a href="https://mattnikonorov.gumroad.com/l/TFbWS"&gt;here&lt;/a&gt;. I frequently post cool projects and developer resources there, a &lt;a href="https://app.gumroad.com/mattnikonorov"&gt;follow&lt;/a&gt; would be much appreciated ;)&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#time-to-test"&gt;
  &lt;/a&gt;
  Time to test!
&lt;/h2&gt;

&lt;p&gt;Now that you have the full code, it's time to run some tests.&lt;br&gt;
&lt;strong&gt;Check Amazon's stock price:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNuJuRcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn5cecuf6mjakq5yxn79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNuJuRcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn5cecuf6mjakq5yxn79.png" alt="AMZN stock price" width="880" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check Apple's stock price:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1fESlOM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzbyyaxpol4unnfrlxxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1fESlOM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzbyyaxpol4unnfrlxxq.png" alt="AAPL stock price" width="853" height="60"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input an invalid ticker:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F27UpNc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1agpi7n8snzxy8lbwy3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F27UpNc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1agpi7n8snzxy8lbwy3.png" alt="Invalid ticker" width="862" height="60"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this article helped you learn about CLI development in Python, as well as gave you a fun and useful Python project idea.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🔥Build a Stunning Portfolio website with React JS</title>
      <author>CodeBucks</author>
      <pubDate>Tue, 02 Nov 2021 12:56:16 +0000</pubDate>
      <link>https://dev.to/codebucks/build-a-stunning-portfolio-with-react-js-p1</link>
      <guid>https://dev.to/codebucks/build-a-stunning-portfolio-with-react-js-p1</guid>
      <description>&lt;p&gt;Hi there👋,&lt;/p&gt;

&lt;p&gt;I wanted to build a portfolio which is different and unique with design and little bit animations.&lt;br&gt;
Here is the Demo Link:&lt;br&gt;
&lt;a href="https://react-portfolio-sigma.vercel.app/"&gt;https://react-portfolio-sigma.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this project I have used these libraries,&lt;br&gt;
▶️ React JS&lt;br&gt;
▶️ Framer-motion for Cool transitions and animations&lt;br&gt;
▶️ Styled-Components&lt;br&gt;
▶️ Particle JS&lt;br&gt;
▶️ React Router&lt;/p&gt;

&lt;p&gt;First I have created design in Figma, and used some of it's awesome plugins and resources. I have listed all the resources used in this website in the github ReadMe file.&lt;/p&gt;

&lt;p&gt;Here is the tutorial how I have created this website!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jcohAIaSy2M"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Things that I have learned building this project,&lt;br&gt;
▶️ Complex Styling with Styled-components&lt;br&gt;
▶️ How to create Page Transition effects using Framer-motion&lt;br&gt;
▶️ How we can leverage advantages of component structure&lt;br&gt;
▶️ How to use ParticleJS in React JS for awesome background effects&lt;br&gt;
▶️ Uses of Lazy and suspence in reactJS to make components load faster&lt;br&gt;
▶️ Many awesome pure CSS animations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use this portfolio and if you want to use it else where small credit would be appreciated (not compulsory), just check license of all images and other assets before using it commercially.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will try to improve it's speed and performance.&lt;br&gt;
Feel free to try different designs and animations with it and you can also tag me or share your link in the comments.&lt;/p&gt;

&lt;p&gt;Any suggestions are welcomed!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#share-your-portfolio-in-the-comments-so-that-all-the-other-peoplebeginners-can-get-the-different-ideas-as-well-as-inspiration"&gt;
  &lt;/a&gt;
  Share your portfolio in the comments, So that all the other people/beginners can get the different ideas as well as inspiration.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks For Reading😄
&lt;/h3&gt;

&lt;p&gt;Feel free to visit my youtube channel: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/channel/UCeYt6blRBKuNrEg_-282fSA"&gt;@CodeBucks&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Follow me on Instagram where I'm sharing lot's of useful resources!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.instagram.com/code.bucks/"&gt;@code.bucks&lt;/a&gt; 😉
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
