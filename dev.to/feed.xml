<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Time Saving VS Code Setting You Need To Do Right Now</title>
      <author>Hawaii</author>
      <pubDate>Wed, 13 Oct 2021 05:03:06 +0000</pubDate>
      <link>https://dev.to/huua/5-time-saving-vs-code-setting-you-need-to-do-right-now-3fl1</link>
      <guid>https://dev.to/huua/5-time-saving-vs-code-setting-you-need-to-do-right-now-3fl1</guid>
      <description>&lt;p&gt; &lt;span&gt;This article is meant for absolute beginners of Visual Studio Code and web development, Others may not find this article useful.&lt;/span&gt;&lt;/p&gt; Developing a website in the most popular programming environment, Visual Studio Code, requires a developer to do some repetitive tasks such as saving, refreshing the web page and typing the same code, etc... In this article, I would like to introduce you to some tools which will help you to do it more easily. &lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEKlHt3y19592XxyT8B40nXMqGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;5 Time Saving VS Code Setting You Need To Do Right Now&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 41, Inheritance in Python</title>
      <author>Aatmaj</author>
      <pubDate>Wed, 13 Oct 2021 04:58:05 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-41-inheritance-in-python-53la</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-41-inheritance-in-python-53la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-about-inheritance-in-python"&gt;
  &lt;/a&gt;
  Today we will learn about inheritance in Python
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;

&lt;p&gt;Inheritance provides &lt;strong&gt;Code Reusability&lt;/strong&gt;. We do not need to write the same piece of code again and again for various subclasses. This increases &lt;strong&gt;Flexibility&lt;/strong&gt; of the code. This means that subclasses can be formed without altering the original classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The inherited class can use functions and variables of the derived class&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax.
&lt;/h3&gt;

&lt;p&gt;Classes can be inherited by passing the name of the superclass to the brackets &lt;code&gt;class inherited(master)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let us see an example below to demonstrate inheritance in pyuthon&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello world
5

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explaination"&gt;
  &lt;/a&gt;
  Explaination
&lt;/h4&gt;

&lt;p&gt;Here, sample() is the masterclass and sasmple2 is the derived class. The derived class sample2 inherits the master class as we pas the  name of the master class into the derived class bracket.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;class sample2():&lt;/code&gt; This syntax will create class &lt;code&gt;sample2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;class sample2(sample)&lt;/code&gt;: This syntax will create a class &lt;code&gt;sample2&lt;/code&gt; and make it inherit the class &lt;code&gt;sample&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the class &lt;code&gt;sample2&lt;/code&gt; inherits &lt;code&gt;sample&lt;/code&gt;, it can use it's attributes (like here a and b) in it's body. This is why no errors were generated when we used to variables a and b directly in the function &lt;code&gt;fun2&lt;/code&gt;. The values fir a and b were assigned in  the master class (&lt;code&gt;sample2&lt;/code&gt; itself ands need not be assigned again . This is an example of &lt;strong&gt;code reuse&lt;/strong&gt; and &lt;strong&gt;information hiding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The derived class &lt;code&gt;sample2&lt;/code&gt; can also use the functions declared in the master class. This is how the function &lt;code&gt;fun&lt;/code&gt; could be used  and run successfully.&lt;/p&gt;

&lt;p&gt;I hope you do not have any more doubts, if you have, please feel free to post them in the comments below.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#inheritance-of-constructors"&gt;
  &lt;/a&gt;
  Inheritance of constructors.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Constructors are not inherited by default.&lt;/strong&gt; The example below will make things very clear&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello world
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, you would expect the output to be 150 and not 5. But it is not so. This is because of the fact the constructors of the master class are not inherited by the derived classes by default. This means that &lt;code&gt;sample2.__init__&lt;/code&gt; is not the same as &lt;code&gt;sample.__init__&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why? Well remember In the previous parts we learnt that if we do not provide a constructor to the class, Python provides one default constructor automatically? Something similar happened in this case. We did not provide any constructor to the &lt;code&gt;sample2&lt;/code&gt; class. So python made a default blank constructor in it's place, which had no relation to the master class. &lt;/p&gt;

&lt;p&gt;If we want to add the constructor, we can use the following syntax-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the super keyword, we can manage the constructors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt; What is the output of the following program? and why?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
     &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Solution-&lt;br&gt;
The output is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello world
5

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because &lt;code&gt;self.a=100&lt;/code&gt; and &lt;code&gt;self.b=200&lt;/code&gt; should haver been written in place of &lt;code&gt;a=100&lt;/code&gt; and &lt;code&gt;b=200&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;Function overloading in Python&lt;br&gt;
What if two functions have the same name in the master class as well as the derived class? Well the answer is simple the function in the derived class will be considered. &lt;br&gt;
This is know as function overloading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;150
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to use the function in the previous function, then use the super syntax again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello world
150
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;So friends that was all for today. Thank you and hope you are enjoying....&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>7 Amazing Tips While Redesigning Your Website</title>
      <author>Hawaii</author>
      <pubDate>Wed, 13 Oct 2021 04:46:43 +0000</pubDate>
      <link>https://dev.to/huua/7-amazing-tips-while-redesigning-your-website-29dp</link>
      <guid>https://dev.to/huua/7-amazing-tips-while-redesigning-your-website-29dp</guid>
      <description>&lt;p&gt;Redesigning a website may be a stressful, time-consuming, and complex task. It’s natural if the amount of information you need to know in order to build a new, fresh design repulses you. However, if you take the time to educate yourself and gain hands-on experience, you can avoid making mistakes and achieve your goals. Here are seven golden pointers for redesigning your website to get you started:&lt;/p&gt;
&lt;p&gt;When you consider rebuilding your website, you most likely imagine something huge and powerful. It’s the ideal opportunity to give your website a bold and dramatic new appearance. However, the world is not what you might assume. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;READ More&lt;/b&gt;: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-amazing-tips-while-redesigning-your-website/&amp;amp;ved=2ahUKEwjCx8Gc_JjzAhXawzgGHeQLBh4QFnoECAQQBQ&amp;amp;usg=AOvVaw1MCPezHaMcqtc9wW14T5Lx"&gt;7 Amazing Tips While Redesigning Your Website&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Ethical Hacking Roadmap - A Beginners Guide</title>
      <author>Hawaii</author>
      <pubDate>Wed, 13 Oct 2021 04:26:57 +0000</pubDate>
      <link>https://dev.to/huua/ethical-hacking-roadmap-a-beginners-guide-3p3b</link>
      <guid>https://dev.to/huua/ethical-hacking-roadmap-a-beginners-guide-3p3b</guid>
      <description>&lt;h2&gt;&lt;strong&gt;Who is an Ethical Hacker?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;An ethical hacker is a computer network specialist who deals with the security posture of an organization. His job involves eliciting security flaws in the organization he is working for by testing all aspects of the system and its services for any sort of vulnerabilities. The key point to notice is that all this is done with the permission of the owners of the organization and without any malicious intent. An ethical hacker is also known as a white hat hacker and is the stark opposite of a black hat hacker, a.k.a crackers who hack with the sole purpose of bringing about some sort of disruption, or chaos from the vulnerabilities they find. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjSy6-98ZvzAhXQxTgGHSS8Bu84ChAWegQIGxAB&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;Ethical Hacking Roadmap - A Beginners Guide&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Developer Advocate's Guide to Getting Buy-In</title>
      <author>Kurt Kemple</author>
      <pubDate>Wed, 13 Oct 2021 04:20:22 +0000</pubDate>
      <link>https://dev.to/theworstdev/the-developer-advocates-guide-to-getting-buy-in-1ba4</link>
      <guid>https://dev.to/theworstdev/the-developer-advocates-guide-to-getting-buy-in-1ba4</guid>
      <description>&lt;p&gt;It's finally time for your meeting with the Product team, and you're excited to share some feedback you got from the community. Not only that, but you even have an idea of how to fix the issue! You sit down at your computer, fire up that Zoom call, give yourself a quick check, and join. Eventually, your turn comes around, and you explain the problem and the possible fix. Everyone is super excited to receive your feedback and loves your idea! Victory!&lt;/p&gt;

&lt;p&gt;You follow up and ask when they think they'll be able to prioritize that work. You eagerly wait as the product team talks about timelines and current projects, eventually saying, "We want to do it, but we're focused on X until the end of this year. So let's circle back." Finally, the meeting wraps up, everyone says their goodbyes, and you leave the meeting feeling frustrated. You know this issue is essential, so why are they not prioritizing it?&lt;/p&gt;

&lt;p&gt;There are many reasons that decision-makers may not act upon the feedback we deliver. Still, one thing we can always ask ourselves is, "did I get enough buy-in before I asked them to commit?"&lt;/p&gt;

&lt;p&gt;In this post, I'll cover what buy-in is, how it applies to developer advocacy, what skills help the most when trying to get buy-in, and the processes I use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-buyin"&gt;
  &lt;/a&gt;
  What is buy-in?
&lt;/h2&gt;

&lt;p&gt;Buy-in is an agreement to support a decision. So, when we are trying to get buy-in, we're trying to get decision-makers to support our ideas. So, the act of getting buy-in is a process that involves building trust, communicating your ideas well, and hopefully creating champions so that when you ask for a commitment, you already have the right people on board.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#buyin-amp-developer-advocacy"&gt;
  &lt;/a&gt;
  Buy-in &amp;amp; developer advocacy
&lt;/h2&gt;

&lt;p&gt;You might often hear developer advocates say they advocate on behalf of the community, but what exactly do they advocate for, and to who?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developer advocates advocate for changes to a company's products, offerings, and software based on friction experienced by developers in the community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Getting buy-in as a developer advocate is a unique challenge. We usually are not the owners or even direct contributors to what we're trying to change. Instead, we represent this bizarre ephemeral thing called a "community."&lt;/p&gt;

&lt;p&gt;Because of this relationship, we have to be extremely careful in our approach to initiating change. We have to go the extra mile and make sure we've built a relationship with the people we need in our corner.&lt;/p&gt;

&lt;p&gt;We need to take the time to make sure we understand what they are currently invested in, what effect our changes would have on their plans, and the amount of work it would take to make it happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skills-to-develop-for-getting-buyin"&gt;
  &lt;/a&gt;
  Skills to develop for getting buy-in
&lt;/h2&gt;

&lt;p&gt;One thing you might have noticed is that getting buy-in is all about working with other people. As such, the skills that will show the most dividends will be the ones that help you interface with the most complex computers of all, people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h3&gt;

&lt;p&gt;Getting someone to support your ideas will be difficult if you cannot clearly state the problem, present a solution (if you have one), and provide enough context and supporting information to make informed decisions.&lt;/p&gt;

&lt;p&gt;A significant part of developer advocacy is helping people understand their problems with a given product/technology and providing solutions. Lean on that!&lt;/p&gt;

&lt;p&gt;Make sure to explain the problem in a relatable way to whoever it is you are trying to educate. Make sure you're framing the problem so that they can see how it will affect their success. For example, are they tracking MAUs (monthly active users) for a particular feature? Will this fix increase that metric? Look for commonality!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#empathy"&gt;
  &lt;/a&gt;
  Empathy
&lt;/h3&gt;

&lt;p&gt;It's important to remember that initiating change requires consent from all involved parties. So we need to build relationships with the people we'll ask to help us and ensure that the relationship is mutually beneficial. We can do that by understanding what goals they are working towards, what metrics they are concerned with, and what plans they have for the future.&lt;/p&gt;

&lt;p&gt;When we include these things in our conversations with them, it shows we've thought about what effect our changes will have on them and how it could benefit them and goes a long way towards building trust.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#patience"&gt;
  &lt;/a&gt;
  Patience
&lt;/h3&gt;

&lt;p&gt;Change is slow! Sometimes it might take a significant amount of time to get the buy-in you need to push something through. Depending on the size of the company you work for, this could be months for things that feel like they should be quick.&lt;/p&gt;

&lt;p&gt;Make sure you're aware of product roadmaps and engineering timelines—plan for changes to take a while if adopted at all. Also, have fallbacks and short-term fixes to help reduce friction until you can get a proper fix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#persistence"&gt;
  &lt;/a&gt;
  Persistence
&lt;/h3&gt;

&lt;p&gt;You might do all the right things and STILL not get buy-in. It happens! It's essential not to give up and look for other avenues to get the buy-in to initiate that change. This process is a cycle, and you repeat it until you get the desired outcome.&lt;/p&gt;

&lt;p&gt;Look for other ways to help remove that friction for users. For example, are there any intermediate steps you can take or content that you can create to help people work through it?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's important to constantly reassess the efficacy of the change as time goes on as it may become obsolete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-getting-buyin"&gt;
  &lt;/a&gt;
  Tips for getting buy-in
&lt;/h2&gt;

&lt;p&gt;So you know the skills you need to improve your odds of getting buy-in, but how do you put that into practice? Here are some of the tactics I've used to initiate change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collect-data"&gt;
  &lt;/a&gt;
  Collect data
&lt;/h3&gt;

&lt;p&gt;Want to get someone on board for a change you are proposing? Show them quantitative data related to their goals, and it won't take much of a conversation.&lt;/p&gt;

&lt;p&gt;Collect as much qualitative data and quantitative data as you possibly can. Qualitative data is feedback provided by the community or findings from your investigations. Quantitative data is the metrics that relate to the area you want to change.&lt;/p&gt;

&lt;p&gt;Quantitative data is more valuable but usually harder to connect directly to a pain point developers are facing. Qualitative data holds less value but is generally easier to collect. If you lack quantitative data, it's essential to gather as much qualitative data as possible!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#record-experiences"&gt;
  &lt;/a&gt;
  Record experiences
&lt;/h3&gt;

&lt;p&gt;We know that empathy is an effective tool for helping us better understand the needs of people we communicate with, but we can also use empathy to help others understand the frustration users feel when they experience a particular pain point.&lt;/p&gt;

&lt;p&gt;By recording either our own or users' experiences with a given workflow, we can clearly frame the issue for others. In addition, sometimes, users will experience the same pain point across multiple workflows, which helps outline the severity of the problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At Apollo, we use &lt;a href="https://www.apollographql.com/blog/community/devrel/dx-audits-a-framework-for-developer-advocacy/"&gt;friction logs&lt;/a&gt; to record experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#build-desired-outcomes"&gt;
  &lt;/a&gt;
  Build desired outcomes
&lt;/h3&gt;

&lt;p&gt;Building desired outcomes is a technique I brought over from my time as a tech lead. Tech lead is another position that is constantly initiating change. One of the techniques I came to rely upon was building prototypes or desired outcomes so that decision-makers could experience the change.&lt;/p&gt;

&lt;p&gt;A more concrete example is when I wanted to adopt GraphQL at Major League Soccer. I knew it would solve many problems for us, but I needed everyone else to understand that too. Our existing architecture consisted of REST APIs, and our product managers would often examine data from these APIs due to partnerships we had with other companies.&lt;/p&gt;

&lt;p&gt;Because they wanted to explore the data, we would build an "API browser" or small client application that allowed people to interact with the API through a UI. Since we discussed rewriting the API and versioning it again, I knew that we would need to build these UIs again. Knowing that product managers rely on this, I showed them how we could get the same functionality from &lt;a href="https://graphiql-test.netlify.app/"&gt;GraphiQL&lt;/a&gt; if we adopted GraphQL. The idea of getting that same result without any development effort was exciting to them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's much easier to decide on something when you can experience its benefits before you build it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#look-for-alignment"&gt;
  &lt;/a&gt;
  Look for alignment
&lt;/h3&gt;

&lt;p&gt;Sometimes getting enough buy-in can be the result of aligning your changes with existing plans to change something! So stay up to date on the product roadmap, look for opportunities to include your changes into a current initiative.&lt;/p&gt;

&lt;p&gt;I recently spoke with someone trying to get the buy-in to dedicate engineering time to their navigation component. The existing solution was requesting the navigation metadata on the client-side. Not rendering the navigation on the server prevents some SEO benefits you get by having navigation be crawlable.&lt;/p&gt;

&lt;p&gt;They have wanted to implement this fix for a while and tried to get buy-in for it previously. However, it wasn't until a new project for the navigation came along that they were able to resurface the change and finally get the buy-in they needed as the work aligned with the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As developer advocates, we'll often face situations where the best way to help the community is through initiating change. However, because we're generally asking people to change things they are responsible for, we have to be sure we're doing our due diligence to understand the changes we're asking people to make. We have to provide so much compelling evidence for our case that not only do they support our ideas but champion them as well.&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>developeradvocacy</category>
      <category>communication</category>
      <category>howto</category>
    </item>
    <item>
      <title>10 Awesome Github Repos Every Web Developer Should Know</title>
      <author>Hawaii</author>
      <pubDate>Wed, 13 Oct 2021 04:14:24 +0000</pubDate>
      <link>https://dev.to/huua/10-awesome-github-repos-every-web-developer-should-know-41m1</link>
      <guid>https://dev.to/huua/10-awesome-github-repos-every-web-developer-should-know-41m1</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference. &lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project</title>
      <author>Hawaii</author>
      <pubDate>Wed, 13 Oct 2021 04:09:04 +0000</pubDate>
      <link>https://dev.to/huua/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4b14</link>
      <guid>https://dev.to/huua/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4b14</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Hawaii</author>
      <pubDate>Wed, 13 Oct 2021 04:07:20 +0000</pubDate>
      <link>https://dev.to/huua/10-vs-code-extensions-every-frontend-developer-should-use-2d47</link>
      <guid>https://dev.to/huua/10-vs-code-extensions-every-frontend-developer-should-use-2d47</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in! &lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/&amp;amp;ved=2ahUKEwiCjJjFwcbzAhWNyzgGHej_CncQFnoECAMQAQ&amp;amp;usg=AOvVaw1heWDYJaFEHqEhS4EHnq3r"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Arrow Functions</title>
      <author>NRF</author>
      <pubDate>Wed, 13 Oct 2021 03:04:18 +0000</pubDate>
      <link>https://dev.to/nrf/arrow-functions-58hb</link>
      <guid>https://dev.to/nrf/arrow-functions-58hb</guid>
      <description>&lt;p&gt;Arrow functions, or arrow function expressions, are another way of declaring functions in JavaScript. But, please note right from the outset, that the differences between regular functions and arrow functions don't end with just the syntax. In other words, arrow functions are &lt;strong&gt;not&lt;/strong&gt; a syntactic sugar for regular functions rather they're treated differently by the compiler. In this section, we'll focus on the just the syntax of arrow functions.&lt;/p&gt;

&lt;p&gt;Let's quickly see an example of an arrow function compared to an old-school function declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oldSchoolFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same function above using the arrow function syntax would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the &lt;code&gt;function&lt;/code&gt; keyword was removed and an arrow &lt;code&gt;=&amp;gt;&lt;/code&gt; (equal sign followed by a 'greater than' sign) was introduced before the opening curly brace &lt;code&gt;{&lt;/code&gt; to convert the old-school syntax to an arrow function syntax. Also please note that the part that constitutes an arrow function is to the right of the assignment. The identifier &lt;code&gt;arrowFunc&lt;/code&gt; is just a variable that is being used to hold a reference to the arrow function so we can invoke it later.&lt;/p&gt;

&lt;p&gt;When it comes to function definitions, we basically have two things to consider: the &lt;strong&gt;parameter list&lt;/strong&gt; and the &lt;strong&gt;function body&lt;/strong&gt;. We'll take these one by one and go through their different cases to see how an arrow function is written in each case. Remember, the starting point is always the same: remove the &lt;code&gt;function&lt;/code&gt; keyword and introduce the arrow &lt;code&gt;=&amp;gt;&lt;/code&gt; before the opening curly brace &lt;code&gt;{&lt;/code&gt;. Once you get used to the arrow function syntax though, you won't have to think in terms of the old-school syntax anymore.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that I'm using the term "old-school" quite loosely here. This in no way implies that the arrow functions have "replaced" the original function declaration syntax. There are places where using an arrow function is better suited than a normal (non-arrow?) function and vice versa. There are situations where the use of arrow functions is even discouraged!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#cases-for-functions-parameter-list"&gt;
  &lt;/a&gt;
  Cases for function's parameter list
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#case-1-no-parameters"&gt;
  &lt;/a&gt;
  Case 1: no parameters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oldSchoolFunc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* function body */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* function body */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The empty parentheses are required in this case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-2-multiple-parameters"&gt;
  &lt;/a&gt;
  Case 2: Multiple parameters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oldSchoolFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* function body */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* function body */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#case-3-special-case-of-exactly-one-parameter"&gt;
  &lt;/a&gt;
  Case 3: Special case of exactly ONE parameter
&lt;/h3&gt;

&lt;p&gt;If the function has exactly one parameter, we can let go of the parentheses &lt;code&gt;()&lt;/code&gt; in the arrow function expression. Note that you can use the parentheses as well; your choice. In my opinion, using the parentheses makes for a more readable code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oldSchoolFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* function body */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* function body */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* function body */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both &lt;code&gt;arrowFunc1&lt;/code&gt; and &lt;code&gt;arrowFunc2&lt;/code&gt; are equivalent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cases-for-functions-body"&gt;
  &lt;/a&gt;
  Cases for function's body
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#case-1-multiline-body"&gt;
  &lt;/a&gt;
  Case 1: Multi-line body
&lt;/h3&gt;

&lt;p&gt;If the body of a function has more than one lines, nothing changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oldSchool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// line 1&lt;/span&gt;
  &lt;span class="c1"&gt;// line 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// line 1&lt;/span&gt;
  &lt;span class="c1"&gt;// line 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#case-2-special-case-of-singleline-body"&gt;
  &lt;/a&gt;
  Case 2: Special case of SINGLE-LINE body
&lt;/h3&gt;

&lt;p&gt;If the body of a function has exactly one line, then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No need for the curly braces&lt;/li&gt;
&lt;li&gt;No need for the &lt;code&gt;return&lt;/code&gt; keyword (if any)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oldSchoolSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an arrow function has exactly one line &lt;strong&gt;and&lt;/strong&gt; the curly braces are left out, the line is executed and its final value is returned by the function (called &lt;strong&gt;implicit return&lt;/strong&gt;). Note that you can still use the &lt;code&gt;return&lt;/code&gt; keyword in this case but then curly braces are required. Taking the &lt;code&gt;arrowSum&lt;/code&gt; function above as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 just a tip&lt;/p&gt;

&lt;p&gt;There is something to be said about the two special cases discussed above: &lt;strong&gt;exactly one parameter&lt;/strong&gt; and &lt;strong&gt;single-line body&lt;/strong&gt;. Go for the option that results in a more readable code. For example, even though we have the option, using parentheses even when there is only one parameter seems better because it feels more readable (in fact, the famous code formatter &lt;em&gt;Prettier&lt;/em&gt; will enforce this as a rule). Similarly there are times when using the &lt;code&gt;return&lt;/code&gt; keyword just looks more natural even if the function only has one line. Do not automatically go for the more concise option rather take a moment and decide which option will result in a more readable code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#more-than-just-syntax"&gt;
  &lt;/a&gt;
  More than just syntax
&lt;/h2&gt;

&lt;p&gt;As mentioned at the start of this section, it isn't just the syntax that is affected when using the arrow functions. Arrow functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;don't have &lt;code&gt;this&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;don't have &lt;code&gt;super&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;can't be used as constructors i.e. can't be called with &lt;code&gt;new&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;have no &lt;code&gt;arguments&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 just a tip&lt;/p&gt;

&lt;p&gt;Arrow functions fit very nicely as callbacks.&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomNumbersDoubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doubling the array now...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;randomNumbersDoubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomNumbersDoubled&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;




&lt;p&gt;With arrow functions, at least initially, it is mostly the syntax that you have to get used to. I've prepared an &lt;strong&gt;Arrow Functions Cheat Sheet&lt;/strong&gt; which has all the cases discussed in this article.&lt;/p&gt;

&lt;p&gt;👉🏻 Get your FREE copy of the cheat sheet: &lt;a href="https://bracketsinstitute.gumroad.com/l/pbKxB"&gt;click here&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Validate Kubernetes Manifests in GitHub Actions with Datree</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Wed, 13 Oct 2021 02:58:32 +0000</pubDate>
      <link>https://dev.to/n3wt0n/validate-kubernetes-manifests-in-github-actions-with-datree-1190</link>
      <guid>https://dev.to/n3wt0n/validate-kubernetes-manifests-in-github-actions-with-datree-1190</guid>
      <description>&lt;p&gt;In this second article dedicated to &lt;strong&gt;&lt;em&gt;Datree&lt;/em&gt;&lt;/strong&gt; we will explore how to use the tool with GitHub Actions to validate and secure our Kubernetes deployments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/aM7EVflmEt4"&gt;Link to the video: https://youtu.be/aM7EVflmEt4&lt;/a&gt;. This part about &lt;strong&gt;&lt;em&gt;GitHub Actions&lt;/em&gt;&lt;/strong&gt; starts at minute &lt;a href="https://youtu.be/aM7EVflmEt4?t=852"&gt;14:12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h3&gt;

&lt;p&gt;While I will not cover how to install and use the service in general (&lt;em&gt;check the video and the first article of this series if you want to know more about it&lt;/em&gt;), there are few things worth remembering and that will be useful later on in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datree is a &lt;strong&gt;CLI&lt;/strong&gt; tool, which works on Linux, MacOS and Windows&lt;/li&gt;
&lt;li&gt;The Centralized Policy Management uses a &lt;strong&gt;Token&lt;/strong&gt; as &lt;em&gt;connection&lt;/em&gt; between the scans and the account&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#datree-in-github-actions"&gt;
  &lt;/a&gt;
  Datree in GitHub Actions
&lt;/h3&gt;

&lt;p&gt;Alright, let's do this. First thing we have to do, as we would in a local environment, is to &lt;strong&gt;install the CLI&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install DaTree&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the workflow is running on Linux, so I can use the bash script for installing it.&lt;/p&gt;

&lt;p&gt;This step will take only few seconds to execute&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is necessary if you are using the &lt;em&gt;GitHub Hosted Runners&lt;/em&gt;. If you are instead on &lt;em&gt;Self-hosted Runners&lt;/em&gt; you can install the CLI directly on the agent machine so you can skip this step. However, you'd need to manually take care of updating the CLI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we can &lt;strong&gt;invoke the validation&lt;/strong&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Scan with DaTree&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ./kubernetes/*.yml&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DATREE_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, nothing different from what we would normally do.&lt;/p&gt;

&lt;p&gt;Since we don't have access to the config file in our CI environment, we need to &lt;strong&gt;pass the Token as environment variable&lt;/strong&gt;. Best practice is to save it as a secret in the repo, and retrieve it using &lt;code&gt;${{ secrets.YOUR_SECRET_NAME }}&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example above the Token is passed as environment variable directly in the step to minimize exposure. If you have multiple scans in the same workflow, you can also add it as job or workflow environment variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this is basically all you need.&lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;full workflow&lt;/strong&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;K8S YAML Validation&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install DaTree&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Scan with DaTree&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ./kubernetes/*.yml&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DATREE_TOKEN }}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course you can also integrate this into your own CI or PR validation workflows rather than keeping it separate if you wish so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execution-and-results"&gt;
  &lt;/a&gt;
  Execution and Results
&lt;/h3&gt;

&lt;p&gt;First thing to notice is that, as Ive said before, the &lt;strong&gt;installation step is very quick&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E-WeXCew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xafxswvidvqqk5jozd9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-WeXCew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xafxswvidvqqk5jozd9l.png" alt="Installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why it is probably a good idea to leave it there even on Self-hosted runners so you don't have to worry about updating it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXg5Kfc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7awwbcul1zesvv7emozr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXg5Kfc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7awwbcul1zesvv7emozr.png" alt="Execution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the validation scan is also very quick.&lt;/p&gt;

&lt;p&gt;Second thing to notice is that by design &lt;strong&gt;if a validation fails it will break the build/run&lt;/strong&gt;. This is to ensure the enforcement of the policies and best practices.&lt;/p&gt;

&lt;p&gt;Finally, let's take a look at the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5SAHceK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzdxjbbl8z3r4xeuryea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5SAHceK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzdxjbbl8z3r4xeuryea.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;strong&gt;output is exactly the same&lt;/strong&gt; as when executing the CLI on any local environment, or anywhere else for what batters, keeping the experience very consistent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offer"&gt;
  &lt;/a&gt;
  Offer
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Datree is free&lt;/strong&gt; to use up to 1000 scans per month, and you can pay for more scans and enhanced support. However...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" alt="A Month for Free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You can get 1 month of the Premium plan for FREE is you use this link&lt;/em&gt;&lt;/strong&gt;: &lt;a href="https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube"&gt;https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;So, what do you think about Datree? Is it something you will adopt as part of your workflow? Let me know in the comment section below, I'd really like to know it.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/4Oa5HneTuKs"&gt;this video&lt;/a&gt; in which show you how to deploy to Kubernetes in Azure Pipelines starting from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>kubernetes</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🚪 Really exit!</title>
      <author>Randall</author>
      <pubDate>Wed, 13 Oct 2021 01:29:43 +0000</pubDate>
      <link>https://dev.to/mistval/really-exit-48p4</link>
      <guid>https://dev.to/mistval/really-exit-48p4</guid>
      <description>&lt;p&gt;Here's a funny (and really unimportant) thing I discovered about Node.js today.&lt;/p&gt;

&lt;p&gt;First, for anyone who may not know, if you ever want to see the source code of a JavaScript function, you can just call &lt;code&gt;.toString()&lt;/code&gt; on the function. (&lt;em&gt;if&lt;/em&gt; it's a JavaScript function, and not one that's implemented in native code inside of the JS engine itself)&lt;/p&gt;

&lt;p&gt;Let's try it on &lt;code&gt;process.exit&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what we get as output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_exiting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_exiting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// FIXME(joyeecheung): This is an undocumented API that gets monkey-patched&lt;/span&gt;
  &lt;span class="c1"&gt;// in the user land. Either document it, or deprecate it in favor of a&lt;/span&gt;
  &lt;span class="c1"&gt;// better public alternative.&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reallyExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It turns out that &lt;code&gt;process.exit()&lt;/code&gt; is just a thin wrapper around another function, &lt;code&gt;process.reallyExit()&lt;/code&gt;! &lt;code&gt;process.reallyExit()&lt;/code&gt; is a native function, so we can't inspect its code in this manner (but you can &lt;a href="https://github.com/nodejs/node/blob/e83c8aef4b787b531f23ad7abb498fe81db5ee83/src/node_process_methods.cc#L419"&gt;find it in Node's source code on GitHub if you're interested&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This tickled me. It's a good reminder that there are always some funny, hacky things in the technologies we know and love.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>The Odin Project: Landing page: walk-through</title>
      <author>sheriffderek</author>
      <pubDate>Wed, 13 Oct 2021 01:17:32 +0000</pubDate>
      <link>https://dev.to/perpetual_edu/the-odin-project-landing-page-walk-through-214f</link>
      <guid>https://dev.to/perpetual_edu/the-odin-project-landing-page-walk-through-214f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#there-is-a-neverending-supply-of-free-educational-materials"&gt;
  &lt;/a&gt;
  There is a never-ending supply of “free” educational materials.
&lt;/h2&gt;

&lt;p&gt;But how do you know if they are “&lt;em&gt;good&lt;/em&gt;” - if you don't know that much about the subject yet?&lt;/p&gt;

&lt;p&gt;Well, one way - is to see the final product.&lt;/p&gt;

&lt;p&gt;Today, I'd like to talk about TOP's landing page project from their fundamentals course.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-some-of-the-outcomes"&gt;
  &lt;/a&gt;
  Here are some of the outcomes:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgqurh0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/yhnl2vsdhoie93xtpwfb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgqurh0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/yhnl2vsdhoie93xtpwfb.jpeg" alt="Figure of many broken website layouts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be fair&lt;/em&gt;, They say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Do not worry about making your project look nice on a mobile device. We’ll learn that later.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But in a world where 80% of traffic is on a small screen, we feel like this is starting newcomers off on the wrong foot. HTML and CSS are better than ever and learning from a small-screen-first approach has &lt;em&gt;massive&lt;/em&gt; benefits beyond just the responsive layout bits. (Did I just turn English for a minute?)&lt;/p&gt;

&lt;p&gt;It's much more difficult to undo mental models later - than to just get them right in the first place.&lt;/p&gt;

&lt;p&gt;You can check out the whole lesson/&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/landing-page"&gt;project outline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(it has the mockup etc.)&lt;/p&gt;

&lt;p&gt;If you want a challenge, give it a shot! &lt;/p&gt;

&lt;p&gt;and when you're done, you can see my take on it:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/622166595" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Vimeo doesn't let you see the chapters when it's not embedded on &lt;a href="https://perpetual.education/stories/odin-landing-page-project-discussion"&gt;our site&lt;/a&gt;, so - you might want to try it there.&lt;/p&gt;

&lt;p&gt;If you have any thoughts about this, we'd love to hear them. Have you gone through the TOP foundation course? Did we miss anything? We can splice in any of your suggestions. : )&lt;/p&gt;

&lt;p&gt;I hope you find it helpful.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>css</category>
    </item>
  </channel>
</rss>
