<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Google dorks for WordPress</title>
      <author>Julien Maury</author>
      <pubDate>Sun, 22 Aug 2021 20:21:38 +0000</pubDate>
      <link>https://dev.to/jmau111/google-dorks-for-wordpress-2mi8</link>
      <guid>https://dev.to/jmau111/google-dorks-for-wordpress-2mi8</guid>
      <description>&lt;p&gt;Google is a gigantic word wild database. Finding a vulnerable WordPress website in a few seconds can be as simple as a Google search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;As usual with ethical hacking in general and depending on your country, using Google dorks to find vulnerable websites can lead to lawsuits!&lt;/p&gt;

&lt;p&gt;On no account should you use Google dorks to download logs, databases, and other resources you are not supposed to access, even in a &lt;em&gt;white hat perspective&lt;/em&gt; or for test purposes.&lt;/p&gt;

&lt;p&gt;I know that's lame, and most people do it with the best intentions, but remember that can be illegal, and don't believe all vulnerable companies and organizations will treat you well if they know you have access to their credentials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-dorks-in-short"&gt;
  &lt;/a&gt;
  Google dorks in short
&lt;/h2&gt;

&lt;p&gt;It's called &lt;em&gt;Google dorking&lt;/em&gt; and it consists of &lt;strong&gt;advanced Google search queries with unique keywords and operators&lt;/strong&gt; to find sensitive information and security breaches.&lt;/p&gt;

&lt;p&gt;For example, if you want websites that use the Woocommerce plugin, you may &lt;em&gt;google&lt;/em&gt; the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inurl:"/wp-content/plugins/woocommerce"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty helpful when known vulnerabilities are revealed for specific plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-my-logs"&gt;
  &lt;/a&gt;
  Read my logs üòì
&lt;/h2&gt;

&lt;p&gt;Google this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inurl:wp-content/debug.log 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see WordPress websites that have logs enabled in production in a publically accessible directory!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-download-my-sql-dumps"&gt;
  &lt;/a&gt;
  Please, download my SQL dumps üò±
&lt;/h2&gt;

&lt;p&gt;You can even find SQL dumps with Google Dorks. Of course, not all WordPress installations have such a big security hole, but it happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype:sql intext:wp_users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have the database, you do pretty much everything you want, including finding user passwords by decrypting MD5 strings.&lt;/p&gt;

&lt;p&gt;Note that it can be slightly more subtle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype:tar.gz site:mywebsite.com
filetype:sql site:mywebsite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above dork query looks for publically accessible backup files in mywebsite.com. If you accidentally saved a backup in a public directory and forgot to remove it, that can turn nasty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-database-for-google-dorks"&gt;
  &lt;/a&gt;
  A database for Google dorks ü§òüèª
&lt;/h2&gt;

&lt;p&gt;Instead of listing all kinds of Google dorks here, I prefer you go to &lt;a href="https://www.exploit-db.com/google-hacking-database"&gt;exploit-db.com&lt;/a&gt; to see it by yourself. Just type "wordpress" in the search form, and you'll get tones of Google dorks!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fix-it-%EF%B8%8F"&gt;
  &lt;/a&gt;
  How to fix it ‚ö°Ô∏è
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#test-your-website"&gt;
  &lt;/a&gt;
  Test your website
&lt;/h3&gt;

&lt;p&gt;Run dork queries against your website, and you'll see if there's something wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#request-removal"&gt;
  &lt;/a&gt;
  Request removal
&lt;/h3&gt;

&lt;p&gt;You can request removal with the Removals Tool, which enables you to temporarily block pages from Google Search results on sites that you own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://support.google.com/webmasters/answer/1663419?hl=en"&gt;Source: Google support&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-directory-browsing"&gt;
  &lt;/a&gt;
  Disable directory browsing
&lt;/h3&gt;

&lt;p&gt;Most of the time, those websites are misconfigured so that you can browse the &lt;code&gt;wp-content&lt;/code&gt; directory. Any website should disable directory browsing with, for example, this line in the &lt;code&gt;.htaccess&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Options -Indexes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forget-the-raw-robotstxt-endraw-file"&gt;
  &lt;/a&gt;
  Forget the &lt;code&gt;robots.txt&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;While the &lt;code&gt;robots.txt&lt;/code&gt; file is meant for search engines, it's publically accessible, so it's easy for hackers to use this file to discover directories and files.&lt;/p&gt;

&lt;p&gt;You might end up giving them sensitive information!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-logs-and-debugging"&gt;
  &lt;/a&gt;
  Disable logs and debugging
&lt;/h3&gt;

&lt;p&gt;The production environment is not meant for logging errors and debugging. You can add the following code in your &lt;code&gt;wp-config.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'display_errors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'Off'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error_reporting'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;E_ALL&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WP_DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WP_DEBUG_DISPLAY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-a-security-plugin"&gt;
  &lt;/a&gt;
  Install a security plugin
&lt;/h3&gt;

&lt;p&gt;Most security plugins ensure your installation is safer, making all the quick fixes we just saw for you, protecting sensitive directories, and scanning your website regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Fortunately, many web hosting providers have robust default configurations and pre-built CMS integrations to prevent harmful situations.&lt;/p&gt;

&lt;p&gt;However, Google dorks for WordPress are still a common concern in 2021. You'd be surprised how many &lt;code&gt;.env&lt;/code&gt; files and credentials you can access with a simple search.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Code your own vue</title>
      <author>Gil Rudolf H√§rdi</author>
      <pubDate>Sun, 22 Aug 2021 19:46:28 +0000</pubDate>
      <link>https://dev.to/ghaerdi/code-your-own-vue-50mg</link>
      <guid>https://dev.to/ghaerdi/code-your-own-vue-50mg</guid>
      <description>&lt;p&gt;Code your own vue is a series of post that is going to show you how create your own vue for learning purposes, the implementation of functionalities try to be most simple as can be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-ideas-of-this-title-are"&gt;
  &lt;/a&gt;
  The ideas of this title are:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a &lt;strong&gt;better&lt;/strong&gt; understanding of the main concepts of popular frameworks or libraries like vue, react, angular and so on.&lt;/li&gt;
&lt;li&gt;Be a cool coder that has did your own vue... a simple one like a cheap toy, but is your own vue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider that I can be wrong or vue possibly handle some concepts in other ways, you can use the comments section if you think I'm wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-need-to-know"&gt;
  &lt;/a&gt;
  What you need to know:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;li&gt;Vue v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to be concise, but also I will add some references links to documentation if I use something that someone who start learning javascript may don't know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#posts"&gt;
  &lt;/a&gt;
  Posts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ghaerdi/make-your-own-vue-rendering-and-states-jb6"&gt;Rendering and states&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ghaerdi/petite-vue"&gt;code your own vue repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>El mundo de las Funciones en JavaScript </title>
      <author>Alejandra Melendez</author>
      <pubDate>Sun, 22 Aug 2021 19:18:29 +0000</pubDate>
      <link>https://dev.to/alecodesdancer/el-mundo-de-las-funciones-en-javascript-16n</link>
      <guid>https://dev.to/alecodesdancer/el-mundo-de-las-funciones-en-javascript-16n</guid>
      <description>&lt;p&gt;Si pudiera definir "JavaScript" con una sola palabra ser√≠a "&lt;strong&gt;versatilidad&lt;/strong&gt;". Nosotros podemos crear c√≥digo de maneras diferentes usando los recursos que este lenguaje nos ofrece. Un claro ejemplo son las diferentes maneras de declarar una funci√≥n. Esto puede ser confuso cuando comienzas a programar en JavaScript, as√≠ que es hoy vamos a analizar algunas formas de declarar funciones y en qu√© casos es mejor usarlas.&lt;br&gt;
Me tom√© la libertad de no traducir ciertos conceptos y nombres porque sent√≠ que ser√≠a m√°s confuso, as√≠ que sorry por mi spanglishüòã.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#qu%C3%A9-es-una-funci%C3%B3n"&gt;
  &lt;/a&gt;
  ¬øQu√© es una funci√≥n?ü§î
&lt;/h1&gt;

&lt;p&gt;Comenzamos con lo m√°s importante, una funci√≥n es un sub-programa que realiza una tarea espec√≠fica, puede tomar una &lt;em&gt;entrada&lt;/em&gt;, la cual llamamos par√°metros y retornar una &lt;em&gt;salida&lt;/em&gt;. En JavaScript, las funciones son objetos de primera clase (&lt;em&gt;first-class objects&lt;/em&gt;). Estas pueden ser manipuladas y asignadas as√≠ como cualquier otro objeto. Por default, si tu no agregas un &lt;strong&gt;return&lt;/strong&gt;, el cual es usado si quieres regresar algo, las funciones regresan el valor de "&lt;strong&gt;undefined&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;Existen diferentes formas de declarar una funci√≥n, en este caso, nosotros vamos a enfocar en 6 maneras, las cuales explicar√© a continuaci√≥nüëá.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-function-declaration"&gt;
  &lt;/a&gt;
  1. Function Declaration
&lt;/h2&gt;

&lt;p&gt;La manera m√°s com√∫n de definir una funci√≥n es usando la palabra clave &lt;strong&gt;function&lt;/strong&gt; seguida del nombre, los par√°metros de entrada -los cuales son opcionales- entre par√©ntesis y separados por comas, as√≠ como las instrucciones encerradas en llaves &lt;em&gt;{}&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Un punto importante de las &lt;em&gt;Function Declaration&lt;/em&gt; es que se cargan antes de que se ejecute cualquier c√≥digo, por lo que se pueden llamar incluso antes de su declaraci√≥nüò±. Este comportamiento es conocido como &lt;strong&gt;Hoisting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tF6koAa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqyrkv7c2psfow5dgik1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tF6koAa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqyrkv7c2psfow5dgik1.png" alt="01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Al ser la forma m√°s f√°cil y com√∫n, es mi primer opci√≥n cuando quiero crear una funci√≥n normal que necesita ser llamada una o m√°s veces üòå.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-function-expression"&gt;
  &lt;/a&gt;
  2. Function Expression
&lt;/h2&gt;

&lt;p&gt;La diferencia entre la forma anterior y √©sta es que las &lt;em&gt;function expression&lt;/em&gt; pueden ser asignadas a una variable y el nombre es opcional. Funciones que no tienen nombre son llamadas &lt;em&gt;anonymous functions&lt;/em&gt;. Existe m√°s de una forma de declararlas y esta es una de ellas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2jx_ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji8i59rr6fzm8bui7p04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2jx_ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji8i59rr6fzm8bui7p04.png" alt="02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Las &lt;em&gt;function expressions&lt;/em&gt; son comunes cuando necesitamos pasar dicha funci√≥n como un par√°metro a otra funci√≥n. Esto com√∫nmente se llama &lt;strong&gt;callback&lt;/strong&gt; en JavaScript. Tambi√©n es com√∫n usarlas como &lt;em&gt;closure&lt;/em&gt;, es decir, anidamiento de funciones que les da acceso a las definiciones dentro de la funci√≥n externa. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-funciones-de-flecha-arrow-function"&gt;
  &lt;/a&gt;
  3. Funciones de Flecha (Arrow Function)
&lt;/h2&gt;

&lt;p&gt;Una de las nuevas caracter√≠sticas que nos trajo &lt;em&gt;ES6&lt;/em&gt; fueron las &lt;strong&gt;Arrow function&lt;/strong&gt;. Al igual que las function expressions, √©stas son funciones an√≥nimas que pueden ser asignadas a una variable, la diferencia es que en las arrow functions, omitimos la palabra clave "function", por lo que lo primero que agregamos es la lista de par√°metros, si no hay ninguno se indica con &lt;em&gt;( )&lt;/em&gt;. En caso de que solo haya un par√°metro, los par√©ntesis no son necesarios. Luego ponemos el s√≠mbolo &lt;em&gt;=&amp;gt;&lt;/em&gt; y las llaves &lt;em&gt;{}&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A diferencia de los casos anteriores, las arrow functions no crean su propio &lt;em&gt;scope&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_YOGkp6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhll63qlbfn4l22i7ipn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_YOGkp6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhll63qlbfn4l22i7ipn.png" alt="arrowFunctions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Puedes sacar el mejor provecho de las Arrow function cuando necesites crear funciones simples que devuelvan algo concreto, ya que ahorrar√≠as l√≠neas de c√≥digo üí™. Del mismo modo, si requieres que tu funci√≥n est√© ligada al scope global y no necesitas que tenga su propio scope, las arrow function ser√°n tus mejores amigas‚ù§Ô∏è.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-iife-immediately-invoked-function-expression"&gt;
  &lt;/a&gt;
  4. IIFE (Immediately Invoked Function Expression)
&lt;/h2&gt;

&lt;p&gt;Como su nombre lo indica, las funciones IIFE se ejecutan inmediatamente despu√©s de su declaraci√≥n. Como son &lt;em&gt;funciones an√≥nimas&lt;/em&gt; sin estar asignadas a nada, no son accesibles para ser llamadas posteriormente. Para declararlas solo debemos crear una funci√≥n an√≥nima entre par√©ntesis &lt;em&gt;()&lt;/em&gt; y seguida de &lt;em&gt;()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hl7naDmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y92c9hc8q5u5jpmg8e30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hl7naDmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y92c9hc8q5u5jpmg8e30.png" alt="IIFE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Si necesitas crear una funci√≥n que no se usar√° en el futuro, para evitar contaminar tu scope global, puedes usar una IIFE. Al permanecer en el anonimato, √©stas se usan y se olvidan. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-shorthand-method-definition"&gt;
  &lt;/a&gt;
  5. Shorthand method definition
&lt;/h2&gt;

&lt;p&gt;Nuestra siguiente forma es tambi√©n una nueva caracter√≠stica de &lt;em&gt;ES6&lt;/em&gt; donde declaramos la funci√≥n dentro de un objeto. No es necesario agregar la palabra clave de &lt;em&gt;function&lt;/em&gt;, por lo que solo se requieren el nombre de la funci√≥n, los par√°metros y las llaves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3--UJry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6rwq5alfiv859odnej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3--UJry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6rwq5alfiv859odnej.png" alt="ES6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Este m√©todo es una manera f√°cil de agregar una funci√≥n como propiedad de un objeto y, honestamente, se ve bastante bien, porque es ordenado y limpio üíÅ‚Äç‚ôÄÔ∏è.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-function-constructor"&gt;
  &lt;/a&gt;
  6. Function constructor
&lt;/h2&gt;

&lt;p&gt;Debido a que las funciones son objetos &lt;em&gt;Function&lt;/em&gt;, podemos crearlas usando el operador &lt;strong&gt;new&lt;/strong&gt;. Para declararlas debemos pasar nuestros par√°metros como argumentos y nuestro c√≥digo ser√° el √∫ltimo argumento que reciba, todo en formato &lt;strong&gt;string&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpFsZ2yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5saaqq5erfnlvdun46hy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpFsZ2yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5saaqq5erfnlvdun46hy.png" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas-o-no"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas? ¬øO no? üò∞
&lt;/h3&gt;

&lt;p&gt;Honestamente, no recomiendo utilizar este m√©todo, ya que, al requerir que el cuerpo de la funci√≥n sea de tipo &lt;em&gt;string&lt;/em&gt;, puede causar problemas de optimizaci√≥n y una mayor probabilidad de errores ‚ùåüêû.&lt;/p&gt;

&lt;p&gt;Como vimos, existen diferentes formas de declarar funciones en JavaScript, cada una con sus ventajas üëç y desventajas üëé, por lo que depende de nosotros analizar el prop√≥sito de nuestra funci√≥n antes de crearla y as√≠ tomar la mejor decisi√≥n. Te invito a que te diviertas prob√°ndolas y espero esta informaci√≥n te sea de ayuda üåü.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  Referencias
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions"&gt;Funciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Functions"&gt;Definici√≥n de  funciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Closures"&gt;Closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Glossary/Hoisting"&gt;Hoisting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer ‚ù§Ô∏è!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://twitter.com/alecodesdancer"&gt;Twitterüåü&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://alecodesdancer.medium.com"&gt;Mediumüìñ&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/alecodesdancer/"&gt;Githubüíª&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.instagram.com/alecodesdancer/"&gt;Instagramüíú&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>spanish</category>
    </item>
    <item>
      <title>React-query series Part 3: Data fetching with the useQuery hook.</title>
      <author>Emmanuel Chinonye Nnajiofor</author>
      <pubDate>Sun, 22 Aug 2021 19:07:05 +0000</pubDate>
      <link>https://dev.to/nnajiforemma10/react-query-series-part-3-data-fetching-with-the-usequery-hook-4n22</link>
      <guid>https://dev.to/nnajiforemma10/react-query-series-part-3-data-fetching-with-the-usequery-hook-4n22</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://blog.logrocket.com/author/lawrenceoputa/"&gt;&lt;strong&gt;Lawrence Eagles&lt;/strong&gt;&lt;/a&gt; in the article: &lt;a href="https://blog.logrocket.com/whats-new-in-react-query-3/"&gt;&lt;strong&gt;What‚Äôs new in React Query 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey everyone !&lt;/p&gt;

&lt;p&gt;I'm back again. I am always grateful for the encouragement. Thank you for the üíñ, for taking the time to read the lengthy &lt;a href="https://dev.to/nnajiforemma10/react-query-series-part-2-queryclient-configuration-18g6"&gt;&lt;strong&gt;Part Two: QueryClient configuration&lt;/strong&gt;&lt;/a&gt; of this series. To my new followers; Thank you! I'll do my best not to disappoint you.&lt;/p&gt;

&lt;p&gt;In part two, we talked about overriding some of the defaults that come with &lt;code&gt;react-query&lt;/code&gt; by setting our custom defaults for both &lt;code&gt;queries&lt;/code&gt; and &lt;code&gt;mutations&lt;/code&gt;. We set our custom defaults on such options like &lt;code&gt;retry&lt;/code&gt; , &lt;code&gt;staleTime&lt;/code&gt;, &lt;code&gt;cacheTime&lt;/code&gt;, &lt;code&gt;refecthOnMount&lt;/code&gt; and a couple of others for our &lt;code&gt;queries&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt; for &lt;code&gt;mutations&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-0"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#point-1"&gt;The useQuery hook&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-1a"&gt;Fetching data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1b"&gt;Passing variables to query functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1c"&gt;Overriding query defaults&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-2"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this part, we will be learning how to fetch data from an API using the &lt;code&gt;useQuery&lt;/code&gt; hook. I promised to show you how we can override the defaults we set earlier, so we will have a look at that too. Always remember to use the table of contents above to jump to sections relevant to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-usequery-hook"&gt;
  &lt;/a&gt;
  The useQuery hook &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We start by installing &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; and refactoring a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;QueryClient&lt;/code&gt; goes to a new file &lt;code&gt;./src/util/queryClient.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClientConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;staleTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;// 30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;cacheTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnReconnect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchIntervalInBackground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;suspense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

 &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClientConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you just got here, we explained this snippet &lt;a href="https://dev.to/nnajiforemma10/react-query-series-part-2-queryclient-configuration-18g6"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We clean our &lt;code&gt;App.js&lt;/code&gt; thus&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query/devtools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/queryClient&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The rest of your application */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also create a &lt;code&gt;queryKeys.js&lt;/code&gt; file at &lt;code&gt;./src/util/queryKeys.js&lt;/code&gt;.&lt;br&gt;
This file will host all the query keys for our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPostsKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FETCH_POSTS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;fetchPosts.service.js&lt;/code&gt; file at &lt;code&gt;./src/services/fetchPosts.service.js&lt;/code&gt; and create your simple async function to fetch a list of posts.&lt;br&gt;
We will be using the &lt;a href="https://jsonplaceholder.typicode.com"&gt;JSONPlaceholder&lt;/a&gt; REST API for this demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @desc fetch a list of posts
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/posts`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-data"&gt;
  &lt;/a&gt;
  Fetching data &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;Posts.js&lt;/code&gt; component at &lt;code&gt;./src/components/Posts.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remember to import your &lt;code&gt;Posts.js&lt;/code&gt; component to your &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Posts.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../services/fetchPosts.service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchPostsKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../util/queryKeys&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchPostsKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;fetching&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useQuery&lt;/code&gt; hook accepts a query key as its first argument and the query function as its's second argument.&lt;br&gt;
The query key is required, the query function also is required as there was not default query function defined for our &lt;code&gt;queries&lt;/code&gt; in &lt;code&gt;QueryClient&lt;/code&gt;. Let's take a quick brush at the items in the destructured object &lt;code&gt;useQuery&lt;/code&gt; returns to us.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isLoading&lt;/code&gt;: It is a &lt;code&gt;boolean&lt;/code&gt; value that returns &lt;code&gt;true&lt;/code&gt; when the query has no data and is currently fetching and &lt;code&gt;false&lt;/code&gt; when not. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;isError&lt;/code&gt;: Also a &lt;code&gt;boolean&lt;/code&gt; value. It return &lt;code&gt;true&lt;/code&gt; when the query attempt results in an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isSuccess&lt;/code&gt;: Returns &lt;code&gt;true&lt;/code&gt; if the query has received a response with no errors and is ready to display its data. &lt;code&gt;isSuccess&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; when query is not yet resolved or results in an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;refetch&lt;/code&gt; : This is a function that manually refetches the query.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; : This function is used to manually remove the query from cache.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :  It is the response from the last successful query. &lt;code&gt;data&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; if query fails for the first time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;error&lt;/code&gt; :  It is the error response from your query. It is defined when your query is in an &lt;code&gt;isError&lt;/code&gt; state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useQuery&lt;/code&gt; hook returns more values in the destructured object than described here, but this few I chose for the scope of this article. You can read more about the &lt;code&gt;useQuery&lt;/code&gt; hook &lt;a href="https://react-query.tanstack.com/reference/useQuery"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#passing-variables-to-a-query-function"&gt;
  &lt;/a&gt;
  Passing variable(s) to a query function &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;So, what if you want to pass a variable or variables to your query function? E.g. you have a function that fetches a single post and it requires you to pass in a post &lt;code&gt;id&lt;/code&gt;; What do you do?&lt;br&gt;
Let's see how it is done.&lt;/p&gt;

&lt;p&gt;We will a new key entry in a &lt;code&gt;queryKeys.js&lt;/code&gt; file at &lt;code&gt;./src/util/queryKeys.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FETCH_SINGLE_POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create also a &lt;code&gt;fetchSinglePost.service.js&lt;/code&gt; file at &lt;code&gt;./src/services/fetchSinglePost.service.js&lt;/code&gt; and create your simple async function to fetch a single post by &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetchSinglePost.service.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @desc fetches a single post
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryKey&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Post.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../services/fetchSinglePost .service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../util/queryKeys&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// fetching the post with the id of 1&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;fetching&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are no more using a &lt;code&gt;string&lt;/code&gt; value for our query key but an &lt;code&gt;array&lt;/code&gt;, passing in the query string first and the post &lt;code&gt;id&lt;/code&gt; as required by our query function &lt;code&gt;fetchSinglePost.service.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fetchSinglePost&lt;/code&gt; function declared in &lt;code&gt;useQuery&lt;/code&gt; hook is passed in a context, this context has &lt;code&gt;queryKey&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; nested in it. This &lt;code&gt;queryKey&lt;/code&gt; array contains your query string as the first item in the array and your &lt;code&gt;id&lt;/code&gt; variable for fetching our single post.&lt;/p&gt;

&lt;p&gt;Remember to import your &lt;code&gt;Post.js&lt;/code&gt; component to your &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;...&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#overriding-query-defaults"&gt;
  &lt;/a&gt;
  Overriding query defaults &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We have seen two demonstrations using &lt;code&gt;useQuery&lt;/code&gt; but don't forget that they all are operating within the &lt;code&gt;queries&lt;/code&gt; default we set earlier. To override some of the global configurations, we pass an object as a third argument to the &lt;code&gt;useQuery&lt;/code&gt; hook. Every option you declare a new value, that option is overridden for that &lt;code&gt;useQuery&lt;/code&gt; instance only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;refetchInterval&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;//3 seconds&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this snippet above implies is that, although we configured &lt;code&gt;react-query&lt;/code&gt; globally to refetch queries every 30 seconds, This particular query will refetch every 3 seconds; breaking away from the global configurations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The returned data from our queries are stored in a cache. In the next part, we will discuss how the to interact with this cache.&lt;br&gt;
Thank you all for your support. If you are beginner and haven't written something, do that today! Please give me a üíñ if this post or part of it has helped you. Comments are welcomed too.&lt;br&gt;
Follow me on &lt;a href="https://twitter.com/NnajioforEmma10"&gt;twitter @NnajioforEmma10&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-0"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#point-1"&gt;The useQuery hook&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-1a"&gt;Fetching data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1b"&gt;Passing variables to query functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1c"&gt;Overriding query defaults&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-2"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>hooks</category>
    </item>
    <item>
      <title>Do not expose database ids in your URLs</title>
      <author>Khalyomede</author>
      <pubDate>Sun, 22 Aug 2021 18:36:45 +0000</pubDate>
      <link>https://dev.to/khalyomede/do-not-expose-database-ids-in-your-urls-567</link>
      <guid>https://dev.to/khalyomede/do-not-expose-database-ids-in-your-urls-567</guid>
      <description>&lt;p&gt;When developing web apps, we often rely on fetching informations from the database. Frameworks offer a way to make this easy thanks to &lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;ORMs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of the time, the ORM will find your model using the primary key as a reliable identifier. On the vast majority, primary keys are auto incremented integers.&lt;/p&gt;

&lt;p&gt;Your URLs then look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/cart/12
https://example.com/user/15/post/41
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Providing an incorrect or faulty authorization layer can create data leaks: users become able to navigate from data to data, which is something we would not want to allow if it is about sensitive data like users personal info.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#obfuscating-the-identifier"&gt;
  &lt;/a&gt;
  Obfuscating the identifier
&lt;/h2&gt;

&lt;p&gt;An easy way to mitigate this security breach is to use a key that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to predict&lt;/li&gt;
&lt;li&gt;Random enough to be able to create a lot of items while keeping the unicity between them&lt;/li&gt;
&lt;li&gt;Easy to generate from your code and the database&lt;/li&gt;
&lt;li&gt;Checkable (we can know by analyzing its integrity if it is valid or not)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for us, &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUIDs&lt;/a&gt; are a very good candidate for it. It checks all the points above, and are very easy to use thanks to a wide range of package ready for use.&lt;/p&gt;

&lt;p&gt;Your URLS now become harder to predict, which mitigate any developers mistake regarding authorization policies in your app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/cart/f6e4208f-5df4-466e-9225-01f296e2a09c
https://example.com/user/b1b44b12-34bc-4ed7-a666-9657b8b8c31b/post/e530d034-42f7-467b-91e3-1cc9313312eb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#example-on-a-laravel-app"&gt;
  &lt;/a&gt;
  Example on a Laravel app
&lt;/h2&gt;

&lt;p&gt;In order to practice developing a &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; package, and using my first ever &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Github Workflow&lt;/a&gt;, I created a package to make this job a breeze.&lt;/p&gt;

&lt;p&gt;Here is how you can use &lt;a href="https://github.com/khalyomede/laravel-eloquent-uuid-slug#compatibility-table"&gt;khalyomede/laravel-eloquent-uuid-slug&lt;/a&gt; in your app now.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-the-package"&gt;
  &lt;/a&gt;
  Install the package
&lt;/h3&gt;

&lt;p&gt;First, head in your console, and type this command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require khalyomede/laravel-eloquent-uuid-slug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#add-your-slug-column-to-your-migration"&gt;
  &lt;/a&gt;
  Add your slug column to your migration
&lt;/h3&gt;

&lt;p&gt;Then, go to the &lt;a href="https://laravel.com/docs/8.x/migrations"&gt;migration&lt;/a&gt; of the &lt;a href="https://laravel.com/docs/8.x/eloquent"&gt;model&lt;/a&gt; of your choice, or create a new one if it has already been installed, and add the slug column.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Database\Migrations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Cart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddSlugColumnToCartTable&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'carts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;addSlugColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'carts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dropSlugColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// available soon in v0.2.0&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#add-the-trait-to-your-model"&gt;
  &lt;/a&gt;
  Add the trait to your model
&lt;/h3&gt;

&lt;p&gt;This is the last step, which will help configure how your model is retreived in your routes using &lt;a href="https://laravel.com/docs/8.x/routing#route-model-binding"&gt;Route model binding&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Khalyomede\EloquentUuidSlug\Sluggable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cart&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Sluggable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#use-it-in-your-controller"&gt;
  &lt;/a&gt;
  Use it in your controller
&lt;/h3&gt;

&lt;p&gt;Now you are ready to take advantage of the package. The great thing with it is that your code does not change! You can keep using the &lt;code&gt;route()&lt;/code&gt; method like you are used to.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/web.php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Cart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\RedirectResponse&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\View\View&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;cart&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Cart&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"cart"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"saveCartRoute"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;cart&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cart&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;RedirectResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;only&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.store"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And voil√†! This package will no interfer with your existing logic as you can see. The only thing that changes is now your routes are not exposed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// https://example.com/cart/398e76a7-7c16-467c-93a8-04c06c6df703&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While this solution is not a magic way to resolve the initial problem of data leak, I find it is a very easy actionable mecanism to reduce the possibilities for malicious users to trick your system.&lt;/p&gt;

&lt;p&gt;This does not prevent you to add an authorization or guard mecanism, like &lt;a href="https://laravel.com/docs/8.x/authorization#creating-policies"&gt;Laravel Policies&lt;/a&gt; for example. For example, if a user navigates to a cart that have not been created by him/her, should not be able to view it.&lt;/p&gt;

&lt;p&gt;Other folks here already talked about this subject, so make sure to give it a go if you want to read more about using UUIDs:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rahulbanerjee99" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIpJH_Yn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gKAChxw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/519143/04968747-ae72-43c8-bb92-ec8f0698f035.png" alt="rahulbanerjee99"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rahulbanerjee99/4-packages-to-generate-uuids-in-javascript-lc1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;4 packages to generate UUIDs in JavaScript&lt;/h2&gt;
      &lt;h3&gt;Rahul Banerjee „Éª Aug 16 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/jeroenvanrensen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miAH6eSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0VTCOz8j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569791/63e6de00-55cf-4847-8046-c930bcd085f3.jpeg" alt="jeroenvanrensen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jeroenvanrensen/why-you-shouldn-t-expose-your-incrementing-ids-57lc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why you shouldn't expose your incrementing IDs&lt;/h2&gt;
      &lt;h3&gt;Jeroen van Rensen „Éª Mar 7 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#laravel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/jeroenvanrensen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miAH6eSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0VTCOz8j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569791/63e6de00-55cf-4847-8046-c930bcd085f3.jpeg" alt="jeroenvanrensen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jeroenvanrensen/how-to-use-uuids-in-urls-in-laravel-1ja7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to use UUIDs in URLs in Laravel&lt;/h2&gt;
      &lt;h3&gt;Jeroen van Rensen „Éª Mar 10 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#laravel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uuid&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Happy URL hardening!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>security</category>
      <category>php</category>
    </item>
    <item>
      <title>Blitz.js: The Fullstack React Framework Part 2</title>
      <author>Ashik Chapagain</author>
      <pubDate>Sun, 22 Aug 2021 18:16:14 +0000</pubDate>
      <link>https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-part-2-4697</link>
      <guid>https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-part-2-4697</guid>
      <description>&lt;h1&gt;
  &lt;a href="#welcome-back"&gt;
  &lt;/a&gt;
  Welcome Back  üëã
&lt;/h1&gt;

&lt;p&gt;Hey, Developers, welcome back to the second part of the  &lt;a href="https://dev.to/chapagainashik/series/14193"&gt;&lt;code&gt;Blitz.js: The Fullstack React Framework&lt;/code&gt;&lt;/a&gt;  series.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check part one if you haven't already:   &lt;a href="https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-2kag"&gt;https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-2kag&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous part, we have completed setting up a fresh blitz.js project, added Tailwind CSS to it using a recipe, created a database model, and generated the files required for this project.&lt;/p&gt;

&lt;p&gt;Today, we'll start by updating the schema file.&lt;/p&gt;

&lt;p&gt;So, let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#update-database-schema"&gt;Update Database Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#understanding-and-updating-logics"&gt;Understanding and updating Logics&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#logics-for-project"&gt;Logics for Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logics-for-tasks"&gt;Logics for Tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#building-ui"&gt;Building UI&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#signup-page-component"&gt;SignUp Page Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#login-page"&gt;Login Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#forgot-password-page"&gt;Forgot Password page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reset-password-page"&gt;Reset Password page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#recap"&gt;Recap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#update-database-schema"&gt;
  &lt;/a&gt;
  Update Database Schema
&lt;/h1&gt;

&lt;p&gt;In the previous article, we finished up creating the relationship between project and tasks table, but there we haven't created the field for storing task name and task description. So, first, let's update the scheme.prisma file with required fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// file: db/schema.prisma
...

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  tasks       Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  // Add the following new fields
  name        String
  description String?
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you haven't noticed what we have changed, check the &lt;code&gt;Task&lt;/code&gt; model, where we have added the &lt;code&gt;name&lt;/code&gt; field of &lt;code&gt;String&lt;/code&gt; type and &lt;code&gt;description&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt; with nullable &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's it for the &lt;code&gt;schema&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now run the command &lt;code&gt;blitz prisma migrate dev&lt;/code&gt;. And give any name for migration, but since we have updated the tasks table by adding two new fields so, I'll name it &lt;code&gt;update_tasks_table&lt;/code&gt;. If you open the Prisma studio using &lt;code&gt;blitz prisma studio&lt;/code&gt;, you will see two new fields in the tasks table.&lt;/p&gt;

&lt;p&gt;Let's build the logic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#understanding-and-updating-logics"&gt;
  &lt;/a&gt;
  Understanding and updating Logics
&lt;/h1&gt;

&lt;p&gt;We'll understand mutations and queries to alter the data in the database and fetch the data from the database which are generated by code scaffolding from our previous part but since we have added the new field we have to update mutations and logics too. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logics-for-project"&gt;
  &lt;/a&gt;
  Logics for Project
&lt;/h2&gt;

&lt;p&gt;First, let's create the CRUD operation for the project.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app/projects/mutations/createProject.ts&lt;/code&gt; and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// app/projects/mutations/createProject.ts
import { resolver } from "blitz"
import db from "db"
import { z } from "zod"

const CreateProject = z.object({
  name: z.string(),
  description: z.string(),
})

export default resolver.pipe(
  resolver.zod(CreateProject), // This is a handly utility for using Zod, an awesome input validation library. It takes a zod schema and runs schema.parse on the input data.
  resolver.authorize(), // Require Authentication
  async (input) =&amp;gt; {
    // Create the project
    const project = await db.project.create({ data: input })
    // Return created project
    return project
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's split the code and understand each line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import { resolver } from "blitz"&lt;/code&gt;:  Blitz exports a resolver object which contains a few utilities. "Resolver" as used here and for queries and mutations refers to a function that takes some input and "resolves" that into some output or side effect. &lt;a href="https://blitzjs.com/docs/resolver-server-utilities"&gt;Click here to know more&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import db from "db"&lt;/code&gt;: Here &lt;code&gt;db&lt;/code&gt; is a Prisma client enhanced by &lt;code&gt;blitz&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import { z } from "zod"&lt;/code&gt;: Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.  &lt;a href="https://github.com/colinhacks/zod#what-is-zod"&gt;Click here to know more&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;const CreateProject&lt;/code&gt;: &lt;code&gt;CreateProject&lt;/code&gt; is an object schema that validates if the given input contains the &lt;code&gt;name&lt;/code&gt; field of &lt;code&gt;string&lt;/code&gt; type and &lt;code&gt;description&lt;/code&gt; field of 'string' type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;resolver.pipe&lt;/code&gt;: This is a functional pipe that makes it easier and cleaner to write complex resolvers. A pipe automatically pipes the output of one function into the next function. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#resolver-pipe"&gt;Blitz.js Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;resolver.zod(CreateProject)&lt;/code&gt;: This is a handy utility for using Zod, an awesome input validation library. It takes a zod schema and runs schema.parse on the input data. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#resolver-zod"&gt;Blitz.js Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;resolver.authorize()&lt;/code&gt;: Using resolver.authorize in resolver.pipe is a simple way to check whether the user has the authorization to call the query or mutation or not. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#resolver-authorize"&gt;Blitz.js Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;async (input) =&amp;gt; {}&lt;/code&gt;: This async function is a callback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.create&lt;/code&gt;: Create a new project in the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;return project&lt;/code&gt;: Returns the created data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we have built the logic to create a project.&lt;/p&gt;

&lt;p&gt;Let's build the logic to get projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// file: app/projects/queries/getProjects.ts
import { paginate, resolver } from "blitz"
import db, { Prisma } from "db"

interface GetProjectsInput
  extends Pick&amp;lt;Prisma.ProjectFindManyArgs, "where" | "orderBy" | "skip" | "take"&amp;gt; {}

export default resolver.pipe(
  resolver.authorize(),
  async ({ where, orderBy, skip = 0, take = 100 }: GetProjectsInput) =&amp;gt; {
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant
    const {
      items: projects,
      hasMore,
      nextPage,
      count,
    } = await paginate({
      skip,
      take,
      count: () =&amp;gt; db.project.count({ where }),
      query: (paginateArgs) =&amp;gt;
        db.project.findMany({ ...paginateArgs, where, orderBy, include: { tasks: true } }),
    })

    return {
      projects,
      nextPage,
      hasMore,
      count,
    }
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file, made a single change and that is I have added the &lt;code&gt;include&lt;/code&gt; option in &lt;code&gt;db.project.findMany()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What this will do is, includes all the tasks that belong to the respective project.&lt;/p&gt;

&lt;p&gt;Now let's understand each line of this code. I'll not repeat the one that I have already written while building the &lt;code&gt;create project&lt;/code&gt; logic. I'll also skip the imports.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;interface GetProjectsInput&lt;br&gt;
extends Pick&amp;lt;Prisma.ProjectFindManyArgs, "where" | "orderBy" | "skip" | "take"&amp;gt; {}&lt;/code&gt;: What this will do is, create a interface by picking the set of properties (where, orderBy, skip, take) from &lt;code&gt;Prisma.ProjectFindManyArgs&lt;/code&gt;. ( &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys"&gt;TS Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Prisma.ProjectFindManyArgs&lt;/code&gt;: Prisma generates the types for the model and the arguments. Here we are using ProjectFindManyArgs` which was generated by Prisma. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;paginate&lt;/code&gt;: This is a handy utility for query pagination. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#paginate"&gt;Blitz.js Docs&lt;/a&gt; ).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.count({where})&lt;/code&gt;: Returns the number of data from the database that follows the conditions we passed in where argument.( &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/aggregation-grouping-summarizing#count"&gt;Prisma Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.findMany()&lt;/code&gt;: Get all the data from the projects table. If you compare this with the originally generated one, then we'll know that we have added the &lt;code&gt;include&lt;/code&gt; option in this. From with we will get all the tasks that belong to this table.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's look at how to get a single project.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/projects/queries/getProject.ts&lt;br&gt;
import { resolver, NotFoundError } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const GetProject = z.object({&lt;br&gt;
  // This accepts type of undefined, but is required at runtime&lt;br&gt;
  id: z.number().optional().refine(Boolean, "Required"),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(resolver.zod(GetProject), resolver.authorize(), async ({ id }) =&amp;gt; {&lt;br&gt;
  // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
  const project = await db.project.findFirst({ where: { id }, include: { tasks: true } })&lt;/p&gt;

&lt;p&gt;if (!project) throw new NotFoundError()&lt;/p&gt;

&lt;p&gt;return project&lt;br&gt;
})&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.refine()&lt;/code&gt;: (&lt;a href="https://github.com/colinhacks/zod#refine"&gt;ZOD Docs&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.findFirst()&lt;/code&gt;: Return the first data that satisfies the given condition. (&lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#findfirst"&gt;Prisma Docs&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;throw new NotFoundError()&lt;/code&gt;: Throw 404 error.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's see the logic to update the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/projects/mutations/updateProject.ts&lt;br&gt;
import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const UpdateProject = z.object({&lt;br&gt;
  id: z.number(),&lt;br&gt;
  name: z.string(),&lt;br&gt;
  description: z.string(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(&lt;br&gt;
  resolver.zod(UpdateProject),&lt;br&gt;
  resolver.authorize(),&lt;br&gt;
  async ({ id, ...data }) =&amp;gt; {&lt;br&gt;
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
    const project = await db.project.update({ where: { id }, data })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;db.project.update()&lt;/code&gt;: Update the data with the given data in the project row with the given id. (&lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#update"&gt;Prisma Docs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, it's time for the logic to delete the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/projects/mutations/deleteProject.ts&lt;/p&gt;

&lt;p&gt;import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const DeleteProject = z.object({&lt;br&gt;
  id: z.number(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(resolver.zod(DeleteProject), resolver.authorize(), async ({ id }) =&amp;gt; {&lt;br&gt;
  // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
  const tasks = await db.task.deleteMany({ where: { projectId: id } })&lt;br&gt;
  const project = await db.project.deleteMany({ where: { id } })&lt;/p&gt;

&lt;p&gt;return project&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
If you look there, I have added a new line &lt;code&gt;const tasks = = await db.task.deleteMany({ where: { projectId: id } })&lt;/code&gt;. This will first delete all the tasks that belong to that project and only then the actual project got removed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;db.project.deleteMany&lt;/code&gt;: This will delete the rows from the table which satisfy the given criteria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, The CRUD for the project has been completed, now it's time for CRUD operation of tasks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#logics-for-tasks"&gt;
  &lt;/a&gt;
  Logics for Tasks
&lt;/h2&gt;

&lt;p&gt;Let's update the tasks logic for creating a new task.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/tasks/mutations/createTask.ts&lt;/p&gt;

&lt;p&gt;import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const CreateTask = z.object({&lt;br&gt;
  name: z.string(),&lt;br&gt;
  projectId: z.number(),&lt;br&gt;
  // This is what we have added&lt;br&gt;
  description: z.string().optional(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(resolver.zod(CreateTask), resolver.authorize(), async (input) =&amp;gt; {&lt;br&gt;
  // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
  const task = await db.task.create({ data: input })&lt;/p&gt;

&lt;p&gt;return task&lt;br&gt;
})&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Everything looks familiar, Nah. We have already discussed the syntax used up here before.&lt;/p&gt;

&lt;p&gt;After we created tasks, we need to retrieve the tasks, so let getAll the tasks.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/tasks/queries/getTasks.ts&lt;/p&gt;

&lt;p&gt;import { paginate, resolver } from "blitz"&lt;br&gt;
import db, { Prisma } from "db"&lt;/p&gt;

&lt;p&gt;interface GetTasksInput&lt;br&gt;
  extends Pick {}&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(&lt;br&gt;
  resolver.authorize(),&lt;br&gt;
  async ({ where, orderBy, skip = 0, take = 100 }: GetTasksInput) =&amp;gt; {&lt;br&gt;
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
    const {&lt;br&gt;
      items: tasks,&lt;br&gt;
      hasMore,&lt;br&gt;
      nextPage,&lt;br&gt;
      count,&lt;br&gt;
    } = await paginate({&lt;br&gt;
      skip,&lt;br&gt;
      take,&lt;br&gt;
      count: () =&amp;gt; db.task.count({ where }),&lt;br&gt;
      query: (paginateArgs) =&amp;gt; db.task.findMany({ ...paginateArgs, where, orderBy }),&lt;br&gt;
    })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return {
  tasks,
  nextPage,
  hasMore,
  count,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Everything is the same up here as generated.&lt;/p&gt;

&lt;p&gt;Let's see the mutation to update the task.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
// app/tasks/mutations/updateTask.ts&lt;/p&gt;

&lt;p&gt;import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const UpdateTask = z.object({&lt;br&gt;
  id: z.number(),&lt;br&gt;
  name: z.string(),&lt;br&gt;
  // The only thing we have added&lt;br&gt;
  description: z.string().optional(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(&lt;br&gt;
  resolver.zod(UpdateTask),&lt;br&gt;
  resolver.authorize(),&lt;br&gt;
  async ({ id, ...data }) =&amp;gt; {&lt;br&gt;
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
    const task = await db.task.update({ where: { id }, data })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;getTask&lt;/code&gt; query and &lt;code&gt;delete&lt;/code&gt; mutation, leave it as it is.&lt;/p&gt;

&lt;p&gt;Now we're done for Logics.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#building-ui"&gt;
  &lt;/a&gt;
  Building UI
&lt;/h1&gt;

&lt;p&gt;We have already installed &lt;code&gt; Tailwind CSS&lt;/code&gt; with the blitz recipe in the previous part. ( &lt;a href="https://cb-ashik.hashnode.dev/blitzjs-the-fullstack-react-framework#tailwind-css"&gt;Read it here&lt;/a&gt; ). So, we'll be using the Tailwind CSS library for this project. And we'll create a simple UI using TailwindCSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#signup-page-component"&gt;
  &lt;/a&gt;
  SignUp Page Component
&lt;/h2&gt;

&lt;p&gt;Link: &lt;code&gt;/signup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app/auth/pages/signup.tsx&lt;/code&gt;. There you will see that they are using the custom component &lt;code&gt;SignupForm&lt;/code&gt; for the form. So, open it from &lt;code&gt;app/auth/components/SignupForm.tsx&lt;/code&gt;. Then there you will see that they are using the custom &lt;code&gt;Form Component&lt;/code&gt; and &lt;code&gt;LabeledTextField&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;So our first work will be to customize &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;LabeledTextFieldComponent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app/core/Form.tsx&lt;/code&gt; and add &lt;code&gt;p-5 border rounded&lt;/code&gt; classes in the &lt;code&gt;form&lt;/code&gt; tag and add &lt;code&gt;text-sm&lt;/code&gt; class in &lt;code&gt;alert&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`jsx&lt;br&gt;
// app/core/components/Form.tsx&lt;/p&gt;


&lt;br&gt;
         {submitError &amp;amp;&amp;amp; (&lt;br&gt;
            &lt;br&gt;
              {submitError}&lt;br&gt;
            &lt;br&gt;
          )}&lt;br&gt;
         ...&lt;br&gt;
&lt;br&gt;
...&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;

&lt;p&gt;Now, let's customize &lt;code&gt;LabeledTextFieldComponent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this, first, we will create a custom component for input with tailwind style classes.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;app/core/components&lt;/code&gt; and open a file &lt;code&gt;LabeledTextField.tsx&lt;/code&gt; and update it with the following code.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`jsx&lt;br&gt;
// app/core/components/LabeledTextField.tsx&lt;/p&gt;

&lt;p&gt;import { forwardRef, PropsWithoutRef } from "react"&lt;br&gt;
import { useField } from "react-final-form"&lt;/p&gt;

&lt;p&gt;export interface LabeledTextFieldProps extends PropsWithoutRef {&lt;br&gt;
  /** Field name. &lt;em&gt;/&lt;br&gt;
  name: string&lt;br&gt;
  /&lt;/em&gt;* Field label. &lt;em&gt;/&lt;br&gt;
  label: string&lt;br&gt;
  /&lt;/em&gt;* Field type. Doesn't include radio buttons and checkboxes */&lt;br&gt;
  type?: "text" | "password" | "email" | "number"&lt;br&gt;
  outerProps?: PropsWithoutRef&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export const LabeledTextField = forwardRef(&lt;br&gt;
  ({ name, label, outerProps, ...props }, ref) =&amp;gt; {&lt;br&gt;
    const {&lt;br&gt;
      input,&lt;br&gt;
      meta: { touched, error, submitError, submitting },&lt;br&gt;
    } = useField(name, {&lt;br&gt;
      parse: props.type === "number" ? Number : undefined,&lt;br&gt;
    })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const normalizedError = Array.isArray(error) ? error.join(", ") : error || submitError

return (
  &amp;lt;div {...outerProps}&amp;gt;
    &amp;lt;label className="flex flex-col items-start"&amp;gt;
      {label}
      &amp;lt;input
        {...input}
        className="px-1 py-2 border rounded focus:ring focus:outline-none ring-purple-200 block w-full my-2"
        disabled={submitting}
        {...props}
        ref={ref}
      /&amp;gt;
    &amp;lt;/label&amp;gt;

    {touched &amp;amp;&amp;amp; normalizedError &amp;amp;&amp;amp; (
      &amp;lt;div role="alert" className="text-sm" style={{ color: "red" }}&amp;gt;
        {normalizedError}
      &amp;lt;/div&amp;gt;
    )}
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;export default LabeledTextField&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always remember that the components that are required for a specific model, we have to create that inside the components folder in that model, for example. if we want a form to create a project then we add that form component inside &lt;code&gt;app/project/components&lt;/code&gt;. But if that component is not model specific, then we create those components inside &lt;code&gt;app/core/components&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's create a new core &lt;code&gt;Button&lt;/code&gt; component to use everywhere on the site.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`jsx&lt;br&gt;
// app/core/components/Button.tsx&lt;/p&gt;

&lt;p&gt;export const Button = ({ children, ...props }) =&amp;gt; {&lt;br&gt;
  return (&lt;br&gt;
    &lt;br&gt;
      {children}&lt;br&gt;
    &lt;br&gt;
  )&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Now let's use this new &lt;code&gt;Button&lt;/code&gt; component in &lt;code&gt;Form.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;app/core/components/Form.tsx&lt;/code&gt; replace&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
{submitText &amp;amp;&amp;amp; (&lt;br&gt;
     &amp;lt;button type="submit" disabled={submitting}&amp;gt;&lt;br&gt;
          {submitText}&lt;br&gt;
     &amp;lt;/button&amp;gt;&lt;br&gt;
)}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
with &lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
{submitText &amp;amp;&amp;amp; (&lt;br&gt;
     &amp;lt;Button type="submit" disabled={submitting}&amp;gt;&lt;br&gt;
          {submitText}&lt;br&gt;
     &amp;lt;/Button&amp;gt;&lt;br&gt;
)}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
And don't forget to import the &lt;code&gt;Button&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
import { Button } from "./Button"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Now, you should have something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBFVar_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629651145054/3wOHhG5gL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBFVar_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629651145054/3wOHhG5gL.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's customize this page more.&lt;/p&gt;

&lt;p&gt;We'll use a separate layout for the authentication pages. So, go to &lt;code&gt;app/core/layouts&lt;/code&gt; and create a new file named &lt;code&gt;AuthLayout.tsx&lt;/code&gt; and add the following contents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/core/layouts/AuthLayout.tsx&lt;/p&gt;

&lt;p&gt;import { ReactNode } from "react"&lt;br&gt;
import { Head } from "blitz"&lt;/p&gt;

&lt;p&gt;type LayoutProps = {&lt;br&gt;
  title?: string&lt;br&gt;
  heading: string&lt;br&gt;
  children: ReactNode&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;const AuthLayout = ({ title, heading, children }: LayoutProps) =&amp;gt; {&lt;br&gt;
  return (&lt;br&gt;
    &amp;lt;&amp;gt;&lt;br&gt;
      &lt;/p&gt;
&lt;br&gt;
        {title || "ProjectManagement"}&lt;br&gt;
        &lt;br&gt;
      
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;div className="flex justify-center"&amp;gt;
    &amp;lt;div className="w-full md:w-2/3 lg:max-w-2xl mt-5"&amp;gt;
      &amp;lt;h2 className="text-xl mb-2"&amp;gt;{heading}&amp;lt;/h2&amp;gt;
      &amp;lt;div&amp;gt;{children}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export default AuthLayout&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Now go to the &lt;code&gt;SignupForm&lt;/code&gt; component and remove the &lt;code&gt;h1&lt;/code&gt; tag. After removing &lt;code&gt;&lt;br&gt;
      &amp;lt;h1&amp;gt;Create an Account&amp;lt;/h1&amp;gt;&lt;/code&gt; the file should look like.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
import { useMutation } from "blitz"&lt;br&gt;
import { LabeledTextField } from "app/core/components/LabeledTextField"&lt;br&gt;
import { Form, FORM_ERROR } from "app/core/components/Form"&lt;br&gt;
import signup from "app/auth/mutations/signup"&lt;br&gt;
import { Signup } from "app/auth/validations"&lt;/p&gt;

&lt;p&gt;type SignupFormProps = {&lt;br&gt;
  onSuccess?: () =&amp;gt; void&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export const SignupForm = (props: SignupFormProps) =&amp;gt; {&lt;br&gt;
  const [signupMutation] = useMutation(signup)&lt;/p&gt;

&lt;p&gt;return (&lt;br&gt;
    &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;Form
    submitText="Create Account"
    schema={Signup}
    initialValues={{ email: "", password: "" }}
    onSubmit={async (values) =&amp;gt; {
      try {
        await signupMutation(values)
        props.onSuccess?.()
      } catch (error) {
        if (error.code === "P2002" &amp;amp;&amp;amp; error.meta?.target?.includes("email")) {
          // This error comes from Prisma
          return { email: "This email is already being used" }
        } else {
          return { [FORM_ERROR]: error.toString() }
        }
      }
    }}
  &amp;gt;
    &amp;lt;LabeledTextField name="email" label="Email" placeholder="Email" /&amp;gt;
    &amp;lt;LabeledTextField name="password" label="Password" placeholder="Password" type="password" /&amp;gt;
  &amp;lt;/Form&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export default SignupForm&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to tell &lt;code&gt;signup&lt;/code&gt; page to use &lt;code&gt;AuthLayout&lt;/code&gt; as layout.&lt;/p&gt;

&lt;p&gt;For that, go to &lt;code&gt;app/auth/pages/signup.tsx&lt;/code&gt; and change the folowing line:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
SignupPage.getLayout = (page) =&amp;gt; &amp;lt;Layout title="Sign Up"&amp;gt;{page}&amp;lt;/Layout&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
to&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
SignupPage.getLayout = (page) =&amp;gt; &amp;lt;AuthLayout heading="Create an account" title="Sign Up"&amp;gt;{page}&amp;lt;/AuthLayout&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
and import &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
import AuthLayout from "app/core/layouts/AuthLayout"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Now, your signup page should look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I_o6Ot0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629652975243/WyzbxyBQd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_o6Ot0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629652975243/WyzbxyBQd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Ignore that LastPass sign in the input field.&lt;/p&gt;

&lt;p&gt;Let's include a link to go to the login page in the signup page.&lt;/p&gt;

&lt;p&gt;For this, we'll create our own custom Link component with tailwind style.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;/app/core/components&lt;/code&gt; and create a new file &lt;code&gt;CustomLink.tsx&lt;/code&gt; and add the following.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/core/components/CustomLink.tsx&lt;/p&gt;

&lt;p&gt;import { Link } from "blitz"&lt;/p&gt;

&lt;p&gt;export const CustomLink = ({ children, href }: any) =&amp;gt; {&lt;br&gt;
  return (&lt;br&gt;
    &lt;br&gt;
      &lt;a&gt;{children}&lt;/a&gt;&lt;br&gt;
    &lt;br&gt;
  )&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, to include the go-to login link you have to add the following line after the &lt;code&gt;Form&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Already have account? Login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After all this, your signup page should look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3RTEFRX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629653774837/63Z1m40xy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3RTEFRX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629653774837/63Z1m40xy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, since we have already styled many components in the &lt;code&gt;SignUp UI&lt;/code&gt; section now, for other pages we won't have to do too much work for other pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login-page"&gt;
  &lt;/a&gt;
  Login Page
&lt;/h2&gt;

&lt;p&gt;Link : '/login'&lt;/p&gt;

&lt;p&gt;For the login page customization replace the following line in &lt;code&gt;login.tsx&lt;/code&gt;:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/auth/pages/login&lt;/p&gt;

&lt;p&gt;LoginPage.getLayout = (page) =&amp;gt; {page}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
LoginPage.getLayout = (page) =&amp;gt; (&lt;br&gt;
  &amp;lt;AuthLayout heading="Welcome back, login here" title="Log In"&amp;gt;&lt;br&gt;
    {page}&lt;br&gt;
  &amp;lt;/AuthLayout&amp;gt;&lt;br&gt;
)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
and import &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
import AuthLayout from "app/core/layouts/AuthLayout"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
After doing this, your login page should look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUIyi6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654113338/YIGIyuGYS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUIyi6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654113338/YIGIyuGYS.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, remove &lt;code&gt;&amp;lt;h1&amp;gt;Login&amp;lt;/h1&amp;gt;&lt;/code&gt; from &lt;code&gt;app/auth/components/LoginForm.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;and also replace the following lines from &lt;code&gt;LoginForm.tsx&lt;/code&gt;:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// from&lt;br&gt;
&lt;br&gt;
       &lt;a&gt;Forgot your password?&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;// to&lt;br&gt;
 &lt;br&gt;
     Forgot your password?&lt;br&gt;
 &lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and &lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// from&lt;br&gt;
Sign Up&lt;/p&gt;

&lt;p&gt;// to&lt;br&gt;
 Sign Up&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After getting up to this, your login page should look like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzX1z1Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654412059/qC8931iCy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzX1z1Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654412059/qC8931iCy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forgot-password-page"&gt;
  &lt;/a&gt;
  Forgot Password page
&lt;/h2&gt;

&lt;p&gt;Link : '/forgot-password'&lt;/p&gt;

&lt;p&gt;As before, change the layout to &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/auth/pages/forgot-password.tsx&lt;/p&gt;

&lt;p&gt;import AuthLayout from "app/core/layouts/AuthLayout"&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;ForgotPasswordPage.getLayout = (page) =&amp;gt; (&lt;br&gt;
  &lt;br&gt;
    {page}&lt;br&gt;
  &lt;br&gt;
)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and remove &lt;code&gt;&amp;lt;h1&amp;gt;Forgot your password?&amp;lt;/h1&amp;gt;&lt;/code&gt; from &lt;code&gt;app/auth/pages/forgot-password.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, the forgot password page is done and it should look like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oc4FbUJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655296285/U0RQPU67A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oc4FbUJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655296285/U0RQPU67A.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Finally the final page of authentication. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reset-password-page"&gt;
  &lt;/a&gt;
  Reset Password page
&lt;/h2&gt;

&lt;p&gt;Link: '/reset-password'&lt;/p&gt;

&lt;p&gt;As before, change the layout to &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/auth/pages/reset-password.tsx&lt;/p&gt;

&lt;p&gt;import AuthLayout from "app/core/layouts/AuthLayout"&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;ResetPasswordPage.getLayout = (page) =&amp;gt; (&lt;br&gt;
  &lt;br&gt;
    {page}&lt;br&gt;
  &lt;br&gt;
)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and remove &lt;code&gt;&amp;lt;h1&amp;gt;Set a New Password&amp;lt;/h1&amp;gt;&lt;/code&gt; and it should look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-28zv4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655367725/-SXFw8ZAN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-28zv4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655367725/-SXFw8ZAN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This much for today guys.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Updated the schema&lt;/li&gt;
&lt;li&gt;Edited UI for authentication pages using Tailwindcss&lt;/li&gt;
&lt;li&gt;Created custom components&lt;/li&gt;
&lt;li&gt;Created AuthLayout and used it&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>blitzjs</category>
      <category>nextjs</category>
      <category>react</category>
      <category>fullstack</category>
    </item>
    <item>
      <title>The truth about learning to code. (From a self taught developer)</title>
      <author>Joe Everest</author>
      <pubDate>Sun, 22 Aug 2021 17:55:52 +0000</pubDate>
      <link>https://dev.to/joeeverest/the-truth-about-learning-to-code-from-a-self-taught-developer-45oe</link>
      <guid>https://dev.to/joeeverest/the-truth-about-learning-to-code-from-a-self-taught-developer-45oe</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJSjdTR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd8cyn10gdt9l63fk1if.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJSjdTR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd8cyn10gdt9l63fk1if.jpg" alt="jefferson-santos-9SoCnyQmkzI-unsplash (1)"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;TLDR;&lt;/strong&gt; You shouldn't waste a lot of time learning the basics. Get your hands dirty building projects as soon as you can to establish a good understanding of the concepts.&lt;/p&gt;

&lt;p&gt;First things first, let me just put it out there. Nobody is really a &lt;em&gt;"self taught"&lt;/em&gt; developer, and at the same time, everyone is a &lt;em&gt;"self taught"&lt;/em&gt; developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-mean"&gt;
  &lt;/a&gt;
  What do I mean?
&lt;/h3&gt;

&lt;p&gt;For a person to label themselves a "self taught" developer, they basically mean they didn't do the conventional way of learning by going to college and attending lectures and doing assignments.&lt;/p&gt;

&lt;p&gt;The self taught path is more nuanced, an individual might have picked up a book and learned to code by reading the book. Somebody else might have watched a video course to learn to code. Someone else might have read the documentation, both official and unofficial.&lt;/p&gt;

&lt;p&gt;But all these were curated by people. So, even though you aren't directly interacting and learning from the people that wrote these docs or books or created the courses you are following, you are still being taught by somebody indirectly.&lt;/p&gt;

&lt;p&gt;And, on that note. &lt;strong&gt;Nobody can teach you everything&lt;/strong&gt;. Over time, you begin to build intuition and learn from the work you do and projects you build. You learn more from your mistakes and establish a stronger foundation and understanding of programming and its concepts from your experience.&lt;/p&gt;

&lt;p&gt;Not to mistake my opinions for facts, I believe that people shouldn't spend so much time learning the basics. Most of these you can find with a quick google search.&lt;/p&gt;

&lt;p&gt;The best way to learn how to code is to blaze through the basics of a language or framework. You don't have to completely understand everything or commit it to memory. Then get to building projects as fast as you can.&lt;/p&gt;

&lt;p&gt;You'll learn more from the mistakes you make, and you'll get to understand what all these basic concepts you are learning and might be seeing the point of are actually for.&lt;/p&gt;

&lt;p&gt;A lot of people early on in their journey are stuck on understanding what a loop does, or what an if statement is useful for in building apps and feel stuck. The fastest way to set unstuck is to get your hands dirty half baked and seeing things in action.&lt;/p&gt;

&lt;p&gt;This post started feeling like a rant, I think I made sense.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/JoeEverest165"&gt;twitter&lt;/a&gt;, I'm not fun but I try to be. üòé&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>100daysofcode</category>
      <category>tutorial</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Cancel fetch requests, and a way to abstract it</title>
      <author>Keff</author>
      <pubDate>Sun, 22 Aug 2021 17:52:15 +0000</pubDate>
      <link>https://dev.to/nombrekeff/cancel-fetch-requests-and-a-way-to-abstract-it-3gib</link>
      <guid>https://dev.to/nombrekeff/cancel-fetch-requests-and-a-way-to-abstract-it-3gib</guid>
      <description>&lt;p&gt;Working on another post/tutorial on &lt;strong&gt;fetch&lt;/strong&gt;, I found myself needing to cancel individual fetch requests. &lt;/p&gt;

&lt;p&gt;I investigated a bit, and learned about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController"&gt;AbortController&lt;/a&gt; (supported in all browsers, except... can you guess who? yeah, IE).&lt;/p&gt;

&lt;p&gt;Pretty neat stuff, let me show you how it's used, and I will explain it later on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#%C2%A0okay-now-let-me-break-that-down"&gt;
  &lt;/a&gt;
  ¬†Okay, now let me break that down
&lt;/h4&gt;

&lt;p&gt;First we define two functions that use &lt;code&gt;fetch&lt;/code&gt; to retrieve some data, they also receive a &lt;strong&gt;signal&lt;/strong&gt; argument (&lt;em&gt;explained a bit further&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we create an instance of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController"&gt;AbortController&lt;/a&gt;, this controller will allow us to get a &lt;strong&gt;signal&lt;/strong&gt; to pass to fetch, and it also gives us the option to cancel the request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we just pass the signal property of the controller, to both fetch requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal"&gt;signal&lt;/a&gt; thing?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Well, basically it's a &lt;strong&gt;mechanism to communicate with a DOM request&lt;/strong&gt;. Not directly though, a reference to the signal is passed to fetch, but, then abort using the controller, which internally interacts with the signal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As you can see we are passing in the same signal to both requests, this means if we abort on the current controller, it will cancel all ongoing requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally at any point after running fetch, we can cancel the request (if it's not yet completed):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: When &lt;code&gt;abort()&lt;/code&gt; is called, the &lt;code&gt;fetch()&lt;/code&gt; promise rejects with a &lt;code&gt;DOMException&lt;/code&gt; named &lt;code&gt;AbortError&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#but-wait"&gt;
  &lt;/a&gt;
  BUT WAIT
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What if we try to run &lt;code&gt;fetchTodos&lt;/code&gt; again, after aborting?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... previous code&lt;/span&gt;
&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we pass the &lt;strong&gt;same signal&lt;/strong&gt; it will &lt;strong&gt;instantly abort&lt;/strong&gt; the request. &lt;br&gt;
We would need to create a new controller and signal for the new request, becoming a bit tedious to add to each specific requests. &lt;/p&gt;

&lt;p&gt;Lets see the solution I found, by returning a custom object, and generating a signal for each request:&lt;/p&gt;

&lt;p&gt;The first thing we need is a class, that will wrap around the fetch promise and optionally the abort controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestPromise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CustomRequest expects "promise" argument to be a Promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Only check abort controller if passed in, otherwise ignore it&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CustomRequest expects "abortController" argument to be an AbortController&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestPromise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;CustomRequest&lt;/code&gt; behaves almost exactly like a promise, but we add some extra functionality in the form of the &lt;strong&gt;abort&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;Next, create a wrapper around fetch, called &lt;code&gt;abortableFetch&lt;/code&gt;, which will return a new &lt;strong&gt;CustomRequest&lt;/strong&gt; instead of the regular fetch promise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;abortableFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abortSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mergedOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;abortSignal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mergedOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us now change the original example, and apply the new fetch function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;abortableFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;abortableFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todosReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// We can now call abort on each individual requests&lt;/span&gt;
&lt;span class="nx"&gt;todosReq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;usersReq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#much-better-right"&gt;
  &lt;/a&gt;
  Much better right?
&lt;/h4&gt;

&lt;p&gt;We can even use is as a regular promise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todosReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;todosReq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(...).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to notice, you can still override the signal in case you want to controll all requests with the same signal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;abortableFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;globalSignal&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This signal will override the default one created in &lt;code&gt;abortableFetch&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-code"&gt;
  &lt;/a&gt;
  Complete code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestPromise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CustomRequest expects "promise" argument to be a Promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Only check abort controller if passed in, otherwise ignore it&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CustomRequest expects "abortController" argument to be an AbortController&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestPromise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;abortableFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abortSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mergedOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;abortSignal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mergedOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;abortController&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;abortableFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;abortableFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todosReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// We can now call abort on each individual requests&lt;/span&gt;
&lt;span class="nx"&gt;todosReq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;usersReq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Well, for me, this is another weird API, if I'm honest. It does the job, but could have been done better. That aside, we can do some stuff around it and improve our experience a bit. &lt;/p&gt;

&lt;p&gt;And to recap, in this post we've:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;seen how to cancel requests in the most simple way,&lt;/li&gt;
&lt;li&gt;detected some weird or tedious things, &lt;/li&gt;
&lt;li&gt;and finally built something on top of it to help us ease the process!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"&gt;fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController"&gt;AbortController&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal"&gt;AbortSignal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Another quick post, I was in a writing mode this weekend so... I hope you liked it, and found it usefull!&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#if-you-did-consider-supporting-me-by-reacting-to-the-post-following-me-here-or-over-on-github-or-commenting"&gt;
  &lt;/a&gt;
  If you did, consider supporting me by reacting to the post, following me here or over on &lt;a href="https://github.com/nombrekeff"&gt;GitHub&lt;/a&gt;, or commenting!
&lt;/h6&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>LEVEL UP! Boost your JavaScript skills, LVL 3</title>
      <author>DevCronin</author>
      <pubDate>Sun, 22 Aug 2021 17:16:00 +0000</pubDate>
      <link>https://dev.to/devcronin/level-up-boost-your-javascript-skills-lvl-3-4m83</link>
      <guid>https://dev.to/devcronin/level-up-boost-your-javascript-skills-lvl-3-4m83</guid>
      <description>&lt;h3&gt;
  &lt;a href="#in-this-blog-series-tutorial-i-will-be-covering-some-of-the-basic-javascript-programming-concepts"&gt;
  &lt;/a&gt;
  In this blog series tutorial, I will be covering some of the basic JavaScript programming concepts.
&lt;/h3&gt;

&lt;p&gt;This is geared toward beginners and anyone looking to refresh their knowledge.&lt;/p&gt;

&lt;p&gt;Level 3 will cover: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finding Remainder&lt;/li&gt;
&lt;li&gt;Compound Assignment Augmented Addition&lt;/li&gt;
&lt;li&gt;Compound Assignment Augmented Subtraction&lt;/li&gt;
&lt;li&gt;Compound Assignment Augmented Multiplication&lt;/li&gt;
&lt;li&gt;Compound Assignment Augmented Division&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#finding-remainder"&gt;
  &lt;/a&gt;
  Finding Remainder
&lt;/h2&gt;

&lt;p&gt;When dividing numbers that do not divide as a whole number, the remainder operator (%) can be used to find how much remains after the division.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let remainder = 13 % 2;

console.log(remainder);

// 1


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compound-assignment-augmented-addition"&gt;
  &lt;/a&gt;
  Compound Assignment Augmented Addition
&lt;/h2&gt;

&lt;p&gt;The compounded assignment uses the (+=) operator to do the mathematical operation and then assignment in one step. The mathematical operation to the right of the equal sign is always performed first and follows the order of operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let spellDamage = 10;
spellDamage += 5;

console.log(spellDamage); 

// 15

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compound-assignment-augmented-subtraction"&gt;
  &lt;/a&gt;
  Compound Assignment Augmented Subtraction
&lt;/h2&gt;

&lt;p&gt;Compounded assignments can also be used with augmented subtraction using the (-=) operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let hitPoints = 20; 
hitPoints -= 5;

console.log(hitPoints); 

// 15

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compound-assignment-augmented-multiplication"&gt;
  &lt;/a&gt;
  Compound Assignment Augmented Multiplication
&lt;/h2&gt;

&lt;p&gt;By using the (*=) operator we can use compounded assignment for augmented multiplication.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var criticalHit = 2;
criticalHit *= 10;

console.log(criticalHit);

 // 20

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compound-assignment-augmented-division"&gt;
  &lt;/a&gt;
  Compound Assignment Augmented Division
&lt;/h2&gt;

&lt;p&gt;By using the (/=) operator we can use compounded assignment for augmented division.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var moveSpeed = 30; 
moveSpeed /= 2; 

console.log(moveSpeed);

// 15

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-my-blog-this-is-the-third-of-my-series-on-javascript-so-if-you-would-like-to-read-more-please-follow"&gt;
  &lt;/a&gt;
  Thank you for reading my blog! This is the third of my series on JavaScript so if you would like to read more, please follow!
&lt;/h3&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support-and-buy-me-a-coffee"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.buymeacoffee.com/ZachCronin"&gt;&lt;strong&gt;Support and Buy me a Coffee&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using Docker for Slim 4 application development environment </title>
      <author>Cherif BOUCHELAGHEM</author>
      <pubDate>Sun, 22 Aug 2021 16:59:59 +0000</pubDate>
      <link>https://dev.to/cherif_b/using-docker-for-slim-4-application-development-environment-1opm</link>
      <guid>https://dev.to/cherif_b/using-docker-for-slim-4-application-development-environment-1opm</guid>
      <description>&lt;p&gt;In the first part of the series we write a small Slim 4 application to know how the framework works, however in real world applications we need to know how to deal with more complicated problems instead of printing a message on a web page.&lt;/p&gt;

&lt;p&gt;I believe, as software developers we need to prepare the work environment first and because we have a number of environments where the code we wrote will be running we need to be sure that those environment characteristics are common to minimize the number of surprises.&lt;/p&gt;

&lt;p&gt;Also, as team members, having the same development environment could be helpful to ensure we are all having the same results without any impact from the local environment.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; can help to achieve those goals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-docker-directory"&gt;
  &lt;/a&gt;
  Create docker directory
&lt;/h2&gt;

&lt;p&gt;Create a new directory named &lt;code&gt;docker&lt;/code&gt;, this directory will contain Docker containers definitions and doesn‚Äôt have to be named &lt;code&gt;docker&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#define-a-php-74-container"&gt;
  &lt;/a&gt;
  Define a PHP 7.4 container
&lt;/h2&gt;

&lt;p&gt;1- Inside the &lt;code&gt;docker&lt;/code&gt; directory, add a new subdirectory named &lt;code&gt;php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; docker/php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2- Create a new &lt;code&gt;Dockerfile&lt;/code&gt; (yes without extension) file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;docker/php/Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the php Dockerfile and add the following instructions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4-fpm&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; zlib1g-dev g++ git libicu-dev zip libzip-dev zip libpq-dev &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-php-ext-configure pgsql &lt;span class="nt"&gt;-with-pgsql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/pgsql &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-php-ext-install intl opcache pdo pdo_pgsql &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pecl &lt;span class="nb"&gt;install &lt;/span&gt;apcu &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-php-ext-enable apcu &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-php-ext-configure zip &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-php-ext-install zip

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /var/www/slim_app&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://getcomposer.org/installer | php &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--install-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin &lt;span class="nt"&gt;--filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composer

&lt;span class="k"&gt;RUN &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"you@example.com"&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Your Name"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Make sure to replace git credentials in the last two lines with your git credentials&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The instructions above will scaffold a PHP container from a &lt;code&gt;PHP 8 FPM&lt;/code&gt; image and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install PHP extension that our Slim application depends on&lt;/li&gt;
&lt;li&gt;Sets the working directory of the container to  &lt;code&gt;/var/www/slim_app&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install composer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#define-a-nginx-web-server-container"&gt;
  &lt;/a&gt;
  Define a NGINX web server container
&lt;/h2&gt;

&lt;p&gt;Unlike the PHP image, only NGINX default configuration is needed inside a subdirectory in &lt;code&gt;docker&lt;/code&gt; directory:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-new-raw-nginx-endraw-directory"&gt;
  &lt;/a&gt;
  Add new &lt;code&gt;nginx&lt;/code&gt; directory:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; docker/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-the-default-configuration-file"&gt;
  &lt;/a&gt;
  Add the default configuration file:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;docker/nginx/default.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit &lt;code&gt;docker/nginx/default.conf&lt;/code&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {

    listen 80;
    index index.php;
    server_name localhost;
    root /var/www/slim_app/public;
    error_log /var/log/nginx/project_error.log;
    access_log /var/log/nginx/project_access.log;

    location / {
        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/index\\.php(/|$) {
        fastcgi_pass php:9000;
        fastcgi_split_path_info ^(.+\\.php)(/.*)$;
        include fastcgi_params;

        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;

        internal;
    }

    location ~ \\.php$ {
        return 404;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simplest NGINX required configuration  to run a PHP application, note that it maps &lt;code&gt;fastcgi_pass&lt;/code&gt; to port 9000 in the PHP container we defined previously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-compose-the-containers-images"&gt;
  &lt;/a&gt;
  Let‚Äôs compose the containers images
&lt;/h2&gt;

&lt;p&gt;To use the PHP and NGINX defined containers we need to create &lt;code&gt;docker-composer.yml&lt;/code&gt; in the root folder of the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;slim_php&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./docker/php&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;9000:9000'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/var/www/slim_app&lt;/span&gt;

  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;slim_nginx&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx:stable-alpine&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8080:80'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/var/www/slim_app&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;php&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let see what we have here for the &lt;strong&gt;PHP container&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unlike the NGINX container configuration, PHP container doesn‚Äôt have an image key but a build context in order to use the &lt;code&gt;docker/php/Dockerfile&lt;/code&gt; to build the container.&lt;/li&gt;
&lt;li&gt;Port 9000 of the computer is mapped to 9000 of the container&lt;/li&gt;
&lt;li&gt;Volumes is declared to store the data generated by the container, in the case of this example it will store the Slim application code in the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For NGINX&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nginx:stable-alpine will be pulled from the &lt;a href="https://hub.docker.com/"&gt;docker-hub&lt;/a&gt; to build the container.&lt;/li&gt;
&lt;li&gt;The port 8080 of the computer is mapped to port 80 of the container.&lt;/li&gt;
&lt;li&gt;Declare the required volumes to persist the NGINX default configuration file and the PHP code for the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#build-the-containers"&gt;
  &lt;/a&gt;
  Build the containers
&lt;/h2&gt;

&lt;p&gt;Run the following command to build the containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose up -d --build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once containers are successfully built the terminal should print message like the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Udi8nFsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxbmngbm47eqtpb6ximi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Udi8nFsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxbmngbm47eqtpb6ximi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make sure that the containers are up and running open the Docker Desktop app, it should shows that the containers are running like in the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6tGVTf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6aqwlt7ob89u8rsg39q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6tGVTf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6aqwlt7ob89u8rsg39q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is possible to use the command line to know the status of the containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Should print something like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zB4ld9go--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsfyvi2ufdcpc1oidwma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zB4ld9go--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsfyvi2ufdcpc1oidwma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if you visit the URL &lt;code&gt;localhost:8080&lt;/code&gt;, put the port you configured for NGINX, should run the Slim application we built in the first part.&lt;/p&gt;

&lt;p&gt;GitHub repository has the code in this part in &lt;a href="https://github.com/cherifGsoul/slim-from-scratch/tree/development-environment-part-2"&gt;development-environment-part-2&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>slim</category>
      <category>php</category>
      <category>routing</category>
      <category>docker</category>
    </item>
    <item>
      <title>Optimizing Immutable Strings in Rust</title>
      <author>Basti Ortiz</author>
      <pubDate>Sun, 22 Aug 2021 16:53:06 +0000</pubDate>
      <link>https://dev.to/somedood/optimizing-immutable-strings-in-rust-2ahj</link>
      <guid>https://dev.to/somedood/optimizing-immutable-strings-in-rust-2ahj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#an-aversion-to-clones-and-heap-allocations"&gt;
  &lt;/a&gt;
  An Aversion to Clones and Heap Allocations
&lt;/h2&gt;

&lt;p&gt;Rust, Go, and C++ programmers alike have a particular aversion to heap allocations and cloned data. As much as possible, variables are allocated locally (in the stack) so that there is no need for &lt;em&gt;extra&lt;/em&gt; dynamic memory.&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; In other words, we often go above and beyond to ensure that we only allocate when &lt;em&gt;absolutely&lt;/em&gt; necessary.&lt;/p&gt;

&lt;p&gt;In fact, C++ makes further optimizations by utilizing compile-time language features that allow instructions to be evaluated and inlined beforehand. This results in a program that is no longer required to execute certain instructions during runtime. A notable example is the &lt;a href="https://stackoverflow.com/questions/10315041/meaning-of-acronym-sso-in-the-context-of-stdstring/10319672#10319672"&gt;small-string optimization&lt;/a&gt;, where "small strings" are inlined to avoid dynamic memory allocations altogether.&lt;/p&gt;

&lt;p&gt;Similarly, cloning data is often a last resort. Consider an image which can be represented as some arbitrary array of bytes. If one were to clone said image, this would certainly be expensive. This leads us to prefer &lt;strong&gt;reference semantics&lt;/strong&gt; over &lt;strong&gt;value semantics&lt;/strong&gt;. That is, we often pass objects &lt;em&gt;by reference&lt;/em&gt; rather than &lt;em&gt;by value&lt;/em&gt; if ownership cannot be transferred. Indeed, copying a pointer/reference is surely cheaper than copying an entire array of bytes.&lt;/p&gt;

&lt;p&gt;Thus, there is one function in particular that Rustaceans admittedly hate to see the most:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Suppose we have an image...&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_image_bytes_from_somewhere&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c"&gt;// Every Rustacean's kryptonite...&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cloned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That one line of code alone sends shivers down the spine. Although there are some cases when cloning is truly necessary, it is nevertheless an unpleasant sight to behold.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss certain ways to optimize the way we allocate and clone data in &lt;em&gt;immutable&lt;/em&gt; contexts. Throughout this article, we will be using the &lt;code&gt;String&lt;/code&gt; type as a particular example, but &lt;em&gt;please do keep in mind that the concepts are generally applicable elsewhere&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-in-multithreaded-contexts"&gt;
  &lt;/a&gt;
  An Example in Multithreaded Contexts
&lt;/h2&gt;

&lt;p&gt;Suppose we find ourselves in a situation where we have to share an &lt;em&gt;immutable&lt;/em&gt; string across multiple threads as part of a runtime configuration. For instance, perhaps this may be a file name, a username, or an argument flag. A &lt;del&gt;painfully&lt;/del&gt; naive way to accomplish this is to simply clone the string for each thread.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JoinHandle&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;// Runtime configuration from somewhere...&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_username&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c"&gt;// Spawn ten threads&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;handles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// NOTE: `username` is captured by reference here.&lt;/span&gt;
        &lt;span class="c"&gt;// That is, `String::clone(&amp;amp;username)`. Observe that&lt;/span&gt;
        &lt;span class="c"&gt;// obtaining a reference is sufficient for cloning&lt;/span&gt;
        &lt;span class="c"&gt;// the **entire** string.&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cloned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c"&gt;// Here, we move the owned clone of the `username`.&lt;/span&gt;
        &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello {} from Thread #{}!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cloned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c"&gt;// Join all the threads&lt;/span&gt;
&lt;span class="n"&gt;handles&lt;/span&gt;&lt;span class="nf"&gt;.into_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;.try_for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;JoinHandle&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to join all threads"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though, we can definitely do better than this. Instead of cloning the &lt;code&gt;String&lt;/code&gt; and its contents, why not just use a &lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"&gt;&lt;code&gt;std::sync::Arc&lt;/code&gt;&lt;/a&gt; instead? That way, we're only cloning the &lt;em&gt;smart pointer&lt;/em&gt; to the &lt;code&gt;String&lt;/code&gt; rather than the &lt;code&gt;String&lt;/code&gt; contents itself. Indeed, a similar solution is given in the &lt;a href="https://doc.rust-lang.org/book/title-page.html"&gt;Rust Book's&lt;/a&gt; chapter on &lt;a href="https://doc.rust-lang.org/book/ch16-00-concurrency.html"&gt;"Fearless Concurrency"&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;
    &lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JoinHandle&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;// Observe that we now wrap the string in an `Arc`.&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get_username&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c"&gt;// Spawn ten threads again&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;handles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Here, we are explicitly cloning the smart pointer,&lt;/span&gt;
        &lt;span class="c"&gt;// not the `String` itself. Note that it is possible to&lt;/span&gt;
        &lt;span class="c"&gt;// write `username.clone()` instead, but that may be ambiguous&lt;/span&gt;
        &lt;span class="c"&gt;// to readers of this code. It is best to explicitly&lt;/span&gt;
        &lt;span class="c"&gt;// invoke the `Clone` implementation for `Arc`.&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cloned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c"&gt;// We now move the cloned smart pointer to the thread.&lt;/span&gt;
        &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello {} from Thread #{}!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cloned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c"&gt;// Join all the threads again&lt;/span&gt;
&lt;span class="n"&gt;handles&lt;/span&gt;&lt;span class="nf"&gt;.into_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;.try_for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;JoinHandle&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to join all threads"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#some-subtle-inefficiencies"&gt;
  &lt;/a&gt;
  Some Subtle Inefficiencies
&lt;/h3&gt;

&lt;p&gt;This improvement is much better, but there seems to be something strange about an &lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt;. Since &lt;code&gt;Arc&lt;/code&gt; is a smart pointer, we know that it implements &lt;a href="https://doc.rust-lang.org/std/ops/trait.Deref.html"&gt;&lt;code&gt;std::ops::Deref&lt;/code&gt;&lt;/a&gt;. In this case, the &lt;code&gt;Deref::Target&lt;/code&gt; is &lt;code&gt;String&lt;/code&gt;. But, we know that &lt;code&gt;String&lt;/code&gt; also implements &lt;code&gt;Deref&lt;/code&gt;, where &lt;code&gt;Deref::Target&lt;/code&gt; is the primitive type &lt;code&gt;str&lt;/code&gt;. Therefore, in order to use the underlying &lt;code&gt;str&lt;/code&gt;, we have to go through two levels of &lt;code&gt;Deref&lt;/code&gt; indirection!&lt;/p&gt;

&lt;p&gt;It must be noted, however, that the compiler &lt;em&gt;may&lt;/em&gt; optimize the double indirection, but the same cannot be said about memory usage. Recall that all pointer types that hold &lt;a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"&gt;&lt;code&gt;Sized&lt;/code&gt;&lt;/a&gt; targets have the &lt;a href="https://doc.rust-lang.org/std/mem/fn.size_of.html"&gt;same size as a &lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;. In 64-bit targets, that is worth 8 bytes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; From here on out, I will be assuming 64-bit targets when computing pointer sizes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since &lt;code&gt;String&lt;/code&gt; is a &lt;code&gt;Sized&lt;/code&gt; type, &lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt; is actually just the size of a pointer. Indeed, at least in terms of size, the &lt;code&gt;Arc&lt;/code&gt; smart pointer is a "zero-cost abstraction" over a regular pointer. But, let us not forget that &lt;code&gt;Arc&lt;/code&gt; is actually a pointer to some heap allocation. In this case, it points to a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As of writing (&lt;a href="https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html"&gt;Rust 1.54&lt;/a&gt;), we know that &lt;a href="https://github.com/rust-lang/rust/blob/1.54.0/library/alloc/src/string.rs#L292-L294"&gt;a &lt;code&gt;String&lt;/code&gt; is essentially a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;&lt;/a&gt;, where the bytes just happen to be valid UTF-8. Furthermore, a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt; is composed of &lt;a href="https://github.com/rust-lang/rust/blob/1.54.0/library/alloc/src/vec/mod.rs#L396-L399"&gt;two fields&lt;/a&gt;: an internal &lt;code&gt;RawVec&lt;/code&gt; and the &lt;code&gt;length&lt;/code&gt; of the stored data. A &lt;a href="https://github.com/rust-lang/rust/blob/1.54.0/library/alloc/src/raw_vec.rs#L52-L56"&gt;&lt;code&gt;RawVec&lt;/code&gt;&lt;/a&gt; is just an internal wrapper over the &lt;code&gt;capacity&lt;/code&gt; and the underlying pointer to the data buffer.&lt;/p&gt;

&lt;p&gt;Therefore, a &lt;code&gt;String&lt;/code&gt; is actually worth three pointers: an integer &lt;code&gt;length&lt;/code&gt; (&lt;code&gt;usize&lt;/code&gt;), an integer &lt;code&gt;capacity&lt;/code&gt; (&lt;code&gt;usize&lt;/code&gt;), and a data pointer (&lt;code&gt;usize&lt;/code&gt;). In total, that is worth 24 bytes!&lt;/p&gt;

&lt;p&gt;Putting it all together, an &lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt; is an 8-byte smart pointer to a 24-byte heap-allocated &lt;code&gt;String&lt;/code&gt; (of some &lt;code&gt;capacity&lt;/code&gt;) which dereferences to a heap-allocated &lt;code&gt;str&lt;/code&gt; (of some &lt;code&gt;length &amp;lt;= capacity&lt;/code&gt;). In other words, an &lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt; is actually worth 32 bytes plus the underlying &lt;code&gt;str&lt;/code&gt; allocation of &lt;code&gt;capacity&lt;/code&gt; bytes.&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// The total memory used is `8 + 24 + 11 = 43` bytes!&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c"&gt;// Here, we dereference the variable to verify how much&lt;/span&gt;
&lt;span class="c"&gt;// memory is used by each level of indirection.&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;size_of_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;dbg!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;size_of_val&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c"&gt;// 8&lt;/span&gt;
&lt;span class="nd"&gt;dbg!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;size_of_val&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;      &lt;span class="c"&gt;// 24&lt;/span&gt;
&lt;span class="nd"&gt;dbg!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;size_of_val&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;         &lt;span class="c"&gt;// 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-advantage-of-immutability"&gt;
  &lt;/a&gt;
  Taking Advantage of Immutability
&lt;/h3&gt;

&lt;p&gt;Phew! That was a lot to take in, but I hope I have demonstrated that the double indirection and the &lt;code&gt;Vec&lt;/code&gt; overhead is quite considerable for an immutable string. So... how do we fix this?&lt;/p&gt;

&lt;p&gt;First and foremost, we have to address the double indirection. As demonstrated earlier, a pointer to a pointer to a &lt;code&gt;str&lt;/code&gt; is not exactly the most efficient way to handle our use case.&lt;/p&gt;

&lt;p&gt;The first key insight comes from the fact that we assumed that the &lt;code&gt;str&lt;/code&gt; must be &lt;em&gt;immutable&lt;/em&gt;. That is, we don't actually need the mutation methods provided by &lt;code&gt;String&lt;/code&gt;. If we can somehow interact with the underlying &lt;code&gt;str&lt;/code&gt; of the &lt;code&gt;String&lt;/code&gt; instead, we can eliminate the double indirection entirely. Luckily, &lt;code&gt;Arc&lt;/code&gt; allows us to do just that! Recall that &lt;a href="https://github.com/rust-lang/rust/blob/1.54.0/library/alloc/src/sync.rs#L2346-L2363"&gt;&lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;/code&gt; implements &lt;code&gt;From&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; This conversion is sufficient for our use case.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Retrieve the string from somwhere...&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_string_from_somwhere&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c"&gt;// Here, we "consume" the `String` wrapper&lt;/span&gt;
&lt;span class="c"&gt;// as a smart pointer to a `str`. Alternatively,&lt;/span&gt;
&lt;span class="c"&gt;// we may invoke the `Arc::from` syntax.&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;owned_reference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="nf"&gt;.into&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nd"&gt;todo!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spawn threads here"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's pretty much it! Now, when we clone the smart pointer across multiple threads, we're simply cloning the direct pointer to the underlying &lt;code&gt;str&lt;/code&gt;‚Äîno more double indirection!&lt;/p&gt;

&lt;p&gt;Analyzing the memory usage, we find that &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;/code&gt; is worth 16 bytes. But wait... wasn't &lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt; just 8 bytes? Yes, it was! This is because &lt;code&gt;String&lt;/code&gt; is &lt;code&gt;Sized&lt;/code&gt;. As mentioned earlier, all pointers to &lt;code&gt;Sized&lt;/code&gt; types are worth 8 bytes (a single pointer).&lt;/p&gt;

&lt;p&gt;Meanwhile, recall that a pointer to a &lt;a href="https://doc.rust-lang.org/nomicon/exotic-sizes.html#dynamically-sized-types-dsts"&gt;dynamically sized type&lt;/a&gt; (such as a &lt;code&gt;str&lt;/code&gt;) is actually a &lt;strong&gt;wide pointer&lt;/strong&gt;. That is, they contain much more information than just a plain pointer. In this case, a &lt;code&gt;&amp;amp;str&lt;/code&gt;, &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt;, &lt;code&gt;Rc&amp;lt;str&amp;gt;&lt;/code&gt;, &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;/code&gt;, or any other pointer-like wrapper to a &lt;code&gt;str&lt;/code&gt; is worth 16 bytes because they internally contain a direct pointer to the &lt;code&gt;str&lt;/code&gt; allocation (&lt;code&gt;usize&lt;/code&gt;) and its length (&lt;code&gt;usize&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Yes, this does mean that subsequent clones of the wide pointer is now twice as large as those of a regular pointer, but it does allow us to work around the double indirection issue. Consequently, the wide pointer is all we need to refer to the &lt;code&gt;str&lt;/code&gt;‚Äîno &lt;em&gt;extra&lt;/em&gt; heap allocations required! Another neat side effect is that excess capacity is also removed, thus enabling more efficient memory utilization.&lt;/p&gt;

&lt;p&gt;In summary, the &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;/code&gt; is only worth 16 bytes plus the &lt;code&gt;length&lt;/code&gt; of the &lt;code&gt;str&lt;/code&gt;, whereas the &lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt; (with double indirection) is worth 32 bytes plus the &lt;code&gt;length&lt;/code&gt; of the &lt;code&gt;str&lt;/code&gt; plus the &lt;em&gt;excess&lt;/em&gt; &lt;code&gt;capacity&lt;/code&gt; (if any). Those are significant savings if I do say so myself!&lt;/p&gt;

&lt;p&gt;Therefore, &lt;em&gt;if mutability is &lt;strong&gt;not&lt;/strong&gt; necessary, then perhaps an owned &lt;code&gt;str&lt;/code&gt; reference may be a worthwhile optimization.&lt;/em&gt; The same also applies for &lt;code&gt;[u8]&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt;, &lt;code&gt;CStr&lt;/code&gt;, and other slice-like types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NItcXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11ggfjhfbijl8pvpm5t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NItcXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11ggfjhfbijl8pvpm5t4.png" alt="Double Indirection Illustration"&gt;&lt;/a&gt;&lt;/p&gt;
This is not an accurate figure, but it's meant to roughly illustrate the optimization.



&lt;h2&gt;
  &lt;a href="#an-applied-example-with-hash-maps"&gt;
  &lt;/a&gt;
  An Applied Example with Hash Maps
&lt;/h2&gt;

&lt;p&gt;Switching gears, let us consider a different example where we maintain a table of usernames and coins (represented by integers). The table is essentially a mapping between an &lt;em&gt;immutable&lt;/em&gt; username and the amount of coins in their wallet.&lt;/p&gt;

&lt;p&gt;A straightforward implementation makes use of &lt;a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html"&gt;&lt;code&gt;std::collections::HashMap&lt;/code&gt;&lt;/a&gt;. Instinctively, we first reach out to &lt;code&gt;HashMap&amp;lt;String, u16&amp;gt;&lt;/code&gt; as the initial type signature. But, since the usernames are &lt;em&gt;immutable&lt;/em&gt;, it is possible to remove the &lt;code&gt;String&lt;/code&gt; abstraction altogether. In code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;repeat_with&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;generate_username&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;todo!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"generate string-coins pairs somehow"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// This results in a `HashMap&amp;lt;Box&amp;lt;str&amp;gt;, u16&amp;gt;`.&lt;/span&gt;
&lt;span class="c"&gt;// Observe the the key-type is a `Box&amp;lt;str&amp;gt;` instead&lt;/span&gt;
&lt;span class="c"&gt;// of the typical `String` wrapper.&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;repeat_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generate_username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="nf"&gt;.into_boxed_str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, at some point, the Rust compiler &lt;a href="https://users.rust-lang.org/t/use-case-for-box-str-and-string/8295/4"&gt;used this optimization&lt;/a&gt; to efficiently keep track of a table of immutable symbols in code. Shown below is a &lt;a href="https://github.com/rust-lang/rust/blob/cc74068642d288534df0d6c2a454663920c5e97d/src/libsyntax/symbol.rs#L82-L85"&gt;code snippet&lt;/a&gt; where this occurs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Interner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Immutability is a wonderful thing! It enables a multitude of valuable optimizations and assumptions about the code we write. In the first place, immutability is the only reason why it was possible to "dissolve" the &lt;code&gt;String&lt;/code&gt; wrapper in the examples above. Really, the &lt;code&gt;String&lt;/code&gt; wrapper only exists to provide an interface for "resizable" strings‚Äîthat is, via &lt;a href="https://doc.rust-lang.org/std/string/struct.String.html#method.push"&gt;&lt;code&gt;String::push&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, when mutability is not necessary, the &lt;code&gt;String&lt;/code&gt; wrapper frankly provides nothing more than accidental overhead. For the &lt;em&gt;relatively&lt;/em&gt; cheap cost of a mandatory wide pointer, the immutable &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;/code&gt; gains access to the following optimizations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Direct&lt;/strong&gt; ownership over the &lt;code&gt;str&lt;/code&gt; primitive.&lt;/li&gt;
&lt;li&gt;No more double indirection.&lt;/li&gt;
&lt;li&gt;No more excess capacity.&lt;/li&gt;
&lt;li&gt;No more &lt;em&gt;extra&lt;/em&gt; heap allocations.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lower memory usage overall.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same can be said about &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; (for some type &lt;code&gt;T&lt;/code&gt;), which appropriately wraps a slice &lt;code&gt;[T]&lt;/code&gt;. In fact, there exists a plethora of such wrapper types: namely those for &lt;a href="https://doc.rust-lang.org/std/path/struct.Path.html"&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/std/ffi/struct.CStr.html"&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt;, and many other slice-like types.&lt;/p&gt;

&lt;p&gt;Perhaps the most valuable lesson to be learned here is to know your types. Sure, Rust claims "zero-cost abstractions", but this does not mean we should keep our guard down from possible ways to further optimize our programs.&lt;/p&gt;

&lt;p&gt;As illustrated earlier, a closer look into the abstractions may reveal its unnecessary cost. Thus, it is paramount to keenly recognize and properly assess the constraints of our use cases. In doing so, we may even inadvertently stumble upon aggressive optimizations that let us make the most out of our computer resources.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Dynamic memory is inherently less predictable since its behavior can only be determined at runtime. An example would be user input. There is no way for the compiler to predict and optimize for the plethora of ways a user may input a string. The best a program can do is to allocate memory dynamically (based on the &lt;em&gt;potential&lt;/em&gt; size of the input) and to resize accordingly. Such behavior cannot be done and optimized at compile-time. Though, it is possible to allocate a "fixed budget" for the string, which may allow for some optimizations. Generally speaking, however, this is not the most flexible option.¬†&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;Just to be &lt;em&gt;extra&lt;/em&gt; sure, I verified this with &lt;a href="https://godbolt.org/"&gt;Compiler Explorer&lt;/a&gt; using &lt;code&gt;rustc 1.54&lt;/code&gt;. The compiler flags were &lt;code&gt;--edition 2018&lt;/code&gt; and &lt;code&gt;-O&lt;/code&gt; (for optimization). Without loss of generality, I hard-coded the 11-byte string &lt;code&gt;"Hello World"&lt;/code&gt;. Indeed, the produced assembly allocates 11 bytes for the &lt;code&gt;str&lt;/code&gt;, 24 bytes for the &lt;code&gt;String&lt;/code&gt;, and 8 bytes for the &lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt; smart pointer.¬†&lt;a href="#fnref2"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;Technically, the &lt;code&gt;From&amp;lt;String&amp;gt;&lt;/code&gt; implementation just dereferences the string and copies the underlying &lt;code&gt;str&lt;/code&gt; into the &lt;code&gt;Arc&lt;/code&gt; allocation. Therefore, the real magic happens at the &lt;a href="https://github.com/rust-lang/rust/blob/1.54.0/library/alloc/src/sync.rs#L2327-L2344"&gt;&lt;code&gt;From&amp;lt;&amp;amp;str&amp;gt;&lt;/code&gt; implementation&lt;/a&gt;.¬†&lt;a href="#fnref3"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>rust</category>
      <category>performance</category>
      <category>tips</category>
    </item>
    <item>
      <title>Create An IMDB Web Scraper Using JS</title>
      <author>Asif</author>
      <pubDate>Sun, 22 Aug 2021 16:52:06 +0000</pubDate>
      <link>https://dev.to/labib/create-an-imdb-web-scraper-using-js-3k0f</link>
      <guid>https://dev.to/labib/create-an-imdb-web-scraper-using-js-3k0f</guid>
      <description>&lt;p&gt;Web scrapping is the process of using bot to get data from a specific website, unlike screen scraping, which only copies pixels of screen, the web scraping extracts the underlying HTML data of a link of a website, including the data from the database that the link provides.So, is this technology using legal? The short answer is &lt;strong&gt;yes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This thing may be a challenging task if you try to scrap data from a dynamic webpage. But as a beginner, we will try a static page for scraping.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-a-scraper-and-a-crawler"&gt;
  &lt;/a&gt;
  Difference Between A Scraper and A Crawler:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKRSbmgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4vos72nd13fjrqm3uy1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKRSbmgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4vos72nd13fjrqm3uy1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A crawler simply goes every link and page of the website rather than a subset of the page. On the other hand, web scraper focuses on a specific set of data of a website. So in short, Web scraping has a much more focused approach and purpose while Web crawler will scan and extract all data of a website&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-will-we-extract-"&gt;
  &lt;/a&gt;
  What Will We Extract ?
&lt;/h1&gt;

&lt;p&gt;so, our victim page is &lt;strong&gt;IMDB.com&lt;/strong&gt;. Now you are thinking, isn't IMDB a dynamic webpage? yes it is, but we are not scraping the whole website, we are just extract a specific product link's data. Like this link &lt;a href="https://www.imdb.com/chart/top/?ref_=nv_mv_250"&gt;&lt;strong&gt;IMDB.com/top-movies&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ILRCqsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rtssrh0i7kqj6t8ar9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ILRCqsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rtssrh0i7kqj6t8ar9r.png" alt="IMDB"&gt;&lt;/a&gt;&lt;br&gt;IMDB top movies page which shows the top 250 rated movies
 &lt;/p&gt;

&lt;p&gt;So, our goal is to extract the movie names and the ratings and save this to a  TXT or &lt;a href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;CSV&lt;/a&gt; file.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-1-the-setup-"&gt;
  &lt;/a&gt;
  Step 1. The setup :
&lt;/h1&gt;

&lt;p&gt;So, for scraping, we need three packages to start the project. Just paste the code below and install the packages into your &lt;code&gt;node_modules&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i cheerio fs request
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://cheerio.js.org/"&gt;&lt;strong&gt;cheerio&lt;/strong&gt;&lt;/a&gt; helps us to parse HTML in nodeJS. It's an affective and powerful technology used in webscraping in sever side implementation.&lt;br&gt;
The FS module should be pre-installed in the &lt;code&gt;node_modules&lt;/code&gt; if &lt;br&gt;
you previously used &lt;code&gt;npm init&lt;/code&gt; command.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-2-requesting-to-the-web-"&gt;
  &lt;/a&gt;
  Step 2. Requesting To The WEB :
&lt;/h1&gt;

&lt;p&gt;We will use the request package to send and receive requests to a website.First of all, we will import all the three previously install packages using the &lt;code&gt;require("packagename")&lt;/code&gt; syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cheerio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we will define a new constant &lt;code&gt;URL&lt;/code&gt; to store our website link.&lt;br&gt;
Now we will create a &lt;code&gt;request&lt;/code&gt; function. A request function which assigns 2 parameters. One is the URL you want to send request, the other is like a callback function with three parameters : &lt;code&gt;error&lt;/code&gt; , &lt;code&gt;response&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.imdb.com/chart/top/?ref_=nv_mv_250&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// website URL for sending request&lt;/span&gt;

&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// if something gets wrong&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request sent successfully ! &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, if the URL is broken / invalid or the website server gave a "404 error" we should return err using the conditional handling method. And if you see the message in the line, that means that your request is successful .&lt;/p&gt;

&lt;p&gt;Now we have to use the body to extract the data. so We create another function named as &lt;code&gt;parseBody&lt;/code&gt; with a single parameter for parsing the body.&lt;/p&gt;

&lt;p&gt;Here's the request code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.imdb.com/chart/top/?ref_=nv_mv_250&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// website URL for sending request&lt;/span&gt;

&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// if something gets wrong&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;parseBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-parsing-the-body-"&gt;
  &lt;/a&gt;
  3. Parsing the Body :
&lt;/h1&gt;

&lt;p&gt;Now, the fun part begins. The parsing or extracting the inner data from the HTML code we got from the request. We will be using &lt;code&gt;cheerio&lt;/code&gt; to parse the HTML. &lt;/p&gt;

&lt;p&gt;In this Blog, we will use only the basics of the &lt;code&gt;cheerio&lt;/code&gt; package. If you want to know in depth. visit &lt;a href="https://cheerio.js.org/"&gt;cheerio.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lets create the &lt;code&gt;parseBody&lt;/code&gt; function to play with the html body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// return the whole html body of the page&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here  in &lt;code&gt;parseBody&lt;/code&gt;, we load the request body to the cheerio module using the &lt;code&gt;.load&lt;/code&gt; function.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-inspecting-the-element-you-want-to-extract-"&gt;
  &lt;/a&gt;
  4. Inspecting The Element You Want To Extract :
&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href="https://www.imdb.com/chart/top/?ref_=nv_mv_250"&gt;IMDB&lt;/a&gt; and open the inspect tab. now navigate the HTML element you want to extract. Here, we are going to get the movie name including the ratings.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJmcanTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwdo675dll9s1gjn577s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJmcanTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwdo675dll9s1gjn577s.png" alt="IMDB inspect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will select the item of the &lt;code&gt;class&lt;/code&gt; attributes. &lt;/p&gt;

&lt;p&gt;so, back to the code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movieName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tbody.lister-list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td.titleColumn &amp;gt; a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;movieName&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;cheerio's selector is something similiar to jquery. You can put the class name, ID , and also other attributes.&lt;/p&gt;

&lt;p&gt;This will return all the text elements where their className included &lt;code&gt;titleColumn&lt;/code&gt;. We did it like a charm, but the names are returned all-together. Like this : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ozztao6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e5enk5bvku8g5qkzdzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ozztao6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e5enk5bvku8g5qkzdzl.png" alt="titleName"&gt;&lt;/a&gt;&lt;br&gt;
But we don't want this, we want it to create multiple objects that contain the value of the &lt;code&gt;titleName&lt;/code&gt; and put it in an array.&lt;/p&gt;

&lt;p&gt;To do this, we have to use the &lt;code&gt;.each&lt;/code&gt; method of the &lt;code&gt;cheerio&lt;/code&gt; package. It simply do a loop with the same name of the elements,&lt;/p&gt;

&lt;p&gt;Here the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so , lets put the &lt;code&gt;each&lt;/code&gt; method to our code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movieName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tbody.lister-list &amp;gt; tr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td.titleColumn &amp;gt; a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it will do a loop and return all the &lt;code&gt;td&lt;/code&gt; element and put this on an object that will return later.&lt;/p&gt;

&lt;p&gt;The result is : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_9JZAez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfxm7rb4he6j0mk4033c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_9JZAez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfxm7rb4he6j0mk4033c.png" alt="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, lets put the rating with and &lt;code&gt;push&lt;/code&gt; the objects to a specific variable. &lt;/p&gt;

&lt;p&gt;The final code would be :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cheerio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// importing the modules&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.imdb.com/chart/top/?ref_=nv_mv_250&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// the url we want to scrap&lt;/span&gt;

&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;parseBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// calls the function with body&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// sending request to the url or the webpage&lt;/span&gt;



&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// cheerio loads the HTML body&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tbody.lister-list &amp;gt; tr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td.titleColumn &amp;gt; a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// the name of the movie&lt;/span&gt;
      &lt;span class="na"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;td.ratingColumn &amp;gt; strong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// the rating of the movie&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;result would be : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWZpHqBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyhx28as0ff26xmfoff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWZpHqBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyhx28as0ff26xmfoff.png" alt="Final Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To remove the &lt;code&gt;150 more items...&lt;/code&gt; (that will show at the end), just simply replace the &lt;code&gt;console.log(array)&lt;/code&gt; to :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;maxArrayLength&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you :) :) &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
