<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I created this CSS Gradient Editor in Vue, what do you think?</title>
      <author>lennardv2</author>
      <pubDate>Wed, 26 May 2021 22:06:53 +0000</pubDate>
      <link>https://dev.to/lennardv2/i-created-this-css-gradient-creator-what-do-you-think-3ik2</link>
      <guid>https://dev.to/lennardv2/i-created-this-css-gradient-creator-what-do-you-think-3ik2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0Q32ujc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvb3azlo9n697lbjtsts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0Q32ujc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvb3azlo9n697lbjtsts.png" alt="Color Gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I created this CSS Gradient Editor, you can check it out here &lt;a href="https://colorgradient.dev/"&gt;Color Gradient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

</description>
      <category>css</category>
      <category>tooling</category>
      <category>webdev</category>
      <category>vue</category>
    </item>
    <item>
      <title>Join our Electron Developer Office Hour</title>
      <author>CoScreen</author>
      <pubDate>Wed, 26 May 2021 21:28:01 +0000</pubDate>
      <link>https://dev.to/coscreen/join-our-electron-developer-office-hour-94</link>
      <guid>https://dev.to/coscreen/join-our-electron-developer-office-hour-94</guid>
      <description>&lt;p&gt;We are excited to share our new community initiative - Developer Office Hours by the engineering team at CoScreen on technologies that we are excited about.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; is a hugely popular open source framework that enables the development of cross-platform desktop apps using web technologies. &lt;/p&gt;

&lt;p&gt;If you have ever used Visual Studio Code, Slack, Discord, or an endless list of other great apps on macOS or Windows, you’ve used Electron.&lt;/p&gt;

&lt;p&gt;These office hours are an opportunity for you to ask questions you need answered or share challenges you need help navigating on a given topic.&lt;/p&gt;

&lt;p&gt;We believe in creating a meaningful space for developers of all levels to learn, collaborate and catch up on the latest technologies and frameworks. We’ve created a dedicated block of time to make sure someone from our team can help answer questions and facilitate the conversations for our growing community.&lt;/p&gt;

&lt;p&gt;The up and coming Developer Office Hour will be hosted by Brad Carter, Software Engineer at &lt;a href="https://www.coscreen.co/"&gt;CoScreen&lt;/a&gt; and an Electron enthusiast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s the rough agenda:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quick intro on Electron and how we use it at CoScreen to build our cross-platform collaboration app&lt;/li&gt;
&lt;li&gt;Helping you to decide when it is the right technology for you and when it isn’t&lt;/li&gt;
&lt;li&gt;And, of course, do our best to answer all of your questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The event will be hosted on CoScreen on &lt;strong&gt;June 3rd 2021 at 11 am PST / 2 pm EST.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sign up and submit your questions &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScrzguFPIWNWF34vXRpgfQsWeN5Qy3SWvcWIPBLVzgK3LI1jA/viewform?usp=sf_link"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to include your name and any useful information so we can help you best.&lt;/p&gt;

&lt;p&gt;We are looking forward to chatting with all of you and learning together. &lt;/p&gt;

&lt;p&gt;*not all questions will be answered, but we will do our best to :)&lt;/p&gt;

&lt;p&gt;The CoScreen Team&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>opensource</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>How to crack coding interviews</title>
      <author>Vikram Aditya</author>
      <pubDate>Wed, 26 May 2021 20:54:33 +0000</pubDate>
      <link>https://dev.to/square/how-to-crack-coding-interviews-1066</link>
      <guid>https://dev.to/square/how-to-crack-coding-interviews-1066</guid>
      <description>&lt;p&gt;First things first, it is very important to spend some time (at least a weekend) on research — finding the right kind of resources to study for your interviews, and coming up with a plan for the next few weeks. This plan might also include the list of companies you wish to apply for, and in what order (yes, order matters!).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-interview-process"&gt;
  &lt;/a&gt;
  The Interview process
&lt;/h4&gt;

&lt;p&gt;The interview process at most software companies broadly comprises the following steps:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#resume-screening-phone-interview-virtual-onsite-interviews-hiring-decision-offer-delivery"&gt;
  &lt;/a&gt;
  Resume screening — Phone interview — (Virtual) Onsite interviews — Hiring Decision— Offer delivery
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#join-thevikcode-newletter-get-daily-which-will-not-be-avaible-here-httpsthevikcodesubstackcom"&gt;
  &lt;/a&gt;
  JOIN THEVIKCODE NEWLETTER ( GET DAILY WHICH WILL NOT BE AVAIBLE HERE ) - &lt;a href="https://thevikcode.substack.com/"&gt;https://thevikcode.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;h4&gt;
  &lt;a href="#before-the-interviews"&gt;
  &lt;/a&gt;
  Before the interviews
&lt;/h4&gt;

&lt;p&gt;The key to preparation for coding interviews is coding practice, a lot of it. But before jumping into that, it is always good to brush up theory concepts which are specifically important for interviews, and have a look at topic wise solved/unsolved problems. This approach is quite similar to how we used to prepare for our school/college examinations. I found the following two books very useful for my preparation. The good thing about these books is that they also discuss problem solving patterns.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#coding-practice"&gt;
  &lt;/a&gt;
  Coding practice
&lt;/h4&gt;

&lt;p&gt;There are several websites that offer practice problems for interview preparation. I prefer LeetCode as it has an amazing public collection of Top Interview Questions for all three difficulty levels- Easy, Medium, Hard. My suggestion is to start your coding practice with this curated list (start with Easy or Medium depending on your past coding practice/current comfort level), and then move to other relevant problems depending on your weak topics. Most importantly, practice writing code (with minimum possible errors) on paper or plain text editors/Google docs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-free-advice"&gt;
  &lt;/a&gt;
  Some free advice
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write things down to learn better, be it maintaining excel sheets of solved problems, docs, or even hand-written notes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Know the programming language you are going to use during interviews (e.g., C++/Java) inside out, well, at least the library functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn basic Object-Oriented Programming Concepts, to be able to write modular and clean code with short comments if time permits (Interviewers love modular code!).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Behavioral rounds matter! It does not take a lot of time to prepare for behavioral questions, but they might have a great impact on your application. Use the STAR method to think of answers to common behavioral questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#during-the-interviews"&gt;
  &lt;/a&gt;
  During the interviews
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure you understand the problem — the problems are deliberately made ambiguous/open-ended. Ask the right kind of clarifying questions and state any assumptions that you make about the problem scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select a simple yet good example/test case, which may lead to insights about how to solve the general problem.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.Focus on the algorithm and data structures you will use to solve the problem. Think of a couple of approaches, and keep talking to the interviewer (really important) about your thought process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Explain your best solution to the interviewer — he/she might ask for a more efficient solution. It is very important to resist the temptation to begin coding before figuring out a complete solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code your solution while still explaining to the interviewer, what you are doing. Make sure you write clean and simple code with good variable naming, possibly with proper input validation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify that your code works by tracing it through the test case (from step 2), to remove minor bugs. Next, check your code for all corner and special cases (if time doesn’t permit, at least tell the interviewer verbally).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, talk about the time and space complexity of your solutio&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Make a Blockchain Speak to You</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 26 May 2021 20:33:23 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/make-a-blockchain-speak-to-you-2jp3</link>
      <guid>https://dev.to/omarsaadoun/make-a-blockchain-speak-to-you-2jp3</guid>
      <description>&lt;h6&gt;
  &lt;a href="#the-%C3%A6ternity-middleware-puts-blockchain-data-into-context-so-you-get-the-information-you-need"&gt;
  &lt;/a&gt;
  The æternity Middleware puts blockchain data into context so you get the information you need
&lt;/h6&gt;

&lt;p&gt;There are good technical reasons for blockchain protocols to leave bits of information stored in their granular way. Although a good source of immutable trustful data, only connecting the dots between all available information unleashes the full value of blockchains. Have your questions, the open-source æternity Middleware has the answers.&lt;/p&gt;

&lt;p&gt;“What is the most popular token?”&lt;/p&gt;

&lt;p&gt;“How many owners of this token are there, what are their balances and how did they change over the last blocks?”&lt;/p&gt;

&lt;p&gt;“Tell me whenever something happens with regard to my oracle/account/contract!”&lt;/p&gt;

&lt;p&gt;To keep the chain data of the æternity protocol concise, æternity would not store answers to the questions above. Projects requiring this information for their use cases though (especially in the De-Fi sector) have a tool at hand, that automatically gathers lots of important correlations between on-chain data to process it into an easily digestible form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-the-new-%C3%A6ternity-middleware"&gt;
  &lt;/a&gt;
  Introducing: The new æternity Middleware
&lt;/h2&gt;

&lt;p&gt;You might have seen it in action already: It runs æternity’s &lt;a href="https://explorer.aeternity.io/"&gt;Explorer&lt;/a&gt; under the hood.&lt;/p&gt;

&lt;p&gt;It was developed with any kind of usage scenario in mind: You can spawn it up to visualize what is happening on your private network or follow along the progress of the æternity mainnet. And yes, you get both the back-end service as well as the beautifully designed web interface if you want to. And the next good news is: It’s open-source and very easy to set up. You can follow the steps in the &lt;a href="https://github.com/aeternity/ae_mdw"&gt;Github Repository&lt;/a&gt; and always ask for help on the &lt;a href="https://forum.aeternity.com/"&gt;forum&lt;/a&gt; if you get stuck.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-techies-and-endusers-alike"&gt;
  &lt;/a&gt;
  For Techies and End-Users alike
&lt;/h2&gt;

&lt;p&gt;Using the Middleware, you can serve the purposes of several stakeholders of your projects alike: have people get visual feedback and allow for quick read-ups on important information, as well as gathering of huge chunks of complicated information for your project’s tech. The latter is supported by over 40 APIs serving different purposes (get a brief overview &lt;a href="https://github.com/aeternity/ae_mdw#http-endpoints"&gt;here&lt;/a&gt; and if anything important is missing, you are always welcome to express your requests on the &lt;a href="https://forum.aeternity.com/"&gt;forum&lt;/a&gt;. Besides querying APIs for required information you can also use web sockets to be notified about specific happenings in real-time. This means that you don’t have to pull the API constantly for updates with requests causing load on your service, but have all kinds of new information regarding your accounts, contracts or oracles pushed to you via the WebSocket. Think how your dapp’s UX will benefit from having an integrated querying/events notifications service, without the need of using third-party services often used to achieve performance and efficiency in dapps UX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-real-deal"&gt;
  &lt;/a&gt;
  The Real Deal
&lt;/h2&gt;

&lt;p&gt;Utilizing the Middleware for your project comes with low maintenance efforts: æternity uses the Middleware for its official block explorer you will automatically benefit from all patches, updates, and new features that get introduced to the Middleware.&lt;/p&gt;

&lt;p&gt;In the same way that you have oracles, state channels, and the naming system seamlessly integrated into the protocol, you can also count on the advantages of the æternity Middleware out of the box.&lt;/p&gt;

&lt;p&gt;Get in touch: &lt;a href="https://github.com/aeternity"&gt;GitHub&lt;/a&gt; | &lt;a href="http://forum.aeternity.com/"&gt;Forum&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/Aeternity/"&gt;Reddit&lt;/a&gt; | &lt;a href="https://twitter.com/aeternity"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCEsM0b7QPazeMR80DxNkzCA"&gt;YouTube&lt;/a&gt;| &lt;a href="https://www.linkedin.com/company/aeternity"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Original article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.aeternity.com/make-a-blockchain-speak-to-you-3f3a566ca441"&gt;https://blog.aeternity.com/make-a-blockchain-speak-to-you-3f3a566ca441&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>middleware</category>
    </item>
    <item>
      <title>Filtering, Sorting and Pagination With React Hooks &amp; Redux 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Wed, 26 May 2021 20:31:07 +0000</pubDate>
      <link>https://dev.to/said_mounaim/filtering-sorting-and-pagination-with-react-hooks-redux-4m9n</link>
      <guid>https://dev.to/said_mounaim/filtering-sorting-and-pagination-with-react-hooks-redux-4m9n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://react-redux-filtering.netlify.app/"&gt;https://react-redux-filtering.netlify.app/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/saidMounaim/React-Redux-Filtering"&gt;https://github.com/saidMounaim/React-Redux-Filtering&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node@v10.16.0 or higher
npm@6.9.0 or higher
git@2.17.1 or higher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h2&gt;

&lt;p&gt;From your command line, clone and run React Redux Filtering:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Clone this repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/saidMounaim/React-Redux-Filtering.git

&lt;span class="c"&gt;# Go into the repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;React-Redux-Filtering

&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;#Start's development server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies Used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
      <category>redux</category>
    </item>
    <item>
      <title>Learning React: APIs with Fetch &amp; Axios</title>
      <author>Sarah Thompson</author>
      <pubDate>Wed, 26 May 2021 20:24:58 +0000</pubDate>
      <link>https://dev.to/salothom/learning-react-apis-with-fetch-axios-5853</link>
      <guid>https://dev.to/salothom/learning-react-apis-with-fetch-axios-5853</guid>
      <description>&lt;p&gt;Unlike Gretchen from Mean Girls, React really IS going to make &lt;a href="https://reactjs.org/docs/faq-ajax.html"&gt;fetch&lt;/a&gt; happen.&lt;/p&gt;

&lt;p&gt;Whether you like using functional components or class components, if your app is big enough you're likely needing to get data from an API. &lt;/p&gt;

&lt;p&gt;If you're just learning right now and need an API to practice on I've got a two suggested free ones I've liked using:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://opentdb.com/api_config.php"&gt;Trivia API&lt;/a&gt;&lt;/strong&gt; this has a lot of parameter options, although a lot of the data returned needs to be cleaned of character entities before you display it (ex: &amp;amp;)&lt;br&gt;
 &lt;strong&gt;&lt;a href="https://pokeapi.co/"&gt;Pokemon API&lt;/a&gt;&lt;/strong&gt; has a handful of different queries you can make for Pokemon names, powers, types, and  pictures.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fetch"&gt;
  &lt;/a&gt;
  Fetch()
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://levelup.gitconnected.com/how-to-make-http-requests-with-fetch-api-be018730811f"&gt;fetch()&lt;/a&gt; call takes in two argument, your api url parameter, like &lt;code&gt;fetch("https://pokeapi.co/api/v2/pokemon/1")&lt;/code&gt;, is one. The other one is the init object which can contain headers, body, credentials, and any other piece of information.&lt;/p&gt;

&lt;p&gt;As basic fetch() call looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch('https://pokeapi.co/api/v2/pokemon/1')
  .then(response =&amp;gt; response.json())
  .then((results) =&amp;gt; {console.log(results)});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be putting your &lt;a href="https://reactjs.org/docs/faq-ajax.html"&gt;api&lt;/a&gt; fetch() calls in your 'componentDidMount' lifecycle method if you're using a class component, and if you're using a functional component you should make sure your &lt;code&gt;useEffect&lt;/code&gt; hook will also call on render by appending an empty array to it.&lt;/p&gt;

&lt;p&gt;Fetch returns a promise that points to the response from the request that was made to the API no matter if the request is successful or not. This response is just a HTTP response and not JSON. In order for you to get the JSON body content of the response, you need to use the json() method on the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     fetch(powersUrl).then(response =&amp;gt; response.json()).then(
         (result) =&amp;gt; {
             this.setState({
                 powerInfo: result
             });
         },
         (error) =&amp;gt; {
             this.setState({
                error
             });
          }
     )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of using a &lt;code&gt;.catch()&lt;/code&gt; block for errors, with fetch() we are using a &lt;code&gt;(error)&lt;/code&gt; so that it doesn't swallow the exceptions from any actual bugs that could be in the components. &lt;/p&gt;

&lt;p&gt;A request made with Fetch will only be rejected if there is a  network failure or if something is preventing the request from completing - if it is a 4xx or 5xx type code it will update the &lt;code&gt;ok&lt;/code&gt; status.&lt;/p&gt;

&lt;p&gt;To add variable query params you can encode them straight into the URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch(`https://pokeapi.co/api/v2/pokemon?limit=${encodeURIComponent(data.limt)}`)
.then(res =&amp;gt; res.json())
.then( ....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This fetch() function lets you to make HTTP requests with standard HTTP verbs like &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt;. You can append other needed data to the fetch() like method, headers, and body into the init object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; fetch(userURL , {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
    })
      .then((resp) =&amp;gt; resp.json())
     .then(  ......
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios()
&lt;/h2&gt;

&lt;p&gt;Axios is another &lt;a href="https://www.smashingmagazine.com/2020/06/rest-api-react-fetch-axios/"&gt;tool&lt;/a&gt; we can use to handle API calls. It is a lightweight promise based HTTP client for browsers and also for node.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from 'axios'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to install it with npm and add it to your package.json, then you'll import it at the top of your file. Axios takes two inputs, the URL of the endpoint you're trying to hit and an object that contains all of the properties you want to send.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    axios.get(monsterUrl).then(
        res =&amp;gt; {
            var monsterChart = []
            monsterChart.push(&amp;lt;div&amp;gt; {{res.pokemon}}&amp;lt;/div&amp;gt;)
            updateMonster(monsterChart)
            }
        ).catch(
            .... )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also format it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios({
      method: 'post',
      url: 'https:/coolAPI.com/api/cool',
      data: {
            email: 'myTest@example.com',
            password: test1234
      }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's lots more to dig into, but these are two solid part to practice on!&lt;/p&gt;

</description>
      <category>fetch</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The race to connect the world to the blocks</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 26 May 2021 20:21:27 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/the-race-to-connect-the-world-to-the-blocks-3i1f</link>
      <guid>https://dev.to/omarsaadoun/the-race-to-connect-the-world-to-the-blocks-3i1f</guid>
      <description>&lt;p&gt;Blockchain adoption has been taking giant leaps forward in the last couple of years, and with DeFi leading the change, &lt;strong&gt;oracles have become a necessity, representing one of the cornerstones of blockchains’ utility&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Blockchain oracles allow interaction between real-world data and smart contracts, allowing any publicly available data to be seamlessly integrated into smart contracts. &lt;strong&gt;The oracle connects the blockchain and the real world&lt;/strong&gt;, allowing the smart contracts to change when certain world events trigger such a reaction.&lt;/p&gt;

&lt;p&gt;It is well established that æternity was born DeFi-ready, with smart contract capability as well as extremely high scalability and transaction speed. However, it is not common knowledge that æternity also offers an embedded oracle system to its users. What the developers of æternity knew at the time of building the blockchain’s foundations is that &lt;strong&gt;oracles will be an integral part of any blockchain that wants to host the plethora of DeFi applications&lt;/strong&gt; that are currently being developed. By looking ahead and learning from the mistakes of the early blockchain platforms, &lt;strong&gt;æternity’s design resulted in a completely modern blockchain, with sufficient performance and functionalities to support the heavy traffic demands of DeFi.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oracles are just one of many functions essential for what blockchain is trying to bring to the world — efficient independence from the central banking systems and the instant interoperability of the physical world and the decentralized financial system.&lt;/p&gt;

&lt;p&gt;However, æternity’s oracles differ from most oracles in the blockchain space in the sense that they do not operate automatically. Instead, &lt;strong&gt;æternity utilizes oracle operators&lt;/strong&gt; — individuals or entities who register oracles and set them up to communicate the relevant data between smart contracts and the world outside the blockchain.&lt;/p&gt;

&lt;p&gt;Although this makes the process more complex, it creates a structure in which oracle operators can earn from the parties using the oracles they provide. This means that, in the future, there could be a &lt;strong&gt;dedicated Oracle Marketplace&lt;/strong&gt; where users can choose their trusted oracles, creating strong competition in the market to provide the best possible oracle service.&lt;/p&gt;

&lt;p&gt;Undeniably, any business planning to utilize blockchain for its benefit will have to go through oracles. With numerous blockchain projects offering different solutions, it will be a &lt;strong&gt;system with the most secure structure and least capacity for manipulation that becomes the standard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The race to provide the world and blockchain with seamless interoperability is far from over, and oracle systems will continue to be created and improved. The &lt;strong&gt;Akshwani haeck&lt;/strong&gt; held in April and May, organized by æternity, aimed to do just that — find more opportunities to utilize and improve the ways oracles are being used. The brightest minds of the blockchain space took on the ambitious task of testing out the new use cases of oracles and &lt;strong&gt;building the digital structures of the future on the æternity blockchain network.&lt;/strong&gt; The fruits of their labour can be found in the &lt;a href="https://akshwanihaeck.devpost.com/project-gallery"&gt;Devpost project gallery of the Akshwani haeck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While æternity isn’t the only competitor working on advancing oracles and bringing mass adoption to blockchain, one thing is certain — with oracles embedded in its protocols from the start, and with its uniquely active and collaborative community, &lt;strong&gt;æternity has a head start&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Get in touch: &lt;a href="https://github.com/aeternity"&gt;GitHub&lt;/a&gt; | &lt;a href="http://forum.aeternity.com/"&gt;Forum&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/Aeternity/"&gt;Reddit&lt;/a&gt; | &lt;a href="https://twitter.com/aeternity"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCEsM0b7QPazeMR80DxNkzCA"&gt;YouTube&lt;/a&gt;| &lt;a href="https://www.linkedin.com/company/aeternity"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Original Article&lt;br&gt;
&lt;a href="https://blog.aeternity.com/the-race-to-connect-the-world-to-the-blocks-44cfa659edc7"&gt;https://blog.aeternity.com/the-race-to-connect-the-world-to-the-blocks-44cfa659edc7&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>oracles</category>
    </item>
    <item>
      <title>Building a blog with Franklin.jl</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Wed, 26 May 2021 19:54:30 +0000</pubDate>
      <link>https://dev.to/ifihan/building-a-blog-with-franklin-jl-3h77</link>
      <guid>https://dev.to/ifihan/building-a-blog-with-franklin-jl-3h77</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h4&gt;

&lt;p&gt;Franklin.jl is a simple, customizable static site generator . It is a template that can be modified to suit your taste and it is very fast and efficient to use. &lt;/p&gt;

&lt;p&gt;Franklin is light and very easy to use, and this is why I decided to build a blog with it. Franklin has cool and key features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Augmented markdown, allowing definition of LaTeX-like commands.&lt;/li&gt;
&lt;li&gt;Easy inclusion of user-defined div-blocks.&lt;/li&gt;
&lt;li&gt;Maths rendered via KaTeX, code via highlight.js (both can be pre-rendered).&lt;/li&gt;
&lt;li&gt;Live evaluation of Julia code blocks.&lt;/li&gt;
&lt;li&gt;Live preview of modifications.&lt;/li&gt;
&lt;li&gt;Simple optimization step to compress and pre-render the website.&lt;/li&gt;
&lt;li&gt;Simple publication step to deploy the website.&lt;/li&gt;
&lt;li&gt;Straightforward integration with Literate.jl.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#getting-started-with-franklin"&gt;
  &lt;/a&gt;
  GETTING STARTED WITH FRANKLIN
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#1-set-up-the-environment"&gt;
  &lt;/a&gt;
  1. Set up the environment.
&lt;/h4&gt;

&lt;p&gt;To set up the Franklin.jl environment, follow the steps below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Install &lt;a href="https://julialang.org/"&gt;Julia&lt;/a&gt; for your Operating System.&lt;/li&gt;
&lt;li&gt;Open the Julia REPL.&lt;/li&gt;
&lt;li&gt;Run the command &lt;code&gt;using Pkg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install Franklin with the command &lt;code&gt;Pkg.add(Franklin)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using Pkg
julia&amp;gt; Pkg.add(Franklin)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-start-a-project"&gt;
  &lt;/a&gt;
  2. Start a project.
&lt;/h4&gt;

&lt;p&gt;Before beginning a project, it's advisable to read through the list of &lt;a href="https://franklinjl.org/styling/templates/index.html"&gt;templates&lt;/a&gt; available by Franklin to know what template to use. You can also decide to build your template and create a PR (if you want your own template). After reading through the templates, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using Franklin
julia&amp;gt; newsite("nameofsite", template="basic") 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used the "basic" template for my blog because I love the simplicity! &lt;/p&gt;

&lt;p&gt;After doing this, you would get a message like the one below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;✓ Website folder generated at "nameofsite" (now the current directory).
→ Use serve() from Franklin to see the website in your browser.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the serve command &lt;code&gt;serve()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; serve()
→ Initial full pass...
→ Starting the server...
✓ LiveServer listening on http://localhost:8000/ ...
  (use CTRL+C to shut down)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would automatically open up on your default browser. The &lt;code&gt;Project.toml&lt;/code&gt; starts up the server. If any dependency is being added, it is good to include it there.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-structure-of-franklin-site"&gt;
  &lt;/a&gt;
  3. Structure of Franklin site.
&lt;/h4&gt;

&lt;p&gt;The new project should have a structure like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── .github 
├── _assets/
├── _css/
├── _layout/
├── _libs/
├── .gitignore
├── .gitlab-ci
├── 404.md
├── config.md
├── index.md
├── menu1.md
├── menu2.md
├── menu3.md
├── Project.toml
└── utils.jl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the &lt;code&gt;serve()&lt;/code&gt; function, a &lt;code&gt;__site&lt;/code&gt; folder would be generated. This is the generated website from Markdown to HTML. Do not edit the content of this folder, but rather, edit the corresponding file in the project. We do this because the changes in the &lt;code&gt;__site&lt;/code&gt; folder won't reflect, as the folder is included in the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.md&lt;/code&gt; file is the page you would see on starting the server. The remaining folders are auxiliary folders supporting the site. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_assets/  contains the images, code snippets, etc.,&lt;/li&gt;
&lt;li&gt;_css/ contains the style sheets.&lt;/li&gt;
&lt;li&gt;_libs/ contains JavaScript libraries.&lt;/li&gt;
&lt;li&gt;_layout/ will contain bits of HTML scaffolding for the generated pages such as the header and footer. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;config.md&lt;/code&gt; allows you to specify variables that help steer the page generation. It can also be used to declare global variables or definitions that can then be used on all pages. It is a very important file. I would say more about it later in the article.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;.github&lt;/code&gt; folder, there is a &lt;code&gt;deploy.yml&lt;/code&gt; for Github Actions. You can configure some fields for your customization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; If you want to change the content of the pages, read up on the &lt;code&gt;index.md&lt;/code&gt;, &lt;code&gt;menu1.md&lt;/code&gt;, &lt;code&gt;menu2.md&lt;/code&gt;, and &lt;code&gt;menu3.md&lt;/code&gt; for a proper understanding of how to write the Markdown.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-editing-the-raw-configmd-endraw-"&gt;
  &lt;/a&gt;
  4. Editing the &lt;code&gt;config.md&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;config.md&lt;/code&gt; folder looks like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vg-vlQ6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621958953852/WAYjqLmro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vg-vlQ6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621958953852/WAYjqLmro.png" alt="config.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First off, you start by editing the name of the author, so it shows at the footer. The prepath has to be defined if you're creating a project website with the repo. Then, the URL path is in the form of &lt;code&gt;username.github.io/nameofrepo/&lt;/code&gt;, if not the CSS of the site would look terrible. &lt;/p&gt;

&lt;p&gt;You can go edit the site to your taste! For my blog, I created an About, Blog, and Contact page. The Blog section contains articles I've written before. Their README files can be found in the &lt;code&gt;posts&lt;/code&gt; folder. I also customized the CSS of the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-post-processing-verifying-links"&gt;
  &lt;/a&gt;
  5. Post processing / verifying links
&lt;/h4&gt;

&lt;p&gt;To avoid multiple pushes to GitHub and ensuring that links in your site work, Franklin has a function to help with that. &lt;code&gt;verify_links()&lt;/code&gt; is used to check that.&lt;/p&gt;

&lt;p&gt;Also, if you close the Julia REPL and want to continue working on the project, restarting the server is quite easy. Just head over to the directory the project is in and type in &lt;code&gt;julia&lt;/code&gt; in the directory path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Julia must be added to PATH for this to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXl-GQ81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622010093152/XDIsnPDwV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXl-GQ81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622010093152/XDIsnPDwV.png" alt="back.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this, the Julia REPL will come up.  Next, type in the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using Franklin
julia&amp;gt; serve()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6-pushing-to-github"&gt;
  &lt;/a&gt;
  6. Pushing to GitHub.
&lt;/h4&gt;

&lt;p&gt;After working on the project locally, you will want to deploy it so people can see what you have done. This is quite easy to do. There are two methods of deploying to GitHub pages. They depend on what the project is.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Personal website &lt;code&gt;(username.github.io)&lt;/code&gt;  or Organizational website &lt;code&gt;(orgname.github.io)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Project website &lt;code&gt;(username.github.io/myWebsite/)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you consider a project website, you must define a prepath variable in your &lt;code&gt;config.md&lt;/code&gt; with the name of that project. For instance: &lt;code&gt;@def prepath = "myWebsite"&lt;/code&gt;. This is used when deploying to indicate that the base URL of your website is &lt;code&gt;username.github.io/myWebsite/&lt;/code&gt; instead of &lt;code&gt;username.github.io&lt;/code&gt;. If you forget to do this, the CSS won't load and your website will look terrible, amongst other problems. &lt;/p&gt;

&lt;p&gt;Synchronizing your repository and local folder is next on our list. After creating the repo, type in the commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Ifihan/nameofrepo.git
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or for an already initialized repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin https://github.com/Ifihan/nameofrepo.git
git branch -M main
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more on Git here: &lt;a href="https://git-scm.com/"&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Side note: *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you're familiar with GitHub, you might run into this issue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;! [remote rejected] main -&amp;gt; main (refusing to allow a Personal Access Token to create or update workflow `.github/workflows/Deploy.yml` without `workflow` scope)
error: failed to push some refs to 'https://github.com/Ifihan/nameofrepo.git'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's nothing to worry about as it is a slight error that can be fixed easily. This is because the token registered on your computer doesn't have the workflow option. &lt;/p&gt;

&lt;p&gt;You can fix this by generating a new token and including the workflow option. Head over to &lt;a href="//github.com"&gt;GitHub&lt;/a&gt; &amp;gt; Settings &amp;gt; Developer Settings &amp;gt; Personal access tokens. Then click on "Generate new token."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKUtj0ZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006947439/_0m3HuC37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKUtj0ZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006947439/_0m3HuC37.png" alt="token.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type in the name of the token and tick the workflow function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxxUoDWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006526758/1gp-rnXnI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxxUoDWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622006526758/1gp-rnXnI.png" alt="workflow.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to Control Panel&amp;gt; User Accounts &amp;gt; Manage Windows Credentials and find the git credential.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnvRifYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953370230/tNMRCIUN95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnvRifYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953370230/tNMRCIUN95.png" alt="credentials.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on it and then click on the "remove" button. When pushing to GitHub, you would be prompted to input your username and password. For the password option, put the token you generated and you're good to go!&lt;/p&gt;

&lt;p&gt;Go to the Action section and wait for it to be deployed. You would also find another branch called gh-pages. That's where it was deployed according to the &lt;code&gt;deploy.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULncH8vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621955319814/uN0Zctwfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULncH8vY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621955319814/uN0Zctwfn.png" alt="deploy.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go over to the Settings &amp;gt; Pages, and change the branch from main to gh-pages, and your site is hosted successfully!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18ZFQAr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953708309/cqP2xZumn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18ZFQAr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621953708309/cqP2xZumn.png" alt="gh-pages.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My blog is hosted at &lt;a href="https://ifihan.github.io/blogue/"&gt;https://ifihan.github.io/blogue/&lt;/a&gt;, and you can find the source code on &lt;a href="https://github.com/Ifihan/blogue"&gt;GitHub&lt;/a&gt;. Feel free to star, and contributions are welcomed via PRs. &lt;/p&gt;

&lt;p&gt;New To Julia? Read the article I wrote on Julia &lt;a href="https://dev.to/ifihan/the-julia-programming-language-5b10"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any issues, you can ask on the #franklin channel on the &lt;a href="https://julialang.org/slack/"&gt;Slack&lt;/a&gt; workspace or send me a DM on &lt;a href="http://twitter.com/ifihan_"&gt;Twitter&lt;/a&gt;. You can also shoot me a &lt;a href="//victoriaolusheye@gmail.com"&gt;mail&lt;/a&gt;, and I would be glad to help.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  REFERENCES
&lt;/h4&gt;

&lt;p&gt;This article was written with the help of &lt;a href="https://franklinjl.org/"&gt;Franklin's Documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>blog</category>
      <category>julia</category>
      <category>franklinjl</category>
    </item>
    <item>
      <title>JavaScript: Understand 'this' keyword</title>
      <author>Mariana Simon</author>
      <pubDate>Wed, 26 May 2021 19:16:38 +0000</pubDate>
      <link>https://dev.to/simonpaix/javascript-understand-this-keyword-55j</link>
      <guid>https://dev.to/simonpaix/javascript-understand-this-keyword-55j</guid>
      <description>&lt;p&gt;&lt;code&gt;'this'&lt;/code&gt; is one of the most important concepts in JavaScript. It's part of the basics and the sooner you get comfortable with it the easier your coding life will be :)   &lt;/p&gt;

&lt;p&gt;Make sure you understand the use of 'this' by reading this post.  &lt;/p&gt;

&lt;p&gt;First, the simple 5 yo explanation: &lt;br&gt;
 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The use of &lt;code&gt;'this'&lt;/code&gt; in programming like what you do in plain English. For example, when you say "I got a job! This is great!". We know 'this' is referring to the fact you got the job. In other words, 'this' gives context to the second sentence. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;--5 yo &lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;So, to understand &lt;code&gt;'this'&lt;/code&gt;, you need to know what context is.  &lt;/p&gt;

&lt;p&gt;   &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#context-explained"&gt;
  &lt;/a&gt;
  Context explained
&lt;/h2&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;p&gt;Context is related to objects. It refers to the object a method or property belongs to. Your code starts running in a global context, which in your browser is the &lt;code&gt;window&lt;/code&gt; (in Node, the global object is called &lt;code&gt;global&lt;/code&gt;). Look at the example below: &lt;/p&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;  

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// Beyonce &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// Beyonce &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In the example, &lt;code&gt;'this'&lt;/code&gt; equals &lt;code&gt;window&lt;/code&gt; because I ran it on my browser, where the global object is the window.  So, window.name ==="Ash"  .  So far, the context is window. Ok. &lt;/p&gt;

&lt;p&gt;Now, the context changes during your code execution. Whenever an object's method is called, &lt;code&gt;'this'&lt;/code&gt; is set to the object the method was called on. &lt;/p&gt;

&lt;p&gt;See the example below. Both lines 4 and 10 are identical but they log different results according to the value of &lt;code&gt;'this'&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  'this' is  window &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  'this' is heisenberg &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The code above works fine, but we repeated line 4 which is not cool (remember: DRY Don't Repeat Yourself). &lt;/p&gt;

&lt;p&gt;There is a way to write the &lt;code&gt;console.log()&lt;/code&gt; only once and reuse it. To do that, we use the function &lt;code&gt;bind&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-bind"&gt;
  &lt;/a&gt;
  'this' with bind
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
&lt;code&gt;Bind&lt;/code&gt; applies a given &lt;code&gt;'this'&lt;/code&gt; (an object) to the function that is calling it. The object that you want to bind to the function is passed as a parameter to bind. &lt;/p&gt;

&lt;p&gt;See example: &lt;br&gt;
 &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayBeyonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sayHeisenberg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="nx"&gt;sayBeyonce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;sayHeisenberg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Nice! Now, let's say we didn't want to create new functions to say each person's name.  We only want to use sayMyName() .   &lt;/p&gt;

&lt;p&gt;We can do so with the &lt;code&gt;call&lt;/code&gt; function and a generic person object. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-call"&gt;
  &lt;/a&gt;
  'this' with call
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
Like bind, &lt;code&gt;call&lt;/code&gt; can be used to set a custom value to &lt;code&gt;'this'&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;See the example: &lt;br&gt;
 &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 

&lt;span class="p"&gt;};&lt;/span&gt;   

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-arrow-functions"&gt;
  &lt;/a&gt;
  'this' with arrow functions
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
Be careful with arrow functions 🏹   &lt;/p&gt;

&lt;p&gt;When an arrow function is used, it doesn’t set a new value to &lt;code&gt;'this'&lt;/code&gt;. Instead, it inherits the one from the parent scope. &lt;/p&gt;

&lt;p&gt;This example is identical to the previous one, but with an arrow function instead of a normal one. &lt;/p&gt;

&lt;p&gt;It logs "Ash" twice to the console. Weird, right? &lt;br&gt;
 &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Ash. &lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Ash. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Even if you use call/bind, it won't work. It still logs "Ash". Why?  &lt;/p&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-with-regular-vs-arrow-functions"&gt;
  &lt;/a&gt;
  'this' with regular vs arrow functions
&lt;/h2&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;p&gt;Regular functions set their own &lt;code&gt;'this'&lt;/code&gt; object to the caller.&lt;/p&gt;

&lt;p&gt;BUT, Arrow functions don't. They inherit &lt;code&gt;'this'&lt;/code&gt; from the previous context, aka from the scope it sits inside. In this case, from window. This is called "lexical scoping". &lt;/p&gt;

&lt;p&gt;So, when we used an arrow function, &lt;code&gt;'this'&lt;/code&gt; had nothing to do with the caller of the function. It was still equal to &lt;code&gt;window&lt;/code&gt; and it stayed that way, logging "Ash" as a result. &lt;/p&gt;

&lt;p&gt;What if we wrap the arrow function with a regular function? &lt;/p&gt;

&lt;p&gt;The regular function is called and sets &lt;code&gt;'this'&lt;/code&gt; to the caller person.  &lt;/p&gt;

&lt;p&gt;The arrow function is called from inside the regular function. 'this' value in the arrow function inherits 'this' value from the outer (regular) function. &lt;strong&gt;So it works!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrowFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nx"&gt;arrowFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;beyonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heisenberg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beyonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Beyonce. &lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayMyName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heisenberg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Your name is Heisenberg. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;
Cool. So using arrow functions is bad? Not at all. There are many use cases when you actually want to inherit 'this' from the surrounding context. In those cases, arrow functions are super useful.  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#useful-cases-of-this-with-arrow-functions"&gt;
  &lt;/a&gt;
  Useful cases of 'this' with arrow functions
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
Let's see an example.  Here, we want to log a different name every 2 seconds by using an array of names. If we run this code, we get the error: &lt;strong&gt;[Uncaught TypeError: Cannot read property 'forEach' of undefined].&lt;/strong&gt; &lt;br&gt;
 &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 

  &lt;span class="na"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="c1"&gt;// log each name after 1 second &lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your name is&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="p"&gt;});&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Why? &lt;/p&gt;

&lt;p&gt;When sayNames is called it sets 'this' to be the people object. But when setTimeout is called, it sets 'this' to be the window. The window doesn't have a &lt;code&gt;names&lt;/code&gt; property.  How do we solve that?  &lt;/p&gt;

&lt;p&gt;You guessed it right! We use an arrow function, which will inherit the 'this' from its outer context. In other words, it will inherit &lt;code&gt;'this'&lt;/code&gt; from sayNames context. &lt;br&gt;
 &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beyonce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Heisenberg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 

  &lt;span class="na"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

    &lt;span class="c1"&gt;// log each name after 1 second &lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your name is &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="p"&gt;});&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me-lets-connect"&gt;
  &lt;/a&gt;
  About me, let's connect! 👋👩‍💻
&lt;/h2&gt;

&lt;p&gt; &lt;br&gt;
Thanks for reading! I'm an avid learner and I love sharing what I know. I teach coding live for free 👉 &lt;a href="https://learnpine.com"&gt;here&lt;/a&gt; and I share coding tips on &lt;a href="https://twitter.com/simonpaix"&gt;my Twitter&lt;/a&gt; . If you want to, come visit and say hi in the chat 😁 &lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Read More/Read Less functionality with Vue</title>
      <author>Laur.Rvt</author>
      <pubDate>Wed, 26 May 2021 19:00:35 +0000</pubDate>
      <link>https://dev.to/laurrvt/read-more-read-less-functionality-with-vue-3km0</link>
      <guid>https://dev.to/laurrvt/read-more-read-less-functionality-with-vue-3km0</guid>
      <description>&lt;p&gt;Hi!&lt;br&gt;
In this post I am going to show you a simple way to do a Read More/Read Less functionality in vue.js.&lt;/p&gt;

&lt;p&gt;One way to do that is to have two divs that will store both versions of the text (the long and the short one) but that is working only if we work with static texts.&lt;/p&gt;

&lt;p&gt;This is a working version of this functionality using a variable in which will be stored our text:&lt;br&gt;
&lt;a href="https://codesandbox.io/s/eager-kowalevski-u406b?file=/src/App.vue"&gt;https://codesandbox.io/s/eager-kowalevski-u406b?file=/src/App.vue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is pretty simple. I just have a bool variable named "readMore" which will control displaying of Read More and Read Less buttons. Also, using readMore ,I give to div that stores the text a new class named "readLess" which have it own styles.&lt;br&gt;
Hope it was useful for you. If you have any questions or suggestions, feel free to text me about that :)&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Course Launch 🚀 - Sets and Frozen Sets in Python</title>
      <author>Mridu Bhatnagar</author>
      <pubDate>Wed, 26 May 2021 18:58:57 +0000</pubDate>
      <link>https://dev.to/mridubhatnagar/course-launch-sets-and-frozen-sets-in-python-46g5</link>
      <guid>https://dev.to/mridubhatnagar/course-launch-sets-and-frozen-sets-in-python-46g5</guid>
      <description>&lt;p&gt;Are you a newbie and is your next Python learning goal is Sets and Frozen Sets?&lt;/p&gt;

&lt;p&gt;Preparing for an upcoming interview, want to brush up your knowledge on Sets and Frozen Sets while solving problem alongside?&lt;/p&gt;

&lt;p&gt;I recently built and published a self-paced Python course on Linkedin Learning on Sets and Frozen Sets.&lt;/p&gt;

&lt;p&gt;Course Features 👇:&lt;/p&gt;

&lt;p&gt;📌 The full course is FREE for a month from the date of your sign-up.&lt;br&gt;
📌 3 bite-sized lessons are available for preview (no sign-up needed).&lt;br&gt;
📌 You can download the lesson on Linkedin Learning iOS and android applications and can learn offline.&lt;br&gt;
📌 Hands-on examples, MCQs, challenges&lt;br&gt;
📌 The course is a collection of bite-sized videos.&lt;br&gt;
📌 Course duration - 1 hour 37 min, lesson duration varies between 40 sec to 6 minutes maximum.&lt;/p&gt;

&lt;p&gt;NOTE - If your employer or your university has given you access to the Linkedin Learning library. You would be able to access the full course.&lt;/p&gt;

&lt;p&gt;Take the course and spread the word among your peers.&lt;br&gt;
If you take the course do let me know your feedback.&lt;/p&gt;

&lt;p&gt;Course Link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/learning/python-data-structures-sets-and-frozen-sets"&gt;https://www.linkedin.com/learning/python-data-structures-sets-and-frozen-sets&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Tools to know when starting coding</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Wed, 26 May 2021 18:38:59 +0000</pubDate>
      <link>https://dev.to/line/tools-to-know-when-starting-coding-2nhn</link>
      <guid>https://dev.to/line/tools-to-know-when-starting-coding-2nhn</guid>
      <description>&lt;p&gt;When we start to code, most of us really don't focus on tools. These tools can really make your programming more productive and efficient. &lt;/p&gt;

&lt;p&gt;In the tech world, there are thousands of tools that people use themselves, or probably will tell you to use these tools. How are we as beginners or intermediates know which tool is good for us. In this blog, I have talked about this in this article, &lt;strong&gt;Enjoy&lt;/strong&gt;-&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;WhatFont&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This Amazing Chrome extensions help to us to identify the fond of the website.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;StackOverFlow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of us falls in problems related to our code or there is a bug that you are facing but can't solve, you can search that on stackoverflow and could get the solution over there.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Wappalyzer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is also a Chrome extension that helps in identifying the technology used in that website.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Redux Dev Tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This tool is good for debugging application made by Redux.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Vimeo Repeat and Speed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is Also an Chrome extension, most of coding tutorials made by individual websites are either hosted on Vimeo or sometimes Youtube. This extension gives you flexibility to watch vimeo videos in a your custom way. &lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Git Lens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use VS code, this vs code extension will help you find what, when changes were made and who made the changes in the code.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;VSCode-Icons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension on VS code changes the Coding window according to yourself and make it the most pleasant look for your eyes.&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Code Spell Checker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This as the name suggest checks the spelling of the code, and makes it easier for you to code, if you don't want to waste your time on learning and memorizing spellings.&lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;Guides&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This code guide will make sure that the brackets and parenthesis that you put in your code are correct and is in the write place, so that in the future no bugs could be found.&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;Auto Rename Tag&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This will automatically make the ending tag of any HTML code you do, like if you wrote  then it will automatically make  in the correct position according to your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally this big topic is over now, Now I would like to talk about my Newsletter&lt;/em&gt; -&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have started a newsletter in which you will get Email twice a week directly from me. I will send you latest tech, coding &amp;amp; Other useful information. I will also be spending a one riddle each time and the first to complete the riddle will get a small gift from me&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/subscribe?utm_source=menu&amp;amp;simple=true&amp;amp;next=https%3A%2F%2Flinenewsletter.substack.com%2Fp%2Fcoming-soon"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDFP6Lsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyih1zf664aoqcwaxr17.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on Twitter as well. &lt;a href="https://twitter.com/chetanistaken"&gt;Click Here.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
