<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>50+ free tools and resources to create awesome user interfaces</title>
      <author>JavaScript</author>
      <pubDate>Fri, 05 Nov 2021 04:40:14 +0000</pubDate>
      <link>https://dev.to/reactjss/50-free-tools-and-resources-to-create-awesome-user-interfaces-21o2</link>
      <guid>https://dev.to/reactjss/50-free-tools-and-resources-to-create-awesome-user-interfaces-21o2</guid>
      <description>&lt;p&gt;“You’re only as good as the tools you use”&lt;/p&gt;

&lt;p&gt;This saying has been around for years and highlights the importance of using the correct tool for the job. This motto applies to hundreds of different fields and disciplines, and luckily for us, to the design too.&lt;/p&gt;


&lt;p&gt;From my experience as a senior product designer, there is almost nothing more important than the correct tools to create a nice user interface. The right set of pictures or a well-balanced colour palette can make a huge difference between a poor and decent UI.&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/web-development-resources-that-you-should-bookmark/"&gt;50+ free tools and resources to create awesome user interfaces/a&amp;gt;&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>What's your favorite time to code?</title>
      <author>ManuTheCoder</author>
      <pubDate>Fri, 05 Nov 2021 04:27:54 +0000</pubDate>
      <link>https://dev.to/manuthecoder/whats-your-favorite-time-to-code-4091</link>
      <guid>https://dev.to/manuthecoder/whats-your-favorite-time-to-code-4091</guid>
      <description>&lt;p&gt;Many developers love to code during the night (like me), early in the morning, or even mid-afternoon. What's your favorite time?&lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>20+ Projects you can do to become a Frontend Master</title>
      <author>JavaScript</author>
      <pubDate>Fri, 05 Nov 2021 03:44:25 +0000</pubDate>
      <link>https://dev.to/reactjss/20-projects-you-can-do-to-become-a-frontend-master-56f0</link>
      <guid>https://dev.to/reactjss/20-projects-you-can-do-to-become-a-frontend-master-56f0</guid>
      <description>&lt;p&gt;Whatever you do, it's always beneficial to have the right tools at your disposal. I love working remotely and am a big advocate of doing remote software development. Therefore, I always strive to have the best equipment available to be as productive as possible. Writing posts like this constantly takes a lot of time. Luckily iVanky helped me out and sponsored this post so that I can concentrate on writing. I recently had the chance to test out one of their hottest products, a dual USB-C Docking Station that allows me to connect both my wide-screen monitors to my MacBook with Dual 4K@60Hz display connectivity. It also supports up to 96W laptop charging, which is awesome. If you are in a situation like me and want to upgrade your equipment, check out this and their other products! And now comes the article:&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/9-projects-you-can-do-to-become-a-front-end-master/&amp;amp;ved=2ahUKEwjB0KKXp4D0AhWGF3IKHe3LAacQFnoECAcQAQ&amp;amp;usg=AOvVaw2t7-_QAPDVzRhEVlb4h7WW"&gt;20+ Projects you can do to become a Frontend Master&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Protocols and Composition in Python</title>
      <author>Filip Wojciechowski</author>
      <pubDate>Fri, 05 Nov 2021 03:21:22 +0000</pubDate>
      <link>https://dev.to/fwojciec/protocols-and-composition-in-python-8mm</link>
      <guid>https://dev.to/fwojciec/protocols-and-composition-in-python-8mm</guid>
      <description>&lt;p&gt;It's a source of heartbreak and distress for me when instrumentation-related side-effects (like logging, metrics, tracing, retrying logic, error handling, etc.) begin making their way inside the business logic layer of an application.&lt;br&gt;
If only there was a way to overlay instrumentation on top of business logic without touching it directly... It would be even better if we could keep the various instrumentation concerns separate from one another, while we're at it...&lt;/p&gt;

&lt;p&gt;Right, let's write some code!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#naive-implementation"&gt;
  &lt;/a&gt;
  Naive Implementation
&lt;/h2&gt;

&lt;p&gt;Say, we're writing an advanced service that adds numbers. We could jump in right away and have a working implementation in no time at all:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now we want to deploy it to production, so we're asked to add logging - to make it possible to debug production failures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adding %s and %s gives %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works! But, now we've run into performance issues so we need to add collection of performance metrics, like the ability to time the execution of the &lt;code&gt;add&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perf_counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="n"&gt;t_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perf_counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adding %s and %s gives %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;took&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t_end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t_start&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"took %s seconds"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;took&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still works, but things are definitely getting a bit messy - in fact, it's becoming difficult to understand what the service is doing in the first place. Not to mention the impact on testability of our code! Granted, if we're logging to the local filesystem or &lt;code&gt;stdout&lt;/code&gt; testing is probably not much of an issue at this stage, but if we're storing logs remotely our tests are at risk of becoming slow, fragile, and we're likely spamming logs with useless messages every time we run our tests. It's a slippery slope towards spaghetti code - there must be a better way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protocolbased-implementation"&gt;
  &lt;/a&gt;
  Protocol-based implementation
&lt;/h2&gt;

&lt;p&gt;When I was a kid, my dad used to tell me: "hurry slowly". I find this to be a reasonable principle when applied to coding. Let us start slowly then and begin by defining our service as a pure interface expressing the desired functionality - or, in Python parlance - as a "protocol":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# service.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Protocol&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddServiceProtocol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"Represents functionality of adding two numbers."&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The protocol of our service is simple: we take two &lt;code&gt;int&lt;/code&gt; values and we return an &lt;code&gt;int&lt;/code&gt; value representing their sum. Given the protocol, the concrete implementation might look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# service.py
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Implements AddServiceProtocol."&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A protocol is Python's take on "structural subtyping" - it's a type that's effectively implemented by anything that matches the signature of the protocol's methods. Concrete implementations can subclass the protocol, in which case implementation correctness will be enforced at runtime on instantiation of classes inheriting from a protocol. That said, explicit subclassing is entirely optional. A tool like &lt;code&gt;mypy&lt;/code&gt; will be able to reason about protocols and their implementations based on method signatures alone. Think - abstract base classes light. Or, think - pythonic duck-typing augmented with static verification tooling.&lt;/p&gt;

&lt;p&gt;All that sounds very fancy, but what's the benefit of doing things this way? Let's have a look at what adding logging to our implementation might look like. Instead of adding the logging logic inside the &lt;code&gt;add&lt;/code&gt; method of the main implementation let's create a separate implementation that will satisfy the service protocol while also wrapping the service itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# service.py
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoggingAddService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Implements AddServiceProtocol. Wraps AddService and adds basic logging.
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AddServiceProtocol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[add] adding %s and %s gives %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use dependency injection and initialize the &lt;code&gt;LoggingAddService&lt;/code&gt; with a reference to an instance of a class that fulfills the &lt;code&gt;AddServiceProtocol&lt;/code&gt; contract and an instance of a &lt;code&gt;logging.Logger&lt;/code&gt;. When called, the &lt;code&gt;add&lt;/code&gt; method&lt;br&gt;
on &lt;code&gt;LoggingAddService&lt;/code&gt; runs the &lt;code&gt;add&lt;/code&gt; method on the &lt;code&gt;_inner&lt;/code&gt; class, while also logging the details of the call using the reference to the &lt;code&gt;_logger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What we have effectively created something like a middleware for our service, one we can safely compose with other similar wrappers as long as they also implement &lt;code&gt;AddServiceProtocol&lt;/code&gt;. Since we can, let's create another middleware, one that records how long it takes to add numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# service.py
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimingAddService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Implements AddServiceProtocol. Wraps AddService and adds timing of method calls.
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AddServiceProtocol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perf_counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perf_counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;elapsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"[add] took &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;elapsed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; seconds"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, it's all repetitive and a bit boring, but I'd argue this is a good thing! It doesn't take a lot of effort to understand what this code is doing, and once we've grokked the pattern, we'll recognize it immediately wherever it's applied. Since each layer exists as a separate unit with explicitly defined&lt;br&gt;
dependencies, each layer can be unit-tested in isolation. Finally, we've effectively deferred the decision about how the service should be configured - or wrapped - when it's executed. This decision can be in fact left to the user&lt;br&gt;
as the feature-dependent wrapping can be performed at runtime based on user-selected options.&lt;/p&gt;

&lt;p&gt;As means of demonstrating this last property, let's create a simple CLI tool for adding numbers - we'll add logging debug messages and timing reports as optional features that can be enabled using flags. I'm going to use &lt;a href="https://github.com/tiangolo/typer"&gt;typer&lt;/a&gt; to turn our service into a CLI application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# main.py
&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typer&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logger&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;std_out_logger&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;service&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AddService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AddServiceProtocol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LoggingAddService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimingAddService&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Adding 'a' to 'b' made easy!
    """&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AddServiceProtocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AddService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimingAddService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;std_out_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"timing"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoggingAddService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;std_out_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"logging"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; function is where we wire the parts of our application together. The individual components don't need to know about each other otherwise - all they care about is the contract represented by the protocol and whatever additional dependencies they require to do their thing. The various middlewares are layered on top of the core service based on the values of &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;timing&lt;/code&gt; flags. The main function becomes the only place where we use the conditionals that toggle the timing and logging features - just imagine what our code would look like if these had to be colocated with our business logic!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I first learned of this pattern in Go's &lt;a href="https://github.com/go-kit/kit"&gt;go-kit&lt;/a&gt; where I've seen it called "service middlewares". The &lt;a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612"&gt;Design Patterns&lt;/a&gt; book describes something similar as the "decorator" pattern - not to be confused with Python decorators, which have the unfortunate property of melding themselves with what they decorate, which limits their practical usefulness, at least as far as reducing coupling is concerned.&lt;/p&gt;

&lt;p&gt;A similar effect can also be achieved by means of class inheritance, although the composition-based solution will be more light-weight and flexible as you won't have to choose between pre-creating classes representing each possible permutation of wrappers (i.e. AddService, LoggingAddService, TimingAddService, LoggingAndTimingAddService, etc.) and overloading classes with features and responsibilities which might not be required in many runtime scenarios. Indeed, this particular pattern is a fine example of why composition might be preferable to inheritance in many cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A working example of the protocol-based implementation can be found &lt;a href="https://github.com/fwojciec/composition_using_protocols"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This post was originally posted &lt;a href="https://w11i.me/composition_using_protocols_in_python"&gt;on my blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/photos/US9Tc9pKNBU"&gt;Ryan Quintal&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>codequality</category>
      <category>architecture</category>
      <category>programming</category>
    </item>
    <item>
      <title>Web Development or App Development? Where to start?</title>
      <author>dee-ksha</author>
      <pubDate>Fri, 05 Nov 2021 03:09:19 +0000</pubDate>
      <link>https://dev.to/deeksha_51/web-development-or-app-development-where-to-start-59gl</link>
      <guid>https://dev.to/deeksha_51/web-development-or-app-development-where-to-start-59gl</guid>
      <description>&lt;p&gt;One common question that I have seen my peers ask is whether to start their development journey with Web development or App Development. Beginners in tech are often confused about the right choice to make because there is a wide variety of options and areas to explore.&lt;/p&gt;

&lt;p&gt;Web Development and App Development are emerging sectors for developers. Both the fields have their own benefits and complexities and require different skills, different markets and diversified usage. Therefore, there is no model answer to what you should be starting first.&lt;/p&gt;

&lt;p&gt;But according to my own experience I would suggest to go for web development first due to the following reasons:&lt;/p&gt;

&lt;p&gt;• App development is the fastest leading trend but web development is something that will never disappear. The web is the best platform for acquiring new users and building a brand. Nearly all brands that opt for an app-based approach build a website too in order to market and promote their app. &lt;/p&gt;

&lt;p&gt;• Web development is slightly easier to understand and apply than app development and it also lays down a framework which helps in many areas of app development as well like making an API, using different database technologies, working with server and backend etc.&lt;/p&gt;

&lt;p&gt;Whichever route you choose, you'll learn something great and there's no better time to kickstart your development journey than now. So, get yourself started now. Good luck!&lt;/p&gt;

&lt;p&gt;Be curious, Be Innovative and Keep Learning!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>appdev</category>
      <category>beginners</category>
      <category>developers</category>
    </item>
    <item>
      <title>Best programming languages to start your coding journey with</title>
      <author>dee-ksha</author>
      <pubDate>Fri, 05 Nov 2021 02:31:55 +0000</pubDate>
      <link>https://dev.to/deeksha_51/best-programming-languages-to-start-your-coding-journey-with-1lg5</link>
      <guid>https://dev.to/deeksha_51/best-programming-languages-to-start-your-coding-journey-with-1lg5</guid>
      <description>&lt;p&gt;Whether you are looking to start coding as a hobby or to pursue a career, the very first step is to decide which programming language to begin with.&lt;/p&gt;

&lt;p&gt;There are hundreds of programming languages in widespread use, each with it's own complexities, pros and cons. If you are a beginner then it might be confusing to choose where to start from, after all you will be putting time and efforts into learning so you would want to steer in the right direction.&lt;/p&gt;

&lt;p&gt;There are several things to consider while making your decision like: &lt;/p&gt;

&lt;p&gt;• The fields which are accompanied by the language&lt;br&gt;
• Speed and Efficiency&lt;br&gt;
• Portability&lt;br&gt;
• Degree of use&lt;br&gt;
• Level of the language&lt;br&gt;
• Developer Experience&lt;br&gt;
• Level of difficulty&lt;br&gt;
• Job opportunities&lt;br&gt;
• Support and Resources&lt;/p&gt;

&lt;p&gt;You should do a thorough research about the benefits and drawbacks of the language you want to choose, consider the above mentioned conditions along with your requirements and kickstart your coding journey. &lt;/p&gt;

&lt;p&gt;Be Curious and Keep Learning!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>cpp</category>
      <category>java</category>
    </item>
    <item>
      <title>How to Create a Tinder Clone Dating Web App In Node JS</title>
      <author>Hiep Le</author>
      <pubDate>Fri, 05 Nov 2021 02:27:38 +0000</pubDate>
      <link>https://dev.to/cometchat/how-to-create-a-tinder-clone-dating-web-app-in-node-js-545k</link>
      <guid>https://dev.to/cometchat/how-to-create-a-tinder-clone-dating-web-app-in-node-js-545k</guid>
      <description>&lt;p&gt;What you’ll be building, Git Repo &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mNw2kbja4GA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-articles"&gt;
  &lt;/a&gt;
  Featured Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-an-uber-clone-app-with-react-1l73"&gt;Uber Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-a-social-networking-site-with-next-js-facebook-clone-3eke"&gt;Facebook Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-a-javascript-chat-app-493c"&gt;Javascript Chat App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-a-java-voice-video-chat-app-for-android-3hd7"&gt;Voice &amp;amp; Video Chat App for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-add-mentions-to-a-react-chat-app-37gm"&gt;Add @Mentions to a React Chat App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to see more tutorials like this, you can check my profile 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;App and web development have come a long way over the last few years. We use a lot of dating sites every day, including Tinder, Bumble, OkCupid, Hinge, and so on. One of the most widely used features is Tinder. Using the &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start"&gt;CometChat&lt;/a&gt; &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;communications SDK&lt;/a&gt; and &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; backend services, you will learn how to build one of the best dating sites on the internet with minimal effort. This tutorial will help you to create a dating web app in Node.js.&lt;/p&gt;

&lt;p&gt;Follow along the steps to build a Tiner clone that will allow users:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;Functionality for end-users to login &amp;amp; register&lt;/li&gt;
&lt;li&gt;Functionality for users to create their own profiles like Tinder&lt;/li&gt;
&lt;li&gt;A way for users to look at other user-profiles and either accept or reject (swipe)&lt;/li&gt;
&lt;li&gt;A way for users to match and communicate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chat

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;CometChat JavaScript SDK&lt;/a&gt; and configure it such that-&lt;/li&gt;
&lt;li&gt;Only matched users can text chat, as well as voice &amp;amp; video, call each other&lt;/li&gt;
&lt;li&gt;Login the logged-in user to CometChat.&lt;/li&gt;
&lt;li&gt;Add API call when a user registers so that the user is created in CometChat
## Prerequisites&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To follow this tutorial, you must have a degree of understanding of the general use of &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt; database. This will help you to improve your understanding of this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;p&gt;To create a new project, you just need to create a folder which is called “tinder-clone” and then run “npm init”. After following the instruction, you will a brand new Node.js project. The image below reveals the project structure of our Tinder clone application. Make sure you see the folder arrangement before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atCKGCyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632758373480_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atCKGCyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632758373480_image.png" alt="Figure 1. Project Structure" width="224" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each subfolder and file will be explained in detail in the following section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;public:&lt;/strong&gt; contains all html, css, javascript files for the UI.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;routes:&lt;/strong&gt; contains all files that will be used to handle the API requests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;screenshots:&lt;/strong&gt; this folder contains images that are used for README.md file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.env:&lt;/strong&gt; contains environment variables that will be used in the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.gitignore:&lt;/strong&gt; this file contains files that will be ignored when committing the code. In this case, we do not want to commit the “config.js” file because it contains the secret keys of the Javascript chat application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;package.json:&lt;/strong&gt; contains all dependencies of the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;README.md:&lt;/strong&gt; describes the application and provides steps by steps to run the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tinder_clone.sql:&lt;/strong&gt; contains scripts that you need to use to create the database and its tables.
## Installing the Tinder Clone Dependencies&lt;/li&gt;
&lt;li&gt;Step 1: You need to have &lt;a href="https://nodejs.org/en"&gt;Node.js&lt;/a&gt; installed on your machine&lt;/li&gt;
&lt;li&gt;Step 2: Copy dependencies from the &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/package.json"&gt;package.json&lt;/a&gt; file.&lt;/li&gt;
&lt;li&gt;Step 3: Run “npm i” to install the dependencies for the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;If your MySQL server is incopatible with the mysql package because while setting up the MySQL server, you chose “Use Strong Password Encryption” instead of “Use Legacy Password Encryption”. You need to use “mysql2” package instead of mysql package.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-cometchat"&gt;
  &lt;/a&gt;
  Configuring CometChat
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Head to CometChat and &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=signup"&gt;create an account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;From the &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=signup"&gt;dashboard&lt;/a&gt;, add a new app called "chat-widget".&lt;/li&gt;
&lt;li&gt;Select this newly added app from the list.&lt;/li&gt;
&lt;li&gt;From the Quick Start copy the APP_ID, REGION, and AUTH_KEY, which will be used later.&lt;/li&gt;
&lt;li&gt;Also, copy the REST_API_KEY from the API &amp;amp; Auth Keys tab.&lt;/li&gt;
&lt;li&gt;Navigate to the Users tab, and delete all the default users and groups leaving it clean &lt;em&gt;(very important)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Create a file called “config.js” in the ”public/js” folder of your project.&lt;/li&gt;
&lt;li&gt;Import and inject your secret keys in the “config.js” file containing your CometChat in this manner.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAppId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatRegion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAuthKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAPIKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Make sure to include this file in your gitIgnore file from being exposed online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-database"&gt;
  &lt;/a&gt;
  Setting Up Database
&lt;/h2&gt;

&lt;p&gt;As mentioned above, we will use the MySQL database. For this reason, this section describes how to create the database and its table. Before proceeding, you need to make sure that you have installed the MySQL database on your computer already. To create the database and its table, you need to get the SQL &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/tinder_clone.sql"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The above sql specifies that we need to create tables - “user” and “match_request”. The user table is used to store user’s information for the application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id - id of the user. It will be increased automatically when a new user has been created.&lt;/li&gt;
&lt;li&gt;user_email - email of the user.&lt;/li&gt;
&lt;li&gt;user_password - password of the user.&lt;/li&gt;
&lt;li&gt;user_full_name - full name of the user.&lt;/li&gt;
&lt;li&gt;user_age - age of the user.&lt;/li&gt;
&lt;li&gt;user_avatar - avatar of the user.&lt;/li&gt;
&lt;li&gt;user_gender - gender of the user.&lt;/li&gt;
&lt;li&gt;user_cometchat_uid - CometChat uid of the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the requirement determines that we need a way for users to match and communicate. Therefore, the “match_request” table is created to help us store the match requests in the application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id - id of the match request. It will be increased automatically when a new user has been created.&lt;/li&gt;
&lt;li&gt;match_request_from - CometChat uid of the user who sent the match request.&lt;/li&gt;
&lt;li&gt;match_request_to - CometChat uid of the user who will receive the match request.&lt;/li&gt;
&lt;li&gt;match_request_sender - the sender name.&lt;/li&gt;
&lt;li&gt;match_request_receiver - the receiver name.&lt;/li&gt;
&lt;li&gt;match_request_status - status of the match request (0 is pending, 1 is accepted, -1 is rejected).&lt;/li&gt;
&lt;li&gt;created_date - the date that the match request has been sent.&lt;/li&gt;
&lt;li&gt;accepted_date - the date that the match_request has been accepted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from that, we are using Node.js with MySQL database. Hence, we need to connect to the database in our Node.js application, The best practice is to create a .env file and store environment variables. To create the .env file, please follow the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create a file which is call “.env” inside the root folder of your project.&lt;/li&gt;
&lt;li&gt;Step 2: Replace the below information with your database connection information.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_USER_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-a-nodejs-server"&gt;
  &lt;/a&gt;
  Create a Node.js Server
&lt;/h2&gt;

&lt;p&gt;Inside the root folder of your project, you need to create a file which is called “index.js”. The full source code of the index.js file can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/index.js"&gt;here&lt;/a&gt;. It is the main file that will be ran when running the following statements&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;nodemon&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;nodemon&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;*&lt;em&gt;Note: In this project, we will use the “&lt;/em&gt;&lt;a href="https://www.npmjs.com/package/nodemon"&gt;&lt;em&gt;nodemon&lt;/em&gt;&lt;/a&gt;&lt;em&gt;” library because  the application will be reloaded automatically whenever there is any change in your code.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The above code snippet specifies that we are including some libraries to help them create a server. In this case, we need to use the express framework and the multer library for uploading files because we are building a dating site in Node.js. Therefore, the application should allow the user to upload their avatar. Aside from that, the mysql library for connecting with the MySQL database and so on. The database connection information that will be read from the .env file and this file should be included in the .gitignore file.&lt;br&gt;
On the other hand, we are requiring all API routes of the application at line 53. However, we have not define it, yet. Please do not worry about it, we will discuss about it in the following section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbConn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;constants&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-routes-folder"&gt;
  &lt;/a&gt;
  Creating the Routes Folder.
&lt;/h2&gt;

&lt;p&gt;The routes folder will contain API routes in the application. Inside this folder, we need to create another “index.js” file. We will export a function that will take responsibility for combining all API routes, that function accepts an object as a parameter. The object will contain the express app object, the database connector object, the upload object - created by the multer library, and the constants. Those objects will be used in different API routes as you can see in the below code snippet. The full source code of the “index.js” file can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;Note: We will define three API routes in the application. the “authRoutes” is used for authenticated purpose, the “userRoutes” is used for user management. The last but not least, the “matchRequestRoutes” is used to manage the matching requests in the application. All of them will be discussed in the following section.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-apis-with-nodejs"&gt;
  &lt;/a&gt;
  Creating APIs with Node.js
&lt;/h2&gt;

&lt;p&gt;In this section, we will develop the APIs that will be needed to build our Tinder clone. The below endpoints describes the information about the APIs for the application. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/login&lt;/strong&gt;: check user’s credentials and ensure that the user can login to the application, or not.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hieptl@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123456&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/users/create&lt;/strong&gt;: create a new user in the application.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hieptl&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123456&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt;
&lt;span class="nx"&gt;ccUid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uid1&lt;/span&gt;
&lt;span class="nx"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hiep&lt;/span&gt;
&lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;jpeg&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/users/recommend&lt;/strong&gt;: get the recommended users. In this application, the recommended users need to follow some criteria, each user, which is in the list, should not have any matching request with the current user. Following that, the gender of each user should be opposite to the current user’s gender.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ccUid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/requests/create:&lt;/strong&gt; create a match requests between 2 users.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestFrom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestTo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestSender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hiep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestReceiver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-login-api"&gt;
  &lt;/a&gt;
  The Login API
&lt;/h2&gt;

&lt;p&gt;The login API will receive the user’s credentials and validate that information. If the user’s information is valid, the user can log in to the application and vice versa. To create the login API, you need to create the “auth.js” file inside the “routes” folder. The full source code of the login API can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/auth.js"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hieptl@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123456&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;its method is POST and the request payload should contain the user’s email and user’s password. If the user’s information is valid, the user’s gender and user’s CometChat uid will be returned back as a response object. Following that, a warning message will be returned if the user’s credentials are not valid. Your can refer to the code snippet below for more information. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-user-api"&gt;
  &lt;/a&gt;
  The User API
&lt;/h2&gt;

&lt;p&gt;This section will describe the APIs for user management. Firstly, we need to create the “users.js” file inside the “routes” folder. It will contains two API endpoints such as creating a new user account, recommend users based on the user’s gender and the CometChat uid. The full fouce code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/users.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-create-user-api"&gt;
  &lt;/a&gt;
  The Create User API
&lt;/h2&gt;

&lt;p&gt;In this part, we will develop an API to create a new account in the application. The API will have the below information. Its method is POST and we will send the form data format from the client side and the request should contain the user’s email, user’s password, user’s age, user’s gender, user’s avatar, user’s full name, and user’s CometChat uid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hieptl&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123456&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt;
&lt;span class="nx"&gt;ccUid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uid1&lt;/span&gt;
&lt;span class="nx"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hiep&lt;/span&gt;
&lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;jpeg&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The API should check the type of the avatar image. In this application, we allow the user to upload an image with jpeg format. Additionally, the above information is required. If you miss something in the request payload, a warning message will be returned back from the response. Moreover, the API will check the user’s email has been used in the application, or not. If it existed in the system, a warning message will be returned to inform the user about that. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-recommend-users-api"&gt;
  &lt;/a&gt;
  The Recommend Users API
&lt;/h2&gt;

&lt;p&gt;According to the requirements, we need to find a way for users to look at other user-profiles and either accept or reject (swipe). Hence, we will write an API to recommend users and show the list of recommended users on the UI. In this application, an user will be recommended if that user should not have any matching request with the current user. Following that, the gender of each user should be opposite to the current user’s gender. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/users.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-match-request-api"&gt;
  &lt;/a&gt;
  The Match Request API
&lt;/h2&gt;

&lt;p&gt;This section will describe the APIs for managing the matching requests. In the application, if the current user likes someone’s profile, the current user can swipe right or click on the heart icon. Firstly, we need to create the “requests.js” file inside the “routes” folder. It will contain an API endpoint and it is about creating a new matching request. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/requests.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-create-match-request-api"&gt;
  &lt;/a&gt;
  The Create Match Request API
&lt;/h2&gt;

&lt;p&gt;In this part, we will develop an API to create a matching request in the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestFrom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestTo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestSender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hiep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestReceiver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Its method is POST. The request payload will contain the below information.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;match_request_from - CometChat uid of the user who sent the match request.&lt;/li&gt;
&lt;li&gt;match_request_to - CometChat uid of the user who will receive the match request.&lt;/li&gt;
&lt;li&gt;match_request_sender - the sender name.&lt;/li&gt;
&lt;li&gt;match_request_receiver - the receiver name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The API will check the upcoming matching request has been created in the system, or not. If the matching request has been created, a warning message will be returned and let the user know about that. Following that, if the matching request has not been created, a new matching request will be created. You can refer to the code snippet below for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-client-side"&gt;
  &lt;/a&gt;
  Creating the Client Side
&lt;/h2&gt;

&lt;p&gt;We have finished creating APIs in the above sections. It is time to create the client side for our Tinder Clone. Inside the root folder, we need to create the “public” folder. The structure of the public folder should be as follow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1nugRch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632819348931_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1nugRch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632819348931_image.png" alt="Figure 2. Folder Structure - Public Folder." width="222" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each subfolder and file will be explained in detail in the following section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;css:&lt;/strong&gt; contains all styling for our javascript chat application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;img:&lt;/strong&gt; contains images for the application such as logo, background, and so on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;js:&lt;/strong&gt; contains Javascript code and our business logic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;favicon.ico:&lt;/strong&gt; it is favicon.ico for the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;index.html:&lt;/strong&gt; root HTML file. HTML file for the home page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;login.html:&lt;/strong&gt; HTML file for the login page.
## Configuring Styling for the Application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside our Tinder clone project structure, you need to create a styles.css file inside the “css” folder and paste the codes &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/css/styles.css"&gt;here&lt;/a&gt;. styles.css file will contain all CSS of the application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-images-for-the-application"&gt;
  &lt;/a&gt;
  Setting Up Images for the Application
&lt;/h2&gt;

&lt;p&gt;To store images for the application such as the logo and other images, you need to create the “img” folder inside your “public” folder. Following that, if you can refer to this &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/tree/main/public/img"&gt;link&lt;/a&gt; to get the images that will be used in this tutorial. If someone uploaded the avatar, that avatar will be stored in this folder. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-login-page"&gt;
  &lt;/a&gt;
  The Login Page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLwMjwT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829143358_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLwMjwT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829143358_image.png" alt="Figure 3. The Login Page." width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This page is responsible for authenticating users using the login API. It accepts the user credentials and either signs him/her up or in, depending on if he/she is new to our application. To create the login page for the Javascript chat application, you need to follow the below steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create login.html in the source folder. The source code can be found from &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/login.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You need to include some third-party libraries such as &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start"&gt;CometChat JS SDK&lt;/a&gt;, &lt;a href="https://github.com/uuidjs/uuid"&gt;Uuid&lt;/a&gt;, &lt;a href="https://github.com/validatorjs/validator.js/"&gt;Validator&lt;/a&gt; via CDN because you are building the Javascript chat app. Therefore, npm should not be used here. You need to add those libraries for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CometChat JS SDK: help us to integrate CometChat to the Javascript app. On the other hand, you need to use some other functionalities from CometChat such as registering a new user, letting the user log in to CometChat, or letting the user log out from CometChat.&lt;/li&gt;
&lt;li&gt;UUID: each created user should have a unique id. Hence, the UUID library is used to generate a unique key for each account.&lt;/li&gt;
&lt;li&gt;Validator: it is used to validate the login/sign-up form. Because you need to ensure that the input information is valid before creating a new account or letting a user log in to the chat application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides using third-party libraries, you need to build some files to handle the logic for the Tinder clone such as auth.js, config.js, util.js, login.js. Config.js were mentioned in the above sections. We will discuss auth.js, util.js, and login.js in the following parts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-authjs-file"&gt;
  &lt;/a&gt;
  The Auth.js File
&lt;/h2&gt;

&lt;p&gt;According to the requirements of the Tinder clone, the application needs to provide a way for users to login in and have a short profile. After the user has logged in to the application, the user cannot go back to the login page. On the other hand, if the user has not signed in to the application, the user cannot go to the home page. We need to define a solution to handle this case. Therefore, auth.js will be created to help us achieve that. The full source code can be found from &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/js/auth.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After the user has been logged in to the system, we will store the user’s information in the local storage. We will get the authenticated user from the local storage. Auth.js will be used on both the login page and the home page. It means that this file will be executed first before other actions. This file will take responsibility for checking the current user has logged in, or not. If the user has not logged in to the application, the user would be redirected to the login page. Otherwise, if the current user has logged in to the app, the user cannot go back to the login page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-utiljs-file"&gt;
  &lt;/a&gt;
  The Util.js File
&lt;/h2&gt;

&lt;p&gt;Some functionalities can be used across pages of the Javascript chat app such as showing or hiding the loading indicator or get the information of the authenticated user. To avoid duplicated code, you should store all common functionalities in a single file, and in this case, this file is called “util.js”. The full source code can found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/js/util.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-loginjs-file"&gt;
  &lt;/a&gt;
  The Login.js File
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqsb-A_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829191963_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqsb-A_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829191963_image.png" alt="Figure 4. The Login Page" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_m_QyUra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829284202_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_m_QyUra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829284202_image.png" alt="Figure 5. The Sign Up Form." width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The file will take responsibility for handling the business logic for the login page. This file contains functions which can let the user register a new account or log in to the application. The full source code can be found from &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/tree/main/public/js"&gt;here&lt;/a&gt;.&lt;br&gt;
After clicking the sign-up button, the “registerNewAccount” function will be triggered. It accepts a JSON object as a parameter and the JSON object contains the user’s information including the user’s email, user’s password, user’s avatar, user’s age, user’s gender, and user’s full name. Before proceeding with further actions, the user’s information needs to be validated by using the “validateNewAccount” function. If the information is valid, a new account will be created by calling the create user API. After that, the application registers an account on CometChat by using the CometChat JS SDK. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To log in to the Tinder clone, the user needs to click on the “Login” button. The below code snippet describes how to handle the business logic for the sign-in feature. the user’s credentials will be taken from the input elements first and the application validates that information. If the input information is valid, the application will let the user sign in by using the Login API. Aside from that, the authenticated user will be redirected to the home page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-home-page"&gt;
  &lt;/a&gt;
  The Home Page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-XQvWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351251060_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-XQvWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351251060_image.png" alt="Figure 6. The Home Page" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the user has logged in to the application, the user will be redirected to the home page and on this page, you will use CometChat JS SDK to build the application. To create the home page, you need to follow the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create index.html file in your project folder. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/index.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As you can see on the code snippet above, you need to include the CometChat JS SDK from the CDN because we want to integrate the chat feature, and voice/video calling in the Tinder clone. Following that, jQuery, and jQuery mobile are also added to create the swipe effect. Moreover, the “toastr” library will be included to show the notification in the application. You also need to include some common files, which were mentioned in the above sections, such as auth.js, config.js, util.js. The index.js file will be discussed in the following part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-indexjs-file"&gt;
  &lt;/a&gt;
  The Index.js File
&lt;/h2&gt;

&lt;p&gt;This file will take responsibility for showing greeting to the authenticated user on the header, showing the list of recommended users including the swipe effects, showing the list of friends, creating a match request, accepting the matching requests, handling the logic when clicking on the “Logout” button and integrating the chat feature and voice/video calling. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/js/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-header"&gt;
  &lt;/a&gt;
  The Header
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JnZkAd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351291873_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JnZkAd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351291873_image.png" alt="Figure 7. The Header." width="267" height="91"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to show greeting to the authenticated user on the header. To achieve that, we will get the information of the authenticated user from the local storage and then display that information on the header. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-recommended-users"&gt;
  &lt;/a&gt;
  The Recommended Users
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34GoBBVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632833757170_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34GoBBVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632833757170_image.png" alt="Figure 8. Recommended Users" width="429" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are building a dating site. Therefore, we need to show the list of recommended users to the current user. As mentioned before, the list of recommended users should not have any matching requests with the current user. Following that, the gender of each user should be opposite to the current user’s gender. To get the list of recommended users, we need to call the recommend user API. You can refer to the code snippet below for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Moreover, we need to handle the events when the user clicks on the heart icon or the cross icon, or swipe the suggested user’s profile to left/right. the “swipeRight” and “swipeLeft” functions will help us to achieve the swipe effect when the user swipes the suggested profiles to left/right. Following that, after swiping right, the application will create a matching request. If both of them accept each other. It means that the status of the match request is approved. We will call the “addFriend” function. The “addFriend” function will take responsibility for creating a new friendship on the CometChat service. Following that, we will show a toast message and call the “sendNotification” function. To receive the notification in real-time, we will create the “listenForNotifications” function and then call it from the beginning. Following that, the custom type for the notification needs to be specified and in this case, it is “match”. It means that whenever a new notification is coming with the “match” type, the application needs to display the notification on the UI to inform the end-user about he/she has been matched with someone.  It will help us to increase the user experience of the application. You can refer to the below image and code snippet for more information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8K7mlE61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633667773070_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8K7mlE61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633667773070_image.png" alt="Figure 9. Show a notification when two users have been matched." width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-matched-users-list"&gt;
  &lt;/a&gt;
  The Matched Users List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNSs84K3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632836315758_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNSs84K3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632836315758_image.png" alt="Figure 10. The Matched User List" width="434" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To show the list of matched users for the current user, we need to call the CometChat API. You can refer to the code snippet below for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-chat-box"&gt;
  &lt;/a&gt;
  The Chat Box
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7C9K5QPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633352094712_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7C9K5QPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633352094712_image.png" alt="Figure 11. The Chat Box." width="206" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the user selects any items from the matched users. The chatbox will be opened with support from the “openChatBox” function. Aside from that, the “loadMessages” function will be called to fetch the past messages. The “listenForMessages” function will be triggered to ensure that the current user will receive the messages from other users in real-time. To send the input message or make a call between different users, we will get support from the CometChat JS SDK. &lt;br&gt;
Your can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Furthermore, to increase the user experience of the application, we need to show a toast message when there is a new coming message. Therefore, the user will know about there is a new message from another user. In order to achieve that, we need to call the “sendNotification” function, and to receive the notification in real-time, the “listenForNotification” will be called from the beginning. You can refer to the below UI for more information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1X4w3TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633668659918_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1X4w3TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633668659918_image.png" alt="Figure 12. Show notification when there is a new coming message." width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to create a way to let the user make a audio call or video call. To achieve that features, you need to follow the guidelines from &lt;a href="https://prodocs.cometchat.com/docs/js-calling-default-calling?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=documentation"&gt;the CometChat documentation&lt;/a&gt;. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-logout-button"&gt;
  &lt;/a&gt;
  The Logout Button
&lt;/h2&gt;

&lt;p&gt;To logout from the system, the user needs to click on the “exit” icon. We will call the logout function from the CometChat JS SDK and then the authenticated information will be cleared from the local storage.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, we have done an amazing job in developing a dating site by leveraging Node.js, and &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;CometChat JS SDK&lt;/a&gt;. You’ve been introduced to the chemistry behind the Tinder clone and how the &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;CometChat JS SDK&lt;/a&gt; makes chat applications buildable.&lt;br&gt;
You have seen how to integrate most of the CometChat functionalities such as texting and real-time messaging. I hope you enjoyed this tutorial and that you were able to successfully build the Tinder clone. It's time to get busy and build other related applications with the skills you have gotten from this tutorial. You can start building your chat app for free by &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=signup"&gt;signing up to the cometchat dashboard&lt;/a&gt; here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the Author
&lt;/h2&gt;

&lt;p&gt;Hiep Le is a software engineer. He takes a huge interest in building software products and is a full-time software engineer. Most of his work is focused on one thing - to help people learn.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>40+ ReactJS Projects for Beginners – Easy Ideas to Get Started Coding [Beginners - Advance]</title>
      <author>JavaScript</author>
      <pubDate>Fri, 05 Nov 2021 02:19:01 +0000</pubDate>
      <link>https://dev.to/reactjss/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-22i2</link>
      <guid>https://dev.to/reactjss/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-22i2</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://codersera.com/blog/native-apps-vs-web-apps-which-is-best-for-your-business/" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/tag/reactjs-projects-for-beginners/&amp;amp;ved=2ahUKEwjAyN6D__7zAhWDf30KHcKYCAUQFnoECDIQAQ&amp;amp;usg=AOvVaw3aSVrBBd-RROVGkfKEip0e"&gt;40+ ReactJS Projects for Beginners – Easy Ideas to Get Started Coding&lt;/a&gt;&lt;/b&gt;  &lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 reasons why you should use PropelAuth</title>
      <author>propelauthblog</author>
      <pubDate>Fri, 05 Nov 2021 01:45:35 +0000</pubDate>
      <link>https://dev.to/propelauth/5-reasons-why-you-should-use-propelauth-56b9</link>
      <guid>https://dev.to/propelauth/5-reasons-why-you-should-use-propelauth-56b9</guid>
      <description>&lt;p&gt;PropelAuth is a hosted, configurable authentication service. Below are five reasons why you should consider it for your product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-full-auth-ux-before-you-write-any-code"&gt;
  &lt;/a&gt;
  1. Full Auth UX before you write any code
&lt;/h2&gt;

&lt;p&gt;Once you sign up for PropelAuth, you immediately have your own authentication service. This includes a lot behind the scenes, but to your end-users, the first thing they will see is this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqmU0mlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmcgk9u65rl28tdvpfkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqmU0mlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmcgk9u65rl28tdvpfkq.png" alt="Initial screen" width="300" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can brand your site easily by supplying your product's colors and a logo. This branding applies not only to all your auth pages, but also to any emails that we send (forgotten passwords, email confirmations, user invites, etc.).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ur8nqE8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcje2rhiabxyht7dla0z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ur8nqE8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcje2rhiabxyht7dla0z.gif" alt="A user configuring hosted pages" width="800" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, this branding includes the URL your customers are on. We support custom domains so your users see your auth pages on &lt;code&gt;https://auth.yourdomain.com&lt;/code&gt;, not &lt;code&gt;https://yourname.propelauth.com&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-easily-extensible"&gt;
  &lt;/a&gt;
  2. Easily extensible
&lt;/h2&gt;

&lt;p&gt;Since PropelAuth hosts your auth pages, we simplify auth integrations. Below you can see a user adding a "Sign in with Google" button (commonly called social login). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m6v7ZewK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gspivfdul24qd4z89cr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6v7ZewK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gspivfdul24qd4z89cr.gif" alt="A user configuring hosted pages" width="600" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don't need to worry about managing an OAuth flow or setting up redirect pages. Add your configuration, click save, and your users can sign in with Google.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-out-of-the-box-b2b-support"&gt;
  &lt;/a&gt;
  3. Out of the box B2B support
&lt;/h2&gt;

&lt;p&gt;For B2B auth, each user can belong to one or more "organizations". Most auth tools leave adding this as an exercise for you or there are a lot of missing features.&lt;/p&gt;

&lt;p&gt;With PropelAuth, B2B auth is a first-class feature. If enabled, your hosted pages includes customer portals so your end-users can create and manage their organizations. We provide hierarchical roles that are both easy to understand and supports most B2B auth use cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deAZOJjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcjzxap2rt9zm2ndkg0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deAZOJjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcjzxap2rt9zm2ndkg0y.png" alt="A customer portal for managing FakeCorps org" width="700" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our libraries hide a lot of the complexities of B2B auth. For Flask (python), for example we have the &lt;code&gt;@auth.require_org_member&lt;/code&gt; decorator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/org/&amp;lt;org_id&amp;gt;/admin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require_org_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimum_required_role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UserRole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;admin_only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"You are at least an admin in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;current_org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which makes sure the request is from a valid user, that is a member of a specified organization, and is at least an &lt;code&gt;Admin&lt;/code&gt; within that organization.&lt;/p&gt;

&lt;p&gt;Since we are talking about libraries...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-easy-to-use-libraries"&gt;
  &lt;/a&gt;
  4. Easy to use libraries
&lt;/h2&gt;

&lt;p&gt;Once you've set up your auth pages, you need to integrate your product. It is our job to understand auth, not yours. Our libraries are easily used by anyone - security background or not.&lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://docs.propelauth.com/getting-started/frontend-integration/"&gt;frontend libraries&lt;/a&gt; integrate with your PropelAuth auth instance, allowing you to easily do things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determine if the current user is logged in or not&lt;/li&gt;
&lt;li&gt;Get metadata for the current user&lt;/li&gt;
&lt;li&gt;Make authenticated requests to your backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, our &lt;a href="https://docs.propelauth.com/getting-started/backend-integration/"&gt;backend libraries&lt;/a&gt; allow your backend to easily:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reject unauthenticated requests&lt;/li&gt;
&lt;li&gt;Understand which user made a request&lt;/li&gt;
&lt;li&gt;Get user metadata for any user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's more to discover, but with these building blocks you can quickly and easily build a secure product.&lt;/p&gt;

&lt;p&gt;We currently support React + vanilla Javascript on the frontend and Node/Express + Flask on the backend. If you want to use a language or framework that you use that we don't yet support, please reach out at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-clear-documentation"&gt;
  &lt;/a&gt;
  5. Clear documentation
&lt;/h2&gt;

&lt;p&gt;We consider documentation to be one of the most important parts of our product. &lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://docs.propelauth.com"&gt;documentation&lt;/a&gt; includes &lt;a href="https://docs.propelauth.com/getting-started/"&gt;a step-by-step getting started guide&lt;/a&gt;, &lt;a href="https://docs.propelauth.com/example-apps/"&gt;example apps built from scratch&lt;/a&gt;, &lt;a href="https://blog.propelauth.com/adding-auth-to-b2c-comments/"&gt;guide where we added auth to an existing app&lt;/a&gt;, and &lt;a href="https://docs.propelauth.com/reference/"&gt;full references for our libraries&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-its-free-to-try"&gt;
  &lt;/a&gt;
  Bonus: It's free to try
&lt;/h2&gt;

&lt;p&gt;Lastly, it's free to try out locally. You only pay when you want to go live. Check us out at &lt;a href="https://www.propelauth.com"&gt;https://www.propelauth.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions/thoughts for us, please reach out at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>auth</category>
      <category>tooling</category>
      <category>security</category>
    </item>
    <item>
      <title>Windows Custom Terminal</title>
      <author>Ushieru Kokoran</author>
      <pubDate>Fri, 05 Nov 2021 01:35:20 +0000</pubDate>
      <link>https://dev.to/ushieru/windows-custom-terminal-2b1g</link>
      <guid>https://dev.to/ushieru/windows-custom-terminal-2b1g</guid>
      <description>&lt;p&gt;Hace poco que volví a usar windows por el anuncio de W11.&lt;br&gt;
Mientras buscaba terminales que funcionaran bien; me decidí por &lt;strong&gt;Windows Terminal&lt;/strong&gt;, si bien esta ya cuenta con personalización de colores, no era exactamente lo que estaba buscando. Así que hoy te mostrarte como pasar de esto -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sqQM8TgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20440dhtdn9f42lortxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqQM8TgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20440dhtdn9f42lortxw.png" alt="Terminal" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a esto -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wja-a124--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67soo4npzu3htb88sq6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wja-a124--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67soo4npzu3htb88sq6f.png" alt="Custom Terminal" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#paso-1"&gt;
  &lt;/a&gt;
  Paso 1
&lt;/h3&gt;

&lt;p&gt;Asegurémonos de tener &lt;strong&gt;winget&lt;/strong&gt; disponible en nuestra terminal, sino quizá deberías actualizar tu &lt;a href="https://www.microsoft.com/store/productId/9NBLGGH4NNS1"&gt;App Installer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#paso-2"&gt;
  &lt;/a&gt;
  Paso 2
&lt;/h2&gt;

&lt;p&gt;Instalar &lt;a href="https://ohmyposh.dev/"&gt;Oh My Posh&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;winget &lt;span class="nb"&gt;install &lt;/span&gt;JanDeDobbeleer.OhMyPosh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-3"&gt;
  &lt;/a&gt;
  Paso 3
&lt;/h2&gt;

&lt;p&gt;Crear un perfil de powershell, para esto el mismo Microsoft nos da unos pasos muy sencillos a seguir.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para crear el perfil
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!(&lt;/span&gt;Test-Path &lt;span class="nt"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  New-Item &lt;span class="nt"&gt;-ItemType&lt;/span&gt; File &lt;span class="nt"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt; &lt;span class="nt"&gt;-Force&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Para editar el perfil
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;notepad &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-3"&gt;
  &lt;/a&gt;
  Paso 3
&lt;/h2&gt;

&lt;p&gt;Agregar la configuración a $PROFILE para iniciar la terminal con oh-my-posh.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;oh-my-posh &lt;span class="nt"&gt;--init&lt;/span&gt; &lt;span class="nt"&gt;--shell&lt;/span&gt; pwsh &lt;span class="nt"&gt;--config&lt;/span&gt; ~&lt;span class="se"&gt;\A&lt;/span&gt;ppData&lt;span class="se"&gt;\L&lt;/span&gt;ocal&lt;span class="se"&gt;\P&lt;/span&gt;rograms&lt;span class="se"&gt;\o&lt;/span&gt;h-my-posh&lt;span class="se"&gt;\t&lt;/span&gt;hemes&lt;span class="se"&gt;\j&lt;/span&gt;andedobbeleer.omp.json | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quizá para este punto te gastaría reiniciar el perfil para ver el resultado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
Si no utilizas alguna &lt;a href="https://www.nerdfonts.com/"&gt;NERD FONT&lt;/a&gt; es probable que no veas los iconos y solo veas unos cuadros feos por ahí.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#paso-4"&gt;
  &lt;/a&gt;
  Paso 4
&lt;/h2&gt;

&lt;p&gt;Instala la nerd font de tu preferencia para este ejemplo usare la de Hack Nerd Font, por que se parece un poco a la Jetbrains Mono que es la que utilizo para mi editor. Si eres bastante nuevo en esto te recomiendo solo instalar la &lt;strong&gt;regular complete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;para abrir las configuraciones de la terminal usa &lt;code&gt;ctrl + ,&lt;/code&gt; y busca &lt;strong&gt;Abrir archivo json&lt;/strong&gt; y lo modificamos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"profiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"defaults"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"fontFace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hack Nerd Font"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;AQUI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;VA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;TU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;FUENTE&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-5"&gt;
  &lt;/a&gt;
  Paso 5
&lt;/h2&gt;

&lt;p&gt;Busca el tema que mas te agrade y cámbialo a tu gusto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Get-ChildItem &lt;span class="nt"&gt;-Path&lt;/span&gt; &lt;span class="s2"&gt;"~&lt;/span&gt;&lt;span class="se"&gt;\A&lt;/span&gt;&lt;span class="s2"&gt;ppData&lt;/span&gt;&lt;span class="se"&gt;\L&lt;/span&gt;&lt;span class="s2"&gt;ocal&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rograms&lt;/span&gt;&lt;span class="se"&gt;\o&lt;/span&gt;&lt;span class="s2"&gt;h-my-posh&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;hemes&lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-Include&lt;/span&gt; &lt;span class="s1"&gt;'*.omp.json'&lt;/span&gt; | Sort-Object Name | ForEach-Object &lt;span class="nt"&gt;-Process&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$esc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;char]27
    Write-Host &lt;span class="s2"&gt;""&lt;/span&gt;
    Write-Host &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$esc&lt;/span&gt;&lt;span class="s2"&gt;[1m&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;.BaseName&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$esc&lt;/span&gt;&lt;span class="s2"&gt;[0m"&lt;/span&gt;
    Write-Host &lt;span class="s2"&gt;""&lt;/span&gt;
    oh-my-posh &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;.FullName&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--pwd&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;
    Write-Host &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Una vez que te decidas que tema utilizar solo cambialo en tu $PROFILE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;notepad &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;oh-my-posh &lt;span class="nt"&gt;--init&lt;/span&gt; &lt;span class="nt"&gt;--shell&lt;/span&gt; pwsh &lt;span class="nt"&gt;--config&lt;/span&gt; ~&lt;span class="se"&gt;\A&lt;/span&gt;ppData&lt;span class="se"&gt;\L&lt;/span&gt;ocal&lt;span class="se"&gt;\P&lt;/span&gt;rograms&lt;span class="se"&gt;\o&lt;/span&gt;h-my-posh&lt;span class="se"&gt;\t&lt;/span&gt;hemes&lt;span class="se"&gt;\A&lt;/span&gt;QUI_VA_EL_NOMBRE_DEL_TEMA_QUE_TE_HAYA_GUSTADO.omp.json | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;reinicia el perfil&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-6"&gt;
  &lt;/a&gt;
  Paso 6
&lt;/h2&gt;

&lt;p&gt;Quieres ir un poco mas allá? modifica el tema predeterminado a tu gusto. Exporta una copia del tema, haz todas las modificaciones que quieras y cambia la dirección del archivo a cargar en tu $PROFILE, mucha suerte.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Export-PoshTheme &lt;span class="nt"&gt;-FilePath&lt;/span&gt; &lt;span class="s2"&gt;"~/.AQUI_VA_EL_NOMBRE_DEL_TEMA_QUE_QUIERAS_MODIFICAR.omp.json"&lt;/span&gt; &lt;span class="nt"&gt;-Format&lt;/span&gt; json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tienes alguna duda? Déjala en los comentarios 👀👀&lt;br&gt;
Happy hacking 🧑‍💻&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>windows</category>
      <category>spanish</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What’s the model?</title>
      <author>Fernando Martín Ortiz</author>
      <pubDate>Fri, 05 Nov 2021 01:28:22 +0000</pubDate>
      <link>https://dev.to/fmo91/whats-the-model-4nok</link>
      <guid>https://dev.to/fmo91/whats-the-model-4nok</guid>
      <description>&lt;p&gt;I teach iOS development as a side job. I work 9-5 (well, actually, it’s a bit earlier than that, since I’m working for an English company at this moment). After I finish working, three times a week, I teach iOS development to different people, for two hours. They are starting their careers, and they are developing their intuition about software engineering.&lt;/p&gt;

&lt;p&gt;That’s really interesting from the point of view of somebody who has been in the industry for some years now. It’s good to remember how you started and what errors did you make at the beginning. &lt;/p&gt;

&lt;p&gt;Today, I’m going to talk to you about an error I see over and over again, and recently, I think I reached a way of making people think about it, and reason about it.&lt;/p&gt;

&lt;p&gt;Imagine you are developing an app for ordering food from restaurants: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have a listwith different dishes and options. &lt;/li&gt;
&lt;li&gt;You can add more units of any of the options you have in the list.&lt;/li&gt;
&lt;li&gt;Each item in the list has the number of items of that type you’ve already added, it will let you add or sub any number of items at any moment.&lt;/li&gt;
&lt;li&gt;Whenever you add food, there is a shopping cart or something like that at the bottom of the screen where you can see immediately updated the price of the food you’re buying.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fairly simple, straightforward problem.&lt;/p&gt;

&lt;p&gt;So, here is the thing. There are many ways on how to develop something like that. Imagine you’re using UIKit for now, and not SwiftUI. You would have tableView or collectionView cells for the items in the list, and you would sum to the amount that you have in the bottom.&lt;/p&gt;

&lt;p&gt;This is how people tend to design these kind of apps when they start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They detect the event to add more items of a certain type. &lt;/li&gt;
&lt;li&gt;They check the label in the cell to know how many items of that type they have already added.&lt;/li&gt;
&lt;li&gt;They add one to that number.&lt;/li&gt;
&lt;li&gt;They update the label in the cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And they have similar solutions for the different parts of the UI in this and similar problems. &lt;strong&gt;They rely on the UI as the source of truth.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So I started to ask them: &lt;strong&gt;What is the model?&lt;/strong&gt;. I start any exercise with them in the same way. Regardless of how simple of complex a screen is, I start asking them: What is the model in this UI?&lt;/p&gt;

&lt;p&gt;The other thing that’s related to this I use to tell them from the very beginning is: We are UI developers. As UI developers, our goal isn’t only to deliver delightful UIs with animations and beatiful graphics. &lt;strong&gt;Our goal is to ensure consistency between the model and the UI.&lt;/strong&gt; The part about the UI is usually easily understandable. The part about the model is very hard to understand when you’re starting.&lt;/p&gt;

&lt;p&gt;Our goal is to ensure consistency between the model and the UI. You have a UI, what is the model?&lt;/p&gt;

</description>
      <category>ios</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tutorial: Write Your First JavaScript Program</title>
      <author>Edwin Torres ✨</author>
      <pubDate>Fri, 05 Nov 2021 00:37:49 +0000</pubDate>
      <link>https://dev.to/realedwintorres/tutorial-write-your-first-javascript-program-2aoo</link>
      <guid>https://dev.to/realedwintorres/tutorial-write-your-first-javascript-program-2aoo</guid>
      <description>&lt;p&gt;JavaScript programs execute in the browser. That means you need an HTML document. Here is a simple one to start with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is a very basic HTML document that doesn’t do much. For now, save it to a file named &lt;code&gt;helloworld.html&lt;/code&gt;. The &lt;code&gt;.html&lt;/code&gt; extension indicates that the file is an HTML document.&lt;/p&gt;

&lt;p&gt;Now add JavaScript to the HTML document. Write JavaScript code inside a &lt;code&gt;&amp;lt;script&amp;gt; &amp;lt;/script&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This JavaScript code declares a variable &lt;code&gt;s&lt;/code&gt; and assigns the string &lt;code&gt;"Hello, world."&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;Next, it outputs &lt;code&gt;s&lt;/code&gt; to the document.&lt;/p&gt;

&lt;p&gt;Finally, it outputs &lt;code&gt;s&lt;/code&gt; to the console.&lt;/p&gt;

&lt;p&gt;To execute the JavaScript code, double-click the &lt;code&gt;helloworld.html&lt;/code&gt; file. The program will execute in your browser. Note the output in the body of the document.&lt;/p&gt;

&lt;p&gt;To see the console output, view the browser console:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right-click anywhere in the document and click &lt;em&gt;Inspect&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Expand the browser window wide.&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Console&lt;/em&gt; tab in the top-right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🏆 Congratulations! That’s your first JavaScript program!&lt;/p&gt;

&lt;p&gt;Now you can explore and learn the rest of the JavaScript language.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; for more programming tips. 😀&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
    </item>
  </channel>
</rss>
