<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>All of my Telegram bots</title>
      <author>Lucifer25x</author>
      <pubDate>Fri, 26 Nov 2021 18:58:40 +0000</pubDate>
      <link>https://dev.to/lucifer25x/all-of-my-telegram-bots-2l8o</link>
      <guid>https://dev.to/lucifer25x/all-of-my-telegram-bots-2l8o</guid>
      <description>&lt;p&gt;Bot list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quiz Bot &lt;/li&gt;
&lt;li&gt;Quote Bot (with own API)&lt;/li&gt;
&lt;li&gt;Secure Message Bot&lt;/li&gt;
&lt;li&gt;Logo creator Bot&lt;/li&gt;
&lt;li&gt;Word game Bot&lt;/li&gt;
&lt;li&gt;User info Bot&lt;/li&gt;
&lt;li&gt;Youtube Bot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source code: &lt;br&gt;
&lt;a href="https://github.com/Lucifer25x/telegram-bots"&gt;https://github.com/Lucifer25x/telegram-bots&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>node</category>
      <category>github</category>
    </item>
    <item>
      <title>Decode Adapter Pattern</title>
      <author>Gaurav</author>
      <pubDate>Fri, 26 Nov 2021 18:37:59 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/decode-adapter-pattern-2i4p</link>
      <guid>https://dev.to/gauravratnawat/decode-adapter-pattern-2i4p</guid>
      <description>&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To wrap an existing class with a new interface.&lt;/li&gt;
&lt;li&gt;To perform impedance matching&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#intent"&gt;
  &lt;/a&gt;
  Intent
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Target - defines the domain-specific interface that Client uses.&lt;/li&gt;
&lt;li&gt;Adapter - adapts the interface Adaptee to the Target interface.&lt;/li&gt;
&lt;li&gt;Adaptee - defines an existing interface that needs adapting.&lt;/li&gt;
&lt;li&gt;Client - collaborates with objects conforming to the Target interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Before&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---J74H924--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5h0wlv3jkbquq00esps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---J74H924--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5h0wlv3jkbquq00esps.png" alt="Adaptor before"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OkBjoMAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/166t6g4bytmx1mfwoqy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OkBjoMAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/166t6g4bytmx1mfwoqy9.png" alt="Adaptor after"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Assume that you have an e-commerce application which is serving your customers for a long time. This e-commerce application is using a Legacy Order Management System (OMS). Due to the high maintenance cost and degraded performance of the legacy OMS software, you have decided to use a cheap and efficient OMS software which is readily available in the market. However, you realize that the interfaces are different in the new software and it requires a lot of code change in the existing e-commerce application.&lt;/p&gt;

&lt;p&gt;Adapter design pattern can be very useful in these situations. Instead of modifying your e-commerce application to use the new interfaces, you can write a 'wrapper' class that acts as a bridge between your e-commerce application and the new OMS software. With this approach, the e-commerce application can still use the old interface.&lt;/p&gt;

&lt;p&gt;Adapter design pattern can be implemented in two ways. One using the inheritance method (Class Adapter) and second using the composition (Object Adapter). The following example depicts the implementation of Object adapter.&lt;/p&gt;

&lt;p&gt;1 Below is the code that uses the LegacyOMS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

public class Item {
  private String name;
  private double price;

  public Item(String name, double price) {
    this.name = name;
    this.price = price;
  }

  public String getName() {
    return name;
  }

  public double getPrice() {
    return price;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

public class Payment {

  public String type;
  public double amount;

  public Payment(String type, double amount) {
    super();
    this.type = type;
    this.amount = amount;
  }

  public void pay() {
    System.out.println(type + " " + amount + "$");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

import java.util.ArrayList;
import java.util.List;

public class LegacyOMS {

  /* The Legacy OMS accepts input in XML format */

  List cart = new ArrayList();
  List payments = new ArrayList();

  public void addItem(Item itemXml) {
    cart.add(itemXml);
    System.out.println(itemXml.getName() + " " + itemXml.getPrice());
  }

  public void makePayment(Payment paymentXml) {
    payments.add(paymentXml);
    paymentXml.pay();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 The client code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import com.gaurav.adapter.Item;
import com.gaurav.adapter.OMSAdapter;
import com.gaurav.adapter.Payment;

public class AdapterClient {

  public static void main(String[] args) {

    /* Create an order and add items */

    LegacyOMS oms = new LegacyOMS();

    oms.addItem(new Item("Italian Pizza", 6.99));
    oms.addItem(new Item("Wine", 9.99));
    oms.addItem(new Item("Beer", 5.99));
    oms.addItem(new Item("Red Apple", 1.49));
    oms.addItem(new Item("Almonds", 11.99));

    System.out.println("---------------------------------");
    /* Create payment and make payment */
    oms.makePayment(new Payment("CASH", 20.00));
    oms.makePayment(new Payment("CREDIT", 10.00));
    oms.makePayment(new Payment("DEBIT", 10.00));
    System.out.println("---------------------------------");

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 When the OMS needs to be swapped, you can simply create an Adapter class with same interface that the client uses. This adapter/wrapper class "maps" the client interface to the adaptee (New OMS) interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

import java.util.ArrayList;
import java.util.List;

public class NewOMS {

  /* The new OMS accepts input in JSON format */

  List cart = new ArrayList();
  List payments = new ArrayList();

  public void addToBasket(Item itemJson) {
    cart.add(itemJson);
    System.out.println(itemJson.getName() + " " + itemJson.getPrice());
  }

  public void pay(Payment paymentJson) {
    payments.add(paymentJson);
    paymentJson.pay();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.adapter;

public class OMSAdapter {

  /* Object Adapter uses composition */
  private NewOMS newOMS;

  public OMSAdapter() {
    newOMS = new NewOMS();
  }

  public void addItem(Item item) {
    convertXmlToJson(item);
    newOMS.addToBasket(item);
  }

  public void makePayment(Payment p) {
    convertXmlToJson(p);
    newOMS.pay(p);
  }

  /* The new OMS accepts only Json input.
   * Convert the client requests from XML to Json*/
  private void convertXmlToJson(Object o) {
    System.out.println("Converted from XML to JSON");
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4 The new client code. The client interacts in the same way as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import com.gaurav.adapter.Item;
import com.gaurav.adapter.OMSAdapter;
import com.gaurav.adapter.Payment;

public class AdapterClient {

  public static void main(String[] args) {

    /* Create an order and add items */

    //LegacyOMS oms = new LegacyOMS();
    /* Use Adapter class with the same interface */
    OMSAdapter oms = new OMSAdapter();

    oms.addItem(new Item("Italian Pizza", 6.99));
    oms.addItem(new Item("Wine", 9.99));
    oms.addItem(new Item("Beer", 5.99));
    oms.addItem(new Item("Red Apple", 1.49));
    oms.addItem(new Item("Almonds", 11.99));

    System.out.println("---------------------------------");
    /* Create payment and make payment */
    oms.makePayment(new Payment("CASH", 20.00));
    oms.makePayment(new Payment("CREDIT", 10.00));
    oms.makePayment(new Payment("DEBIT", 10.00));
    System.out.println("---------------------------------");

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[output]
Italian Pizza   6.99
Wine            9.99
Beer            5.99
Red Apple       1.49
Almonds        11.99
---------------------------------
CASH    20.0$
CREDIT  10.0$
DEBIT   10.0$
---------------------------------

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Class adapter can override adaptee's behavior.&lt;/li&gt;
&lt;li&gt;Objects adapter allows a single adapter to work with many adaptees.&lt;/li&gt;
&lt;li&gt;Helps achieve reusability and flexibility.&lt;/li&gt;
&lt;li&gt;Client class is not complicated by having to use a different interface and can use polymorphism to swap between different implementations of adapters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Object adapter involves an extra level of indirection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real World Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Power adapters&lt;/li&gt;
&lt;li&gt;Memory card adapters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#software-examples"&gt;
  &lt;/a&gt;
  Software Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Wrappers used to adopt 3rd parties libraries and frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#java-sdk-examples"&gt;
  &lt;/a&gt;
  Java SDK Examples
&lt;/h4&gt;

&lt;p&gt;java.util.Arrays asList()&lt;br&gt;
java.util.Collections list()&lt;br&gt;
java.util.Collections enumeration()&lt;br&gt;
java.io.InputStreamReader(InputStream) (returns a Reader)&lt;br&gt;
java.io.OutputStreamWriter(OutputStream) (returns a Writer)&lt;/p&gt;

&lt;p&gt;Want to discuss more &lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/gauravratnawat"&gt;Lets have a Coffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>pattern</category>
      <category>java</category>
      <category>design</category>
      <category>architecture</category>
    </item>
    <item>
      <title>State Management for your React Apps - Simplified!</title>
      <author>Fahad Imran</author>
      <pubDate>Fri, 26 Nov 2021 18:29:00 +0000</pubDate>
      <link>https://dev.to/fahadim87/state-management-for-your-react-apps-simplified-6fm</link>
      <guid>https://dev.to/fahadim87/state-management-for-your-react-apps-simplified-6fm</guid>
      <description>&lt;p&gt;Hi there fellow developers! 👋 In this blog, I will show you how to implement a scalable state management solution for your React apps - without the need of any third party library or toolkit! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you guys are unfamiliar with state management and why you might need it for your projects - there are countless (and I mean literally hundreds) of articles explaining the benefits of state management in frontend apps. I'll link to a great one &lt;a href="https://kentcdodds.com/blog/application-state-management-with-react"&gt;here&lt;/a&gt; so you can read to your heart's content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I am aware that there are many solutions for state management in React apps and you've probably heard the term &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt; thrown around when someone mentions React state management. &lt;/p&gt;

&lt;p&gt;Redux is a fantastic tool and is very popular in the React community - and rightly so. With its great documentation and robust set of developer tools it has become the gold standard for state management in frontend JavaScript apps.&lt;/p&gt;

&lt;p&gt;However, did you know that you can achieve similar results using native tools baked right into React? That's what we will attempt to accomplish today using React's &lt;a href="https://reactjs.org/docs/context.html"&gt;Context API&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Simply put Context API provides a way to pass data between React components without passing down props - something which can quickly become very cumbersome. Context API itself is cool and all - but combine it with React hooks and you're looking a pretty nice state management solution for your projects. And the &lt;strong&gt;best&lt;/strong&gt; thing - no dependencies and no need to install any third party library!&lt;/p&gt;

&lt;p&gt;I think I've taken way too long in explaining - now let's get to the fun part i.e. coding!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-write-some-code"&gt;
  &lt;/a&gt;
  Let's write some code!
&lt;/h3&gt;

&lt;p&gt;Implementing Context API requires 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating Context&lt;/li&gt;
&lt;li&gt;Creating a Provider component&lt;/li&gt;
&lt;li&gt;Consuming the Context&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's go over these with a &lt;strong&gt;simple todo app&lt;/strong&gt; using the Context API. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I won't be focusing on the styling or CSS because frankly that's not what this blog is about. The focus of this project is learning about React and not about designing beautiful UIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a new react project using &lt;code&gt;npx create-react-app react-context-todo&lt;/code&gt;. Feel free to name it whatever you like. Jump into your favorite code editor (I'll be using &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; for this example).&lt;/p&gt;

&lt;p&gt;Then start the dev server using &lt;code&gt;npm start&lt;/code&gt; which will launch the app on &lt;code&gt;https://localhost:3000&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementing-context-api"&gt;
  &lt;/a&gt;
  Implementing Context API
&lt;/h3&gt;

&lt;p&gt;Now we can start to implement the Context API. &lt;/p&gt;

&lt;p&gt;Create a new folder &lt;code&gt;src/context&lt;/code&gt; which will contain all the files for state management we'll be needing for this project. Within this folder create a new file &lt;code&gt;Context.js&lt;/code&gt; which will serve as the basis for creating and exporting &lt;strong&gt;context&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Context.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create another file &lt;code&gt;src/context/GlobalState.js&lt;/code&gt; which we will use to create the initial state for our project and also pass it to the &lt;strong&gt;Provider&lt;/strong&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GlobalState.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AppContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AppReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AppReducer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Define initial state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Provider component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Actions&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DELETE_TODO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlobalContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/GlobalContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Woah, that's a lot of code! Don't sweat - I'll explain in simple terms. Basically, Context API requires a &lt;strong&gt;Provider&lt;/strong&gt; component and &lt;strong&gt;initial state&lt;/strong&gt; to do its magic. We pass the state to the Provider and that state is accessible throughout our React app. With me so far? Good. &lt;/p&gt;

&lt;p&gt;In this file we import the &lt;strong&gt;Context&lt;/strong&gt; we exported earlier, &lt;strong&gt;AppReducer&lt;/strong&gt; which we will create shortly and a React hook called &lt;strong&gt;useReducer&lt;/strong&gt; which is an alternative to &lt;strong&gt;useState&lt;/strong&gt;. It allows you to pass an initial state and also define actions for manipulating the state. According to the React docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we define the initial state which is an array of todos and create a Provider component to define our actions - &lt;strong&gt;addTodo&lt;/strong&gt; and &lt;strong&gt;deleteTodo&lt;/strong&gt;. Actions are functions that are &lt;strong&gt;dispatched&lt;/strong&gt; whenever we want to change the state - like adding a new todo or deleting an existing one. &lt;/p&gt;

&lt;p&gt;If you are unfamiliar with this terminology, I would suggest reading up on the &lt;a href="https://www.freecodecamp.org/news/an-introduction-to-the-flux-architectural-pattern-674ea74775c9/"&gt;Flux Pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each action includes a &lt;strong&gt;payload&lt;/strong&gt; which is a value passed to it when the action is invoked. Think of it like calling a function by passing a value to it. &lt;/p&gt;

&lt;p&gt;Finally, we pass the initial state and actions to the Provider and export it. The components which are wrapped inside the Provider will have access to the state and actions.&lt;/p&gt;

&lt;p&gt;Now we will create the final piece of the puzzle - the &lt;strong&gt;Reducer&lt;/strong&gt; which is responsible for changing the state and returning the updated state. Create a new file called &lt;code&gt;src/context/AppReducer.js&lt;/code&gt; inside the &lt;code&gt;context&lt;/code&gt; folder and add the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AppReducer.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DELETE_TODO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use a simple &lt;strong&gt;Switch Case&lt;/strong&gt; statement to update the state depending on the type of action invoked and return the updated state. Take care to &lt;strong&gt;NOT&lt;/strong&gt; mutate the state - rather make a copy of the state using the &lt;strong&gt;spread&lt;/strong&gt; operator first before changing it.&lt;/p&gt;

&lt;p&gt;All that is left now is to wrap the &lt;strong&gt;App&lt;/strong&gt; component with the Provider component so that the state is accessible to all components within the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./context/GlobalState&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlobalProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/GlobalProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OK, now that you have created and exported the context and defined the actions, you can now begin using it in your components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finishing-the-app-consuming-context"&gt;
  &lt;/a&gt;
  Finishing the App - Consuming Context
&lt;/h3&gt;

&lt;p&gt;Now let's complete the todo app using Context API. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I won't go into the details of creating React components since that would take way too long. I am assuming you're familiar with the basics of React and JavaScript ES6.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a new folder &lt;code&gt;src/components&lt;/code&gt; and add the following files into it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AddTodo.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../context/AppContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nanoid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add Todo...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the values from the Context, we import another React hook - &lt;strong&gt;useContext&lt;/strong&gt; and pass it the &lt;strong&gt;GlobalContext&lt;/strong&gt;. We can then de-structure the required values from it. In the &lt;strong&gt;AddTodo&lt;/strong&gt; component we have a simple input to get the text that the user types. For generating a unique id we are using the &lt;strong&gt;nanoid&lt;/strong&gt; npm package.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TodoList.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../context/AppContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are simple looping over the todos using the &lt;strong&gt;map&lt;/strong&gt; method and rendering out the &lt;strong&gt;Todo&lt;/strong&gt; component for each. We are also passing the &lt;strong&gt;deleteTodo&lt;/strong&gt; method to each todo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Todo.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the &lt;strong&gt;App&lt;/strong&gt; component after the application is complete:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/AddTodo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/TodoList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./context/GlobalState&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlobalProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/GlobalProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the final working app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6LEvP6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637941172408/shZgVNboZ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6LEvP6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637941172408/shZgVNboZ.gif" alt="React Context Todo.gif" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I admit its not pretty but it gets the job done and demonstrates the point pretty nicely. Feel free to add more features or style the app using your favorite CSS framework to make it more exciting.&lt;/p&gt;

&lt;p&gt;Code for this project: &lt;a href="https://github.com/fahadim87/react-context-todo"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for Reading
&lt;/h3&gt;

&lt;p&gt;As always I hoped you enjoyed reading this blog. Feel free to leave any questions or suggestions in the comments below. Thanks for reading and happy coding! 👨‍💻&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@mika_luo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mika Luoma&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/duck?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fahadim87"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linkedin.com/in/fahadim87"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/@fahadim87"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Living in the Shell; jq (JSON) [LS#4]</title>
      <author>Babak K. Shandiz</author>
      <pubDate>Fri, 26 Nov 2021 18:14:49 +0000</pubDate>
      <link>https://dev.to/babakks/living-in-the-shell-jq-json-ls4-1b6b</link>
      <guid>https://dev.to/babakks/living-in-the-shell-jq-json-ls4-1b6b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-jq-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;jq&lt;/code&gt; 🧹
&lt;/h2&gt;

&lt;p&gt;JSON formatter/prettifier.&lt;/p&gt;

&lt;p&gt;🏠 &lt;a href="https://stedolan.github.io/jq/"&gt;https://stedolan.github.io/jq/&lt;/a&gt;&lt;br&gt;
📗 &lt;a href="https://github.com/stedolan/jq"&gt;https://github.com/stedolan/jq&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-on-debian"&gt;
  &lt;/a&gt;
  Installation (on Debian)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#formatprettify"&gt;
  &lt;/a&gt;
  Format/prettify
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'{"who":["me","you"],"when":"now"}'&lt;/span&gt; | jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "who": [
    "me",
    "you"
  ],
  "when": "now"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#indentation-with-tab-raw-tab-endraw-"&gt;
  &lt;/a&gt;
  Indentation with tab &lt;code&gt;--tab&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'{"who":["me","you"],"when":"now"}'&lt;/span&gt; | jq &lt;span class="nt"&gt;--tab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compact-raw-c-endraw-"&gt;
  &lt;/a&gt;
  Compact &lt;code&gt;-c&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt; | jq -c
{
  "who": [
    "me",
    "you"
  ],
  "when": "now"
}
&lt;/span&gt;&lt;span class="no"&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"who":["me","you"],"when":"now"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sort-keys-raw-s-endraw-"&gt;
  &lt;/a&gt;
  Sort keys &lt;code&gt;-S&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'{"z":"z","a":"a"}'&lt;/span&gt; | jq &lt;span class="nt"&gt;-S&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "a": "a",
  "z": "z"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#uncolorize-output-monochrome-raw-m-endraw-"&gt;
  &lt;/a&gt;
  Uncolorize output (monochrome) &lt;code&gt;-M&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'{"who":"me","when":"now"}'&lt;/span&gt; | jq &lt;span class="nt"&gt;-M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>productivity</category>
      <category>linux</category>
      <category>devops</category>
      <category>bash</category>
    </item>
    <item>
      <title>Interview questions for JS With Answer</title>
      <author>coderhax</author>
      <pubDate>Fri, 26 Nov 2021 17:49:36 +0000</pubDate>
      <link>https://dev.to/coderhax/interview-questions-for-js-with-answer-cbl</link>
      <guid>https://dev.to/coderhax/interview-questions-for-js-with-answer-cbl</guid>
      <description>&lt;p&gt;JavaScript, commonly known as JS, is a server-side programming language with a high level. Because JavaScript is widely utilized to create diverse online apps around the world, there are several possibilities for JavaScript development.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;Candidates must pass the interview in order to get a job in JavaScript programming. Various JavaScript interview questions and responses are posed to them.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;The list of JavaScript interview questions and answers that are most likely to be asked during the interview follows. Depending on their experience and other circumstances, candidates may be asked anything from simple JavaScript interview questions to advanced JS interview questions.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Let's Begin&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;1. What is JavaScript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is a client-side and server-side scripting language inserted into HTML pages and is understood by web browsers. JavaScript is also an Object-based Programming language.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;2&lt;/b&gt;&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt;&lt;b&gt;What are JavaScript Data Types?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Following are the JavaScript Data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="comparison-operators"&gt;3. Difference between “ == “ and “ === “ operators.&lt;/h3&gt;Both are comparison operators. The difference between both the operators is that,“==” is used to compare values whereas, “ === “ is used to compare both value and types. &lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;span&gt;4. &lt;/span&gt;&lt;span&gt;&lt;b&gt;Which is faster between JavaScript and an ASP script&lt;/b&gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is faster. JavaScript is a client-side language,, and thus it does not need the assistance of the webserver to execute. On the other hand, ASP is a server-side language and hence is always slower than JavaScript. Javascript now is also a server-side language (nodejs).&lt;/p&gt;

&lt;h3 id="nan-property"&gt;5. What is NaN property in JavaScript?&lt;/h3&gt;NaN property represents &lt;b&gt;“Not-a-Number” &lt;/b&gt;value. It indicates a value which is not a legal number.&lt;br&gt;&lt;br&gt;&lt;b&gt;typeof &lt;/b&gt;of a NaN will return a &lt;b&gt;Number &lt;/b&gt;.&lt;br&gt;&lt;br&gt;To check if a value is NaN, we use the &lt;b&gt;isNaN() &lt;/b&gt;function,&lt;br&gt;&lt;br&gt;&lt;h4&gt;**Note- isNaN() function converts the given value to a Number type, and then equates to NaN.&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;6. Is it possible to break JavaScript Code into several lines?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Breaking within a string statement can be done by using a backslash, ‘\,’ at the end of the first line.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;7. Which company developed JavaScript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Netscape is the software company that developed JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;8. What are undeclared and undefined variables?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Undeclared variables are those that do not exist in a program and are not declared. If the program tries to read the value of an undeclared variable, then a runtime error is encountered.&lt;/p&gt;
&lt;p&gt;Undefined variables are those that are declared in the program but have not been given any value. If the program tries to read the value of an undefined variable, an undefined value is returned.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;9. What is === operator?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;=== is called a strict equality operator, which returns true when the two operands have the same value without conversion. &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;10. Can an anonymous function be assigned to a variable?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Yes, you can assign an anonymous function to a variable.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;11. What do you mean by NULL in Javascript&lt;/b&gt;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The NULL value is used to represent no value or no object. It implies no object or null string, no valid boolean value, no number, and no array object.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;12. What is the function of the delete operator?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The delete keyword is used to delete the property as well as its value.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;13. What are escape characters?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Escape characters (Backslash) is used when working with special characters like single quotes, double quotes, apostrophes, and ampersands. Place backslash before the characters to make it display.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;14. What are JavaScript Cookies?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Cookies are the small test files stored in a computer, and they get created when the user visits the websites to store information that they need. Examples could be User Name details and shopping cart information from previous visits.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;15. What is the ‘Strict Mode in JavaScript, and how can it be enabled?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Strict Mode adds certain compulsions to JavaScript. Under the strict Mode, JavaScript shows errors for a piece of code, which did not show an error before, but might be problematic and potentially unsafe. Strict Mode also solves some mistakes that hamper the JavaScript engines from working efficiently.&lt;/p&gt;
&lt;p&gt;Strict mode can be enabled by adding the string literal “use strict” above the file. &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;16. What is for-in loop in Javascript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The for-in loop is used to loop through the properties of an object.&lt;/p&gt;
&lt;p&gt;The syntax for the for-in loop is –&lt;/p&gt;
&lt;pre&gt;for (variable name in object){
    statement or block to execute
}&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;17. Is JavaScript case sensitive? Give its example.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Yes, JavaScript is case-sensitive. For example, a function parseInt is not the same as the function Parseint. &lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;b&gt;18. What boolean operators can be used in JavaScript?&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The ‘And’ Operator (&amp;amp;&amp;amp;), ‘Or’ Operator (||), and the ‘Not’ Operator (!) can be used in JavaScript.&lt;/p&gt;
&lt;p&gt;*Operators are without the parenthesis.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Support my work&lt;/b&gt;: &lt;/p&gt;

&lt;a href="https://www.buymeacoffee.com/codelivly"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJqR521s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEhW_7Pu9lj6_eV5BWA7VZk80-pyRpCMXv8YwnRj5Yeb_5VNtj-KNDVIZPz1KKdOPrcYvqOlQOZoHqvMHBZKweJ9B_miCOrfyPUGSDuodfkos06UeMzVWIqSssR36AGpnDOw_jFqQ_WM1IGn7wRdAe8WLC0BAdoaYAiHARPTt5a2HuNPvwET-hgH6ZA%3Ds320" width="320" height="77"&gt;&lt;/a&gt;&lt;br&gt;








</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building Dark Mode in React: The Fun Way</title>
      <author>Mihaela</author>
      <pubDate>Fri, 26 Nov 2021 17:16:41 +0000</pubDate>
      <link>https://dev.to/workshub/building-dark-mode-in-react-the-fun-way-67m</link>
      <guid>https://dev.to/workshub/building-dark-mode-in-react-the-fun-way-67m</guid>
      <description>&lt;p&gt;Dark mode is a common feature seen in most sites in the past few years. It's a cool convention where the default white backgrounds and bright colours are changed to different colours, making the page appear in a darkish tone, most people prefer it because it's easier on the eyes. &lt;/p&gt;

&lt;p&gt;A cool example would be companies like Google, Youtube, Stack Overflow, and Medium that implement the option of dark mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--63ARndcx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/5a2fa4f5fbfda30ca54c651ab4222c93" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--63ARndcx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/5a2fa4f5fbfda30ca54c651ab4222c93" alt="s.png" width="512" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-dark-mode-in-a-react-app"&gt;
  &lt;/a&gt;
  How to get Dark Mode in a React app
&lt;/h2&gt;

&lt;p&gt;This tutorial will be focusing more on the concepts of building it into the react applications, rather than how to use libraries like &lt;code&gt;styled-components&lt;/code&gt; or explaining deeply functions like React.createContext.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-dark-mode-so-awesome"&gt;
  &lt;/a&gt;
  Why is Dark Mode so awesome?
&lt;/h2&gt;

&lt;p&gt;Apart from its aesthetics, the dark mode has advantages which come in pretty handy for most users.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Saves battery&lt;/strong&gt;&lt;br&gt;
Dark mode has been proven to reduce up to  58% of the power drain from the battery compared to the normal mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy on the eyes&lt;/strong&gt;&lt;br&gt;
It may not be confirmed if dark mode can help the eyes but it for sure can reduce the strain on the eyes. It's also more comfortable to read at night.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Looks amazing&lt;/strong&gt; 😍&lt;br&gt;
Dark mode simply makes your app look cooler and giving users the feeling of using a new app when trying out the dark mode for the first time.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-tech"&gt;
  &lt;/a&gt;
  The Tech
&lt;/h2&gt;

&lt;p&gt;For this example of building dark mode into an app, we would be assuming that you have a basic understanding of React. If you don't, it's quite easy to learn, you can try it by checking &lt;a href="https://www.youtube.com/watch?v=MhkGQAoc7bc"&gt;this&lt;/a&gt; tutorial. Note that in this project we will make use of basic react technologies, meaning no libraries, so it will be easy to understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-variables"&gt;
  &lt;/a&gt;
  CSS Variables
&lt;/h3&gt;

&lt;p&gt;CSS variables are custom properties defined and set up by the developer and can be accessed throughout the project &lt;code&gt;eg --main-background&lt;/code&gt;, these variables can be accessed using the CSS command var() and an example of the usage would be &lt;code&gt;background:var(--main-background)&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h2&gt;

&lt;p&gt;Working with react follows very simple and straightforward steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Downloading the template&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app darkmode&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Navigating into the project and running it&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;cd darkmode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-createcontext"&gt;
  &lt;/a&gt;
  React CreateContext
&lt;/h3&gt;

&lt;p&gt;CreateContext is a function provided in React that helps you create a context that can be shared among children components in the react app. This is how we can notify every component that the mode has been changed and it would need to re-render the style.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;To create the component we need to create different components to perform an individual task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context-provider"&gt;
  &lt;/a&gt;
  Context Provider
&lt;/h3&gt;

&lt;p&gt;This will sit on top of all the components, it checks to see if the browser has already had a mode set and notify each component that the mode has been switched.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-theme-styles"&gt;
  &lt;/a&gt;
  Global theme styles
&lt;/h3&gt;

&lt;p&gt;This file contains all the colours used in the application, we do not hardcode any colour, all the colours used in the app are stored here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggle-function"&gt;
  &lt;/a&gt;
  Toggle Function
&lt;/h3&gt;

&lt;p&gt;This toggles the app between dark and light mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-code-finally"&gt;
  &lt;/a&gt;
  Writing code (Finally)
&lt;/h3&gt;

&lt;p&gt;The first step would be to create the globalstyles file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  Run
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cd src &amp;amp;&amp;amp; touch globalstyles.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now a new file has been created add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;export&lt;/span&gt; &lt;span class="nt"&gt;const&lt;/span&gt; &lt;span class="nt"&gt;lightTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;navTextColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"#000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"#fff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;export&lt;/span&gt; &lt;span class="nt"&gt;const&lt;/span&gt; &lt;span class="nt"&gt;darkTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;navTextColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"#fff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"#000"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-context-provider-for-the-application"&gt;
  &lt;/a&gt;
  Creating the context provider for the application
&lt;/h3&gt;

&lt;p&gt;The context provider sits above all the components and can share the state with all the children components. This is how we would pass the toggle function to the component and also the current mode we are on.&lt;/p&gt;

&lt;p&gt;We are going to set the CSS variables of  the application from this point by using a document function called &lt;code&gt;setProperty&lt;/code&gt; an example would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`--background-name`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`pink`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./globalstyles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeColours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;themeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setThemeName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;///adding code here &lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;themeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-break-the-code-down"&gt;
  &lt;/a&gt;
  Let’s break the code down
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./globalstyles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import the styles we defined earlier in the globalstyles.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating our context to serve as a root parent component to save state and share it among children components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;themeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setThemeName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating our states to store our theme and themeName, the setThemeName is used to set the name of the theme mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;themeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returning the component, we pass the themeName, setTheme function which can be called by children components.&lt;/p&gt;

&lt;p&gt;Now let's make some edits that would help us set the CSS variables programmatically&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeColours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;themeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setThemeName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


 &lt;span class="c1"&gt;///get the defined mode from the browser&lt;/span&gt;
 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;darkOS&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;///turn my configurations to css variables&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themeColours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
   &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constructVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`--&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constructVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;themeColours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;/// cuz eslint just wants me to return something&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="nx"&gt;setThemeName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;themeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ThemeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our Context provider is able to set the CSS variables dynamically just by calling it and passing in the name of the mode.&lt;/p&gt;

&lt;p&gt;Now let’s got through the changes made&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="c1"&gt;///get the defined mode from the browser&lt;/span&gt;
 &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;darkOS&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we check the system/browser if the dark mode is the default theme selected by the user, and use that to set the initial theme or just use the light theme.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;///turn my configurations to css variables&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themeColours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constructVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`--&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constructVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;themeColours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;/// cuz eslint just wants me to return something&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="nx"&gt;setThemeName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The set theme function is created to set all the CSS variables defined in the globalstyles.js depending on the style mode (dark | light) of the app. The function turns the JSON object to CSS variables by taking the keys of the object and putting them in an array, iterating through them, and using that to set values. This function is called anytime the theme is switched to set the CSS variables according to state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-css"&gt;
  &lt;/a&gt;
  Creating our CSS
&lt;/h2&gt;

&lt;p&gt;Let’s create our CSS file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  Run
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;touch index.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now a new file has been created add the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--navTextColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--navTextColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we define our CSS module, notice the use of the CSS variables in the file, the values in the variables are changed when the style mode is updated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h3&gt;

&lt;p&gt;Creating our Context Provider and our CSS module has been a breeze, now we get to put everything together and see how our project works&lt;/p&gt;

&lt;p&gt;Now let’s edit our App.js and type in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils/themeContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;themeName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMood&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themeName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
       &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
       &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
       &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="nx"&gt;setMood&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Toggle d theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;themeName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMood&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themeName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we initialize the variables needed, we use useState to store the theme mode&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
       &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
       &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
       &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="nx"&gt;setMood&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Toggle d theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Passing setTheme in the onClick function, we pass in the theme name in the setTheme function and that triggers the context provider to change themes this redefines our CSS variables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finally-we-have-an-output"&gt;
  &lt;/a&gt;
  Finally, we have an output
&lt;/h3&gt;

&lt;p&gt;Light Mode&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QiVezLs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/082c9dcfea6276946e4b3025086f416d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QiVezLs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/082c9dcfea6276946e4b3025086f416d" alt="dss.png" width="512" height="295"&gt;&lt;/a&gt;&lt;br&gt;
Dark Mode&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7UX_m58u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/e75e5894ab705aa90bc68db4ec9ab9d4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7UX_m58u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://functionalworks-backend--prod.s3.amazonaws.com/logos/e75e5894ab705aa90bc68db4ec9ab9d4" alt="s.png" width="512" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Adding the dark mode to the app is a simple process. We use our globalstyles file to keep track of the colours and they are never hardcoded in the app, this lets them be dynamic.&lt;/p&gt;

&lt;p&gt;There are other ways to implement this and you can play around with it using tools like Redux and Reacts useReducers.&lt;/p&gt;

&lt;p&gt;Happy coding! &lt;/p&gt;

&lt;p&gt;Originally written by &lt;a href="https://javascript.works-hub.com/users/8cedbde0-2e7b-4328-8741-f8c981f0b076?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;King Somto&lt;/a&gt; for &lt;a href="https://javascript.works-hub.com/learn/building-dark-mode-in-react-the-fun-way-424f6?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;JavaScript Works&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Incident Post-Mortems at Jobber</title>
      <author>Jesse van Herk</author>
      <pubDate>Fri, 26 Nov 2021 16:58:00 +0000</pubDate>
      <link>https://dev.to/jobber/incident-post-mortems-at-jobber-43ja</link>
      <guid>https://dev.to/jobber/incident-post-mortems-at-jobber-43ja</guid>
      <description>&lt;p&gt;No matter how stable your software product is, occasionally things go wrong in production, and Jobber is committed to doing a post-mortem investigation to follow up and learn from each incident.&lt;/p&gt;

&lt;p&gt;At a high-level, an incident post-mortem answers these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What went wrong?&lt;/li&gt;
&lt;li&gt;What did we do to fix it?&lt;/li&gt;
&lt;li&gt;What will we do differently, so it doesn't happen again?&lt;/li&gt;
&lt;li&gt;What went well during the incident, that we should keep doing?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we’ve grown and moved to a remote working environment, we’ve changed our process to work better for remote teams and super busy schedules. This is a summary of what we’re doing to make sure that incidents remain rare and our customers can keep getting their work done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-process"&gt;
  &lt;/a&gt;
  Our process
&lt;/h2&gt;

&lt;p&gt;Our process is broken down into 4 steps: Resolve the incident, investigate it, debrief about it, then share the results&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collect data during the incident&lt;/strong&gt;. We collect as much data as we can in a slack channel dedicated to incidents, keeping it organized with threads. This includes server graphs, snippets from logs, and screenshots showing what was going on at each point in the incident. It doesn’t all end up being useful, but it’s nice to have everything collected when you start going through the investigation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start the investigation right away&lt;/strong&gt;. We get one of the involved people to take on the role of lead investigator, which really means they’re in charge of making sure the investigation gets done, the post-mortem document gets filled in, and the debrief gets held. Starting it right away makes sure nothing gets lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review the results within a week&lt;/strong&gt;. While things are still fresh, hold a debrief to review the post-mortem document, discuss the action items, and make any edits needed. This is a 30-60min zoom session with the team involved in the incident as well as reps from other departments (mainly the customer support/escalation team).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Share the results as soon as the debrief is done&lt;/strong&gt;, so everyone gets a chance to learn from it! We post it to a slack channel that the whole company has access to, for transparency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-challenges"&gt;
  &lt;/a&gt;
  New Challenges
&lt;/h2&gt;

&lt;p&gt;With a larger company, people working in all sorts of time zones, and everyone being remote, scheduling and coordinating got a lot more complicated. The process is still mostly the same, but with some tweaks to keep it effective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shorter-timelines"&gt;
  &lt;/a&gt;
  Shorter timelines
&lt;/h3&gt;

&lt;p&gt;We’ve shortened the timeline expectations - getting the incident doc started faster and the debrief done sooner helps get all the data and lets everyone involved get back to their sprint work sooner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assume-async"&gt;
  &lt;/a&gt;
  Assume async
&lt;/h3&gt;

&lt;p&gt;Scheduling the debrief sooner means that it’s harder to find a spot in everyone’s calendars. Rather than pushing the meeting further and further out, do more of the work asynchronously. Make sure the document can stand on its own, and use slack to ask people for their contributions.&lt;/p&gt;

&lt;p&gt;We also record the debrief (easy with zoom) so that anyone who couldn’t attend is also able to watch it later, so nobody has to worry about missing out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-incident-doc-template"&gt;
  &lt;/a&gt;
  Simple incident doc template
&lt;/h3&gt;

&lt;p&gt;We’re using a wiki template for consistency, and over time we’ve simplified down the template repeatedly so there’s less sections to worry about.&lt;/p&gt;

&lt;p&gt;Setting it up with a button to auto-create the new page from the template works well.&lt;/p&gt;

&lt;p&gt;The template has sections for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Impact and Scope&lt;/li&gt;
&lt;li&gt;Trigger (what started the incident)&lt;/li&gt;
&lt;li&gt;Resolution (what ended up fixing it)&lt;/li&gt;
&lt;li&gt;Timeline of events&lt;/li&gt;
&lt;li&gt;Root Cause&lt;/li&gt;
&lt;li&gt;What went well&lt;/li&gt;
&lt;li&gt;What didn’t go well&lt;/li&gt;
&lt;li&gt;Action items&lt;/li&gt;
&lt;li&gt;Data &amp;amp; Analysis (all the charts!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#asking-for-input-from-customerfacing-teams-right-away"&gt;
  &lt;/a&gt;
  Asking for input from customer-facing teams right away
&lt;/h3&gt;

&lt;p&gt;Our customer success team always has great input and is able to help fill in gaps in the timeline. We reach out to them early so there’s time for their input to be added into the post-mortem doc before the debrief. Waiting for the debrief is too late!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tracking-action-items-in-jira"&gt;
  &lt;/a&gt;
  Tracking action items in Jira
&lt;/h3&gt;

&lt;p&gt;Why track action item progress in an incident doc when we already have a standard tool for tracking work? As soon as we can, we get all action items from post-mortems in as Jira tickets so they can be assigned to backlogs and don’t get lost.&lt;/p&gt;

&lt;p&gt;We also have some reports set up to view the list of outstanding post-mortem actions - driven by a post-mortem label on the items.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-a-section-for-things-we-should-do-if-we-have-time"&gt;
  &lt;/a&gt;
  Have a section for “things we should do if we have time”
&lt;/h3&gt;

&lt;p&gt;Realistically, not all action items are actually actionable - some are more aspirational or are something we just need everyone to keep in mind. In order to keep the Jira action items clearer, we’ve included this section as a spot to put the things we think are important but we couldn’t turn into assignable/trackable work.&lt;/p&gt;

&lt;p&gt;Our approach is that it’s better to have a smaller set of action items that we actually do than a giant list of things we’d like to do given infinite time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-it-blameless"&gt;
  &lt;/a&gt;
  Keep it Blameless
&lt;/h3&gt;

&lt;p&gt;This one isn’t actually new, but it’s well worth repeating! We’re interested in what happened and what we’re going to do to fix it going forward, not in pointing fingers. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Removing blame from a postmortem gives people the confidence to escalate issues without fear."&lt;br&gt;
 – the SRE book&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#about-jobber"&gt;
  &lt;/a&gt;
  About Jobber
&lt;/h2&gt;

&lt;p&gt;We're hiring for remote positions across Canada at all software engineering levels! &lt;/p&gt;

&lt;p&gt;Our awesome Jobber technology teams span across Payments, Infrastructure, AI/ML, Business Workflows &amp;amp; Communications. We work on cutting edge &amp;amp; modern tech stacks using React, React Native, Ruby on Rails, &amp;amp; GraphQL. &lt;/p&gt;

&lt;p&gt;If you want to be a part of a collaborative work culture, help small home service businesses scale and create a positive impact on our communities, then visit our &lt;a href="https://getjobber.com/about/careers/?utm_source=devto&amp;amp;utm_medium=social&amp;amp;utm_campaign=eng_blog"&gt;careers&lt;/a&gt; site to learn more!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>devops</category>
      <category>postmortems</category>
    </item>
    <item>
      <title>Become a Full-Stack Web Developer in 2021: A Guide to Success</title>
      <author>Shaheer</author>
      <pubDate>Fri, 26 Nov 2021 16:56:43 +0000</pubDate>
      <link>https://dev.to/shaheer912/become-a-full-stack-web-developer-in-2021-a-guide-to-success-34jf</link>
      <guid>https://dev.to/shaheer912/become-a-full-stack-web-developer-in-2021-a-guide-to-success-34jf</guid>
      <description>&lt;p&gt;If you want to be a successful full-stack web developer, there are some things you need to know. From HTML and CSS to JavaScript and React, it can be hard to keep up with the latest development trends. In this article, we'll go over what a full-stack web developer does and how they do it. We'll also talk about which languages you'll need to learn from beginner to advanced levels. You'll even get a glimpse into what employers are looking for in their candidates! So if you're interested in becoming a full-stack web developer, read on for a guide of success!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-fullstack-web-developer"&gt;
  &lt;/a&gt;
  What is a Full-Stack Web Developer?
&lt;/h2&gt;

&lt;p&gt;A full-stack web developer is someone who is knowledgeable in all aspects of web development, including design and the back-end. Full-stack developers usually specialize in a specific language, but can learn any language in order to be a full-stack developer.&lt;/p&gt;

&lt;p&gt;A full-stack developer will typically be a jack-of-all-trades, but master of at least one. This means that they have a full understanding of front-end technologies and their impact on user experience. They will also have a deep understanding of back-end technologies and how they interact with the front-end.&lt;/p&gt;

&lt;p&gt;In fact, many developers have an idea of what they want to specialize in from when they first start learning to code. For example, some developers might enjoy the design aspect of web development more than the coding aspect, which is why they might choose to specialize in front-end technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-skills-do-i-need-to-become-a-fullstack-web-developer"&gt;
  &lt;/a&gt;
  What skills do I need to become a Full-Stack Web Developer?
&lt;/h2&gt;

&lt;p&gt;You'll need to learn HTML, CSS, and JavaScript to become a full-stack web developer. HTML and CSS are the backbone of the internet, and JavaScript is what builds functionality. So if you're serious about becoming a full-stack web developer, these three languages are a must!&lt;/p&gt;

&lt;p&gt;But that's not all. You'll also need to learn languages like React and Ruby on Rails. These languages will help you build more advanced websites and complex projects.&lt;br&gt;
HTML: HTML is the code for structuring and styling webpages. It's what you use to set up your website and how it looks. HTML is the backbone of the internet.&lt;/p&gt;

&lt;p&gt;CSS: CSS stands for Cascading Style Sheets. It's what you use to style your HTML, which includes colors, fonts, spacing, and more.&lt;/p&gt;

&lt;p&gt;JavaScript: JavaScript is a programming language used to build interactive websites and other online features. It's what makes your website dynamic!&lt;/p&gt;

&lt;p&gt;React: React is a JavaScript library that helps your website run efficiently and respond quickly to users. The idea behind React is that it creates one single page instead of separating each page as a new "view."&lt;/p&gt;

&lt;p&gt;Ruby on Rails: Ruby on Rails is a programming language used for building complex web applications&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-much-time-will-it-take-me-to-learn-everything-i-need-to-know"&gt;
  &lt;/a&gt;
  How much time will it take me to learn everything I need to know?
&lt;/h2&gt;

&lt;p&gt;There's no one answer to this question, but it's important to know what you're getting into. Full-stack web development is a difficult and time-consuming endeavor. It will require long hours of studying and practice to learn the languages and frameworks that are required to get the job done.&lt;/p&gt;

&lt;p&gt;If you're just getting started, then it might be best to work on your fundamentals. Learning HTML and CSS will help you grasp how pages are structured and how to style content. Scripting languages, like JavaScript, will teach you how to add more complex functionality to web pages. Finally, React.js will give you the power to create interactive web applications.&lt;/p&gt;

&lt;p&gt;It's important to remember that HTML, CSS, JavaScript, and React are just the basics. If you want to be competitive for an entry-level full-stack developer position, then you'll need more than just these languages. Knowing frameworks like Angular and Node.js will be crucial for getting a leg up on your competition!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-will-this-career-change-my-life-down-the-road"&gt;
  &lt;/a&gt;
  How will this career change my life down the road?
&lt;/h2&gt;

&lt;p&gt;What does it take to become a full-stack web developer?&lt;/p&gt;

&lt;p&gt;Becoming a full-stack web developer requires many different skills. You'll need to be comfortable working on the front end (HTML, CSS, JavaScript) and on the back end (SQL, Ruby, Rails). You'll also need to be good with software design and know how to code.&lt;/p&gt;

&lt;p&gt;One of the most important things for employers is being able to code in multiple languages. That's why many full-stack developers learn how to code in languages like Python, PHP, and C++.&lt;/p&gt;

&lt;p&gt;You may be wondering what career path this will lead you down in the future. As a full-stack developer, you'll have the flexibility to work in many different environments. You could be working on websites, apps, e-commerce stores, or whatever else your company needs you to do.&lt;/p&gt;

&lt;p&gt;There are many career opportunities for full-stack web developers that are available in the workforce today. It all depends on what you want!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-should-i-prepare-to-become-a-full-stack-developer"&gt;
  &lt;/a&gt;
  How should I prepare to become a full stack developer?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#practice-technical-interview-questions"&gt;
  &lt;/a&gt;
  Practice Technical Interview Questions
&lt;/h3&gt;

&lt;p&gt;There’s no easy way to say this: you need to practice if you want to get really good at answering technical interview questions. Most people don’t know how to address these questions, and feel like they aren’t prepared for them. You can get yourself ready by preparing with sample solutions and practicing out loud.&lt;/p&gt;

&lt;p&gt;The best way to prepare is by taking the time to answer real examples of these question types, and then pair that with practice mock interviews. Have a friend or family member ask you the questions while you practice reading your responses out loud.&lt;/p&gt;

&lt;p&gt;Here are some questions for you to practice: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How is a bubble sort algorithm implemented?&lt;/li&gt;
&lt;li&gt;How to print the first non-repeated character from a string?&lt;/li&gt;
&lt;li&gt;How to find the first non repeated character of a given String?&lt;/li&gt;
&lt;li&gt;How do you find duplicate numbers in an array if it contains multiple duplicates?&lt;/li&gt;
&lt;li&gt;How do you remove duplicates from an array in place?&lt;/li&gt;
&lt;li&gt;How are duplicates removed from an array without using any library?&lt;/li&gt;
&lt;li&gt;How do you find the middle element of a singly linked list in one pass?&lt;/li&gt;
&lt;li&gt;How do you check if a given linked list contains a cycle? How will you find the initial node of the cycle?&lt;/li&gt;
&lt;li&gt;How do you reverse a singly linked list without recursion?&lt;/li&gt;
&lt;li&gt;How is a binary search tree implemented?&lt;/li&gt;
&lt;li&gt;How do you traverse a given binary tree in preorder without recursion?&lt;/li&gt;
&lt;li&gt;How do you print all nodes of a given binary tree using inorder traversal without recursion?&lt;/li&gt;
&lt;li&gt;How is a merge sort algorithm implemented?&lt;/li&gt;
&lt;li&gt;How is a radix sort algorithm implemented?&lt;/li&gt;
&lt;li&gt;How do you swap two numbers without using the third variable?&lt;/li&gt;
&lt;li&gt;How do you design a vending machine?&lt;/li&gt;
&lt;li&gt;Write a program to find prime factors of an integer?&lt;/li&gt;
&lt;li&gt;What is depth First Search Algorithm for a binary tree?&lt;/li&gt;
&lt;li&gt;Difference between a stable and unstable sorting algorithm?&lt;/li&gt;
&lt;li&gt;What is the difference between Comparison and Non-Comparison Sorting Algorithms?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#know-your-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  Know Your Data Structures and Algorithms
&lt;/h3&gt;

&lt;p&gt;Data structures and algorithms are the foundation of computer science. They are also what will make or break your career as a software engineer. As an engineer, you should know how to implement data structures, how they work, what are the trade-offs of each one, and how to use them correctly.&lt;/p&gt;

&lt;p&gt;You may not think that knowing data structures and algorithms will make a difference to the high-level responsibilities you’ll be taking on in your career, but you’d be surprised. Many companies are looking for candidates who know their stuff when it comes to data structures and algorithms. If you’re interviewing for a position at Salesforce, for example, it would be smart to brush up on your knowledge of sorting algorithms.&lt;/p&gt;

&lt;p&gt;For example, if you're given a question like: "What is the longest increasing subsequence in a given unsorted array?" You need to be able to answer it and know the algorithm needed to solve the problem.&lt;/p&gt;

&lt;p&gt;Asking questions about how data is organized and what algorithms can be used to solve problems will help you prepare for a technical programming interview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#judocodercom-the-best-coding-interview-preparation-website-you-can-trust"&gt;
  &lt;/a&gt;
  &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; – The Best Coding Interview Preparation Website you can trust
&lt;/h3&gt;

&lt;p&gt;Among many other platforms, JudoCoder is the most reliable and efficient coding interview preparation site. Here, many coding problem-solving programs, challenges, and question-answer challenges prepare you well for your upcoming interview.&lt;/p&gt;

&lt;p&gt;JudoCoder has a lot of coding challenge questions for your practice and knowledge. They will strengthen your programming concepts and skills. The challenges, and questions focus on various coding aspects such as algorithms, arrays, data structures, BST, Anagrams, recursion, backtracking, Hashmaps, dictionaries, string manipulation, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're ready to take the next step in your career, then this guide is for you. You'll learn what it takes to become a successful full-stack web developer with the languages and skills necessary to get you there.&lt;/p&gt;

&lt;p&gt;There are many free resources available online, but if you want the best education possible, then it may be time to invest in a computer programming degree.&lt;/p&gt;

&lt;p&gt;The good news is, &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; provides handpicked selection of all sorts of &lt;a href="https://judocoder.com"&gt;data structures and algorithm questions&lt;/a&gt;, most of these questions have been asked in a real interview!.&lt;/p&gt;

&lt;p&gt;I would suggest you create a free account at judocoder.com and start practicing your skills. You will be prepared in no time!..&lt;/p&gt;

&lt;p&gt;No matter what path you choose, now is the time to prepare for the future—by becoming a full-stack web developer.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>GitHub Actions</title>
      <author>Emily</author>
      <pubDate>Fri, 26 Nov 2021 16:56:28 +0000</pubDate>
      <link>https://dev.to/hphan9/set-up-git-hub-action-546c</link>
      <guid>https://dev.to/hphan9/set-up-git-hub-action-546c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;What is GitHub Action? According to Github, it is a series of commands that can be executed when a special event (defined by user) occurred. The series of commands is put in the context of &lt;code&gt;workflow&lt;/code&gt; and every steps can be seen as a &lt;code&gt;job&lt;/code&gt;. &lt;br&gt;
This week, I had a chance to explore GitHub Actions for my Shinny-SSG project and it is a great improvement for my application.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#define-workflows"&gt;
  &lt;/a&gt;
  Define Workflows
&lt;/h1&gt;

&lt;p&gt;I created my first workflow by using Github's default workflow template for .Net project. Github will create a YAML file in the &lt;code&gt;.github/workflows&lt;/code&gt; directory inside my git repository. You can read more about it &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"&gt;here&lt;/a&gt;.&lt;br&gt;
My dotnet.yml file :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;name: .NET

on:
  push:
    branches: &lt;span class="o"&gt;[&lt;/span&gt; main &lt;span class="o"&gt;]&lt;/span&gt;
  pull_request:
    branches: &lt;span class="o"&gt;[&lt;/span&gt; main &lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;jobs&lt;/span&gt;:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 3.1 
      uses: actions/setup-dotnet@v1 
      with: 
       dotnet-version: 3.1.x
    - name: Setup .NET Core 5.0
      uses: actions/setup-dotnet@v1
      with:
       dotnet-version: 5.0.x
    - name: dotnet-format
      run: dotnet tool &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; dotnet-format &lt;span class="nt"&gt;--version&lt;/span&gt; 5.1.225507
    - name: Restore dependencies
      run: dotnet restore shinny-ssg/shinny-ssg.sln
    - name: Build
      run: dotnet build shinny-ssg/shinny-ssg.sln &lt;span class="nt"&gt;--no-restore&lt;/span&gt; 
    - name: Test
      run: dotnet &lt;span class="nb"&gt;test &lt;/span&gt;shinny-ssgTests &lt;span class="nt"&gt;--no-build&lt;/span&gt; &lt;span class="nt"&gt;--verbosity&lt;/span&gt; normal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;p&gt;Later, I tested my Github Actions by making a pull request to my origin repository. It worked like a charm and it denied merging if my PR did not pass the test. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XodPJHIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbsvomsrcqq6esn7gie0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XodPJHIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbsvomsrcqq6esn7gie0.png" alt="Image description" width="880" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also made a &lt;a href="https://github.com/Qiwen-Yu/TextHTMLPress/pull/17"&gt;PR&lt;/a&gt; for my classmate's project. It also worked as expected.  &lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Building a real-time web application with Materialize and AdonisJS</title>
      <author>Bobby Iliev</author>
      <pubDate>Fri, 26 Nov 2021 16:22:17 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/building-a-real-time-web-application-with-materialize-and-adonisjs-2ief</link>
      <guid>https://dev.to/bobbyiliev/building-a-real-time-web-application-with-materialize-and-adonisjs-2ief</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this tutorial, we are going to build a web application using &lt;a href="https://adonisjs.com/"&gt;AdonisJS&lt;/a&gt; and integrate it with &lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt; to create a real-time dashboard based on streaming data using standard SQL.&lt;/p&gt;

&lt;p&gt;Materialize lets you define views you want to maintain on your data, just as you would with any SQL table, and then get the results in real-time, unlike traditional databases which frequently act as if they've never been asked that question before.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;You need to have the following things installed before getting started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-docker/"&gt;Install Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/download/package-manager"&gt;Install Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-materialize"&gt;
  &lt;/a&gt;
  What is Materialize
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt; is a streaming database&lt;/strong&gt; that takes data coming from sources like Kafka, PostgreSQL, S3 buckets, and more and allows you to effectively transform it in real-time using SQL.&lt;/p&gt;

&lt;p&gt;Unlike a traditional database, Materialize is able to incrementally maintain views on top of streaming data, providing fresh and correct results as new data arrives. This means that, instead of recomputing the view from scratch every time it needs to be updated, it only does work proportional to the changes in its inputs, so it is fast and efficient.&lt;/p&gt;

&lt;p&gt;In the context of web development, Materialize can be used as a backend to power real-time applications (as we'll see in this demo)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-a-materialize-demo"&gt;
  &lt;/a&gt;
  Running a Materialize Demo
&lt;/h2&gt;

&lt;p&gt;For the sake of this tutorial we are going to run the following Materialize Demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/mz-http-logs"&gt;Materialize - Log Parsing Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The setup of the demo is the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vyhmx_PL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/141309644-d80cffe4-39f9-4afa-a211-907f9de7d74e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vyhmx_PL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/141309644-d80cffe4-39f9-4afa-a211-907f9de7d74e.png" alt="Materialize log parsing demo diagram" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would not get into too much details here, but if you have not gone through this demo before, make sure to read it!&lt;/p&gt;

&lt;p&gt;To run the demo, follow these steps:&lt;/p&gt;

&lt;p&gt;First things first, before you could run the demo, you need to clone the repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/mz-http-logs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Once that is done, switch to the repository directory:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mz-http-logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then start all services:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, you would have your Materialize instance up and running. Next we will prepare our AdonisJS installation and use AdonisJS to create our Materialize sources and views!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-adonisjs"&gt;
  &lt;/a&gt;
  What is AdonisJS
&lt;/h1&gt;

&lt;p&gt;AdonisJS is a web framework for Node.js. It includes everything that you would need to create a fully functional web application or an API.&lt;/p&gt;

&lt;p&gt;AdonisJS has been inspired by Laravel and it has its own ORM, Auth support, and a CLI tool called Ace which is very similar to Artisan.&lt;/p&gt;

&lt;p&gt;At the end we would extend the Log parsing Materialize demo and have the following setup:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_vc5dnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142433682-36085296-0292-416d-811a-3d25be08fa24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_vc5dnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142433682-36085296-0292-416d-811a-3d25be08fa24.png" alt="Streaming Data with AdonisJS and Materialize " width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-adonisjs"&gt;
  &lt;/a&gt;
  Install AdonisJS
&lt;/h1&gt;

&lt;p&gt;Let's start by installing AdonisJS. To do so, you would need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init adonis-ts-app@latest hello-materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you run that, you will be asked to select a project structure. You will be able to choose between an API, Web App, and a minimal possible AdonisJS app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CUSTOMIZE PROJECT
❯ Select the project structure …  Press &amp;lt;ENTER&amp;gt; to select
  api   (Tailored for creating a REST API server)
❯ web   (Traditional web application with server-rendered templates)
  slim  (A smallest possible AdonisJS application)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this tutorial let's go with the &lt;code&gt;web&lt;/code&gt; app! Using your arrow keys select &lt;code&gt;web&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;After that you will be asked to choose a name for the project, I will leave this as &lt;code&gt;hello-materialize&lt;/code&gt; but feel free to choose a different name.&lt;/p&gt;

&lt;p&gt;I will then press enter and say yes to the rest of the settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;❯ Enter the project name · hello-materialize
❯ Setup eslint? (y/N) · y
❯ Configure webpack encore for compiling frontend assets? (y/N) › y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will instantiate the project and might take up to a minute to complete:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmkJCJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142430318-49200f63-394e-4698-aed0-7461d8a8a060.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmkJCJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142430318-49200f63-394e-4698-aed0-7461d8a8a060.png" alt="AdonisJS initialization" width="880" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once ready, you can &lt;code&gt;cd&lt;/code&gt; into the new project directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd hello-materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then start the webserver:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace serve --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are coming from the Laravel world, this would be just like running &lt;code&gt;php artisan serve&lt;/code&gt;. The &lt;code&gt;ace&lt;/code&gt; CLI tool is just like &lt;code&gt;artisan&lt;/code&gt; and comes with a lot of the same functionalities.&lt;/p&gt;

&lt;p&gt;To check all of the &lt;code&gt;ace&lt;/code&gt; commands, you can run: &lt;code&gt;node ace&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-lucid"&gt;
  &lt;/a&gt;
  Installing Lucid
&lt;/h1&gt;

&lt;p&gt;Lucid is the AdonisJS ORM. It is quite similar to Laravel Eloquent.&lt;/p&gt;

&lt;p&gt;Lucid comes with an Active Record ORM, Query Builder, Migrations, Seeds, and Factories.&lt;/p&gt;

&lt;p&gt;Let's go ahead and install it! To do so, just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @adonisjs/lucid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, you would need to do a quick configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-lucid"&gt;
  &lt;/a&gt;
  Configuring Lucid
&lt;/h2&gt;

&lt;p&gt;In order to configure Lucid, you need to run the following &lt;code&gt;ace&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace configure @adonisjs/lucid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be asked to select the database driver that you want to use. As Materialize is wire-compatible with PostgreSQL, you can connect to it using any &lt;code&gt;pg&lt;/code&gt; driver; here, make sure to select PostgreSQL!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![AdonisJS lucid configuration](https://user-images.githubusercontent.com/21223421/142431728-ac88085b-34cb-4ebb-83c7-b0cae9fb455d.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you will be asked to select where you want to display the configuration instructions. I chose &lt;code&gt;In the terminal&lt;/code&gt;, which prints out the necessary environment variables that you have to add to your &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-materialize-env-variables"&gt;
  &lt;/a&gt;
  Configure the Materialize env variables
&lt;/h2&gt;

&lt;p&gt;In order to let our AdonisJS application connect to Materialize, we need to change the &lt;code&gt;PG_*&lt;/code&gt; details in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;With your favorite text editor, open the &lt;code&gt;.env&lt;/code&gt; file and update the &lt;code&gt;PG_&lt;/code&gt; environment variables to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_CONNECTION=pg
PG_HOST=localhost
PG_PORT=6875
PG_USER=materialize
PG_PASSWORD=
PG_DB_NAME=materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will allow AdonisJS to connect to Materialize just as it would when connecting to PostgreSQL.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that Materialize doesn’t yet support the full system catalog of PostgreSQL (we're working on it!), which means that ORMs like Lucid, Prisma, Sequelize, or TypeORM might fail during some attempts to interact with Materialize. As we work to broaden &lt;a href="https://github.com/MaterializeInc/materialize/issues/2157"&gt;&lt;code&gt;pg_catalog&lt;/code&gt; coverage&lt;/a&gt;, the integration with these tools will gradually improve!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-controller"&gt;
  &lt;/a&gt;
  Creating a Controller
&lt;/h1&gt;

&lt;p&gt;Let's create a controller where we will add the functionality that would allow us to connect to Materialize!&lt;/p&gt;

&lt;p&gt;As the Materialize demo is simulating an application log with a lot of visitors, let's call our AdonisJS controller &lt;code&gt;VisitorsController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace make:controller VisitorsController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a controller file at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app/Controllers/Http/VisitorsController.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's create the routes that we would need!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-adonisjs-routes"&gt;
  &lt;/a&gt;
  Creating the AdonisJS routes
&lt;/h2&gt;

&lt;p&gt;Your routes file is stored at &lt;code&gt;start/routes.ts&lt;/code&gt;. In there we can specify our application URLs and map them to different controllers and methods!&lt;/p&gt;

&lt;p&gt;We do not yet have the methods ready, but we know that we would need the following routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/source&lt;/code&gt;: When visited, this route would create a Materialize &lt;a href="https://materialize.com/docs/sql/create-source/"&gt;source&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/view&lt;/code&gt;: When visited, this route would create a &lt;a href="https://materialize.com/docs/sql/create-source/"&gt;materialized view&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/visitors&lt;/code&gt;: This route would return an event stream with all of the latest changes to our materialized view&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt;: This will be the landing page where we will display the streaming data that we are getting from the &lt;code&gt;/visitors&lt;/code&gt; endpoint and Materialize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open your routes file at &lt;code&gt;start/routes.ts&lt;/code&gt; and update it so that it has the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Route from '@ioc:Adonis/Core/Route'

Route.get('/', 'VisitorsController.index')
Route.get('/visitors', 'VisitorsController.visitors')
Route.get('/source', 'VisitorsController.source')
Route.get('/view', 'VisitorsController.view')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's add a method that would allow us to create a Materialize source as described in the &lt;a href="https://github.com/bobbyiliev/mz-http-logs"&gt;Materialize Log Parsing Demo&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-materialize-source-from-logs"&gt;
  &lt;/a&gt;
  Creating a Materialize Source from logs
&lt;/h2&gt;

&lt;p&gt;If you were accessing Materialize directly via a SQL client (like &lt;code&gt;psql&lt;/code&gt;), in order to access data from a continuously produced log file, you would execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;FILE&lt;/span&gt; &lt;span class="s1"&gt;'/log/requests'&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;REGEX&lt;/span&gt; &lt;span class="s1"&gt;'(?P&amp;lt;ip&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}&lt;/span&gt;&lt;span class="se"&gt;\.\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}&lt;/span&gt;&lt;span class="se"&gt;\.\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}&lt;/span&gt;&lt;span class="se"&gt;\.\d&lt;/span&gt;&lt;span class="s1"&gt;{1,3}) - - &lt;/span&gt;&lt;span class="se"&gt;\[&lt;/span&gt;&lt;span class="s1"&gt;(?P&amp;lt;ts&amp;gt;[^]]+)&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;&lt;span class="s1"&gt; "(?P&amp;lt;path&amp;gt;(?:GET /search/&lt;/span&gt;&lt;span class="se"&gt;\?&lt;/span&gt;&lt;span class="s1"&gt;kw=(?P&amp;lt;search_kw&amp;gt;[^ ]*) HTTP/&lt;/span&gt;&lt;span class="se"&gt;\d\.\d&lt;/span&gt;&lt;span class="s1"&gt;)|(?:GET /detail/(?P&amp;lt;product_detail_id&amp;gt;[a-zA-Z0-9]+) HTTP/&lt;/span&gt;&lt;span class="se"&gt;\d\.\d&lt;/span&gt;&lt;span class="s1"&gt;)|(?:[^"]+))" (?P&amp;lt;code&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="s1"&gt;{3}) -'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how we could do that via AdonisJS!&lt;/p&gt;

&lt;p&gt;First, open the &lt;code&gt;app/Controllers/Http/VisitorsController.ts&lt;/code&gt; file with your favorite text editor.&lt;/p&gt;

&lt;p&gt;The file would have the following content initially:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'

export default class VisitorsController {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few things that we would want to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import Lucid:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Database from '@ioc:Adonis/Lucid/Database'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then inside the VisitorsController class, let's create a method called &lt;code&gt;source&lt;/code&gt; and
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Lucid/Database&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;VisitorsController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Using Ludic to connect to Materialize, we are executing a CREATE SOURCE statement&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`CREATE SOURCE requests
                FROM FILE '/log/requests' WITH (tail = true)
                FORMAT REGEX '(\\?P&amp;lt;ip&amp;gt;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) - - \[(\\?P&amp;lt;ts&amp;gt;[^]]+)\] "(\\?P&amp;lt;path&amp;gt;(\\?:GET /search/\\\?kw=(\\?P&amp;lt;search_kw&amp;gt;[^ ]*) HTTP/\d\.\d)|(\\?:GET /detail/(\\?P&amp;lt;product_detail_id&amp;gt;[a-zA-Z0-9]+) HTTP/\d\.\d)|(\\?:[^"]+))" (\\?P&amp;lt;code&amp;gt;\d{3}) -';`&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you were to visit the &lt;code&gt;/source&lt;/code&gt; URL via your browser (&lt;code&gt;http://127.0.0.1:3333/source&lt;/code&gt;) it would create your Materialize source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FWItRtrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142441564-24faddfb-5b3d-4ef8-8653-5156bcbea747.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FWItRtrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/142441564-24faddfb-5b3d-4ef8-8653-5156bcbea747.png" alt="Source created" width="514" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-materialize-view"&gt;
  &lt;/a&gt;
  Creating a Materialize View
&lt;/h2&gt;

&lt;p&gt;You may be familiar with materialized views from the world of traditional databases like PostgreSQL, which are essentially cached queries. The unique feature here is the materialized view we are about to create is automatically kept up-to-date.&lt;/p&gt;

&lt;p&gt;Let's do the same thing as before, but to create a materialized view based on our file source! To do that, let's create a method called &lt;code&gt;view&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Add this right after the end of the &lt;code&gt;source&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Using Ludic to connect to Materialize, we are executing a CREATE VIEW statement&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`CREATE OR REPLACE MATERIALIZED VIEW unique_visitors AS
             SELECT count(DISTINCT ip) FROM requests;`&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our materialized view would show the count of the unique visitors flowing through our demo application.&lt;/p&gt;

&lt;p&gt;To create the view, visit the &lt;code&gt;/view&lt;/code&gt; URL via your browser (eg. &lt;code&gt;http://127.0.0.1:3333/view&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;With that, our view will be created and we can move on to the next step!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-event-stream"&gt;
  &lt;/a&gt;
  Creating an event stream
&lt;/h2&gt;

&lt;p&gt;You can query the new materialized view, that we've just created, as usual with a standard &lt;code&gt;SELECT&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;unique_visitors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, in order to take full advantage of the incrementally updated materialized view right from our AdonisJS app, rather than querying Materialize with a standard &lt;code&gt;SELECT&lt;/code&gt; to get the state of the view at a point in time, we will use a &lt;code&gt;TAIL&lt;/code&gt; statement to request a stream of updates as the view changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;visitors&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// First we set a header to identify that this would be an event stream&lt;/span&gt;
        &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/event-stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Then we declare a TAIL cursor&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BEGIN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECLARE visitors_c CURSOR FOR TAIL unique_visitors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Finally we use FETCH in a loop to retrieve each batch of results as soon as it is ready&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FETCH ALL visitors_c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`data: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;\n\n`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about &lt;code&gt;TAIL&lt;/code&gt;, make sure to check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/tail/"&gt;Materialize &lt;code&gt;TAIL&lt;/code&gt; statement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you were to now visit the &lt;code&gt;/visitors&lt;/code&gt; URL via your browser, you would see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1zQ-3kC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142487272-4ae77597-b871-453d-9b79-efbc5a534d5a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1zQ-3kC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142487272-4ae77597-b871-453d-9b79-efbc5a534d5a.gif" alt="adonisjs Materialize streaming data" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's create a view where we would use the &lt;code&gt;/visitors&lt;/code&gt; endpoint as an event source and continuously update our web page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#displaying-the-number-of-unique-visitors-on-the-frontend"&gt;
  &lt;/a&gt;
  Displaying the number of unique visitors on the frontend
&lt;/h3&gt;

&lt;p&gt;First, before we get started, make sure that you've executed the following command to configure Encore which is used to compile and serve the frontend assets for your AdonisJS app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace configure encore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a new file at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resources/views/visitors.edge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Materialize and AdonisJS&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  @entryPointStyles('app')
  @entryPointScripts('app')
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Hi there! &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        The number of unique visitors is: &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://127.0.0.1:3333/visitors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;eventSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;//const count = omit(data, 'mz_timestamp', 'mz_diff', 'mz_progressed')&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mz_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mz_progressed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mz_diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Old count: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New count: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;countDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown of the main things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;new EventSource&lt;/code&gt;: First we define a new &lt;code&gt;EventSource&lt;/code&gt; and specify our &lt;code&gt;/visitors&lt;/code&gt; endpoint.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;eventSource.onmessage&lt;/code&gt;: Then we listen for new messages to show in the EventStream.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JSON.parse(e.data)&lt;/code&gt;: After that we parse our data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;data.forEach&lt;/code&gt;: Finally we run a loop and update the total unique visitors counter on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if you were to visit your AdonisJS application you would see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRyts195--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142488313-234fe614-c9f8-4e9a-bf88-e116444167fc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRyts195--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/142488313-234fe614-c9f8-4e9a-bf88-e116444167fc.gif" alt="adonisjs Materialize event source" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, rather than making a huge amount of AJAX requests, we just tap into the stream and keep our web page up to date with the latest changes from Materialize!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is pretty much it! You've now built a web application using AdonisJS that connects to Materialize and pulls the number of unique visitors from your application as new data is logged.&lt;/p&gt;

&lt;p&gt;As a next step, make sure to head over to the Materialize Docs and try out some of the available demos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/demos/"&gt;Materialize Demos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about AdonisJS, you can also find the documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.adonisjs.com/guides/context"&gt;AdonisJS documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find a link to the AdonisJS source code from this demo here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/mz-adonisjs-demo"&gt;Streaming Data wiht Materialize and AdonisJS Demo files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about Streaming SQL, make sure to check out this post here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/streaming-sql-intro/"&gt;Streaming SQL: What is it, why is it useful?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope that this was helpful!&lt;/p&gt;

</description>
      <category>node</category>
      <category>database</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Preparing for a Technical Programming Interview: The Ultimate Guide
</title>
      <author>Shaheer</author>
      <pubDate>Fri, 26 Nov 2021 16:11:05 +0000</pubDate>
      <link>https://dev.to/shaheer912/preparing-for-a-technical-programming-interview-the-ultimate-guide-2e5d</link>
      <guid>https://dev.to/shaheer912/preparing-for-a-technical-programming-interview-the-ultimate-guide-2e5d</guid>
      <description>&lt;p&gt;Technical interviews are one of the most difficult aspects of the hiring process. Candidates have to demonstrate their knowledge in a high-pressure situation. To make it through a technical interview, you'll need a lot of preparation and practice. Here, are some tips on how to prepare for a technical programming interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice Technical Interview Questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the best ways to prepare for technical interviews is to practice. This gives you the chance to explore different topics and learn how to explain your knowledge in an interview setting. Practice will also help you build confidence and feel more comfortable in the interview.&lt;/p&gt;

&lt;p&gt;Here are some questions for you to practice: &lt;/p&gt;

&lt;p&gt;1) What is an Abstract class?&lt;br&gt;
2) How would you solve the following problem: "Write a program that finds the median value in an array of numbers?"&lt;br&gt;
3) What is the difference between a regular expression and a substring?&lt;br&gt;
4) How do you check if an integer is divisible by another integer?&lt;br&gt;
5) How is an IDE different from a compiler?&lt;br&gt;
6) What are some of your strengths?&lt;br&gt;
7) What are some of your weaknesses?&lt;br&gt;
8) What is the difference between a class and an object?&lt;br&gt;
9) What does "Foo(int x)" mean?&lt;br&gt;
10) What does "Foo(3, 5)" mean?&lt;br&gt;
11) What does "Foo()" mean?&lt;br&gt;
12) What does "Foo(int x, int y)" mean?&lt;br&gt;
13) What does "Foo()" mean?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Know Your Data Structures and Algorithms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data structures and algorithms are one of the most important topics related to technical programming interviews.&lt;br&gt;
Data structures are the way that information is organized in a computer program. How information is arranged impacts your program's performance.&lt;/p&gt;

&lt;p&gt;Algorithms are the processes that computer programs use to solve computational problems. Knowing your data structures and algorithms is essential for a technical programming interview because you will be asked about them.&lt;br&gt;
For example, if you're given a question like: "What is the shortest distance between two points in a diamond?" You need to be able to answer it and know the algorithm needed to solve the problem.&lt;/p&gt;

&lt;p&gt;Asking questions about how data is organized and what algorithms can be used to solve problems will help you prepare for a technical programming interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; – The Best Coding Interview Preparation Website you can trust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Among many other platforms, JudoCoder is the most reliable and efficient coding interview preparation site. Here, many coding problem-solving programs, challenges, and question-answer challenges prepare you well for your upcoming interview.&lt;br&gt;
JudoCoder has a lot of coding challenge questions for your practice and knowledge. They will strengthen your programming concepts and skills. The challenges, and questions focus on various coding aspects such as algorithms, arrays, data structures, BST, Anagrams, recursion, backtracking, Hashmaps, dictionaries, string manipulation, and more.&lt;/p&gt;

&lt;p&gt;Familiarize Yourself with the Programming Language and Paradigms&lt;br&gt;
Programming languages are integral to the job search. More than 92% of companies use programming languages in their hiring process. If you're not familiar with the various programming languages, it's time to learn.&lt;/p&gt;

&lt;p&gt;Learning the syntax and paradigms for programming languages helps you answer questions quickly. You'll be able to speak the language of the company you're interviewing with. Plus, knowing the language will help you understand the company culture and dynamics better.&lt;/p&gt;

&lt;p&gt;If you're interviewing with a company that uses Ruby on Rails, you'll need to learn Ruby. If they use JavaScript, you'll need to learn JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Aware of Different Styles of Questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may be asked technical questions in a variety of formats. Some interviewers will ask you to solve a problem on the spot, while others will give you a problem to prepare for in advance.&lt;br&gt;
You may be given a short question and a long question. The short question will require a few lines of code, while the long question could be more than 10 lines.&lt;/p&gt;

&lt;p&gt;The interviewer might also give you a computer science problem to solve. This could be anything from sorting algorithms to deduction puzzles.&lt;/p&gt;

&lt;p&gt;It’s important to practice the different types of questions so you can be prepared for anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prepare for Non-Coding Questions&lt;/strong&gt;&lt;br&gt;
Non-coding questions are meant to determine how you think, problem-solve, and communicate.&lt;/p&gt;

&lt;p&gt;These questions are more subjective in nature, but there are some things you can do to prepare.&lt;/p&gt;

&lt;p&gt;One way to prepare for these questions is to practice your public speaking skills. This will help you build confidence in your abilities and give you a better understanding of how to answer these questions.&lt;/p&gt;

&lt;p&gt;Luckily, there are many ways to practice public speaking. Some organizations have public speaking classes for people who are interested in becoming a better speaker or who want to improve their skills. You can also watch videos of speeches, practice out loud with friends, or even give your own speech in front of a mirror.&lt;/p&gt;

&lt;p&gt;When it comes time for the interview, you'll be more confident in your abilities and prepared for the questions. This will make the interview more comfortable and less stressful for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best way to prepare for a technical interview is to practice. If you're a beginner, find a good tutorial and follow it through. If you're a more advanced programmer, try practicing with sample coding problems or typing out an algorithm.&lt;/p&gt;

&lt;p&gt;The good news is, &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; provides handpicked selection of all sorts of &lt;a href="https://judocoder.com"&gt;data structures and algorithm questions&lt;/a&gt;, most of these questions have been asked in a real interview!.&lt;/p&gt;

&lt;p&gt;I would suggest you create a free account at judocoder.com and start practicing your skills. You will be prepared in no time!..&lt;br&gt;
No matter what you do, make sure you practice! You'll be happy you did when it's time for your interview.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Best Ultimate Guide To Build A Random Quote Generator 2022</title>
      <author>Jai Krishna</author>
      <pubDate>Fri, 26 Nov 2021 16:08:16 +0000</pubDate>
      <link>https://dev.to/jaikt/best-ultimate-guide-to-build-a-random-quote-generator-2022-8m4</link>
      <guid>https://dev.to/jaikt/best-ultimate-guide-to-build-a-random-quote-generator-2022-8m4</guid>
      <description>&lt;p&gt;Hey Everyone 👋, today’s article is aimed at beginners trying to build a random quote generator using JavaScript. This will definitely make you understand the interaction between the frontend and backend and how they work on a web browser.&lt;/p&gt;

&lt;p&gt;In my previous post, I had shared about Amazing Text To Speech Converter With HTML, CSS &amp;amp; JavaScript (2021) – RoyalityFree Blog. I received a great response to that, so I thought why not share more of my projects for free 🎉.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I've worked very hard on this project and the output, was making it free 🤗. You can too support me in return for free by stargazing the official repository &lt;a href="https://github.com/RoyalityFreeWebHosting/RandomQuoteGenerator/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for this project, we’ll build a random quote generator that will display a quote fetched from an API on a button click or a default set. To get started, like always you’ll need three essential things that are forever useful for any sort of project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A web browser&lt;/li&gt;
&lt;li&gt;A code editor&lt;/li&gt;
&lt;li&gt;A desire boost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this tutorial, I will use the Microsoft Edge browser, Visual Studio Code as my code editor, and most importantly a boost in my desire to build something till the end! If you don’t seem familiar with my suggestions, feel free to use any other alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-quote-generator-understanding"&gt;
  &lt;/a&gt;
  Random Quote Generator (Understanding)
&lt;/h2&gt;

&lt;p&gt;A Random Quote Generator is proficient in pulling quotes randomly from an API, any database, or plainly from an array. We will be designing a Random Quote Generator from scratch using HTML, CSS, JavaScript, and free-quotes API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxEMRFWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orhykfs2p4t7usi6k13h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxEMRFWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orhykfs2p4t7usi6k13h.png" alt="Image description" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-quote-generator-building"&gt;
  &lt;/a&gt;
  Random Quote Generator (Building)
&lt;/h2&gt;

&lt;p&gt;For every project, we need some basic core files. In this case, we’ll need three files with alike extensions, i.e &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;. Once you’ve organized them in a folder (e.g &lt;code&gt;random-quote-generator&lt;/code&gt;), you are good to paste the source code from the following sections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdLJxx-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w7mnw23ae81egwii7uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdLJxx-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w7mnw23ae81egwii7uj.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can optionally download the whole source code of this Random Quote Generator from the available mirrors, at the end of the article.&lt;/p&gt;

&lt;p&gt;Firstly, create an HTML file with a filename &lt;code&gt;index.html&lt;/code&gt; and paste the following code into your HTML file. &lt;strong&gt;Save It&lt;/strong&gt;, you’ve to create a file with an &lt;code&gt;.html&lt;/code&gt; extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;!-- Meta Tags Start, For Reference https://www.w3schools.com/tags/tag_meta.asp --&amp;gt;
&amp;lt;meta charset="utf-8"&amp;gt;
&amp;lt;meta name="description" content="Free random quotes generator, either inspirational or motivational."&amp;gt;
&amp;lt;meta name="keywords" content="quotes, random quotes, random quote generator"&amp;gt;
&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
&amp;lt;meta name="msapplication-TileColor" content="#ffffff"&amp;gt;
&amp;lt;meta name="msapplication-TileImage" content="/ms-icon-144x144.png"&amp;gt;
&amp;lt;meta name="theme-color" content="#ffffff"&amp;gt;
&amp;lt;!-- Meta Tags End--&amp;gt;
&amp;lt;!-- Title (Change This If Publlic)--&amp;gt;
&amp;lt;title&amp;gt;Random Quotes | RoyalityFree&amp;lt;/title&amp;gt;
&amp;lt;!-- Link Custom Stylesheet And Fonts Start --&amp;gt;
&amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
&amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0v4LLanw2qksYuRlEzO+tcaEPQogQ0KaoGN26/zrn20ImR1DfuLWnOo7aBA==" crossorigin="anonymous" referrerpolicy="no-referrer" /&amp;gt;
&amp;lt;link rel="preconnect" href="https://fonts.googleapis.com"&amp;gt;
&amp;lt;link rel="preconnect" href="https://fonts.gstatic.com" crossorigin&amp;gt;
&amp;lt;link href="https://fonts.googleapis.com/css2?family=Poppins&amp;amp;display=swap" rel="stylesheet"&amp;gt;
&amp;lt;!-- Link Custom Stylesheet And Fonts End--&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;!-- Start Container --&amp;gt;
&amp;lt;div class="wrapper"&amp;gt;
&amp;lt;!-- Start Header --&amp;gt;
&amp;lt;header&amp;gt;
    Quote For &amp;lt;span id="getday"&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;!-- End Header --&amp;gt;
&amp;lt;!-- Start Content --&amp;gt;
&amp;lt;div class="content"&amp;gt;
&amp;lt;div class="quote-area"&amp;gt;
&amp;lt;i class="fas fa-quote-left"&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;p class="quote"&amp;gt;Protecting your mind, body and spirit from negativity is a sign of self-love.&amp;lt;/p&amp;gt;
&amp;lt;i class="fas fa-quote-right"&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="author"&amp;gt;
&amp;lt;span&amp;gt;__&amp;lt;/span&amp;gt;
&amp;lt;span class="name"&amp;gt;Nitin Namdeo&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="buttons"&amp;gt;
&amp;lt;div class="features"&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li class="speech"&amp;gt;&amp;lt;i class="fas fa-volume-up"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class="copy" onclick="onCopy()"&amp;gt;&amp;lt;i class="fas fa-copy"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class="twitter"&amp;gt;&amp;lt;i class="fab fa-twitter"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;button&amp;gt;Another&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- End Content --&amp;gt;
&amp;lt;!-- Get Script--&amp;gt;
&amp;lt;script src="script.js"&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secondly, create a CSS file with the filename &lt;code&gt;style.css&lt;/code&gt; and paste the following code into the file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;code&gt;.css&lt;/code&gt; an extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Built By RoyalityFree | Codes Initiative */
*{
    margin:0;
    padding:0;
    box-sizing:border-box;
    font-family:poppins,sans-serif
}
body{
    display:flex;
    align-items:center;
    justify-content:center;
    min-height:100vh;
    padding:0 10px;
    background-image: radial-gradient(#31e9cb,#a3f5e8,#31e9cb);
    user-select: none;
}
::selection{
    color:#fff;
    background:#1AE78D
}
.wrapper{
    width:605px;
    background:#fff;
    border-radius:15px;
    padding:30px 30px 25px;
    box-shadow:0 12px 35px rgba(0,0,0,.1)
}
header,.content :where(i,p,span){
    color:#102137
}
.wrapper header{
    font-size:35px;
    font-weight:600;
    text-align:center
}
.wrapper .content{
    margin:35px 0
}
.content .quote-area{
    display:flex;
}
.quote-area i{
    font-size:15px
}
.quote-area i:first-child{
    margin:3px 0 0 0
}
.quote-area i:last-child{
    display:flex;
    margin:0 0 3px 10px;
    align-items:flex-end;
}
.quote-area .quote{
    font-size:22px;
    text-align:center;
}
.content .author{
    display:flex;
    font-size:18px;
    margin-top:20px;
    font-style:italic;
    justify-content:flex-end
}
.author span:first-child{
    margin:-6px 5px 0 0;
    font-family:monospace;
}
.buttons .features{
    display:flex;
    margin-top:20px;
    align-items:center;
    justify-content:space-between;
}
.features ul{
    display:flex
}
.features ul li{
    margin:0 5px;
    height:47px;
    width:47px;
    display:flex;
    cursor:pointer;
    color:#1AE78D;
    list-style:none;
    border-radius:50%;
    align-items:center;
    justify-content:center;
    border:2px solid #1AE78D;
    transition:all .3s ease
}
.features ul li:first-child{
    margin-left:0
}
ul li:is(:hover,.active){
    color:#fff;
    background:#1AE78D
}
ul .speech.active{
    pointer-events:none
}
.buttons button{
    border:none;
    color:#fff;
    outline:none;
    font-size:16px;
    cursor:pointer;
    padding:13px 22px;
    border-radius:15px;
    background:#1AE78D
}
.buttons button:hover{
    background: #4DD99C;
}
.buttons button.loading{
    opacity:.7;
    pointer-events:none
}
@media(max-width:728px){
    .wrapper{
        padding:25px 25px 20px;
        margin: 15px 15px 15px 15px;    
    }
    .wrapper header{
        font-size:29px
    }
    .quote-area .quote{
        font-size:20px;
        word-break:keep-all
    }
    .content .author{
        font-size:16px
    }
    .quote-area i{
        font-size:12px
    }
    .features ul li{
        margin:0 3px;
        height:45px;
        width:45px
    }
    .buttons button{
        font-size:15px;
        padding:12px 20px
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, create a JavaScript file with a filename &lt;code&gt;script.js&lt;/code&gt; and paste the following code into your JavaScript file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;code&gt;.js&lt;/code&gt; an extension at last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Built By RoyalityFree | Codes Initiative

const quoteText = document.querySelector(".quote"),
    quoteBtn = document.querySelector("button"),
    authorName = document.querySelector(".name"),
    speechBtn = document.querySelector(".speech"),
    copyBtn = document.querySelector(".copy"),
    pingTwitter = document.querySelector(".twitter"),
    synth = speechSynthesis;

function randomQuote() {
    quoteBtn.classList.add("loading");
    quoteBtn.innerText = "Loading 🎉";
    fetch("https://free-quotes-api.herokuapp.com/").then(response =&amp;gt; response.json()).then(result =&amp;gt; {
        quoteText.innerText = result.quote;
        authorName.innerText = result.author || "No Author";
        quoteBtn.classList.remove("loading");
        quoteBtn.innerText = "Another";
    });
}
speechBtn.addEventListener("click", () =&amp;gt; {
    if (!quoteBtn.classList.contains("loading")) {
        let utterance = new SpeechSynthesisUtterance(`${quoteText.innerText} by ${authorName.innerText}`);
        synth.speak(utterance);
        setInterval(() =&amp;gt; {
            !synth.speaking ? speechBtn.classList.remove("active") : speechBtn.classList.add("active");
        }, 10);
    }
});
copyBtn.addEventListener("click", () =&amp;gt; {
    navigator.clipboard.writeText(quoteText.innerText);
});
pingTwitter.addEventListener("click", () =&amp;gt; {
    let twitterUrl = `https://twitter.com/intent/tweet?url=${quoteText.innerText}`;
    window.open(twitterUrl, "_blank");
});
quoteBtn.addEventListener("click", randomQuote);

pingTwitter.addEventListener("click", () =&amp;gt; {
    let twitterUrl = `https://twitter.com/intent/tweet?url=${quoteText.innerText}`;
    window.open(twitterUrl, "_blank");
});
const d = new Date();
const weekday = new Array(7);
weekday[0] = "Sunday";
weekday[1] = "Monday";
weekday[2] = "Tuesday";
weekday[3] = "Wednesday";
weekday[4] = "Thursday";
weekday[5] = "Friday";
weekday[6] = "Saturday";
let day = weekday[d.getDay()];
document.getElementById("getday").innerHTML = day;
function onCopy() {
    alert("Copied Quote Successfully To 📋!");
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all that set in place, we’re ready to check the output of all three files combined to build a powerful webpage. It should do something like this by now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3LxnVKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r42vxqoamzyrcap8w8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3LxnVKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r42vxqoamzyrcap8w8v.png" alt="Image description" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-quote-generator-last-words"&gt;
  &lt;/a&gt;
  Random Quote Generator (Last Words)
&lt;/h2&gt;

&lt;p&gt;That’s it, you’ve now successfully built a Random Quote Generator Webpage in native HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;If your code does not work or you have faced any problem/issue, try downloading the source files from the provided download button below.&lt;/p&gt;

&lt;p&gt;It’s priceless and a &lt;code&gt;.zip&lt;/code&gt; file that will be downloaded and then just extract it to your file manager, server, etc.&lt;/p&gt;



&lt;center&gt;&lt;a href="https://gplinks.co/random-quote-generator" rel="noopener"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vepkagn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6MyzmJa.png" width="200" height="64"&gt;&lt;/a&gt;&lt;/center&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
